{"path":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testBasic() throws Exception {\r\n    // test using ZooKeeper\r\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\r\n    \r\n    ZkController zkController = h.getCoreContainer().getZkController();\r\n    \r\n    // test merge factor picked up\r\n    SolrCore core = h.getCore();\r\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\r\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\r\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\r\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\r\n    writer.close();\r\n    \r\n    lrf.args.put(\"version\", \"2.0\");\r\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\r\n        \"//result[@numFound='0']\");\r\n\r\n    // test escaping of \";\"\r\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\r\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\r\n    assertU(\"does commit work?\", commit());\r\n\r\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\r\n        \"//*[@numFound='0']\");\r\n\r\n    assertU(delI(\"42\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\r\n\r\n    // test allowDups default of false\r\n\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\r\n\r\n    // test deletes\r\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"101\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"105\"), \"allowDups\", \"true\"),\r\n        add(doc(\"id\", \"102\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"103\"), \"allowDups\", \"true\"),\r\n        add(doc(\"id\", \"101\"), \"allowDups\", \"false\"), };\r\n    for (String a : adds) {\r\n      assertU(a, a);\r\n    }\r\n    assertU(commit());\r\n    \r\n    zkServer.shutdown();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // try a reconnect from disconnect\r\n    \r\n    zkServer = new ZkTestServer(zkDir);\r\n    zkServer.run();\r\n    \r\n    // ensure zk still thinks node is up\r\n    assertTrue(zkController.getCloudState().liveNodesContain(zkController.getNodeName()));\r\n    \r\n    // test maxint\r\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    // test big limit\r\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\r\n    assertU(delI(\"102\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\r\n    assertU(delI(\"105\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\r\n    assertU(delQ(\"id:[100 TO 110]\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\r\n\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d27fdb664de1d2da1efdddf2ccf6973dd072c69","date":1287419521,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\r\n  public void testBasic() throws Exception {\r\n    // test using ZooKeeper\r\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\r\n    \r\n    ZkController zkController = h.getCoreContainer().getZkController();\r\n    \r\n    // test merge factor picked up\r\n    SolrCore core = h.getCore();\r\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\r\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\r\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\r\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\r\n    writer.close();\r\n    \r\n    lrf.args.put(\"version\", \"2.0\");\r\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\r\n        \"//result[@numFound='0']\");\r\n\r\n    // test escaping of \";\"\r\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\r\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\r\n    assertU(\"does commit work?\", commit());\r\n\r\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\r\n        \"//*[@numFound='0']\");\r\n\r\n    assertU(delI(\"42\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\r\n\r\n    // test allowDups default of false\r\n\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\r\n\r\n    // test deletes\r\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"101\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"105\"), \"allowDups\", \"true\"),\r\n        add(doc(\"id\", \"102\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"103\"), \"allowDups\", \"true\"),\r\n        add(doc(\"id\", \"101\"), \"allowDups\", \"false\"), };\r\n    for (String a : adds) {\r\n      assertU(a, a);\r\n    }\r\n    assertU(commit());\r\n    \r\n    zkServer.shutdown();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // try a reconnect from disconnect\r\n    zkServer = new ZkTestServer(zkDir);\r\n    zkServer.run();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // ensure zk still thinks node is up\r\n    assertTrue(\r\n        zkController.getCloudState().getLiveNodes().toString(),\r\n        zkController.getCloudState().liveNodesContain(\r\n            zkController.getNodeName()));\r\n\r\n    // test maxint\r\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    // test big limit\r\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\r\n    assertU(delI(\"102\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\r\n    assertU(delI(\"105\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\r\n    assertU(delQ(\"id:[100 TO 110]\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\r\n  }\r\n\n","sourceOld":"  @Test\r\n  public void testBasic() throws Exception {\r\n    // test using ZooKeeper\r\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\r\n    \r\n    ZkController zkController = h.getCoreContainer().getZkController();\r\n    \r\n    // test merge factor picked up\r\n    SolrCore core = h.getCore();\r\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\r\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\r\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\r\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\r\n    writer.close();\r\n    \r\n    lrf.args.put(\"version\", \"2.0\");\r\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\r\n        \"//result[@numFound='0']\");\r\n\r\n    // test escaping of \";\"\r\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\r\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\r\n    assertU(\"does commit work?\", commit());\r\n\r\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\r\n        \"//*[@numFound='0']\");\r\n\r\n    assertU(delI(\"42\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\r\n\r\n    // test allowDups default of false\r\n\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\r\n\r\n    // test deletes\r\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"101\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"105\"), \"allowDups\", \"true\"),\r\n        add(doc(\"id\", \"102\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"103\"), \"allowDups\", \"true\"),\r\n        add(doc(\"id\", \"101\"), \"allowDups\", \"false\"), };\r\n    for (String a : adds) {\r\n      assertU(a, a);\r\n    }\r\n    assertU(commit());\r\n    \r\n    zkServer.shutdown();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // try a reconnect from disconnect\r\n    \r\n    zkServer = new ZkTestServer(zkDir);\r\n    zkServer.run();\r\n    \r\n    // ensure zk still thinks node is up\r\n    assertTrue(zkController.getCloudState().liveNodesContain(zkController.getNodeName()));\r\n    \r\n    // test maxint\r\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    // test big limit\r\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\r\n    assertU(delI(\"102\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\r\n    assertU(delI(\"105\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\r\n    assertU(delQ(\"id:[100 TO 110]\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testBasic() throws Exception {\r\n    // test using ZooKeeper\r\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\r\n    \r\n    ZkController zkController = h.getCoreContainer().getZkController();\r\n    \r\n    // test merge factor picked up\r\n    SolrCore core = h.getCore();\r\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\r\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\r\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\r\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\r\n    writer.close();\r\n    \r\n    lrf.args.put(\"version\", \"2.0\");\r\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\r\n        \"//result[@numFound='0']\");\r\n\r\n    // test escaping of \";\"\r\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\r\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\r\n    assertU(\"does commit work?\", commit());\r\n\r\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\r\n        \"//*[@numFound='0']\");\r\n\r\n    assertU(delI(\"42\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\r\n\r\n    // test allowDups default of false\r\n\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\r\n\r\n    // test deletes\r\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"101\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"105\"), \"allowDups\", \"true\"),\r\n        add(doc(\"id\", \"102\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"103\"), \"allowDups\", \"true\"),\r\n        add(doc(\"id\", \"101\"), \"allowDups\", \"false\"), };\r\n    for (String a : adds) {\r\n      assertU(a, a);\r\n    }\r\n    assertU(commit());\r\n    \r\n    zkServer.shutdown();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // try a reconnect from disconnect\r\n    zkServer = new ZkTestServer(zkDir);\r\n    zkServer.run();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // ensure zk still thinks node is up\r\n    assertTrue(\r\n        zkController.getCloudState().getLiveNodes().toString(),\r\n        zkController.getCloudState().liveNodesContain(\r\n            zkController.getNodeName()));\r\n\r\n    // test maxint\r\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    // test big limit\r\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\r\n    assertU(delI(\"102\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\r\n    assertU(delI(\"105\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\r\n    assertU(delQ(\"id:[100 TO 110]\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testBasic() throws Exception {\r\n    // test using ZooKeeper\r\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\r\n    \r\n    ZkController zkController = h.getCoreContainer().getZkController();\r\n    \r\n    // test merge factor picked up\r\n    SolrCore core = h.getCore();\r\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\r\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\r\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\r\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\r\n    writer.close();\r\n    \r\n    lrf.args.put(\"version\", \"2.0\");\r\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\r\n        \"//result[@numFound='0']\");\r\n\r\n    // test escaping of \";\"\r\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\r\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\r\n    assertU(\"does commit work?\", commit());\r\n\r\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\r\n        \"//*[@numFound='0']\");\r\n\r\n    assertU(delI(\"42\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\r\n\r\n    // test allowDups default of false\r\n\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\r\n\r\n    // test deletes\r\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"101\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"105\"), \"allowDups\", \"true\"),\r\n        add(doc(\"id\", \"102\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"103\"), \"allowDups\", \"true\"),\r\n        add(doc(\"id\", \"101\"), \"allowDups\", \"false\"), };\r\n    for (String a : adds) {\r\n      assertU(a, a);\r\n    }\r\n    assertU(commit());\r\n    \r\n    zkServer.shutdown();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // try a reconnect from disconnect\r\n    zkServer = new ZkTestServer(zkDir);\r\n    zkServer.run();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // ensure zk still thinks node is up\r\n    assertTrue(\r\n        zkController.getCloudState().getLiveNodes().toString(),\r\n        zkController.getCloudState().liveNodesContain(\r\n            zkController.getNodeName()));\r\n\r\n    // test maxint\r\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    // test big limit\r\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\r\n    assertU(delI(\"102\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\r\n    assertU(delI(\"105\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\r\n    assertU(delQ(\"id:[100 TO 110]\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5653af107efef582afd0bc6aff175972359fdd6","date":1293390698,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\r\n  public void testBasic() throws Exception {\r\n    // test using ZooKeeper\r\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\r\n    \r\n    ZkController zkController = h.getCoreContainer().getZkController();\r\n    \r\n    // test merge factor picked up\r\n    SolrCore core = h.getCore();\r\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\r\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\r\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\r\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\r\n    writer.close();\r\n    \r\n    lrf.args.put(\"version\", \"2.0\");\r\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\r\n        \"//result[@numFound='0']\");\r\n\r\n    // test escaping of \";\"\r\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\r\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\r\n    assertU(\"does commit work?\", commit());\r\n\r\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\r\n        \"//*[@numFound='0']\");\r\n\r\n    assertU(delI(\"42\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\r\n\r\n    // test overwrite default of true\r\n\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\r\n\r\n    // test deletes\r\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\r\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\r\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\r\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\r\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\r\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\r\n    for (String a : adds) {\r\n      assertU(a, a);\r\n    }\r\n    assertU(commit());\r\n    \r\n    zkServer.shutdown();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // try a reconnect from disconnect\r\n    zkServer = new ZkTestServer(zkDir);\r\n    zkServer.run();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // ensure zk still thinks node is up\r\n    assertTrue(\r\n        zkController.getCloudState().getLiveNodes().toString(),\r\n        zkController.getCloudState().liveNodesContain(\r\n            zkController.getNodeName()));\r\n\r\n    // test maxint\r\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    // test big limit\r\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\r\n    assertU(delI(\"102\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\r\n    assertU(delI(\"105\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\r\n    assertU(delQ(\"id:[100 TO 110]\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\r\n  }\r\n\n","sourceOld":"  @Test\r\n  public void testBasic() throws Exception {\r\n    // test using ZooKeeper\r\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\r\n    \r\n    ZkController zkController = h.getCoreContainer().getZkController();\r\n    \r\n    // test merge factor picked up\r\n    SolrCore core = h.getCore();\r\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\r\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\r\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\r\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\r\n    writer.close();\r\n    \r\n    lrf.args.put(\"version\", \"2.0\");\r\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\r\n        \"//result[@numFound='0']\");\r\n\r\n    // test escaping of \";\"\r\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\r\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\r\n    assertU(\"does commit work?\", commit());\r\n\r\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\r\n        \"//*[@numFound='0']\");\r\n\r\n    assertU(delI(\"42\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\r\n\r\n    // test allowDups default of false\r\n\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\r\n\r\n    // test deletes\r\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"101\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"105\"), \"allowDups\", \"true\"),\r\n        add(doc(\"id\", \"102\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"103\"), \"allowDups\", \"true\"),\r\n        add(doc(\"id\", \"101\"), \"allowDups\", \"false\"), };\r\n    for (String a : adds) {\r\n      assertU(a, a);\r\n    }\r\n    assertU(commit());\r\n    \r\n    zkServer.shutdown();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // try a reconnect from disconnect\r\n    zkServer = new ZkTestServer(zkDir);\r\n    zkServer.run();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // ensure zk still thinks node is up\r\n    assertTrue(\r\n        zkController.getCloudState().getLiveNodes().toString(),\r\n        zkController.getCloudState().liveNodesContain(\r\n            zkController.getNodeName()));\r\n\r\n    // test maxint\r\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    // test big limit\r\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\r\n    assertU(delI(\"102\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\r\n    assertU(delI(\"105\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\r\n    assertU(delQ(\"id:[100 TO 110]\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\r\n  public void testBasic() throws Exception {\r\n    // test using ZooKeeper\r\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\r\n    \r\n    ZkController zkController = h.getCoreContainer().getZkController();\r\n    \r\n    // test merge factor picked up\r\n    SolrCore core = h.getCore();\r\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\r\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\r\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\r\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\r\n    writer.close();\r\n    \r\n    lrf.args.put(\"version\", \"2.0\");\r\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\r\n        \"//result[@numFound='0']\");\r\n\r\n    // test escaping of \";\"\r\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\r\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\r\n    assertU(\"does commit work?\", commit());\r\n\r\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\r\n        \"//*[@numFound='0']\");\r\n\r\n    assertU(delI(\"42\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\r\n\r\n    // test overwrite default of true\r\n\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\r\n\r\n    // test deletes\r\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\r\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\r\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\r\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\r\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\r\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\r\n    for (String a : adds) {\r\n      assertU(a, a);\r\n    }\r\n    assertU(commit());\r\n    \r\n    zkServer.shutdown();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // try a reconnect from disconnect\r\n    zkServer = new ZkTestServer(zkDir);\r\n    zkServer.run();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // ensure zk still thinks node is up\r\n    assertTrue(\r\n        zkController.getCloudState().getLiveNodes().toString(),\r\n        zkController.getCloudState().liveNodesContain(\r\n            zkController.getNodeName()));\r\n\r\n    // test maxint\r\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    // test big limit\r\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\r\n    assertU(delI(\"102\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\r\n    assertU(delI(\"105\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\r\n    assertU(delQ(\"id:[100 TO 110]\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\r\n  }\r\n\n","sourceOld":"  @Test\r\n  public void testBasic() throws Exception {\r\n    // test using ZooKeeper\r\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\r\n    \r\n    ZkController zkController = h.getCoreContainer().getZkController();\r\n    \r\n    // test merge factor picked up\r\n    SolrCore core = h.getCore();\r\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\r\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\r\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\r\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\r\n    writer.close();\r\n    \r\n    lrf.args.put(\"version\", \"2.0\");\r\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\r\n        \"//result[@numFound='0']\");\r\n\r\n    // test escaping of \";\"\r\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\r\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\r\n    assertU(\"does commit work?\", commit());\r\n\r\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\r\n        \"//*[@numFound='0']\");\r\n\r\n    assertU(delI(\"42\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\r\n\r\n    // test allowDups default of false\r\n\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\r\n\r\n    // test deletes\r\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"101\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"105\"), \"allowDups\", \"true\"),\r\n        add(doc(\"id\", \"102\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"103\"), \"allowDups\", \"true\"),\r\n        add(doc(\"id\", \"101\"), \"allowDups\", \"false\"), };\r\n    for (String a : adds) {\r\n      assertU(a, a);\r\n    }\r\n    assertU(commit());\r\n    \r\n    zkServer.shutdown();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // try a reconnect from disconnect\r\n    zkServer = new ZkTestServer(zkDir);\r\n    zkServer.run();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // ensure zk still thinks node is up\r\n    assertTrue(\r\n        zkController.getCloudState().getLiveNodes().toString(),\r\n        zkController.getCloudState().liveNodesContain(\r\n            zkController.getNodeName()));\r\n\r\n    // test maxint\r\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    // test big limit\r\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\r\n    assertU(delI(\"102\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\r\n    assertU(delI(\"105\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\r\n    assertU(delQ(\"id:[100 TO 110]\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\r\n  public void testBasic() throws Exception {\r\n    // test using ZooKeeper\r\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\r\n    \r\n    ZkController zkController = h.getCoreContainer().getZkController();\r\n    \r\n    // test merge factor picked up\r\n    SolrCore core = h.getCore();\r\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\r\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\r\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\r\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\r\n    writer.close();\r\n    \r\n    lrf.args.put(\"version\", \"2.0\");\r\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\r\n        \"//result[@numFound='0']\");\r\n\r\n    // test escaping of \";\"\r\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\r\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\r\n    assertU(\"does commit work?\", commit());\r\n\r\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\r\n        \"//*[@numFound='0']\");\r\n\r\n    assertU(delI(\"42\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\r\n\r\n    // test overwrite default of true\r\n\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\r\n\r\n    // test deletes\r\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\r\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\r\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\r\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\r\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\r\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\r\n    for (String a : adds) {\r\n      assertU(a, a);\r\n    }\r\n    assertU(commit());\r\n    \r\n    zkServer.shutdown();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // try a reconnect from disconnect\r\n    zkServer = new ZkTestServer(zkDir);\r\n    zkServer.run();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // ensure zk still thinks node is up\r\n    assertTrue(\r\n        zkController.getCloudState().getLiveNodes().toString(),\r\n        zkController.getCloudState().liveNodesContain(\r\n            zkController.getNodeName()));\r\n\r\n    // test maxint\r\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    // test big limit\r\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\r\n    assertU(delI(\"102\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\r\n    assertU(delI(\"105\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\r\n    assertU(delQ(\"id:[100 TO 110]\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\r\n  }\r\n\n","sourceOld":"  @Test\r\n  public void testBasic() throws Exception {\r\n    // test using ZooKeeper\r\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\r\n    \r\n    ZkController zkController = h.getCoreContainer().getZkController();\r\n    \r\n    // test merge factor picked up\r\n    SolrCore core = h.getCore();\r\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\r\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\r\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\r\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\r\n    writer.close();\r\n    \r\n    lrf.args.put(\"version\", \"2.0\");\r\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\r\n        \"//result[@numFound='0']\");\r\n\r\n    // test escaping of \";\"\r\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\r\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\r\n    assertU(\"does commit work?\", commit());\r\n\r\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\r\n        \"//*[@numFound='0']\");\r\n\r\n    assertU(delI(\"42\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\r\n\r\n    // test allowDups default of false\r\n\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\r\n\r\n    // test deletes\r\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"101\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"105\"), \"allowDups\", \"true\"),\r\n        add(doc(\"id\", \"102\"), \"allowDups\", \"false\"),\r\n        add(doc(\"id\", \"103\"), \"allowDups\", \"true\"),\r\n        add(doc(\"id\", \"101\"), \"allowDups\", \"false\"), };\r\n    for (String a : adds) {\r\n      assertU(a, a);\r\n    }\r\n    assertU(commit());\r\n    \r\n    zkServer.shutdown();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // try a reconnect from disconnect\r\n    zkServer = new ZkTestServer(zkDir);\r\n    zkServer.run();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // ensure zk still thinks node is up\r\n    assertTrue(\r\n        zkController.getCloudState().getLiveNodes().toString(),\r\n        zkController.getCloudState().liveNodesContain(\r\n            zkController.getNodeName()));\r\n\r\n    // test maxint\r\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    // test big limit\r\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\r\n    assertU(delI(\"102\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\r\n    assertU(delI(\"105\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\r\n    assertU(delQ(\"id:[100 TO 110]\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bed62fe6383040eaff2ec720cdc55bb1462c61da","date":1296408595,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n    \n    lrf.args.put(\"version\", \"2.0\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\r\n  public void testBasic() throws Exception {\r\n    // test using ZooKeeper\r\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\r\n    \r\n    ZkController zkController = h.getCoreContainer().getZkController();\r\n    \r\n    // test merge factor picked up\r\n    SolrCore core = h.getCore();\r\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\r\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\r\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\r\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\r\n    writer.close();\r\n    \r\n    lrf.args.put(\"version\", \"2.0\");\r\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\r\n        \"//result[@numFound='0']\");\r\n\r\n    // test escaping of \";\"\r\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\r\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\r\n    assertU(\"does commit work?\", commit());\r\n\r\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\r\n        \"//*[@numFound='0']\");\r\n\r\n    assertU(delI(\"42\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\r\n\r\n    // test overwrite default of true\r\n\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\r\n\r\n    // test deletes\r\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\r\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\r\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\r\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\r\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\r\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\r\n    for (String a : adds) {\r\n      assertU(a, a);\r\n    }\r\n    assertU(commit());\r\n    \r\n    zkServer.shutdown();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // try a reconnect from disconnect\r\n    zkServer = new ZkTestServer(zkDir);\r\n    zkServer.run();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // ensure zk still thinks node is up\r\n    assertTrue(\r\n        zkController.getCloudState().getLiveNodes().toString(),\r\n        zkController.getCloudState().liveNodesContain(\r\n            zkController.getNodeName()));\r\n\r\n    // test maxint\r\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    // test big limit\r\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\r\n    assertU(delI(\"102\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\r\n    assertU(delI(\"105\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\r\n    assertU(delQ(\"id:[100 TO 110]\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\r\n  }\r\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n    \n    lrf.args.put(\"version\", \"2.0\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\r\n  public void testBasic() throws Exception {\r\n    // test using ZooKeeper\r\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\r\n    \r\n    ZkController zkController = h.getCoreContainer().getZkController();\r\n    \r\n    // test merge factor picked up\r\n    SolrCore core = h.getCore();\r\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\r\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\r\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\r\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\r\n    writer.close();\r\n    \r\n    lrf.args.put(\"version\", \"2.0\");\r\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\r\n        \"//result[@numFound='0']\");\r\n\r\n    // test escaping of \";\"\r\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\r\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\r\n    assertU(\"does commit work?\", commit());\r\n\r\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\r\n        \"//*[@numFound='0']\");\r\n\r\n    assertU(delI(\"42\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\r\n\r\n    // test overwrite default of true\r\n\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\r\n\r\n    // test deletes\r\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\r\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\r\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\r\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\r\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\r\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\r\n    for (String a : adds) {\r\n      assertU(a, a);\r\n    }\r\n    assertU(commit());\r\n    \r\n    zkServer.shutdown();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // try a reconnect from disconnect\r\n    zkServer = new ZkTestServer(zkDir);\r\n    zkServer.run();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // ensure zk still thinks node is up\r\n    assertTrue(\r\n        zkController.getCloudState().getLiveNodes().toString(),\r\n        zkController.getCloudState().liveNodesContain(\r\n            zkController.getNodeName()));\r\n\r\n    // test maxint\r\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    // test big limit\r\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\r\n    assertU(delI(\"102\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\r\n    assertU(delI(\"105\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\r\n    assertU(delQ(\"id:[100 TO 110]\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n    \n    lrf.args.put(\"version\", \"2.0\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\r\n  public void testBasic() throws Exception {\r\n    // test using ZooKeeper\r\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\r\n    \r\n    ZkController zkController = h.getCoreContainer().getZkController();\r\n    \r\n    // test merge factor picked up\r\n    SolrCore core = h.getCore();\r\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\r\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\r\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\r\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\r\n    writer.close();\r\n    \r\n    lrf.args.put(\"version\", \"2.0\");\r\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\r\n        \"//result[@numFound='0']\");\r\n\r\n    // test escaping of \";\"\r\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\r\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\r\n    assertU(\"does commit work?\", commit());\r\n\r\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\r\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\r\n\r\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\r\n        \"//*[@numFound='0']\");\r\n\r\n    assertU(delI(\"42\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\r\n\r\n    // test overwrite default of true\r\n\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\r\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\r\n\r\n    // test deletes\r\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\r\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\r\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\r\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\r\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\r\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\r\n    for (String a : adds) {\r\n      assertU(a, a);\r\n    }\r\n    assertU(commit());\r\n    \r\n    zkServer.shutdown();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // try a reconnect from disconnect\r\n    zkServer = new ZkTestServer(zkDir);\r\n    zkServer.run();\r\n    \r\n    Thread.sleep(300);\r\n    \r\n    // ensure zk still thinks node is up\r\n    assertTrue(\r\n        zkController.getCloudState().getLiveNodes().toString(),\r\n        zkController.getCloudState().liveNodesContain(\r\n            zkController.getNodeName()));\r\n\r\n    // test maxint\r\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    // test big limit\r\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\r\n        \"//*[@numFound='4']\");\r\n\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\r\n    assertU(delI(\"102\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\r\n    assertU(delI(\"105\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\r\n    assertU(delQ(\"id:[100 TO 110]\"));\r\n    assertU(commit());\r\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ce6aae13e6441cf187f083d13afaf8e9a2884e3","date":1299700113,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n    \n    lrf.args.put(\"version\", \"2.0\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n    \n    lrf.args.put(\"version\", \"2.0\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n    \n    lrf.args.put(\"version\", \"2.0\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55688cada84e99928d155229fc2768df65a45bdb","date":1306274128,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy(), core.getCodecProvider());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy(), core.getCodecProvider());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy(), core.getCodecProvider());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a71a0b2d4be2299a163f60626729852d81a8e02","date":1309442399,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy(), core.getCodecProvider());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy(), core.getCodecProvider());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\", core\n        .getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(),\n        core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy(), core.getCodecProvider());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70ad682703b8585f5d0a637efec044d57ec05efb":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","b5653af107efef582afd0bc6aff175972359fdd6"],"2ce6aae13e6441cf187f083d13afaf8e9a2884e3":["bed62fe6383040eaff2ec720cdc55bb1462c61da"],"c26f00b574427b55127e869b935845554afde1fa":["7a71a0b2d4be2299a163f60626729852d81a8e02","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d27fdb664de1d2da1efdddf2ccf6973dd072c69"],"3d27fdb664de1d2da1efdddf2ccf6973dd072c69":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["55688cada84e99928d155229fc2768df65a45bdb","7a71a0b2d4be2299a163f60626729852d81a8e02"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7a71a0b2d4be2299a163f60626729852d81a8e02"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["55688cada84e99928d155229fc2768df65a45bdb"],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["b5653af107efef582afd0bc6aff175972359fdd6"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b5653af107efef582afd0bc6aff175972359fdd6"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","2ce6aae13e6441cf187f083d13afaf8e9a2884e3"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["2ce6aae13e6441cf187f083d13afaf8e9a2884e3","55688cada84e99928d155229fc2768df65a45bdb"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","2ce6aae13e6441cf187f083d13afaf8e9a2884e3"],"b5653af107efef582afd0bc6aff175972359fdd6":["3d27fdb664de1d2da1efdddf2ccf6973dd072c69"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7a71a0b2d4be2299a163f60626729852d81a8e02"],"55688cada84e99928d155229fc2768df65a45bdb":["2ce6aae13e6441cf187f083d13afaf8e9a2884e3"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d27fdb664de1d2da1efdddf2ccf6973dd072c69"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["d619839baa8ce5503e496b94a9e42ad6f079293f","55688cada84e99928d155229fc2768df65a45bdb"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["3d27fdb664de1d2da1efdddf2ccf6973dd072c69"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"2ce6aae13e6441cf187f083d13afaf8e9a2884e3":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","d619839baa8ce5503e496b94a9e42ad6f079293f","55688cada84e99928d155229fc2768df65a45bdb"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"3d27fdb664de1d2da1efdddf2ccf6973dd072c69":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b5653af107efef582afd0bc6aff175972359fdd6","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["2ce6aae13e6441cf187f083d13afaf8e9a2884e3","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["c26f00b574427b55127e869b935845554afde1fa","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","a258fbb26824fd104ed795e5d9033d2d040049ee"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"b5653af107efef582afd0bc6aff175972359fdd6":["70ad682703b8585f5d0a637efec044d57ec05efb","bed62fe6383040eaff2ec720cdc55bb1462c61da","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"55688cada84e99928d155229fc2768df65a45bdb":["d083e83f225b11e5fdd900e83d26ddb385b6955c","7a71a0b2d4be2299a163f60626729852d81a8e02","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["70ad682703b8585f5d0a637efec044d57ec05efb"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}