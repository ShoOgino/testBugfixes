{"path":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#newFloatRange(String,Float,boolean,Float,boolean).mjava","commits":[{"id":"86cab68ee900a31d093b114182b488ea8e85c59d","date":1456171815,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#newFloatRange(String,Float,boolean,Float,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Create a range query for float values indexed with {@link FloatPoint}.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newMultiFloatRange newMultiFloatRange()} instead.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newFloatRange(String field, Float lowerValue, boolean lowerInclusive, Float upperValue, boolean upperInclusive) {\n    return newMultiFloatRange(field, \n                            new Float[] { lowerValue },\n                            new boolean[] { lowerInclusive }, \n                            new Float[] { upperValue },\n                            new boolean[] { upperInclusive });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#newFloatRange(String,Float,boolean,Float,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Create a range query for float values indexed with {@link FloatPoint}.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newMultiFloatRange newMultiFloatRange()} instead.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newFloatRange(String field, Float lowerValue, boolean lowerInclusive, Float upperValue, boolean upperInclusive) {\n    return newMultiFloatRange(field, \n                            new Float[] { lowerValue },\n                            new boolean[] { lowerInclusive }, \n                            new Float[] { upperValue },\n                            new boolean[] { upperInclusive });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3104a6ba367dfb690806b227c5ef17c42c6107b","date":1456265035,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FloatPoint#newRangeQuery(String,Float,boolean,Float,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#newFloatRange(String,Float,boolean,Float,boolean).mjava","sourceNew":"  /** \n   * Create a range query for float values.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newMultiRangeQuery newMultiRangeQuery()} instead.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newRangeQuery(String field, Float lowerValue, boolean lowerInclusive, Float upperValue, boolean upperInclusive) {\n    return newMultiRangeQuery(field, \n                              new Float[] { lowerValue },\n                              new boolean[] { lowerInclusive }, \n                              new Float[] { upperValue },\n                              new boolean[] { upperInclusive });\n  }\n\n","sourceOld":"  /** \n   * Create a range query for float values indexed with {@link FloatPoint}.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newMultiFloatRange newMultiFloatRange()} instead.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newFloatRange(String field, Float lowerValue, boolean lowerInclusive, Float upperValue, boolean upperInclusive) {\n    return newMultiFloatRange(field, \n                            new Float[] { lowerValue },\n                            new boolean[] { lowerInclusive }, \n                            new Float[] { upperValue },\n                            new boolean[] { upperInclusive });\n  }\n\n","bugFix":null,"bugIntro":["609ba4ce51a7095e9815d4fb2666ec85714f8f54","609ba4ce51a7095e9815d4fb2666ec85714f8f54","609ba4ce51a7095e9815d4fb2666ec85714f8f54","609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","date":1456265720,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FloatPoint#newRangeQuery(String,Float,boolean,Float,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#newFloatRange(String,Float,boolean,Float,boolean).mjava","sourceNew":"  /** \n   * Create a range query for float values.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newMultiRangeQuery newMultiRangeQuery()} instead.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newRangeQuery(String field, Float lowerValue, boolean lowerInclusive, Float upperValue, boolean upperInclusive) {\n    return newMultiRangeQuery(field, \n                              new Float[] { lowerValue },\n                              new boolean[] { lowerInclusive }, \n                              new Float[] { upperValue },\n                              new boolean[] { upperInclusive });\n  }\n\n","sourceOld":"  /** \n   * Create a range query for float values indexed with {@link FloatPoint}.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newMultiFloatRange newMultiFloatRange()} instead.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newFloatRange(String field, Float lowerValue, boolean lowerInclusive, Float upperValue, boolean upperInclusive) {\n    return newMultiFloatRange(field, \n                            new Float[] { lowerValue },\n                            new boolean[] { lowerInclusive }, \n                            new Float[] { upperValue },\n                            new boolean[] { upperInclusive });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FloatPoint#newRangeQuery(String,Float,boolean,Float,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#newFloatRange(String,Float,boolean,Float,boolean).mjava","sourceNew":"  /** \n   * Create a range query for float values.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newMultiRangeQuery newMultiRangeQuery()} instead.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newRangeQuery(String field, Float lowerValue, boolean lowerInclusive, Float upperValue, boolean upperInclusive) {\n    return newMultiRangeQuery(field, \n                              new Float[] { lowerValue },\n                              new boolean[] { lowerInclusive }, \n                              new Float[] { upperValue },\n                              new boolean[] { upperInclusive });\n  }\n\n","sourceOld":"  /** \n   * Create a range query for float values indexed with {@link FloatPoint}.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newMultiFloatRange newMultiFloatRange()} instead.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newFloatRange(String field, Float lowerValue, boolean lowerInclusive, Float upperValue, boolean upperInclusive) {\n    return newMultiFloatRange(field, \n                            new Float[] { lowerValue },\n                            new boolean[] { lowerInclusive }, \n                            new Float[] { upperValue },\n                            new boolean[] { upperInclusive });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FloatPoint#newRangeQuery(String,Float,boolean,Float,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#newFloatRange(String,Float,boolean,Float,boolean).mjava","sourceNew":"  /** \n   * Create a range query for float values.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newMultiRangeQuery newMultiRangeQuery()} instead.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newRangeQuery(String field, Float lowerValue, boolean lowerInclusive, Float upperValue, boolean upperInclusive) {\n    return newMultiRangeQuery(field, \n                              new Float[] { lowerValue },\n                              new boolean[] { lowerInclusive }, \n                              new Float[] { upperValue },\n                              new boolean[] { upperInclusive });\n  }\n\n","sourceOld":"  /** \n   * Create a range query for float values indexed with {@link FloatPoint}.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newMultiFloatRange newMultiFloatRange()} instead.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the {@code lowerValue} or {@code upperValue} to {@code null}. \n   * <p>\n   * By setting inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} means \"open\".\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} means \"open\".\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newFloatRange(String field, Float lowerValue, boolean lowerInclusive, Float upperValue, boolean upperInclusive) {\n    return newMultiFloatRange(field, \n                            new Float[] { lowerValue },\n                            new boolean[] { lowerInclusive }, \n                            new Float[] { upperValue },\n                            new boolean[] { upperInclusive });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d3104a6ba367dfb690806b227c5ef17c42c6107b":["419a8f52c6635419beb951255cacbbb281044c57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"419a8f52c6635419beb951255cacbbb281044c57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","86cab68ee900a31d093b114182b488ea8e85c59d"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["419a8f52c6635419beb951255cacbbb281044c57","a5296efc4b319f5647b606629c093a94b23692c6"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["419a8f52c6635419beb951255cacbbb281044c57","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"a5296efc4b319f5647b606629c093a94b23692c6":["419a8f52c6635419beb951255cacbbb281044c57","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"86cab68ee900a31d093b114182b488ea8e85c59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"]},"commit2Childs":{"d3104a6ba367dfb690806b227c5ef17c42c6107b":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["419a8f52c6635419beb951255cacbbb281044c57","86cab68ee900a31d093b114182b488ea8e85c59d"],"419a8f52c6635419beb951255cacbbb281044c57":["d3104a6ba367dfb690806b227c5ef17c42c6107b","1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":[],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"86cab68ee900a31d093b114182b488ea8e85c59d":["419a8f52c6635419beb951255cacbbb281044c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}