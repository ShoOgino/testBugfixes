{"path":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","sourceNew":"  /**\n   * Creates a SolrServer.\n   * @param coreContainer the core container\n   * @param coreName the core name\n   */\n  public EmbeddedSolrServer(  CoreContainer coreContainer, String coreName )\n  {\n    if ( coreContainer == null ) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    this.coreContainer = coreContainer;\n    this.coreName = coreName == null? \"\" : coreName;\n    _parser = new SolrRequestParsers( null );\n  }\n\n","sourceOld":"  /**\n   * Creates a SolrServer.\n   * @param coreContainer the core container\n   * @param coreName the core name\n   */\n  public EmbeddedSolrServer(  CoreContainer coreContainer, String coreName )\n  {\n    if ( coreContainer == null ) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    this.coreContainer = coreContainer;\n    this.coreName = coreName == null? \"\" : coreName;\n    _parser = new SolrRequestParsers( null );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","sourceNew":"  /**\n   * Creates a SolrServer.\n   * @param coreContainer the core container\n   * @param coreName the core name\n   */\n  public EmbeddedSolrServer(  CoreContainer coreContainer, String coreName )\n  {\n    if ( coreContainer == null ) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    this.coreContainer = coreContainer;\n    this.coreName = coreName == null? \"\" : coreName;\n    _parser = new SolrRequestParsers( null );\n  }\n\n","sourceOld":"  /**\n   * Creates a SolrServer.\n   * @param coreContainer the core container\n   * @param coreName the core name\n   */\n  public EmbeddedSolrServer(  CoreContainer coreContainer, String coreName )\n  {\n    if ( coreContainer == null ) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    this.coreContainer = coreContainer;\n    this.coreName = coreName == null? \"\" : coreName;\n    _parser = new SolrRequestParsers( null );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","sourceNew":"  /**\n   * Creates a SolrServer.\n   * @param coreContainer the core container\n   * @param coreName the core name\n   */\n  public EmbeddedSolrServer(  CoreContainer coreContainer, String coreName )\n  {\n    if ( coreContainer == null ) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    this.coreContainer = coreContainer;\n    this.coreName = coreName == null? \"\" : coreName;\n    _parser = new SolrRequestParsers( null );\n  }\n\n","sourceOld":"  /**\n   * Creates a SolrServer.\n   * @param coreContainer the core container\n   * @param coreName the core name\n   */\n  public EmbeddedSolrServer(  CoreContainer coreContainer, String coreName )\n  {\n    if ( coreContainer == null ) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    this.coreContainer = coreContainer;\n    this.coreName = coreName == null? \"\" : coreName;\n    _parser = new SolrRequestParsers( null );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","sourceNew":"  /**\n   * Creates a SolrServer.\n   * @param coreContainer the core container\n   * @param coreName the core name\n   */\n  public EmbeddedSolrServer(CoreContainer coreContainer, String coreName)\n  {\n    if ( coreContainer == null ) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    this.coreContainer = coreContainer;\n    this.coreName = coreName == null? \"\" : coreName;\n    _parser = new SolrRequestParsers( null );\n  }\n\n","sourceOld":"  /**\n   * Creates a SolrServer.\n   * @param coreContainer the core container\n   * @param coreName the core name\n   */\n  public EmbeddedSolrServer(  CoreContainer coreContainer, String coreName )\n  {\n    if ( coreContainer == null ) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    this.coreContainer = coreContainer;\n    this.coreName = coreName == null? \"\" : coreName;\n    _parser = new SolrRequestParsers( null );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fc9f4a33c8fefeb1260aea04273a36b0d32378e","date":1421852764,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","sourceNew":"  /**\n   * Creates a SolrServer.\n   * @param coreContainer the core container\n   * @param coreName the core name\n   */\n  public EmbeddedSolrServer(CoreContainer coreContainer, String coreName)\n  {\n    if ( coreContainer == null ) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    if (Strings.isNullOrEmpty(coreName))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Core name cannot be empty\");\n    this.coreContainer = coreContainer;\n    this.coreName = coreName;\n    _parser = new SolrRequestParsers( null );\n  }\n\n","sourceOld":"  /**\n   * Creates a SolrServer.\n   * @param coreContainer the core container\n   * @param coreName the core name\n   */\n  public EmbeddedSolrServer(CoreContainer coreContainer, String coreName)\n  {\n    if ( coreContainer == null ) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    this.coreContainer = coreContainer;\n    this.coreName = coreName == null? \"\" : coreName;\n    _parser = new SolrRequestParsers( null );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2252a4efd304715a7a65ac0c9b167d312d09997a","date":1427361661,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","sourceNew":"  /**\n   * Create an EmbeddedSolrServer wrapping a CoreContainer.\n   * <p>\n   * Note that EmbeddedSolrServer will shutdown the wrapped CoreContainer when\n   * {@link #close()} is called.\n   *\n   * @param coreContainer the core container\n   * @param coreName      the core to route requests to be default\n   */\n  public EmbeddedSolrServer(CoreContainer coreContainer, String coreName) {\n    if (coreContainer == null) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    if (Strings.isNullOrEmpty(coreName))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Core name cannot be empty\");\n    this.coreContainer = coreContainer;\n    this.coreName = coreName;\n    _parser = new SolrRequestParsers(null);\n  }\n\n","sourceOld":"  /**\n   * Creates a SolrServer.\n   * @param coreContainer the core container\n   * @param coreName the core name\n   */\n  public EmbeddedSolrServer(CoreContainer coreContainer, String coreName)\n  {\n    if ( coreContainer == null ) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    if (Strings.isNullOrEmpty(coreName))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Core name cannot be empty\");\n    this.coreContainer = coreContainer;\n    this.coreName = coreName;\n    _parser = new SolrRequestParsers( null );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","sourceNew":"  /**\n   * Create an EmbeddedSolrServer wrapping a CoreContainer.\n   * <p>\n   * Note that EmbeddedSolrServer will shutdown the wrapped CoreContainer when\n   * {@link #close()} is called.\n   *\n   * @param coreContainer the core container\n   * @param coreName      the core to route requests to be default\n   */\n  public EmbeddedSolrServer(CoreContainer coreContainer, String coreName) {\n    if (coreContainer == null) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    if (Strings.isNullOrEmpty(coreName))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Core name cannot be empty\");\n    this.coreContainer = coreContainer;\n    this.coreName = coreName;\n    _parser = new SolrRequestParsers(null);\n  }\n\n","sourceOld":"  /**\n   * Creates a SolrServer.\n   * @param coreContainer the core container\n   * @param coreName the core name\n   */\n  public EmbeddedSolrServer(CoreContainer coreContainer, String coreName)\n  {\n    if ( coreContainer == null ) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    if (Strings.isNullOrEmpty(coreName))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Core name cannot be empty\");\n    this.coreContainer = coreContainer;\n    this.coreName = coreName;\n    _parser = new SolrRequestParsers( null );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1029001a4f14c09987075ddbda784d088dac73e4","date":1502323132,"type":3,"author":"Adam Frey","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","sourceNew":"  /**\n   * Create an EmbeddedSolrServer wrapping a CoreContainer.\n   * <p>\n   * Note that EmbeddedSolrServer will shutdown the wrapped CoreContainer when\n   * {@link #close()} is called.\n   *\n   * @param coreContainer the core container\n   * @param coreName      the core to route requests to by default\n   */\n  public EmbeddedSolrServer(CoreContainer coreContainer, String coreName) {\n    if (coreContainer == null) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    if (Strings.isNullOrEmpty(coreName))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Core name cannot be empty\");\n    this.coreContainer = coreContainer;\n    this.coreName = coreName;\n    _parser = new SolrRequestParsers(null);\n  }\n\n","sourceOld":"  /**\n   * Create an EmbeddedSolrServer wrapping a CoreContainer.\n   * <p>\n   * Note that EmbeddedSolrServer will shutdown the wrapped CoreContainer when\n   * {@link #close()} is called.\n   *\n   * @param coreContainer the core container\n   * @param coreName      the core to route requests to be default\n   */\n  public EmbeddedSolrServer(CoreContainer coreContainer, String coreName) {\n    if (coreContainer == null) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    if (Strings.isNullOrEmpty(coreName))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Core name cannot be empty\");\n    this.coreContainer = coreContainer;\n    this.coreName = coreName;\n    _parser = new SolrRequestParsers(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","sourceNew":"  /**\n   * Create an EmbeddedSolrServer wrapping a CoreContainer.\n   * <p>\n   * Note that EmbeddedSolrServer will shutdown the wrapped CoreContainer when\n   * {@link #close()} is called.\n   *\n   * @param coreContainer the core container\n   * @param coreName      the core to route requests to by default\n   */\n  public EmbeddedSolrServer(CoreContainer coreContainer, String coreName) {\n    if (coreContainer == null) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    if (Strings.isNullOrEmpty(coreName))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Core name cannot be empty\");\n    this.coreContainer = coreContainer;\n    this.coreName = coreName;\n    _parser = new SolrRequestParsers(null);\n  }\n\n","sourceOld":"  /**\n   * Create an EmbeddedSolrServer wrapping a CoreContainer.\n   * <p>\n   * Note that EmbeddedSolrServer will shutdown the wrapped CoreContainer when\n   * {@link #close()} is called.\n   *\n   * @param coreContainer the core container\n   * @param coreName      the core to route requests to be default\n   */\n  public EmbeddedSolrServer(CoreContainer coreContainer, String coreName) {\n    if (coreContainer == null) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    if (Strings.isNullOrEmpty(coreName))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Core name cannot be empty\");\n    this.coreContainer = coreContainer;\n    this.coreName = coreName;\n    _parser = new SolrRequestParsers(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","sourceNew":"  /**\n   * Create an EmbeddedSolrServer wrapping a CoreContainer.\n   * <p>\n   * Note that EmbeddedSolrServer will shutdown the wrapped CoreContainer when\n   * {@link #close()} is called.\n   *\n   * @param coreContainer the core container\n   * @param coreName      the core to route requests to by default\n   */\n  public EmbeddedSolrServer(CoreContainer coreContainer, String coreName) {\n    if (coreContainer == null) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    if (Strings.isNullOrEmpty(coreName))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Core name cannot be empty\");\n    this.coreContainer = coreContainer;\n    this.coreName = coreName;\n    _parser = new SolrRequestParsers(null);\n  }\n\n","sourceOld":"  /**\n   * Create an EmbeddedSolrServer wrapping a CoreContainer.\n   * <p>\n   * Note that EmbeddedSolrServer will shutdown the wrapped CoreContainer when\n   * {@link #close()} is called.\n   *\n   * @param coreContainer the core container\n   * @param coreName      the core to route requests to be default\n   */\n  public EmbeddedSolrServer(CoreContainer coreContainer, String coreName) {\n    if (coreContainer == null) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    if (Strings.isNullOrEmpty(coreName))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Core name cannot be empty\");\n    this.coreContainer = coreContainer;\n    this.coreName = coreName;\n    _parser = new SolrRequestParsers(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d470946953c3ba2bd69d984efbfdc9017ddbb85","date":1569425608,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","sourceNew":"  /**\n   * Create an EmbeddedSolrServer wrapping a CoreContainer.\n   * <p>\n   * Note that EmbeddedSolrServer will shutdown the wrapped CoreContainer when\n   * {@link #close()} is called.\n   *\n   * @param coreContainer the core container\n   * @param coreName      the core to route requests to by default (optional)\n   */\n  public EmbeddedSolrServer(CoreContainer coreContainer, String coreName) {\n    if (coreContainer == null) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    this.coreContainer = coreContainer;\n    this.coreName = coreName;\n    _parser = new SolrRequestParsers(null);\n  }\n\n","sourceOld":"  /**\n   * Create an EmbeddedSolrServer wrapping a CoreContainer.\n   * <p>\n   * Note that EmbeddedSolrServer will shutdown the wrapped CoreContainer when\n   * {@link #close()} is called.\n   *\n   * @param coreContainer the core container\n   * @param coreName      the core to route requests to by default\n   */\n  public EmbeddedSolrServer(CoreContainer coreContainer, String coreName) {\n    if (coreContainer == null) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    if (Strings.isNullOrEmpty(coreName))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Core name cannot be empty\");\n    this.coreContainer = coreContainer;\n    this.coreName = coreName;\n    _parser = new SolrRequestParsers(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"216b828f4f2341ae2e70eb7585059e3576e4cb99","date":1570451249,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","sourceNew":"  /**\n   * Create an EmbeddedSolrServer wrapping a CoreContainer.\n   * <p>\n   * Note that EmbeddedSolrServer will shutdown the wrapped CoreContainer when\n   * {@link #close()} is called.\n   *\n   * @param coreContainer the core container\n   * @param coreName      the core to route requests to by default (optional)\n   */\n  public EmbeddedSolrServer(CoreContainer coreContainer, String coreName) {\n    this(coreContainer, coreName, RequestWriterSupplier.JavaBin);\n  }\n\n","sourceOld":"  /**\n   * Create an EmbeddedSolrServer wrapping a CoreContainer.\n   * <p>\n   * Note that EmbeddedSolrServer will shutdown the wrapped CoreContainer when\n   * {@link #close()} is called.\n   *\n   * @param coreContainer the core container\n   * @param coreName      the core to route requests to by default (optional)\n   */\n  public EmbeddedSolrServer(CoreContainer coreContainer, String coreName) {\n    if (coreContainer == null) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    this.coreContainer = coreContainer;\n    this.coreName = coreName;\n    _parser = new SolrRequestParsers(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#EmbeddedSolrServer(CoreContainer,String).mjava","sourceNew":"  /**\n   * Create an EmbeddedSolrServer wrapping a CoreContainer.\n   * <p>\n   * Note that EmbeddedSolrServer will shutdown the wrapped CoreContainer when\n   * {@link #close()} is called.\n   *\n   * @param coreContainer the core container\n   * @param coreName      the core to route requests to by default (optional)\n   */\n  public EmbeddedSolrServer(CoreContainer coreContainer, String coreName) {\n    this(coreContainer, coreName, RequestWriterSupplier.JavaBin);\n  }\n\n","sourceOld":"  /**\n   * Create an EmbeddedSolrServer wrapping a CoreContainer.\n   * <p>\n   * Note that EmbeddedSolrServer will shutdown the wrapped CoreContainer when\n   * {@link #close()} is called.\n   *\n   * @param coreContainer the core container\n   * @param coreName      the core to route requests to by default (optional)\n   */\n  public EmbeddedSolrServer(CoreContainer coreContainer, String coreName) {\n    if (coreContainer == null) {\n      throw new NullPointerException(\"CoreContainer instance required\");\n    }\n    this.coreContainer = coreContainer;\n    this.coreName = coreName;\n    _parser = new SolrRequestParsers(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"216b828f4f2341ae2e70eb7585059e3576e4cb99":["2d470946953c3ba2bd69d984efbfdc9017ddbb85"],"1029001a4f14c09987075ddbda784d088dac73e4":["2252a4efd304715a7a65ac0c9b167d312d09997a"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"bafca15d8e408346a67f4282ad1143b88023893b":["c26f00b574427b55127e869b935845554afde1fa"],"2252a4efd304715a7a65ac0c9b167d312d09997a":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e","2252a4efd304715a7a65ac0c9b167d312d09997a"],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["bafca15d8e408346a67f4282ad1143b88023893b"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["2252a4efd304715a7a65ac0c9b167d312d09997a","1029001a4f14c09987075ddbda784d088dac73e4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["2252a4efd304715a7a65ac0c9b167d312d09997a","1029001a4f14c09987075ddbda784d088dac73e4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d470946953c3ba2bd69d984efbfdc9017ddbb85":["1029001a4f14c09987075ddbda784d088dac73e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["216b828f4f2341ae2e70eb7585059e3576e4cb99"],"b0b597c65628ca9e73913a07e81691f8229bae35":["2d470946953c3ba2bd69d984efbfdc9017ddbb85","216b828f4f2341ae2e70eb7585059e3576e4cb99"]},"commit2Childs":{"216b828f4f2341ae2e70eb7585059e3576e4cb99":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"1029001a4f14c09987075ddbda784d088dac73e4":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","2d470946953c3ba2bd69d984efbfdc9017ddbb85"],"c26f00b574427b55127e869b935845554afde1fa":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"],"2252a4efd304715a7a65ac0c9b167d312d09997a":["1029001a4f14c09987075ddbda784d088dac73e4","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["2252a4efd304715a7a65ac0c9b167d312d09997a","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2d470946953c3ba2bd69d984efbfdc9017ddbb85":["216b828f4f2341ae2e70eb7585059e3576e4cb99","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}