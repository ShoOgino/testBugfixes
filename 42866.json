{"path":"solr/core/src/java/org/apache/solr/highlight/LuceneRegexFragmenter#isNewFragment().mjava","commits":[{"id":"cfd5345d467d0ee13701d24481e4c90995f06339","date":1484419619,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/LuceneRegexFragmenter#isNewFragment().mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/LuceneRegexFragmenter[RegexFragmenter]#isNewFragment().mjava","sourceNew":"  /* (non-Javadoc)\r\n   * @see org.apache.lucene.search.highlight.TextFragmenter#isNewFragment(org.apache.lucene.analysis.Token)\r\n   */\r\n  @Override\r\n  public boolean isNewFragment()\r\n  {\r\n    boolean isNewFrag = false;\r\n    int minFragLen = (int)((1.0f - slop)*targetFragChars);\r\n    int endOffset = offsetAtt.endOffset();\r\n    \r\n    // ** determin isNewFrag\r\n    if(posIncAtt.getPositionIncrement() > incrementGapThreshold) {\r\n      // large position gaps always imply new fragments\r\n      isNewFrag = true;\r\n\r\n    } else if(endOffset - currentOffset < minFragLen) {\r\n      // we're not in our range of flexibility\r\n      isNewFrag = false;\r\n\r\n    } else if(targetOffset > 0) {\r\n      // we've already decided on a target\r\n      isNewFrag = endOffset > targetOffset;\r\n\r\n    } else {\r\n      // we might be able to do something\r\n      int minOffset = currentOffset + minFragLen;\r\n      int maxOffset = (int)(currentOffset + (1.0f + slop)*targetFragChars);\r\n      int hotIndex;\r\n\r\n      // look for a close hotspot\r\n      hotIndex = Arrays.binarySearch(hotspots, endOffset);\r\n      if(hotIndex < 0) hotIndex = -hotIndex;\r\n      if(hotIndex >= hotspots.length) {\r\n        // no more hotspots in this input stream\r\n        targetOffset = currentOffset + targetFragChars;\r\n\r\n      } else if(hotspots[hotIndex] > maxOffset) {\r\n        // no hotspots within slop\r\n        targetOffset = currentOffset + targetFragChars;\r\n\r\n      } else {\r\n        // try to find hotspot in slop\r\n        int goal = hotspots[hotIndex];\r\n        while(goal < minOffset && hotIndex < hotspots.length) {\r\n          hotIndex++;\r\n          goal = hotspots[hotIndex];\r\n        }        \r\n        targetOffset = goal <= maxOffset ? goal : currentOffset + targetFragChars;\r\n      }\r\n\r\n      isNewFrag = endOffset > targetOffset;\r\n    }      \r\n      \r\n    // ** operate on isNewFrag\r\n    if(isNewFrag) {\r\n        currentNumFrags++;\r\n        currentOffset = endOffset;\r\n        targetOffset = -1;\r\n    }\r\n    return isNewFrag;\r\n  }\r\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.TextFragmenter#isNewFragment(org.apache.lucene.analysis.Token)\n   */\n  @Override\n  public boolean isNewFragment()\n  {\n    boolean isNewFrag = false;\n    int minFragLen = (int)((1.0f - slop)*targetFragChars);\n    int endOffset = offsetAtt.endOffset();\n    \n    // ** determin isNewFrag\n    if(posIncAtt.getPositionIncrement() > incrementGapThreshold) {\n      // large position gaps always imply new fragments\n      isNewFrag = true;\n\n    } else if(endOffset - currentOffset < minFragLen) {\n      // we're not in our range of flexibility\n      isNewFrag = false;\n\n    } else if(targetOffset > 0) {\n      // we've already decided on a target\n      isNewFrag = endOffset > targetOffset;\n\n    } else {\n      // we might be able to do something\n      int minOffset = currentOffset + minFragLen;\n      int maxOffset = (int)(currentOffset + (1.0f + slop)*targetFragChars);\n      int hotIndex;\n\n      // look for a close hotspot\n      hotIndex = Arrays.binarySearch(hotspots, endOffset);\n      if(hotIndex < 0) hotIndex = -hotIndex;\n      if(hotIndex >= hotspots.length) {\n        // no more hotspots in this input stream\n        targetOffset = currentOffset + targetFragChars;\n\n      } else if(hotspots[hotIndex] > maxOffset) {\n        // no hotspots within slop\n        targetOffset = currentOffset + targetFragChars;\n\n      } else {\n        // try to find hotspot in slop\n        int goal = hotspots[hotIndex];\n        while(goal < minOffset && hotIndex < hotspots.length) {\n          hotIndex++;\n          goal = hotspots[hotIndex];\n        }        \n        targetOffset = goal <= maxOffset ? goal : currentOffset + targetFragChars;\n      }\n\n      isNewFrag = endOffset > targetOffset;\n    }      \n      \n    // ** operate on isNewFrag\n    if(isNewFrag) {\n        currentNumFrags++;\n        currentOffset = endOffset;\n        targetOffset = -1;\n    }\n    return isNewFrag;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"507e7decdf00981d09a74632ea30299a4ce6ba72","date":1484600874,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/LuceneRegexFragmenter#isNewFragment().mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/LuceneRegexFragmenter[RegexFragmenter]#isNewFragment().mjava","sourceNew":"  /* (non-Javadoc)\r\n   * @see org.apache.lucene.search.highlight.TextFragmenter#isNewFragment(org.apache.lucene.analysis.Token)\r\n   */\r\n  @Override\r\n  public boolean isNewFragment()\r\n  {\r\n    boolean isNewFrag = false;\r\n    int minFragLen = (int)((1.0f - slop)*targetFragChars);\r\n    int endOffset = offsetAtt.endOffset();\r\n    \r\n    // ** determin isNewFrag\r\n    if(posIncAtt.getPositionIncrement() > incrementGapThreshold) {\r\n      // large position gaps always imply new fragments\r\n      isNewFrag = true;\r\n\r\n    } else if(endOffset - currentOffset < minFragLen) {\r\n      // we're not in our range of flexibility\r\n      isNewFrag = false;\r\n\r\n    } else if(targetOffset > 0) {\r\n      // we've already decided on a target\r\n      isNewFrag = endOffset > targetOffset;\r\n\r\n    } else {\r\n      // we might be able to do something\r\n      int minOffset = currentOffset + minFragLen;\r\n      int maxOffset = (int)(currentOffset + (1.0f + slop)*targetFragChars);\r\n      int hotIndex;\r\n\r\n      // look for a close hotspot\r\n      hotIndex = Arrays.binarySearch(hotspots, endOffset);\r\n      if(hotIndex < 0) hotIndex = -hotIndex;\r\n      if(hotIndex >= hotspots.length) {\r\n        // no more hotspots in this input stream\r\n        targetOffset = currentOffset + targetFragChars;\r\n\r\n      } else if(hotspots[hotIndex] > maxOffset) {\r\n        // no hotspots within slop\r\n        targetOffset = currentOffset + targetFragChars;\r\n\r\n      } else {\r\n        // try to find hotspot in slop\r\n        int goal = hotspots[hotIndex];\r\n        while(goal < minOffset && hotIndex < hotspots.length) {\r\n          hotIndex++;\r\n          goal = hotspots[hotIndex];\r\n        }        \r\n        targetOffset = goal <= maxOffset ? goal : currentOffset + targetFragChars;\r\n      }\r\n\r\n      isNewFrag = endOffset > targetOffset;\r\n    }      \r\n      \r\n    // ** operate on isNewFrag\r\n    if(isNewFrag) {\r\n        currentNumFrags++;\r\n        currentOffset = endOffset;\r\n        targetOffset = -1;\r\n    }\r\n    return isNewFrag;\r\n  }\r\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.TextFragmenter#isNewFragment(org.apache.lucene.analysis.Token)\n   */\n  @Override\n  public boolean isNewFragment()\n  {\n    boolean isNewFrag = false;\n    int minFragLen = (int)((1.0f - slop)*targetFragChars);\n    int endOffset = offsetAtt.endOffset();\n    \n    // ** determin isNewFrag\n    if(posIncAtt.getPositionIncrement() > incrementGapThreshold) {\n      // large position gaps always imply new fragments\n      isNewFrag = true;\n\n    } else if(endOffset - currentOffset < minFragLen) {\n      // we're not in our range of flexibility\n      isNewFrag = false;\n\n    } else if(targetOffset > 0) {\n      // we've already decided on a target\n      isNewFrag = endOffset > targetOffset;\n\n    } else {\n      // we might be able to do something\n      int minOffset = currentOffset + minFragLen;\n      int maxOffset = (int)(currentOffset + (1.0f + slop)*targetFragChars);\n      int hotIndex;\n\n      // look for a close hotspot\n      hotIndex = Arrays.binarySearch(hotspots, endOffset);\n      if(hotIndex < 0) hotIndex = -hotIndex;\n      if(hotIndex >= hotspots.length) {\n        // no more hotspots in this input stream\n        targetOffset = currentOffset + targetFragChars;\n\n      } else if(hotspots[hotIndex] > maxOffset) {\n        // no hotspots within slop\n        targetOffset = currentOffset + targetFragChars;\n\n      } else {\n        // try to find hotspot in slop\n        int goal = hotspots[hotIndex];\n        while(goal < minOffset && hotIndex < hotspots.length) {\n          hotIndex++;\n          goal = hotspots[hotIndex];\n        }        \n        targetOffset = goal <= maxOffset ? goal : currentOffset + targetFragChars;\n      }\n\n      isNewFrag = endOffset > targetOffset;\n    }      \n      \n    // ** operate on isNewFrag\n    if(isNewFrag) {\n        currentNumFrags++;\n        currentOffset = endOffset;\n        targetOffset = -1;\n    }\n    return isNewFrag;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14b990ee56c39c454f5c6bc2e645d1286e93acee","date":1579181439,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/LuceneRegexFragmenter#isNewFragment().mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/LuceneRegexFragmenter#isNewFragment().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.TextFragmenter#isNewFragment(org.apache.lucene.analysis.Token)\n   */\n  @Override\n  public boolean isNewFragment()\n  {\n    boolean isNewFrag = false;\n    int minFragLen = (int)((1.0f - slop)*targetFragChars);\n    int endOffset = offsetAtt.endOffset();\n    \n    // ** determin isNewFrag\n    if(posIncAtt.getPositionIncrement() > incrementGapThreshold) {\n      // large position gaps always imply new fragments\n      isNewFrag = true;\n\n    } else if(endOffset - currentOffset < minFragLen) {\n      // we're not in our range of flexibility\n      isNewFrag = false;\n\n    } else if(targetOffset > 0) {\n      // we've already decided on a target\n      isNewFrag = endOffset > targetOffset;\n\n    } else {\n      // we might be able to do something\n      int minOffset = currentOffset + minFragLen;\n      int maxOffset = (int)(currentOffset + (1.0f + slop)*targetFragChars);\n      int hotIndex;\n\n      // look for a close hotspot\n      hotIndex = Arrays.binarySearch(hotspots, endOffset);\n      if(hotIndex < 0) hotIndex = -hotIndex;\n      if(hotIndex >= hotspots.length) {\n        // no more hotspots in this input stream\n        targetOffset = currentOffset + targetFragChars;\n\n      } else if(hotspots[hotIndex] > maxOffset) {\n        // no hotspots within slop\n        targetOffset = currentOffset + targetFragChars;\n\n      } else {\n        // try to find hotspot in slop\n        int goal = hotspots[hotIndex];\n        while(goal < minOffset && hotIndex < hotspots.length) {\n          hotIndex++;\n          goal = hotspots[hotIndex];\n        }        \n        targetOffset = goal <= maxOffset ? goal : currentOffset + targetFragChars;\n      }\n\n      isNewFrag = endOffset > targetOffset;\n    }      \n      \n    // ** operate on isNewFrag\n    if(isNewFrag) {\n        currentNumFrags++;\n        currentOffset = endOffset;\n        targetOffset = -1;\n    }\n    return isNewFrag;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\r\n   * @see org.apache.lucene.search.highlight.TextFragmenter#isNewFragment(org.apache.lucene.analysis.Token)\r\n   */\r\n  @Override\r\n  public boolean isNewFragment()\r\n  {\r\n    boolean isNewFrag = false;\r\n    int minFragLen = (int)((1.0f - slop)*targetFragChars);\r\n    int endOffset = offsetAtt.endOffset();\r\n    \r\n    // ** determin isNewFrag\r\n    if(posIncAtt.getPositionIncrement() > incrementGapThreshold) {\r\n      // large position gaps always imply new fragments\r\n      isNewFrag = true;\r\n\r\n    } else if(endOffset - currentOffset < minFragLen) {\r\n      // we're not in our range of flexibility\r\n      isNewFrag = false;\r\n\r\n    } else if(targetOffset > 0) {\r\n      // we've already decided on a target\r\n      isNewFrag = endOffset > targetOffset;\r\n\r\n    } else {\r\n      // we might be able to do something\r\n      int minOffset = currentOffset + minFragLen;\r\n      int maxOffset = (int)(currentOffset + (1.0f + slop)*targetFragChars);\r\n      int hotIndex;\r\n\r\n      // look for a close hotspot\r\n      hotIndex = Arrays.binarySearch(hotspots, endOffset);\r\n      if(hotIndex < 0) hotIndex = -hotIndex;\r\n      if(hotIndex >= hotspots.length) {\r\n        // no more hotspots in this input stream\r\n        targetOffset = currentOffset + targetFragChars;\r\n\r\n      } else if(hotspots[hotIndex] > maxOffset) {\r\n        // no hotspots within slop\r\n        targetOffset = currentOffset + targetFragChars;\r\n\r\n      } else {\r\n        // try to find hotspot in slop\r\n        int goal = hotspots[hotIndex];\r\n        while(goal < minOffset && hotIndex < hotspots.length) {\r\n          hotIndex++;\r\n          goal = hotspots[hotIndex];\r\n        }        \r\n        targetOffset = goal <= maxOffset ? goal : currentOffset + targetFragChars;\r\n      }\r\n\r\n      isNewFrag = endOffset > targetOffset;\r\n    }      \r\n      \r\n    // ** operate on isNewFrag\r\n    if(isNewFrag) {\r\n        currentNumFrags++;\r\n        currentOffset = endOffset;\r\n        targetOffset = -1;\r\n    }\r\n    return isNewFrag;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"14b990ee56c39c454f5c6bc2e645d1286e93acee":["cfd5345d467d0ee13701d24481e4c90995f06339"],"cfd5345d467d0ee13701d24481e4c90995f06339":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"507e7decdf00981d09a74632ea30299a4ce6ba72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cfd5345d467d0ee13701d24481e4c90995f06339"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14b990ee56c39c454f5c6bc2e645d1286e93acee"]},"commit2Childs":{"14b990ee56c39c454f5c6bc2e645d1286e93acee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cfd5345d467d0ee13701d24481e4c90995f06339":["14b990ee56c39c454f5c6bc2e645d1286e93acee","507e7decdf00981d09a74632ea30299a4ce6ba72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cfd5345d467d0ee13701d24481e4c90995f06339","507e7decdf00981d09a74632ea30299a4ce6ba72"],"507e7decdf00981d09a74632ea30299a4ce6ba72":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["507e7decdf00981d09a74632ea30299a4ce6ba72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}