{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetsWithNestedObjects#testFacetingOnParents().mjava","commits":[{"id":"5f7c69c29432074b666568db5e84001acd540dee","date":1520745905,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetsWithNestedObjects#testFacetingOnParents().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Example from http://yonik.com/solr-nested-objects/\n   * The main query gives us a document list of reviews by author_s:yonik\n   * If we want to facet on the book genre (cat_s field) then we need to\n   * switch the domain from the children (type_s:reviews) to the parents (type_s:books).\n   *\n   * And we get a facet over the books which yonik reviewed\n   *\n   * Note that regardless of which direction we are mapping\n   * (parents to children or children to parents),\n   * we provide a query that defines the complete set of parents in the index.\n   * In these examples, the parent filter is “type_s:book”.\n   */\n  @Test\n  public void testFacetingOnParents() throws Exception {\n    final Client client = Client.localClient();\n    ModifiableSolrParams p = params(\"rows\",\"10\");\n    client.testJQ(params(p, \"q\", \"author_s:yonik\", \"fl\", \"id\", \"fl\" , \"comment_t\"\n        , \"json.facet\", \"{\" +\n            \"  genres: {\" +\n            \"    type:terms,\" +\n            \"    field:cat_s,\" +\n            \"    domain: { blockParent : \\\"type_s:book\\\" }\" +\n            \"  }\" +\n            \"}\"\n        )\n        , \"response=={numFound:2,start:0,docs:[\" +\n            \"      {id:book1_c1,\" +\n            \"        comment_t:\\\"A great start to what looks like an epic series!\\\"},\" +\n            \"      {id:book2_c1,\" +\n            \"        comment_t:\\\"Ahead of its time... I wonder if it helped inspire The Matrix?\\\"}]}\"\n        , \"facets=={ count:2,\" +\n            \"genres:{buckets:[ {val:fantasy, count:1},\" +\n            \"                  {val:sci-fi,  count:1}]}}\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetsWithNestedObjects#testFacetingOnParents().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetsWithNestedObjects#testFacetingOnParents().mjava","sourceNew":"  /**\n   * Example from http://yonik.com/solr-nested-objects/\n   * The main query gives us a document list of reviews by author_s:yonik\n   * If we want to facet on the book genre (cat_s field) then we need to\n   * switch the domain from the children (type_s:reviews) to the parents (type_s:books).\n   *\n   * And we get a facet over the books which yonik reviewed\n   *\n   * Note that regardless of which direction we are mapping\n   * (parents to children or children to parents),\n   * we provide a query that defines the complete set of parents in the index.\n   * In these examples, the parent filter is “type_s:book”.\n   */\n  @Test\n  public void testFacetingOnParents() throws Exception {\n    final Client client = Client.localClient();\n    ModifiableSolrParams p = params(\"rows\",\"10\");\n    client.testJQ(params(p, \"q\", \"author_s:yonik\", \"fl\", \"id\", \"fl\" , \"comment_t\"\n        , \"json.facet\", \"{\" +\n            \"  genres: {\" +\n            \"    type:terms,\" +\n            \"    field:cat_s,\" +\n            \"    domain: { blockParent : \\\"type_s:book\\\" }\" +\n            \"  }\" +\n            \"}\"\n        )\n        , \"response=={numFound:2,start:0,'numFoundExact':true,docs:[\" +\n            \"      {id:book1_c1,\" +\n            \"        comment_t:\\\"A great start to what looks like an epic series!\\\"},\" +\n            \"      {id:book2_c1,\" +\n            \"        comment_t:\\\"Ahead of its time... I wonder if it helped inspire The Matrix?\\\"}]}\"\n        , \"facets=={ count:2,\" +\n            \"genres:{buckets:[ {val:fantasy, count:1},\" +\n            \"                  {val:sci-fi,  count:1}]}}\"\n    );\n  }\n\n","sourceOld":"  /**\n   * Example from http://yonik.com/solr-nested-objects/\n   * The main query gives us a document list of reviews by author_s:yonik\n   * If we want to facet on the book genre (cat_s field) then we need to\n   * switch the domain from the children (type_s:reviews) to the parents (type_s:books).\n   *\n   * And we get a facet over the books which yonik reviewed\n   *\n   * Note that regardless of which direction we are mapping\n   * (parents to children or children to parents),\n   * we provide a query that defines the complete set of parents in the index.\n   * In these examples, the parent filter is “type_s:book”.\n   */\n  @Test\n  public void testFacetingOnParents() throws Exception {\n    final Client client = Client.localClient();\n    ModifiableSolrParams p = params(\"rows\",\"10\");\n    client.testJQ(params(p, \"q\", \"author_s:yonik\", \"fl\", \"id\", \"fl\" , \"comment_t\"\n        , \"json.facet\", \"{\" +\n            \"  genres: {\" +\n            \"    type:terms,\" +\n            \"    field:cat_s,\" +\n            \"    domain: { blockParent : \\\"type_s:book\\\" }\" +\n            \"  }\" +\n            \"}\"\n        )\n        , \"response=={numFound:2,start:0,docs:[\" +\n            \"      {id:book1_c1,\" +\n            \"        comment_t:\\\"A great start to what looks like an epic series!\\\"},\" +\n            \"      {id:book2_c1,\" +\n            \"        comment_t:\\\"Ahead of its time... I wonder if it helped inspire The Matrix?\\\"}]}\"\n        , \"facets=={ count:2,\" +\n            \"genres:{buckets:[ {val:fantasy, count:1},\" +\n            \"                  {val:sci-fi,  count:1}]}}\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["5f7c69c29432074b666568db5e84001acd540dee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f7c69c29432074b666568db5e84001acd540dee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["640ded7811e1b7d29236a5e2934ec3cd266a8199"]},"commit2Childs":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f7c69c29432074b666568db5e84001acd540dee"],"5f7c69c29432074b666568db5e84001acd540dee":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}