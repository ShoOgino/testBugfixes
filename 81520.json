{"path":"lucene/replicator/src/java/org/apache/lucene/replicator/ReplicationClient.ReplicationThread#run().mjava","commits":[{"id":"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4","date":1368446242,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/ReplicationClient.ReplicationThread#run().mjava","pathOld":"/dev/null","sourceNew":"    @SuppressWarnings(\"synthetic-access\")\n    @Override\n    public void run() {\n      while (true) {\n        long time = System.currentTimeMillis();\n        updateLock.lock();\n        try {\n          doUpdate();\n        } catch (Throwable t) {\n          handleUpdateException(t);\n        } finally {\n          updateLock.unlock();\n        }\n        time = System.currentTimeMillis() - time;\n        \n        // adjust timeout to compensate the time spent doing the replication.\n        final long timeout = interval - time;\n        if (timeout > 0) {\n          try {\n            // this will return immediately if we were ordered to stop (count=0)\n            // or the timeout has elapsed. if it returns true, it means count=0,\n            // so terminate.\n            if (stop.await(timeout, TimeUnit.MILLISECONDS)) {\n              return;\n            }\n          } catch (InterruptedException e) {\n            // if we were interruted, somebody wants to terminate us, so just\n            // throw the exception further.\n            Thread.currentThread().interrupt();\n            throw new ThreadInterruptedException(e);\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/ReplicationClient.ReplicationThread#run().mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/ReplicationClient.ReplicationThread#run().mjava","sourceNew":"    @SuppressWarnings(\"synthetic-access\")\n    @Override\n    public void run() {\n      while (true) {\n        long time = System.currentTimeMillis();\n        updateLock.lock();\n        try {\n          doUpdate();\n        } catch (Throwable t) {\n          handleUpdateException(t);\n        } finally {\n          updateLock.unlock();\n        }\n        time = System.currentTimeMillis() - time;\n        \n        // adjust timeout to compensate the time spent doing the replication.\n        final long timeout = interval - time;\n        if (timeout > 0) {\n          try {\n            // this will return immediately if we were ordered to stop (count=0)\n            // or the timeout has elapsed. if it returns true, it means count=0,\n            // so terminate.\n            if (stop.await(timeout, TimeUnit.MILLISECONDS)) {\n              return;\n            }\n          } catch (InterruptedException e) {\n            // if we were interruted, somebody wants to terminate us, so just\n            // throw the exception further.\n            Thread.currentThread().interrupt();\n            throw new ThreadInterruptedException(e);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"synthetic-access\")\n    @Override\n    public void run() {\n      while (true) {\n        long time = System.currentTimeMillis();\n        updateLock.lock();\n        try {\n          doUpdate();\n        } catch (Throwable t) {\n          handleUpdateException(t);\n        } finally {\n          updateLock.unlock();\n        }\n        time = System.currentTimeMillis() - time;\n        \n        // adjust timeout to compensate the time spent doing the replication.\n        final long timeout = interval - time;\n        if (timeout > 0) {\n          try {\n            // this will return immediately if we were ordered to stop (count=0)\n            // or the timeout has elapsed. if it returns true, it means count=0,\n            // so terminate.\n            if (stop.await(timeout, TimeUnit.MILLISECONDS)) {\n              return;\n            }\n          } catch (InterruptedException e) {\n            // if we were interruted, somebody wants to terminate us, so just\n            // throw the exception further.\n            Thread.currentThread().interrupt();\n            throw new ThreadInterruptedException(e);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/ReplicationClient.ReplicationThread#run().mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/ReplicationClient.ReplicationThread#run().mjava","sourceNew":"    @SuppressWarnings(\"synthetic-access\")\n    @Override\n    public void run() {\n      while (true) {\n        long time = System.currentTimeMillis();\n        updateLock.lock();\n        try {\n          doUpdate();\n        } catch (Throwable t) {\n          handleUpdateException(t);\n        } finally {\n          updateLock.unlock();\n        }\n        time = System.currentTimeMillis() - time;\n        \n        // adjust timeout to compensate the time spent doing the replication.\n        final long timeout = interval - time;\n        if (timeout > 0) {\n          try {\n            // this will return immediately if we were ordered to stop (count=0)\n            // or the timeout has elapsed. if it returns true, it means count=0,\n            // so terminate.\n            if (stop.await(timeout, TimeUnit.MILLISECONDS)) {\n              return;\n            }\n          } catch (InterruptedException e) {\n            // if we were interruted, somebody wants to terminate us, so just\n            // throw the exception further.\n            Thread.currentThread().interrupt();\n            throw new ThreadInterruptedException(e);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"synthetic-access\")\n    @Override\n    public void run() {\n      while (true) {\n        long time = System.currentTimeMillis();\n        updateLock.lock();\n        try {\n          doUpdate();\n        } catch (Throwable t) {\n          handleUpdateException(t);\n        } finally {\n          updateLock.unlock();\n        }\n        time = System.currentTimeMillis() - time;\n        \n        // adjust timeout to compensate the time spent doing the replication.\n        final long timeout = interval - time;\n        if (timeout > 0) {\n          try {\n            // this will return immediately if we were ordered to stop (count=0)\n            // or the timeout has elapsed. if it returns true, it means count=0,\n            // so terminate.\n            if (stop.await(timeout, TimeUnit.MILLISECONDS)) {\n              return;\n            }\n          } catch (InterruptedException e) {\n            // if we were interruted, somebody wants to terminate us, so just\n            // throw the exception further.\n            Thread.currentThread().interrupt();\n            throw new ThreadInterruptedException(e);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}