{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnTermVectors#eval(MockDirectoryWrapper).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnTermVectors#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnTermVectors#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean fail = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (TermVectorsConsumer.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName())) {\n          fail = true;\n        }\n      }\n      \n      if (fail) {\n        throw new RuntimeException(EXC_MSG);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean fail = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (TermVectorsConsumer.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName())) {\n          fail = true;\n        }\n      }\n      \n      if (fail) {\n        throw new RuntimeException(EXC_MSG);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66d4c05d2724c63d6dcbdb32aab67299d77e3ca1","date":1370803313,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnTermVectors#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnTermVectors#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean fail = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (TermVectorsConsumer.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName())) {\n          fail = true;\n          break;\n        }\n      }\n      \n      if (fail) {\n        throw new RuntimeException(EXC_MSG);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean fail = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (TermVectorsConsumer.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName())) {\n          fail = true;\n        }\n      }\n      \n      if (fail) {\n        throw new RuntimeException(EXC_MSG);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2916966cc9815e973c01452a0d76c98c5e0d0926","date":1577444040,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnTermVectors#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnTermVectors#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (callStackContains(TermVectorsConsumer.class, stage)) {\n        throw new RuntimeException(EXC_MSG);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean fail = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (TermVectorsConsumer.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName())) {\n          fail = true;\n          break;\n        }\n      }\n      \n      if (fail) {\n        throw new RuntimeException(EXC_MSG);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ec73c5617c177b1d81ddfe04bbff1d08fccecc","date":1577456244,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnTermVectors#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnTermVectors#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (callStackContains(TermVectorsConsumer.class, stage)) {\n        throw new RuntimeException(EXC_MSG);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean fail = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (TermVectorsConsumer.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName())) {\n          fail = true;\n          break;\n        }\n      }\n      \n      if (fail) {\n        throw new RuntimeException(EXC_MSG);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"66d4c05d2724c63d6dcbdb32aab67299d77e3ca1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2916966cc9815e973c01452a0d76c98c5e0d0926":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1","2916966cc9815e973c01452a0d76c98c5e0d0926"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2916966cc9815e973c01452a0d76c98c5e0d0926"]},"commit2Childs":{"66d4c05d2724c63d6dcbdb32aab67299d77e3ca1":["2916966cc9815e973c01452a0d76c98c5e0d0926","94ec73c5617c177b1d81ddfe04bbff1d08fccecc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2916966cc9815e973c01452a0d76c98c5e0d0926":["94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}