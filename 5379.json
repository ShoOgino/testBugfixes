{"path":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(SolrCore,Config).mjava","commits":[{"id":"d80013b5e260def972025c93a0b08524f9c38f49","date":1170102801,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(SolrCore,Config).mjava","pathOld":"/dev/null","sourceNew":"  public SolrRequestParsers( SolrCore core, Config config )\n  {\n    this.core = core;\n    \n    long uploadLimitKB = 2000; // 2MB default\n    NodeList nodes = (NodeList)config.evaluate(\"requestParsers\", XPathConstants.NODESET);\n      if( nodes!=null && nodes.getLength()>0 ) {\n          // only look at the first node.  \n        NamedNodeMap attrs = nodes.item(0).getAttributes();\n        Node node = attrs.getNamedItem( \"enableRemoteStreaming\" );\n        if( node != null ) {\n          enableRemoteStreams = Boolean.parseBoolean( node.getTextContent() );\n        }\n        node = attrs.getNamedItem( \"multipartUploadLimitInKB\" );\n        if( node != null ) {\n          uploadLimitKB = Long.parseLong( node.getTextContent() );\n        }\n      }\n    \n    MultipartRequestParser multi = new MultipartRequestParser( uploadLimitKB );\n    RawRequestParser raw = new RawRequestParser();\n    standard = new StandardRequestParser( multi, raw );\n    \n    // I don't see a need to have this publically configured just yet\n    // adding it is trivial\n    parsers = new HashMap<String, SolrRequestParser>();\n    parsers.put( MULTIPART, multi );\n    parsers.put( RAW, raw );\n    parsers.put( SIMPLE, new SimpleRequestParser() );\n    parsers.put( STANDARD, standard );\n    parsers.put( \"\", standard );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c35e0c1cd20847fdfcf51e89270b571ef397c32","date":1177879643,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(SolrCore,Config).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(SolrCore,Config).mjava","sourceNew":"  public SolrRequestParsers( SolrCore core, Config config )\n  {\n    this.core = core;\n    \n    // Read the configuration\n    long uploadLimitKB = SolrConfig.config.getInt( \n        \"requestDispatcher/requestParsers/@multipartUploadLimitInKB\", 2000 ); // 2MB default\n    \n    this.enableRemoteStreams = SolrConfig.config.getBool( \n        \"requestDispatcher/requestParsers/@enableRemoteStreaming\", false ); \n        \n    MultipartRequestParser multi = new MultipartRequestParser( uploadLimitKB );\n    RawRequestParser raw = new RawRequestParser();\n    standard = new StandardRequestParser( multi, raw );\n    \n    // I don't see a need to have this publically configured just yet\n    // adding it is trivial\n    parsers = new HashMap<String, SolrRequestParser>();\n    parsers.put( MULTIPART, multi );\n    parsers.put( RAW, raw );\n    parsers.put( SIMPLE, new SimpleRequestParser() );\n    parsers.put( STANDARD, standard );\n    parsers.put( \"\", standard );\n  }\n\n","sourceOld":"  public SolrRequestParsers( SolrCore core, Config config )\n  {\n    this.core = core;\n    \n    long uploadLimitKB = 2000; // 2MB default\n    NodeList nodes = (NodeList)config.evaluate(\"requestParsers\", XPathConstants.NODESET);\n      if( nodes!=null && nodes.getLength()>0 ) {\n          // only look at the first node.  \n        NamedNodeMap attrs = nodes.item(0).getAttributes();\n        Node node = attrs.getNamedItem( \"enableRemoteStreaming\" );\n        if( node != null ) {\n          enableRemoteStreams = Boolean.parseBoolean( node.getTextContent() );\n        }\n        node = attrs.getNamedItem( \"multipartUploadLimitInKB\" );\n        if( node != null ) {\n          uploadLimitKB = Long.parseLong( node.getTextContent() );\n        }\n      }\n    \n    MultipartRequestParser multi = new MultipartRequestParser( uploadLimitKB );\n    RawRequestParser raw = new RawRequestParser();\n    standard = new StandardRequestParser( multi, raw );\n    \n    // I don't see a need to have this publically configured just yet\n    // adding it is trivial\n    parsers = new HashMap<String, SolrRequestParser>();\n    parsers.put( MULTIPART, multi );\n    parsers.put( RAW, raw );\n    parsers.put( SIMPLE, new SimpleRequestParser() );\n    parsers.put( STANDARD, standard );\n    parsers.put( \"\", standard );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(SolrCore).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#SolrRequestParsers(SolrCore,Config).mjava","sourceNew":"  public SolrRequestParsers( SolrCore core )\n  {\n    this.core = core;\n    Config config = core.getSolrConfig();\n    \n    // Read the configuration\n    long uploadLimitKB = config.getInt( \n        \"requestDispatcher/requestParsers/@multipartUploadLimitInKB\", 2000 ); // 2MB default\n    \n    this.enableRemoteStreams = config.getBool( \n        \"requestDispatcher/requestParsers/@enableRemoteStreaming\", false ); \n        \n    MultipartRequestParser multi = new MultipartRequestParser( uploadLimitKB );\n    RawRequestParser raw = new RawRequestParser();\n    standard = new StandardRequestParser( multi, raw );\n    \n    // I don't see a need to have this publically configured just yet\n    // adding it is trivial\n    parsers = new HashMap<String, SolrRequestParser>();\n    parsers.put( MULTIPART, multi );\n    parsers.put( RAW, raw );\n    parsers.put( SIMPLE, new SimpleRequestParser() );\n    parsers.put( STANDARD, standard );\n    parsers.put( \"\", standard );\n  }\n\n","sourceOld":"  public SolrRequestParsers( SolrCore core, Config config )\n  {\n    this.core = core;\n    \n    // Read the configuration\n    long uploadLimitKB = SolrConfig.config.getInt( \n        \"requestDispatcher/requestParsers/@multipartUploadLimitInKB\", 2000 ); // 2MB default\n    \n    this.enableRemoteStreams = SolrConfig.config.getBool( \n        \"requestDispatcher/requestParsers/@enableRemoteStreaming\", false ); \n        \n    MultipartRequestParser multi = new MultipartRequestParser( uploadLimitKB );\n    RawRequestParser raw = new RawRequestParser();\n    standard = new StandardRequestParser( multi, raw );\n    \n    // I don't see a need to have this publically configured just yet\n    // adding it is trivial\n    parsers = new HashMap<String, SolrRequestParser>();\n    parsers.put( MULTIPART, multi );\n    parsers.put( RAW, raw );\n    parsers.put( SIMPLE, new SimpleRequestParser() );\n    parsers.put( STANDARD, standard );\n    parsers.put( \"\", standard );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["9c35e0c1cd20847fdfcf51e89270b571ef397c32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"9c35e0c1cd20847fdfcf51e89270b571ef397c32":["d80013b5e260def972025c93a0b08524f9c38f49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d80013b5e260def972025c93a0b08524f9c38f49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d80013b5e260def972025c93a0b08524f9c38f49"],"9c35e0c1cd20847fdfcf51e89270b571ef397c32":["6d6338c87060be5f66757a94945975f3bbd377a9"],"d80013b5e260def972025c93a0b08524f9c38f49":["9c35e0c1cd20847fdfcf51e89270b571ef397c32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6d6338c87060be5f66757a94945975f3bbd377a9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}