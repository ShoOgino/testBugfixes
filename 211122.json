{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#parseTypes(List[String]).mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#parseTypes(List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#parseTypes(List[String]).mjava","sourceNew":"  // parses a list of MappingCharFilter style rules into a custom byte[] type table\n  private byte[] parseTypes(List<String> rules) {\n    SortedMap<Character,Byte> typeMap = new TreeMap<Character,Byte>();\n    for( String rule : rules ){\n      Matcher m = typePattern.matcher(rule);\n      if( !m.find() )\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"]\");\n      String lhs = parseString(m.group(1).trim());\n      Byte rhs = parseType(m.group(2).trim());\n      if (lhs.length() != 1)\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"]. Only a single character is allowed.\");\n      if (rhs == null)\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"]. Illegal type.\");\n      typeMap.put(lhs.charAt(0), rhs);\n    }\n    \n    // ensure the table is always at least as big as DEFAULT_WORD_DELIM_TABLE for performance\n    byte types[] = new byte[Math.max(typeMap.lastKey()+1, WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE.length)];\n    for (int i = 0; i < types.length; i++)\n      types[i] = WordDelimiterIterator.getType(i);\n    for (Map.Entry<Character,Byte> mapping : typeMap.entrySet())\n      types[mapping.getKey()] = mapping.getValue();\n    return types;\n  }\n\n","sourceOld":"  // parses a list of MappingCharFilter style rules into a custom byte[] type table\n  private byte[] parseTypes(List<String> rules) {\n    SortedMap<Character,Byte> typeMap = new TreeMap<Character,Byte>();\n    for( String rule : rules ){\n      Matcher m = typePattern.matcher(rule);\n      if( !m.find() )\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"]\");\n      String lhs = parseString(m.group(1).trim());\n      Byte rhs = parseType(m.group(2).trim());\n      if (lhs.length() != 1)\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"]. Only a single character is allowed.\");\n      if (rhs == null)\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"]. Illegal type.\");\n      typeMap.put(lhs.charAt(0), rhs);\n    }\n    \n    // ensure the table is always at least as big as DEFAULT_WORD_DELIM_TABLE for performance\n    byte types[] = new byte[Math.max(typeMap.lastKey()+1, WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE.length)];\n    for (int i = 0; i < types.length; i++)\n      types[i] = WordDelimiterIterator.getType(i);\n    for (Map.Entry<Character,Byte> mapping : typeMap.entrySet())\n      types[mapping.getKey()] = mapping.getValue();\n    return types;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#parseTypes(List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#parseTypes(List[String]).mjava","sourceNew":"  // parses a list of MappingCharFilter style rules into a custom byte[] type table\n  private byte[] parseTypes(List<String> rules) {\n    SortedMap<Character,Byte> typeMap = new TreeMap<Character,Byte>();\n    for( String rule : rules ){\n      Matcher m = typePattern.matcher(rule);\n      if( !m.find() )\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"]\");\n      String lhs = parseString(m.group(1).trim());\n      Byte rhs = parseType(m.group(2).trim());\n      if (lhs.length() != 1)\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"]. Only a single character is allowed.\");\n      if (rhs == null)\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"]. Illegal type.\");\n      typeMap.put(lhs.charAt(0), rhs);\n    }\n    \n    // ensure the table is always at least as big as DEFAULT_WORD_DELIM_TABLE for performance\n    byte types[] = new byte[Math.max(typeMap.lastKey()+1, WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE.length)];\n    for (int i = 0; i < types.length; i++)\n      types[i] = WordDelimiterIterator.getType(i);\n    for (Map.Entry<Character,Byte> mapping : typeMap.entrySet())\n      types[mapping.getKey()] = mapping.getValue();\n    return types;\n  }\n\n","sourceOld":"  // parses a list of MappingCharFilter style rules into a custom byte[] type table\n  private byte[] parseTypes(List<String> rules) {\n    SortedMap<Character,Byte> typeMap = new TreeMap<Character,Byte>();\n    for( String rule : rules ){\n      Matcher m = typePattern.matcher(rule);\n      if( !m.find() )\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"]\");\n      String lhs = parseString(m.group(1).trim());\n      Byte rhs = parseType(m.group(2).trim());\n      if (lhs.length() != 1)\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"]. Only a single character is allowed.\");\n      if (rhs == null)\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"]. Illegal type.\");\n      typeMap.put(lhs.charAt(0), rhs);\n    }\n    \n    // ensure the table is always at least as big as DEFAULT_WORD_DELIM_TABLE for performance\n    byte types[] = new byte[Math.max(typeMap.lastKey()+1, WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE.length)];\n    for (int i = 0; i < types.length; i++)\n      types[i] = WordDelimiterIterator.getType(i);\n    for (Map.Entry<Character,Byte> mapping : typeMap.entrySet())\n      types[mapping.getKey()] = mapping.getValue();\n    return types;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f80818731469e00f54165ec94aae2db868ea05","date":1343266866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#parseTypes(List[String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#parseTypes(List[String]).mjava","sourceNew":"  // parses a list of MappingCharFilter style rules into a custom byte[] type table\n  private byte[] parseTypes(List<String> rules) {\n    SortedMap<Character,Byte> typeMap = new TreeMap<Character,Byte>();\n    for( String rule : rules ){\n      Matcher m = typePattern.matcher(rule);\n      if( !m.find() )\n        throw new IllegalArgumentException(\"Invalid Mapping Rule : [\" + rule + \"]\");\n      String lhs = parseString(m.group(1).trim());\n      Byte rhs = parseType(m.group(2).trim());\n      if (lhs.length() != 1)\n        throw new IllegalArgumentException(\"Invalid Mapping Rule : [\" + rule + \"]. Only a single character is allowed.\");\n      if (rhs == null)\n        throw new IllegalArgumentException(\"Invalid Mapping Rule : [\" + rule + \"]. Illegal type.\");\n      typeMap.put(lhs.charAt(0), rhs);\n    }\n    \n    // ensure the table is always at least as big as DEFAULT_WORD_DELIM_TABLE for performance\n    byte types[] = new byte[Math.max(typeMap.lastKey()+1, WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE.length)];\n    for (int i = 0; i < types.length; i++)\n      types[i] = WordDelimiterIterator.getType(i);\n    for (Map.Entry<Character,Byte> mapping : typeMap.entrySet())\n      types[mapping.getKey()] = mapping.getValue();\n    return types;\n  }\n\n","sourceOld":"  // parses a list of MappingCharFilter style rules into a custom byte[] type table\n  private byte[] parseTypes(List<String> rules) {\n    SortedMap<Character,Byte> typeMap = new TreeMap<Character,Byte>();\n    for( String rule : rules ){\n      Matcher m = typePattern.matcher(rule);\n      if( !m.find() )\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"]\");\n      String lhs = parseString(m.group(1).trim());\n      Byte rhs = parseType(m.group(2).trim());\n      if (lhs.length() != 1)\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"]. Only a single character is allowed.\");\n      if (rhs == null)\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"]. Illegal type.\");\n      typeMap.put(lhs.charAt(0), rhs);\n    }\n    \n    // ensure the table is always at least as big as DEFAULT_WORD_DELIM_TABLE for performance\n    byte types[] = new byte[Math.max(typeMap.lastKey()+1, WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE.length)];\n    for (int i = 0; i < types.length; i++)\n      types[i] = WordDelimiterIterator.getType(i);\n    for (Map.Entry<Character,Byte> mapping : typeMap.entrySet())\n      types[mapping.getKey()] = mapping.getValue();\n    return types;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#parseTypes(List[String]).mjava","pathOld":"/dev/null","sourceNew":"  // parses a list of MappingCharFilter style rules into a custom byte[] type table\n  private byte[] parseTypes(List<String> rules) {\n    SortedMap<Character,Byte> typeMap = new TreeMap<Character,Byte>();\n    for( String rule : rules ){\n      Matcher m = typePattern.matcher(rule);\n      if( !m.find() )\n        throw new IllegalArgumentException(\"Invalid Mapping Rule : [\" + rule + \"]\");\n      String lhs = parseString(m.group(1).trim());\n      Byte rhs = parseType(m.group(2).trim());\n      if (lhs.length() != 1)\n        throw new IllegalArgumentException(\"Invalid Mapping Rule : [\" + rule + \"]. Only a single character is allowed.\");\n      if (rhs == null)\n        throw new IllegalArgumentException(\"Invalid Mapping Rule : [\" + rule + \"]. Illegal type.\");\n      typeMap.put(lhs.charAt(0), rhs);\n    }\n    \n    // ensure the table is always at least as big as DEFAULT_WORD_DELIM_TABLE for performance\n    byte types[] = new byte[Math.max(typeMap.lastKey()+1, WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE.length)];\n    for (int i = 0; i < types.length; i++)\n      types[i] = WordDelimiterIterator.getType(i);\n    for (Map.Entry<Character,Byte> mapping : typeMap.entrySet())\n      types[mapping.getKey()] = mapping.getValue();\n    return types;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#parseTypes(List[String]).mjava","pathOld":"/dev/null","sourceNew":"  // parses a list of MappingCharFilter style rules into a custom byte[] type table\n  private byte[] parseTypes(List<String> rules) {\n    SortedMap<Character,Byte> typeMap = new TreeMap<Character,Byte>();\n    for( String rule : rules ){\n      Matcher m = typePattern.matcher(rule);\n      if( !m.find() )\n        throw new IllegalArgumentException(\"Invalid Mapping Rule : [\" + rule + \"]\");\n      String lhs = parseString(m.group(1).trim());\n      Byte rhs = parseType(m.group(2).trim());\n      if (lhs.length() != 1)\n        throw new IllegalArgumentException(\"Invalid Mapping Rule : [\" + rule + \"]. Only a single character is allowed.\");\n      if (rhs == null)\n        throw new IllegalArgumentException(\"Invalid Mapping Rule : [\" + rule + \"]. Illegal type.\");\n      typeMap.put(lhs.charAt(0), rhs);\n    }\n    \n    // ensure the table is always at least as big as DEFAULT_WORD_DELIM_TABLE for performance\n    byte types[] = new byte[Math.max(typeMap.lastKey()+1, WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE.length)];\n    for (int i = 0; i < types.length; i++)\n      types[i] = WordDelimiterIterator.getType(i);\n    for (Map.Entry<Character,Byte> mapping : typeMap.entrySet())\n      types[mapping.getKey()] = mapping.getValue();\n    return types;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#parseTypes(List[String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#parseTypes(List[String]).mjava","sourceNew":"  // parses a list of MappingCharFilter style rules into a custom byte[] type table\n  private byte[] parseTypes(List<String> rules) {\n    SortedMap<Character,Byte> typeMap = new TreeMap<>();\n    for( String rule : rules ){\n      Matcher m = typePattern.matcher(rule);\n      if( !m.find() )\n        throw new IllegalArgumentException(\"Invalid Mapping Rule : [\" + rule + \"]\");\n      String lhs = parseString(m.group(1).trim());\n      Byte rhs = parseType(m.group(2).trim());\n      if (lhs.length() != 1)\n        throw new IllegalArgumentException(\"Invalid Mapping Rule : [\" + rule + \"]. Only a single character is allowed.\");\n      if (rhs == null)\n        throw new IllegalArgumentException(\"Invalid Mapping Rule : [\" + rule + \"]. Illegal type.\");\n      typeMap.put(lhs.charAt(0), rhs);\n    }\n    \n    // ensure the table is always at least as big as DEFAULT_WORD_DELIM_TABLE for performance\n    byte types[] = new byte[Math.max(typeMap.lastKey()+1, WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE.length)];\n    for (int i = 0; i < types.length; i++)\n      types[i] = WordDelimiterIterator.getType(i);\n    for (Map.Entry<Character,Byte> mapping : typeMap.entrySet())\n      types[mapping.getKey()] = mapping.getValue();\n    return types;\n  }\n\n","sourceOld":"  // parses a list of MappingCharFilter style rules into a custom byte[] type table\n  private byte[] parseTypes(List<String> rules) {\n    SortedMap<Character,Byte> typeMap = new TreeMap<Character,Byte>();\n    for( String rule : rules ){\n      Matcher m = typePattern.matcher(rule);\n      if( !m.find() )\n        throw new IllegalArgumentException(\"Invalid Mapping Rule : [\" + rule + \"]\");\n      String lhs = parseString(m.group(1).trim());\n      Byte rhs = parseType(m.group(2).trim());\n      if (lhs.length() != 1)\n        throw new IllegalArgumentException(\"Invalid Mapping Rule : [\" + rule + \"]. Only a single character is allowed.\");\n      if (rhs == null)\n        throw new IllegalArgumentException(\"Invalid Mapping Rule : [\" + rule + \"]. Illegal type.\");\n      typeMap.put(lhs.charAt(0), rhs);\n    }\n    \n    // ensure the table is always at least as big as DEFAULT_WORD_DELIM_TABLE for performance\n    byte types[] = new byte[Math.max(typeMap.lastKey()+1, WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE.length)];\n    for (int i = 0; i < types.length; i++)\n      types[i] = WordDelimiterIterator.getType(i);\n    for (Map.Entry<Character,Byte> mapping : typeMap.entrySet())\n      types[mapping.getKey()] = mapping.getValue();\n    return types;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f6f80818731469e00f54165ec94aae2db868ea05"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"f6f80818731469e00f54165ec94aae2db868ea05":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"f6f80818731469e00f54165ec94aae2db868ea05":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["f6f80818731469e00f54165ec94aae2db868ea05"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}