{"path":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter.PostingsWriter#startDoc(int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter.PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter.PostingsWriter#startDoc(int,int).mjava","sourceNew":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        if (VERBOSE) System.out.println(\"    startDoc docID=\" + docID + \" freq=\" + termDocFreq);\n        final int delta = docID - lastDocID;\n        assert docID == 0 || delta > 0;\n        lastDocID = docID;\n        docCount++;\n\n        if (field.indexOptions == IndexOptions.DOCS_ONLY) {\n          buffer.writeVInt(delta);\n        } else if (termDocFreq == 1) {\n          buffer.writeVInt((delta<<1) | 1);\n        } else {\n          buffer.writeVInt(delta<<1);\n          assert termDocFreq > 0;\n          buffer.writeVInt(termDocFreq);\n        }\n\n        lastPos = 0;\n      }\n\n","sourceOld":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        if (VERBOSE) System.out.println(\"    startDoc docID=\" + docID + \" freq=\" + termDocFreq);\n        final int delta = docID - lastDocID;\n        assert docID == 0 || delta > 0;\n        lastDocID = docID;\n        docCount++;\n\n        if (field.indexOptions == IndexOptions.DOCS_ONLY) {\n          buffer.writeVInt(delta);\n        } else if (termDocFreq == 1) {\n          buffer.writeVInt((delta<<1) | 1);\n        } else {\n          buffer.writeVInt(delta<<1);\n          assert termDocFreq > 0;\n          buffer.writeVInt(termDocFreq);\n        }\n\n        lastPos = 0;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06e9e87a586e724774d060a39c60ed1178637952","date":1331555866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter.PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter.PostingsWriter#startDoc(int,int).mjava","sourceNew":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    startDoc docID=\" + docID + \" freq=\" + termDocFreq);\n        final int delta = docID - lastDocID;\n        assert docID == 0 || delta > 0;\n        lastDocID = docID;\n        docCount++;\n\n        if (field.indexOptions == IndexOptions.DOCS_ONLY) {\n          buffer.writeVInt(delta);\n        } else if (termDocFreq == 1) {\n          buffer.writeVInt((delta<<1) | 1);\n        } else {\n          buffer.writeVInt(delta<<1);\n          assert termDocFreq > 0;\n          buffer.writeVInt(termDocFreq);\n        }\n\n        lastPos = 0;\n        lastOffset = 0;\n      }\n\n","sourceOld":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        if (VERBOSE) System.out.println(\"    startDoc docID=\" + docID + \" freq=\" + termDocFreq);\n        final int delta = docID - lastDocID;\n        assert docID == 0 || delta > 0;\n        lastDocID = docID;\n        docCount++;\n\n        if (field.indexOptions == IndexOptions.DOCS_ONLY) {\n          buffer.writeVInt(delta);\n        } else if (termDocFreq == 1) {\n          buffer.writeVInt((delta<<1) | 1);\n        } else {\n          buffer.writeVInt(delta<<1);\n          assert termDocFreq > 0;\n          buffer.writeVInt(termDocFreq);\n        }\n\n        lastPos = 0;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter.PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter.PostingsWriter#startDoc(int,int).mjava","sourceNew":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    startDoc docID=\" + docID + \" freq=\" + termDocFreq);\n        final int delta = docID - lastDocID;\n        assert docID == 0 || delta > 0;\n        lastDocID = docID;\n        docCount++;\n\n        if (field.indexOptions == IndexOptions.DOCS_ONLY) {\n          buffer.writeVInt(delta);\n        } else if (termDocFreq == 1) {\n          buffer.writeVInt((delta<<1) | 1);\n        } else {\n          buffer.writeVInt(delta<<1);\n          assert termDocFreq > 0;\n          buffer.writeVInt(termDocFreq);\n        }\n\n        lastPos = 0;\n        lastOffset = 0;\n      }\n\n","sourceOld":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        if (VERBOSE) System.out.println(\"    startDoc docID=\" + docID + \" freq=\" + termDocFreq);\n        final int delta = docID - lastDocID;\n        assert docID == 0 || delta > 0;\n        lastDocID = docID;\n        docCount++;\n\n        if (field.indexOptions == IndexOptions.DOCS_ONLY) {\n          buffer.writeVInt(delta);\n        } else if (termDocFreq == 1) {\n          buffer.writeVInt((delta<<1) | 1);\n        } else {\n          buffer.writeVInt(delta<<1);\n          assert termDocFreq > 0;\n          buffer.writeVInt(termDocFreq);\n        }\n\n        lastPos = 0;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter.PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter.PostingsWriter#startDoc(int,int).mjava","sourceNew":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    startDoc docID=\" + docID + \" freq=\" + termDocFreq);\n        final int delta = docID - lastDocID;\n        assert docID == 0 || delta > 0;\n        lastDocID = docID;\n        docCount++;\n\n        if (field.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n          buffer.writeVInt(delta);\n        } else if (termDocFreq == 1) {\n          buffer.writeVInt((delta<<1) | 1);\n        } else {\n          buffer.writeVInt(delta<<1);\n          assert termDocFreq > 0;\n          buffer.writeVInt(termDocFreq);\n        }\n\n        lastPos = 0;\n        lastOffset = 0;\n      }\n\n","sourceOld":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    startDoc docID=\" + docID + \" freq=\" + termDocFreq);\n        final int delta = docID - lastDocID;\n        assert docID == 0 || delta > 0;\n        lastDocID = docID;\n        docCount++;\n\n        if (field.indexOptions == IndexOptions.DOCS_ONLY) {\n          buffer.writeVInt(delta);\n        } else if (termDocFreq == 1) {\n          buffer.writeVInt((delta<<1) | 1);\n        } else {\n          buffer.writeVInt(delta<<1);\n          assert termDocFreq > 0;\n          buffer.writeVInt(termDocFreq);\n        }\n\n        lastPos = 0;\n        lastOffset = 0;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter.PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter.PostingsWriter#startDoc(int,int).mjava","sourceNew":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    startDoc docID=\" + docID + \" freq=\" + termDocFreq);\n        final int delta = docID - lastDocID;\n        assert docID == 0 || delta > 0;\n        lastDocID = docID;\n        docCount++;\n\n        if (field.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n          buffer.writeVInt(delta);\n        } else if (termDocFreq == 1) {\n          buffer.writeVInt((delta<<1) | 1);\n        } else {\n          buffer.writeVInt(delta<<1);\n          assert termDocFreq > 0;\n          buffer.writeVInt(termDocFreq);\n        }\n\n        lastPos = 0;\n        lastOffset = 0;\n      }\n\n","sourceOld":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    startDoc docID=\" + docID + \" freq=\" + termDocFreq);\n        final int delta = docID - lastDocID;\n        assert docID == 0 || delta > 0;\n        lastDocID = docID;\n        docCount++;\n\n        if (field.indexOptions == IndexOptions.DOCS_ONLY) {\n          buffer.writeVInt(delta);\n        } else if (termDocFreq == 1) {\n          buffer.writeVInt((delta<<1) | 1);\n        } else {\n          buffer.writeVInt(delta<<1);\n          assert termDocFreq > 0;\n          buffer.writeVInt(termDocFreq);\n        }\n\n        lastPos = 0;\n        lastOffset = 0;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter.PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsWriter.PostingsWriter#startDoc(int,int).mjava","sourceNew":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    startDoc docID=\" + docID + \" freq=\" + termDocFreq);\n        final int delta = docID - lastDocID;\n        assert docID == 0 || delta > 0;\n        lastDocID = docID;\n        docCount++;\n\n        if (field.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n          buffer.writeVInt(delta);\n        } else if (termDocFreq == 1) {\n          buffer.writeVInt((delta<<1) | 1);\n        } else {\n          buffer.writeVInt(delta<<1);\n          assert termDocFreq > 0;\n          buffer.writeVInt(termDocFreq);\n        }\n\n        lastPos = 0;\n        lastOffset = 0;\n      }\n\n","sourceOld":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    startDoc docID=\" + docID + \" freq=\" + termDocFreq);\n        final int delta = docID - lastDocID;\n        assert docID == 0 || delta > 0;\n        lastDocID = docID;\n        docCount++;\n\n        if (field.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n          buffer.writeVInt(delta);\n        } else if (termDocFreq == 1) {\n          buffer.writeVInt((delta<<1) | 1);\n        } else {\n          buffer.writeVInt(delta<<1);\n          assert termDocFreq > 0;\n          buffer.writeVInt(termDocFreq);\n        }\n\n        lastPos = 0;\n        lastOffset = 0;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["06e9e87a586e724774d060a39c60ed1178637952"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","06e9e87a586e724774d060a39c60ed1178637952"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["06e9e87a586e724774d060a39c60ed1178637952","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06e9e87a586e724774d060a39c60ed1178637952":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","06e9e87a586e724774d060a39c60ed1178637952"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"06e9e87a586e724774d060a39c60ed1178637952":["76923f6a33f2c4bec7f584e3f251261afe7ea276","38e3b736c7ca086d61b7dbb841c905ee115490da","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}