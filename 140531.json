{"path":"solr/core/src/java/org/apache/solr/core/SolrCores#allocateLazyCores(int,SolrResourceLoader).mjava","commits":[{"id":"92a4da96826f502cf1a56a096929b37ce73e523a","date":1374584011,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#allocateLazyCores(int,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final int cacheSize, final SolrResourceLoader loader) {\n    if (cacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", cacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(cacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > cacheSize) {\n            synchronized (modifyLock) {\n              SolrCore coreToClose = eldest.getValue();\n              logger.info(\"Closing transient core [{}]\", coreToClose.getName());\n              pendingCloses.add(coreToClose); // Essentially just queue this core up for closing.\n              modifyLock.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    final int transientCacheSize = cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (modifyLock) {\n              SolrCore coreToClose = eldest.getValue();\n              logger.info(\"Closing transient core [{}]\", coreToClose.getName());\n              pendingCloses.add(coreToClose); // Essentially just queue this core up for closing.\n              modifyLock.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":1,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#allocateLazyCores(int,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final int cacheSize, final SolrResourceLoader loader) {\n    if (cacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", cacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(cacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > cacheSize) {\n            synchronized (modifyLock) {\n              SolrCore coreToClose = eldest.getValue();\n              logger.info(\"Closing transient core [{}]\", coreToClose.getName());\n              pendingCloses.add(coreToClose); // Essentially just queue this core up for closing.\n              modifyLock.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    final int transientCacheSize = cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (modifyLock) {\n              SolrCore coreToClose = eldest.getValue();\n              logger.info(\"Closing transient core [{}]\", coreToClose.getName());\n              pendingCloses.add(coreToClose); // Essentially just queue this core up for closing.\n              modifyLock.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"275019a81d0883a1db4560391b072d1fbe272ec4","date":1432741049,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#allocateLazyCores(int,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#allocateLazyCores(int,SolrResourceLoader).mjava","sourceNew":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final int cacheSize, final SolrResourceLoader loader) {\n    if (cacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", cacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(cacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > cacheSize) {\n            synchronized (modifyLock) {\n              SolrCore coreToClose = eldest.getValue();\n              log.info(\"Closing transient core [{}]\", coreToClose.getName());\n              pendingCloses.add(coreToClose); // Essentially just queue this core up for closing.\n              modifyLock.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final int cacheSize, final SolrResourceLoader loader) {\n    if (cacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", cacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(cacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > cacheSize) {\n            synchronized (modifyLock) {\n              SolrCore coreToClose = eldest.getValue();\n              logger.info(\"Closing transient core [{}]\", coreToClose.getName());\n              pendingCloses.add(coreToClose); // Essentially just queue this core up for closing.\n              modifyLock.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#allocateLazyCores(int,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#allocateLazyCores(int,SolrResourceLoader).mjava","sourceNew":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final int cacheSize, final SolrResourceLoader loader) {\n    if (cacheSize != Integer.MAX_VALUE) {\n      log.info(\"Allocating transient cache for {} transient cores\", cacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(cacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > cacheSize) {\n            synchronized (modifyLock) {\n              SolrCore coreToClose = eldest.getValue();\n              log.info(\"Closing transient core [{}]\", coreToClose.getName());\n              pendingCloses.add(coreToClose); // Essentially just queue this core up for closing.\n              modifyLock.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final int cacheSize, final SolrResourceLoader loader) {\n    if (cacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", cacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(cacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > cacheSize) {\n            synchronized (modifyLock) {\n              SolrCore coreToClose = eldest.getValue();\n              log.info(\"Closing transient core [{}]\", coreToClose.getName());\n              pendingCloses.add(coreToClose); // Essentially just queue this core up for closing.\n              modifyLock.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9435d55e3ea95c5d94406d3affc36f9505b6a736","date":1491251232,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#allocateLazyCores(int,SolrResourceLoader).mjava","sourceNew":null,"sourceOld":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final int cacheSize, final SolrResourceLoader loader) {\n    if (cacheSize != Integer.MAX_VALUE) {\n      log.info(\"Allocating transient cache for {} transient cores\", cacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(cacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > cacheSize) {\n            synchronized (modifyLock) {\n              SolrCore coreToClose = eldest.getValue();\n              log.info(\"Closing transient core [{}]\", coreToClose.getName());\n              pendingCloses.add(coreToClose); // Essentially just queue this core up for closing.\n              modifyLock.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6a4b585aed7660a589375f6a09b90efd29c961","date":1491296430,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#allocateLazyCores(int,SolrResourceLoader).mjava","sourceNew":null,"sourceOld":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final int cacheSize, final SolrResourceLoader loader) {\n    if (cacheSize != Integer.MAX_VALUE) {\n      log.info(\"Allocating transient cache for {} transient cores\", cacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(cacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > cacheSize) {\n            synchronized (modifyLock) {\n              SolrCore coreToClose = eldest.getValue();\n              log.info(\"Closing transient core [{}]\", coreToClose.getName());\n              pendingCloses.add(coreToClose); // Essentially just queue this core up for closing.\n              modifyLock.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9435d55e3ea95c5d94406d3affc36f9505b6a736":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92a4da96826f502cf1a56a096929b37ce73e523a"],"92a4da96826f502cf1a56a096929b37ce73e523a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b6a4b585aed7660a589375f6a09b90efd29c961":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["275019a81d0883a1db4560391b072d1fbe272ec4"],"275019a81d0883a1db4560391b072d1fbe272ec4":["92a4da96826f502cf1a56a096929b37ce73e523a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9435d55e3ea95c5d94406d3affc36f9505b6a736"]},"commit2Childs":{"9435d55e3ea95c5d94406d3affc36f9505b6a736":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","92a4da96826f502cf1a56a096929b37ce73e523a"],"92a4da96826f502cf1a56a096929b37ce73e523a":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","275019a81d0883a1db4560391b072d1fbe272ec4"],"8b6a4b585aed7660a589375f6a09b90efd29c961":[],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["9435d55e3ea95c5d94406d3affc36f9505b6a736","8b6a4b585aed7660a589375f6a09b90efd29c961"],"275019a81d0883a1db4560391b072d1fbe272ec4":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","8b6a4b585aed7660a589375f6a09b90efd29c961","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}