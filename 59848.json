{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileDataSource#getFile(String,String).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileDataSource#getFile(String,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileDataSource#getFile(String,String).mjava","sourceNew":"  static File getFile(String basePath, String query) {\n    try {\n      File file0 = new File(query);\n      File file = file0;\n\n      if (!file.isAbsolute())\n        file = new File(basePath + query);\n\n      if (file.isFile() && file.canRead()) {\n        LOG.debug(\"Accessing File: \" + file.toString());\n        return file;\n      } else if (file != file0)\n        if (file0.isFile() && file0.canRead()) {\n          LOG.debug(\"Accessing File0: \" + file0.toString());\n          return  file0;\n        }\n\n      throw new FileNotFoundException(\"Could not find file: \" + query);\n    } catch (FileNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  static File getFile(String basePath, String query) {\n    try {\n      File file0 = new File(query);\n      File file = file0;\n\n      if (!file.isAbsolute())\n        file = new File(basePath + query);\n\n      if (file.isFile() && file.canRead()) {\n        LOG.debug(\"Accessing File: \" + file.toString());\n        return file;\n      } else if (file != file0)\n        if (file0.isFile() && file0.canRead()) {\n          LOG.debug(\"Accessing File0: \" + file0.toString());\n          return  file0;\n        }\n\n      throw new FileNotFoundException(\"Could not find file: \" + query);\n    } catch (FileNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileDataSource#getFile(String,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileDataSource#getFile(String,String).mjava","sourceNew":"  static File getFile(String basePath, String query) {\n    try {\n      File file0 = new File(query);\n      File file = file0;\n\n      if (!file.isAbsolute())\n        file = new File(basePath + query);\n\n      if (file.isFile() && file.canRead()) {\n        LOG.debug(\"Accessing File: \" + file.toString());\n        return file;\n      } else if (file != file0)\n        if (file0.isFile() && file0.canRead()) {\n          LOG.debug(\"Accessing File0: \" + file0.toString());\n          return  file0;\n        }\n\n      throw new FileNotFoundException(\"Could not find file: \" + query);\n    } catch (FileNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  static File getFile(String basePath, String query) {\n    try {\n      File file0 = new File(query);\n      File file = file0;\n\n      if (!file.isAbsolute())\n        file = new File(basePath + query);\n\n      if (file.isFile() && file.canRead()) {\n        LOG.debug(\"Accessing File: \" + file.toString());\n        return file;\n      } else if (file != file0)\n        if (file0.isFile() && file0.canRead()) {\n          LOG.debug(\"Accessing File0: \" + file0.toString());\n          return  file0;\n        }\n\n      throw new FileNotFoundException(\"Could not find file: \" + query);\n    } catch (FileNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6210119a15fa6004d7d7597735642de315cecd6b","date":1358324523,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileDataSource#getFile(String,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileDataSource#getFile(String,String).mjava","sourceNew":"  static File getFile(String basePath, String query) {\n    try {\n      File file = new File(query);\n\n      // If it's not an absolute path, try relative from basePath. \n      if (!file.isAbsolute()) {\n        // Resolve and correct basePath.\n        File basePathFile;\n        if (basePath == null) {\n          basePathFile = new File(\".\").getAbsoluteFile(); \n          LOG.warn(\"FileDataSource.basePath is empty. \" +\n              \"Resolving to: \" + basePathFile.getAbsolutePath());\n        } else {\n          basePathFile = new File(basePath);\n          if (!basePathFile.isAbsolute()) {\n            basePathFile = basePathFile.getAbsoluteFile();\n            LOG.warn(\"FileDataSource.basePath is not absolute. Resolving to: \"\n                + basePathFile.getAbsolutePath());\n          }\n        }\n\n        file = new File(basePathFile, query).getAbsoluteFile();\n      }\n\n      if (file.isFile() && file.canRead()) {\n        LOG.debug(\"Accessing File: \" + file.getAbsolutePath());\n        return file;\n      } else {\n        throw new FileNotFoundException(\"Could not find file: \" + query + \n            \" (resolved to: \" + file.getAbsolutePath());\n      }\n    } catch (FileNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  static File getFile(String basePath, String query) {\n    try {\n      File file0 = new File(query);\n      File file = file0;\n\n      if (!file.isAbsolute())\n        file = new File(basePath + query);\n\n      if (file.isFile() && file.canRead()) {\n        LOG.debug(\"Accessing File: \" + file.toString());\n        return file;\n      } else if (file != file0)\n        if (file0.isFile() && file0.canRead()) {\n          LOG.debug(\"Accessing File0: \" + file0.toString());\n          return  file0;\n        }\n\n      throw new FileNotFoundException(\"Could not find file: \" + query);\n    } catch (FileNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":["62f078a48017a3d8fa3f36214f47c3c2b2df6f69"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileDataSource#getFile(String,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileDataSource#getFile(String,String).mjava","sourceNew":"  static File getFile(String basePath, String query) {\n    try {\n      File file = new File(query);\n\n      // If it's not an absolute path, try relative from basePath. \n      if (!file.isAbsolute()) {\n        // Resolve and correct basePath.\n        File basePathFile;\n        if (basePath == null) {\n          basePathFile = new File(\".\").getAbsoluteFile(); \n          LOG.warn(\"FileDataSource.basePath is empty. \" +\n              \"Resolving to: \" + basePathFile.getAbsolutePath());\n        } else {\n          basePathFile = new File(basePath);\n          if (!basePathFile.isAbsolute()) {\n            basePathFile = basePathFile.getAbsoluteFile();\n            LOG.warn(\"FileDataSource.basePath is not absolute. Resolving to: \"\n                + basePathFile.getAbsolutePath());\n          }\n        }\n\n        file = new File(basePathFile, query).getAbsoluteFile();\n      }\n\n      if (file.isFile() && file.canRead()) {\n        LOG.debug(\"Accessing File: \" + file.getAbsolutePath());\n        return file;\n      } else {\n        throw new FileNotFoundException(\"Could not find file: \" + query + \n            \" (resolved to: \" + file.getAbsolutePath());\n      }\n    } catch (FileNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  static File getFile(String basePath, String query) {\n    try {\n      File file0 = new File(query);\n      File file = file0;\n\n      if (!file.isAbsolute())\n        file = new File(basePath + query);\n\n      if (file.isFile() && file.canRead()) {\n        LOG.debug(\"Accessing File: \" + file.toString());\n        return file;\n      } else if (file != file0)\n        if (file0.isFile() && file0.canRead()) {\n          LOG.debug(\"Accessing File0: \" + file0.toString());\n          return  file0;\n        }\n\n      throw new FileNotFoundException(\"Could not find file: \" + query);\n    } catch (FileNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileDataSource#getFile(String,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileDataSource#getFile(String,String).mjava","sourceNew":"  static File getFile(String basePath, String query) {\n    try {\n      File file = new File(query);\n\n      // If it's not an absolute path, try relative from basePath. \n      if (!file.isAbsolute()) {\n        // Resolve and correct basePath.\n        File basePathFile;\n        if (basePath == null) {\n          basePathFile = new File(\".\").getAbsoluteFile(); \n          log.warn(\"FileDataSource.basePath is empty. \" +\n              \"Resolving to: \" + basePathFile.getAbsolutePath());\n        } else {\n          basePathFile = new File(basePath);\n          if (!basePathFile.isAbsolute()) {\n            basePathFile = basePathFile.getAbsoluteFile();\n            log.warn(\"FileDataSource.basePath is not absolute. Resolving to: \"\n                + basePathFile.getAbsolutePath());\n          }\n        }\n\n        file = new File(basePathFile, query).getAbsoluteFile();\n      }\n\n      if (file.isFile() && file.canRead()) {\n        log.debug(\"Accessing File: \" + file.getAbsolutePath());\n        return file;\n      } else {\n        throw new FileNotFoundException(\"Could not find file: \" + query + \n            \" (resolved to: \" + file.getAbsolutePath());\n      }\n    } catch (FileNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  static File getFile(String basePath, String query) {\n    try {\n      File file = new File(query);\n\n      // If it's not an absolute path, try relative from basePath. \n      if (!file.isAbsolute()) {\n        // Resolve and correct basePath.\n        File basePathFile;\n        if (basePath == null) {\n          basePathFile = new File(\".\").getAbsoluteFile(); \n          LOG.warn(\"FileDataSource.basePath is empty. \" +\n              \"Resolving to: \" + basePathFile.getAbsolutePath());\n        } else {\n          basePathFile = new File(basePath);\n          if (!basePathFile.isAbsolute()) {\n            basePathFile = basePathFile.getAbsoluteFile();\n            LOG.warn(\"FileDataSource.basePath is not absolute. Resolving to: \"\n                + basePathFile.getAbsolutePath());\n          }\n        }\n\n        file = new File(basePathFile, query).getAbsoluteFile();\n      }\n\n      if (file.isFile() && file.canRead()) {\n        LOG.debug(\"Accessing File: \" + file.getAbsolutePath());\n        return file;\n      } else {\n        throw new FileNotFoundException(\"Could not find file: \" + query + \n            \" (resolved to: \" + file.getAbsolutePath());\n      }\n    } catch (FileNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileDataSource#getFile(String,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileDataSource#getFile(String,String).mjava","sourceNew":"  static File getFile(String basePath, String query) {\n    try {\n      File file = new File(query);\n\n      // If it's not an absolute path, try relative from basePath. \n      if (!file.isAbsolute()) {\n        // Resolve and correct basePath.\n        File basePathFile;\n        if (basePath == null) {\n          basePathFile = new File(\".\").getAbsoluteFile(); \n          log.warn(\"FileDataSource.basePath is empty. Resolving to: {}\"\n              , basePathFile.getAbsolutePath());\n        } else {\n          basePathFile = new File(basePath);\n          if (!basePathFile.isAbsolute()) {\n            basePathFile = basePathFile.getAbsoluteFile();\n            log.warn(\"FileDataSource.basePath is not absolute. Resolving to: {}\"\n                , basePathFile.getAbsolutePath());\n          }\n        }\n\n        file = new File(basePathFile, query).getAbsoluteFile();\n      }\n\n      if (file.isFile() && file.canRead()) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Accessing File: {}\", file.getAbsolutePath());\n        }\n        return file;\n      } else {\n        throw new FileNotFoundException(\"Could not find file: \" + query + \n            \" (resolved to: \" + file.getAbsolutePath());\n      }\n    } catch (FileNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  static File getFile(String basePath, String query) {\n    try {\n      File file = new File(query);\n\n      // If it's not an absolute path, try relative from basePath. \n      if (!file.isAbsolute()) {\n        // Resolve and correct basePath.\n        File basePathFile;\n        if (basePath == null) {\n          basePathFile = new File(\".\").getAbsoluteFile(); \n          log.warn(\"FileDataSource.basePath is empty. \" +\n              \"Resolving to: \" + basePathFile.getAbsolutePath());\n        } else {\n          basePathFile = new File(basePath);\n          if (!basePathFile.isAbsolute()) {\n            basePathFile = basePathFile.getAbsoluteFile();\n            log.warn(\"FileDataSource.basePath is not absolute. Resolving to: \"\n                + basePathFile.getAbsolutePath());\n          }\n        }\n\n        file = new File(basePathFile, query).getAbsoluteFile();\n      }\n\n      if (file.isFile() && file.canRead()) {\n        log.debug(\"Accessing File: \" + file.getAbsolutePath());\n        return file;\n      } else {\n        throw new FileNotFoundException(\"Could not find file: \" + query + \n            \" (resolved to: \" + file.getAbsolutePath());\n      }\n    } catch (FileNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileDataSource#getFile(String,String).mjava","sourceNew":null,"sourceOld":"  static File getFile(String basePath, String query) {\n    try {\n      File file = new File(query);\n\n      // If it's not an absolute path, try relative from basePath. \n      if (!file.isAbsolute()) {\n        // Resolve and correct basePath.\n        File basePathFile;\n        if (basePath == null) {\n          basePathFile = new File(\".\").getAbsoluteFile(); \n          log.warn(\"FileDataSource.basePath is empty. Resolving to: {}\"\n              , basePathFile.getAbsolutePath());\n        } else {\n          basePathFile = new File(basePath);\n          if (!basePathFile.isAbsolute()) {\n            basePathFile = basePathFile.getAbsoluteFile();\n            log.warn(\"FileDataSource.basePath is not absolute. Resolving to: {}\"\n                , basePathFile.getAbsolutePath());\n          }\n        }\n\n        file = new File(basePathFile, query).getAbsoluteFile();\n      }\n\n      if (file.isFile() && file.canRead()) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Accessing File: {}\", file.getAbsolutePath());\n        }\n        return file;\n      } else {\n        throw new FileNotFoundException(\"Could not find file: \" + query + \n            \" (resolved to: \" + file.getAbsolutePath());\n      }\n    } catch (FileNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["c26f00b574427b55127e869b935845554afde1fa","6210119a15fa6004d7d7597735642de315cecd6b"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6210119a15fa6004d7d7597735642de315cecd6b":["c26f00b574427b55127e869b935845554afde1fa"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["6210119a15fa6004d7d7597735642de315cecd6b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["c4015cd39dff8d4dec562d909f9766debac53aa6","6210119a15fa6004d7d7597735642de315cecd6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"6210119a15fa6004d7d7597735642de315cecd6b":["c4015cd39dff8d4dec562d909f9766debac53aa6","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}