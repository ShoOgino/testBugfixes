{"path":"solr/core/src/test/org/apache/solr/metrics/JvmMetricsTest#testSetupJvmMetrics().mjava","commits":[{"id":"d6b8086d510892eddfabded3e60641cbe8bd7884","date":1482320327,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/JvmMetricsTest#testSetupJvmMetrics().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSetupJvmMetrics() throws Exception {\n    SolrMetricManager metricManager = jetty.getCoreContainer().getMetricManager();\n    Map<String,Metric> metrics = metricManager.registry(\"solr.jvm\").getMetrics();\n    assertTrue(metrics.size() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"buffers.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"classes.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"os.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"gc.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"memory.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"threads.\")).count() > 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/JvmMetricsTest#testSetupJvmMetrics().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSetupJvmMetrics() throws Exception {\n    SolrMetricManager metricManager = jetty.getCoreContainer().getMetricManager();\n    Map<String,Metric> metrics = metricManager.registry(\"solr.jvm\").getMetrics();\n    assertTrue(metrics.size() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"buffers.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"classes.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"os.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"gc.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"memory.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"threads.\")).count() > 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d6879a535f14bc53be7c86de58142558c4f9eee","date":1492512399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/JvmMetricsTest#testSetupJvmMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/JvmMetricsTest#testSetupJvmMetrics().mjava","sourceNew":"  @Test\n  public void testSetupJvmMetrics() throws Exception {\n    SolrMetricManager metricManager = jetty.getCoreContainer().getMetricManager();\n    Map<String,Metric> metrics = metricManager.registry(\"solr.jvm\").getMetrics();\n    assertTrue(metrics.size() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"buffers.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"classes.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"os.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"gc.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"memory.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"threads.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"system.\")).count() > 0);\n  }\n\n","sourceOld":"  @Test\n  public void testSetupJvmMetrics() throws Exception {\n    SolrMetricManager metricManager = jetty.getCoreContainer().getMetricManager();\n    Map<String,Metric> metrics = metricManager.registry(\"solr.jvm\").getMetrics();\n    assertTrue(metrics.size() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"buffers.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"classes.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"os.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"gc.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"memory.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"threads.\")).count() > 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/JvmMetricsTest#testSetupJvmMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/JvmMetricsTest#testSetupJvmMetrics().mjava","sourceNew":"  @Test\n  public void testSetupJvmMetrics() throws Exception {\n    SolrMetricManager metricManager = jetty.getCoreContainer().getMetricManager();\n    Map<String,Metric> metrics = metricManager.registry(\"solr.jvm\").getMetrics();\n    assertTrue(metrics.size() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"buffers.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"classes.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"os.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"gc.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"memory.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"threads.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"system.\")).count() > 0);\n  }\n\n","sourceOld":"  @Test\n  public void testSetupJvmMetrics() throws Exception {\n    SolrMetricManager metricManager = jetty.getCoreContainer().getMetricManager();\n    Map<String,Metric> metrics = metricManager.registry(\"solr.jvm\").getMetrics();\n    assertTrue(metrics.size() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"buffers.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"classes.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"os.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"gc.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"memory.\")).count() > 0);\n    assertTrue(metrics.toString(), metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"threads.\")).count() > 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["d6b8086d510892eddfabded3e60641cbe8bd7884"],"d6b8086d510892eddfabded3e60641cbe8bd7884":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["d6b8086d510892eddfabded3e60641cbe8bd7884"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6b8086d510892eddfabded3e60641cbe8bd7884"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"d6b8086d510892eddfabded3e60641cbe8bd7884":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0d6879a535f14bc53be7c86de58142558c4f9eee","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6b8086d510892eddfabded3e60641cbe8bd7884","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0d6879a535f14bc53be7c86de58142558c4f9eee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}