{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstRealArc(int,Arc[T]).mjava","commits":[{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstRealArc(int,Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstArc(int,Arc[T]).mjava","sourceNew":"  // Not private beacaus NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      in.pos++;\n      arc.bytesPerArc = 0;\n    }\n    arc.nextArc = in.pos;\n    arc.label = 0;\n    return readNextArc(arc);\n  }\n\n","sourceOld":"  public Arc<T> readFirstArc(int address, Arc<T> arc) throws IOException {\n    //System.out.println(\"readFirstArc addr=\" + address);\n    //int pos = address;\n    final BytesReader in = new BytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      in.pos++;\n      arc.bytesPerArc = 0;\n    }\n    arc.nextArc = in.pos;\n    return readNextArc(arc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstRealArc(int,Arc[T]).mjava","pathOld":"/dev/null","sourceNew":"  // Not private beacaus NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      in.pos++;\n      arc.bytesPerArc = 0;\n    }\n    arc.nextArc = in.pos;\n    arc.label = 0;\n    return readNextArc(arc);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstRealArc(int,Arc[T]).mjava","pathOld":"/dev/null","sourceNew":"  // Not private beacaus NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      in.pos++;\n      arc.bytesPerArc = 0;\n    }\n    arc.nextArc = in.pos;\n    arc.label = 0;\n    return readNextArc(arc);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7235f072992928845d8cfd2dfc1c90362360e1e","date":1296426876,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstRealArc(int,Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstRealArc(int,Arc[T]).mjava","sourceNew":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      in.pos++;\n      arc.bytesPerArc = 0;\n    }\n    arc.nextArc = in.pos;\n    arc.label = 0;\n    return readNextArc(arc);\n  }\n\n","sourceOld":"  // Not private beacaus NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      in.pos++;\n      arc.bytesPerArc = 0;\n    }\n    arc.nextArc = in.pos;\n    arc.label = 0;\n    return readNextArc(arc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstRealArc(int,Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstRealArc(int,Arc[T]).mjava","sourceNew":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      in.pos++;\n      arc.bytesPerArc = 0;\n    }\n    arc.nextArc = in.pos;\n    arc.label = 0;\n    return readNextArc(arc);\n  }\n\n","sourceOld":"  // Not private beacaus NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      in.pos++;\n      arc.bytesPerArc = 0;\n    }\n    arc.nextArc = in.pos;\n    arc.label = 0;\n    return readNextArc(arc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstRealArc(int,Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstRealArc(int,Arc[T]).mjava","sourceNew":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      in.pos++;\n      arc.bytesPerArc = 0;\n    }\n    arc.nextArc = in.pos;\n    arc.label = 0;\n    return readNextArc(arc);\n  }\n\n","sourceOld":"  // Not private beacaus NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      in.pos++;\n      arc.bytesPerArc = 0;\n    }\n    arc.nextArc = in.pos;\n    arc.label = 0;\n    return readNextArc(arc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30898a79d4bce815d5551a8a22c32e88f1972cb9","date":1298740268,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstRealArc(int,Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstRealArc(int,Arc[T]).mjava","sourceNew":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc);\n  }\n\n","sourceOld":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      in.pos++;\n      arc.bytesPerArc = 0;\n    }\n    arc.nextArc = in.pos;\n    arc.label = 0;\n    return readNextArc(arc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstRealArc(int,Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstRealArc(int,Arc[T]).mjava","sourceNew":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc);\n  }\n\n","sourceOld":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      in.pos++;\n      arc.bytesPerArc = 0;\n    }\n    arc.nextArc = in.pos;\n    arc.label = 0;\n    return readNextArc(arc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstRealArc(int,Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstRealArc(int,Arc[T]).mjava","sourceNew":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc);\n  }\n\n","sourceOld":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      in.pos++;\n      arc.bytesPerArc = 0;\n    }\n    arc.nextArc = in.pos;\n    arc.label = 0;\n    return readNextArc(arc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstRealArc(int,Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstRealArc(int,Arc[T]).mjava","sourceNew":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc);\n  }\n\n","sourceOld":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstRealArc(int,Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstRealArc(int,Arc[T]).mjava","sourceNew":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc);\n  }\n\n","sourceOld":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstRealArc(int,Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstRealArc(int,Arc[T]).mjava","sourceNew":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc);\n  }\n\n","sourceOld":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["30898a79d4bce815d5551a8a22c32e88f1972cb9"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","30898a79d4bce815d5551a8a22c32e88f1972cb9"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","30898a79d4bce815d5551a8a22c32e88f1972cb9"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["30898a79d4bce815d5551a8a22c32e88f1972cb9","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"56da903869515527852ee21ea7ef7bfe414cd40d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","c7235f072992928845d8cfd2dfc1c90362360e1e"],"30898a79d4bce815d5551a8a22c32e88f1972cb9":["c7235f072992928845d8cfd2dfc1c90362360e1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7235f072992928845d8cfd2dfc1c90362360e1e":["56da903869515527852ee21ea7ef7bfe414cd40d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","c7235f072992928845d8cfd2dfc1c90362360e1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["d619839baa8ce5503e496b94a9e42ad6f079293f","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","c7235f072992928845d8cfd2dfc1c90362360e1e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"30898a79d4bce815d5551a8a22c32e88f1972cb9":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"c7235f072992928845d8cfd2dfc1c90362360e1e":["29ef99d61cda9641b6250bf9567329a6e65f901d","30898a79d4bce815d5551a8a22c32e88f1972cb9","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}