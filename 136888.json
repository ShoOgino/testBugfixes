{"path":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char,List[String]).mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static void splitSmart(String s, char separator, List<String> lst) {\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.trace(\"splitCommand=\" + lst);\n    }\n    ***/\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static void splitSmart(String s, char separator, List<String> lst) {\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.trace(\"splitCommand=\" + lst);\n    }\n    ***/\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char,List[String]).mjava","sourceNew":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static void splitSmart(String s, char separator, List<String> lst) {\n    int pos = 0, start = 0, end = s.length();\n    char inString = 0;\n    char ch = 0;\n    while (pos < end) {\n      char prevChar = ch;\n      ch = s.charAt(pos++);\n      if (ch == '\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch == inString) {\n        inString = 0;\n      } else if (ch == '\\'' || ch == '\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString = ch;\n        }\n      } else if (ch == separator && inString == 0) {\n        lst.add(s.substring(start, pos - 1));\n        start = pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start, end));\n    }\n\n    /***\n     if (SolrCore.log.isLoggable(Level.FINEST)) {\n     SolrCore.log.trace(\"splitCommand=\" + lst);\n     }\n     ***/\n\n  }\n\n","sourceOld":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static void splitSmart(String s, char separator, List<String> lst) {\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.trace(\"splitCommand=\" + lst);\n    }\n    ***/\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char,List[String]).mjava","sourceNew":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static void splitSmart(String s, char separator, List<String> lst) {\n    int pos = 0, start = 0, end = s.length();\n    char inString = 0;\n    char ch = 0;\n    while (pos < end) {\n      char prevChar = ch;\n      ch = s.charAt(pos++);\n      if (ch == '\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch == inString) {\n        inString = 0;\n      } else if (ch == '\\'' || ch == '\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString = ch;\n        }\n      } else if (ch == separator && inString == 0) {\n        lst.add(s.substring(start, pos - 1));\n        start = pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start, end));\n    }\n\n    /***\n     if (SolrCore.log.isLoggable(Level.FINEST)) {\n     SolrCore.log.trace(\"splitCommand=\" + lst);\n     }\n     ***/\n\n  }\n\n","sourceOld":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static void splitSmart(String s, char separator, List<String> lst) {\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.trace(\"splitCommand=\" + lst);\n    }\n    ***/\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char,List[String]).mjava","sourceNew":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static void splitSmart(String s, char separator, List<String> lst) {\n    int pos = 0, start = 0, end = s.length();\n    char inString = 0;\n    char ch = 0;\n    while (pos < end) {\n      char prevChar = ch;\n      ch = s.charAt(pos++);\n      if (ch == '\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch == inString) {\n        inString = 0;\n      } else if (ch == '\\'' || ch == '\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString = ch;\n        }\n      } else if (ch == separator && inString == 0) {\n        lst.add(s.substring(start, pos - 1));\n        start = pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start, end));\n    }\n\n    /***\n     if (SolrCore.log.isLoggable(Level.FINEST)) {\n     SolrCore.log.trace(\"splitCommand={}\", lst);\n     }\n     ***/\n\n  }\n\n","sourceOld":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static void splitSmart(String s, char separator, List<String> lst) {\n    int pos = 0, start = 0, end = s.length();\n    char inString = 0;\n    char ch = 0;\n    while (pos < end) {\n      char prevChar = ch;\n      ch = s.charAt(pos++);\n      if (ch == '\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch == inString) {\n        inString = 0;\n      } else if (ch == '\\'' || ch == '\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString = ch;\n        }\n      } else if (ch == separator && inString == 0) {\n        lst.add(s.substring(start, pos - 1));\n        start = pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start, end));\n    }\n\n    /***\n     if (SolrCore.log.isLoggable(Level.FINEST)) {\n     SolrCore.log.trace(\"splitCommand=\" + lst);\n     }\n     ***/\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["8476949555f799dff381770c01cfad051a264487"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"8476949555f799dff381770c01cfad051a264487":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","8476949555f799dff381770c01cfad051a264487"]},"commit2Childs":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","8476949555f799dff381770c01cfad051a264487","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"8476949555f799dff381770c01cfad051a264487":["6dc613ed6f75d1988140301ee8de8fdb056fa337","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}