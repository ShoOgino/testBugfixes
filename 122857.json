{"path":"client/java/solrj/src/org/apache/solr/client/solrj/response/QueryResponse#QueryResponse(NamedList[Object]).mjava","commits":[{"id":"acdd729ace9db5d0803eea4849ddc3c2ba196127","date":1181861605,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/response/QueryResponse#QueryResponse(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  public QueryResponse( NamedList<Object> res ) \n  {\n    super( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d3edc5f84c7c34cfe2e585b3fdc900e21c6d4d10"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c2e6a16432c0e7b210aa946a94b4383f16999dd","date":1213195129,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/response/QueryResponse#QueryResponse(NamedList[Object]).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/response/QueryResponse#QueryResponse(NamedList[Object]).mjava","sourceNew":"  public QueryResponse( NamedList<Object> res )\n  {\n    super( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n    }\n  }\n\n","sourceOld":"  public QueryResponse( NamedList<Object> res ) \n  {\n    super( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"86dee79e60d6383c5eb9325aac82cf88813329be","date":1216955904,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/response/QueryResponse#QueryResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n    }\n  }\n\n","sourceOld":"  public QueryResponse( NamedList<Object> res )\n  {\n    super( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"acdd729ace9db5d0803eea4849ddc3c2ba196127":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"86dee79e60d6383c5eb9325aac82cf88813329be":["0c2e6a16432c0e7b210aa946a94b4383f16999dd"],"0c2e6a16432c0e7b210aa946a94b4383f16999dd":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"acdd729ace9db5d0803eea4849ddc3c2ba196127":["0c2e6a16432c0e7b210aa946a94b4383f16999dd"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86dee79e60d6383c5eb9325aac82cf88813329be":[],"0c2e6a16432c0e7b210aa946a94b4383f16999dd":["86dee79e60d6383c5eb9325aac82cf88813329be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["86dee79e60d6383c5eb9325aac82cf88813329be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}