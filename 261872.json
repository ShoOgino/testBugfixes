{"path":"lucene/backwards/src/java/org/apache/lucene/index/MultiLevelSkipListReader#loadSkipLevels().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/MultiLevelSkipListReader#loadSkipLevels().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/MultiLevelSkipListReader#loadSkipLevels().mjava","sourceNew":"  /** Loads the skip levels  */\n  private void loadSkipLevels() throws IOException {\n    numberOfSkipLevels = docCount == 0 ? 0 : (int) Math.floor(Math.log(docCount) / Math.log(skipInterval[0]));\n    if (numberOfSkipLevels > maxNumberOfSkipLevels) {\n      numberOfSkipLevels = maxNumberOfSkipLevels;\n    }\n\n    skipStream[0].seek(skipPointer[0]);\n    \n    int toBuffer = numberOfLevelsToBuffer;\n    \n    for (int i = numberOfSkipLevels - 1; i > 0; i--) {\n      // the length of the current level\n      long length = skipStream[0].readVLong();\n      \n      // the start pointer of the current level\n      skipPointer[i] = skipStream[0].getFilePointer();\n      if (toBuffer > 0) {\n        // buffer this level\n        skipStream[i] = new SkipBuffer(skipStream[0], (int) length);\n        toBuffer--;\n      } else {\n        // clone this stream, it is already at the start of the current level\n        skipStream[i] = (IndexInput) skipStream[0].clone();\n        if (inputIsBuffered && length < BufferedIndexInput.BUFFER_SIZE) {\n          ((BufferedIndexInput) skipStream[i]).setBufferSize((int) length);\n        }\n        \n        // move base stream beyond the current level\n        skipStream[0].seek(skipStream[0].getFilePointer() + length);\n      }\n    }\n   \n    // use base stream for the lowest level\n    skipPointer[0] = skipStream[0].getFilePointer();\n  }\n\n","sourceOld":"  /** Loads the skip levels  */\n  private void loadSkipLevels() throws IOException {\n    numberOfSkipLevels = docCount == 0 ? 0 : (int) Math.floor(Math.log(docCount) / Math.log(skipInterval[0]));\n    if (numberOfSkipLevels > maxNumberOfSkipLevels) {\n      numberOfSkipLevels = maxNumberOfSkipLevels;\n    }\n\n    skipStream[0].seek(skipPointer[0]);\n    \n    int toBuffer = numberOfLevelsToBuffer;\n    \n    for (int i = numberOfSkipLevels - 1; i > 0; i--) {\n      // the length of the current level\n      long length = skipStream[0].readVLong();\n      \n      // the start pointer of the current level\n      skipPointer[i] = skipStream[0].getFilePointer();\n      if (toBuffer > 0) {\n        // buffer this level\n        skipStream[i] = new SkipBuffer(skipStream[0], (int) length);\n        toBuffer--;\n      } else {\n        // clone this stream, it is already at the start of the current level\n        skipStream[i] = (IndexInput) skipStream[0].clone();\n        if (inputIsBuffered && length < BufferedIndexInput.BUFFER_SIZE) {\n          ((BufferedIndexInput) skipStream[i]).setBufferSize((int) length);\n        }\n        \n        // move base stream beyond the current level\n        skipStream[0].seek(skipStream[0].getFilePointer() + length);\n      }\n    }\n   \n    // use base stream for the lowest level\n    skipPointer[0] = skipStream[0].getFilePointer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/MultiLevelSkipListReader#loadSkipLevels().mjava","sourceNew":null,"sourceOld":"  /** Loads the skip levels  */\n  private void loadSkipLevels() throws IOException {\n    numberOfSkipLevels = docCount == 0 ? 0 : (int) Math.floor(Math.log(docCount) / Math.log(skipInterval[0]));\n    if (numberOfSkipLevels > maxNumberOfSkipLevels) {\n      numberOfSkipLevels = maxNumberOfSkipLevels;\n    }\n\n    skipStream[0].seek(skipPointer[0]);\n    \n    int toBuffer = numberOfLevelsToBuffer;\n    \n    for (int i = numberOfSkipLevels - 1; i > 0; i--) {\n      // the length of the current level\n      long length = skipStream[0].readVLong();\n      \n      // the start pointer of the current level\n      skipPointer[i] = skipStream[0].getFilePointer();\n      if (toBuffer > 0) {\n        // buffer this level\n        skipStream[i] = new SkipBuffer(skipStream[0], (int) length);\n        toBuffer--;\n      } else {\n        // clone this stream, it is already at the start of the current level\n        skipStream[i] = (IndexInput) skipStream[0].clone();\n        if (inputIsBuffered && length < BufferedIndexInput.BUFFER_SIZE) {\n          ((BufferedIndexInput) skipStream[i]).setBufferSize((int) length);\n        }\n        \n        // move base stream beyond the current level\n        skipStream[0].seek(skipStream[0].getFilePointer() + length);\n      }\n    }\n   \n    // use base stream for the lowest level\n    skipPointer[0] = skipStream[0].getFilePointer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}