{"path":"solr/core/src/java/org/apache/solr/schema/PointField#getSingleValueSource(MultiValueSelector,SchemaField,QParser).mjava","commits":[{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getSingleValueSource(MultiValueSelector,SchemaField,QParser).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final ValueSource getSingleValueSource(MultiValueSelector choice, SchemaField field, QParser parser) {\n    // trivial base case\n    if (!field.multiValued()) {\n      // single value matches any selector\n      return getValueSource(field, parser);\n    }\n\n    // Point fields don't support UninvertingReader. See SOLR-9202\n    if (!field.hasDocValues()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"docValues='true' is required to select '\" + choice.toString() +\n                              \"' value from multivalued field (\"+ field.getName() +\") at query time\");\n    }\n    \n    // multivalued Point fields all use SortedSetDocValues, so we give a clean error if that's\n    // not supported by the specified choice, else we delegate to a helper\n    SortedSetSelector.Type selectorType = choice.getSortedSetSelectorType();\n    if (null == selectorType) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              choice.toString() + \" is not a supported option for picking a single value\"\n                              + \" from the multivalued field: \" + field.getName() +\n                              \" (type: \" + this.getTypeName() + \")\");\n    }\n    \n    return getSingleValueSource(selectorType, field);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getSingleValueSource(MultiValueSelector,SchemaField,QParser).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final ValueSource getSingleValueSource(MultiValueSelector choice, SchemaField field, QParser parser) {\n    // trivial base case\n    if (!field.multiValued()) {\n      // single value matches any selector\n      return getValueSource(field, parser);\n    }\n\n    // Point fields don't support UninvertingReader. See SOLR-9202\n    if (!field.hasDocValues()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"docValues='true' is required to select '\" + choice.toString() +\n                              \"' value from multivalued field (\"+ field.getName() +\") at query time\");\n    }\n    \n    // multivalued Point fields all use SortedSetDocValues, so we give a clean error if that's\n    // not supported by the specified choice, else we delegate to a helper\n    SortedSetSelector.Type selectorType = choice.getSortedSetSelectorType();\n    if (null == selectorType) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              choice.toString() + \" is not a supported option for picking a single value\"\n                              + \" from the multivalued field: \" + field.getName() +\n                              \" (type: \" + this.getTypeName() + \")\");\n    }\n    \n    return getSingleValueSource(selectorType, field);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744b111b17d15d490a648eb021bfa240e7f11556","date":1487008069,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getSingleValueSource(MultiValueSelector,SchemaField,QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#getSingleValueSource(MultiValueSelector,SchemaField,QParser).mjava","sourceNew":"  @Override\n  public final ValueSource getSingleValueSource(MultiValueSelector choice, SchemaField field, QParser parser) {\n    // trivial base case\n    if (!field.multiValued()) {\n      // single value matches any selector\n      return getValueSource(field, parser);\n    }\n\n    // Point fields don't support UninvertingReader. See SOLR-9202\n    if (!field.hasDocValues()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"docValues='true' is required to select '\" + choice.toString() +\n                              \"' value from multivalued field (\"+ field.getName() +\") at query time\");\n    }\n    \n    // multivalued Point fields all use SortedSetDocValues, so we give a clean error if that's\n    // not supported by the specified choice, else we delegate to a helper\n    SortedNumericSelector.Type selectorType = choice.getSortedNumericSelectorType();\n    if (null == selectorType) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              choice.toString() + \" is not a supported option for picking a single value\"\n                              + \" from the multivalued field: \" + field.getName() +\n                              \" (type: \" + this.getTypeName() + \")\");\n    }\n    \n    return getSingleValueSource(selectorType, field);\n  }\n\n","sourceOld":"  @Override\n  public final ValueSource getSingleValueSource(MultiValueSelector choice, SchemaField field, QParser parser) {\n    // trivial base case\n    if (!field.multiValued()) {\n      // single value matches any selector\n      return getValueSource(field, parser);\n    }\n\n    // Point fields don't support UninvertingReader. See SOLR-9202\n    if (!field.hasDocValues()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"docValues='true' is required to select '\" + choice.toString() +\n                              \"' value from multivalued field (\"+ field.getName() +\") at query time\");\n    }\n    \n    // multivalued Point fields all use SortedSetDocValues, so we give a clean error if that's\n    // not supported by the specified choice, else we delegate to a helper\n    SortedSetSelector.Type selectorType = choice.getSortedSetSelectorType();\n    if (null == selectorType) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              choice.toString() + \" is not a supported option for picking a single value\"\n                              + \" from the multivalued field: \" + field.getName() +\n                              \" (type: \" + this.getTypeName() + \")\");\n    }\n    \n    return getSingleValueSource(selectorType, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getSingleValueSource(MultiValueSelector,SchemaField,QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#getSingleValueSource(MultiValueSelector,SchemaField,QParser).mjava","sourceNew":"  @Override\n  public final ValueSource getSingleValueSource(MultiValueSelector choice, SchemaField field, QParser parser) {\n    // trivial base case\n    if (!field.multiValued()) {\n      // single value matches any selector\n      return getValueSource(field, parser);\n    }\n\n    // Point fields don't support UninvertingReader. See SOLR-9202\n    if (!field.hasDocValues()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"docValues='true' is required to select '\" + choice.toString() +\n                              \"' value from multivalued field (\"+ field.getName() +\") at query time\");\n    }\n    \n    // multivalued Point fields all use SortedSetDocValues, so we give a clean error if that's\n    // not supported by the specified choice, else we delegate to a helper\n    SortedNumericSelector.Type selectorType = choice.getSortedNumericSelectorType();\n    if (null == selectorType) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              choice.toString() + \" is not a supported option for picking a single value\"\n                              + \" from the multivalued field: \" + field.getName() +\n                              \" (type: \" + this.getTypeName() + \")\");\n    }\n    \n    return getSingleValueSource(selectorType, field);\n  }\n\n","sourceOld":"  @Override\n  public final ValueSource getSingleValueSource(MultiValueSelector choice, SchemaField field, QParser parser) {\n    // trivial base case\n    if (!field.multiValued()) {\n      // single value matches any selector\n      return getValueSource(field, parser);\n    }\n\n    // Point fields don't support UninvertingReader. See SOLR-9202\n    if (!field.hasDocValues()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"docValues='true' is required to select '\" + choice.toString() +\n                              \"' value from multivalued field (\"+ field.getName() +\") at query time\");\n    }\n    \n    // multivalued Point fields all use SortedSetDocValues, so we give a clean error if that's\n    // not supported by the specified choice, else we delegate to a helper\n    SortedSetSelector.Type selectorType = choice.getSortedSetSelectorType();\n    if (null == selectorType) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              choice.toString() + \" is not a supported option for picking a single value\"\n                              + \" from the multivalued field: \" + field.getName() +\n                              \" (type: \" + this.getTypeName() + \")\");\n    }\n    \n    return getSingleValueSource(selectorType, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getSingleValueSource(MultiValueSelector,SchemaField,QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#getSingleValueSource(MultiValueSelector,SchemaField,QParser).mjava","sourceNew":"  @Override\n  public final ValueSource getSingleValueSource(MultiValueSelector choice, SchemaField field, QParser parser) {\n    // trivial base case\n    if (!field.multiValued()) {\n      // single value matches any selector\n      return getValueSource(field, parser);\n    }\n\n    // Point fields don't support UninvertingReader. See SOLR-9202\n    if (!field.hasDocValues()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"docValues='true' is required to select '\" + choice.toString() +\n                              \"' value from multivalued field (\"+ field.getName() +\") at query time\");\n    }\n    \n    // multivalued Point fields all use SortedSetDocValues, so we give a clean error if that's\n    // not supported by the specified choice, else we delegate to a helper\n    SortedSetSelector.Type selectorType = choice.getSortedSetSelectorType();\n    if (null == selectorType) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              choice.toString() + \" is not a supported option for picking a single value\"\n                              + \" from the multivalued field: \" + field.getName() +\n                              \" (type: \" + this.getTypeName() + \")\");\n    }\n    \n    return getSingleValueSource(selectorType, field);\n  }\n\n","sourceOld":"  @Override\n  public final ValueSource getSingleValueSource(MultiValueSelector choice, SchemaField field, QParser parser) {\n    // trivial base case\n    if (!field.multiValued()) {\n      // single value matches any selector\n      return getValueSource(field, parser);\n    }\n\n    // Point fields don't support UninvertingReader. See SOLR-9202\n    if (!field.hasDocValues()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"docValues='true' is required to select '\" + choice.toString() +\n                              \"' value from multivalued field (\"+ field.getName() +\") at query time\");\n    }\n    \n    // multivalued Point fields all use SortedSetDocValues, so we give a clean error if that's\n    // not supported by the specified choice, else we delegate to a helper\n    SortedNumericSelector.Type selectorType = choice.getSortedNumericSelectorType();\n    if (null == selectorType) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              choice.toString() + \" is not a supported option for picking a single value\"\n                              + \" from the multivalued field: \" + field.getName() +\n                              \" (type: \" + this.getTypeName() + \")\");\n    }\n    \n    return getSingleValueSource(selectorType, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#getSingleValueSource(MultiValueSelector,SchemaField,QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#getSingleValueSource(MultiValueSelector,SchemaField,QParser).mjava","sourceNew":"  @Override\n  public final ValueSource getSingleValueSource(MultiValueSelector choice, SchemaField field, QParser parser) {\n    // trivial base case\n    if (!field.multiValued()) {\n      // single value matches any selector\n      return getValueSource(field, parser);\n    }\n\n    // Point fields don't support UninvertingReader. See SOLR-9202\n    if (!field.hasDocValues()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"docValues='true' is required to select '\" + choice.toString() +\n                              \"' value from multivalued field (\"+ field.getName() +\") at query time\");\n    }\n    \n    // multivalued Point fields all use SortedSetDocValues, so we give a clean error if that's\n    // not supported by the specified choice, else we delegate to a helper\n    SortedNumericSelector.Type selectorType = choice.getSortedNumericSelectorType();\n    if (null == selectorType) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              choice.toString() + \" is not a supported option for picking a single value\"\n                              + \" from the multivalued field: \" + field.getName() +\n                              \" (type: \" + this.getTypeName() + \")\");\n    }\n    \n    return getSingleValueSource(selectorType, field);\n  }\n\n","sourceOld":"  @Override\n  public final ValueSource getSingleValueSource(MultiValueSelector choice, SchemaField field, QParser parser) {\n    // trivial base case\n    if (!field.multiValued()) {\n      // single value matches any selector\n      return getValueSource(field, parser);\n    }\n\n    // Point fields don't support UninvertingReader. See SOLR-9202\n    if (!field.hasDocValues()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"docValues='true' is required to select '\" + choice.toString() +\n                              \"' value from multivalued field (\"+ field.getName() +\") at query time\");\n    }\n    \n    // multivalued Point fields all use SortedSetDocValues, so we give a clean error if that's\n    // not supported by the specified choice, else we delegate to a helper\n    SortedSetSelector.Type selectorType = choice.getSortedSetSelectorType();\n    if (null == selectorType) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              choice.toString() + \" is not a supported option for picking a single value\"\n                              + \" from the multivalued field: \" + field.getName() +\n                              \" (type: \" + this.getTypeName() + \")\");\n    }\n    \n    return getSingleValueSource(selectorType, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"022a4de90e0479b604264ca9c2e134c996454ab3":["46dc9ac8b3e748407baaef82453138ff3974480c","744b111b17d15d490a648eb021bfa240e7f11556"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"46dc9ac8b3e748407baaef82453138ff3974480c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"744b111b17d15d490a648eb021bfa240e7f11556":["46dc9ac8b3e748407baaef82453138ff3974480c"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46dc9ac8b3e748407baaef82453138ff3974480c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["897b06b1364bd1f658a8be7591e43f0851458e7f"]},"commit2Childs":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"46dc9ac8b3e748407baaef82453138ff3974480c":["022a4de90e0479b604264ca9c2e134c996454ab3","744b111b17d15d490a648eb021bfa240e7f11556","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"744b111b17d15d490a648eb021bfa240e7f11556":["022a4de90e0479b604264ca9c2e134c996454ab3"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}