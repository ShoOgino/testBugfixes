{"path":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#assertUpdateLogs(String,int).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#assertUpdateLogs(String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Asserts that the number of transaction logs across all the shards\n   */\n  protected void assertUpdateLogs(String collection, int maxNumberOfTLogs) throws Exception {\n    CollectionInfo info = collectInfo(collection);\n    Map<String, List<CollectionInfo.CoreInfo>> shardToCoresMap = info.getShardToCoresMap();\n\n    int leaderLogs = 0;\n    ArrayList<Integer> replicasLogs = new ArrayList<>(Collections.nCopies(replicationFactor - 1, 0));\n\n    for (String shard : shardToCoresMap.keySet()) {\n      leaderLogs += numberOfFiles(info.getLeader(shard).ulogDir);\n      for (int i = 0; i < replicationFactor - 1; i++) {\n        replicasLogs.set(i, replicasLogs.get(i) + numberOfFiles(info.getReplicas(shard).get(i).ulogDir));\n      }\n    }\n\n    for (Integer replicaLogs : replicasLogs) {\n      log.info(\"Number of logs in update log on leader {} and on replica {}\", leaderLogs, replicaLogs);\n\n      // replica logs must be always equal or superior to leader logs\n      assertTrue(String.format(Locale.ENGLISH, \"Number of tlogs on replica: %d is different than on leader: %d.\",\n          replicaLogs, leaderLogs), leaderLogs <= replicaLogs);\n\n      assertTrue(String.format(Locale.ENGLISH, \"Number of tlogs on leader: %d is superior to: %d.\",\n          leaderLogs, maxNumberOfTLogs), maxNumberOfTLogs >= leaderLogs);\n\n      assertTrue(String.format(Locale.ENGLISH, \"Number of tlogs on replica: %d is superior to: %d.\",\n          replicaLogs, maxNumberOfTLogs), maxNumberOfTLogs >= replicaLogs);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4dcd1fe49b76116e7d358993339fe8adbb030638","date":1437151093,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#_assertNumberOfTlogFiles(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#assertUpdateLogs(String,int).mjava","sourceNew":"  /**\n   * Asserts the number of transaction logs across all the shards\n   */\n  private void _assertNumberOfTlogFiles(String collection, int maxNumberOfTLogs) throws Exception {\n    CollectionInfo info = collectInfo(collection);\n    Map<String, List<CollectionInfo.CoreInfo>> shardToCoresMap = info.getShardToCoresMap();\n\n    int leaderLogs = 0;\n    ArrayList<Integer> replicasLogs = new ArrayList<>(Collections.nCopies(replicationFactor - 1, 0));\n\n    for (String shard : shardToCoresMap.keySet()) {\n      leaderLogs += numberOfFiles(info.getLeader(shard).ulogDir);\n      for (int i = 0; i < replicationFactor - 1; i++) {\n        replicasLogs.set(i, replicasLogs.get(i) + numberOfFiles(info.getReplicas(shard).get(i).ulogDir));\n      }\n    }\n\n    for (Integer replicaLogs : replicasLogs) {\n      log.info(\"Number of logs in update log on leader {} and on replica {}\", leaderLogs, replicaLogs);\n\n      // replica logs must be always equal or superior to leader logs\n      assertTrue(String.format(Locale.ENGLISH, \"Number of tlogs on replica: %d is different than on leader: %d.\",\n          replicaLogs, leaderLogs), leaderLogs <= replicaLogs);\n\n      assertTrue(String.format(Locale.ENGLISH, \"Number of tlogs on leader: %d is superior to: %d.\",\n          leaderLogs, maxNumberOfTLogs), maxNumberOfTLogs >= leaderLogs);\n\n      assertTrue(String.format(Locale.ENGLISH, \"Number of tlogs on replica: %d is superior to: %d.\",\n          replicaLogs, maxNumberOfTLogs), maxNumberOfTLogs >= replicaLogs);\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the number of transaction logs across all the shards\n   */\n  protected void assertUpdateLogs(String collection, int maxNumberOfTLogs) throws Exception {\n    CollectionInfo info = collectInfo(collection);\n    Map<String, List<CollectionInfo.CoreInfo>> shardToCoresMap = info.getShardToCoresMap();\n\n    int leaderLogs = 0;\n    ArrayList<Integer> replicasLogs = new ArrayList<>(Collections.nCopies(replicationFactor - 1, 0));\n\n    for (String shard : shardToCoresMap.keySet()) {\n      leaderLogs += numberOfFiles(info.getLeader(shard).ulogDir);\n      for (int i = 0; i < replicationFactor - 1; i++) {\n        replicasLogs.set(i, replicasLogs.get(i) + numberOfFiles(info.getReplicas(shard).get(i).ulogDir));\n      }\n    }\n\n    for (Integer replicaLogs : replicasLogs) {\n      log.info(\"Number of logs in update log on leader {} and on replica {}\", leaderLogs, replicaLogs);\n\n      // replica logs must be always equal or superior to leader logs\n      assertTrue(String.format(Locale.ENGLISH, \"Number of tlogs on replica: %d is different than on leader: %d.\",\n          replicaLogs, leaderLogs), leaderLogs <= replicaLogs);\n\n      assertTrue(String.format(Locale.ENGLISH, \"Number of tlogs on leader: %d is superior to: %d.\",\n          leaderLogs, maxNumberOfTLogs), maxNumberOfTLogs >= leaderLogs);\n\n      assertTrue(String.format(Locale.ENGLISH, \"Number of tlogs on replica: %d is superior to: %d.\",\n          replicaLogs, maxNumberOfTLogs), maxNumberOfTLogs >= replicaLogs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4dcd1fe49b76116e7d358993339fe8adbb030638":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4dcd1fe49b76116e7d358993339fe8adbb030638"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["4dcd1fe49b76116e7d358993339fe8adbb030638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"4dcd1fe49b76116e7d358993339fe8adbb030638":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}