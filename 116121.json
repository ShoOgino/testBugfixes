{"path":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = DirectoryReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num)\n      throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = DirectoryReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = DirectoryReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    reader.close();\n\n  }\n\n","bugFix":["7b91922b55d15444d554721b352861d028eb8278"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num)\n      throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = DirectoryReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = DirectoryReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67","date":1348934182,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#assertQuery(Term,Directory,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num)\n      throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = DirectoryReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num)\n      throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = DirectoryReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}