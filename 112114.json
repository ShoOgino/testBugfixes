{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestDirectoryReader#testMultiTermDocs().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDirectoryReader#testMultiTermDocs().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestDirectoryReader#testMultiTermDocs().mjava","sourceNew":"  public void testMultiTermDocs() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    RAMDirectory ramDir3=new RAMDirectory();\n    addDoc(ramDir3, \"test wow\", true);\n\n    IndexReader[] readers1 = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir3, false)};\n    IndexReader[] readers2 = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false), IndexReader.open(ramDir3, false)};\n    MultiReader mr2 = new MultiReader(readers1);\n    MultiReader mr3 = new MultiReader(readers2);\n\n    // test mixing up TermDocs and TermEnums from different readers.\n    TermDocs td2 = mr2.termDocs();\n    TermEnum te3 = mr3.terms(new Term(\"body\",\"wow\"));\n    td2.seek(te3);\n    int ret = 0;\n\n    // This should blow up if we forget to check that the TermEnum is from the same\n    // reader as the TermDocs.\n    while (td2.next()) ret += td2.doc();\n    td2.close();\n    te3.close();\n\n    // really a dummy assert to ensure that we got some docs and to ensure that\n    // nothing is optimized out.\n    assertTrue(ret > 0);\n  }\n\n","sourceOld":"  public void testMultiTermDocs() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    RAMDirectory ramDir3=new RAMDirectory();\n    addDoc(ramDir3, \"test wow\", true);\n\n    IndexReader[] readers1 = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir3, false)};\n    IndexReader[] readers2 = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false), IndexReader.open(ramDir3, false)};\n    MultiReader mr2 = new MultiReader(readers1);\n    MultiReader mr3 = new MultiReader(readers2);\n\n    // test mixing up TermDocs and TermEnums from different readers.\n    TermDocs td2 = mr2.termDocs();\n    TermEnum te3 = mr3.terms(new Term(\"body\",\"wow\"));\n    td2.seek(te3);\n    int ret = 0;\n\n    // This should blow up if we forget to check that the TermEnum is from the same\n    // reader as the TermDocs.\n    while (td2.next()) ret += td2.doc();\n    td2.close();\n    te3.close();\n\n    // really a dummy assert to ensure that we got some docs and to ensure that\n    // nothing is optimized out.\n    assertTrue(ret > 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestDirectoryReader#testMultiTermDocs().mjava","sourceNew":null,"sourceOld":"  public void testMultiTermDocs() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    RAMDirectory ramDir3=new RAMDirectory();\n    addDoc(ramDir3, \"test wow\", true);\n\n    IndexReader[] readers1 = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir3, false)};\n    IndexReader[] readers2 = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false), IndexReader.open(ramDir3, false)};\n    MultiReader mr2 = new MultiReader(readers1);\n    MultiReader mr3 = new MultiReader(readers2);\n\n    // test mixing up TermDocs and TermEnums from different readers.\n    TermDocs td2 = mr2.termDocs();\n    TermEnum te3 = mr3.terms(new Term(\"body\",\"wow\"));\n    td2.seek(te3);\n    int ret = 0;\n\n    // This should blow up if we forget to check that the TermEnum is from the same\n    // reader as the TermDocs.\n    while (td2.next()) ret += td2.doc();\n    td2.close();\n    te3.close();\n\n    // really a dummy assert to ensure that we got some docs and to ensure that\n    // nothing is optimized out.\n    assertTrue(ret > 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}