{"path":"src/java/org/apache/solr/highlight/TokenOrderingFilter[SolrHighlighter]#next().mjava","commits":[{"id":"6a67b839dba6c0047c752067352e6a7847fbe8d3","date":1183443247,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/highlight/TokenOrderingFilter[SolrHighlighter]#next().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Token next() throws IOException {\n    while (!done && queue.size() < windowSize) {\n      Token newTok = input.next();\n      if (newTok==null) {\n        done=true;\n        break;\n      }\n\n      // reverse iterating for better efficiency since we know the\n      // list is already sorted, and most token start offsets will be too.\n      ListIterator<Token> iter = queue.listIterator(queue.size());\n      while(iter.hasPrevious()) {\n        if (newTok.startOffset() >= iter.previous().startOffset()) {\n          // insertion will be before what next() would return (what\n          // we just compared against), so move back one so the insertion\n          // will be after.\n          iter.next();\n          break;\n        }\n      }\n      iter.add(newTok);\n    }\n\n    return queue.isEmpty() ? null : queue.removeFirst();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"303b28b90016c2de1b5870759794476dbf4fd6ce","date":1206052767,"type":5,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/highlight/TokenOrderingFilter[DefaultSolrHighlighter]#next().mjava","pathOld":"src/java/org/apache/solr/highlight/TokenOrderingFilter[SolrHighlighter]#next().mjava","sourceNew":"  @Override\n  public Token next() throws IOException {\n    while (!done && queue.size() < windowSize) {\n      Token newTok = input.next();\n      if (newTok==null) {\n        done=true;\n        break;\n      }\n\n      // reverse iterating for better efficiency since we know the\n      // list is already sorted, and most token start offsets will be too.\n      ListIterator<Token> iter = queue.listIterator(queue.size());\n      while(iter.hasPrevious()) {\n        if (newTok.startOffset() >= iter.previous().startOffset()) {\n          // insertion will be before what next() would return (what\n          // we just compared against), so move back one so the insertion\n          // will be after.\n          iter.next();\n          break;\n        }\n      }\n      iter.add(newTok);\n    }\n\n    return queue.isEmpty() ? null : queue.removeFirst();\n  }\n\n","sourceOld":"  @Override\n  public Token next() throws IOException {\n    while (!done && queue.size() < windowSize) {\n      Token newTok = input.next();\n      if (newTok==null) {\n        done=true;\n        break;\n      }\n\n      // reverse iterating for better efficiency since we know the\n      // list is already sorted, and most token start offsets will be too.\n      ListIterator<Token> iter = queue.listIterator(queue.size());\n      while(iter.hasPrevious()) {\n        if (newTok.startOffset() >= iter.previous().startOffset()) {\n          // insertion will be before what next() would return (what\n          // we just compared against), so move back one so the insertion\n          // will be after.\n          iter.next();\n          break;\n        }\n      }\n      iter.add(newTok);\n    }\n\n    return queue.isEmpty() ? null : queue.removeFirst();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"6a67b839dba6c0047c752067352e6a7847fbe8d3":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"303b28b90016c2de1b5870759794476dbf4fd6ce":["6a67b839dba6c0047c752067352e6a7847fbe8d3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6a67b839dba6c0047c752067352e6a7847fbe8d3"],"6a67b839dba6c0047c752067352e6a7847fbe8d3":["303b28b90016c2de1b5870759794476dbf4fd6ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"303b28b90016c2de1b5870759794476dbf4fd6ce":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","303b28b90016c2de1b5870759794476dbf4fd6ce"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}