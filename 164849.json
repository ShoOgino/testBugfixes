{"path":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.PagedCollectionSupport#compare(String,String).mjava","commits":[{"id":"d69bac0909e90a1213b0850137b00ac371f866e1","date":1419979130,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.PagedCollectionSupport#compare(String,String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int compare(String left, String right) {\n      if (left == null)\n        return -1;\n      \n      if (left.equals(right))\n        return 0;\n      \n      // sort lexically unless the two collection names start with the same base prefix\n      // and end in a number (which is a common enough naming scheme to have direct \n      // support for it)\n      Matcher leftMatcher = endsWithDigits.matcher(left);\n      if (leftMatcher.matches()) {\n        Matcher rightMatcher = endsWithDigits.matcher(right);\n        if (rightMatcher.matches()) {\n          String leftGroup1 = leftMatcher.group(1);\n          String rightGroup1 = rightMatcher.group(1);\n          if (leftGroup1.equals(rightGroup1)) {\n            // both start with the same prefix ... compare indexes\n            // using longs here as we don't know how long the 2nd group is\n            int leftGroup2 = Integer.parseInt(leftMatcher.group(2));\n            int rightGroup2 = Integer.parseInt(rightMatcher.group(2));            \n            return (leftGroup2 > rightGroup2) ? 1 : ((leftGroup2 == rightGroup2) ? 0 : -1);\n          }\n        }\n      }\n      return left.compareTo(right);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a","date":1443442239,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler.PagedCollectionSupport#compare(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.PagedCollectionSupport#compare(String,String).mjava","sourceNew":"    @Override\n    public int compare(String left, String right) {\n      if (left == null)\n        return -1;\n\n      if (left.equals(right))\n        return 0;\n\n      // sort lexically unless the two collection names start with the same base prefix\n      // and end in a number (which is a common enough naming scheme to have direct \n      // support for it)\n      Matcher leftMatcher = endsWithDigits.matcher(left);\n      if (leftMatcher.matches()) {\n        Matcher rightMatcher = endsWithDigits.matcher(right);\n        if (rightMatcher.matches()) {\n          String leftGroup1 = leftMatcher.group(1);\n          String rightGroup1 = rightMatcher.group(1);\n          if (leftGroup1.equals(rightGroup1)) {\n            // both start with the same prefix ... compare indexes\n            // using longs here as we don't know how long the 2nd group is\n            int leftGroup2 = Integer.parseInt(leftMatcher.group(2));\n            int rightGroup2 = Integer.parseInt(rightMatcher.group(2));\n            return (leftGroup2 > rightGroup2) ? 1 : ((leftGroup2 == rightGroup2) ? 0 : -1);\n          }\n        }\n      }\n      return left.compareTo(right);\n    }\n\n","sourceOld":"    @Override\n    public int compare(String left, String right) {\n      if (left == null)\n        return -1;\n      \n      if (left.equals(right))\n        return 0;\n      \n      // sort lexically unless the two collection names start with the same base prefix\n      // and end in a number (which is a common enough naming scheme to have direct \n      // support for it)\n      Matcher leftMatcher = endsWithDigits.matcher(left);\n      if (leftMatcher.matches()) {\n        Matcher rightMatcher = endsWithDigits.matcher(right);\n        if (rightMatcher.matches()) {\n          String leftGroup1 = leftMatcher.group(1);\n          String rightGroup1 = rightMatcher.group(1);\n          if (leftGroup1.equals(rightGroup1)) {\n            // both start with the same prefix ... compare indexes\n            // using longs here as we don't know how long the 2nd group is\n            int leftGroup2 = Integer.parseInt(leftMatcher.group(2));\n            int rightGroup2 = Integer.parseInt(rightMatcher.group(2));            \n            return (leftGroup2 > rightGroup2) ? 1 : ((leftGroup2 == rightGroup2) ? 0 : -1);\n          }\n        }\n      }\n      return left.compareTo(right);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a":["d69bac0909e90a1213b0850137b00ac371f866e1"],"d69bac0909e90a1213b0850137b00ac371f866e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["80ebe5b1d946f7c2ed9c46206b0c7254dc21206a"]},"commit2Childs":{"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d69bac0909e90a1213b0850137b00ac371f866e1":["80ebe5b1d946f7c2ed9c46206b0c7254dc21206a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d69bac0909e90a1213b0850137b00ac371f866e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}