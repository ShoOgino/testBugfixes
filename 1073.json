{"path":"lucene/src/test-framework/java/org/apache/lucene/search/ShardSearchingTestBase.ChangeIndices#run().mjava","commits":[{"id":"226aae72c0326f4299c16280195bade4530de537","date":1324221898,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/ShardSearchingTestBase.ChangeIndices#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      try {\n        final LineFileDocs docs = new LineFileDocs(random);\n        int numDocs = 0;\n        while (System.nanoTime() < endTimeNanos) {\n          final int what = random.nextInt(3);\n          final NodeState node = nodes[random.nextInt(nodes.length)];\n          if (numDocs == 0 || what == 0) {\n            node.writer.addDocument(docs.nextDoc());\n            numDocs++;\n          } else if (what == 1) {\n            node.writer.updateDocument(new Term(\"docid\", \"\"+random.nextInt(numDocs)),\n                                        docs.nextDoc());\n            numDocs++;\n          } else {\n            node.writer.deleteDocuments(new Term(\"docid\", \"\"+random.nextInt(numDocs)));\n          }\n          // TODO: doc blocks too\n\n          if (random.nextInt(17) == 12) {\n            node.writer.commit();\n          }\n\n          if (random.nextInt(17) == 12) {\n            nodes[random.nextInt(nodes.length)].reopen();\n          }\n        }\n      } catch (Throwable t) {\n        System.out.println(\"FAILED:\");\n        t.printStackTrace(System.out);\n        throw new RuntimeException(t);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.ChangeIndices#run().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/ShardSearchingTestBase.ChangeIndices#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        final LineFileDocs docs = new LineFileDocs(random);\n        int numDocs = 0;\n        while (System.nanoTime() < endTimeNanos) {\n          final int what = random.nextInt(3);\n          final NodeState node = nodes[random.nextInt(nodes.length)];\n          if (numDocs == 0 || what == 0) {\n            node.writer.addDocument(docs.nextDoc());\n            numDocs++;\n          } else if (what == 1) {\n            node.writer.updateDocument(new Term(\"docid\", \"\"+random.nextInt(numDocs)),\n                                        docs.nextDoc());\n            numDocs++;\n          } else {\n            node.writer.deleteDocuments(new Term(\"docid\", \"\"+random.nextInt(numDocs)));\n          }\n          // TODO: doc blocks too\n\n          if (random.nextInt(17) == 12) {\n            node.writer.commit();\n          }\n\n          if (random.nextInt(17) == 12) {\n            nodes[random.nextInt(nodes.length)].reopen();\n          }\n        }\n      } catch (Throwable t) {\n        System.out.println(\"FAILED:\");\n        t.printStackTrace(System.out);\n        throw new RuntimeException(t);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        final LineFileDocs docs = new LineFileDocs(random);\n        int numDocs = 0;\n        while (System.nanoTime() < endTimeNanos) {\n          final int what = random.nextInt(3);\n          final NodeState node = nodes[random.nextInt(nodes.length)];\n          if (numDocs == 0 || what == 0) {\n            node.writer.addDocument(docs.nextDoc());\n            numDocs++;\n          } else if (what == 1) {\n            node.writer.updateDocument(new Term(\"docid\", \"\"+random.nextInt(numDocs)),\n                                        docs.nextDoc());\n            numDocs++;\n          } else {\n            node.writer.deleteDocuments(new Term(\"docid\", \"\"+random.nextInt(numDocs)));\n          }\n          // TODO: doc blocks too\n\n          if (random.nextInt(17) == 12) {\n            node.writer.commit();\n          }\n\n          if (random.nextInt(17) == 12) {\n            nodes[random.nextInt(nodes.length)].reopen();\n          }\n        }\n      } catch (Throwable t) {\n        System.out.println(\"FAILED:\");\n        t.printStackTrace(System.out);\n        throw new RuntimeException(t);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["226aae72c0326f4299c16280195bade4530de537"],"226aae72c0326f4299c16280195bade4530de537":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"226aae72c0326f4299c16280195bade4530de537":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["226aae72c0326f4299c16280195bade4530de537"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}