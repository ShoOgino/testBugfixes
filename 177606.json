{"path":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setMaxBufferedDocs(2));\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setMaxBufferedDocs(2));\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9","date":1270985469,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setMaxBufferedDocs(2));\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setMaxBufferedDocs(2));\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","date":1270996866,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setMaxBufferedDocs(2));\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setMaxBufferedDocs(2));\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","date":1271167458,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setMaxBufferedDocs(2));\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setMaxBufferedDocs(2));\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setMaxBufferedDocs(2));\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setMaxBufferedDocs(2));\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    Random random = newRandom();\n    \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setMaxBufferedDocs(2));\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    Random random = newRandom();\n    \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory(random);\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    Random random = newRandom();\n    \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    Random random = newRandom();\n    \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory(random);\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setMaxBufferedDocs(2));\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = IndexReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = IndexReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = IndexReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e","date":1327848882,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = IndexReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = IndexReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868186558eb3a854ce7e720a52bb445795d54910","date":1327853682,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = IndexReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = IndexReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = IndexReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = IndexReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = IndexReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = IndexReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"868186558eb3a854ce7e720a52bb445795d54910":["f9172d6bebb12f0bba2ebb1756779c2f8948ab7e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","868186558eb3a854ce7e720a52bb445795d54910"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1f653cfcf159baeaafe5d01682a911e95bba4012"]},"commit2Childs":{"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"868186558eb3a854ce7e720a52bb445795d54910":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e":["868186558eb3a854ce7e720a52bb445795d54910"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","f9172d6bebb12f0bba2ebb1756779c2f8948ab7e","5cab9a86bd67202d20b6adc463008c8e982b070a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}