{"path":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getCacheEntries().mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getCacheEntries().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getCacheEntries().mjava","sourceNew":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<CacheKey, Accountable>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<CacheKey, Accountable> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<CacheKey, Accountable> mapEntry : innerCache.entrySet()) {\n            CacheKey entry = mapEntry.getKey();\n            result.add(new CacheEntry(readerKey, entry.field,\n                                      cacheType, entry.custom,\n                                      mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","sourceOld":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<CacheKey, Accountable>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<CacheKey, Accountable> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<CacheKey, Accountable> mapEntry : innerCache.entrySet()) {\n            CacheKey entry = mapEntry.getKey();\n            result.add(new CacheEntry(readerKey, entry.field,\n                                      cacheType, entry.custom,\n                                      mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getCacheEntries().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getCacheEntries().mjava","sourceNew":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<CacheKey, Accountable>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<CacheKey, Accountable> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<CacheKey, Accountable> mapEntry : innerCache.entrySet()) {\n            CacheKey entry = mapEntry.getKey();\n            result.add(new CacheEntry(readerKey, entry.field,\n                                      cacheType, entry.custom,\n                                      mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","sourceOld":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<CacheKey, Accountable>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<CacheKey, Accountable> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<CacheKey, Accountable> mapEntry : innerCache.entrySet()) {\n            CacheKey entry = mapEntry.getKey();\n            result.add(new CacheEntry(readerKey, entry.field,\n                                      cacheType, entry.custom,\n                                      mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getCacheEntries().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getCacheEntries().mjava","sourceNew":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<CacheKey, Accountable>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<CacheKey, Accountable> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<CacheKey, Accountable> mapEntry : innerCache.entrySet()) {\n            CacheKey entry = mapEntry.getKey();\n            result.add(new CacheEntry(readerKey, entry.field,\n                                      cacheType, entry.custom,\n                                      mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","sourceOld":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<CacheKey, Accountable>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<CacheKey, Accountable> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<CacheKey, Accountable> mapEntry : innerCache.entrySet()) {\n            CacheKey entry = mapEntry.getKey();\n            result.add(new CacheEntry(readerKey, entry.field,\n                                      cacheType, entry.custom,\n                                      mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getCacheEntries().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getCacheEntries().mjava","sourceNew":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<CacheKey, Accountable>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<CacheKey, Accountable> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<CacheKey, Accountable> mapEntry : innerCache.entrySet()) {\n            CacheKey entry = mapEntry.getKey();\n            result.add(new CacheEntry(readerKey, entry.field,\n                                      cacheType, entry.custom,\n                                      mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","sourceOld":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<CacheKey, Accountable>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<CacheKey, Accountable> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<CacheKey, Accountable> mapEntry : innerCache.entrySet()) {\n            CacheKey entry = mapEntry.getKey();\n            result.add(new CacheEntry(readerKey, entry.field,\n                                      cacheType, entry.custom,\n                                      mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getCacheEntries().mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getCacheEntries().mjava","sourceNew":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<IndexReader.CacheKey,Map<CacheKey, Accountable>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final IndexReader.CacheKey readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<CacheKey, Accountable> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<CacheKey, Accountable> mapEntry : innerCache.entrySet()) {\n            CacheKey entry = mapEntry.getKey();\n            result.add(new CacheEntry(readerKey, entry.field,\n                                      cacheType, entry.custom,\n                                      mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","sourceOld":"  @Override\n  public synchronized CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<>(17);\n    for(final Map.Entry<Class<?>,Cache> cacheEntry: caches.entrySet()) {\n      final Cache cache = cacheEntry.getValue();\n      final Class<?> cacheType = cacheEntry.getKey();\n      synchronized(cache.readerCache) {\n        for (final Map.Entry<Object,Map<CacheKey, Accountable>> readerCacheEntry : cache.readerCache.entrySet()) {\n          final Object readerKey = readerCacheEntry.getKey();\n          if (readerKey == null) continue;\n          final Map<CacheKey, Accountable> innerCache = readerCacheEntry.getValue();\n          for (final Map.Entry<CacheKey, Accountable> mapEntry : innerCache.entrySet()) {\n            CacheKey entry = mapEntry.getKey();\n            result.add(new CacheEntry(readerKey, entry.field,\n                                      cacheType, entry.custom,\n                                      mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"d211216c83f01894810543d1c107160a9ae3650b":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d211216c83f01894810543d1c107160a9ae3650b"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["d211216c83f01894810543d1c107160a9ae3650b","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d211216c83f01894810543d1c107160a9ae3650b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}