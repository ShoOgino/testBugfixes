{"path":"lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.IndexEnum#seek(long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.IndexEnum#seek(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.IndexEnum#seek(long).mjava","sourceNew":"    @Override\n    public long seek(long ord) {\n      int idx = (int) (ord / totalIndexInterval);\n      // caller must ensure ord is in bounds\n      assert idx < fieldIndex.numIndexTerms;\n      final long offset = fieldIndex.termOffsets.get(idx);\n      final int length = (int) (fieldIndex.termOffsets.get(1+idx) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n      this.ord = idx * totalIndexInterval;\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(idx);\n    }\n\n","sourceOld":"    @Override\n    public long seek(long ord) {\n      int idx = (int) (ord / totalIndexInterval);\n      // caller must ensure ord is in bounds\n      assert idx < fieldIndex.numIndexTerms;\n      final long offset = fieldIndex.termOffsets.get(idx);\n      final int length = (int) (fieldIndex.termOffsets.get(1+idx) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n      this.ord = idx * totalIndexInterval;\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(idx);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.IndexEnum#seek(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.IndexEnum#seek(long).mjava","sourceNew":"    @Override\n    public long seek(long ord) {\n      int idx = (int) (ord / totalIndexInterval);\n      // caller must ensure ord is in bounds\n      assert idx < fieldIndex.numIndexTerms;\n      final long offset = fieldIndex.termOffsets.get(idx);\n      final int length = (int) (fieldIndex.termOffsets.get(1+idx) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n      this.ord = idx * totalIndexInterval;\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(idx);\n    }\n\n","sourceOld":"    @Override\n    public long seek(long ord) {\n      int idx = (int) (ord / totalIndexInterval);\n      // caller must ensure ord is in bounds\n      assert idx < fieldIndex.numIndexTerms;\n      final long offset = fieldIndex.termOffsets.get(idx);\n      final int length = (int) (fieldIndex.termOffsets.get(1+idx) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n      this.ord = idx * totalIndexInterval;\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(idx);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}