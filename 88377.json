{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#close().mjava","commits":[{"id":"56df73d43b6fc340f5332322862382c7e30f4368","date":1378304988,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    IOException ioe = null;\n    try {\n      final long indexDirStart = indexOut.getFilePointer();\n      final long blockDirStart = blockOut.getFilePointer();\n\n      // write field summary\n      blockOut.writeVInt(fields.size());\n      for (FieldMetaData field : fields) {\n        blockOut.writeVInt(field.fieldInfo.number);\n        blockOut.writeVLong(field.numTerms);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          blockOut.writeVLong(field.sumTotalTermFreq);\n        }\n        blockOut.writeVLong(field.sumDocFreq);\n        blockOut.writeVInt(field.docCount);\n        blockOut.writeVInt(field.longsSize);\n        blockOut.writeVLong(field.statsOut.getFilePointer());\n        blockOut.writeVLong(field.metaLongsOut.getFilePointer());\n        blockOut.writeVLong(field.metaBytesOut.getFilePointer());\n\n        field.skipOut.writeTo(blockOut);\n        field.statsOut.writeTo(blockOut);\n        field.metaLongsOut.writeTo(blockOut);\n        field.metaBytesOut.writeTo(blockOut);\n        field.dict.save(indexOut);\n      }\n      writeTrailer(blockOut, blockDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, blockOut, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    IOException ioe = null;\n    try {\n      final long indexDirStart = indexOut.getFilePointer();\n      final long blockDirStart = blockOut.getFilePointer();\n\n      // write field summary\n      blockOut.writeVInt(fields.size());\n      for (FieldMetaData field : fields) {\n        blockOut.writeVInt(field.fieldInfo.number);\n        blockOut.writeVLong(field.numTerms);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          blockOut.writeVLong(field.sumTotalTermFreq);\n        }\n        blockOut.writeVLong(field.sumDocFreq);\n        blockOut.writeVInt(field.docCount);\n        blockOut.writeVInt(field.longsSize);\n        blockOut.writeVLong(field.statsOut.getFilePointer());\n        blockOut.writeVLong(field.metaLongsOut.getFilePointer());\n        blockOut.writeVLong(field.metaBytesOut.getFilePointer());\n\n        field.skipOut.writeTo(blockOut);\n        field.statsOut.writeTo(blockOut);\n        field.metaLongsOut.writeTo(blockOut);\n        field.metaBytesOut.writeTo(blockOut);\n        field.dict.save(indexOut);\n      }\n      writeTrailer(blockOut, blockDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, blockOut, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#close().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void close() throws IOException {\n    IOException ioe = null;\n    try {\n      final long indexDirStart = indexOut.getFilePointer();\n      final long blockDirStart = blockOut.getFilePointer();\n\n      // write field summary\n      blockOut.writeVInt(fields.size());\n      for (FieldMetaData field : fields) {\n        blockOut.writeVInt(field.fieldInfo.number);\n        blockOut.writeVLong(field.numTerms);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          blockOut.writeVLong(field.sumTotalTermFreq);\n        }\n        blockOut.writeVLong(field.sumDocFreq);\n        blockOut.writeVInt(field.docCount);\n        blockOut.writeVInt(field.longsSize);\n        blockOut.writeVLong(field.statsOut.getFilePointer());\n        blockOut.writeVLong(field.metaLongsOut.getFilePointer());\n        blockOut.writeVLong(field.metaBytesOut.getFilePointer());\n\n        field.skipOut.writeTo(blockOut);\n        field.statsOut.writeTo(blockOut);\n        field.metaLongsOut.writeTo(blockOut);\n        field.metaBytesOut.writeTo(blockOut);\n        field.dict.save(indexOut);\n      }\n      writeTrailer(blockOut, blockDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, blockOut, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    IOException ioe = null;\n    try {\n      final long blockDirStart = blockOut.getFilePointer();\n\n      // write field summary\n      blockOut.writeVInt(fields.size());\n      for (FieldMetaData field : fields) {\n        blockOut.writeVInt(field.fieldInfo.number);\n        blockOut.writeVLong(field.numTerms);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          blockOut.writeVLong(field.sumTotalTermFreq);\n        }\n        blockOut.writeVLong(field.sumDocFreq);\n        blockOut.writeVInt(field.docCount);\n        blockOut.writeVInt(field.longsSize);\n        blockOut.writeVLong(field.statsOut.getFilePointer());\n        blockOut.writeVLong(field.metaLongsOut.getFilePointer());\n        blockOut.writeVLong(field.metaBytesOut.getFilePointer());\n\n        field.skipOut.writeTo(blockOut);\n        field.statsOut.writeTo(blockOut);\n        field.metaLongsOut.writeTo(blockOut);\n        field.metaBytesOut.writeTo(blockOut);\n        field.dict.save(indexOut);\n      }\n      writeTrailer(blockOut, blockDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, blockOut, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    IOException ioe = null;\n    try {\n      final long indexDirStart = indexOut.getFilePointer();\n      final long blockDirStart = blockOut.getFilePointer();\n\n      // write field summary\n      blockOut.writeVInt(fields.size());\n      for (FieldMetaData field : fields) {\n        blockOut.writeVInt(field.fieldInfo.number);\n        blockOut.writeVLong(field.numTerms);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          blockOut.writeVLong(field.sumTotalTermFreq);\n        }\n        blockOut.writeVLong(field.sumDocFreq);\n        blockOut.writeVInt(field.docCount);\n        blockOut.writeVInt(field.longsSize);\n        blockOut.writeVLong(field.statsOut.getFilePointer());\n        blockOut.writeVLong(field.metaLongsOut.getFilePointer());\n        blockOut.writeVLong(field.metaBytesOut.getFilePointer());\n\n        field.skipOut.writeTo(blockOut);\n        field.statsOut.writeTo(blockOut);\n        field.metaLongsOut.writeTo(blockOut);\n        field.metaBytesOut.writeTo(blockOut);\n        field.dict.save(indexOut);\n      }\n      writeTrailer(blockOut, blockDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, blockOut, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#close().mjava","sourceNew":"  public void close() throws IOException {\n    IOException ioe = null;\n    try {\n      final long blockDirStart = blockOut.getFilePointer();\n\n      // write field summary\n      blockOut.writeVInt(fields.size());\n      for (FieldMetaData field : fields) {\n        blockOut.writeVInt(field.fieldInfo.number);\n        blockOut.writeVLong(field.numTerms);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          blockOut.writeVLong(field.sumTotalTermFreq);\n        }\n        blockOut.writeVLong(field.sumDocFreq);\n        blockOut.writeVInt(field.docCount);\n        blockOut.writeVInt(field.longsSize);\n        blockOut.writeVLong(field.statsOut.getFilePointer());\n        blockOut.writeVLong(field.metaLongsOut.getFilePointer());\n        blockOut.writeVLong(field.metaBytesOut.getFilePointer());\n\n        field.skipOut.writeTo(blockOut);\n        field.statsOut.writeTo(blockOut);\n        field.metaLongsOut.writeTo(blockOut);\n        field.metaBytesOut.writeTo(blockOut);\n        field.dict.save(indexOut);\n      }\n      writeTrailer(blockOut, blockDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, blockOut, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    IOException ioe = null;\n    try {\n      final long blockDirStart = blockOut.getFilePointer();\n\n      // write field summary\n      blockOut.writeVInt(fields.size());\n      for (FieldMetaData field : fields) {\n        blockOut.writeVInt(field.fieldInfo.number);\n        blockOut.writeVLong(field.numTerms);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          blockOut.writeVLong(field.sumTotalTermFreq);\n        }\n        blockOut.writeVLong(field.sumDocFreq);\n        blockOut.writeVInt(field.docCount);\n        blockOut.writeVInt(field.longsSize);\n        blockOut.writeVLong(field.statsOut.getFilePointer());\n        blockOut.writeVLong(field.metaLongsOut.getFilePointer());\n        blockOut.writeVLong(field.metaBytesOut.getFilePointer());\n\n        field.skipOut.writeTo(blockOut);\n        field.statsOut.writeTo(blockOut);\n        field.metaLongsOut.writeTo(blockOut);\n        field.metaBytesOut.writeTo(blockOut);\n        field.dict.save(indexOut);\n      }\n      writeTrailer(blockOut, blockDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, blockOut, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#close().mjava","sourceNew":"  public void close() throws IOException {\n    if (blockOut != null) {\n      IOException ioe = null;\n      try {\n        final long blockDirStart = blockOut.getFilePointer();\n        \n        // write field summary\n        blockOut.writeVInt(fields.size());\n        for (FieldMetaData field : fields) {\n          blockOut.writeVInt(field.fieldInfo.number);\n          blockOut.writeVLong(field.numTerms);\n          if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            blockOut.writeVLong(field.sumTotalTermFreq);\n          }\n          blockOut.writeVLong(field.sumDocFreq);\n          blockOut.writeVInt(field.docCount);\n          blockOut.writeVInt(field.longsSize);\n          blockOut.writeVLong(field.statsOut.getFilePointer());\n          blockOut.writeVLong(field.metaLongsOut.getFilePointer());\n          blockOut.writeVLong(field.metaBytesOut.getFilePointer());\n          \n          field.skipOut.writeTo(blockOut);\n          field.statsOut.writeTo(blockOut);\n          field.metaLongsOut.writeTo(blockOut);\n          field.metaBytesOut.writeTo(blockOut);\n          field.dict.save(indexOut);\n        }\n        writeTrailer(blockOut, blockDirStart);\n        CodecUtil.writeFooter(indexOut);\n        CodecUtil.writeFooter(blockOut);\n      } catch (IOException ioe2) {\n        ioe = ioe2;\n      } finally {\n        IOUtils.closeWhileHandlingException(ioe, blockOut, indexOut, postingsWriter);\n        blockOut = null;\n      }\n    }\n  }\n\n","sourceOld":"  public void close() throws IOException {\n    IOException ioe = null;\n    try {\n      final long blockDirStart = blockOut.getFilePointer();\n\n      // write field summary\n      blockOut.writeVInt(fields.size());\n      for (FieldMetaData field : fields) {\n        blockOut.writeVInt(field.fieldInfo.number);\n        blockOut.writeVLong(field.numTerms);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          blockOut.writeVLong(field.sumTotalTermFreq);\n        }\n        blockOut.writeVLong(field.sumDocFreq);\n        blockOut.writeVInt(field.docCount);\n        blockOut.writeVInt(field.longsSize);\n        blockOut.writeVLong(field.statsOut.getFilePointer());\n        blockOut.writeVLong(field.metaLongsOut.getFilePointer());\n        blockOut.writeVLong(field.metaBytesOut.getFilePointer());\n\n        field.skipOut.writeTo(blockOut);\n        field.statsOut.writeTo(blockOut);\n        field.metaLongsOut.writeTo(blockOut);\n        field.metaBytesOut.writeTo(blockOut);\n        field.dict.save(indexOut);\n      }\n      writeTrailer(blockOut, blockDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, blockOut, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#close().mjava","sourceNew":"  public void close() throws IOException {\n    if (blockOut != null) {\n      IOException ioe = null;\n      try {\n        final long blockDirStart = blockOut.getFilePointer();\n        \n        // write field summary\n        blockOut.writeVInt(fields.size());\n        for (FieldMetaData field : fields) {\n          blockOut.writeVInt(field.fieldInfo.number);\n          blockOut.writeVLong(field.numTerms);\n          if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            blockOut.writeVLong(field.sumTotalTermFreq);\n          }\n          blockOut.writeVLong(field.sumDocFreq);\n          blockOut.writeVInt(field.docCount);\n          blockOut.writeVInt(field.longsSize);\n          blockOut.writeVLong(field.statsOut.getFilePointer());\n          blockOut.writeVLong(field.metaLongsOut.getFilePointer());\n          blockOut.writeVLong(field.metaBytesOut.getFilePointer());\n          \n          field.skipOut.writeTo(blockOut);\n          field.statsOut.writeTo(blockOut);\n          field.metaLongsOut.writeTo(blockOut);\n          field.metaBytesOut.writeTo(blockOut);\n          field.dict.save(indexOut);\n        }\n        writeTrailer(blockOut, blockDirStart);\n        CodecUtil.writeFooter(indexOut);\n        CodecUtil.writeFooter(blockOut);\n      } catch (IOException ioe2) {\n        ioe = ioe2;\n      } finally {\n        IOUtils.closeWhileHandlingException(ioe, blockOut, indexOut, postingsWriter);\n        blockOut = null;\n      }\n    }\n  }\n\n","sourceOld":"  public void close() throws IOException {\n    IOException ioe = null;\n    try {\n      final long blockDirStart = blockOut.getFilePointer();\n\n      // write field summary\n      blockOut.writeVInt(fields.size());\n      for (FieldMetaData field : fields) {\n        blockOut.writeVInt(field.fieldInfo.number);\n        blockOut.writeVLong(field.numTerms);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          blockOut.writeVLong(field.sumTotalTermFreq);\n        }\n        blockOut.writeVLong(field.sumDocFreq);\n        blockOut.writeVInt(field.docCount);\n        blockOut.writeVInt(field.longsSize);\n        blockOut.writeVLong(field.statsOut.getFilePointer());\n        blockOut.writeVLong(field.metaLongsOut.getFilePointer());\n        blockOut.writeVLong(field.metaBytesOut.getFilePointer());\n\n        field.skipOut.writeTo(blockOut);\n        field.statsOut.writeTo(blockOut);\n        field.metaLongsOut.writeTo(blockOut);\n        field.metaBytesOut.writeTo(blockOut);\n        field.dict.save(indexOut);\n      }\n      writeTrailer(blockOut, blockDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, blockOut, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7afb64ff3a701f68b2689cafff6c5bdeb4f67f63","date":1398957288,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (blockOut != null) {\n      IOException ioe = null;\n      try {\n        final long blockDirStart = blockOut.getFilePointer();\n        \n        // write field summary\n        blockOut.writeVInt(fields.size());\n        for (FieldMetaData field : fields) {\n          blockOut.writeVInt(field.fieldInfo.number);\n          blockOut.writeVLong(field.numTerms);\n          if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            blockOut.writeVLong(field.sumTotalTermFreq);\n          }\n          blockOut.writeVLong(field.sumDocFreq);\n          blockOut.writeVInt(field.docCount);\n          blockOut.writeVInt(field.longsSize);\n          blockOut.writeVLong(field.statsOut.getFilePointer());\n          blockOut.writeVLong(field.metaLongsOut.getFilePointer());\n          blockOut.writeVLong(field.metaBytesOut.getFilePointer());\n          \n          field.skipOut.writeTo(blockOut);\n          field.statsOut.writeTo(blockOut);\n          field.metaLongsOut.writeTo(blockOut);\n          field.metaBytesOut.writeTo(blockOut);\n          field.dict.save(indexOut);\n        }\n        writeTrailer(blockOut, blockDirStart);\n        CodecUtil.writeFooter(indexOut);\n        CodecUtil.writeFooter(blockOut);\n      } catch (IOException ioe2) {\n        ioe = ioe2;\n      } finally {\n        IOUtils.closeWhileHandlingException(ioe, blockOut, indexOut, postingsWriter);\n        blockOut = null;\n      }\n    }\n  }\n\n","sourceOld":"  public void close() throws IOException {\n    if (blockOut != null) {\n      IOException ioe = null;\n      try {\n        final long blockDirStart = blockOut.getFilePointer();\n        \n        // write field summary\n        blockOut.writeVInt(fields.size());\n        for (FieldMetaData field : fields) {\n          blockOut.writeVInt(field.fieldInfo.number);\n          blockOut.writeVLong(field.numTerms);\n          if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            blockOut.writeVLong(field.sumTotalTermFreq);\n          }\n          blockOut.writeVLong(field.sumDocFreq);\n          blockOut.writeVInt(field.docCount);\n          blockOut.writeVInt(field.longsSize);\n          blockOut.writeVLong(field.statsOut.getFilePointer());\n          blockOut.writeVLong(field.metaLongsOut.getFilePointer());\n          blockOut.writeVLong(field.metaBytesOut.getFilePointer());\n          \n          field.skipOut.writeTo(blockOut);\n          field.statsOut.writeTo(blockOut);\n          field.metaLongsOut.writeTo(blockOut);\n          field.metaBytesOut.writeTo(blockOut);\n          field.dict.save(indexOut);\n        }\n        writeTrailer(blockOut, blockDirStart);\n        CodecUtil.writeFooter(indexOut);\n        CodecUtil.writeFooter(blockOut);\n      } catch (IOException ioe2) {\n        ioe = ioe2;\n      } finally {\n        IOUtils.closeWhileHandlingException(ioe, blockOut, indexOut, postingsWriter);\n        blockOut = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43e3527ed736c46c0f0ab28181937b9de5ef7c63","date":1399502658,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (blockOut != null) {\n      boolean success = false;\n      try {\n        final long blockDirStart = blockOut.getFilePointer();\n        \n        // write field summary\n        blockOut.writeVInt(fields.size());\n        for (FieldMetaData field : fields) {\n          blockOut.writeVInt(field.fieldInfo.number);\n          blockOut.writeVLong(field.numTerms);\n          if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            blockOut.writeVLong(field.sumTotalTermFreq);\n          }\n          blockOut.writeVLong(field.sumDocFreq);\n          blockOut.writeVInt(field.docCount);\n          blockOut.writeVInt(field.longsSize);\n          blockOut.writeVLong(field.statsOut.getFilePointer());\n          blockOut.writeVLong(field.metaLongsOut.getFilePointer());\n          blockOut.writeVLong(field.metaBytesOut.getFilePointer());\n          \n          field.skipOut.writeTo(blockOut);\n          field.statsOut.writeTo(blockOut);\n          field.metaLongsOut.writeTo(blockOut);\n          field.metaBytesOut.writeTo(blockOut);\n          field.dict.save(indexOut);\n        }\n        writeTrailer(blockOut, blockDirStart);\n        CodecUtil.writeFooter(indexOut);\n        CodecUtil.writeFooter(blockOut);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(blockOut, indexOut, postingsWriter);\n        } else {\n          IOUtils.closeWhileHandlingException(blockOut, indexOut, postingsWriter);\n        }\n        blockOut = null;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    if (blockOut != null) {\n      IOException ioe = null;\n      try {\n        final long blockDirStart = blockOut.getFilePointer();\n        \n        // write field summary\n        blockOut.writeVInt(fields.size());\n        for (FieldMetaData field : fields) {\n          blockOut.writeVInt(field.fieldInfo.number);\n          blockOut.writeVLong(field.numTerms);\n          if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            blockOut.writeVLong(field.sumTotalTermFreq);\n          }\n          blockOut.writeVLong(field.sumDocFreq);\n          blockOut.writeVInt(field.docCount);\n          blockOut.writeVInt(field.longsSize);\n          blockOut.writeVLong(field.statsOut.getFilePointer());\n          blockOut.writeVLong(field.metaLongsOut.getFilePointer());\n          blockOut.writeVLong(field.metaBytesOut.getFilePointer());\n          \n          field.skipOut.writeTo(blockOut);\n          field.statsOut.writeTo(blockOut);\n          field.metaLongsOut.writeTo(blockOut);\n          field.metaBytesOut.writeTo(blockOut);\n          field.dict.save(indexOut);\n        }\n        writeTrailer(blockOut, blockDirStart);\n        CodecUtil.writeFooter(indexOut);\n        CodecUtil.writeFooter(blockOut);\n      } catch (IOException ioe2) {\n        ioe = ioe2;\n      } finally {\n        IOUtils.closeWhileHandlingException(ioe, blockOut, indexOut, postingsWriter);\n        blockOut = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (blockOut != null) {\n      boolean success = false;\n      try {\n        final long blockDirStart = blockOut.getFilePointer();\n        \n        // write field summary\n        blockOut.writeVInt(fields.size());\n        for (FieldMetaData field : fields) {\n          blockOut.writeVInt(field.fieldInfo.number);\n          blockOut.writeVLong(field.numTerms);\n          if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n            blockOut.writeVLong(field.sumTotalTermFreq);\n          }\n          blockOut.writeVLong(field.sumDocFreq);\n          blockOut.writeVInt(field.docCount);\n          blockOut.writeVInt(field.longsSize);\n          blockOut.writeVLong(field.statsOut.getFilePointer());\n          blockOut.writeVLong(field.metaLongsOut.getFilePointer());\n          blockOut.writeVLong(field.metaBytesOut.getFilePointer());\n          \n          field.skipOut.writeTo(blockOut);\n          field.statsOut.writeTo(blockOut);\n          field.metaLongsOut.writeTo(blockOut);\n          field.metaBytesOut.writeTo(blockOut);\n          field.dict.save(indexOut);\n        }\n        writeTrailer(blockOut, blockDirStart);\n        CodecUtil.writeFooter(indexOut);\n        CodecUtil.writeFooter(blockOut);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(blockOut, indexOut, postingsWriter);\n        } else {\n          IOUtils.closeWhileHandlingException(blockOut, indexOut, postingsWriter);\n        }\n        blockOut = null;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    if (blockOut != null) {\n      boolean success = false;\n      try {\n        final long blockDirStart = blockOut.getFilePointer();\n        \n        // write field summary\n        blockOut.writeVInt(fields.size());\n        for (FieldMetaData field : fields) {\n          blockOut.writeVInt(field.fieldInfo.number);\n          blockOut.writeVLong(field.numTerms);\n          if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            blockOut.writeVLong(field.sumTotalTermFreq);\n          }\n          blockOut.writeVLong(field.sumDocFreq);\n          blockOut.writeVInt(field.docCount);\n          blockOut.writeVInt(field.longsSize);\n          blockOut.writeVLong(field.statsOut.getFilePointer());\n          blockOut.writeVLong(field.metaLongsOut.getFilePointer());\n          blockOut.writeVLong(field.metaBytesOut.getFilePointer());\n          \n          field.skipOut.writeTo(blockOut);\n          field.statsOut.writeTo(blockOut);\n          field.metaLongsOut.writeTo(blockOut);\n          field.metaBytesOut.writeTo(blockOut);\n          field.dict.save(indexOut);\n        }\n        writeTrailer(blockOut, blockDirStart);\n        CodecUtil.writeFooter(indexOut);\n        CodecUtil.writeFooter(blockOut);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(blockOut, indexOut, postingsWriter);\n        } else {\n          IOUtils.closeWhileHandlingException(blockOut, indexOut, postingsWriter);\n        }\n        blockOut = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (blockOut != null) {\n      boolean success = false;\n      try {\n        final long blockDirStart = blockOut.getFilePointer();\n        \n        // write field summary\n        blockOut.writeVInt(fields.size());\n        for (FieldMetaData field : fields) {\n          blockOut.writeVInt(field.fieldInfo.number);\n          blockOut.writeVLong(field.numTerms);\n          if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n            blockOut.writeVLong(field.sumTotalTermFreq);\n          }\n          blockOut.writeVLong(field.sumDocFreq);\n          blockOut.writeVInt(field.docCount);\n          blockOut.writeVInt(field.longsSize);\n          blockOut.writeVLong(field.statsOut.size());\n          blockOut.writeVLong(field.metaLongsOut.size());\n          blockOut.writeVLong(field.metaBytesOut.size());\n          \n          field.skipOut.copyTo(blockOut);\n          field.statsOut.copyTo(blockOut);\n          field.metaLongsOut.copyTo(blockOut);\n          field.metaBytesOut.copyTo(blockOut);\n          field.dict.save(indexOut);\n        }\n        writeTrailer(blockOut, blockDirStart);\n        CodecUtil.writeFooter(indexOut);\n        CodecUtil.writeFooter(blockOut);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(blockOut, indexOut, postingsWriter);\n        } else {\n          IOUtils.closeWhileHandlingException(blockOut, indexOut, postingsWriter);\n        }\n        blockOut = null;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    if (blockOut != null) {\n      boolean success = false;\n      try {\n        final long blockDirStart = blockOut.getFilePointer();\n        \n        // write field summary\n        blockOut.writeVInt(fields.size());\n        for (FieldMetaData field : fields) {\n          blockOut.writeVInt(field.fieldInfo.number);\n          blockOut.writeVLong(field.numTerms);\n          if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n            blockOut.writeVLong(field.sumTotalTermFreq);\n          }\n          blockOut.writeVLong(field.sumDocFreq);\n          blockOut.writeVInt(field.docCount);\n          blockOut.writeVInt(field.longsSize);\n          blockOut.writeVLong(field.statsOut.getFilePointer());\n          blockOut.writeVLong(field.metaLongsOut.getFilePointer());\n          blockOut.writeVLong(field.metaBytesOut.getFilePointer());\n          \n          field.skipOut.writeTo(blockOut);\n          field.statsOut.writeTo(blockOut);\n          field.metaLongsOut.writeTo(blockOut);\n          field.metaBytesOut.writeTo(blockOut);\n          field.dict.save(indexOut);\n        }\n        writeTrailer(blockOut, blockDirStart);\n        CodecUtil.writeFooter(indexOut);\n        CodecUtil.writeFooter(blockOut);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(blockOut, indexOut, postingsWriter);\n        } else {\n          IOUtils.closeWhileHandlingException(blockOut, indexOut, postingsWriter);\n        }\n        blockOut = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#close().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void close() throws IOException {\n    if (blockOut != null) {\n      boolean success = false;\n      try {\n        final long blockDirStart = blockOut.getFilePointer();\n        \n        // write field summary\n        blockOut.writeVInt(fields.size());\n        for (FieldMetaData field : fields) {\n          blockOut.writeVInt(field.fieldInfo.number);\n          blockOut.writeVLong(field.numTerms);\n          if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n            blockOut.writeVLong(field.sumTotalTermFreq);\n          }\n          blockOut.writeVLong(field.sumDocFreq);\n          blockOut.writeVInt(field.docCount);\n          blockOut.writeVInt(field.longsSize);\n          blockOut.writeVLong(field.statsOut.size());\n          blockOut.writeVLong(field.metaLongsOut.size());\n          blockOut.writeVLong(field.metaBytesOut.size());\n          \n          field.skipOut.copyTo(blockOut);\n          field.statsOut.copyTo(blockOut);\n          field.metaLongsOut.copyTo(blockOut);\n          field.metaBytesOut.copyTo(blockOut);\n          field.dict.save(indexOut);\n        }\n        writeTrailer(blockOut, blockDirStart);\n        CodecUtil.writeFooter(indexOut);\n        CodecUtil.writeFooter(blockOut);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(blockOut, indexOut, postingsWriter);\n        } else {\n          IOUtils.closeWhileHandlingException(blockOut, indexOut, postingsWriter);\n        }\n        blockOut = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#close().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (blockOut != null) {\n      boolean success = false;\n      try {\n        final long blockDirStart = blockOut.getFilePointer();\n        \n        // write field summary\n        blockOut.writeVInt(fields.size());\n        for (FieldMetaData field : fields) {\n          blockOut.writeVInt(field.fieldInfo.number);\n          blockOut.writeVLong(field.numTerms);\n          if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n            blockOut.writeVLong(field.sumTotalTermFreq);\n          }\n          blockOut.writeVLong(field.sumDocFreq);\n          blockOut.writeVInt(field.docCount);\n          blockOut.writeVInt(field.longsSize);\n          blockOut.writeVLong(field.statsOut.size());\n          blockOut.writeVLong(field.metaLongsOut.size());\n          blockOut.writeVLong(field.metaBytesOut.size());\n          \n          field.skipOut.copyTo(blockOut);\n          field.statsOut.copyTo(blockOut);\n          field.metaLongsOut.copyTo(blockOut);\n          field.metaBytesOut.copyTo(blockOut);\n          field.dict.save(indexOut);\n        }\n        writeTrailer(blockOut, blockDirStart);\n        CodecUtil.writeFooter(indexOut);\n        CodecUtil.writeFooter(blockOut);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(blockOut, indexOut, postingsWriter);\n        } else {\n          IOUtils.closeWhileHandlingException(blockOut, indexOut, postingsWriter);\n        }\n        blockOut = null;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsWriter#close().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void close() throws IOException {\n    if (blockOut != null) {\n      boolean success = false;\n      try {\n        final long blockDirStart = blockOut.getFilePointer();\n        \n        // write field summary\n        blockOut.writeVInt(fields.size());\n        for (FieldMetaData field : fields) {\n          blockOut.writeVInt(field.fieldInfo.number);\n          blockOut.writeVLong(field.numTerms);\n          if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n            blockOut.writeVLong(field.sumTotalTermFreq);\n          }\n          blockOut.writeVLong(field.sumDocFreq);\n          blockOut.writeVInt(field.docCount);\n          blockOut.writeVInt(field.longsSize);\n          blockOut.writeVLong(field.statsOut.size());\n          blockOut.writeVLong(field.metaLongsOut.size());\n          blockOut.writeVLong(field.metaBytesOut.size());\n          \n          field.skipOut.copyTo(blockOut);\n          field.statsOut.copyTo(blockOut);\n          field.metaLongsOut.copyTo(blockOut);\n          field.metaBytesOut.copyTo(blockOut);\n          field.dict.save(indexOut);\n        }\n        writeTrailer(blockOut, blockDirStart);\n        CodecUtil.writeFooter(indexOut);\n        CodecUtil.writeFooter(blockOut);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(blockOut, indexOut, postingsWriter);\n        } else {\n          IOUtils.closeWhileHandlingException(blockOut, indexOut, postingsWriter);\n        }\n        blockOut = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"56df73d43b6fc340f5332322862382c7e30f4368":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43e3527ed736c46c0f0ab28181937b9de5ef7c63":["7afb64ff3a701f68b2689cafff6c5bdeb4f67f63"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["43e3527ed736c46c0f0ab28181937b9de5ef7c63"],"7afb64ff3a701f68b2689cafff6c5bdeb4f67f63":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56df73d43b6fc340f5332322862382c7e30f4368"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","7afb64ff3a701f68b2689cafff6c5bdeb4f67f63"],"56df73d43b6fc340f5332322862382c7e30f4368":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"43e3527ed736c46c0f0ab28181937b9de5ef7c63":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"7afb64ff3a701f68b2689cafff6c5bdeb4f67f63":["43e3527ed736c46c0f0ab28181937b9de5ef7c63"],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56df73d43b6fc340f5332322862382c7e30f4368","2f948dd442d23baa6cbb28daf77c8db78b351329"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}