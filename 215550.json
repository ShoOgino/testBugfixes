{"path":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[],long).mjava","commits":[{"id":"c986b1ea9768aff3c903f05a2c85b7b672b5c225","date":1359126891,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[],long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    String path = createData(dir + \"/\" + prefix, data,\n        CreateMode.PERSISTENT_SEQUENTIAL);\n    String watchID = createData(\n        dir + \"/\" + response_prefix + path.substring(path.lastIndexOf(\"-\") + 1),\n        null, CreateMode.EPHEMERAL);\n    Object lock = new Object();\n    LatchChildWatcher watcher = new LatchChildWatcher(lock);\n    synchronized (lock) {\n      if (zookeeper.exists(watchID, watcher, true) != null) {\n        watcher.await(timeout);\n      }\n    }\n    byte[] bytes = zookeeper.getData(watchID, null, null, true);\n    zookeeper.delete(watchID, -1, true);\n    return new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[],long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    String path = createData(dir + \"/\" + prefix, data,\n        CreateMode.PERSISTENT_SEQUENTIAL);\n    String watchID = createData(\n        dir + \"/\" + response_prefix + path.substring(path.lastIndexOf(\"-\") + 1),\n        null, CreateMode.EPHEMERAL);\n    Object lock = new Object();\n    LatchChildWatcher watcher = new LatchChildWatcher(lock);\n    synchronized (lock) {\n      if (zookeeper.exists(watchID, watcher, true) != null) {\n        watcher.await(timeout);\n      }\n    }\n    byte[] bytes = zookeeper.getData(watchID, null, null, true);\n    zookeeper.delete(watchID, -1, true);\n    return new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f45f67a018421da088ea39274f23ad5d339b97d","date":1395559348,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[],long).mjava","sourceNew":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      String path = createData(dir + \"/\" + prefix, data,\n          CreateMode.PERSISTENT_SEQUENTIAL);\n      String watchID = createData(\n          dir + \"/\" + response_prefix + path.substring(path.lastIndexOf(\"-\") + 1),\n          null, CreateMode.EPHEMERAL);\n      Object lock = new Object();\n      LatchChildWatcher watcher = new LatchChildWatcher(lock);\n      synchronized (lock) {\n        if (zookeeper.exists(watchID, watcher, true) != null) {\n          watcher.await(timeout);\n        }\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      zookeeper.delete(watchID, -1, true);\n      return new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    String path = createData(dir + \"/\" + prefix, data,\n        CreateMode.PERSISTENT_SEQUENTIAL);\n    String watchID = createData(\n        dir + \"/\" + response_prefix + path.substring(path.lastIndexOf(\"-\") + 1),\n        null, CreateMode.EPHEMERAL);\n    Object lock = new Object();\n    LatchChildWatcher watcher = new LatchChildWatcher(lock);\n    synchronized (lock) {\n      if (zookeeper.exists(watchID, watcher, true) != null) {\n        watcher.await(timeout);\n      }\n    }\n    byte[] bytes = zookeeper.getData(watchID, null, null, true);\n    zookeeper.delete(watchID, -1, true);\n    return new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n  }\n\n","bugFix":null,"bugIntro":["1275856c84e2d39350c6d0f98681e2c6ba1e18aa","dcf05edaf8d44fa2294eff8746c9f1ae09f03bef","3f1a0016e65424cb251992c72022616d73753b7e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f1a0016e65424cb251992c72022616d73753b7e","date":1414693186,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[],long).mjava","sourceNew":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      String path = createData(dir + \"/\" + prefix, data,\n          CreateMode.PERSISTENT_SEQUENTIAL);\n      String watchID = createData(\n          dir + \"/\" + response_prefix + path.substring(path.lastIndexOf(\"-\") + 1),\n          null, CreateMode.EPHEMERAL);\n\n      Object lock = new Object();\n      LatchWatcher watcher = new LatchWatcher(lock);\n      synchronized (lock) {\n        if (zookeeper.exists(watchID, watcher, true) != null) {\n          watcher.await(timeout);\n        }\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      zookeeper.delete(watchID, -1, true);\n      return new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      String path = createData(dir + \"/\" + prefix, data,\n          CreateMode.PERSISTENT_SEQUENTIAL);\n      String watchID = createData(\n          dir + \"/\" + response_prefix + path.substring(path.lastIndexOf(\"-\") + 1),\n          null, CreateMode.EPHEMERAL);\n      Object lock = new Object();\n      LatchChildWatcher watcher = new LatchChildWatcher(lock);\n      synchronized (lock) {\n        if (zookeeper.exists(watchID, watcher, true) != null) {\n          watcher.await(timeout);\n        }\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      zookeeper.delete(watchID, -1, true);\n      return new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":["9f45f67a018421da088ea39274f23ad5d339b97d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a282020d6c9a4ea32a359539e283e4771a2fda8","date":1440047542,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionQueue#offer(byte[],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[],long).mjava","sourceNew":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      String path = createData(dir + \"/\" + PREFIX, data,\n          CreateMode.PERSISTENT_SEQUENTIAL);\n      String watchID = createData(\n          dir + \"/\" + response_prefix + path.substring(path.lastIndexOf(\"-\") + 1),\n          null, CreateMode.EPHEMERAL);\n\n      Object lock = new Object();\n      LatchWatcher watcher = new LatchWatcher(lock);\n      synchronized (lock) {\n        if (zookeeper.exists(watchID, watcher, true) != null) {\n          watcher.await(timeout);\n        }\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      zookeeper.delete(watchID, -1, true);\n      return new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Offer the data and wait for the response\n   * \n   */\n  public QueueEvent offer(byte[] data, long timeout) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      String path = createData(dir + \"/\" + prefix, data,\n          CreateMode.PERSISTENT_SEQUENTIAL);\n      String watchID = createData(\n          dir + \"/\" + response_prefix + path.substring(path.lastIndexOf(\"-\") + 1),\n          null, CreateMode.EPHEMERAL);\n\n      Object lock = new Object();\n      LatchWatcher watcher = new LatchWatcher(lock);\n      synchronized (lock) {\n        if (zookeeper.exists(watchID, watcher, true) != null) {\n          watcher.await(timeout);\n        }\n      }\n      byte[] bytes = zookeeper.getData(watchID, null, null, true);\n      zookeeper.delete(watchID, -1, true);\n      return new QueueEvent(watchID, bytes, watcher.getWatchedEvent());\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":["dcf05edaf8d44fa2294eff8746c9f1ae09f03bef"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c986b1ea9768aff3c903f05a2c85b7b672b5c225":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f1a0016e65424cb251992c72022616d73753b7e":["9f45f67a018421da088ea39274f23ad5d339b97d"],"9f45f67a018421da088ea39274f23ad5d339b97d":["c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["3f1a0016e65424cb251992c72022616d73753b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a282020d6c9a4ea32a359539e283e4771a2fda8"]},"commit2Childs":{"c986b1ea9768aff3c903f05a2c85b7b672b5c225":["9f45f67a018421da088ea39274f23ad5d339b97d","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c986b1ea9768aff3c903f05a2c85b7b672b5c225","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"3f1a0016e65424cb251992c72022616d73753b7e":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"9f45f67a018421da088ea39274f23ad5d339b97d":["3f1a0016e65424cb251992c72022616d73753b7e"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}