{"path":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testRangeQuery().mjava","commits":[{"id":"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b","date":1313816278,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testRangeQuery().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TestSlowCollationMethods#testRangeQuery().mjava","sourceNew":"  public void testRangeQuery() throws Exception {\n    int numQueries = 50*RANDOM_MULTIPLIER;\n    for (int i = 0; i < numQueries; i++) {\n      String startPoint = _TestUtil.randomUnicodeString(random);\n      String endPoint = _TestUtil.randomUnicodeString(random);\n      Query query = new SlowCollatedTermRangeQuery(\"field\", startPoint, endPoint, true, true, collator);\n      doTestRanges(startPoint, endPoint, query);\n    }\n  }\n\n","sourceOld":"  public void testRangeQuery() throws Exception {\n    int numQueries = 50*RANDOM_MULTIPLIER;\n    for (int i = 0; i < numQueries; i++) {\n      String startPoint = _TestUtil.randomUnicodeString(random);\n      String endPoint = _TestUtil.randomUnicodeString(random);\n      Query query = new SlowCollatedTermRangeQuery(\"field\", startPoint, endPoint, true, true, collator);\n      doTestRanges(startPoint, endPoint, query);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testRangeQuery().mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testRangeQuery().mjava","sourceNew":"  public void testRangeQuery() throws Exception {\n    int numQueries = 50*RANDOM_MULTIPLIER;\n    for (int i = 0; i < numQueries; i++) {\n      String startPoint = _TestUtil.randomUnicodeString(random());\n      String endPoint = _TestUtil.randomUnicodeString(random());\n      Query query = new SlowCollatedTermRangeQuery(\"field\", startPoint, endPoint, true, true, collator);\n      doTestRanges(startPoint, endPoint, query);\n    }\n  }\n\n","sourceOld":"  public void testRangeQuery() throws Exception {\n    int numQueries = 50*RANDOM_MULTIPLIER;\n    for (int i = 0; i < numQueries; i++) {\n      String startPoint = _TestUtil.randomUnicodeString(random);\n      String endPoint = _TestUtil.randomUnicodeString(random);\n      Query query = new SlowCollatedTermRangeQuery(\"field\", startPoint, endPoint, true, true, collator);\n      doTestRanges(startPoint, endPoint, query);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testRangeQuery().mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testRangeQuery().mjava","sourceNew":"  public void testRangeQuery() throws Exception {\n    int numQueries = 50*RANDOM_MULTIPLIER;\n    for (int i = 0; i < numQueries; i++) {\n      String startPoint = _TestUtil.randomUnicodeString(random());\n      String endPoint = _TestUtil.randomUnicodeString(random());\n      Query query = new SlowCollatedTermRangeQuery(\"field\", startPoint, endPoint, true, true, collator);\n      doTestRanges(startPoint, endPoint, query);\n    }\n  }\n\n","sourceOld":"  public void testRangeQuery() throws Exception {\n    int numQueries = 50*RANDOM_MULTIPLIER;\n    for (int i = 0; i < numQueries; i++) {\n      String startPoint = _TestUtil.randomUnicodeString(random());\n      String endPoint = _TestUtil.randomUnicodeString(random());\n      Query query = new SlowCollatedTermRangeQuery(\"field\", startPoint, endPoint, true, true, collator);\n      doTestRanges(startPoint, endPoint, query);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}