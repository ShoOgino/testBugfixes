{"path":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int getUniqueFieldCount() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int getUniqueFieldCount() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd27945df2678ed67d34f79f52ef576002e32637","date":1328115715,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        if (VERBOSE) {\n          System.out.println(\"load field=\" + termsReader.field.name);\n        }\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int getUniqueFieldCount() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int getUniqueFieldCount() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        if (VERBOSE) {\n          System.out.println(\"load field=\" + termsReader.field.name);\n        }\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int getUniqueFieldCount() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        if (VERBOSE) {\n          System.out.println(\"load field=\" + termsReader.field.name);\n        }\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int getUniqueFieldCount() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["bd27945df2678ed67d34f79f52ef576002e32637"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bd27945df2678ed67d34f79f52ef576002e32637":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"bd27945df2678ed67d34f79f52ef576002e32637":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["bd27945df2678ed67d34f79f52ef576002e32637"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}