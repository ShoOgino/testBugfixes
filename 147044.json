{"path":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#getSynonyms(String).mjava","commits":[{"id":"d68e5c46e6a5ebdf4dafec4a123344092b915cc0","date":1256752193,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#getSynonyms(String).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymMap#getSynonyms(String).mjava","sourceNew":"  /**\n   * Returns the synonym set for the given word, sorted ascending.\n   * \n   * @param word\n   *            the word to lookup (must be in lowercase).\n   * @return the synonyms; a set of zero or more words, sorted ascending, each\n   *         word containing lowercase characters that satisfy\n   *         <code>Character.isLetter()</code>.\n   */\n  public String[] getSynonyms(String word) {\n    Object syns = table.get(word);\n    if (syns == null) return EMPTY;\n    if (syns instanceof String) return new String[] {(String) syns};\n    \n    String[] synonyms = (String[]) syns;\n    String[] copy = new String[synonyms.length]; // copy for guaranteed immutability\n    System.arraycopy(synonyms, 0, copy, 0, synonyms.length);\n    return copy;\n  }\n\n","sourceOld":"  /**\n   * Returns the synonym set for the given word, sorted ascending.\n   * \n   * @param word\n   *            the word to lookup (must be in lowercase).\n   * @return the synonyms; a set of zero or more words, sorted ascending, each\n   *         word containing lowercase characters that satisfy\n   *         <code>Character.isLetter()</code>.\n   */\n  public String[] getSynonyms(String word) {\n    Object syns = table.get(word);\n    if (syns == null) return EMPTY;\n    if (syns instanceof String) return new String[] {(String) syns};\n    \n    String[] synonyms = (String[]) syns;\n    String[] copy = new String[synonyms.length]; // copy for guaranteed immutability\n    System.arraycopy(synonyms, 0, copy, 0, synonyms.length);\n    return copy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69d87d34a81230de56333f52f590caeb6d80667","date":1257848306,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#getSynonyms(String).mjava","pathOld":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#getSynonyms(String).mjava","sourceNew":"  /**\n   * Returns the synonym set for the given word, sorted ascending.\n   * \n   * @param word\n   *            the word to lookup (must be in lowercase).\n   * @return the synonyms; a set of zero or more words, sorted ascending, each\n   *         word containing lowercase characters that satisfy\n   *         <code>Character.isLetter()</code>.\n   */\n  public String[] getSynonyms(String word) {\n    String[] synonyms = table.get(word);\n    if (synonyms == null) return EMPTY;\n    String[] copy = new String[synonyms.length]; // copy for guaranteed immutability\n    System.arraycopy(synonyms, 0, copy, 0, synonyms.length);\n    return copy;\n  }\n\n","sourceOld":"  /**\n   * Returns the synonym set for the given word, sorted ascending.\n   * \n   * @param word\n   *            the word to lookup (must be in lowercase).\n   * @return the synonyms; a set of zero or more words, sorted ascending, each\n   *         word containing lowercase characters that satisfy\n   *         <code>Character.isLetter()</code>.\n   */\n  public String[] getSynonyms(String word) {\n    Object syns = table.get(word);\n    if (syns == null) return EMPTY;\n    if (syns instanceof String) return new String[] {(String) syns};\n    \n    String[] synonyms = (String[]) syns;\n    String[] copy = new String[synonyms.length]; // copy for guaranteed immutability\n    System.arraycopy(synonyms, 0, copy, 0, synonyms.length);\n    return copy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#getSynonyms(String).mjava","pathOld":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#getSynonyms(String).mjava","sourceNew":"  /**\n   * Returns the synonym set for the given word, sorted ascending.\n   * \n   * @param word\n   *            the word to lookup (must be in lowercase).\n   * @return the synonyms; a set of zero or more words, sorted ascending, each\n   *         word containing lowercase characters that satisfy\n   *         <code>Character.isLetter()</code>.\n   */\n  public String[] getSynonyms(String word) {\n    String[] synonyms = table.get(word);\n    if (synonyms == null) return EMPTY;\n    String[] copy = new String[synonyms.length]; // copy for guaranteed immutability\n    System.arraycopy(synonyms, 0, copy, 0, synonyms.length);\n    return copy;\n  }\n\n","sourceOld":"  /**\n   * Returns the synonym set for the given word, sorted ascending.\n   * \n   * @param word\n   *            the word to lookup (must be in lowercase).\n   * @return the synonyms; a set of zero or more words, sorted ascending, each\n   *         word containing lowercase characters that satisfy\n   *         <code>Character.isLetter()</code>.\n   */\n  public String[] getSynonyms(String word) {\n    String[] synonyms = table.get(word);\n    if (synonyms == null) return EMPTY;\n    String[] copy = new String[synonyms.length]; // copy for guaranteed immutability\n    System.arraycopy(synonyms, 0, copy, 0, synonyms.length);\n    return copy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c69d87d34a81230de56333f52f590caeb6d80667":["d68e5c46e6a5ebdf4dafec4a123344092b915cc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c69d87d34a81230de56333f52f590caeb6d80667"],"d68e5c46e6a5ebdf4dafec4a123344092b915cc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c69d87d34a81230de56333f52f590caeb6d80667":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d68e5c46e6a5ebdf4dafec4a123344092b915cc0"],"d68e5c46e6a5ebdf4dafec4a123344092b915cc0":["c69d87d34a81230de56333f52f590caeb6d80667"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}