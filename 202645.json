{"path":"backwards/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        if (verbose())\n          message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          doMerge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            if (verbose())\n              message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        if (verbose())\n          message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            handleMergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          ConcurrentMergeScheduler.this.notifyAll();\n          boolean removed = mergeThreads.remove(this);\n          assert removed;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        if (verbose())\n          message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          doMerge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            if (verbose())\n              message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        if (verbose())\n          message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            handleMergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          ConcurrentMergeScheduler.this.notifyAll();\n          boolean removed = mergeThreads.remove(this);\n          assert removed;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        if (verbose())\n          message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          doMerge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            if (verbose())\n              message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        if (verbose())\n          message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            handleMergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          ConcurrentMergeScheduler.this.notifyAll();\n          boolean removed = mergeThreads.remove(this);\n          assert removed;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}