{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","commits":[{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      // write term meta data into fst\n      final BlockTermState state = postingsWriter.newTermState();\n      final TempTermOutputs.TempMetaData meta = new TempTermOutputs.TempMetaData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = state.docFreq = stats.docFreq;\n      meta.totalTermFreq = state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(meta.longs, metaWriter, fieldInfo, state, true);\n      final int bytesSize = (int)metaWriter.getFilePointer();\n      if (bytesSize > 0) {\n        meta.bytes = new byte[bytesSize];\n        metaWriter.writeTo(meta.bytes, 0);\n        metaWriter.reset();\n      }\n      builder.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      // write term meta data into fst\n      final BlockTermState state = postingsWriter.newTermState();\n      final TempTermOutputs.TempMetaData meta = new TempTermOutputs.TempMetaData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = state.docFreq = stats.docFreq;\n      meta.totalTermFreq = state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(meta.longs, metaWriter, fieldInfo, state, true);\n      final int bytesSize = (int)metaWriter.getFilePointer();\n      if (bytesSize > 0) {\n        meta.bytes = new byte[bytesSize];\n        metaWriter.writeTo(meta.bytes, 0);\n        metaWriter.reset();\n      }\n      builder.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f71b8f76a3876ede75eba21fb109342525c3d9c4","date":1378263923,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      // write term meta data into fst\n      final BlockTermState state = postingsWriter.newTermState();\n      final TempTermOutputs.TempTermData meta = new TempTermOutputs.TempTermData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = state.docFreq = stats.docFreq;\n      meta.totalTermFreq = state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(meta.longs, metaWriter, fieldInfo, state, true);\n      final int bytesSize = (int)metaWriter.getFilePointer();\n      if (bytesSize > 0) {\n        meta.bytes = new byte[bytesSize];\n        metaWriter.writeTo(meta.bytes, 0);\n        metaWriter.reset();\n      }\n      builder.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      // write term meta data into fst\n      final BlockTermState state = postingsWriter.newTermState();\n      final TempTermOutputs.TempMetaData meta = new TempTermOutputs.TempMetaData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = state.docFreq = stats.docFreq;\n      meta.totalTermFreq = state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(meta.longs, metaWriter, fieldInfo, state, true);\n      final int bytesSize = (int)metaWriter.getFilePointer();\n      if (bytesSize > 0) {\n        meta.bytes = new byte[bytesSize];\n        metaWriter.writeTo(meta.bytes, 0);\n        metaWriter.reset();\n      }\n      builder.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56df73d43b6fc340f5332322862382c7e30f4368","date":1378304988,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      // write term meta data into fst\n      final BlockTermState state = postingsWriter.newTermState();\n      final FSTTermOutputs.TermData meta = new FSTTermOutputs.TermData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = state.docFreq = stats.docFreq;\n      meta.totalTermFreq = state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(meta.longs, metaWriter, fieldInfo, state, true);\n      final int bytesSize = (int)metaWriter.getFilePointer();\n      if (bytesSize > 0) {\n        meta.bytes = new byte[bytesSize];\n        metaWriter.writeTo(meta.bytes, 0);\n        metaWriter.reset();\n      }\n      builder.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      // write term meta data into fst\n      final BlockTermState state = postingsWriter.newTermState();\n      final TempTermOutputs.TempTermData meta = new TempTermOutputs.TempTermData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = state.docFreq = stats.docFreq;\n      meta.totalTermFreq = state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(meta.longs, metaWriter, fieldInfo, state, true);\n      final int bytesSize = (int)metaWriter.getFilePointer();\n      if (bytesSize > 0) {\n        meta.bytes = new byte[bytesSize];\n        metaWriter.writeTo(meta.bytes, 0);\n        metaWriter.reset();\n      }\n      builder.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56df73d43b6fc340f5332322862382c7e30f4368":["f71b8f76a3876ede75eba21fb109342525c3d9c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f71b8f76a3876ede75eba21fb109342525c3d9c4":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"56df73d43b6fc340f5332322862382c7e30f4368":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["f71b8f76a3876ede75eba21fb109342525c3d9c4"],"f71b8f76a3876ede75eba21fb109342525c3d9c4":["56df73d43b6fc340f5332322862382c7e30f4368"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56df73d43b6fc340f5332322862382c7e30f4368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}