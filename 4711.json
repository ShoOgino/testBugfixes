{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialDocMaker#makeShapeConverter(SpatialStrategy,Config,String).mjava","commits":[{"id":"e6eff3a1335608b62ce74c7f052b277baedb721e","date":1382897865,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialDocMaker#makeShapeConverter(SpatialStrategy,Config,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Optionally converts points to circles, and optionally bbox'es result.\n   */\n  public static ShapeConverter makeShapeConverter(final SpatialStrategy spatialStrategy,\n                                                  Config config, String configKeyPrefix) {\n    //by default does no conversion\n    final double radiusDegrees = config.get(configKeyPrefix+\"radiusDegrees\", 0.0);\n    final double plusMinus = config.get(configKeyPrefix+\"radiusDegreesRandPlusMinus\", 0.0);\n    final boolean bbox = config.get(configKeyPrefix + \"bbox\", false);\n\n    return new ShapeConverter() {\n      @Override\n      public Shape convert(Shape shape) {\n        if (shape instanceof Point && (radiusDegrees != 0.0 || plusMinus != 0.0)) {\n          Point point = (Point)shape;\n          double radius = radiusDegrees;\n          if (plusMinus > 0.0) {\n            Random random = new Random(point.hashCode());//use hashCode so it's reproducibly random\n            radius += random.nextDouble() * 2 * plusMinus - plusMinus;\n            radius = Math.abs(radius);//can happen if configured plusMinus > radiusDegrees\n          }\n          shape = spatialStrategy.getSpatialContext().makeCircle(point, radius);\n        }\n        if (bbox)\n          shape = shape.getBoundingBox();\n        return shape;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialDocMaker#makeShapeConverter(SpatialStrategy,Config,String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialDocMaker#makeShapeConverter(SpatialStrategy,Config,String).mjava","sourceNew":"  /**\n   * Optionally converts points to circles, and optionally bbox'es result.\n   */\n  public static ShapeConverter makeShapeConverter(final SpatialStrategy spatialStrategy,\n                                                  Config config, String configKeyPrefix) {\n    //by default does no conversion\n    final double radiusDegrees = config.get(configKeyPrefix+\"radiusDegrees\", 0.0);\n    final double plusMinus = config.get(configKeyPrefix+\"radiusDegreesRandPlusMinus\", 0.0);\n    final boolean bbox = config.get(configKeyPrefix + \"bbox\", false);\n\n    return new ShapeConverter() {\n      @SuppressWarnings(\"deprecation\")\n      @Override\n      public Shape convert(Shape shape) {\n        if (shape instanceof Point && (radiusDegrees != 0.0 || plusMinus != 0.0)) {\n          Point point = (Point)shape;\n          double radius = radiusDegrees;\n          if (plusMinus > 0.0) {\n            Random random = new Random(point.hashCode());//use hashCode so it's reproducibly random\n            radius += random.nextDouble() * 2 * plusMinus - plusMinus;\n            radius = Math.abs(radius);//can happen if configured plusMinus > radiusDegrees\n          }\n          shape = spatialStrategy.getSpatialContext().makeCircle(point, radius);\n        }\n        if (bbox)\n          shape = shape.getBoundingBox();\n        return shape;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Optionally converts points to circles, and optionally bbox'es result.\n   */\n  public static ShapeConverter makeShapeConverter(final SpatialStrategy spatialStrategy,\n                                                  Config config, String configKeyPrefix) {\n    //by default does no conversion\n    final double radiusDegrees = config.get(configKeyPrefix+\"radiusDegrees\", 0.0);\n    final double plusMinus = config.get(configKeyPrefix+\"radiusDegreesRandPlusMinus\", 0.0);\n    final boolean bbox = config.get(configKeyPrefix + \"bbox\", false);\n\n    return new ShapeConverter() {\n      @Override\n      public Shape convert(Shape shape) {\n        if (shape instanceof Point && (radiusDegrees != 0.0 || plusMinus != 0.0)) {\n          Point point = (Point)shape;\n          double radius = radiusDegrees;\n          if (plusMinus > 0.0) {\n            Random random = new Random(point.hashCode());//use hashCode so it's reproducibly random\n            radius += random.nextDouble() * 2 * plusMinus - plusMinus;\n            radius = Math.abs(radius);//can happen if configured plusMinus > radiusDegrees\n          }\n          shape = spatialStrategy.getSpatialContext().makeCircle(point, radius);\n        }\n        if (bbox)\n          shape = shape.getBoundingBox();\n        return shape;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialDocMaker#makeShapeConverter(SpatialStrategy,Config,String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialDocMaker#makeShapeConverter(SpatialStrategy,Config,String).mjava","sourceNew":"  /**\n   * Optionally converts points to circles, and optionally bbox'es result.\n   */\n  public static ShapeConverter makeShapeConverter(final SpatialStrategy spatialStrategy,\n                                                  Config config, String configKeyPrefix) {\n    //by default does no conversion\n    final double radiusDegrees = config.get(configKeyPrefix+\"radiusDegrees\", 0.0);\n    final double plusMinus = config.get(configKeyPrefix+\"radiusDegreesRandPlusMinus\", 0.0);\n    final boolean bbox = config.get(configKeyPrefix + \"bbox\", false);\n\n    return new ShapeConverter() {\n      @Override\n      public Shape convert(Shape shape) {\n        if (shape instanceof Point && (radiusDegrees != 0.0 || plusMinus != 0.0)) {\n          Point point = (Point)shape;\n          double radius = radiusDegrees;\n          if (plusMinus > 0.0) {\n            Random random = new Random(point.hashCode());//use hashCode so it's reproducibly random\n            radius += random.nextDouble() * 2 * plusMinus - plusMinus;\n            radius = Math.abs(radius);//can happen if configured plusMinus > radiusDegrees\n          }\n          shape = spatialStrategy.getSpatialContext().makeCircle(point, radius);\n        }\n        if (bbox)\n          shape = shape.getBoundingBox();\n        return shape;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Optionally converts points to circles, and optionally bbox'es result.\n   */\n  public static ShapeConverter makeShapeConverter(final SpatialStrategy spatialStrategy,\n                                                  Config config, String configKeyPrefix) {\n    //by default does no conversion\n    final double radiusDegrees = config.get(configKeyPrefix+\"radiusDegrees\", 0.0);\n    final double plusMinus = config.get(configKeyPrefix+\"radiusDegreesRandPlusMinus\", 0.0);\n    final boolean bbox = config.get(configKeyPrefix + \"bbox\", false);\n\n    return new ShapeConverter() {\n      @SuppressWarnings(\"deprecation\")\n      @Override\n      public Shape convert(Shape shape) {\n        if (shape instanceof Point && (radiusDegrees != 0.0 || plusMinus != 0.0)) {\n          Point point = (Point)shape;\n          double radius = radiusDegrees;\n          if (plusMinus > 0.0) {\n            Random random = new Random(point.hashCode());//use hashCode so it's reproducibly random\n            radius += random.nextDouble() * 2 * plusMinus - plusMinus;\n            radius = Math.abs(radius);//can happen if configured plusMinus > radiusDegrees\n          }\n          shape = spatialStrategy.getSpatialContext().makeCircle(point, radius);\n        }\n        if (bbox)\n          shape = shape.getBoundingBox();\n        return shape;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e6eff3a1335608b62ce74c7f052b277baedb721e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["e6eff3a1335608b62ce74c7f052b277baedb721e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"]},"commit2Childs":{"e6eff3a1335608b62ce74c7f052b277baedb721e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6eff3a1335608b62ce74c7f052b277baedb721e"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}