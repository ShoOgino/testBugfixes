{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricProducer#close().mjava","commits":[{"id":"a117d95183986014a31f25bb04e5464ca06d6068","date":1566208086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricProducer#close().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  default void close() throws Exception {\n    SolrMetrics info = getMetrics();\n    if (info == null || info.tag.indexOf(':') == -1) return;//this will end up unregistering the root itself\n    info.unregister();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17c468812fc0c60f3d66b176339dc70564d8c3cb","date":1567918667,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricProducer#close().mjava","sourceNew":null,"sourceOld":"  @Override\n  default void close() throws Exception {\n    SolrMetrics info = getMetrics();\n    if (info == null || info.tag.indexOf(':') == -1) return;//this will end up unregistering the root itself\n    info.unregister();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52275555c0ae3b55430cef26ad7fca3f02440944","date":1568033329,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricProducer#close().mjava","sourceNew":null,"sourceOld":"  @Override\n  default void close() throws Exception {\n    SolrMetrics info = getMetrics();\n    if (info == null || info.tag.indexOf(':') == -1) return;//this will end up unregistering the root itself\n    info.unregister();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricProducer#close().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Implementations should always call <code>SolrMetricProducer.super.close()</code> to ensure that\n   * metrics with the same life-cycle as this component are properly unregistered. This prevents\n   * obscure memory leaks.\n   */\n  @Override\n  default void close() throws Exception {\n    SolrMetricsContext context = getSolrMetricsContext();\n    if (context == null) {\n      return;\n    } else {\n      context.unregister();\n    }\n    // ??? (ab) no idea what this was supposed to avoid\n    //if (info == null || info.tag.indexOf(':') == -1) return;//this will end up unregistering the root itself\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricProducer#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricProducer#close().mjava","sourceNew":"  /**\n   * Implementations should always call <code>SolrMetricProducer.super.close()</code> to ensure that\n   * metrics with the same life-cycle as this component are properly unregistered. This prevents\n   * obscure memory leaks.\n   */\n  @Override\n  default void close() throws Exception {\n    SolrMetricsContext context = getSolrMetricsContext();\n    if (context == null) {\n      return;\n    } else {\n      context.unregister();\n    }\n  }\n\n","sourceOld":"  /**\n   * Implementations should always call <code>SolrMetricProducer.super.close()</code> to ensure that\n   * metrics with the same life-cycle as this component are properly unregistered. This prevents\n   * obscure memory leaks.\n   */\n  @Override\n  default void close() throws Exception {\n    SolrMetricsContext context = getSolrMetricsContext();\n    if (context == null) {\n      return;\n    } else {\n      context.unregister();\n    }\n    // ??? (ab) no idea what this was supposed to avoid\n    //if (info == null || info.tag.indexOf(':') == -1) return;//this will end up unregistering the root itself\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricProducer#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricProducer#close().mjava","sourceNew":"  /**\n   * Implementations should always call <code>SolrMetricProducer.super.close()</code> to ensure that\n   * metrics with the same life-cycle as this component are properly unregistered. This prevents\n   * obscure memory leaks.\n   *\n   * from: https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html\n   * While this interface method is declared to throw Exception, implementers are strongly encouraged\n   * to declare concrete implementations of the close method to throw more specific exceptions, or to\n   * throw no exception at all if the close operation cannot fail.\n   */\n  @Override\n  default void close() throws IOException {\n    SolrMetricsContext context = getSolrMetricsContext();\n    if (context == null) {\n      return;\n    } else {\n      context.unregister();\n    }\n  }\n\n","sourceOld":"  /**\n   * Implementations should always call <code>SolrMetricProducer.super.close()</code> to ensure that\n   * metrics with the same life-cycle as this component are properly unregistered. This prevents\n   * obscure memory leaks.\n   */\n  @Override\n  default void close() throws Exception {\n    SolrMetricsContext context = getSolrMetricsContext();\n    if (context == null) {\n      return;\n    } else {\n      context.unregister();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"52275555c0ae3b55430cef26ad7fca3f02440944":["a117d95183986014a31f25bb04e5464ca06d6068","17c468812fc0c60f3d66b176339dc70564d8c3cb"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["52275555c0ae3b55430cef26ad7fca3f02440944"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a117d95183986014a31f25bb04e5464ca06d6068":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"17c468812fc0c60f3d66b176339dc70564d8c3cb":["a117d95183986014a31f25bb04e5464ca06d6068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"52275555c0ae3b55430cef26ad7fca3f02440944":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a117d95183986014a31f25bb04e5464ca06d6068"],"a117d95183986014a31f25bb04e5464ca06d6068":["52275555c0ae3b55430cef26ad7fca3f02440944","17c468812fc0c60f3d66b176339dc70564d8c3cb"],"17c468812fc0c60f3d66b176339dc70564d8c3cb":["52275555c0ae3b55430cef26ad7fca3f02440944"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}