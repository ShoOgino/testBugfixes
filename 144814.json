{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#readSetSelector(IndexInput,BytesRefBuilder).mjava","commits":[{"id":"e065cebbdee472a02bde38052717a8cd7ee8ab3b","date":1479244971,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#readSetSelector(IndexInput,BytesRefBuilder).mjava","pathOld":"/dev/null","sourceNew":"  private SortedSetSelector.Type readSetSelector(IndexInput input, BytesRefBuilder scratch) throws IOException {\n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch.get(), SI_SELECTOR_TYPE);\n    final String selectorAsString = readString(SI_SELECTOR_TYPE.length, scratch);\n    switch (selectorAsString) {\n      case \"min\":\n        return SortedSetSelector.Type.MIN;\n      case \"middle_min\":\n        return SortedSetSelector.Type.MIDDLE_MIN;\n      case \"middle_max\":\n        return SortedSetSelector.Type.MIDDLE_MAX;\n      case \"max\":\n        return SortedSetSelector.Type.MAX;\n      default:\n        throw new CorruptIndexException(\"unable to parse SortedSetSelector type: \" + selectorAsString, input);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#readSetSelector(IndexInput,BytesRefBuilder).mjava","pathOld":"/dev/null","sourceNew":"  private SortedSetSelector.Type readSetSelector(IndexInput input, BytesRefBuilder scratch) throws IOException {\n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch.get(), SI_SELECTOR_TYPE);\n    final String selectorAsString = readString(SI_SELECTOR_TYPE.length, scratch);\n    switch (selectorAsString) {\n      case \"min\":\n        return SortedSetSelector.Type.MIN;\n      case \"middle_min\":\n        return SortedSetSelector.Type.MIDDLE_MIN;\n      case \"middle_max\":\n        return SortedSetSelector.Type.MIDDLE_MAX;\n      case \"max\":\n        return SortedSetSelector.Type.MAX;\n      default:\n        throw new CorruptIndexException(\"unable to parse SortedSetSelector type: \" + selectorAsString, input);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773bf150032d3ef6c95997a154fb914b82875cb8","date":1590150786,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#readSetSelector(IndexInput,BytesRefBuilder).mjava","sourceNew":null,"sourceOld":"  private SortedSetSelector.Type readSetSelector(IndexInput input, BytesRefBuilder scratch) throws IOException {\n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch.get(), SI_SELECTOR_TYPE);\n    final String selectorAsString = readString(SI_SELECTOR_TYPE.length, scratch);\n    switch (selectorAsString) {\n      case \"min\":\n        return SortedSetSelector.Type.MIN;\n      case \"middle_min\":\n        return SortedSetSelector.Type.MIDDLE_MIN;\n      case \"middle_max\":\n        return SortedSetSelector.Type.MIDDLE_MAX;\n      case \"max\":\n        return SortedSetSelector.Type.MAX;\n      default:\n        throw new CorruptIndexException(\"unable to parse SortedSetSelector type: \" + selectorAsString, input);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"773bf150032d3ef6c95997a154fb914b82875cb8":["e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["773bf150032d3ef6c95997a154fb914b82875cb8"]},"commit2Childs":{"773bf150032d3ef6c95997a154fb914b82875cb8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["773bf150032d3ef6c95997a154fb914b82875cb8","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}