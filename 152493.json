{"path":"solr/core/src/test/org/apache/solr/cloud/TestSegmentTerminateEarlyState#addDocuments(CloudSolrClient,int,int,boolean).mjava","commits":[{"id":"1a9c2b42591c0db6f85041d5cfc9cba17fe45e0b","date":1455308162,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSegmentTerminateEarlyState#addDocuments(CloudSolrClient,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = new Integer(numDocs);\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(keyField, \"\"+docKey);\n        final int MM = TestMiniSolrCloudCluster.random().nextInt(60);\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = new Integer(MM);\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = new Integer(MM);\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(timestampField, \"2016-01-01T00:\"+MM+\":00Z\");\n        doc.setField(oddField, \"\"+(numDocs % 2));\n        doc.setField(quadField, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f2cc4cc34bb16ef750f9e4be14637706977993e","date":1455320490,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSegmentTerminateEarlyState#addDocuments(CloudSolrClient,int,int,boolean).mjava","sourceNew":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = new Integer(numDocs);\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(keyField, \"\"+docKey);\n        final int MM = TestMiniSolrCloudCluster.random().nextInt(60);\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = new Integer(MM);\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = new Integer(MM);\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(timestampField, \"2016-01-01T00:\"+MM+\":00Z\");\n        doc.setField(oddField, \"\"+(numDocs % 2));\n        doc.setField(quadField, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","sourceOld":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = new Integer(numDocs);\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(keyField, \"\"+docKey);\n        final int MM = TestMiniSolrCloudCluster.random().nextInt(60);\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = new Integer(MM);\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = new Integer(MM);\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(timestampField, \"2016-01-01T00:\"+MM+\":00Z\");\n        doc.setField(oddField, \"\"+(numDocs % 2));\n        doc.setField(quadField, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a9c2b42591c0db6f85041d5cfc9cba17fe45e0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f2cc4cc34bb16ef750f9e4be14637706977993e":["1a9c2b42591c0db6f85041d5cfc9cba17fe45e0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f2cc4cc34bb16ef750f9e4be14637706977993e"]},"commit2Childs":{"1a9c2b42591c0db6f85041d5cfc9cba17fe45e0b":["3f2cc4cc34bb16ef750f9e4be14637706977993e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a9c2b42591c0db6f85041d5cfc9cba17fe45e0b"],"3f2cc4cc34bb16ef750f9e4be14637706977993e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}