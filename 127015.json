{"path":"lucene/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(float,Scorer...).mjava","commits":[{"id":"3e00f80591de714c6975f454e33e0fa5218b5902","date":1294514405,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(float,Scorer...).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Similarity,Scorer...).mjava","sourceNew":"  public ConjunctionScorer(float coord, Scorer... scorers) throws IOException {\n    super(null);\n    this.scorers = scorers;\n    this.coord = coord;\n    \n    for (int i = 0; i < scorers.length; i++) {\n      if (scorers[i].nextDoc() == NO_MORE_DOCS) {\n        // If even one of the sub-scorers does not have any documents, this\n        // scorer should not attempt to do any more work.\n        lastDoc = NO_MORE_DOCS;\n        return;\n      }\n    }\n\n    // Sort the array the first time...\n    // We don't need to sort the array in any future calls because we know\n    // it will already start off sorted (all scorers on same doc).\n    \n    // Note that this comparator is not consistent with equals!\n    // Also we use mergeSort here to be stable (so order of Scoreres that\n    // match on first document keeps preserved):\n    ArrayUtil.mergeSort(scorers, new Comparator<Scorer>() { // sort the array\n      public int compare(Scorer o1, Scorer o2) {\n        return o1.docID() - o2.docID();\n      }\n    });\n\n    // NOTE: doNext() must be called before the re-sorting of the array later on.\n    // The reason is this: assume there are 5 scorers, whose first docs are 1,\n    // 2, 3, 5, 5 respectively. Sorting (above) leaves the array as is. Calling\n    // doNext() here advances all the first scorers to 5 (or a larger doc ID\n    // they all agree on). \n    // However, if we re-sort before doNext() is called, the order will be 5, 3,\n    // 2, 1, 5 and then doNext() will stop immediately, since the first scorer's\n    // docs equals the last one. So the invariant that after calling doNext() \n    // all scorers are on the same doc ID is broken.\n    if (doNext() == NO_MORE_DOCS) {\n      // The scorers did not agree on any document.\n      lastDoc = NO_MORE_DOCS;\n      return;\n    }\n\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end = scorers.length - 1;\n    int max = end >> 1;\n    for (int i = 0; i < max; i++) {\n      Scorer tmp = scorers[i];\n      int idx = end - i - 1;\n      scorers[i] = scorers[idx];\n      scorers[idx] = tmp;\n    }\n  }\n\n","sourceOld":"  public ConjunctionScorer(Similarity similarity, Scorer... scorers) throws IOException {\n    super(similarity);\n    this.scorers = scorers;\n    coord = similarity.coord(scorers.length, scorers.length);\n    \n    for (int i = 0; i < scorers.length; i++) {\n      if (scorers[i].nextDoc() == NO_MORE_DOCS) {\n        // If even one of the sub-scorers does not have any documents, this\n        // scorer should not attempt to do any more work.\n        lastDoc = NO_MORE_DOCS;\n        return;\n      }\n    }\n\n    // Sort the array the first time...\n    // We don't need to sort the array in any future calls because we know\n    // it will already start off sorted (all scorers on same doc).\n    \n    // Note that this comparator is not consistent with equals!\n    // Also we use mergeSort here to be stable (so order of Scoreres that\n    // match on first document keeps preserved):\n    ArrayUtil.mergeSort(scorers, new Comparator<Scorer>() { // sort the array\n      public int compare(Scorer o1, Scorer o2) {\n        return o1.docID() - o2.docID();\n      }\n    });\n\n    // NOTE: doNext() must be called before the re-sorting of the array later on.\n    // The reason is this: assume there are 5 scorers, whose first docs are 1,\n    // 2, 3, 5, 5 respectively. Sorting (above) leaves the array as is. Calling\n    // doNext() here advances all the first scorers to 5 (or a larger doc ID\n    // they all agree on). \n    // However, if we re-sort before doNext() is called, the order will be 5, 3,\n    // 2, 1, 5 and then doNext() will stop immediately, since the first scorer's\n    // docs equals the last one. So the invariant that after calling doNext() \n    // all scorers are on the same doc ID is broken.\n    if (doNext() == NO_MORE_DOCS) {\n      // The scorers did not agree on any document.\n      lastDoc = NO_MORE_DOCS;\n      return;\n    }\n\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end = scorers.length - 1;\n    int max = end >> 1;\n    for (int i = 0; i < max; i++) {\n      Scorer tmp = scorers[i];\n      int idx = end - i - 1;\n      scorers[i] = scorers[idx];\n      scorers[idx] = tmp;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(float,Scorer...).mjava","pathOld":"/dev/null","sourceNew":"  public ConjunctionScorer(float coord, Scorer... scorers) throws IOException {\n    super(null);\n    this.scorers = scorers;\n    this.coord = coord;\n    \n    for (int i = 0; i < scorers.length; i++) {\n      if (scorers[i].nextDoc() == NO_MORE_DOCS) {\n        // If even one of the sub-scorers does not have any documents, this\n        // scorer should not attempt to do any more work.\n        lastDoc = NO_MORE_DOCS;\n        return;\n      }\n    }\n\n    // Sort the array the first time...\n    // We don't need to sort the array in any future calls because we know\n    // it will already start off sorted (all scorers on same doc).\n    \n    // Note that this comparator is not consistent with equals!\n    // Also we use mergeSort here to be stable (so order of Scoreres that\n    // match on first document keeps preserved):\n    ArrayUtil.mergeSort(scorers, new Comparator<Scorer>() { // sort the array\n      public int compare(Scorer o1, Scorer o2) {\n        return o1.docID() - o2.docID();\n      }\n    });\n\n    // NOTE: doNext() must be called before the re-sorting of the array later on.\n    // The reason is this: assume there are 5 scorers, whose first docs are 1,\n    // 2, 3, 5, 5 respectively. Sorting (above) leaves the array as is. Calling\n    // doNext() here advances all the first scorers to 5 (or a larger doc ID\n    // they all agree on). \n    // However, if we re-sort before doNext() is called, the order will be 5, 3,\n    // 2, 1, 5 and then doNext() will stop immediately, since the first scorer's\n    // docs equals the last one. So the invariant that after calling doNext() \n    // all scorers are on the same doc ID is broken.\n    if (doNext() == NO_MORE_DOCS) {\n      // The scorers did not agree on any document.\n      lastDoc = NO_MORE_DOCS;\n      return;\n    }\n\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end = scorers.length - 1;\n    int max = end >> 1;\n    for (int i = 0; i < max; i++) {\n      Scorer tmp = scorers[i];\n      int idx = end - i - 1;\n      scorers[i] = scorers[idx];\n      scorers[idx] = tmp;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5e679b9c5f68f1f331de920ae8366af75b44060","date":1295555804,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,float,Scorer...).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(float,Scorer...).mjava","sourceNew":"  public ConjunctionScorer(Weight weight, float coord, Scorer... scorers) throws IOException {\n    super(weight);\n    this.scorers = scorers;\n    this.coord = coord;\n    \n    for (int i = 0; i < scorers.length; i++) {\n      if (scorers[i].nextDoc() == NO_MORE_DOCS) {\n        // If even one of the sub-scorers does not have any documents, this\n        // scorer should not attempt to do any more work.\n        lastDoc = NO_MORE_DOCS;\n        return;\n      }\n    }\n\n    // Sort the array the first time...\n    // We don't need to sort the array in any future calls because we know\n    // it will already start off sorted (all scorers on same doc).\n    \n    // Note that this comparator is not consistent with equals!\n    // Also we use mergeSort here to be stable (so order of Scoreres that\n    // match on first document keeps preserved):\n    ArrayUtil.mergeSort(scorers, new Comparator<Scorer>() { // sort the array\n      public int compare(Scorer o1, Scorer o2) {\n        return o1.docID() - o2.docID();\n      }\n    });\n\n    // NOTE: doNext() must be called before the re-sorting of the array later on.\n    // The reason is this: assume there are 5 scorers, whose first docs are 1,\n    // 2, 3, 5, 5 respectively. Sorting (above) leaves the array as is. Calling\n    // doNext() here advances all the first scorers to 5 (or a larger doc ID\n    // they all agree on). \n    // However, if we re-sort before doNext() is called, the order will be 5, 3,\n    // 2, 1, 5 and then doNext() will stop immediately, since the first scorer's\n    // docs equals the last one. So the invariant that after calling doNext() \n    // all scorers are on the same doc ID is broken.\n    if (doNext() == NO_MORE_DOCS) {\n      // The scorers did not agree on any document.\n      lastDoc = NO_MORE_DOCS;\n      return;\n    }\n\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end = scorers.length - 1;\n    int max = end >> 1;\n    for (int i = 0; i < max; i++) {\n      Scorer tmp = scorers[i];\n      int idx = end - i - 1;\n      scorers[i] = scorers[idx];\n      scorers[idx] = tmp;\n    }\n  }\n\n","sourceOld":"  public ConjunctionScorer(float coord, Scorer... scorers) throws IOException {\n    super(null);\n    this.scorers = scorers;\n    this.coord = coord;\n    \n    for (int i = 0; i < scorers.length; i++) {\n      if (scorers[i].nextDoc() == NO_MORE_DOCS) {\n        // If even one of the sub-scorers does not have any documents, this\n        // scorer should not attempt to do any more work.\n        lastDoc = NO_MORE_DOCS;\n        return;\n      }\n    }\n\n    // Sort the array the first time...\n    // We don't need to sort the array in any future calls because we know\n    // it will already start off sorted (all scorers on same doc).\n    \n    // Note that this comparator is not consistent with equals!\n    // Also we use mergeSort here to be stable (so order of Scoreres that\n    // match on first document keeps preserved):\n    ArrayUtil.mergeSort(scorers, new Comparator<Scorer>() { // sort the array\n      public int compare(Scorer o1, Scorer o2) {\n        return o1.docID() - o2.docID();\n      }\n    });\n\n    // NOTE: doNext() must be called before the re-sorting of the array later on.\n    // The reason is this: assume there are 5 scorers, whose first docs are 1,\n    // 2, 3, 5, 5 respectively. Sorting (above) leaves the array as is. Calling\n    // doNext() here advances all the first scorers to 5 (or a larger doc ID\n    // they all agree on). \n    // However, if we re-sort before doNext() is called, the order will be 5, 3,\n    // 2, 1, 5 and then doNext() will stop immediately, since the first scorer's\n    // docs equals the last one. So the invariant that after calling doNext() \n    // all scorers are on the same doc ID is broken.\n    if (doNext() == NO_MORE_DOCS) {\n      // The scorers did not agree on any document.\n      lastDoc = NO_MORE_DOCS;\n      return;\n    }\n\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end = scorers.length - 1;\n    int max = end >> 1;\n    for (int i = 0; i < max; i++) {\n      Scorer tmp = scorers[i];\n      int idx = end - i - 1;\n      scorers[i] = scorers[idx];\n      scorers[idx] = tmp;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,float,Scorer...).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(float,Scorer...).mjava","sourceNew":"  public ConjunctionScorer(Weight weight, float coord, Scorer... scorers) throws IOException {\n    super(weight);\n    this.scorers = scorers;\n    this.coord = coord;\n    \n    for (int i = 0; i < scorers.length; i++) {\n      if (scorers[i].nextDoc() == NO_MORE_DOCS) {\n        // If even one of the sub-scorers does not have any documents, this\n        // scorer should not attempt to do any more work.\n        lastDoc = NO_MORE_DOCS;\n        return;\n      }\n    }\n\n    // Sort the array the first time...\n    // We don't need to sort the array in any future calls because we know\n    // it will already start off sorted (all scorers on same doc).\n    \n    // Note that this comparator is not consistent with equals!\n    // Also we use mergeSort here to be stable (so order of Scoreres that\n    // match on first document keeps preserved):\n    ArrayUtil.mergeSort(scorers, new Comparator<Scorer>() { // sort the array\n      public int compare(Scorer o1, Scorer o2) {\n        return o1.docID() - o2.docID();\n      }\n    });\n\n    // NOTE: doNext() must be called before the re-sorting of the array later on.\n    // The reason is this: assume there are 5 scorers, whose first docs are 1,\n    // 2, 3, 5, 5 respectively. Sorting (above) leaves the array as is. Calling\n    // doNext() here advances all the first scorers to 5 (or a larger doc ID\n    // they all agree on). \n    // However, if we re-sort before doNext() is called, the order will be 5, 3,\n    // 2, 1, 5 and then doNext() will stop immediately, since the first scorer's\n    // docs equals the last one. So the invariant that after calling doNext() \n    // all scorers are on the same doc ID is broken.\n    if (doNext() == NO_MORE_DOCS) {\n      // The scorers did not agree on any document.\n      lastDoc = NO_MORE_DOCS;\n      return;\n    }\n\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end = scorers.length - 1;\n    int max = end >> 1;\n    for (int i = 0; i < max; i++) {\n      Scorer tmp = scorers[i];\n      int idx = end - i - 1;\n      scorers[i] = scorers[idx];\n      scorers[idx] = tmp;\n    }\n  }\n\n","sourceOld":"  public ConjunctionScorer(float coord, Scorer... scorers) throws IOException {\n    super(null);\n    this.scorers = scorers;\n    this.coord = coord;\n    \n    for (int i = 0; i < scorers.length; i++) {\n      if (scorers[i].nextDoc() == NO_MORE_DOCS) {\n        // If even one of the sub-scorers does not have any documents, this\n        // scorer should not attempt to do any more work.\n        lastDoc = NO_MORE_DOCS;\n        return;\n      }\n    }\n\n    // Sort the array the first time...\n    // We don't need to sort the array in any future calls because we know\n    // it will already start off sorted (all scorers on same doc).\n    \n    // Note that this comparator is not consistent with equals!\n    // Also we use mergeSort here to be stable (so order of Scoreres that\n    // match on first document keeps preserved):\n    ArrayUtil.mergeSort(scorers, new Comparator<Scorer>() { // sort the array\n      public int compare(Scorer o1, Scorer o2) {\n        return o1.docID() - o2.docID();\n      }\n    });\n\n    // NOTE: doNext() must be called before the re-sorting of the array later on.\n    // The reason is this: assume there are 5 scorers, whose first docs are 1,\n    // 2, 3, 5, 5 respectively. Sorting (above) leaves the array as is. Calling\n    // doNext() here advances all the first scorers to 5 (or a larger doc ID\n    // they all agree on). \n    // However, if we re-sort before doNext() is called, the order will be 5, 3,\n    // 2, 1, 5 and then doNext() will stop immediately, since the first scorer's\n    // docs equals the last one. So the invariant that after calling doNext() \n    // all scorers are on the same doc ID is broken.\n    if (doNext() == NO_MORE_DOCS) {\n      // The scorers did not agree on any document.\n      lastDoc = NO_MORE_DOCS;\n      return;\n    }\n\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end = scorers.length - 1;\n    int max = end >> 1;\n    for (int i = 0; i < max; i++) {\n      Scorer tmp = scorers[i];\n      int idx = end - i - 1;\n      scorers[i] = scorers[idx];\n      scorers[idx] = tmp;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e00f80591de714c6975f454e33e0fa5218b5902":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e5e679b9c5f68f1f331de920ae8366af75b44060":["3e00f80591de714c6975f454e33e0fa5218b5902"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e00f80591de714c6975f454e33e0fa5218b5902"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","e5e679b9c5f68f1f331de920ae8366af75b44060"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e5e679b9c5f68f1f331de920ae8366af75b44060"]},"commit2Childs":{"3e00f80591de714c6975f454e33e0fa5218b5902":["e5e679b9c5f68f1f331de920ae8366af75b44060","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e00f80591de714c6975f454e33e0fa5218b5902","868da859b43505d9d2a023bfeae6dd0c795f5295"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}