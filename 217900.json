{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#doRequest(HttpSolrServer,Req,Rsp,boolean,boolean,String).mjava","sourceNew":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isUpdate,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.rsp = client.request(req.getRequest());\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isUpdate && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isUpdate || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isUpdate) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isUpdate && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isUpdate && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","sourceOld":"  protected Exception doRequest(HttpSolrServer server, Req req, Rsp rsp, boolean isUpdate,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.rsp = server.request(req.getRequest());\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isUpdate && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(server, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isUpdate || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(server, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isUpdate) {\n        ex = (!isZombie) ? addZombie(server, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isUpdate && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(server, e) : e;\n      } else if (isUpdate && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(server, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","date":1425554964,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","sourceNew":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isUpdate,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.rsp = client.request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isUpdate && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isUpdate || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isUpdate) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isUpdate && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isUpdate && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","sourceOld":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isUpdate,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.rsp = client.request(req.getRequest());\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isUpdate && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isUpdate || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isUpdate) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isUpdate && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isUpdate && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","sourceNew":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isUpdate,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.rsp = client.request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isUpdate && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isUpdate || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isUpdate) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isUpdate && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isUpdate && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","sourceOld":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isUpdate,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.rsp = client.request(req.getRequest());\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isUpdate && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isUpdate || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isUpdate) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isUpdate && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isUpdate && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ef98d81d4d9ab6b358b8179f4f95181eaa0c803","date":1471597305,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","sourceNew":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isUpdate,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.server = client.getBaseURL();\n      rsp.rsp = client.request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isUpdate && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isUpdate || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isUpdate) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isUpdate && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isUpdate && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","sourceOld":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isUpdate,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.rsp = client.request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isUpdate && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isUpdate || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isUpdate) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isUpdate && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isUpdate && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","sourceNew":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isUpdate,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.server = client.getBaseURL();\n      rsp.rsp = client.request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isUpdate && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isUpdate || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isUpdate) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isUpdate && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isUpdate && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","sourceOld":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isUpdate,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.rsp = client.request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isUpdate && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isUpdate || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isUpdate) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isUpdate && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isUpdate && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5687aaac49dac0091f9d42a734eb5ec955377aad","date":1472269082,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","sourceNew":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isNonRetryable,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.server = client.getBaseURL();\n      rsp.rsp = client.request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isNonRetryable && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isNonRetryable || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isNonRetryable) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isNonRetryable && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isNonRetryable && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","sourceOld":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isUpdate,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.server = client.getBaseURL();\n      rsp.rsp = client.request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isUpdate && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isUpdate || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isUpdate) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isUpdate && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isUpdate && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","sourceNew":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isNonRetryable,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.server = client.getBaseURL();\n      rsp.rsp = client.request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isNonRetryable && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isNonRetryable || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isNonRetryable) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isNonRetryable && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isNonRetryable && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","sourceOld":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isUpdate,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.server = client.getBaseURL();\n      rsp.rsp = client.request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isUpdate && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isUpdate || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isUpdate) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isUpdate && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isUpdate && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","sourceNew":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isNonRetryable,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.server = client.getBaseURL();\n      rsp.rsp = client.request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isNonRetryable && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isNonRetryable || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isNonRetryable) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isNonRetryable && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isNonRetryable && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","sourceOld":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isUpdate,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.rsp = client.request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isUpdate && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isUpdate || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isUpdate) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isUpdate && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isUpdate && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4a9a892a743a560d17851cd4ce6cb0aaa2d8712","date":1498109521,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","sourceNew":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isNonRetryable,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.server = client.getBaseURL();\n      rsp.rsp = client.request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (RemoteExecutionException e){\n      throw e;\n    } catch(SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isNonRetryable && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isNonRetryable || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isNonRetryable) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isNonRetryable && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isNonRetryable && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","sourceOld":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isNonRetryable,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.server = client.getBaseURL();\n      rsp.rsp = client.request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isNonRetryable && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isNonRetryable || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isNonRetryable) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isNonRetryable && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isNonRetryable && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","sourceNew":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isNonRetryable,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.server = client.getBaseURL();\n      rsp.rsp = client.request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (RemoteExecutionException e){\n      throw e;\n    } catch(SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isNonRetryable && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isNonRetryable || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isNonRetryable) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isNonRetryable && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isNonRetryable && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","sourceOld":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isNonRetryable,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.server = client.getBaseURL();\n      rsp.rsp = client.request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isNonRetryable && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isNonRetryable || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isNonRetryable) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isNonRetryable && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isNonRetryable && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","sourceNew":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isNonRetryable,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.server = client.getBaseURL();\n      rsp.rsp = client.request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (RemoteExecutionException e){\n      throw e;\n    } catch(SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isNonRetryable && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isNonRetryable || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isNonRetryable) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isNonRetryable && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isNonRetryable && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","sourceOld":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isNonRetryable,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.server = client.getBaseURL();\n      rsp.rsp = client.request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isNonRetryable && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isNonRetryable || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isNonRetryable) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isNonRetryable && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isNonRetryable && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBSolrClient#doRequest(String,Req,Rsp,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","sourceNew":"  protected Exception doRequest(String baseUrl, Req req, Rsp rsp, boolean isNonRetryable,\n                                boolean isZombie) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.server = baseUrl;\n      req.getRequest().setBasePath(baseUrl);\n      rsp.rsp = getClient(baseUrl).request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(baseUrl);\n      }\n    } catch (HttpSolrClient.RemoteExecutionException e){\n      throw e;\n    } catch(SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isNonRetryable && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(baseUrl, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(baseUrl);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isNonRetryable || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(baseUrl, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isNonRetryable) {\n        ex = (!isZombie) ? addZombie(baseUrl, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isNonRetryable && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(baseUrl, e) : e;\n      } else if (isNonRetryable && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(baseUrl, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","sourceOld":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isNonRetryable,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.server = client.getBaseURL();\n      rsp.rsp = client.request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (RemoteExecutionException e){\n      throw e;\n    } catch(SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isNonRetryable && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isNonRetryable || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isNonRetryable) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isNonRetryable && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isNonRetryable && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","0ef98d81d4d9ab6b358b8179f4f95181eaa0c803"],"d4a9a892a743a560d17851cd4ce6cb0aaa2d8712":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","d4a9a892a743a560d17851cd4ce6cb0aaa2d8712"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","d4a9a892a743a560d17851cd4ce6cb0aaa2d8712"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["bafca15d8e408346a67f4282ad1143b88023893b","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5687aaac49dac0091f9d42a734eb5ec955377aad"],"5687aaac49dac0091f9d42a734eb5ec955377aad":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"0ef98d81d4d9ab6b358b8179f4f95181eaa0c803":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","5687aaac49dac0091f9d42a734eb5ec955377aad"],"d4a9a892a743a560d17851cd4ce6cb0aaa2d8712":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"bafca15d8e408346a67f4282ad1143b88023893b":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["403d05f7f8d69b65659157eff1bc1d2717f04c66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0ef98d81d4d9ab6b358b8179f4f95181eaa0c803"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d4a9a892a743a560d17851cd4ce6cb0aaa2d8712","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"5687aaac49dac0091f9d42a734eb5ec955377aad":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0ef98d81d4d9ab6b358b8179f4f95181eaa0c803":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}