{"path":"lucene/core/src/java/org/apache/lucene/codecs/pfor/ForFactory#createOutput(Directory,String,IOContext).mjava","commits":[{"id":"2c16b44289b3660573e653fe771c1528f4e2774f","date":1340208824,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pfor/ForFactory#createOutput(Directory,String,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context)  throws IOException {\n    IndexOutput out = dir.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      FixedIntBlockIndexOutput ret = new  ForIndexOutput(out, blockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        // TODO: why handle exception like this? \n        // and why not use similar codes for read part?\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2301fa236720884832352cb9af4034ae5d625596","date":1341424082,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pfor/ForFactory#createOutput(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/ForFactory#createOutput(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context)  throws IOException {\n    return new ForIndexOutput(dir.createOutput(fileName, context), blockSize);\n  }\n\n","sourceOld":"  @Override\n  public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context)  throws IOException {\n    IndexOutput out = dir.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      FixedIntBlockIndexOutput ret = new  ForIndexOutput(out, blockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        // TODO: why handle exception like this? \n        // and why not use similar codes for read part?\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdd8adf32d0827a5053ba81cbe9cd3cc1692944c","date":1341855025,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pfor/ForFactory#createOutput(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/ForFactory#createOutput(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context)  throws IOException {\n    boolean success = false;\n    IndexOutput out = dir.createOutput(fileName, context);\n    try {\n      IntIndexOutput ret = new ForIndexOutput(out, blockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context)  throws IOException {\n    return new ForIndexOutput(dir.createOutput(fileName, context), blockSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5373bc7574123da55ae25e216b6d768ccb1dcd91","date":1342013351,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pfor/ForFactory#createOutput(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/ForFactory#createOutput(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context)  throws IOException {\n    boolean success = false;\n    IndexOutput out = dir.createOutput(fileName, context);\n    try {\n      IntIndexOutput ret = new ForIndexOutput(out, blockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        // For some cases (e.g. disk full), the IntIndexOutput may not be \n        // properly created. So we should close those opened files. \n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context)  throws IOException {\n    boolean success = false;\n    IndexOutput out = dir.createOutput(fileName, context);\n    try {\n      IntIndexOutput ret = new ForIndexOutput(out, blockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5","date":1342443326,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pfor/ForFactory#createOutput(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/ForFactory#createOutput(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context)  throws IOException {\n    boolean success = false;\n    IndexOutput out = dir.createOutput(fileName, context);\n    try {\n      IntIndexOutput ret = new ForIndexOutput(out);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        // For some cases (e.g. disk full), the IntIndexOutput may not be \n        // properly created. So we should close those opened files. \n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context)  throws IOException {\n    boolean success = false;\n    IndexOutput out = dir.createOutput(fileName, context);\n    try {\n      IntIndexOutput ret = new ForIndexOutput(out, blockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        // For some cases (e.g. disk full), the IntIndexOutput may not be \n        // properly created. So we should close those opened files. \n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/ForFactory#createOutput(Directory,String,IOContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context)  throws IOException {\n    boolean success = false;\n    IndexOutput out = dir.createOutput(fileName, context);\n    try {\n      IntIndexOutput ret = new ForIndexOutput(out);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        // For some cases (e.g. disk full), the IntIndexOutput may not be \n        // properly created. So we should close those opened files. \n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2301fa236720884832352cb9af4034ae5d625596":["2c16b44289b3660573e653fe771c1528f4e2774f"],"2c16b44289b3660573e653fe771c1528f4e2774f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5"],"5373bc7574123da55ae25e216b6d768ccb1dcd91":["bdd8adf32d0827a5053ba81cbe9cd3cc1692944c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5":["5373bc7574123da55ae25e216b6d768ccb1dcd91"],"bdd8adf32d0827a5053ba81cbe9cd3cc1692944c":["2301fa236720884832352cb9af4034ae5d625596"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2301fa236720884832352cb9af4034ae5d625596":["bdd8adf32d0827a5053ba81cbe9cd3cc1692944c"],"2c16b44289b3660573e653fe771c1528f4e2774f":["2301fa236720884832352cb9af4034ae5d625596"],"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":[],"5373bc7574123da55ae25e216b6d768ccb1dcd91":["a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c16b44289b3660573e653fe771c1528f4e2774f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"bdd8adf32d0827a5053ba81cbe9cd3cc1692944c":["5373bc7574123da55ae25e216b6d768ccb1dcd91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}