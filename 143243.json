{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#addFacets(Document,FacetFields,boolean).mjava","commits":[{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#addFacets(Document,FacetFields,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static void addFacets(Document doc, FacetFields facetFields, boolean updateTermExpectedCounts) \n      throws IOException {\n    List<CategoryPath> docCategories = randomCategories(random());\n    for (CategoryPath cp : docCategories) {\n      allExpectedCounts.put(cp, allExpectedCounts.get(cp) + 1);\n      if (updateTermExpectedCounts) {\n        termExpectedCounts.put(cp, termExpectedCounts.get(cp) + 1);\n      }\n    }\n    // add 1 to each dimension\n    allExpectedCounts.put(CP_A, allExpectedCounts.get(CP_A) + 1);\n    allExpectedCounts.put(CP_B, allExpectedCounts.get(CP_B) + 1);\n    if (updateTermExpectedCounts) {\n      termExpectedCounts.put(CP_A, termExpectedCounts.get(CP_A) + 1);\n      termExpectedCounts.put(CP_B, termExpectedCounts.get(CP_B) + 1);\n    }\n    \n    facetFields.addFields(doc, docCategories);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#addFacets(Document,FacetFields,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static void addFacets(Document doc, FacetFields facetFields, boolean updateTermExpectedCounts) \n      throws IOException {\n    List<CategoryPath> docCategories = randomCategories(random());\n    for (CategoryPath cp : docCategories) {\n      allExpectedCounts.put(cp, allExpectedCounts.get(cp) + 1);\n      if (updateTermExpectedCounts) {\n        termExpectedCounts.put(cp, termExpectedCounts.get(cp) + 1);\n      }\n    }\n    // add 1 to each dimension\n    allExpectedCounts.put(CP_A, allExpectedCounts.get(CP_A) + 1);\n    allExpectedCounts.put(CP_B, allExpectedCounts.get(CP_B) + 1);\n    if (updateTermExpectedCounts) {\n      termExpectedCounts.put(CP_A, termExpectedCounts.get(CP_A) + 1);\n      termExpectedCounts.put(CP_B, termExpectedCounts.get(CP_B) + 1);\n    }\n    \n    facetFields.addFields(doc, docCategories);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc0a6cdc2cfb2407dce68d524fb63993c0209a2d","date":1359020450,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#addFacets(Document,FacetFields,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#addFacets(Document,FacetFields,boolean).mjava","sourceNew":"  private static void addFacets(Document doc, FacetFields facetFields, boolean updateTermExpectedCounts) \n      throws IOException {\n    List<CategoryPath> docCategories = randomCategories(random());\n    for (CategoryPath cp : docCategories) {\n      if (cp.components[0].equals(CP_D.components[0])) {\n        cp = cp.subpath(2); // we'll get counts for the 2nd level only\n      }\n      allExpectedCounts.put(cp, allExpectedCounts.get(cp) + 1);\n      if (updateTermExpectedCounts) {\n        termExpectedCounts.put(cp, termExpectedCounts.get(cp) + 1);\n      }\n    }\n    // add 1 to each dimension\n    allExpectedCounts.put(CP_A, allExpectedCounts.get(CP_A) + 1);\n    allExpectedCounts.put(CP_B, allExpectedCounts.get(CP_B) + 1);\n    allExpectedCounts.put(CP_C, allExpectedCounts.get(CP_C) + 1);\n    allExpectedCounts.put(CP_D, allExpectedCounts.get(CP_D) + 1);\n    if (updateTermExpectedCounts) {\n      termExpectedCounts.put(CP_A, termExpectedCounts.get(CP_A) + 1);\n      termExpectedCounts.put(CP_B, termExpectedCounts.get(CP_B) + 1);\n      termExpectedCounts.put(CP_C, termExpectedCounts.get(CP_C) + 1);\n      termExpectedCounts.put(CP_D, termExpectedCounts.get(CP_D) + 1);\n    }\n    \n    facetFields.addFields(doc, docCategories);\n  }\n\n","sourceOld":"  private static void addFacets(Document doc, FacetFields facetFields, boolean updateTermExpectedCounts) \n      throws IOException {\n    List<CategoryPath> docCategories = randomCategories(random());\n    for (CategoryPath cp : docCategories) {\n      allExpectedCounts.put(cp, allExpectedCounts.get(cp) + 1);\n      if (updateTermExpectedCounts) {\n        termExpectedCounts.put(cp, termExpectedCounts.get(cp) + 1);\n      }\n    }\n    // add 1 to each dimension\n    allExpectedCounts.put(CP_A, allExpectedCounts.get(CP_A) + 1);\n    allExpectedCounts.put(CP_B, allExpectedCounts.get(CP_B) + 1);\n    if (updateTermExpectedCounts) {\n      termExpectedCounts.put(CP_A, termExpectedCounts.get(CP_A) + 1);\n      termExpectedCounts.put(CP_B, termExpectedCounts.get(CP_B) + 1);\n    }\n    \n    facetFields.addFields(doc, docCategories);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d5244a676b83c2d551c3746e8181588ba619e1","date":1359031414,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#addFacets(Document,FacetFields,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#addFacets(Document,FacetFields,boolean).mjava","sourceNew":"  private static void addFacets(Document doc, FacetFields facetFields, boolean updateTermExpectedCounts) \n      throws IOException {\n    List<CategoryPath> docCategories = randomCategories(random());\n    for (CategoryPath cp : docCategories) {\n      if (cp.components[0].equals(CP_D.components[0])) {\n        cp = cp.subpath(2); // we'll get counts for the 2nd level only\n      }\n      allExpectedCounts.put(cp, allExpectedCounts.get(cp) + 1);\n      if (updateTermExpectedCounts) {\n        termExpectedCounts.put(cp, termExpectedCounts.get(cp) + 1);\n      }\n    }\n    // add 1 to each dimension\n    allExpectedCounts.put(CP_A, allExpectedCounts.get(CP_A) + 1);\n    allExpectedCounts.put(CP_B, allExpectedCounts.get(CP_B) + 1);\n    allExpectedCounts.put(CP_C, allExpectedCounts.get(CP_C) + 1);\n    allExpectedCounts.put(CP_D, allExpectedCounts.get(CP_D) + 1);\n    if (updateTermExpectedCounts) {\n      termExpectedCounts.put(CP_A, termExpectedCounts.get(CP_A) + 1);\n      termExpectedCounts.put(CP_B, termExpectedCounts.get(CP_B) + 1);\n      termExpectedCounts.put(CP_C, termExpectedCounts.get(CP_C) + 1);\n      termExpectedCounts.put(CP_D, termExpectedCounts.get(CP_D) + 1);\n    }\n    \n    facetFields.addFields(doc, docCategories);\n  }\n\n","sourceOld":"  private static void addFacets(Document doc, FacetFields facetFields, boolean updateTermExpectedCounts) \n      throws IOException {\n    List<CategoryPath> docCategories = randomCategories(random());\n    for (CategoryPath cp : docCategories) {\n      allExpectedCounts.put(cp, allExpectedCounts.get(cp) + 1);\n      if (updateTermExpectedCounts) {\n        termExpectedCounts.put(cp, termExpectedCounts.get(cp) + 1);\n      }\n    }\n    // add 1 to each dimension\n    allExpectedCounts.put(CP_A, allExpectedCounts.get(CP_A) + 1);\n    allExpectedCounts.put(CP_B, allExpectedCounts.get(CP_B) + 1);\n    if (updateTermExpectedCounts) {\n      termExpectedCounts.put(CP_A, termExpectedCounts.get(CP_A) + 1);\n      termExpectedCounts.put(CP_B, termExpectedCounts.get(CP_B) + 1);\n    }\n    \n    facetFields.addFields(doc, docCategories);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"239f79ed06f0979cfe1911ec5fba32b94fda43c1","date":1359553898,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#addFacets(Document,FacetFields,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#addFacets(Document,FacetFields,boolean).mjava","sourceNew":"  private static void addFacets(Document doc, FacetFields facetFields, boolean updateTermExpectedCounts) \n      throws IOException {\n    List<CategoryPath> docCategories = randomCategories(random());\n    for (CategoryPath cp : docCategories) {\n      if (cp.components[0].equals(CP_D.components[0])) {\n        cp = cp.subpath(2); // we'll get counts for the 2nd level only\n      }\n      allExpectedCounts.put(cp, allExpectedCounts.get(cp) + 1);\n      if (updateTermExpectedCounts) {\n        termExpectedCounts.put(cp, termExpectedCounts.get(cp) + 1);\n      }\n    }\n    // add 1 to each NO_PARENTS dimension\n    allExpectedCounts.put(CP_B, allExpectedCounts.get(CP_B) + 1);\n    allExpectedCounts.put(CP_C, allExpectedCounts.get(CP_C) + 1);\n    allExpectedCounts.put(CP_D, allExpectedCounts.get(CP_D) + 1);\n    if (updateTermExpectedCounts) {\n      termExpectedCounts.put(CP_B, termExpectedCounts.get(CP_B) + 1);\n      termExpectedCounts.put(CP_C, termExpectedCounts.get(CP_C) + 1);\n      termExpectedCounts.put(CP_D, termExpectedCounts.get(CP_D) + 1);\n    }\n    \n    facetFields.addFields(doc, docCategories);\n  }\n\n","sourceOld":"  private static void addFacets(Document doc, FacetFields facetFields, boolean updateTermExpectedCounts) \n      throws IOException {\n    List<CategoryPath> docCategories = randomCategories(random());\n    for (CategoryPath cp : docCategories) {\n      if (cp.components[0].equals(CP_D.components[0])) {\n        cp = cp.subpath(2); // we'll get counts for the 2nd level only\n      }\n      allExpectedCounts.put(cp, allExpectedCounts.get(cp) + 1);\n      if (updateTermExpectedCounts) {\n        termExpectedCounts.put(cp, termExpectedCounts.get(cp) + 1);\n      }\n    }\n    // add 1 to each dimension\n    allExpectedCounts.put(CP_A, allExpectedCounts.get(CP_A) + 1);\n    allExpectedCounts.put(CP_B, allExpectedCounts.get(CP_B) + 1);\n    allExpectedCounts.put(CP_C, allExpectedCounts.get(CP_C) + 1);\n    allExpectedCounts.put(CP_D, allExpectedCounts.get(CP_D) + 1);\n    if (updateTermExpectedCounts) {\n      termExpectedCounts.put(CP_A, termExpectedCounts.get(CP_A) + 1);\n      termExpectedCounts.put(CP_B, termExpectedCounts.get(CP_B) + 1);\n      termExpectedCounts.put(CP_C, termExpectedCounts.get(CP_C) + 1);\n      termExpectedCounts.put(CP_D, termExpectedCounts.get(CP_D) + 1);\n    }\n    \n    facetFields.addFields(doc, docCategories);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#addFacets(Document,FacetFields,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#addFacets(Document,FacetFields,boolean).mjava","sourceNew":"  private static void addFacets(Document doc, FacetFields facetFields, boolean updateTermExpectedCounts) \n      throws IOException {\n    List<CategoryPath> docCategories = randomCategories(random());\n    for (CategoryPath cp : docCategories) {\n      if (cp.components[0].equals(CP_D.components[0])) {\n        cp = cp.subpath(2); // we'll get counts for the 2nd level only\n      }\n      allExpectedCounts.put(cp, allExpectedCounts.get(cp) + 1);\n      if (updateTermExpectedCounts) {\n        termExpectedCounts.put(cp, termExpectedCounts.get(cp) + 1);\n      }\n    }\n    // add 1 to each NO_PARENTS dimension\n    allExpectedCounts.put(CP_B, allExpectedCounts.get(CP_B) + 1);\n    allExpectedCounts.put(CP_C, allExpectedCounts.get(CP_C) + 1);\n    allExpectedCounts.put(CP_D, allExpectedCounts.get(CP_D) + 1);\n    if (updateTermExpectedCounts) {\n      termExpectedCounts.put(CP_B, termExpectedCounts.get(CP_B) + 1);\n      termExpectedCounts.put(CP_C, termExpectedCounts.get(CP_C) + 1);\n      termExpectedCounts.put(CP_D, termExpectedCounts.get(CP_D) + 1);\n    }\n    \n    facetFields.addFields(doc, docCategories);\n  }\n\n","sourceOld":"  private static void addFacets(Document doc, FacetFields facetFields, boolean updateTermExpectedCounts) \n      throws IOException {\n    List<CategoryPath> docCategories = randomCategories(random());\n    for (CategoryPath cp : docCategories) {\n      if (cp.components[0].equals(CP_D.components[0])) {\n        cp = cp.subpath(2); // we'll get counts for the 2nd level only\n      }\n      allExpectedCounts.put(cp, allExpectedCounts.get(cp) + 1);\n      if (updateTermExpectedCounts) {\n        termExpectedCounts.put(cp, termExpectedCounts.get(cp) + 1);\n      }\n    }\n    // add 1 to each dimension\n    allExpectedCounts.put(CP_A, allExpectedCounts.get(CP_A) + 1);\n    allExpectedCounts.put(CP_B, allExpectedCounts.get(CP_B) + 1);\n    allExpectedCounts.put(CP_C, allExpectedCounts.get(CP_C) + 1);\n    allExpectedCounts.put(CP_D, allExpectedCounts.get(CP_D) + 1);\n    if (updateTermExpectedCounts) {\n      termExpectedCounts.put(CP_A, termExpectedCounts.get(CP_A) + 1);\n      termExpectedCounts.put(CP_B, termExpectedCounts.get(CP_B) + 1);\n      termExpectedCounts.put(CP_C, termExpectedCounts.get(CP_C) + 1);\n      termExpectedCounts.put(CP_D, termExpectedCounts.get(CP_D) + 1);\n    }\n    \n    facetFields.addFields(doc, docCategories);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#addFacets(Document,FacetFields,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#addFacets(Document,FacetFields,boolean).mjava","sourceNew":"  private static void addFacets(Document doc, FacetFields facetFields, boolean updateTermExpectedCounts) \n      throws IOException {\n    List<CategoryPath> docCategories = randomCategories(random());\n    for (CategoryPath cp : docCategories) {\n      if (cp.components[0].equals(CP_D.components[0])) {\n        cp = cp.subpath(2); // we'll get counts for the 2nd level only\n      }\n      allExpectedCounts.put(cp, allExpectedCounts.get(cp) + 1);\n      if (updateTermExpectedCounts) {\n        termExpectedCounts.put(cp, termExpectedCounts.get(cp) + 1);\n      }\n    }\n    // add 1 to each NO_PARENTS dimension\n    allExpectedCounts.put(CP_B, allExpectedCounts.get(CP_B) + 1);\n    allExpectedCounts.put(CP_C, allExpectedCounts.get(CP_C) + 1);\n    allExpectedCounts.put(CP_D, allExpectedCounts.get(CP_D) + 1);\n    if (updateTermExpectedCounts) {\n      termExpectedCounts.put(CP_B, termExpectedCounts.get(CP_B) + 1);\n      termExpectedCounts.put(CP_C, termExpectedCounts.get(CP_C) + 1);\n      termExpectedCounts.put(CP_D, termExpectedCounts.get(CP_D) + 1);\n    }\n    \n    facetFields.addFields(doc, docCategories);\n  }\n\n","sourceOld":"  private static void addFacets(Document doc, FacetFields facetFields, boolean updateTermExpectedCounts) \n      throws IOException {\n    List<CategoryPath> docCategories = randomCategories(random());\n    for (CategoryPath cp : docCategories) {\n      if (cp.components[0].equals(CP_D.components[0])) {\n        cp = cp.subpath(2); // we'll get counts for the 2nd level only\n      }\n      allExpectedCounts.put(cp, allExpectedCounts.get(cp) + 1);\n      if (updateTermExpectedCounts) {\n        termExpectedCounts.put(cp, termExpectedCounts.get(cp) + 1);\n      }\n    }\n    // add 1 to each NO_PARENTS dimension\n    allExpectedCounts.put(CP_B, allExpectedCounts.get(CP_B) + 1);\n    allExpectedCounts.put(CP_C, allExpectedCounts.get(CP_C) + 1);\n    allExpectedCounts.put(CP_D, allExpectedCounts.get(CP_D) + 1);\n    if (updateTermExpectedCounts) {\n      termExpectedCounts.put(CP_B, termExpectedCounts.get(CP_B) + 1);\n      termExpectedCounts.put(CP_C, termExpectedCounts.get(CP_C) + 1);\n      termExpectedCounts.put(CP_D, termExpectedCounts.get(CP_D) + 1);\n    }\n    \n    facetFields.addFields(doc, docCategories);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61d5f95d14e5b9b046998c51e16709a398c15226":["b2d5244a676b83c2d551c3746e8181588ba619e1","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"cc0a6cdc2cfb2407dce68d524fb63993c0209a2d":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["cc0a6cdc2cfb2407dce68d524fb63993c0209a2d"],"07155cdd910937cdf6877e48884d5782845c8b8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["07155cdd910937cdf6877e48884d5782845c8b8b","cc0a6cdc2cfb2407dce68d524fb63993c0209a2d"]},"commit2Childs":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["cc0a6cdc2cfb2407dce68d524fb63993c0209a2d","07155cdd910937cdf6877e48884d5782845c8b8b"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"cc0a6cdc2cfb2407dce68d524fb63993c0209a2d":["239f79ed06f0979cfe1911ec5fba32b94fda43c1","b2d5244a676b83c2d551c3746e8181588ba619e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","07155cdd910937cdf6877e48884d5782845c8b8b"],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["61d5f95d14e5b9b046998c51e16709a398c15226","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"07155cdd910937cdf6877e48884d5782845c8b8b":["b2d5244a676b83c2d551c3746e8181588ba619e1"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["61d5f95d14e5b9b046998c51e16709a398c15226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}