{"path":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#sendNonDirectUpdateRequestReplica(Replica,UpdateRequest,int,String).mjava","commits":[{"id":"9d22d0f5940f155267b250876fa797ff69e8e6e7","date":1400540695,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#sendNonDirectUpdateRequestReplica(Replica,UpdateRequest,int,String).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  protected void sendNonDirectUpdateRequestReplica(Replica replica, UpdateRequest up, int expectedRf, String collection) throws Exception {\n    HttpSolrServer solrServer = null;\n    try {\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(replica);\n      String url = zkProps.getBaseUrl() + \"/\" + collection;\n      solrServer = new HttpSolrServer(url);    \n            \n      NamedList resp = solrServer.request(up);\n      NamedList hdr = (NamedList) resp.get(\"responseHeader\");\n      Integer batchRf = (Integer)hdr.get(UpdateRequest.REPFACT);\n      assertTrue(\"Expected rf=\"+expectedRf+\" for batch but got \"+batchRf, batchRf == expectedRf);      \n    } finally {\n      if (solrServer != null)\n        solrServer.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3caf472b0a0fa2bad9079962e59f83162aeec919","date":1400698619,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#sendNonDirectUpdateRequestReplica(Replica,UpdateRequest,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#sendNonDirectUpdateRequestReplica(Replica,UpdateRequest,int,String).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  protected void sendNonDirectUpdateRequestReplica(Replica replica, UpdateRequest up, int expectedRf, String collection) throws Exception {\n    HttpSolrServer solrServer = null;\n    try {\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(replica);\n      String url = zkProps.getBaseUrl() + \"/\" + collection;\n      solrServer = new HttpSolrServer(url);    \n            \n      NamedList resp = solrServer.request(up);\n      NamedList hdr = (NamedList) resp.get(\"responseHeader\");\n      Integer batchRf = (Integer)hdr.get(UpdateRequest.REPFACT);\n      assertTrue(\"Expected rf=\"+expectedRf+\" for batch but got \"+\n        batchRf+\"; clusterState: \"+printClusterStateInfo(), batchRf == expectedRf);      \n    } finally {\n      if (solrServer != null)\n        solrServer.shutdown();\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  protected void sendNonDirectUpdateRequestReplica(Replica replica, UpdateRequest up, int expectedRf, String collection) throws Exception {\n    HttpSolrServer solrServer = null;\n    try {\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(replica);\n      String url = zkProps.getBaseUrl() + \"/\" + collection;\n      solrServer = new HttpSolrServer(url);    \n            \n      NamedList resp = solrServer.request(up);\n      NamedList hdr = (NamedList) resp.get(\"responseHeader\");\n      Integer batchRf = (Integer)hdr.get(UpdateRequest.REPFACT);\n      assertTrue(\"Expected rf=\"+expectedRf+\" for batch but got \"+batchRf, batchRf == expectedRf);      \n    } finally {\n      if (solrServer != null)\n        solrServer.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#sendNonDirectUpdateRequestReplica(Replica,UpdateRequest,int,String).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  protected void sendNonDirectUpdateRequestReplica(Replica replica, UpdateRequest up, int expectedRf, String collection) throws Exception {\n    HttpSolrServer solrServer = null;\n    try {\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(replica);\n      String url = zkProps.getBaseUrl() + \"/\" + collection;\n      solrServer = new HttpSolrServer(url);    \n            \n      NamedList resp = solrServer.request(up);\n      NamedList hdr = (NamedList) resp.get(\"responseHeader\");\n      Integer batchRf = (Integer)hdr.get(UpdateRequest.REPFACT);\n      assertTrue(\"Expected rf=\"+expectedRf+\" for batch but got \"+\n        batchRf+\"; clusterState: \"+printClusterStateInfo(), batchRf == expectedRf);      \n    } finally {\n      if (solrServer != null)\n        solrServer.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#sendNonDirectUpdateRequestReplica(Replica,UpdateRequest,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#sendNonDirectUpdateRequestReplica(Replica,UpdateRequest,int,String).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  protected void sendNonDirectUpdateRequestReplica(Replica replica, UpdateRequest up, int expectedRf, String collection) throws Exception {\n    HttpSolrClient solrServer = null;\n    try {\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(replica);\n      String url = zkProps.getBaseUrl() + \"/\" + collection;\n      solrServer = new HttpSolrClient(url);\n            \n      NamedList resp = solrServer.request(up);\n      NamedList hdr = (NamedList) resp.get(\"responseHeader\");\n      Integer batchRf = (Integer)hdr.get(UpdateRequest.REPFACT);\n      assertTrue(\"Expected rf=\"+expectedRf+\" for batch but got \"+\n        batchRf+\"; clusterState: \"+printClusterStateInfo(), batchRf == expectedRf);      \n    } finally {\n      if (solrServer != null)\n        solrServer.shutdown();\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  protected void sendNonDirectUpdateRequestReplica(Replica replica, UpdateRequest up, int expectedRf, String collection) throws Exception {\n    HttpSolrServer solrServer = null;\n    try {\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(replica);\n      String url = zkProps.getBaseUrl() + \"/\" + collection;\n      solrServer = new HttpSolrServer(url);    \n            \n      NamedList resp = solrServer.request(up);\n      NamedList hdr = (NamedList) resp.get(\"responseHeader\");\n      Integer batchRf = (Integer)hdr.get(UpdateRequest.REPFACT);\n      assertTrue(\"Expected rf=\"+expectedRf+\" for batch but got \"+\n        batchRf+\"; clusterState: \"+printClusterStateInfo(), batchRf == expectedRf);      \n    } finally {\n      if (solrServer != null)\n        solrServer.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#sendNonDirectUpdateRequestReplica(Replica,UpdateRequest,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#sendNonDirectUpdateRequestReplica(Replica,UpdateRequest,int,String).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  protected void sendNonDirectUpdateRequestReplica(Replica replica, UpdateRequest up, int expectedRf, String collection) throws Exception {\n\n    ZkCoreNodeProps zkProps = new ZkCoreNodeProps(replica);\n    String url = zkProps.getBaseUrl() + \"/\" + collection;\n\n    try (HttpSolrClient solrServer = new HttpSolrClient(url)) {\n      NamedList resp = solrServer.request(up);\n      NamedList hdr = (NamedList) resp.get(\"responseHeader\");\n      Integer batchRf = (Integer)hdr.get(UpdateRequest.REPFACT);\n      assertTrue(\"Expected rf=\"+expectedRf+\" for batch but got \"+\n        batchRf+\"; clusterState: \"+printClusterStateInfo(), batchRf == expectedRf);      \n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  protected void sendNonDirectUpdateRequestReplica(Replica replica, UpdateRequest up, int expectedRf, String collection) throws Exception {\n    HttpSolrClient solrServer = null;\n    try {\n      ZkCoreNodeProps zkProps = new ZkCoreNodeProps(replica);\n      String url = zkProps.getBaseUrl() + \"/\" + collection;\n      solrServer = new HttpSolrClient(url);\n            \n      NamedList resp = solrServer.request(up);\n      NamedList hdr = (NamedList) resp.get(\"responseHeader\");\n      Integer batchRf = (Integer)hdr.get(UpdateRequest.REPFACT);\n      assertTrue(\"Expected rf=\"+expectedRf+\" for batch but got \"+\n        batchRf+\"; clusterState: \"+printClusterStateInfo(), batchRf == expectedRf);      \n    } finally {\n      if (solrServer != null)\n        solrServer.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#sendNonDirectUpdateRequestReplica(Replica,UpdateRequest,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#sendNonDirectUpdateRequestReplica(Replica,UpdateRequest,int,String).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  protected void sendNonDirectUpdateRequestReplica(Replica replica, UpdateRequest up, int expectedRf, String collection) throws Exception {\n\n    ZkCoreNodeProps zkProps = new ZkCoreNodeProps(replica);\n    String url = zkProps.getBaseUrl() + \"/\" + collection;\n\n    try (HttpSolrClient solrServer = getHttpSolrClient(url)) {\n      NamedList resp = solrServer.request(up);\n      NamedList hdr = (NamedList) resp.get(\"responseHeader\");\n      Integer batchRf = (Integer)hdr.get(UpdateRequest.REPFACT);\n      assertTrue(\"Expected rf=\"+expectedRf+\" for batch but got \"+\n        batchRf+\"; clusterState: \"+printClusterStateInfo(), batchRf == expectedRf);      \n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  protected void sendNonDirectUpdateRequestReplica(Replica replica, UpdateRequest up, int expectedRf, String collection) throws Exception {\n\n    ZkCoreNodeProps zkProps = new ZkCoreNodeProps(replica);\n    String url = zkProps.getBaseUrl() + \"/\" + collection;\n\n    try (HttpSolrClient solrServer = new HttpSolrClient(url)) {\n      NamedList resp = solrServer.request(up);\n      NamedList hdr = (NamedList) resp.get(\"responseHeader\");\n      Integer batchRf = (Integer)hdr.get(UpdateRequest.REPFACT);\n      assertTrue(\"Expected rf=\"+expectedRf+\" for batch but got \"+\n        batchRf+\"; clusterState: \"+printClusterStateInfo(), batchRf == expectedRf);      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#sendNonDirectUpdateRequestReplica(Replica,UpdateRequest,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#sendNonDirectUpdateRequestReplica(Replica,UpdateRequest,int,String).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  protected void sendNonDirectUpdateRequestReplica(Replica replica, UpdateRequest up, int expectedRf, String collection) throws Exception {\n\n    ZkCoreNodeProps zkProps = new ZkCoreNodeProps(replica);\n    String url = zkProps.getBaseUrl() + \"/\" + collection;\n\n    try (HttpSolrClient solrServer = getHttpSolrClient(url)) {\n      NamedList resp = solrServer.request(up);\n      NamedList hdr = (NamedList) resp.get(\"responseHeader\");\n      Integer batchRf = (Integer)hdr.get(UpdateRequest.REPFACT);\n      assertTrue(\"Expected rf=\"+expectedRf+\" for batch but got \"+\n        batchRf+\"; clusterState: \"+printClusterStateInfo(), batchRf == expectedRf);      \n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  protected void sendNonDirectUpdateRequestReplica(Replica replica, UpdateRequest up, int expectedRf, String collection) throws Exception {\n\n    ZkCoreNodeProps zkProps = new ZkCoreNodeProps(replica);\n    String url = zkProps.getBaseUrl() + \"/\" + collection;\n\n    try (HttpSolrClient solrServer = new HttpSolrClient(url)) {\n      NamedList resp = solrServer.request(up);\n      NamedList hdr = (NamedList) resp.get(\"responseHeader\");\n      Integer batchRf = (Integer)hdr.get(UpdateRequest.REPFACT);\n      assertTrue(\"Expected rf=\"+expectedRf+\" for batch but got \"+\n        batchRf+\"; clusterState: \"+printClusterStateInfo(), batchRf == expectedRf);      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615bf5b56d95ed8c9bf06a402db6c817d6bff21a","date":1509492118,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#sendNonDirectUpdateRequestReplica(Replica,UpdateRequest,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#sendNonDirectUpdateRequestReplica(Replica,UpdateRequest,int,String).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  protected void sendNonDirectUpdateRequestReplica(Replica replica, UpdateRequest up, int expectedRf, String collection) throws Exception {\n    ZkCoreNodeProps zkProps = new ZkCoreNodeProps(replica);\n    String url = zkProps.getBaseUrl() + \"/\" + collection;\n    try (HttpSolrClient solrServer = getHttpSolrClient(url)) {\n      NamedList resp = solrServer.request(up);\n      NamedList hdr = (NamedList) resp.get(\"responseHeader\");\n      Integer batchRf = (Integer)hdr.get(UpdateRequest.REPFACT);\n      // Note that this also tests if we're wonky and return an achieved rf greater than the number of live replicas.\n      assertTrue(\"Expected rf=\"+expectedRf+\" for batch but got \"+\n          batchRf + \"; clusterState: \" + printClusterStateInfo(), batchRf == expectedRf);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  protected void sendNonDirectUpdateRequestReplica(Replica replica, UpdateRequest up, int expectedRf, String collection) throws Exception {\n\n    ZkCoreNodeProps zkProps = new ZkCoreNodeProps(replica);\n    String url = zkProps.getBaseUrl() + \"/\" + collection;\n\n    try (HttpSolrClient solrServer = getHttpSolrClient(url)) {\n      NamedList resp = solrServer.request(up);\n      NamedList hdr = (NamedList) resp.get(\"responseHeader\");\n      Integer batchRf = (Integer)hdr.get(UpdateRequest.REPFACT);\n      assertTrue(\"Expected rf=\"+expectedRf+\" for batch but got \"+\n        batchRf+\"; clusterState: \"+printClusterStateInfo(), batchRf == expectedRf);      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43f5f8344e80b4bfb2069917069430266753d2f0","date":1538584815,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#sendNonDirectUpdateRequestReplica(Replica,UpdateRequest,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest#sendNonDirectUpdateRequestReplica(Replica,UpdateRequest,int,String).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  protected void sendNonDirectUpdateRequestReplica(Replica replica, UpdateRequest up, int expectedRf, String collection) throws Exception {\n    ZkCoreNodeProps zkProps = new ZkCoreNodeProps(replica);\n    String url = zkProps.getBaseUrl() + \"/\" + collection;\n    try (HttpSolrClient solrServer = getHttpSolrClient(url)) {\n      NamedList resp = solrServer.request(up);\n      NamedList hdr = (NamedList) resp.get(\"responseHeader\");\n      Integer batchRf = (Integer)hdr.get(UpdateRequest.REPFACT);\n      // Note that this also tests if we're wonky and return an achieved rf greater than the number of live replicas.\n      assertTrue(\"Expected rf=\"+expectedRf+\" for batch but got \"+\n          batchRf + \"; clusterState: \" + printClusterStateInfo(), batchRf == expectedRf);\n      if (up.getParams() != null && up.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        // If \"min_rf\" was specified in the request, it must be in the response for back compatibility\n        assertNotNull(\"Expecting min_rf to be in the response, since it was explicitly set in the request\", hdr.get(UpdateRequest.MIN_REPFACT));\n        assertEquals(\"Unexpected min_rf in the response\",\n            Integer.parseInt(up.getParams().get(UpdateRequest.MIN_REPFACT)), hdr.get(UpdateRequest.MIN_REPFACT));\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  protected void sendNonDirectUpdateRequestReplica(Replica replica, UpdateRequest up, int expectedRf, String collection) throws Exception {\n    ZkCoreNodeProps zkProps = new ZkCoreNodeProps(replica);\n    String url = zkProps.getBaseUrl() + \"/\" + collection;\n    try (HttpSolrClient solrServer = getHttpSolrClient(url)) {\n      NamedList resp = solrServer.request(up);\n      NamedList hdr = (NamedList) resp.get(\"responseHeader\");\n      Integer batchRf = (Integer)hdr.get(UpdateRequest.REPFACT);\n      // Note that this also tests if we're wonky and return an achieved rf greater than the number of live replicas.\n      assertTrue(\"Expected rf=\"+expectedRf+\" for batch but got \"+\n          batchRf + \"; clusterState: \" + printClusterStateInfo(), batchRf == expectedRf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43f5f8344e80b4bfb2069917069430266753d2f0":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"],"9d22d0f5940f155267b250876fa797ff69e8e6e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cc3b13b430571c2e169f98fe38e1e7666f88522d","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["3caf472b0a0fa2bad9079962e59f83162aeec919"],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3caf472b0a0fa2bad9079962e59f83162aeec919"],"3caf472b0a0fa2bad9079962e59f83162aeec919":["9d22d0f5940f155267b250876fa797ff69e8e6e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43f5f8344e80b4bfb2069917069430266753d2f0"]},"commit2Childs":{"43f5f8344e80b4bfb2069917069430266753d2f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d22d0f5940f155267b250876fa797ff69e8e6e7":["3caf472b0a0fa2bad9079962e59f83162aeec919"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d22d0f5940f155267b250876fa797ff69e8e6e7","b7605579001505896d48b07160075a5c8b8e128e"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["43f5f8344e80b4bfb2069917069430266753d2f0"],"b7605579001505896d48b07160075a5c8b8e128e":[],"3caf472b0a0fa2bad9079962e59f83162aeec919":["bafca15d8e408346a67f4282ad1143b88023893b","b7605579001505896d48b07160075a5c8b8e128e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}