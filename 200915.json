{"path":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.NodePreferenceRulesComparator#NodePreferenceRulesComparator(List[PreferenceRule],SolrQueryRequest,ReplicaListTransformerFactory,ReplicaListTransformerFactory,ReplicaListTransformerFactory).mjava","commits":[{"id":"78d42a7a80ee59932aca8a1fe42b53cf202e75ad","date":1566412272,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.NodePreferenceRulesComparator#NodePreferenceRulesComparator(List[PreferenceRule],SolrQueryRequest,ReplicaListTransformerFactory,ReplicaListTransformerFactory,ReplicaListTransformerFactory).mjava","pathOld":"/dev/null","sourceNew":"    public NodePreferenceRulesComparator(final List<PreferenceRule> preferenceRules, final SolrQueryRequest request,\n        final ReplicaListTransformerFactory defaultRltFactory, final ReplicaListTransformerFactory randomRltFactory,\n        final ReplicaListTransformerFactory stableRltFactory) {\n      this.request = request;\n      final SolrCore core; // explicit check for null core (temporary?, for tests)\n      if (request != null && (core = request.getCore()) != null && core.getCoreContainer().getZkController() != null) {\n        ZkController zkController = request.getCore().getCoreContainer().getZkController();\n        sysPropsCache = zkController.getSysPropsCacher();\n        nodeName = zkController.getNodeName();\n      } else {\n        sysPropsCache = null;\n        nodeName = null;\n      }\n      this.preferenceRules = preferenceRules;\n      final int maxIdx = preferenceRules.size() - 1;\n      final PreferenceRule lastRule = preferenceRules.get(maxIdx);\n      if (!ShardParams.SHARDS_PREFERENCE_REPLICA_BASE.equals(lastRule.name)) {\n        this.sortRules = preferenceRules;\n        this.baseReplicaListTransformer = defaultRltFactory.getInstance(null, request, randomRltFactory);\n      } else {\n        if (maxIdx == 0) {\n          this.sortRules = null;\n        } else {\n          this.sortRules = preferenceRules.subList(0, maxIdx);\n        }\n        String[] parts = lastRule.value.split(\":\", 2);\n        switch (parts[0]) {\n          case ShardParams.REPLICA_RANDOM:\n            this.baseReplicaListTransformer = randomRltFactory.getInstance(parts.length == 1 ? null : parts[1], request, null);\n            break;\n          case ShardParams.REPLICA_STABLE:\n            this.baseReplicaListTransformer = stableRltFactory.getInstance(parts.length == 1 ? null : parts[1], request, randomRltFactory);\n            break;\n          default:\n            throw new IllegalArgumentException(\"Invalid base replica order spec\");\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833432c363468a5df50f87446a68015404b1fbcf","date":1572302961,"type":4,"author":"Houston Putman","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.NodePreferenceRulesComparator#NodePreferenceRulesComparator(List[PreferenceRule],SolrQueryRequest,ReplicaListTransformerFactory,ReplicaListTransformerFactory,ReplicaListTransformerFactory).mjava","sourceNew":null,"sourceOld":"    public NodePreferenceRulesComparator(final List<PreferenceRule> preferenceRules, final SolrQueryRequest request,\n        final ReplicaListTransformerFactory defaultRltFactory, final ReplicaListTransformerFactory randomRltFactory,\n        final ReplicaListTransformerFactory stableRltFactory) {\n      this.request = request;\n      final SolrCore core; // explicit check for null core (temporary?, for tests)\n      if (request != null && (core = request.getCore()) != null && core.getCoreContainer().getZkController() != null) {\n        ZkController zkController = request.getCore().getCoreContainer().getZkController();\n        sysPropsCache = zkController.getSysPropsCacher();\n        nodeName = zkController.getNodeName();\n      } else {\n        sysPropsCache = null;\n        nodeName = null;\n      }\n      this.preferenceRules = preferenceRules;\n      final int maxIdx = preferenceRules.size() - 1;\n      final PreferenceRule lastRule = preferenceRules.get(maxIdx);\n      if (!ShardParams.SHARDS_PREFERENCE_REPLICA_BASE.equals(lastRule.name)) {\n        this.sortRules = preferenceRules;\n        this.baseReplicaListTransformer = defaultRltFactory.getInstance(null, request, randomRltFactory);\n      } else {\n        if (maxIdx == 0) {\n          this.sortRules = null;\n        } else {\n          this.sortRules = preferenceRules.subList(0, maxIdx);\n        }\n        String[] parts = lastRule.value.split(\":\", 2);\n        switch (parts[0]) {\n          case ShardParams.REPLICA_RANDOM:\n            this.baseReplicaListTransformer = randomRltFactory.getInstance(parts.length == 1 ? null : parts[1], request, null);\n            break;\n          case ShardParams.REPLICA_STABLE:\n            this.baseReplicaListTransformer = stableRltFactory.getInstance(parts.length == 1 ? null : parts[1], request, randomRltFactory);\n            break;\n          default:\n            throw new IllegalArgumentException(\"Invalid base replica order spec\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"833432c363468a5df50f87446a68015404b1fbcf":["78d42a7a80ee59932aca8a1fe42b53cf202e75ad"],"78d42a7a80ee59932aca8a1fe42b53cf202e75ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["833432c363468a5df50f87446a68015404b1fbcf"]},"commit2Childs":{"833432c363468a5df50f87446a68015404b1fbcf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"78d42a7a80ee59932aca8a1fe42b53cf202e75ad":["833432c363468a5df50f87446a68015404b1fbcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78d42a7a80ee59932aca8a1fe42b53cf202e75ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}