{"path":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#gatherRptGroups(LinkedHashMap[Term,Integer]).mjava","commits":[{"id":"2eaa5d4d2618a012373ae4574ebb6563933aa9f6","date":1331337973,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#gatherRptGroups(LinkedHashMap[Term,Integer]).mjava","pathOld":"/dev/null","sourceNew":"  /** Detect repetition groups. Done once - for first doc */\n  private ArrayList<ArrayList<PhrasePositions>> gatherRptGroups(LinkedHashMap<Term,Integer> rptTerms) throws IOException {\n    PhrasePositions[] rpp = repeatingPPs(rptTerms); \n    ArrayList<ArrayList<PhrasePositions>> res = new ArrayList<ArrayList<PhrasePositions>>();\n    if (!hasMultiTermRpts) {\n      // simpler - no multi-terms - can base on positions in first doc\n      for (int i=0; i<rpp.length; i++) {\n        PhrasePositions pp = rpp[i];\n        if (pp.rptGroup >=0) continue; // already marked as a repetition\n        int tpPos = tpPos(pp);\n        for (int j=i+1; j<rpp.length; j++) {\n          PhrasePositions pp2 = rpp[j];\n          if (\n              pp2.rptGroup >=0        // already marked as a repetition\n              || pp2.offset == pp.offset // not a repetition: two PPs are originally in same offset in the query! \n              || tpPos(pp2) != tpPos) {  // not a repetition\n            continue; \n          }\n          // a repetition\n          int g = pp.rptGroup;\n          if (g < 0) {\n            g = res.size();\n            pp.rptGroup = g;  \n            ArrayList<PhrasePositions> rl = new ArrayList<PhrasePositions>(2);\n            rl.add(pp);\n            res.add(rl); \n          }\n          pp2.rptGroup = g;\n          res.get(g).add(pp2);\n        }\n      }\n    } else {\n      // more involved - has multi-terms\n      ArrayList<HashSet<PhrasePositions>> tmp = new ArrayList<HashSet<PhrasePositions>>();\n      ArrayList<OpenBitSet> bb = ppTermsBitSets(rpp, rptTerms);\n      unionTermGroups(bb);\n      HashMap<Term,Integer> tg = termGroups(rptTerms, bb);\n      HashSet<Integer> distinctGroupIDs = new HashSet<Integer>(tg.values());\n      for (int i=0; i<distinctGroupIDs.size(); i++) {\n        tmp.add(new HashSet<PhrasePositions>());\n      }\n      for (PhrasePositions pp : rpp) {\n        for (Term t: pp.terms) {\n          if (rptTerms.containsKey(t)) {\n            int g = tg.get(t);\n            tmp.get(g).add(pp);\n            assert pp.rptGroup==-1 || pp.rptGroup==g;  \n            pp.rptGroup = g;\n          }\n        }\n      }\n      for (HashSet<PhrasePositions> hs : tmp) {\n        res.add(new ArrayList<PhrasePositions>(hs));\n      }\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#gatherRptGroups(LinkedHashMap[Term,Integer]).mjava","pathOld":"/dev/null","sourceNew":"  /** Detect repetition groups. Done once - for first doc */\n  private ArrayList<ArrayList<PhrasePositions>> gatherRptGroups(LinkedHashMap<Term,Integer> rptTerms) throws IOException {\n    PhrasePositions[] rpp = repeatingPPs(rptTerms); \n    ArrayList<ArrayList<PhrasePositions>> res = new ArrayList<ArrayList<PhrasePositions>>();\n    if (!hasMultiTermRpts) {\n      // simpler - no multi-terms - can base on positions in first doc\n      for (int i=0; i<rpp.length; i++) {\n        PhrasePositions pp = rpp[i];\n        if (pp.rptGroup >=0) continue; // already marked as a repetition\n        int tpPos = tpPos(pp);\n        for (int j=i+1; j<rpp.length; j++) {\n          PhrasePositions pp2 = rpp[j];\n          if (\n              pp2.rptGroup >=0        // already marked as a repetition\n              || pp2.offset == pp.offset // not a repetition: two PPs are originally in same offset in the query! \n              || tpPos(pp2) != tpPos) {  // not a repetition\n            continue; \n          }\n          // a repetition\n          int g = pp.rptGroup;\n          if (g < 0) {\n            g = res.size();\n            pp.rptGroup = g;  \n            ArrayList<PhrasePositions> rl = new ArrayList<PhrasePositions>(2);\n            rl.add(pp);\n            res.add(rl); \n          }\n          pp2.rptGroup = g;\n          res.get(g).add(pp2);\n        }\n      }\n    } else {\n      // more involved - has multi-terms\n      ArrayList<HashSet<PhrasePositions>> tmp = new ArrayList<HashSet<PhrasePositions>>();\n      ArrayList<OpenBitSet> bb = ppTermsBitSets(rpp, rptTerms);\n      unionTermGroups(bb);\n      HashMap<Term,Integer> tg = termGroups(rptTerms, bb);\n      HashSet<Integer> distinctGroupIDs = new HashSet<Integer>(tg.values());\n      for (int i=0; i<distinctGroupIDs.size(); i++) {\n        tmp.add(new HashSet<PhrasePositions>());\n      }\n      for (PhrasePositions pp : rpp) {\n        for (Term t: pp.terms) {\n          if (rptTerms.containsKey(t)) {\n            int g = tg.get(t);\n            tmp.get(g).add(pp);\n            assert pp.rptGroup==-1 || pp.rptGroup==g;  \n            pp.rptGroup = g;\n          }\n        }\n      }\n      for (HashSet<PhrasePositions> hs : tmp) {\n        res.add(new ArrayList<PhrasePositions>(hs));\n      }\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#gatherRptGroups(LinkedHashMap[Term,Integer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#gatherRptGroups(LinkedHashMap[Term,Integer]).mjava","sourceNew":"  /** Detect repetition groups. Done once - for first doc */\n  private ArrayList<ArrayList<PhrasePositions>> gatherRptGroups(LinkedHashMap<Term,Integer> rptTerms) throws IOException {\n    PhrasePositions[] rpp = repeatingPPs(rptTerms); \n    ArrayList<ArrayList<PhrasePositions>> res = new ArrayList<ArrayList<PhrasePositions>>();\n    if (!hasMultiTermRpts) {\n      // simpler - no multi-terms - can base on positions in first doc\n      for (int i=0; i<rpp.length; i++) {\n        PhrasePositions pp = rpp[i];\n        if (pp.rptGroup >=0) continue; // already marked as a repetition\n        int tpPos = tpPos(pp);\n        for (int j=i+1; j<rpp.length; j++) {\n          PhrasePositions pp2 = rpp[j];\n          if (\n              pp2.rptGroup >=0        // already marked as a repetition\n              || pp2.offset == pp.offset // not a repetition: two PPs are originally in same offset in the query! \n              || tpPos(pp2) != tpPos) {  // not a repetition\n            continue; \n          }\n          // a repetition\n          int g = pp.rptGroup;\n          if (g < 0) {\n            g = res.size();\n            pp.rptGroup = g;  \n            ArrayList<PhrasePositions> rl = new ArrayList<PhrasePositions>(2);\n            rl.add(pp);\n            res.add(rl); \n          }\n          pp2.rptGroup = g;\n          res.get(g).add(pp2);\n        }\n      }\n    } else {\n      // more involved - has multi-terms\n      ArrayList<HashSet<PhrasePositions>> tmp = new ArrayList<HashSet<PhrasePositions>>();\n      ArrayList<FixedBitSet> bb = ppTermsBitSets(rpp, rptTerms);\n      unionTermGroups(bb);\n      HashMap<Term,Integer> tg = termGroups(rptTerms, bb);\n      HashSet<Integer> distinctGroupIDs = new HashSet<Integer>(tg.values());\n      for (int i=0; i<distinctGroupIDs.size(); i++) {\n        tmp.add(new HashSet<PhrasePositions>());\n      }\n      for (PhrasePositions pp : rpp) {\n        for (Term t: pp.terms) {\n          if (rptTerms.containsKey(t)) {\n            int g = tg.get(t);\n            tmp.get(g).add(pp);\n            assert pp.rptGroup==-1 || pp.rptGroup==g;  \n            pp.rptGroup = g;\n          }\n        }\n      }\n      for (HashSet<PhrasePositions> hs : tmp) {\n        res.add(new ArrayList<PhrasePositions>(hs));\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  /** Detect repetition groups. Done once - for first doc */\n  private ArrayList<ArrayList<PhrasePositions>> gatherRptGroups(LinkedHashMap<Term,Integer> rptTerms) throws IOException {\n    PhrasePositions[] rpp = repeatingPPs(rptTerms); \n    ArrayList<ArrayList<PhrasePositions>> res = new ArrayList<ArrayList<PhrasePositions>>();\n    if (!hasMultiTermRpts) {\n      // simpler - no multi-terms - can base on positions in first doc\n      for (int i=0; i<rpp.length; i++) {\n        PhrasePositions pp = rpp[i];\n        if (pp.rptGroup >=0) continue; // already marked as a repetition\n        int tpPos = tpPos(pp);\n        for (int j=i+1; j<rpp.length; j++) {\n          PhrasePositions pp2 = rpp[j];\n          if (\n              pp2.rptGroup >=0        // already marked as a repetition\n              || pp2.offset == pp.offset // not a repetition: two PPs are originally in same offset in the query! \n              || tpPos(pp2) != tpPos) {  // not a repetition\n            continue; \n          }\n          // a repetition\n          int g = pp.rptGroup;\n          if (g < 0) {\n            g = res.size();\n            pp.rptGroup = g;  \n            ArrayList<PhrasePositions> rl = new ArrayList<PhrasePositions>(2);\n            rl.add(pp);\n            res.add(rl); \n          }\n          pp2.rptGroup = g;\n          res.get(g).add(pp2);\n        }\n      }\n    } else {\n      // more involved - has multi-terms\n      ArrayList<HashSet<PhrasePositions>> tmp = new ArrayList<HashSet<PhrasePositions>>();\n      ArrayList<OpenBitSet> bb = ppTermsBitSets(rpp, rptTerms);\n      unionTermGroups(bb);\n      HashMap<Term,Integer> tg = termGroups(rptTerms, bb);\n      HashSet<Integer> distinctGroupIDs = new HashSet<Integer>(tg.values());\n      for (int i=0; i<distinctGroupIDs.size(); i++) {\n        tmp.add(new HashSet<PhrasePositions>());\n      }\n      for (PhrasePositions pp : rpp) {\n        for (Term t: pp.terms) {\n          if (rptTerms.containsKey(t)) {\n            int g = tg.get(t);\n            tmp.get(g).add(pp);\n            assert pp.rptGroup==-1 || pp.rptGroup==g;  \n            pp.rptGroup = g;\n          }\n        }\n      }\n      for (HashSet<PhrasePositions> hs : tmp) {\n        res.add(new ArrayList<PhrasePositions>(hs));\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#gatherRptGroups(LinkedHashMap[Term,Integer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#gatherRptGroups(LinkedHashMap[Term,Integer]).mjava","sourceNew":"  /** Detect repetition groups. Done once - for first doc */\n  private ArrayList<ArrayList<PhrasePositions>> gatherRptGroups(LinkedHashMap<Term,Integer> rptTerms) throws IOException {\n    PhrasePositions[] rpp = repeatingPPs(rptTerms); \n    ArrayList<ArrayList<PhrasePositions>> res = new ArrayList<>();\n    if (!hasMultiTermRpts) {\n      // simpler - no multi-terms - can base on positions in first doc\n      for (int i=0; i<rpp.length; i++) {\n        PhrasePositions pp = rpp[i];\n        if (pp.rptGroup >=0) continue; // already marked as a repetition\n        int tpPos = tpPos(pp);\n        for (int j=i+1; j<rpp.length; j++) {\n          PhrasePositions pp2 = rpp[j];\n          if (\n              pp2.rptGroup >=0        // already marked as a repetition\n              || pp2.offset == pp.offset // not a repetition: two PPs are originally in same offset in the query! \n              || tpPos(pp2) != tpPos) {  // not a repetition\n            continue; \n          }\n          // a repetition\n          int g = pp.rptGroup;\n          if (g < 0) {\n            g = res.size();\n            pp.rptGroup = g;  \n            ArrayList<PhrasePositions> rl = new ArrayList<>(2);\n            rl.add(pp);\n            res.add(rl); \n          }\n          pp2.rptGroup = g;\n          res.get(g).add(pp2);\n        }\n      }\n    } else {\n      // more involved - has multi-terms\n      ArrayList<HashSet<PhrasePositions>> tmp = new ArrayList<>();\n      ArrayList<FixedBitSet> bb = ppTermsBitSets(rpp, rptTerms);\n      unionTermGroups(bb);\n      HashMap<Term,Integer> tg = termGroups(rptTerms, bb);\n      HashSet<Integer> distinctGroupIDs = new HashSet<>(tg.values());\n      for (int i=0; i<distinctGroupIDs.size(); i++) {\n        tmp.add(new HashSet<PhrasePositions>());\n      }\n      for (PhrasePositions pp : rpp) {\n        for (Term t: pp.terms) {\n          if (rptTerms.containsKey(t)) {\n            int g = tg.get(t);\n            tmp.get(g).add(pp);\n            assert pp.rptGroup==-1 || pp.rptGroup==g;  \n            pp.rptGroup = g;\n          }\n        }\n      }\n      for (HashSet<PhrasePositions> hs : tmp) {\n        res.add(new ArrayList<>(hs));\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  /** Detect repetition groups. Done once - for first doc */\n  private ArrayList<ArrayList<PhrasePositions>> gatherRptGroups(LinkedHashMap<Term,Integer> rptTerms) throws IOException {\n    PhrasePositions[] rpp = repeatingPPs(rptTerms); \n    ArrayList<ArrayList<PhrasePositions>> res = new ArrayList<ArrayList<PhrasePositions>>();\n    if (!hasMultiTermRpts) {\n      // simpler - no multi-terms - can base on positions in first doc\n      for (int i=0; i<rpp.length; i++) {\n        PhrasePositions pp = rpp[i];\n        if (pp.rptGroup >=0) continue; // already marked as a repetition\n        int tpPos = tpPos(pp);\n        for (int j=i+1; j<rpp.length; j++) {\n          PhrasePositions pp2 = rpp[j];\n          if (\n              pp2.rptGroup >=0        // already marked as a repetition\n              || pp2.offset == pp.offset // not a repetition: two PPs are originally in same offset in the query! \n              || tpPos(pp2) != tpPos) {  // not a repetition\n            continue; \n          }\n          // a repetition\n          int g = pp.rptGroup;\n          if (g < 0) {\n            g = res.size();\n            pp.rptGroup = g;  \n            ArrayList<PhrasePositions> rl = new ArrayList<PhrasePositions>(2);\n            rl.add(pp);\n            res.add(rl); \n          }\n          pp2.rptGroup = g;\n          res.get(g).add(pp2);\n        }\n      }\n    } else {\n      // more involved - has multi-terms\n      ArrayList<HashSet<PhrasePositions>> tmp = new ArrayList<HashSet<PhrasePositions>>();\n      ArrayList<FixedBitSet> bb = ppTermsBitSets(rpp, rptTerms);\n      unionTermGroups(bb);\n      HashMap<Term,Integer> tg = termGroups(rptTerms, bb);\n      HashSet<Integer> distinctGroupIDs = new HashSet<Integer>(tg.values());\n      for (int i=0; i<distinctGroupIDs.size(); i++) {\n        tmp.add(new HashSet<PhrasePositions>());\n      }\n      for (PhrasePositions pp : rpp) {\n        for (Term t: pp.terms) {\n          if (rptTerms.containsKey(t)) {\n            int g = tg.get(t);\n            tmp.get(g).add(pp);\n            assert pp.rptGroup==-1 || pp.rptGroup==g;  \n            pp.rptGroup = g;\n          }\n        }\n      }\n      for (HashSet<PhrasePositions> hs : tmp) {\n        res.add(new ArrayList<PhrasePositions>(hs));\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b11b9d5eaf9707760ca5151530830a825197023","date":1525941319,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#gatherRptGroups(LinkedHashMap[Term,Integer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#gatherRptGroups(LinkedHashMap[Term,Integer]).mjava","sourceNew":"  /** Detect repetition groups. Done once - for first doc */\n  private ArrayList<ArrayList<PhrasePositions>> gatherRptGroups(LinkedHashMap<Term,Integer> rptTerms) throws IOException {\n    PhrasePositions[] rpp = repeatingPPs(rptTerms); \n    ArrayList<ArrayList<PhrasePositions>> res = new ArrayList<>();\n    if (!hasMultiTermRpts) {\n      // simpler - no multi-terms - can base on positions in first doc\n      for (int i=0; i<rpp.length; i++) {\n        PhrasePositions pp = rpp[i];\n        if (pp.rptGroup >=0) continue; // already marked as a repetition\n        int tpPos = tpPos(pp);\n        for (int j=i+1; j<rpp.length; j++) {\n          PhrasePositions pp2 = rpp[j];\n          if (\n              pp2.rptGroup >=0        // already marked as a repetition\n              || pp2.offset == pp.offset // not a repetition: two PPs are originally in same offset in the query! \n              || tpPos(pp2) != tpPos) {  // not a repetition\n            continue; \n          }\n          // a repetition\n          int g = pp.rptGroup;\n          if (g < 0) {\n            g = res.size();\n            pp.rptGroup = g;  \n            ArrayList<PhrasePositions> rl = new ArrayList<>(2);\n            rl.add(pp);\n            res.add(rl); \n          }\n          pp2.rptGroup = g;\n          res.get(g).add(pp2);\n        }\n      }\n    } else {\n      // more involved - has multi-terms\n      ArrayList<HashSet<PhrasePositions>> tmp = new ArrayList<>();\n      ArrayList<FixedBitSet> bb = ppTermsBitSets(rpp, rptTerms);\n      unionTermGroups(bb);\n      HashMap<Term,Integer> tg = termGroups(rptTerms, bb);\n      HashSet<Integer> distinctGroupIDs = new HashSet<>(tg.values());\n      for (int i=0; i<distinctGroupIDs.size(); i++) {\n        tmp.add(new HashSet<PhrasePositions>());\n      }\n      for (PhrasePositions pp : rpp) {\n        for (Term t: pp.terms) {\n          if (rptTerms.containsKey(t)) {\n            int g = tg.get(t);\n            tmp.get(g).add(pp);\n            assert pp.rptGroup==-1 || pp.rptGroup==g;  \n            pp.rptGroup = g;\n          }\n        }\n      }\n      for (HashSet<PhrasePositions> hs : tmp) {\n        res.add(new ArrayList<>(hs));\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  /** Detect repetition groups. Done once - for first doc */\n  private ArrayList<ArrayList<PhrasePositions>> gatherRptGroups(LinkedHashMap<Term,Integer> rptTerms) throws IOException {\n    PhrasePositions[] rpp = repeatingPPs(rptTerms); \n    ArrayList<ArrayList<PhrasePositions>> res = new ArrayList<>();\n    if (!hasMultiTermRpts) {\n      // simpler - no multi-terms - can base on positions in first doc\n      for (int i=0; i<rpp.length; i++) {\n        PhrasePositions pp = rpp[i];\n        if (pp.rptGroup >=0) continue; // already marked as a repetition\n        int tpPos = tpPos(pp);\n        for (int j=i+1; j<rpp.length; j++) {\n          PhrasePositions pp2 = rpp[j];\n          if (\n              pp2.rptGroup >=0        // already marked as a repetition\n              || pp2.offset == pp.offset // not a repetition: two PPs are originally in same offset in the query! \n              || tpPos(pp2) != tpPos) {  // not a repetition\n            continue; \n          }\n          // a repetition\n          int g = pp.rptGroup;\n          if (g < 0) {\n            g = res.size();\n            pp.rptGroup = g;  \n            ArrayList<PhrasePositions> rl = new ArrayList<>(2);\n            rl.add(pp);\n            res.add(rl); \n          }\n          pp2.rptGroup = g;\n          res.get(g).add(pp2);\n        }\n      }\n    } else {\n      // more involved - has multi-terms\n      ArrayList<HashSet<PhrasePositions>> tmp = new ArrayList<>();\n      ArrayList<FixedBitSet> bb = ppTermsBitSets(rpp, rptTerms);\n      unionTermGroups(bb);\n      HashMap<Term,Integer> tg = termGroups(rptTerms, bb);\n      HashSet<Integer> distinctGroupIDs = new HashSet<>(tg.values());\n      for (int i=0; i<distinctGroupIDs.size(); i++) {\n        tmp.add(new HashSet<PhrasePositions>());\n      }\n      for (PhrasePositions pp : rpp) {\n        for (Term t: pp.terms) {\n          if (rptTerms.containsKey(t)) {\n            int g = tg.get(t);\n            tmp.get(g).add(pp);\n            assert pp.rptGroup==-1 || pp.rptGroup==g;  \n            pp.rptGroup = g;\n          }\n        }\n      }\n      for (HashSet<PhrasePositions> hs : tmp) {\n        res.add(new ArrayList<>(hs));\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3995f83351082af8ae83bb017e63c56818fc1568"],"2eaa5d4d2618a012373ae4574ebb6563933aa9f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b11b9d5eaf9707760ca5151530830a825197023":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3995f83351082af8ae83bb017e63c56818fc1568":["2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b11b9d5eaf9707760ca5151530830a825197023"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3b11b9d5eaf9707760ca5151530830a825197023"],"2eaa5d4d2618a012373ae4574ebb6563933aa9f6":["38e3b736c7ca086d61b7dbb841c905ee115490da","3995f83351082af8ae83bb017e63c56818fc1568"],"3b11b9d5eaf9707760ca5151530830a825197023":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"3995f83351082af8ae83bb017e63c56818fc1568":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}