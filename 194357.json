{"path":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHistoryHandlerTest#beforeClass().mjava","commits":[{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHistoryHandlerTest#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    simulated = random().nextBoolean();\n    Map<String, Object> args = new HashMap<>();\n    args.put(MetricsHistoryHandler.SYNC_PERIOD_PROP, 1);\n    args.put(MetricsHistoryHandler.COLLECT_PERIOD_PROP, 1);\n    if (simulated) {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      metricManager = ((SimCloudManager)cloudManager).getMetricManager();\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      // need to register the factory here, before we start the real cluster\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cloudManager.getClusterStateProvider().getLiveNodes().iterator().next(),\n          metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n    }\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (!simulated) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      metricManager = cluster.getJettySolrRunner(0).getCoreContainer().getMetricManager();\n      solrClient = cluster.getSolrClient();\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cluster.getJettySolrRunner(0).getNodeName(), metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n      SPEED = 1;\n    }\n    timeSource = cloudManager.getTimeSource();\n\n    // create .system collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL,\n        \"conf\", 1, 1);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, \"failed to create \" + CollectionAdminParams.SYSTEM_COLL,\n        CollectionAdminParams.SYSTEM_COLL, CloudTestUtils.clusterShape(1, 1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f0f2472d437d44ec2144932e1d13fb494e82a3","date":1528403207,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHistoryHandlerTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHistoryHandlerTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    simulated = random().nextBoolean() || true;\n    Map<String, Object> args = new HashMap<>();\n    args.put(MetricsHistoryHandler.SYNC_PERIOD_PROP, 1);\n    args.put(MetricsHistoryHandler.COLLECT_PERIOD_PROP, 1);\n    if (simulated) {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      metricManager = ((SimCloudManager)cloudManager).getMetricManager();\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      // need to register the factory here, before we start the real cluster\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cloudManager.getClusterStateProvider().getLiveNodes().iterator().next(),\n          metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n    }\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (!simulated) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      metricManager = cluster.getJettySolrRunner(0).getCoreContainer().getMetricManager();\n      solrClient = cluster.getSolrClient();\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cluster.getJettySolrRunner(0).getNodeName(), metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n      SPEED = 1;\n    }\n    timeSource = cloudManager.getTimeSource();\n\n    // create .system collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL,\n        \"conf\", 1, 1);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, \"failed to create \" + CollectionAdminParams.SYSTEM_COLL,\n        CollectionAdminParams.SYSTEM_COLL, CloudTestUtils.clusterShape(1, 1));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    simulated = random().nextBoolean();\n    Map<String, Object> args = new HashMap<>();\n    args.put(MetricsHistoryHandler.SYNC_PERIOD_PROP, 1);\n    args.put(MetricsHistoryHandler.COLLECT_PERIOD_PROP, 1);\n    if (simulated) {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      metricManager = ((SimCloudManager)cloudManager).getMetricManager();\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      // need to register the factory here, before we start the real cluster\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cloudManager.getClusterStateProvider().getLiveNodes().iterator().next(),\n          metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n    }\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (!simulated) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      metricManager = cluster.getJettySolrRunner(0).getCoreContainer().getMetricManager();\n      solrClient = cluster.getSolrClient();\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cluster.getJettySolrRunner(0).getNodeName(), metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n      SPEED = 1;\n    }\n    timeSource = cloudManager.getTimeSource();\n\n    // create .system collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL,\n        \"conf\", 1, 1);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, \"failed to create \" + CollectionAdminParams.SYSTEM_COLL,\n        CollectionAdminParams.SYSTEM_COLL, CloudTestUtils.clusterShape(1, 1));\n  }\n\n","bugFix":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"bugIntro":["2d7769c1ceca6a76710f154832127db9f9df2bf1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHistoryHandlerTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHistoryHandlerTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    simulated = random().nextBoolean() || true;\n    Map<String, Object> args = new HashMap<>();\n    args.put(MetricsHistoryHandler.SYNC_PERIOD_PROP, 1);\n    args.put(MetricsHistoryHandler.COLLECT_PERIOD_PROP, 1);\n    if (simulated) {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      metricManager = ((SimCloudManager)cloudManager).getMetricManager();\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      // need to register the factory here, before we start the real cluster\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cloudManager.getClusterStateProvider().getLiveNodes().iterator().next(),\n          metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n    }\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (!simulated) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      metricManager = cluster.getJettySolrRunner(0).getCoreContainer().getMetricManager();\n      solrClient = cluster.getSolrClient();\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cluster.getJettySolrRunner(0).getNodeName(), metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n      SPEED = 1;\n    }\n    timeSource = cloudManager.getTimeSource();\n\n    // create .system collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL,\n        \"conf\", 1, 1);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, \"failed to create \" + CollectionAdminParams.SYSTEM_COLL,\n        CollectionAdminParams.SYSTEM_COLL, CloudTestUtils.clusterShape(1, 1));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    simulated = random().nextBoolean();\n    Map<String, Object> args = new HashMap<>();\n    args.put(MetricsHistoryHandler.SYNC_PERIOD_PROP, 1);\n    args.put(MetricsHistoryHandler.COLLECT_PERIOD_PROP, 1);\n    if (simulated) {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      metricManager = ((SimCloudManager)cloudManager).getMetricManager();\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      // need to register the factory here, before we start the real cluster\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cloudManager.getClusterStateProvider().getLiveNodes().iterator().next(),\n          metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n    }\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (!simulated) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      metricManager = cluster.getJettySolrRunner(0).getCoreContainer().getMetricManager();\n      solrClient = cluster.getSolrClient();\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cluster.getJettySolrRunner(0).getNodeName(), metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n      SPEED = 1;\n    }\n    timeSource = cloudManager.getTimeSource();\n\n    // create .system collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL,\n        \"conf\", 1, 1);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, \"failed to create \" + CollectionAdminParams.SYSTEM_COLL,\n        CollectionAdminParams.SYSTEM_COLL, CloudTestUtils.clusterShape(1, 1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHistoryHandlerTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHistoryHandlerTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    simulated = random().nextBoolean() || true;\n    Map<String, Object> args = new HashMap<>();\n    args.put(MetricsHistoryHandler.SYNC_PERIOD_PROP, 1);\n    args.put(MetricsHistoryHandler.COLLECT_PERIOD_PROP, 1);\n    if (simulated) {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      metricManager = ((SimCloudManager)cloudManager).getMetricManager();\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      // need to register the factory here, before we start the real cluster\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cloudManager.getClusterStateProvider().getLiveNodes().iterator().next(),\n          metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n    }\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (!simulated) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      metricManager = cluster.getJettySolrRunner(0).getCoreContainer().getMetricManager();\n      solrClient = cluster.getSolrClient();\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cluster.getJettySolrRunner(0).getNodeName(), metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n      SPEED = 1;\n    }\n    timeSource = cloudManager.getTimeSource();\n\n    // create .system collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL,\n        \"conf\", 1, 1);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, \"failed to create \" + CollectionAdminParams.SYSTEM_COLL,\n        CollectionAdminParams.SYSTEM_COLL, CloudTestUtils.clusterShape(1, 1));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    simulated = random().nextBoolean();\n    Map<String, Object> args = new HashMap<>();\n    args.put(MetricsHistoryHandler.SYNC_PERIOD_PROP, 1);\n    args.put(MetricsHistoryHandler.COLLECT_PERIOD_PROP, 1);\n    if (simulated) {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      metricManager = ((SimCloudManager)cloudManager).getMetricManager();\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      // need to register the factory here, before we start the real cluster\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cloudManager.getClusterStateProvider().getLiveNodes().iterator().next(),\n          metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n    }\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (!simulated) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      metricManager = cluster.getJettySolrRunner(0).getCoreContainer().getMetricManager();\n      solrClient = cluster.getSolrClient();\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cluster.getJettySolrRunner(0).getNodeName(), metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n      SPEED = 1;\n    }\n    timeSource = cloudManager.getTimeSource();\n\n    // create .system collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL,\n        \"conf\", 1, 1);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, \"failed to create \" + CollectionAdminParams.SYSTEM_COLL,\n        CollectionAdminParams.SYSTEM_COLL, CloudTestUtils.clusterShape(1, 1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d7769c1ceca6a76710f154832127db9f9df2bf1","date":1533228478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHistoryHandlerTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHistoryHandlerTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    simulated = random().nextBoolean();\n    Map<String, Object> args = new HashMap<>();\n    args.put(MetricsHistoryHandler.SYNC_PERIOD_PROP, 1);\n    args.put(MetricsHistoryHandler.COLLECT_PERIOD_PROP, 1);\n    if (simulated) {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      metricManager = ((SimCloudManager)cloudManager).getMetricManager();\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      // need to register the factory here, before we start the real cluster\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cloudManager.getClusterStateProvider().getLiveNodes().iterator().next(),\n          metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n    }\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (!simulated) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      metricManager = cluster.getJettySolrRunner(0).getCoreContainer().getMetricManager();\n      solrClient = cluster.getSolrClient();\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cluster.getJettySolrRunner(0).getNodeName(), metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n      SPEED = 1;\n    }\n    timeSource = cloudManager.getTimeSource();\n\n    // create .system collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL,\n        \"conf\", 1, 1);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, \"failed to create \" + CollectionAdminParams.SYSTEM_COLL,\n        CollectionAdminParams.SYSTEM_COLL, CloudTestUtils.clusterShape(1, 1));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    simulated = random().nextBoolean() || true;\n    Map<String, Object> args = new HashMap<>();\n    args.put(MetricsHistoryHandler.SYNC_PERIOD_PROP, 1);\n    args.put(MetricsHistoryHandler.COLLECT_PERIOD_PROP, 1);\n    if (simulated) {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      metricManager = ((SimCloudManager)cloudManager).getMetricManager();\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      // need to register the factory here, before we start the real cluster\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cloudManager.getClusterStateProvider().getLiveNodes().iterator().next(),\n          metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n    }\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (!simulated) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      metricManager = cluster.getJettySolrRunner(0).getCoreContainer().getMetricManager();\n      solrClient = cluster.getSolrClient();\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cluster.getJettySolrRunner(0).getNodeName(), metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n      SPEED = 1;\n    }\n    timeSource = cloudManager.getTimeSource();\n\n    // create .system collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL,\n        \"conf\", 1, 1);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, \"failed to create \" + CollectionAdminParams.SYSTEM_COLL,\n        CollectionAdminParams.SYSTEM_COLL, CloudTestUtils.clusterShape(1, 1));\n  }\n\n","bugFix":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHistoryHandlerTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHistoryHandlerTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    simulated = random().nextBoolean();\n    Map<String, Object> args = new HashMap<>();\n    args.put(MetricsHistoryHandler.SYNC_PERIOD_PROP, 1);\n    args.put(MetricsHistoryHandler.COLLECT_PERIOD_PROP, 1);\n    if (simulated) {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      metricManager = ((SimCloudManager)cloudManager).getMetricManager();\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      // need to register the factory here, before we start the real cluster\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cloudManager.getClusterStateProvider().getLiveNodes().iterator().next(),\n          metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n    }\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    \n    if (!simulated) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      metricManager = cluster.getJettySolrRunner(0).getCoreContainer().getMetricManager();\n      solrClient = cluster.getSolrClient();\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cluster.getJettySolrRunner(0).getNodeName(), metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n      SPEED = 1;\n    }\n    timeSource = cloudManager.getTimeSource();\n\n    // create .system collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL,\n        \"conf\", 1, 1);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, \"failed to create \" + CollectionAdminParams.SYSTEM_COLL,\n        CollectionAdminParams.SYSTEM_COLL, CloudTestUtils.clusterShape(1, 1));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    simulated = random().nextBoolean();\n    Map<String, Object> args = new HashMap<>();\n    args.put(MetricsHistoryHandler.SYNC_PERIOD_PROP, 1);\n    args.put(MetricsHistoryHandler.COLLECT_PERIOD_PROP, 1);\n    if (simulated) {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      metricManager = ((SimCloudManager)cloudManager).getMetricManager();\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      // need to register the factory here, before we start the real cluster\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cloudManager.getClusterStateProvider().getLiveNodes().iterator().next(),\n          metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n    }\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (!simulated) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      metricManager = cluster.getJettySolrRunner(0).getCoreContainer().getMetricManager();\n      solrClient = cluster.getSolrClient();\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cluster.getJettySolrRunner(0).getNodeName(), metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n      SPEED = 1;\n    }\n    timeSource = cloudManager.getTimeSource();\n\n    // create .system collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL,\n        \"conf\", 1, 1);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, \"failed to create \" + CollectionAdminParams.SYSTEM_COLL,\n        CollectionAdminParams.SYSTEM_COLL, CloudTestUtils.clusterShape(1, 1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHistoryHandlerTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHistoryHandlerTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    simulated = random().nextBoolean();\n    Map<String, Object> args = new HashMap<>();\n    args.put(MetricsHistoryHandler.SYNC_PERIOD_PROP, 1);\n    args.put(MetricsHistoryHandler.COLLECT_PERIOD_PROP, 1);\n    if (simulated) {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      metricManager = ((SimCloudManager)cloudManager).getMetricManager();\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      // need to register the factory here, before we start the real cluster\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cloudManager.getClusterStateProvider().getLiveNodes().iterator().next(),\n          metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n    }\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    \n    if (!simulated) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      metricManager = cluster.getJettySolrRunner(0).getCoreContainer().getMetricManager();\n      solrClient = cluster.getSolrClient();\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cluster.getJettySolrRunner(0).getNodeName(), metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n      SPEED = 1;\n    }\n    timeSource = cloudManager.getTimeSource();\n\n    // create .system collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL,\n        \"conf\", 1, 1);\n    create.process(solrClient);\n    CloudUtil.waitForState(cloudManager, \"failed to create \" + CollectionAdminParams.SYSTEM_COLL,\n        CollectionAdminParams.SYSTEM_COLL, CloudUtil.clusterShape(1, 1));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    simulated = random().nextBoolean();\n    Map<String, Object> args = new HashMap<>();\n    args.put(MetricsHistoryHandler.SYNC_PERIOD_PROP, 1);\n    args.put(MetricsHistoryHandler.COLLECT_PERIOD_PROP, 1);\n    if (simulated) {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      metricManager = ((SimCloudManager)cloudManager).getMetricManager();\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      // need to register the factory here, before we start the real cluster\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cloudManager.getClusterStateProvider().getLiveNodes().iterator().next(),\n          metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n    }\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    \n    if (!simulated) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      metricManager = cluster.getJettySolrRunner(0).getCoreContainer().getMetricManager();\n      solrClient = cluster.getSolrClient();\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cluster.getJettySolrRunner(0).getNodeName(), metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n      SPEED = 1;\n    }\n    timeSource = cloudManager.getTimeSource();\n\n    // create .system collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL,\n        \"conf\", 1, 1);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, \"failed to create \" + CollectionAdminParams.SYSTEM_COLL,\n        CollectionAdminParams.SYSTEM_COLL, CloudTestUtils.clusterShape(1, 1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHistoryHandlerTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHistoryHandlerTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    simulated = random().nextBoolean();\n    Map<String, Object> args = new HashMap<>();\n    args.put(MetricsHistoryHandler.SYNC_PERIOD_PROP, 1);\n    args.put(MetricsHistoryHandler.COLLECT_PERIOD_PROP, 1);\n    if (simulated) {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      metricManager = ((SimCloudManager)cloudManager).getMetricManager();\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      // need to register the factory here, before we start the real cluster\n      metricsHandler = new MetricsHandler(metricManager);\n      SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, SolrInfoBean.Group.node.toString(), \"\");\n      handler = new MetricsHistoryHandler(cloudManager.getClusterStateProvider().getLiveNodes().iterator().next(),\n          metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(solrMetricsContext, CommonParams.METRICS_HISTORY_PATH);\n    }\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    \n    if (!simulated) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      metricManager = cluster.getJettySolrRunner(0).getCoreContainer().getMetricManager();\n      solrClient = cluster.getSolrClient();\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cluster.getJettySolrRunner(0).getNodeName(), metricsHandler, solrClient, cloudManager, args);\n      SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, SolrInfoBean.Group.node.toString(), \"\");\n      handler.initializeMetrics(solrMetricsContext, CommonParams.METRICS_HISTORY_PATH);\n      SPEED = 1;\n    }\n    timeSource = cloudManager.getTimeSource();\n\n    // create .system collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL,\n        \"conf\", 1, 1);\n    create.process(solrClient);\n    CloudUtil.waitForState(cloudManager, \"failed to create \" + CollectionAdminParams.SYSTEM_COLL,\n        CollectionAdminParams.SYSTEM_COLL, CloudUtil.clusterShape(1, 1));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    simulated = random().nextBoolean();\n    Map<String, Object> args = new HashMap<>();\n    args.put(MetricsHistoryHandler.SYNC_PERIOD_PROP, 1);\n    args.put(MetricsHistoryHandler.COLLECT_PERIOD_PROP, 1);\n    if (simulated) {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      metricManager = ((SimCloudManager)cloudManager).getMetricManager();\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      // need to register the factory here, before we start the real cluster\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cloudManager.getClusterStateProvider().getLiveNodes().iterator().next(),\n          metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n    }\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    \n    if (!simulated) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      metricManager = cluster.getJettySolrRunner(0).getCoreContainer().getMetricManager();\n      solrClient = cluster.getSolrClient();\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cluster.getJettySolrRunner(0).getNodeName(), metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), \"\", CommonParams.METRICS_HISTORY_PATH);\n      SPEED = 1;\n    }\n    timeSource = cloudManager.getTimeSource();\n\n    // create .system collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL,\n        \"conf\", 1, 1);\n    create.process(solrClient);\n    CloudUtil.waitForState(cloudManager, \"failed to create \" + CollectionAdminParams.SYSTEM_COLL,\n        CollectionAdminParams.SYSTEM_COLL, CloudUtil.clusterShape(1, 1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHistoryHandlerTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHistoryHandlerTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    Map<String, Object> args = new HashMap<>();\n    args.put(MetricsHistoryHandler.SYNC_PERIOD_PROP, 1);\n    args.put(MetricsHistoryHandler.COLLECT_PERIOD_PROP, 1);\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    \n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    metricManager = cluster.getJettySolrRunner(0).getCoreContainer().getMetricManager();\n    solrClient = cluster.getSolrClient();\n    metricsHandler = new MetricsHandler(metricManager);\n    handler = new MetricsHistoryHandler(cluster.getJettySolrRunner(0).getNodeName(), metricsHandler, solrClient, cloudManager, args);\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, SolrInfoBean.Group.node.toString(), \"\");\n    handler.initializeMetrics(solrMetricsContext, CommonParams.METRICS_HISTORY_PATH);\n    SPEED = 1;\n    timeSource = cloudManager.getTimeSource();\n\n    // create .system collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL,\n        \"conf\", 1, 1);\n    create.process(solrClient);\n    CloudUtil.waitForState(cloudManager, \"failed to create \" + CollectionAdminParams.SYSTEM_COLL,\n        CollectionAdminParams.SYSTEM_COLL, CloudUtil.clusterShape(1, 1));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    simulated = random().nextBoolean();\n    Map<String, Object> args = new HashMap<>();\n    args.put(MetricsHistoryHandler.SYNC_PERIOD_PROP, 1);\n    args.put(MetricsHistoryHandler.COLLECT_PERIOD_PROP, 1);\n    if (simulated) {\n      SPEED = 50;\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:\" + SPEED));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      metricManager = ((SimCloudManager)cloudManager).getMetricManager();\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n      // need to register the factory here, before we start the real cluster\n      metricsHandler = new MetricsHandler(metricManager);\n      SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, SolrInfoBean.Group.node.toString(), \"\");\n      handler = new MetricsHistoryHandler(cloudManager.getClusterStateProvider().getLiveNodes().iterator().next(),\n          metricsHandler, solrClient, cloudManager, args);\n      handler.initializeMetrics(solrMetricsContext, CommonParams.METRICS_HISTORY_PATH);\n    }\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    \n    if (!simulated) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      metricManager = cluster.getJettySolrRunner(0).getCoreContainer().getMetricManager();\n      solrClient = cluster.getSolrClient();\n      metricsHandler = new MetricsHandler(metricManager);\n      handler = new MetricsHistoryHandler(cluster.getJettySolrRunner(0).getNodeName(), metricsHandler, solrClient, cloudManager, args);\n      SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, SolrInfoBean.Group.node.toString(), \"\");\n      handler.initializeMetrics(solrMetricsContext, CommonParams.METRICS_HISTORY_PATH);\n      SPEED = 1;\n    }\n    timeSource = cloudManager.getTimeSource();\n\n    // create .system collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL,\n        \"conf\", 1, 1);\n    create.process(solrClient);\n    CloudUtil.waitForState(cloudManager, \"failed to create \" + CollectionAdminParams.SYSTEM_COLL,\n        CollectionAdminParams.SYSTEM_COLL, CloudUtil.clusterShape(1, 1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["2d7769c1ceca6a76710f154832127db9f9df2bf1"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"2d7769c1ceca6a76710f154832127db9f9df2bf1":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","f8f0f2472d437d44ec2144932e1d13fb494e82a3"]},"commit2Childs":{"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2d7769c1ceca6a76710f154832127db9f9df2bf1","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["f8f0f2472d437d44ec2144932e1d13fb494e82a3","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"2d7769c1ceca6a76710f154832127db9f9df2bf1":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}