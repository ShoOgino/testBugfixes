{"path":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#doAfterWriter(ExecutorService).mjava","commits":[{"id":"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9","date":1316963893,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#doAfterWriter(ExecutorService).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void doAfterWriter(ExecutorService es) throws Exception {\n    // SearcherManager needs to see empty commit:\n    writer.commit();\n    mgr = new SearcherManager(dir,\n                              new SearcherWarmer() {\n                                @Override\n                                public void warm(IndexSearcher s) throws IOException {\n                                  TestSearcherManager.this.warmCalled = true;\n                                  s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n                                }\n                              }, es);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"606baff722a317c76a92b111d183b54b6e6e5741","date":1317974711,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(ExecutorService es) throws Exception {\n    // SearcherManager needs to see empty commit:\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        TestSearcherManager.this.warmCalled = true;\n        s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n      }\n    };\n    if (random.nextBoolean()) {\n      mgr = SearcherManager.open(writer, true, warmer, es);\n      isNRT = true;\n    } else {\n      writer.commit();\n      mgr = SearcherManager.open(dir, warmer, es);\n      isNRT = false;\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(ExecutorService es) throws Exception {\n    // SearcherManager needs to see empty commit:\n    writer.commit();\n    mgr = new SearcherManager(dir,\n                              new SearcherWarmer() {\n                                @Override\n                                public void warm(IndexSearcher s) throws IOException {\n                                  TestSearcherManager.this.warmCalled = true;\n                                  s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n                                }\n                              }, es);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d604c1ad3df259faad15d636dd6f0a3674961a02","date":1318284355,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(ExecutorService es) throws Exception {\n    // SearcherManager needs to see empty commit:\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        TestSearcherManager.this.warmCalled = true;\n        s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n      }\n    };\n    if (random.nextBoolean()) {\n      mgr = SearcherManager.open(writer, true, warmer, es);\n      isNRT = true;\n    } else {\n      writer.commit();\n      mgr = SearcherManager.open(dir, warmer, es);\n      isNRT = false;\n    }\n    \n\n    lifetimeMGR = new SearcherLifetimeManager();\n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(ExecutorService es) throws Exception {\n    // SearcherManager needs to see empty commit:\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        TestSearcherManager.this.warmCalled = true;\n        s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n      }\n    };\n    if (random.nextBoolean()) {\n      mgr = SearcherManager.open(writer, true, warmer, es);\n      isNRT = true;\n    } else {\n      writer.commit();\n      mgr = SearcherManager.open(dir, warmer, es);\n      isNRT = false;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0820dc571166c0852da71ee25737fb2f4f5280a4","date":1318718704,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(ExecutorService es) throws Exception {\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        TestSearcherManager.this.warmCalled = true;\n        s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n      }\n    };\n    if (random.nextBoolean()) {\n      mgr = SearcherManager.open(writer, true, warmer, es);\n      isNRT = true;\n    } else {\n      // SearcherManager needs to see empty commit:\n      writer.commit();\n      mgr = SearcherManager.open(dir, warmer, es);\n      isNRT = false;\n    }\n    \n\n    lifetimeMGR = new SearcherLifetimeManager();\n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(ExecutorService es) throws Exception {\n    // SearcherManager needs to see empty commit:\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        TestSearcherManager.this.warmCalled = true;\n        s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n      }\n    };\n    if (random.nextBoolean()) {\n      mgr = SearcherManager.open(writer, true, warmer, es);\n      isNRT = true;\n    } else {\n      writer.commit();\n      mgr = SearcherManager.open(dir, warmer, es);\n      isNRT = false;\n    }\n    \n\n    lifetimeMGR = new SearcherLifetimeManager();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43369d257d14f61a881aa609962ef95e8a334d3a","date":1318786064,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(ExecutorService es) throws Exception {\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        TestSearcherManager.this.warmCalled = true;\n        s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n      }\n    };\n    if (random.nextBoolean()) {\n      mgr = new SearcherManager(writer, true, warmer, es);\n      isNRT = true;\n    } else {\n      // SearcherManager needs to see empty commit:\n      writer.commit();\n      mgr = new SearcherManager(dir, warmer, es);\n      isNRT = false;\n    }\n    \n\n    lifetimeMGR = new SearcherLifetimeManager();\n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(ExecutorService es) throws Exception {\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        TestSearcherManager.this.warmCalled = true;\n        s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n      }\n    };\n    if (random.nextBoolean()) {\n      mgr = SearcherManager.open(writer, true, warmer, es);\n      isNRT = true;\n    } else {\n      // SearcherManager needs to see empty commit:\n      writer.commit();\n      mgr = SearcherManager.open(dir, warmer, es);\n      isNRT = false;\n    }\n    \n\n    lifetimeMGR = new SearcherLifetimeManager();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"602693d7e565c9a90b2a23c7142de80411187e6e","date":1320587578,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(ExecutorService es) throws Exception {\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        TestSearcherManager.this.warmCalled = true;\n        s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n      }\n    };\n    if (random.nextBoolean()) {\n      // TODO: can we randomize the applyAllDeletes?  But\n      // somehow for final searcher we must apply\n      // deletes...\n      mgr = new SearcherManager(writer, true, warmer, es);\n      isNRT = true;\n    } else {\n      // SearcherManager needs to see empty commit:\n      writer.commit();\n      mgr = new SearcherManager(dir, warmer, es);\n      isNRT = false;\n    }\n    \n\n    lifetimeMGR = new SearcherLifetimeManager();\n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(ExecutorService es) throws Exception {\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        TestSearcherManager.this.warmCalled = true;\n        s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n      }\n    };\n    if (random.nextBoolean()) {\n      mgr = new SearcherManager(writer, true, warmer, es);\n      isNRT = true;\n    } else {\n      // SearcherManager needs to see empty commit:\n      writer.commit();\n      mgr = new SearcherManager(dir, warmer, es);\n      isNRT = false;\n    }\n    \n\n    lifetimeMGR = new SearcherLifetimeManager();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSearcherManager#doAfterWriter(ExecutorService).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#doAfterWriter(ExecutorService).mjava","sourceNew":"  @Override\n  protected void doAfterWriter(ExecutorService es) throws Exception {\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        TestSearcherManager.this.warmCalled = true;\n        s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n      }\n    };\n    if (random.nextBoolean()) {\n      // TODO: can we randomize the applyAllDeletes?  But\n      // somehow for final searcher we must apply\n      // deletes...\n      mgr = new SearcherManager(writer, true, warmer, es);\n      isNRT = true;\n    } else {\n      // SearcherManager needs to see empty commit:\n      writer.commit();\n      mgr = new SearcherManager(dir, warmer, es);\n      isNRT = false;\n    }\n    \n\n    lifetimeMGR = new SearcherLifetimeManager();\n  }\n\n","sourceOld":"  @Override\n  protected void doAfterWriter(ExecutorService es) throws Exception {\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        TestSearcherManager.this.warmCalled = true;\n        s.search(new TermQuery(new Term(\"body\", \"united\")), 10);\n      }\n    };\n    if (random.nextBoolean()) {\n      // TODO: can we randomize the applyAllDeletes?  But\n      // somehow for final searcher we must apply\n      // deletes...\n      mgr = new SearcherManager(writer, true, warmer, es);\n      isNRT = true;\n    } else {\n      // SearcherManager needs to see empty commit:\n      writer.commit();\n      mgr = new SearcherManager(dir, warmer, es);\n      isNRT = false;\n    }\n    \n\n    lifetimeMGR = new SearcherLifetimeManager();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0820dc571166c0852da71ee25737fb2f4f5280a4":["d604c1ad3df259faad15d636dd6f0a3674961a02"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["602693d7e565c9a90b2a23c7142de80411187e6e"],"602693d7e565c9a90b2a23c7142de80411187e6e":["43369d257d14f61a881aa609962ef95e8a334d3a"],"d604c1ad3df259faad15d636dd6f0a3674961a02":["606baff722a317c76a92b111d183b54b6e6e5741"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43369d257d14f61a881aa609962ef95e8a334d3a":["0820dc571166c0852da71ee25737fb2f4f5280a4"],"606baff722a317c76a92b111d183b54b6e6e5741":["edcc2c2cbab6bf89ea584169ffb3ca83a31827f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df16fc2e9b615e0138edac46655ae628f5d098ad"]},"commit2Childs":{"0820dc571166c0852da71ee25737fb2f4f5280a4":["43369d257d14f61a881aa609962ef95e8a334d3a"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d604c1ad3df259faad15d636dd6f0a3674961a02":["0820dc571166c0852da71ee25737fb2f4f5280a4"],"602693d7e565c9a90b2a23c7142de80411187e6e":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edcc2c2cbab6bf89ea584169ffb3ca83a31827f9"],"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9":["606baff722a317c76a92b111d183b54b6e6e5741"],"43369d257d14f61a881aa609962ef95e8a334d3a":["602693d7e565c9a90b2a23c7142de80411187e6e"],"606baff722a317c76a92b111d183b54b6e6e5741":["d604c1ad3df259faad15d636dd6f0a3674961a02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}