{"path":"src/java/org/apache/lucene/search/IndexSearcher#doSearch(IndexReader,Weight,Filter,HitCollector).mjava","commits":[{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#doSearch(IndexReader,Weight,Filter,HitCollector).mjava","pathOld":"/dev/null","sourceNew":"  private void doSearch(IndexReader reader, Weight weight, Filter filter,\n      final HitCollector results) throws IOException {\n\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return;\n\n    if (filter == null) {\n      scorer.score(results);\n      return;\n    }\n\n    DocIdSetIterator filterDocIdIterator = filter.getDocIdSet(reader).iterator(); // CHECKME: use ConjunctionScorer here?\n    \n    boolean more = filterDocIdIterator.next() && scorer.skipTo(filterDocIdIterator.doc());\n\n    while (more) {\n      int filterDocId = filterDocIdIterator.doc();\n      if (filterDocId > scorer.doc() && !scorer.skipTo(filterDocId)) {\n        more = false;\n      } else {\n        int scorerDocId = scorer.doc();\n        if (scorerDocId == filterDocId) { // permitted by filter\n          results.collect(scorerDocId, scorer.score());\n          more = filterDocIdIterator.next();\n        } else {\n          more = filterDocIdIterator.skipTo(scorerDocId);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#doSearch(IndexReader,Weight,Filter,Collector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#doSearch(IndexReader,Weight,Filter,HitCollector).mjava","sourceNew":"  private void doSearch(IndexReader reader, Weight weight, Filter filter,\n      final Collector collector) throws IOException {\n\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return;\n\n    if (filter == null) {\n      scorer.score(collector);\n      return;\n    }\n\n    DocIdSetIterator filterDocIdIterator = filter.getDocIdSet(reader).iterator(); // CHECKME: use ConjunctionScorer here?\n    \n    boolean more = filterDocIdIterator.next() && scorer.skipTo(filterDocIdIterator.doc());\n\n    collector.setScorer(scorer);\n    while (more) {\n      int filterDocId = filterDocIdIterator.doc();\n      if (filterDocId > scorer.doc() && !scorer.skipTo(filterDocId)) {\n        more = false;\n      } else {\n        int scorerDocId = scorer.doc();\n        if (scorerDocId == filterDocId) { // permitted by filter\n          collector.collect(scorerDocId);\n          more = filterDocIdIterator.next();\n        } else {\n          more = filterDocIdIterator.skipTo(scorerDocId);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void doSearch(IndexReader reader, Weight weight, Filter filter,\n      final HitCollector results) throws IOException {\n\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return;\n\n    if (filter == null) {\n      scorer.score(results);\n      return;\n    }\n\n    DocIdSetIterator filterDocIdIterator = filter.getDocIdSet(reader).iterator(); // CHECKME: use ConjunctionScorer here?\n    \n    boolean more = filterDocIdIterator.next() && scorer.skipTo(filterDocIdIterator.doc());\n\n    while (more) {\n      int filterDocId = filterDocIdIterator.doc();\n      if (filterDocId > scorer.doc() && !scorer.skipTo(filterDocId)) {\n        more = false;\n      } else {\n        int scorerDocId = scorer.doc();\n        if (scorerDocId == filterDocId) { // permitted by filter\n          results.collect(scorerDocId, scorer.score());\n          more = filterDocIdIterator.next();\n        } else {\n          more = filterDocIdIterator.skipTo(scorerDocId);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["63bc3238545c6012bd44f5d294077997f236bc4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"63bc3238545c6012bd44f5d294077997f236bc4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64714133cf5ec732e3bbceee63351bb9af0117dc"]},"commit2Childs":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["63bc3238545c6012bd44f5d294077997f236bc4e"],"63bc3238545c6012bd44f5d294077997f236bc4e":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}