{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#DocumentsWriterPerThread(int,String,Directory,Directory,LiveIndexWriterConfig,DocumentsWriterDeleteQueue,FieldInfos.Builder,AtomicLong,boolean).mjava","commits":[{"id":"f97270426d92300e08ac1bd1a4ef499ae02e88b7","date":1592503330,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#DocumentsWriterPerThread(int,String,Directory,Directory,LiveIndexWriterConfig,DocumentsWriterDeleteQueue,FieldInfos.Builder,AtomicLong,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#DocumentsWriterPerThread(int,String,Directory,Directory,LiveIndexWriterConfig,InfoStream,DocumentsWriterDeleteQueue,FieldInfos.Builder,AtomicLong,boolean).mjava","sourceNew":"  DocumentsWriterPerThread(int indexVersionCreated, String segmentName, Directory directoryOrig, Directory directory, LiveIndexWriterConfig indexWriterConfig, DocumentsWriterDeleteQueue deleteQueue,\n                                  FieldInfos.Builder fieldInfos, AtomicLong pendingNumDocs, boolean enableTestPoints) throws IOException {\n    this.directory = new TrackingDirectoryWrapper(directory);\n    this.fieldInfos = fieldInfos;\n    this.indexWriterConfig = indexWriterConfig;\n    this.infoStream = indexWriterConfig.getInfoStream();\n    this.codec = indexWriterConfig.getCodec();\n    this.pendingNumDocs = pendingNumDocs;\n    bytesUsed = Counter.newCounter();\n    byteBlockAllocator = new DirectTrackingAllocator(bytesUsed);\n    pendingUpdates = new BufferedUpdates(segmentName);\n    intBlockAllocator = new IntBlockAllocator(bytesUsed);\n    this.deleteQueue = Objects.requireNonNull(deleteQueue);\n    assert numDocsInRAM == 0 : \"num docs \" + numDocsInRAM;\n    deleteSlice = deleteQueue.newSlice();\n   \n    segmentInfo = new SegmentInfo(directoryOrig, Version.LATEST, Version.LATEST, segmentName, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), Collections.emptyMap(), indexWriterConfig.getIndexSort());\n    assert numDocsInRAM == 0;\n    if (INFO_VERBOSE && infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", Thread.currentThread().getName() + \" init seg=\" + segmentName + \" delQueue=\" + deleteQueue);  \n    }\n    this.enableTestPoints = enableTestPoints;\n    this.indexVersionCreated = indexVersionCreated;\n    // this should be the last call in the ctor\n    // it really sucks that we need to pull this within the ctor and pass this ref to the chain!\n    consumer = indexWriterConfig.getIndexingChain().getChain(this);\n  }\n\n","sourceOld":"  DocumentsWriterPerThread(int indexVersionCreated, String segmentName, Directory directoryOrig, Directory directory, LiveIndexWriterConfig indexWriterConfig, InfoStream infoStream, DocumentsWriterDeleteQueue deleteQueue,\n                                  FieldInfos.Builder fieldInfos, AtomicLong pendingNumDocs, boolean enableTestPoints) throws IOException {\n    this.directory = new TrackingDirectoryWrapper(directory);\n    this.fieldInfos = fieldInfos;\n    this.indexWriterConfig = indexWriterConfig;\n    this.infoStream = infoStream;\n    this.codec = indexWriterConfig.getCodec();\n    this.docState = new DocState(this, indexWriterConfig.getAnalyzer(), infoStream);\n    this.docState.similarity = indexWriterConfig.getSimilarity();\n    this.pendingNumDocs = pendingNumDocs;\n    bytesUsed = Counter.newCounter();\n    byteBlockAllocator = new DirectTrackingAllocator(bytesUsed);\n    pendingUpdates = new BufferedUpdates(segmentName);\n    intBlockAllocator = new IntBlockAllocator(bytesUsed);\n    this.deleteQueue = Objects.requireNonNull(deleteQueue);\n    assert numDocsInRAM == 0 : \"num docs \" + numDocsInRAM;\n    deleteSlice = deleteQueue.newSlice();\n   \n    segmentInfo = new SegmentInfo(directoryOrig, Version.LATEST, Version.LATEST, segmentName, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), Collections.emptyMap(), indexWriterConfig.getIndexSort());\n    assert numDocsInRAM == 0;\n    if (INFO_VERBOSE && infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", Thread.currentThread().getName() + \" init seg=\" + segmentName + \" delQueue=\" + deleteQueue);  \n    }\n    this.enableTestPoints = enableTestPoints;\n    this.indexVersionCreated = indexVersionCreated;\n    // this should be the last call in the ctor\n    // it really sucks that we need to pull this within the ctor and pass this ref to the chain!\n    consumer = indexWriterConfig.getIndexingChain().getChain(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49f1924bd448393fbdfef8b5ebed799f938169d3","date":1600069616,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#DocumentsWriterPerThread(int,String,Directory,Directory,LiveIndexWriterConfig,DocumentsWriterDeleteQueue,FieldInfos.Builder,AtomicLong,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#DocumentsWriterPerThread(int,String,Directory,Directory,LiveIndexWriterConfig,DocumentsWriterDeleteQueue,FieldInfos.Builder,AtomicLong,boolean).mjava","sourceNew":"  DocumentsWriterPerThread(int indexVersionCreated, String segmentName, Directory directoryOrig, Directory directory,\n                           LiveIndexWriterConfig indexWriterConfig, DocumentsWriterDeleteQueue deleteQueue,\n                           FieldInfos.Builder fieldInfos, AtomicLong pendingNumDocs, boolean enableTestPoints) {\n    this.directory = new TrackingDirectoryWrapper(directory);\n    this.fieldInfos = fieldInfos;\n    this.indexWriterConfig = indexWriterConfig;\n    this.infoStream = indexWriterConfig.getInfoStream();\n    this.codec = indexWriterConfig.getCodec();\n    this.pendingNumDocs = pendingNumDocs;\n    pendingUpdates = new BufferedUpdates(segmentName);\n    this.deleteQueue = Objects.requireNonNull(deleteQueue);\n    assert numDocsInRAM == 0 : \"num docs \" + numDocsInRAM;\n    deleteSlice = deleteQueue.newSlice();\n   \n    segmentInfo = new SegmentInfo(directoryOrig, Version.LATEST, Version.LATEST, segmentName, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), Collections.emptyMap(), indexWriterConfig.getIndexSort());\n    assert numDocsInRAM == 0;\n    if (INFO_VERBOSE && infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", Thread.currentThread().getName() + \" init seg=\" + segmentName + \" delQueue=\" + deleteQueue);  \n    }\n    this.enableTestPoints = enableTestPoints;\n    consumer = indexWriterConfig.getIndexingChain().getChain(indexVersionCreated, segmentInfo, this.directory, fieldInfos, indexWriterConfig, this::onAbortingException);\n  }\n\n","sourceOld":"  DocumentsWriterPerThread(int indexVersionCreated, String segmentName, Directory directoryOrig, Directory directory, LiveIndexWriterConfig indexWriterConfig, DocumentsWriterDeleteQueue deleteQueue,\n                                  FieldInfos.Builder fieldInfos, AtomicLong pendingNumDocs, boolean enableTestPoints) throws IOException {\n    this.directory = new TrackingDirectoryWrapper(directory);\n    this.fieldInfos = fieldInfos;\n    this.indexWriterConfig = indexWriterConfig;\n    this.infoStream = indexWriterConfig.getInfoStream();\n    this.codec = indexWriterConfig.getCodec();\n    this.pendingNumDocs = pendingNumDocs;\n    bytesUsed = Counter.newCounter();\n    byteBlockAllocator = new DirectTrackingAllocator(bytesUsed);\n    pendingUpdates = new BufferedUpdates(segmentName);\n    intBlockAllocator = new IntBlockAllocator(bytesUsed);\n    this.deleteQueue = Objects.requireNonNull(deleteQueue);\n    assert numDocsInRAM == 0 : \"num docs \" + numDocsInRAM;\n    deleteSlice = deleteQueue.newSlice();\n   \n    segmentInfo = new SegmentInfo(directoryOrig, Version.LATEST, Version.LATEST, segmentName, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), Collections.emptyMap(), indexWriterConfig.getIndexSort());\n    assert numDocsInRAM == 0;\n    if (INFO_VERBOSE && infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", Thread.currentThread().getName() + \" init seg=\" + segmentName + \" delQueue=\" + deleteQueue);  \n    }\n    this.enableTestPoints = enableTestPoints;\n    this.indexVersionCreated = indexVersionCreated;\n    // this should be the last call in the ctor\n    // it really sucks that we need to pull this within the ctor and pass this ref to the chain!\n    consumer = indexWriterConfig.getIndexingChain().getChain(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dcf8f79417865e5028d753e669fae06457e8369","date":1600073240,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#DocumentsWriterPerThread(int,String,Directory,Directory,LiveIndexWriterConfig,DocumentsWriterDeleteQueue,FieldInfos.Builder,AtomicLong,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#DocumentsWriterPerThread(int,String,Directory,Directory,LiveIndexWriterConfig,DocumentsWriterDeleteQueue,FieldInfos.Builder,AtomicLong,boolean).mjava","sourceNew":"  DocumentsWriterPerThread(int indexVersionCreated, String segmentName, Directory directoryOrig, Directory directory,\n                           LiveIndexWriterConfig indexWriterConfig, DocumentsWriterDeleteQueue deleteQueue,\n                           FieldInfos.Builder fieldInfos, AtomicLong pendingNumDocs, boolean enableTestPoints) {\n    this.directory = new TrackingDirectoryWrapper(directory);\n    this.fieldInfos = fieldInfos;\n    this.indexWriterConfig = indexWriterConfig;\n    this.infoStream = indexWriterConfig.getInfoStream();\n    this.codec = indexWriterConfig.getCodec();\n    this.pendingNumDocs = pendingNumDocs;\n    pendingUpdates = new BufferedUpdates(segmentName);\n    this.deleteQueue = Objects.requireNonNull(deleteQueue);\n    assert numDocsInRAM == 0 : \"num docs \" + numDocsInRAM;\n    deleteSlice = deleteQueue.newSlice();\n   \n    segmentInfo = new SegmentInfo(directoryOrig, Version.LATEST, Version.LATEST, segmentName, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), Collections.emptyMap(), indexWriterConfig.getIndexSort());\n    assert numDocsInRAM == 0;\n    if (INFO_VERBOSE && infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", Thread.currentThread().getName() + \" init seg=\" + segmentName + \" delQueue=\" + deleteQueue);  \n    }\n    this.enableTestPoints = enableTestPoints;\n    consumer = indexWriterConfig.getIndexingChain().getChain(indexVersionCreated, segmentInfo, this.directory, fieldInfos, indexWriterConfig, this::onAbortingException);\n  }\n\n","sourceOld":"  DocumentsWriterPerThread(int indexVersionCreated, String segmentName, Directory directoryOrig, Directory directory, LiveIndexWriterConfig indexWriterConfig, DocumentsWriterDeleteQueue deleteQueue,\n                                  FieldInfos.Builder fieldInfos, AtomicLong pendingNumDocs, boolean enableTestPoints) throws IOException {\n    this.directory = new TrackingDirectoryWrapper(directory);\n    this.fieldInfos = fieldInfos;\n    this.indexWriterConfig = indexWriterConfig;\n    this.infoStream = indexWriterConfig.getInfoStream();\n    this.codec = indexWriterConfig.getCodec();\n    this.pendingNumDocs = pendingNumDocs;\n    bytesUsed = Counter.newCounter();\n    byteBlockAllocator = new DirectTrackingAllocator(bytesUsed);\n    pendingUpdates = new BufferedUpdates(segmentName);\n    intBlockAllocator = new IntBlockAllocator(bytesUsed);\n    this.deleteQueue = Objects.requireNonNull(deleteQueue);\n    assert numDocsInRAM == 0 : \"num docs \" + numDocsInRAM;\n    deleteSlice = deleteQueue.newSlice();\n   \n    segmentInfo = new SegmentInfo(directoryOrig, Version.LATEST, Version.LATEST, segmentName, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), Collections.emptyMap(), indexWriterConfig.getIndexSort());\n    assert numDocsInRAM == 0;\n    if (INFO_VERBOSE && infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", Thread.currentThread().getName() + \" init seg=\" + segmentName + \" delQueue=\" + deleteQueue);  \n    }\n    this.enableTestPoints = enableTestPoints;\n    this.indexVersionCreated = indexVersionCreated;\n    // this should be the last call in the ctor\n    // it really sucks that we need to pull this within the ctor and pass this ref to the chain!\n    consumer = indexWriterConfig.getIndexingChain().getChain(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a6f8af01d9b3067b143bbdc0a492720e2af97cf","date":1600157724,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#DocumentsWriterPerThread(int,String,Directory,Directory,LiveIndexWriterConfig,DocumentsWriterDeleteQueue,FieldInfos.Builder,AtomicLong,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#DocumentsWriterPerThread(int,String,Directory,Directory,LiveIndexWriterConfig,DocumentsWriterDeleteQueue,FieldInfos.Builder,AtomicLong,boolean).mjava","sourceNew":"  DocumentsWriterPerThread(int indexVersionCreated, String segmentName, Directory directoryOrig, Directory directory,\n                           LiveIndexWriterConfig indexWriterConfig, DocumentsWriterDeleteQueue deleteQueue,\n                           FieldInfos.Builder fieldInfos, AtomicLong pendingNumDocs, boolean enableTestPoints) {\n    this.directory = new TrackingDirectoryWrapper(directory);\n    this.fieldInfos = fieldInfos;\n    this.indexWriterConfig = indexWriterConfig;\n    this.infoStream = indexWriterConfig.getInfoStream();\n    this.codec = indexWriterConfig.getCodec();\n    this.pendingNumDocs = pendingNumDocs;\n    pendingUpdates = new BufferedUpdates(segmentName);\n    this.deleteQueue = Objects.requireNonNull(deleteQueue);\n    assert numDocsInRAM == 0 : \"num docs \" + numDocsInRAM;\n    deleteSlice = deleteQueue.newSlice();\n   \n    segmentInfo = new SegmentInfo(directoryOrig, Version.LATEST, Version.LATEST, segmentName, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), Collections.emptyMap(), indexWriterConfig.getIndexSort());\n    assert numDocsInRAM == 0;\n    if (INFO_VERBOSE && infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", Thread.currentThread().getName() + \" init seg=\" + segmentName + \" delQueue=\" + deleteQueue);  \n    }\n    this.enableTestPoints = enableTestPoints;\n    indexingChain = new IndexingChain(indexVersionCreated, segmentInfo, this.directory, fieldInfos, indexWriterConfig, this::onAbortingException);\n  }\n\n","sourceOld":"  DocumentsWriterPerThread(int indexVersionCreated, String segmentName, Directory directoryOrig, Directory directory,\n                           LiveIndexWriterConfig indexWriterConfig, DocumentsWriterDeleteQueue deleteQueue,\n                           FieldInfos.Builder fieldInfos, AtomicLong pendingNumDocs, boolean enableTestPoints) {\n    this.directory = new TrackingDirectoryWrapper(directory);\n    this.fieldInfos = fieldInfos;\n    this.indexWriterConfig = indexWriterConfig;\n    this.infoStream = indexWriterConfig.getInfoStream();\n    this.codec = indexWriterConfig.getCodec();\n    this.pendingNumDocs = pendingNumDocs;\n    pendingUpdates = new BufferedUpdates(segmentName);\n    this.deleteQueue = Objects.requireNonNull(deleteQueue);\n    assert numDocsInRAM == 0 : \"num docs \" + numDocsInRAM;\n    deleteSlice = deleteQueue.newSlice();\n   \n    segmentInfo = new SegmentInfo(directoryOrig, Version.LATEST, Version.LATEST, segmentName, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), Collections.emptyMap(), indexWriterConfig.getIndexSort());\n    assert numDocsInRAM == 0;\n    if (INFO_VERBOSE && infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", Thread.currentThread().getName() + \" init seg=\" + segmentName + \" delQueue=\" + deleteQueue);  \n    }\n    this.enableTestPoints = enableTestPoints;\n    consumer = indexWriterConfig.getIndexingChain().getChain(indexVersionCreated, segmentInfo, this.directory, fieldInfos, indexWriterConfig, this::onAbortingException);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#DocumentsWriterPerThread(int,String,Directory,Directory,LiveIndexWriterConfig,DocumentsWriterDeleteQueue,FieldInfos.Builder,AtomicLong,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#DocumentsWriterPerThread(int,String,Directory,Directory,LiveIndexWriterConfig,DocumentsWriterDeleteQueue,FieldInfos.Builder,AtomicLong,boolean).mjava","sourceNew":"  DocumentsWriterPerThread(int indexVersionCreated, String segmentName, Directory directoryOrig, Directory directory,\n                           LiveIndexWriterConfig indexWriterConfig, DocumentsWriterDeleteQueue deleteQueue,\n                           FieldInfos.Builder fieldInfos, AtomicLong pendingNumDocs, boolean enableTestPoints) {\n    this.directory = new TrackingDirectoryWrapper(directory);\n    this.fieldInfos = fieldInfos;\n    this.indexWriterConfig = indexWriterConfig;\n    this.infoStream = indexWriterConfig.getInfoStream();\n    this.codec = indexWriterConfig.getCodec();\n    this.pendingNumDocs = pendingNumDocs;\n    pendingUpdates = new BufferedUpdates(segmentName);\n    this.deleteQueue = Objects.requireNonNull(deleteQueue);\n    assert numDocsInRAM == 0 : \"num docs \" + numDocsInRAM;\n    deleteSlice = deleteQueue.newSlice();\n   \n    segmentInfo = new SegmentInfo(directoryOrig, Version.LATEST, Version.LATEST, segmentName, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), Collections.emptyMap(), indexWriterConfig.getIndexSort());\n    assert numDocsInRAM == 0;\n    if (INFO_VERBOSE && infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", Thread.currentThread().getName() + \" init seg=\" + segmentName + \" delQueue=\" + deleteQueue);  \n    }\n    this.enableTestPoints = enableTestPoints;\n    indexingChain = new IndexingChain(indexVersionCreated, segmentInfo, this.directory, fieldInfos, indexWriterConfig, this::onAbortingException);\n  }\n\n","sourceOld":"  DocumentsWriterPerThread(int indexVersionCreated, String segmentName, Directory directoryOrig, Directory directory,\n                           LiveIndexWriterConfig indexWriterConfig, DocumentsWriterDeleteQueue deleteQueue,\n                           FieldInfos.Builder fieldInfos, AtomicLong pendingNumDocs, boolean enableTestPoints) {\n    this.directory = new TrackingDirectoryWrapper(directory);\n    this.fieldInfos = fieldInfos;\n    this.indexWriterConfig = indexWriterConfig;\n    this.infoStream = indexWriterConfig.getInfoStream();\n    this.codec = indexWriterConfig.getCodec();\n    this.pendingNumDocs = pendingNumDocs;\n    pendingUpdates = new BufferedUpdates(segmentName);\n    this.deleteQueue = Objects.requireNonNull(deleteQueue);\n    assert numDocsInRAM == 0 : \"num docs \" + numDocsInRAM;\n    deleteSlice = deleteQueue.newSlice();\n   \n    segmentInfo = new SegmentInfo(directoryOrig, Version.LATEST, Version.LATEST, segmentName, -1, false, codec, Collections.emptyMap(), StringHelper.randomId(), Collections.emptyMap(), indexWriterConfig.getIndexSort());\n    assert numDocsInRAM == 0;\n    if (INFO_VERBOSE && infoStream.isEnabled(\"DWPT\")) {\n      infoStream.message(\"DWPT\", Thread.currentThread().getName() + \" init seg=\" + segmentName + \" delQueue=\" + deleteQueue);  \n    }\n    this.enableTestPoints = enableTestPoints;\n    consumer = indexWriterConfig.getIndexingChain().getChain(indexVersionCreated, segmentInfo, this.directory, fieldInfos, indexWriterConfig, this::onAbortingException);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"49f1924bd448393fbdfef8b5ebed799f938169d3":["f97270426d92300e08ac1bd1a4ef499ae02e88b7"],"680b6449f09827f58fe987aff279e014c311d966":["0dcf8f79417865e5028d753e669fae06457e8369","7a6f8af01d9b3067b143bbdc0a492720e2af97cf"],"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["49f1924bd448393fbdfef8b5ebed799f938169d3"],"0dcf8f79417865e5028d753e669fae06457e8369":["f97270426d92300e08ac1bd1a4ef499ae02e88b7","49f1924bd448393fbdfef8b5ebed799f938169d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f97270426d92300e08ac1bd1a4ef499ae02e88b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"]},"commit2Childs":{"49f1924bd448393fbdfef8b5ebed799f938169d3":["7a6f8af01d9b3067b143bbdc0a492720e2af97cf","0dcf8f79417865e5028d753e669fae06457e8369"],"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["680b6449f09827f58fe987aff279e014c311d966"],"0dcf8f79417865e5028d753e669fae06457e8369":["680b6449f09827f58fe987aff279e014c311d966"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f97270426d92300e08ac1bd1a4ef499ae02e88b7"],"f97270426d92300e08ac1bd1a4ef499ae02e88b7":["49f1924bd448393fbdfef8b5ebed799f938169d3","0dcf8f79417865e5028d753e669fae06457e8369"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}