{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#init().mjava","commits":[{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#init().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init() {\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      for (int i = 0; i < o.size(); i++) {\n        Map<String, String> map = o.get(i);\n        actions.get(i).init(map);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#init().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void init() {\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      for (int i = 0; i < o.size(); i++) {\n        Map<String, String> map = o.get(i);\n        actions.get(i).init(map);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3955a9511098c96b652734b2f2d4160d07cc2d63","date":1504780677,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#init().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init() {\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      for (int i = 0; i < o.size(); i++) {\n        Map<String, String> map = o.get(i);\n        actions.get(i).init(map);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6","date":1505752009,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#init().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void init() {\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      for (int i = 0; i < o.size(); i++) {\n        Map<String, String> map = o.get(i);\n        actions.get(i).init(map);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#init().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init() {\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      for (int i = 0; i < o.size(); i++) {\n        Map<String, String> map = o.get(i);\n        actions.get(i).init(map);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#init().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#init().mjava","sourceNew":"  @Override\n  public void init() throws Exception {\n    try {\n      if (!stateManager.hasData(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n      }\n    } catch (AlreadyExistsException e) {\n      // ignore\n    } catch (InterruptedException | KeeperException | IOException e) {\n      LOG.warn(\"Exception checking ZK path \" + ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, e);\n      throw e;\n    }\n    for (TriggerAction action : actions) {\n      action.init();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init() {\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      for (int i = 0; i < o.size(); i++) {\n        Map<String, String> map = o.get(i);\n        actions.get(i).init(map);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#init().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#init().mjava","sourceNew":"  @Override\n  public void init() throws Exception {\n    try {\n      if (!stateManager.hasData(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n      }\n    } catch (AlreadyExistsException e) {\n      // ignore\n    } catch (InterruptedException | KeeperException | IOException e) {\n      log.warn(\"Exception checking ZK path \" + ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, e);\n      throw e;\n    }\n    for (TriggerAction action : actions) {\n      action.init();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init() throws Exception {\n    try {\n      if (!stateManager.hasData(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n      }\n    } catch (AlreadyExistsException e) {\n      // ignore\n    } catch (InterruptedException | KeeperException | IOException e) {\n      LOG.warn(\"Exception checking ZK path \" + ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, e);\n      throw e;\n    }\n    for (TriggerAction action : actions) {\n      action.init();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#init().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#init().mjava","sourceNew":"  @Override\n  public void init() throws Exception {\n    try {\n      if (!stateManager.hasData(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n      }\n    } catch (AlreadyExistsException e) {\n      // ignore\n    } catch (InterruptedException | KeeperException | IOException e) {\n      log.warn(\"Exception checking ZK path {}\", ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, e);\n      throw e;\n    }\n    for (TriggerAction action : actions) {\n      action.init();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init() throws Exception {\n    try {\n      if (!stateManager.hasData(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n      }\n    } catch (AlreadyExistsException e) {\n      // ignore\n    } catch (InterruptedException | KeeperException | IOException e) {\n      log.warn(\"Exception checking ZK path \" + ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, e);\n      throw e;\n    }\n    for (TriggerAction action : actions) {\n      action.init();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#init().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void init() throws Exception {\n    try {\n      if (!stateManager.hasData(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n      }\n    } catch (AlreadyExistsException e) {\n      // ignore\n    } catch (InterruptedException | KeeperException | IOException e) {\n      log.warn(\"Exception checking ZK path {}\", ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, e);\n      throw e;\n    }\n    for (TriggerAction action : actions) {\n      action.init();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3955a9511098c96b652734b2f2d4160d07cc2d63":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["e35f2dde06b35aa9904949a3a93fabd090371077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e35f2dde06b35aa9904949a3a93fabd090371077":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"]},"commit2Childs":{"3955a9511098c96b652734b2f2d4160d07cc2d63":["b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"e35f2dde06b35aa9904949a3a93fabd090371077":["3f504512a03d978990cbff30db0522b354e846db"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":[],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["e35f2dde06b35aa9904949a3a93fabd090371077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b71597cbe4c0f463a81f3f225fc0ff1355c8fee6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}