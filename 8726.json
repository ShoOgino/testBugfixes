{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVDistinctValuesCollector#[T]_create(String,String,Collection[SearchGroup[T]],boolean,Type).mjava","commits":[{"id":"166661dd25a09458b128e5c0b86e3b762a6ded68","date":1332333666,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVDistinctValuesCollector#[T]_create(String,String,Collection[SearchGroup[T]],boolean,Type).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a docvalues based implementation of {@link org.apache.lucene.search.grouping.AbstractDistinctValuesCollector} based on the specified\n   * type.\n   *\n   * @param groupField    The field to group by\n   * @param countField    The field to count distinct values for\n   * @param groups        The top N groups, collected during the first phase search\n   * @param diskResident  Whether the values to group and count by should be disk resident\n   * @param type          The {@link Type} which is used to select a concrete implementation\n   * @return a docvalues based distinct count collector\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVDistinctValuesCollector<GroupCount<T>> create(String groupField, String countField, Collection<SearchGroup<T>> groups, boolean diskResident, Type type) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVDistinctValuesCollector) new NonSorted.Lng(groupField, countField, (Collection) groups, diskResident, type);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVDistinctValuesCollector) new NonSorted.Dbl(groupField, countField, (Collection) groups, diskResident, type);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVDistinctValuesCollector) new NonSorted.BR(groupField, countField, (Collection) groups, diskResident, type);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVDistinctValuesCollector) new Sorted.BR(groupField, countField, (Collection) groups, diskResident, type);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVDistinctValuesCollector#[T]_create(String,String,Collection[SearchGroup[T]],boolean,Type).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVDistinctValuesCollector#[T]_create(String,String,Collection[SearchGroup[T]],boolean,Type).mjava","sourceNew":"  /**\n   * Constructs a docvalues based implementation of {@link org.apache.lucene.search.grouping.AbstractDistinctValuesCollector} based on the specified\n   * type.\n   *\n   * @param groupField    The field to group by\n   * @param countField    The field to count distinct values for\n   * @param groups        The top N groups, collected during the first phase search\n   * @param diskResident  Whether the values to group and count by should be disk resident\n   * @param type          The {@link Type} which is used to select a concrete implementation\n   * @return a docvalues based distinct count collector\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVDistinctValuesCollector<GroupCount<T>> create(String groupField, String countField, Collection<SearchGroup<T>> groups, boolean diskResident, Type type) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVDistinctValuesCollector) new NonSorted.Lng(groupField, countField, (Collection) groups, diskResident, type);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVDistinctValuesCollector) new NonSorted.Dbl(groupField, countField, (Collection) groups, diskResident, type);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVDistinctValuesCollector) new NonSorted.BR(groupField, countField, (Collection) groups, diskResident, type);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVDistinctValuesCollector) new Sorted.BR(groupField, countField, (Collection) groups, diskResident, type);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a docvalues based implementation of {@link org.apache.lucene.search.grouping.AbstractDistinctValuesCollector} based on the specified\n   * type.\n   *\n   * @param groupField    The field to group by\n   * @param countField    The field to count distinct values for\n   * @param groups        The top N groups, collected during the first phase search\n   * @param diskResident  Whether the values to group and count by should be disk resident\n   * @param type          The {@link Type} which is used to select a concrete implementation\n   * @return a docvalues based distinct count collector\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVDistinctValuesCollector<GroupCount<T>> create(String groupField, String countField, Collection<SearchGroup<T>> groups, boolean diskResident, Type type) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVDistinctValuesCollector) new NonSorted.Lng(groupField, countField, (Collection) groups, diskResident, type);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVDistinctValuesCollector) new NonSorted.Dbl(groupField, countField, (Collection) groups, diskResident, type);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVDistinctValuesCollector) new NonSorted.BR(groupField, countField, (Collection) groups, diskResident, type);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVDistinctValuesCollector) new Sorted.BR(groupField, countField, (Collection) groups, diskResident, type);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["166661dd25a09458b128e5c0b86e3b762a6ded68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"166661dd25a09458b128e5c0b86e3b762a6ded68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["166661dd25a09458b128e5c0b86e3b762a6ded68"],"166661dd25a09458b128e5c0b86e3b762a6ded68":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}