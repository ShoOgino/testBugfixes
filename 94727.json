{"path":"src/java/org/apache/lucene/analysis/CachingTokenFilter#next().mjava","commits":[{"id":"42579622cc27f9908e64f29fa1130bfc28306009","date":1177874771,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CachingTokenFilter#next().mjava","pathOld":"/dev/null","sourceNew":"  public Token next() throws IOException {\r\n    if (cache == null) {\r\n      // fill cache lazily\r\n      cache = new LinkedList();\r\n      fillCache();\r\n    }\r\n    \r\n    if (index == cache.size()) {\r\n      // the cache is exhausted, return null\r\n      return null;\r\n    }\r\n    \r\n    return (Token) cache.get(index++);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d46fd5810653f9053f3e086647f11a150cc990c","date":1182614194,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CachingTokenFilter#next().mjava","pathOld":"src/java/org/apache/lucene/analysis/CachingTokenFilter#next().mjava","sourceNew":"  public Token next() throws IOException {\r\n    if (cache == null) {\r\n      // fill cache lazily\r\n      cache = new LinkedList();\r\n      fillCache();\r\n      iterator = cache.iterator();\r\n    }\r\n    \r\n    if (!iterator.hasNext()) {\r\n      // the cache is exhausted, return null\r\n      return null;\r\n    }\r\n    \r\n    return (Token) iterator.next();\r\n  }\r\n\n","sourceOld":"  public Token next() throws IOException {\r\n    if (cache == null) {\r\n      // fill cache lazily\r\n      cache = new LinkedList();\r\n      fillCache();\r\n    }\r\n    \r\n    if (index == cache.size()) {\r\n      // the cache is exhausted, return null\r\n      return null;\r\n    }\r\n    \r\n    return (Token) cache.get(index++);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CachingTokenFilter#next().mjava","pathOld":"src/java/org/apache/lucene/analysis/CachingTokenFilter#next().mjava","sourceNew":"  public Token next() throws IOException {\n    if (cache == null) {\n      // fill cache lazily\n      cache = new LinkedList();\n      fillCache();\n      iterator = cache.iterator();\n    }\n    \n    if (!iterator.hasNext()) {\n      // the cache is exhausted, return null\n      return null;\n    }\n    \n    return (Token) iterator.next();\n  }\n\n","sourceOld":"  public Token next() throws IOException {\r\n    if (cache == null) {\r\n      // fill cache lazily\r\n      cache = new LinkedList();\r\n      fillCache();\r\n      iterator = cache.iterator();\r\n    }\r\n    \r\n    if (!iterator.hasNext()) {\r\n      // the cache is exhausted, return null\r\n      return null;\r\n    }\r\n    \r\n    return (Token) iterator.next();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CachingTokenFilter#next(Token).mjava","pathOld":"src/java/org/apache/lucene/analysis/CachingTokenFilter#next().mjava","sourceNew":"  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (cache == null) {\n      // fill cache lazily\n      cache = new LinkedList();\n      fillCache(reusableToken);\n      iterator = cache.iterator();\n    }\n    \n    if (!iterator.hasNext()) {\n      // the cache is exhausted, return null\n      return null;\n    }\n    // Since the TokenFilter can be reset, the tokens need to be preserved as immutable.\n    Token nextToken = (Token) iterator.next();\n    return (Token) nextToken.clone();\n  }\n\n","sourceOld":"  public Token next() throws IOException {\n    if (cache == null) {\n      // fill cache lazily\n      cache = new LinkedList();\n      fillCache();\n      iterator = cache.iterator();\n    }\n    \n    if (!iterator.hasNext()) {\n      // the cache is exhausted, return null\n      return null;\n    }\n    \n    return (Token) iterator.next();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CachingTokenFilter#next().mjava","pathOld":"/dev/null","sourceNew":"  /** @deprecated Will be removed in Lucene 3.0. This method is final, as it should\n   * not be overridden. Delegates to the backwards compatibility layer. */\n  public final Token next() throws IOException {\n    return super.next();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"439b0fe2f799d1c722151e88e32bdefad8d34ebe","date":1255282509,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/CachingTokenFilter#next().mjava","sourceNew":null,"sourceOld":"  /** @deprecated Will be removed in Lucene 3.0. This method is final, as it should\n   * not be overridden. Delegates to the backwards compatibility layer. */\n  public final Token next() throws IOException {\n    return super.next();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["2123bddbd65dea198cac380540636ce43a880403"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["1d46fd5810653f9053f3e086647f11a150cc990c"],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"1d46fd5810653f9053f3e086647f11a150cc990c":["42579622cc27f9908e64f29fa1130bfc28306009"],"42579622cc27f9908e64f29fa1130bfc28306009":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["7e2cb543b41c145f33390f460ee743d6693c9c6c"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["42579622cc27f9908e64f29fa1130bfc28306009"],"2123bddbd65dea198cac380540636ce43a880403":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d46fd5810653f9053f3e086647f11a150cc990c":["2123bddbd65dea198cac380540636ce43a880403"],"42579622cc27f9908e64f29fa1130bfc28306009":["1d46fd5810653f9053f3e086647f11a150cc990c"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}