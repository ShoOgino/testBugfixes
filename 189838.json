{"path":"sandbox/contributions/WordNet/src/java/org/apache/lucene/wordnet/Syns2Index#main(String[]).mjava","commits":[{"id":"8201371f57d27f37d843ee6fe97bfd06811e1678","date":1037173420,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/WordNet/src/java/org/apache/lucene/wordnet/Syns2Index#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Takes optional arg of prolog file name.\n     */\n    public static void main(String[] args)\n        throws Throwable\n    {\n        // get command line arguments\n        String prologFilename = null;\n        String indexDir = null;\n        if (args.length == 2)\n        {\n            prologFilename = args[0];\n            indexDir = args[1];\n        }\n        else\n        {\n            usage();\n            System.exit(1);\n        }\n\n        // ensure that the prolog file is readable\n        if (! (new File(prologFilename)).canRead())\n        {\n            System.err.println(\"Error: cannot read Prolog file: \" + prologFilename);\n            System.exit(1);\n        }\n        // exit if the target index directory already exists\n        if ((new File(indexDir)).isDirectory())\n        {\n            System.err.println(\"Error: index directory already exists: \" + indexDir);\n            System.err.println(\"Please specify a name of a non-existent directory\");\n            System.exit(1);\n        }\n\n        System.out.println(\"Opening Prolog file \" + prologFilename);\n        final FileInputStream fis = new FileInputStream(prologFilename);\n        final DataInputStream dis = new DataInputStream(fis);\n        String line;\n\n        // maps a word to all the \"groups\" it's in\n        final Map word2Nums = new HashMap();\n        // maps a group to all the words in it\n        final Map num2Words = new HashMap();\n        // number of rejected words\n        int ndecent = 0;\n\n        // status output\n        int mod = 1;\n        int row = 1;\n        // parse prolog file\n        while ((line = dis.readLine()) != null)\n        {\n            String oline = line;\n\n            // occasional progress\n            if ((++row) % mod == 0)\n            {\n                mod *= 2;\n                System.out.println(\"\" + row + \" \" + line + \" \" + word2Nums.size()\n                    + \" \" + num2Words.size() + \" ndecent=\" + ndecent);\n            }\n\n            // syntax check\n            if (! line.startsWith(\"s(\"))\n            {\n                System.err.println(\"OUCH: \" + line);\n                System.exit(1);\n            }\n\n            // parse line\n            line = line.substring(2);\n            int comma = line.indexOf(',');\n            String num = line.substring(0, comma);\n            int q1 = line.indexOf('\\'');\n            line = line.substring(q1 + 1);\n            int q2 = line.indexOf('\\'');\n            String word = line.substring(0, q2).toLowerCase();\n\n            // make sure is a normal word\n            if (! isDecent(word))\n            {\n                ndecent++;\n                continue; // don't store words w/ spaces\n            }\n\n            // 1/2: word2Nums map\n            // append to entry or add new one\n            List lis =(List) word2Nums.get(word);\n            if (lis == null)\n            {\n                lis = new LinkedList();\n                lis.add(num);\n                word2Nums.put(word, lis);\n            }\n            else\n                lis.add(num);\n\n            // 2/2: num2Words map\n            lis = (List) num2Words.get(num);\n            if (lis == null)\n            {\n                lis = new LinkedList();\n                lis.add(word);\n                num2Words.put(num, lis);\n            }\n            else\n                lis.add(word);\n        }\n\n        // close the streams\n        fis.close();\n        dis.close();\n\n        // create the index\n        index(indexDir, word2Nums, num2Words);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9d8a289eaffe8fdf85a04f16e0c86505c91e2dbe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0aa51ba0022aed9e71aa82d5e8df04d0bf3622d4","date":1077549853,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/WordNet/src/java/org/apache/lucene/wordnet/Syns2Index#main(String[]).mjava","pathOld":"sandbox/contributions/WordNet/src/java/org/apache/lucene/wordnet/Syns2Index#main(String[]).mjava","sourceNew":"    /**\n     * Takes optional arg of prolog file name.\n     */\n    public static void main(String[] args)\n        throws Throwable\n    {\n        // get command line arguments\n        String prologFilename = null;\n        String indexDir = null;\n        if (args.length == 2)\n        {\n            prologFilename = args[0];\n            indexDir = args[1];\n        }\n        else\n        {\n            usage();\n            System.exit(1);\n        }\n\n        // ensure that the prolog file is readable\n        if (! (new File(prologFilename)).canRead())\n        {\n            System.err.println(\"Error: cannot read Prolog file: \" + prologFilename);\n            System.exit(1);\n        }\n        // exit if the target index directory already exists\n        if ((new File(indexDir)).isDirectory())\n        {\n            System.err.println(\"Error: index directory already exists: \" + indexDir);\n            System.err.println(\"Please specify a name of a non-existent directory\");\n            System.exit(1);\n        }\n\n        System.out.println(\"Opening Prolog file \" + prologFilename);\n        final FileInputStream fis = new FileInputStream(prologFilename);\n        final BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n        String line;\n\n        // maps a word to all the \"groups\" it's in\n        final Map word2Nums = new HashMap();\n        // maps a group to all the words in it\n        final Map num2Words = new HashMap();\n        // number of rejected words\n        int ndecent = 0;\n\n        // status output\n        int mod = 1;\n        int row = 1;\n        // parse prolog file\n        while ((line = br.readLine()) != null)\n        {\n            // occasional progress\n            if ((++row) % mod == 0)\n            {\n                mod *= 2;\n                System.out.println(\"\" + row + \" \" + line + \" \" + word2Nums.size()\n                    + \" \" + num2Words.size() + \" ndecent=\" + ndecent);\n            }\n\n            // syntax check\n            if (! line.startsWith(\"s(\"))\n            {\n                System.err.println(\"OUCH: \" + line);\n                System.exit(1);\n            }\n\n            // parse line\n            line = line.substring(2);\n            int comma = line.indexOf(',');\n            String num = line.substring(0, comma);\n            int q1 = line.indexOf('\\'');\n            line = line.substring(q1 + 1);\n            int q2 = line.indexOf('\\'');\n            String word = line.substring(0, q2).toLowerCase();\n\n            // make sure is a normal word\n            if (! isDecent(word))\n            {\n                ndecent++;\n                continue; // don't store words w/ spaces\n            }\n\n            // 1/2: word2Nums map\n            // append to entry or add new one\n            List lis =(List) word2Nums.get(word);\n            if (lis == null)\n            {\n                lis = new LinkedList();\n                lis.add(num);\n                word2Nums.put(word, lis);\n            }\n            else\n                lis.add(num);\n\n            // 2/2: num2Words map\n            lis = (List) num2Words.get(num);\n            if (lis == null)\n            {\n                lis = new LinkedList();\n                lis.add(word);\n                num2Words.put(num, lis);\n            }\n            else\n                lis.add(word);\n        }\n\n        // close the streams\n        fis.close();\n        br.close();\n\n        // create the index\n        index(indexDir, word2Nums, num2Words);\n    }\n\n","sourceOld":"    /**\n     * Takes optional arg of prolog file name.\n     */\n    public static void main(String[] args)\n        throws Throwable\n    {\n        // get command line arguments\n        String prologFilename = null;\n        String indexDir = null;\n        if (args.length == 2)\n        {\n            prologFilename = args[0];\n            indexDir = args[1];\n        }\n        else\n        {\n            usage();\n            System.exit(1);\n        }\n\n        // ensure that the prolog file is readable\n        if (! (new File(prologFilename)).canRead())\n        {\n            System.err.println(\"Error: cannot read Prolog file: \" + prologFilename);\n            System.exit(1);\n        }\n        // exit if the target index directory already exists\n        if ((new File(indexDir)).isDirectory())\n        {\n            System.err.println(\"Error: index directory already exists: \" + indexDir);\n            System.err.println(\"Please specify a name of a non-existent directory\");\n            System.exit(1);\n        }\n\n        System.out.println(\"Opening Prolog file \" + prologFilename);\n        final FileInputStream fis = new FileInputStream(prologFilename);\n        final DataInputStream dis = new DataInputStream(fis);\n        String line;\n\n        // maps a word to all the \"groups\" it's in\n        final Map word2Nums = new HashMap();\n        // maps a group to all the words in it\n        final Map num2Words = new HashMap();\n        // number of rejected words\n        int ndecent = 0;\n\n        // status output\n        int mod = 1;\n        int row = 1;\n        // parse prolog file\n        while ((line = dis.readLine()) != null)\n        {\n            String oline = line;\n\n            // occasional progress\n            if ((++row) % mod == 0)\n            {\n                mod *= 2;\n                System.out.println(\"\" + row + \" \" + line + \" \" + word2Nums.size()\n                    + \" \" + num2Words.size() + \" ndecent=\" + ndecent);\n            }\n\n            // syntax check\n            if (! line.startsWith(\"s(\"))\n            {\n                System.err.println(\"OUCH: \" + line);\n                System.exit(1);\n            }\n\n            // parse line\n            line = line.substring(2);\n            int comma = line.indexOf(',');\n            String num = line.substring(0, comma);\n            int q1 = line.indexOf('\\'');\n            line = line.substring(q1 + 1);\n            int q2 = line.indexOf('\\'');\n            String word = line.substring(0, q2).toLowerCase();\n\n            // make sure is a normal word\n            if (! isDecent(word))\n            {\n                ndecent++;\n                continue; // don't store words w/ spaces\n            }\n\n            // 1/2: word2Nums map\n            // append to entry or add new one\n            List lis =(List) word2Nums.get(word);\n            if (lis == null)\n            {\n                lis = new LinkedList();\n                lis.add(num);\n                word2Nums.put(word, lis);\n            }\n            else\n                lis.add(num);\n\n            // 2/2: num2Words map\n            lis = (List) num2Words.get(num);\n            if (lis == null)\n            {\n                lis = new LinkedList();\n                lis.add(word);\n                num2Words.put(num, lis);\n            }\n            else\n                lis.add(word);\n        }\n\n        // close the streams\n        fis.close();\n        dis.close();\n\n        // create the index\n        index(indexDir, word2Nums, num2Words);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936e2add654deb93cc249bc32492296b9c47ca20","date":1105474419,"type":3,"author":"David Spencer","isMerge":false,"pathNew":"sandbox/contributions/WordNet/src/java/org/apache/lucene/wordnet/Syns2Index#main(String[]).mjava","pathOld":"sandbox/contributions/WordNet/src/java/org/apache/lucene/wordnet/Syns2Index#main(String[]).mjava","sourceNew":"    /**\n     * Takes optional arg of prolog file name.\n     */\n    public static void main(String[] args)\n        throws Throwable\n    {\n        // get command line arguments\n        String prologFilename = null; // name of file \"wn_s.pl\"\n        String indexDir = null;\n        if (args.length == 2)\n        {\n            prologFilename = args[0];\n            indexDir = args[1];\n        }\n        else\n        {\n            usage();\n            System.exit(1);\n        }\n\n        // ensure that the prolog file is readable\n        if (! (new File(prologFilename)).canRead())\n        {\n            err.println(\"Error: cannot read Prolog file: \" + prologFilename);\n            System.exit(1);\n        }\n        // exit if the target index directory already exists\n        if ((new File(indexDir)).isDirectory())\n        {\n            err.println(\"Error: index directory already exists: \" + indexDir);\n            err.println(\"Please specify a name of a non-existent directory\");\n            System.exit(1);\n        }\n\n        o.println(\"Opening Prolog file \" + prologFilename);\n        final FileInputStream fis = new FileInputStream(prologFilename);\n        final BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n        String line;\n\n        // maps a word to all the \"groups\" it's in\n        final Map word2Nums = new TreeMap();\n        // maps a group to all the words in it\n        final Map num2Words = new TreeMap();\n        // number of rejected words\n        int ndecent = 0;\n\n        // status output\n        int mod = 1;\n        int row = 1;\n        // parse prolog file\n\t\to.println( \"[1/2] Parsing \" + prologFilename);\n        while ((line = br.readLine()) != null)\n        {\n            // occasional progress\n            if ((++row) % mod == 0) // periodically print out line we read in\n            {\n                mod *= 2;\n                o.println(\"\\t\" + row + \" \" + line + \" \" + word2Nums.size()\n                    + \" \" + num2Words.size() + \" ndecent=\" + ndecent);\n            }\n\n            // syntax check\n            if (! line.startsWith(\"s(\"))\n            {\n                err.println(\"OUCH: \" + line);\n                System.exit(1);\n            }\n\n            // parse line\n            line = line.substring(2);\n            int comma = line.indexOf(',');\n            String num = line.substring(0, comma);\n            int q1 = line.indexOf('\\'');\n            line = line.substring(q1 + 1);\n            int q2 = line.indexOf('\\'');\n            String word = line.substring(0, q2).toLowerCase();\n\n            // make sure is a normal word\n            if (! isDecent(word))\n            {\n                ndecent++;\n                continue; // don't store words w/ spaces\n            }\n\n            // 1/2: word2Nums map\n            // append to entry or add new one\n            List lis =(List) word2Nums.get(word);\n            if (lis == null)\n            {\n                lis = new LinkedList();\n                lis.add(num);\n                word2Nums.put(word, lis);\n            }\n            else\n                lis.add(num);\n\n            // 2/2: num2Words map\n            lis = (List) num2Words.get(num);\n            if (lis == null)\n            {\n                lis = new LinkedList();\n                lis.add(word);\n                num2Words.put(num, lis);\n            }\n            else\n                lis.add(word);\n        }\n\n        // close the streams\n        fis.close();\n        br.close();\n\n        // create the index\n\t\to.println( \"[2/2] Building index to store synonyms, \" +\n\t\t\t\t   \" map sizes are \" + word2Nums.size() + \" and \" + num2Words.size());\n        index(indexDir, word2Nums, num2Words);\n    }\n\n","sourceOld":"    /**\n     * Takes optional arg of prolog file name.\n     */\n    public static void main(String[] args)\n        throws Throwable\n    {\n        // get command line arguments\n        String prologFilename = null;\n        String indexDir = null;\n        if (args.length == 2)\n        {\n            prologFilename = args[0];\n            indexDir = args[1];\n        }\n        else\n        {\n            usage();\n            System.exit(1);\n        }\n\n        // ensure that the prolog file is readable\n        if (! (new File(prologFilename)).canRead())\n        {\n            System.err.println(\"Error: cannot read Prolog file: \" + prologFilename);\n            System.exit(1);\n        }\n        // exit if the target index directory already exists\n        if ((new File(indexDir)).isDirectory())\n        {\n            System.err.println(\"Error: index directory already exists: \" + indexDir);\n            System.err.println(\"Please specify a name of a non-existent directory\");\n            System.exit(1);\n        }\n\n        System.out.println(\"Opening Prolog file \" + prologFilename);\n        final FileInputStream fis = new FileInputStream(prologFilename);\n        final BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n        String line;\n\n        // maps a word to all the \"groups\" it's in\n        final Map word2Nums = new HashMap();\n        // maps a group to all the words in it\n        final Map num2Words = new HashMap();\n        // number of rejected words\n        int ndecent = 0;\n\n        // status output\n        int mod = 1;\n        int row = 1;\n        // parse prolog file\n        while ((line = br.readLine()) != null)\n        {\n            // occasional progress\n            if ((++row) % mod == 0)\n            {\n                mod *= 2;\n                System.out.println(\"\" + row + \" \" + line + \" \" + word2Nums.size()\n                    + \" \" + num2Words.size() + \" ndecent=\" + ndecent);\n            }\n\n            // syntax check\n            if (! line.startsWith(\"s(\"))\n            {\n                System.err.println(\"OUCH: \" + line);\n                System.exit(1);\n            }\n\n            // parse line\n            line = line.substring(2);\n            int comma = line.indexOf(',');\n            String num = line.substring(0, comma);\n            int q1 = line.indexOf('\\'');\n            line = line.substring(q1 + 1);\n            int q2 = line.indexOf('\\'');\n            String word = line.substring(0, q2).toLowerCase();\n\n            // make sure is a normal word\n            if (! isDecent(word))\n            {\n                ndecent++;\n                continue; // don't store words w/ spaces\n            }\n\n            // 1/2: word2Nums map\n            // append to entry or add new one\n            List lis =(List) word2Nums.get(word);\n            if (lis == null)\n            {\n                lis = new LinkedList();\n                lis.add(num);\n                word2Nums.put(word, lis);\n            }\n            else\n                lis.add(num);\n\n            // 2/2: num2Words map\n            lis = (List) num2Words.get(num);\n            if (lis == null)\n            {\n                lis = new LinkedList();\n                lis.add(word);\n                num2Words.put(num, lis);\n            }\n            else\n                lis.add(word);\n        }\n\n        // close the streams\n        fis.close();\n        br.close();\n\n        // create the index\n        index(indexDir, word2Nums, num2Words);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c66ea4e08d5b7e32ff205b48896a4da9bf70ac7a","date":1105477091,"type":3,"author":"David Spencer","isMerge":false,"pathNew":"sandbox/contributions/WordNet/src/java/org/apache/lucene/wordnet/Syns2Index#main(String[]).mjava","pathOld":"sandbox/contributions/WordNet/src/java/org/apache/lucene/wordnet/Syns2Index#main(String[]).mjava","sourceNew":"    /**\n     * Takes arg of prolog file name and index directory.\n     */\n    public static void main(String[] args)\n        throws Throwable\n    {\n        // get command line arguments\n        String prologFilename = null; // name of file \"wn_s.pl\"\n        String indexDir = null;\n        if (args.length == 2)\n        {\n            prologFilename = args[0];\n            indexDir = args[1];\n        }\n        else\n        {\n            usage();\n            System.exit(1);\n        }\n\n        // ensure that the prolog file is readable\n        if (! (new File(prologFilename)).canRead())\n        {\n            err.println(\"Error: cannot read Prolog file: \" + prologFilename);\n            System.exit(1);\n        }\n        // exit if the target index directory already exists\n        if ((new File(indexDir)).isDirectory())\n        {\n            err.println(\"Error: index directory already exists: \" + indexDir);\n            err.println(\"Please specify a name of a non-existent directory\");\n            System.exit(1);\n        }\n\n        o.println(\"Opening Prolog file \" + prologFilename);\n        final FileInputStream fis = new FileInputStream(prologFilename);\n        final BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n        String line;\n\n        // maps a word to all the \"groups\" it's in\n        final Map word2Nums = new TreeMap();\n        // maps a group to all the words in it\n        final Map num2Words = new TreeMap();\n        // number of rejected words\n        int ndecent = 0;\n\n        // status output\n        int mod = 1;\n        int row = 1;\n        // parse prolog file\n\t\to.println( \"[1/2] Parsing \" + prologFilename);\n        while ((line = br.readLine()) != null)\n        {\n            // occasional progress\n            if ((++row) % mod == 0) // periodically print out line we read in\n            {\n                mod *= 2;\n                o.println(\"\\t\" + row + \" \" + line + \" \" + word2Nums.size()\n                    + \" \" + num2Words.size() + \" ndecent=\" + ndecent);\n            }\n\n            // syntax check\n            if (! line.startsWith(\"s(\"))\n            {\n                err.println(\"OUCH: \" + line);\n                System.exit(1);\n            }\n\n            // parse line\n            line = line.substring(2);\n            int comma = line.indexOf(',');\n            String num = line.substring(0, comma);\n            int q1 = line.indexOf('\\'');\n            line = line.substring(q1 + 1);\n            int q2 = line.indexOf('\\'');\n            String word = line.substring(0, q2).toLowerCase();\n\n            // make sure is a normal word\n            if (! isDecent(word))\n            {\n                ndecent++;\n                continue; // don't store words w/ spaces\n            }\n\n            // 1/2: word2Nums map\n            // append to entry or add new one\n            List lis =(List) word2Nums.get(word);\n            if (lis == null)\n            {\n                lis = new LinkedList();\n                lis.add(num);\n                word2Nums.put(word, lis);\n            }\n            else\n                lis.add(num);\n\n            // 2/2: num2Words map\n            lis = (List) num2Words.get(num);\n            if (lis == null)\n            {\n                lis = new LinkedList();\n                lis.add(word);\n                num2Words.put(num, lis);\n            }\n            else\n                lis.add(word);\n        }\n\n        // close the streams\n        fis.close();\n        br.close();\n\n        // create the index\n\t\to.println( \"[2/2] Building index to store synonyms, \" +\n\t\t\t\t   \" map sizes are \" + word2Nums.size() + \" and \" + num2Words.size());\n        index(indexDir, word2Nums, num2Words);\n    }\n\n","sourceOld":"    /**\n     * Takes optional arg of prolog file name.\n     */\n    public static void main(String[] args)\n        throws Throwable\n    {\n        // get command line arguments\n        String prologFilename = null; // name of file \"wn_s.pl\"\n        String indexDir = null;\n        if (args.length == 2)\n        {\n            prologFilename = args[0];\n            indexDir = args[1];\n        }\n        else\n        {\n            usage();\n            System.exit(1);\n        }\n\n        // ensure that the prolog file is readable\n        if (! (new File(prologFilename)).canRead())\n        {\n            err.println(\"Error: cannot read Prolog file: \" + prologFilename);\n            System.exit(1);\n        }\n        // exit if the target index directory already exists\n        if ((new File(indexDir)).isDirectory())\n        {\n            err.println(\"Error: index directory already exists: \" + indexDir);\n            err.println(\"Please specify a name of a non-existent directory\");\n            System.exit(1);\n        }\n\n        o.println(\"Opening Prolog file \" + prologFilename);\n        final FileInputStream fis = new FileInputStream(prologFilename);\n        final BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n        String line;\n\n        // maps a word to all the \"groups\" it's in\n        final Map word2Nums = new TreeMap();\n        // maps a group to all the words in it\n        final Map num2Words = new TreeMap();\n        // number of rejected words\n        int ndecent = 0;\n\n        // status output\n        int mod = 1;\n        int row = 1;\n        // parse prolog file\n\t\to.println( \"[1/2] Parsing \" + prologFilename);\n        while ((line = br.readLine()) != null)\n        {\n            // occasional progress\n            if ((++row) % mod == 0) // periodically print out line we read in\n            {\n                mod *= 2;\n                o.println(\"\\t\" + row + \" \" + line + \" \" + word2Nums.size()\n                    + \" \" + num2Words.size() + \" ndecent=\" + ndecent);\n            }\n\n            // syntax check\n            if (! line.startsWith(\"s(\"))\n            {\n                err.println(\"OUCH: \" + line);\n                System.exit(1);\n            }\n\n            // parse line\n            line = line.substring(2);\n            int comma = line.indexOf(',');\n            String num = line.substring(0, comma);\n            int q1 = line.indexOf('\\'');\n            line = line.substring(q1 + 1);\n            int q2 = line.indexOf('\\'');\n            String word = line.substring(0, q2).toLowerCase();\n\n            // make sure is a normal word\n            if (! isDecent(word))\n            {\n                ndecent++;\n                continue; // don't store words w/ spaces\n            }\n\n            // 1/2: word2Nums map\n            // append to entry or add new one\n            List lis =(List) word2Nums.get(word);\n            if (lis == null)\n            {\n                lis = new LinkedList();\n                lis.add(num);\n                word2Nums.put(word, lis);\n            }\n            else\n                lis.add(num);\n\n            // 2/2: num2Words map\n            lis = (List) num2Words.get(num);\n            if (lis == null)\n            {\n                lis = new LinkedList();\n                lis.add(word);\n                num2Words.put(num, lis);\n            }\n            else\n                lis.add(word);\n        }\n\n        // close the streams\n        fis.close();\n        br.close();\n\n        // create the index\n\t\to.println( \"[2/2] Building index to store synonyms, \" +\n\t\t\t\t   \" map sizes are \" + word2Nums.size() + \" and \" + num2Words.size());\n        index(indexDir, word2Nums, num2Words);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/WordNet/src/java/org/apache/lucene/wordnet/Syns2Index#main(String[]).mjava","pathOld":"sandbox/contributions/WordNet/src/java/org/apache/lucene/wordnet/Syns2Index#main(String[]).mjava","sourceNew":"    /**\n     * Takes arg of prolog file name and index directory.\n     */\n    public static void main(String[] args)\n        throws Throwable\n    {\n        // get command line arguments\n        String prologFilename = null; // name of file \"wn_s.pl\"\n        String indexDir = null;\n        if (args.length == 2)\n        {\n            prologFilename = args[0];\n            indexDir = args[1];\n        }\n        else\n        {\n            usage();\n            System.exit(1);\n        }\n\n        // ensure that the prolog file is readable\n        if (! (new File(prologFilename)).canRead())\n        {\n            err.println(\"Error: cannot read Prolog file: \" + prologFilename);\n            System.exit(1);\n        }\n        // exit if the target index directory already exists\n        if ((new File(indexDir)).isDirectory())\n        {\n            err.println(\"Error: index directory already exists: \" + indexDir);\n            err.println(\"Please specify a name of a non-existent directory\");\n            System.exit(1);\n        }\n\n        o.println(\"Opening Prolog file \" + prologFilename);\n        final FileInputStream fis = new FileInputStream(prologFilename);\n        final BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n        String line;\n\n        // maps a word to all the \"groups\" it's in\n        final Map word2Nums = new TreeMap();\n        // maps a group to all the words in it\n        final Map num2Words = new TreeMap();\n        // number of rejected words\n        int ndecent = 0;\n\n        // status output\n        int mod = 1;\n        int row = 1;\n        // parse prolog file\n\t\to.println( \"[1/2] Parsing \" + prologFilename);\n        while ((line = br.readLine()) != null)\n        {\n            // occasional progress\n            if ((++row) % mod == 0) // periodically print out line we read in\n            {\n                mod *= 2;\n                o.println(\"\\t\" + row + \" \" + line + \" \" + word2Nums.size()\n                    + \" \" + num2Words.size() + \" ndecent=\" + ndecent);\n            }\n\n            // syntax check\n            if (! line.startsWith(\"s(\"))\n            {\n                err.println(\"OUCH: \" + line);\n                System.exit(1);\n            }\n\n            // parse line\n            line = line.substring(2);\n            int comma = line.indexOf(',');\n            String num = line.substring(0, comma);\n            int q1 = line.indexOf('\\'');\n            line = line.substring(q1 + 1);\n            int q2 = line.indexOf('\\'');\n            String word = line.substring(0, q2).toLowerCase();\n\n            // make sure is a normal word\n            if (! isDecent(word))\n            {\n                ndecent++;\n                continue; // don't store words w/ spaces\n            }\n\n            // 1/2: word2Nums map\n            // append to entry or add new one\n            List lis =(List) word2Nums.get(word);\n            if (lis == null)\n            {\n                lis = new LinkedList();\n                lis.add(num);\n                word2Nums.put(word, lis);\n            }\n            else\n                lis.add(num);\n\n            // 2/2: num2Words map\n            lis = (List) num2Words.get(num);\n            if (lis == null)\n            {\n                lis = new LinkedList();\n                lis.add(word);\n                num2Words.put(num, lis);\n            }\n            else\n                lis.add(word);\n        }\n\n        // close the streams\n        fis.close();\n        br.close();\n\n        // create the index\n\t\to.println( \"[2/2] Building index to store synonyms, \" +\n\t\t\t\t   \" map sizes are \" + word2Nums.size() + \" and \" + num2Words.size());\n        index(indexDir, word2Nums, num2Words);\n    }\n\n","sourceOld":"    /**\n     * Takes arg of prolog file name and index directory.\n     */\n    public static void main(String[] args)\n        throws Throwable\n    {\n        // get command line arguments\n        String prologFilename = null; // name of file \"wn_s.pl\"\n        String indexDir = null;\n        if (args.length == 2)\n        {\n            prologFilename = args[0];\n            indexDir = args[1];\n        }\n        else\n        {\n            usage();\n            System.exit(1);\n        }\n\n        // ensure that the prolog file is readable\n        if (! (new File(prologFilename)).canRead())\n        {\n            err.println(\"Error: cannot read Prolog file: \" + prologFilename);\n            System.exit(1);\n        }\n        // exit if the target index directory already exists\n        if ((new File(indexDir)).isDirectory())\n        {\n            err.println(\"Error: index directory already exists: \" + indexDir);\n            err.println(\"Please specify a name of a non-existent directory\");\n            System.exit(1);\n        }\n\n        o.println(\"Opening Prolog file \" + prologFilename);\n        final FileInputStream fis = new FileInputStream(prologFilename);\n        final BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n        String line;\n\n        // maps a word to all the \"groups\" it's in\n        final Map word2Nums = new TreeMap();\n        // maps a group to all the words in it\n        final Map num2Words = new TreeMap();\n        // number of rejected words\n        int ndecent = 0;\n\n        // status output\n        int mod = 1;\n        int row = 1;\n        // parse prolog file\n\t\to.println( \"[1/2] Parsing \" + prologFilename);\n        while ((line = br.readLine()) != null)\n        {\n            // occasional progress\n            if ((++row) % mod == 0) // periodically print out line we read in\n            {\n                mod *= 2;\n                o.println(\"\\t\" + row + \" \" + line + \" \" + word2Nums.size()\n                    + \" \" + num2Words.size() + \" ndecent=\" + ndecent);\n            }\n\n            // syntax check\n            if (! line.startsWith(\"s(\"))\n            {\n                err.println(\"OUCH: \" + line);\n                System.exit(1);\n            }\n\n            // parse line\n            line = line.substring(2);\n            int comma = line.indexOf(',');\n            String num = line.substring(0, comma);\n            int q1 = line.indexOf('\\'');\n            line = line.substring(q1 + 1);\n            int q2 = line.indexOf('\\'');\n            String word = line.substring(0, q2).toLowerCase();\n\n            // make sure is a normal word\n            if (! isDecent(word))\n            {\n                ndecent++;\n                continue; // don't store words w/ spaces\n            }\n\n            // 1/2: word2Nums map\n            // append to entry or add new one\n            List lis =(List) word2Nums.get(word);\n            if (lis == null)\n            {\n                lis = new LinkedList();\n                lis.add(num);\n                word2Nums.put(word, lis);\n            }\n            else\n                lis.add(num);\n\n            // 2/2: num2Words map\n            lis = (List) num2Words.get(num);\n            if (lis == null)\n            {\n                lis = new LinkedList();\n                lis.add(word);\n                num2Words.put(num, lis);\n            }\n            else\n                lis.add(word);\n        }\n\n        // close the streams\n        fis.close();\n        br.close();\n\n        // create the index\n\t\to.println( \"[2/2] Building index to store synonyms, \" +\n\t\t\t\t   \" map sizes are \" + word2Nums.size() + \" and \" + num2Words.size());\n        index(indexDir, word2Nums, num2Words);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"936e2add654deb93cc249bc32492296b9c47ca20":["0aa51ba0022aed9e71aa82d5e8df04d0bf3622d4"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["c66ea4e08d5b7e32ff205b48896a4da9bf70ac7a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8201371f57d27f37d843ee6fe97bfd06811e1678":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0aa51ba0022aed9e71aa82d5e8df04d0bf3622d4":["8201371f57d27f37d843ee6fe97bfd06811e1678"],"c66ea4e08d5b7e32ff205b48896a4da9bf70ac7a":["936e2add654deb93cc249bc32492296b9c47ca20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"]},"commit2Childs":{"936e2add654deb93cc249bc32492296b9c47ca20":["c66ea4e08d5b7e32ff205b48896a4da9bf70ac7a"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8201371f57d27f37d843ee6fe97bfd06811e1678"],"8201371f57d27f37d843ee6fe97bfd06811e1678":["0aa51ba0022aed9e71aa82d5e8df04d0bf3622d4"],"0aa51ba0022aed9e71aa82d5e8df04d0bf3622d4":["936e2add654deb93cc249bc32492296b9c47ca20"],"c66ea4e08d5b7e32ff205b48896a4da9bf70ac7a":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}