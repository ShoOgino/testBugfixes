{"path":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMaxPackedValue(IndexReader,String).mjava","commits":[{"id":"56b81df095c14686efbc8ec09364a4a2d5f7db03","date":1458138880,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMaxPackedValue(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Return the maximum packed values across all leaves of the given\n   * {@link IndexReader}.\n   *  @see PointValues#getMaxPackedValue(String) */\n  public static byte[] getMaxPackedValue(IndexReader reader, String field) throws IOException {\n    byte[] maxValue = null;\n    for (LeafReaderContext ctx : reader.leaves()) {\n      PointValues values = ctx.reader().getPointValues();\n      if (values == null) {\n        continue;\n      }\n      byte[] leafMaxValue = values.getMaxPackedValue(field);\n      if (leafMaxValue == null) {\n        continue;\n      }\n      if (maxValue == null) {\n        maxValue = leafMaxValue.clone();\n      } else {\n        final int numDimensions = values.getNumDimensions(field);\n        final int numBytesPerDimension = values.getBytesPerDimension(field);\n        for (int i = 0; i < numDimensions; ++i) {\n          int offset = i * numBytesPerDimension;\n          if (StringHelper.compare(numBytesPerDimension, leafMaxValue, offset, maxValue, offset) > 0) {\n            System.arraycopy(leafMaxValue, offset, maxValue, offset, numBytesPerDimension);\n          }\n        }\n      }\n    }\n    return maxValue;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2b05a409e5eb9e8760959992d595ca2c67cc9638"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2b05a409e5eb9e8760959992d595ca2c67cc9638","date":1461750064,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMaxPackedValue(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMaxPackedValue(IndexReader,String).mjava","sourceNew":"  /** Return the maximum packed values across all leaves of the given\n   * {@link IndexReader}. Leaves that do not have points for the given field\n   * are ignored.\n   *  @see PointValues#getMaxPackedValue(String) */\n  public static byte[] getMaxPackedValue(IndexReader reader, String field) throws IOException {\n    byte[] maxValue = null;\n    for (LeafReaderContext ctx : reader.leaves()) {\n      FieldInfo info = ctx.reader().getFieldInfos().fieldInfo(field);\n      if (info == null || info.getPointDimensionCount() == 0) {\n        continue;\n      }\n      PointValues values = ctx.reader().getPointValues();\n      byte[] leafMaxValue = values.getMaxPackedValue(field);\n      if (leafMaxValue == null) {\n        continue;\n      }\n      if (maxValue == null) {\n        maxValue = leafMaxValue.clone();\n      } else {\n        final int numDimensions = values.getNumDimensions(field);\n        final int numBytesPerDimension = values.getBytesPerDimension(field);\n        for (int i = 0; i < numDimensions; ++i) {\n          int offset = i * numBytesPerDimension;\n          if (StringHelper.compare(numBytesPerDimension, leafMaxValue, offset, maxValue, offset) > 0) {\n            System.arraycopy(leafMaxValue, offset, maxValue, offset, numBytesPerDimension);\n          }\n        }\n      }\n    }\n    return maxValue;\n  }\n\n","sourceOld":"  /** Return the maximum packed values across all leaves of the given\n   * {@link IndexReader}.\n   *  @see PointValues#getMaxPackedValue(String) */\n  public static byte[] getMaxPackedValue(IndexReader reader, String field) throws IOException {\n    byte[] maxValue = null;\n    for (LeafReaderContext ctx : reader.leaves()) {\n      PointValues values = ctx.reader().getPointValues();\n      if (values == null) {\n        continue;\n      }\n      byte[] leafMaxValue = values.getMaxPackedValue(field);\n      if (leafMaxValue == null) {\n        continue;\n      }\n      if (maxValue == null) {\n        maxValue = leafMaxValue.clone();\n      } else {\n        final int numDimensions = values.getNumDimensions(field);\n        final int numBytesPerDimension = values.getBytesPerDimension(field);\n        for (int i = 0; i < numDimensions; ++i) {\n          int offset = i * numBytesPerDimension;\n          if (StringHelper.compare(numBytesPerDimension, leafMaxValue, offset, maxValue, offset) > 0) {\n            System.arraycopy(leafMaxValue, offset, maxValue, offset, numBytesPerDimension);\n          }\n        }\n      }\n    }\n    return maxValue;\n  }\n\n","bugFix":["56b81df095c14686efbc8ec09364a4a2d5f7db03"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMaxPackedValue(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMaxPackedValue(IndexReader,String).mjava","sourceNew":"  /** Return the maximum packed values across all leaves of the given\n   * {@link IndexReader}. Leaves that do not have points for the given field\n   * are ignored.\n   *  @see PointValues#getMaxPackedValue() */\n  public static byte[] getMaxPackedValue(IndexReader reader, String field) throws IOException {\n    byte[] maxValue = null;\n    for (LeafReaderContext ctx : reader.leaves()) {\n      PointValues values = ctx.reader().getPointValues(field);\n      if (values == null) {\n        continue;\n      }\n      byte[] leafMaxValue = values.getMaxPackedValue();\n      if (leafMaxValue == null) {\n        continue;\n      }\n      if (maxValue == null) {\n        maxValue = leafMaxValue.clone();\n      } else {\n        final int numDimensions = values.getNumDimensions();\n        final int numBytesPerDimension = values.getBytesPerDimension();\n        for (int i = 0; i < numDimensions; ++i) {\n          int offset = i * numBytesPerDimension;\n          if (StringHelper.compare(numBytesPerDimension, leafMaxValue, offset, maxValue, offset) > 0) {\n            System.arraycopy(leafMaxValue, offset, maxValue, offset, numBytesPerDimension);\n          }\n        }\n      }\n    }\n    return maxValue;\n  }\n\n","sourceOld":"  /** Return the maximum packed values across all leaves of the given\n   * {@link IndexReader}. Leaves that do not have points for the given field\n   * are ignored.\n   *  @see PointValues#getMaxPackedValue(String) */\n  public static byte[] getMaxPackedValue(IndexReader reader, String field) throws IOException {\n    byte[] maxValue = null;\n    for (LeafReaderContext ctx : reader.leaves()) {\n      FieldInfo info = ctx.reader().getFieldInfos().fieldInfo(field);\n      if (info == null || info.getPointDimensionCount() == 0) {\n        continue;\n      }\n      PointValues values = ctx.reader().getPointValues();\n      byte[] leafMaxValue = values.getMaxPackedValue(field);\n      if (leafMaxValue == null) {\n        continue;\n      }\n      if (maxValue == null) {\n        maxValue = leafMaxValue.clone();\n      } else {\n        final int numDimensions = values.getNumDimensions(field);\n        final int numBytesPerDimension = values.getBytesPerDimension(field);\n        for (int i = 0; i < numDimensions; ++i) {\n          int offset = i * numBytesPerDimension;\n          if (StringHelper.compare(numBytesPerDimension, leafMaxValue, offset, maxValue, offset) > 0) {\n            System.arraycopy(leafMaxValue, offset, maxValue, offset, numBytesPerDimension);\n          }\n        }\n      }\n    }\n    return maxValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMaxPackedValue(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMaxPackedValue(IndexReader,String).mjava","sourceNew":"  /** Return the maximum packed values across all leaves of the given\n   * {@link IndexReader}. Leaves that do not have points for the given field\n   * are ignored.\n   *  @see PointValues#getMaxPackedValue() */\n  public static byte[] getMaxPackedValue(IndexReader reader, String field) throws IOException {\n    byte[] maxValue = null;\n    for (LeafReaderContext ctx : reader.leaves()) {\n      PointValues values = ctx.reader().getPointValues(field);\n      if (values == null) {\n        continue;\n      }\n      byte[] leafMaxValue = values.getMaxPackedValue();\n      if (leafMaxValue == null) {\n        continue;\n      }\n      if (maxValue == null) {\n        maxValue = leafMaxValue.clone();\n      } else {\n        final int numDimensions = values.getNumDimensions();\n        final int numBytesPerDimension = values.getBytesPerDimension();\n        for (int i = 0; i < numDimensions; ++i) {\n          int offset = i * numBytesPerDimension;\n          if (StringHelper.compare(numBytesPerDimension, leafMaxValue, offset, maxValue, offset) > 0) {\n            System.arraycopy(leafMaxValue, offset, maxValue, offset, numBytesPerDimension);\n          }\n        }\n      }\n    }\n    return maxValue;\n  }\n\n","sourceOld":"  /** Return the maximum packed values across all leaves of the given\n   * {@link IndexReader}. Leaves that do not have points for the given field\n   * are ignored.\n   *  @see PointValues#getMaxPackedValue(String) */\n  public static byte[] getMaxPackedValue(IndexReader reader, String field) throws IOException {\n    byte[] maxValue = null;\n    for (LeafReaderContext ctx : reader.leaves()) {\n      FieldInfo info = ctx.reader().getFieldInfos().fieldInfo(field);\n      if (info == null || info.getPointDimensionCount() == 0) {\n        continue;\n      }\n      PointValues values = ctx.reader().getPointValues();\n      byte[] leafMaxValue = values.getMaxPackedValue(field);\n      if (leafMaxValue == null) {\n        continue;\n      }\n      if (maxValue == null) {\n        maxValue = leafMaxValue.clone();\n      } else {\n        final int numDimensions = values.getNumDimensions(field);\n        final int numBytesPerDimension = values.getBytesPerDimension(field);\n        for (int i = 0; i < numDimensions; ++i) {\n          int offset = i * numBytesPerDimension;\n          if (StringHelper.compare(numBytesPerDimension, leafMaxValue, offset, maxValue, offset) > 0) {\n            System.arraycopy(leafMaxValue, offset, maxValue, offset, numBytesPerDimension);\n          }\n        }\n      }\n    }\n    return maxValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f60ea1802fda42d3c91d023406066d00ddb5f8","date":1535615991,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMaxPackedValue(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMaxPackedValue(IndexReader,String).mjava","sourceNew":"  /** Return the maximum packed values across all leaves of the given\n   * {@link IndexReader}. Leaves that do not have points for the given field\n   * are ignored.\n   *  @see PointValues#getMaxPackedValue() */\n  public static byte[] getMaxPackedValue(IndexReader reader, String field) throws IOException {\n    byte[] maxValue = null;\n    for (LeafReaderContext ctx : reader.leaves()) {\n      PointValues values = ctx.reader().getPointValues(field);\n      if (values == null) {\n        continue;\n      }\n      byte[] leafMaxValue = values.getMaxPackedValue();\n      if (leafMaxValue == null) {\n        continue;\n      }\n      if (maxValue == null) {\n        maxValue = leafMaxValue.clone();\n      } else {\n        final int numDimensions = values.getNumDimensions();\n        final int numBytesPerDimension = values.getBytesPerDimension();\n        for (int i = 0; i < numDimensions; ++i) {\n          int offset = i * numBytesPerDimension;\n          if (FutureArrays.compareUnsigned(leafMaxValue, offset, offset + numBytesPerDimension, maxValue, offset, offset + numBytesPerDimension) > 0) {\n            System.arraycopy(leafMaxValue, offset, maxValue, offset, numBytesPerDimension);\n          }\n        }\n      }\n    }\n    return maxValue;\n  }\n\n","sourceOld":"  /** Return the maximum packed values across all leaves of the given\n   * {@link IndexReader}. Leaves that do not have points for the given field\n   * are ignored.\n   *  @see PointValues#getMaxPackedValue() */\n  public static byte[] getMaxPackedValue(IndexReader reader, String field) throws IOException {\n    byte[] maxValue = null;\n    for (LeafReaderContext ctx : reader.leaves()) {\n      PointValues values = ctx.reader().getPointValues(field);\n      if (values == null) {\n        continue;\n      }\n      byte[] leafMaxValue = values.getMaxPackedValue();\n      if (leafMaxValue == null) {\n        continue;\n      }\n      if (maxValue == null) {\n        maxValue = leafMaxValue.clone();\n      } else {\n        final int numDimensions = values.getNumDimensions();\n        final int numBytesPerDimension = values.getBytesPerDimension();\n        for (int i = 0; i < numDimensions; ++i) {\n          int offset = i * numBytesPerDimension;\n          if (StringHelper.compare(numBytesPerDimension, leafMaxValue, offset, maxValue, offset) > 0) {\n            System.arraycopy(leafMaxValue, offset, maxValue, offset, numBytesPerDimension);\n          }\n        }\n      }\n    }\n    return maxValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMaxPackedValue(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMaxPackedValue(IndexReader,String).mjava","sourceNew":"  /** Return the maximum packed values across all leaves of the given\n   * {@link IndexReader}. Leaves that do not have points for the given field\n   * are ignored.\n   *  @see PointValues#getMaxPackedValue() */\n  public static byte[] getMaxPackedValue(IndexReader reader, String field) throws IOException {\n    byte[] maxValue = null;\n    for (LeafReaderContext ctx : reader.leaves()) {\n      PointValues values = ctx.reader().getPointValues(field);\n      if (values == null) {\n        continue;\n      }\n      byte[] leafMaxValue = values.getMaxPackedValue();\n      if (leafMaxValue == null) {\n        continue;\n      }\n      if (maxValue == null) {\n        maxValue = leafMaxValue.clone();\n      } else {\n        final int numDimensions = values.getNumIndexDimensions();\n        final int numBytesPerDimension = values.getBytesPerDimension();\n        for (int i = 0; i < numDimensions; ++i) {\n          int offset = i * numBytesPerDimension;\n          if (FutureArrays.compareUnsigned(leafMaxValue, offset, offset + numBytesPerDimension, maxValue, offset, offset + numBytesPerDimension) > 0) {\n            System.arraycopy(leafMaxValue, offset, maxValue, offset, numBytesPerDimension);\n          }\n        }\n      }\n    }\n    return maxValue;\n  }\n\n","sourceOld":"  /** Return the maximum packed values across all leaves of the given\n   * {@link IndexReader}. Leaves that do not have points for the given field\n   * are ignored.\n   *  @see PointValues#getMaxPackedValue() */\n  public static byte[] getMaxPackedValue(IndexReader reader, String field) throws IOException {\n    byte[] maxValue = null;\n    for (LeafReaderContext ctx : reader.leaves()) {\n      PointValues values = ctx.reader().getPointValues(field);\n      if (values == null) {\n        continue;\n      }\n      byte[] leafMaxValue = values.getMaxPackedValue();\n      if (leafMaxValue == null) {\n        continue;\n      }\n      if (maxValue == null) {\n        maxValue = leafMaxValue.clone();\n      } else {\n        final int numDimensions = values.getNumDimensions();\n        final int numBytesPerDimension = values.getBytesPerDimension();\n        for (int i = 0; i < numDimensions; ++i) {\n          int offset = i * numBytesPerDimension;\n          if (FutureArrays.compareUnsigned(leafMaxValue, offset, offset + numBytesPerDimension, maxValue, offset, offset + numBytesPerDimension) > 0) {\n            System.arraycopy(leafMaxValue, offset, maxValue, offset, numBytesPerDimension);\n          }\n        }\n      }\n    }\n    return maxValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMaxPackedValue(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMaxPackedValue(IndexReader,String).mjava","sourceNew":"  /** Return the maximum packed values across all leaves of the given\n   * {@link IndexReader}. Leaves that do not have points for the given field\n   * are ignored.\n   *  @see PointValues#getMaxPackedValue() */\n  public static byte[] getMaxPackedValue(IndexReader reader, String field) throws IOException {\n    byte[] maxValue = null;\n    for (LeafReaderContext ctx : reader.leaves()) {\n      PointValues values = ctx.reader().getPointValues(field);\n      if (values == null) {\n        continue;\n      }\n      byte[] leafMaxValue = values.getMaxPackedValue();\n      if (leafMaxValue == null) {\n        continue;\n      }\n      if (maxValue == null) {\n        maxValue = leafMaxValue.clone();\n      } else {\n        final int numDimensions = values.getNumIndexDimensions();\n        final int numBytesPerDimension = values.getBytesPerDimension();\n        for (int i = 0; i < numDimensions; ++i) {\n          int offset = i * numBytesPerDimension;\n          if (Arrays.compareUnsigned(leafMaxValue, offset, offset + numBytesPerDimension, maxValue, offset, offset + numBytesPerDimension) > 0) {\n            System.arraycopy(leafMaxValue, offset, maxValue, offset, numBytesPerDimension);\n          }\n        }\n      }\n    }\n    return maxValue;\n  }\n\n","sourceOld":"  /** Return the maximum packed values across all leaves of the given\n   * {@link IndexReader}. Leaves that do not have points for the given field\n   * are ignored.\n   *  @see PointValues#getMaxPackedValue() */\n  public static byte[] getMaxPackedValue(IndexReader reader, String field) throws IOException {\n    byte[] maxValue = null;\n    for (LeafReaderContext ctx : reader.leaves()) {\n      PointValues values = ctx.reader().getPointValues(field);\n      if (values == null) {\n        continue;\n      }\n      byte[] leafMaxValue = values.getMaxPackedValue();\n      if (leafMaxValue == null) {\n        continue;\n      }\n      if (maxValue == null) {\n        maxValue = leafMaxValue.clone();\n      } else {\n        final int numDimensions = values.getNumIndexDimensions();\n        final int numBytesPerDimension = values.getBytesPerDimension();\n        for (int i = 0; i < numDimensions; ++i) {\n          int offset = i * numBytesPerDimension;\n          if (FutureArrays.compareUnsigned(leafMaxValue, offset, offset + numBytesPerDimension, maxValue, offset, offset + numBytesPerDimension) > 0) {\n            System.arraycopy(leafMaxValue, offset, maxValue, offset, numBytesPerDimension);\n          }\n        }\n      }\n    }\n    return maxValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["2b05a409e5eb9e8760959992d595ca2c67cc9638"],"56b81df095c14686efbc8ec09364a4a2d5f7db03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2b05a409e5eb9e8760959992d595ca2c67cc9638","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"2b05a409e5eb9e8760959992d595ca2c67cc9638":["56b81df095c14686efbc8ec09364a4a2d5f7db03"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["f6652c943595e92c187ee904c382863013eae28f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56b81df095c14686efbc8ec09364a4a2d5f7db03"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["41f60ea1802fda42d3c91d023406066d00ddb5f8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"56b81df095c14686efbc8ec09364a4a2d5f7db03":["2b05a409e5eb9e8760959992d595ca2c67cc9638"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"2b05a409e5eb9e8760959992d595ca2c67cc9638":["367f57e2ee85b7f7e28cfe73370a22cf67624f65","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}