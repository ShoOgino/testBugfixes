{"path":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","commits":[{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(StoredDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(StoredDocument doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( StorableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9578f99a6012b38cadca42a29f0bc79cdd5f3c6","date":1345436530,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67588aedbc6edbcce873bd0c3c7b4199fbf0987c","date":1345506207,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(StoredDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(StoredDocument doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( StorableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<Object>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(StoredDocument,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(StoredDocument doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( StorableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744b111b17d15d490a648eb021bfa240e7f11556","date":1487008069,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          if (f.fieldType().docValuesType() == DocValuesType.SORTED_NUMERIC) {\n            // SORTED_NUMERICS store sortable bits version of the value, need to retrieve the original\n            vals.add(sf.getType().toObject(f));\n          } else {\n            vals.add( f );\n          }\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          if (f.fieldType().docValuesType() == DocValuesType.SORTED_NUMERIC) {\n            // SORTED_NUMERICS store sortable bits version of the value, need to retrieve the original\n            vals.add(sf.getType().toObject(f));\n          } else {\n            vals.add( f );\n          }\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          if (f.fieldType().docValuesType() == DocValuesType.SORTED_NUMERIC) {\n            // SORTED_NUMERICS store sortable bits version of the value, need to retrieve the original\n            vals.add(sf.getType().toObject(f));\n          } else {\n            vals.add( f );\n          }\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          if (f.fieldType().docValuesType() == DocValuesType.SORTED_NUMERIC) {\n            // SORTED_NUMERICS store sortable bits version of the value, need to retrieve the original\n            vals.add(sf.getType().toObject(f));\n          } else {\n            vals.add( f );\n          }\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          vals.add( f );\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12f7f335611574989edc8f87d25d91e89aa385b6","date":1489690739,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          if (f.fieldType().docValuesType() == DocValuesType.SORTED_NUMERIC) {\n            // SORTED_NUMERICS store sortable bits version of the value, need to retrieve the original\n            vals.add(sf.getType().toObject(f)); // (will materialize by side-effect)\n          } else {\n            vals.add( materialize(f) );\n          }\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), materialize(f) );\n        }\n      }\n      else {\n        out.addField( f.name(), materialize(f) );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          if (f.fieldType().docValuesType() == DocValuesType.SORTED_NUMERIC) {\n            // SORTED_NUMERICS store sortable bits version of the value, need to retrieve the original\n            vals.add(sf.getType().toObject(f));\n          } else {\n            vals.add( f );\n          }\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b4eb0a25318cc756077fbde9bd3052690aed03d","date":1490280009,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          if (f.fieldType().docValuesType() == DocValuesType.SORTED_NUMERIC) {\n            // SORTED_NUMERICS store sortable bits version of the value, need to retrieve the original\n            vals.add(sf.getType().toObject(f)); // (will materialize by side-effect)\n          } else {\n            vals.add( materialize(f) );\n          }\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), materialize(f) );\n        }\n      }\n      else {\n        out.addField( f.name(), materialize(f) );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          if (f.fieldType().docValuesType() == DocValuesType.SORTED_NUMERIC) {\n            // SORTED_NUMERICS store sortable bits version of the value, need to retrieve the original\n            vals.add(sf.getType().toObject(f));\n          } else {\n            vals.add( f );\n          }\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), f );\n        }\n      }\n      else {\n        out.addField( f.name(), f );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4ac57acabd75209118610266e690b498316434b","date":1558884233,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n\n      SchemaField sf = schema.getFieldOrNull(f.name());\n      if (sf == null) {\n        // This is unexpected!\n        log.warn(\"schema.getFieldOrNull returned null {}, this is unexpected! \", f.name());\n        out.setField(f.name(), f.stringValue());\n        continue;\n      }\n\n      // don't return copyField targets\n      if (schema.isCopyFieldTarget(sf)) continue;\n      \n      if (out.get(f.name()) != null) {\n        out.addField(f.name(), sf.getType().toObject(f));\n        continue;\n      }\n\n      if (sf.multiValued()) {\n        List<Object> vals = new ArrayList<>();\n        vals.add(sf.getType().toObject(f));\n        out.setField(f.name(), vals);\n      } else {\n        out.setField(f.name(), sf.getType().toObject(f));\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n        SchemaField sf = schema.getFieldOrNull(f.name());\n\n        // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n\n        if (sf != null && sf.multiValued()) {\n          List<Object> vals = new ArrayList<>();\n          if (f.fieldType().docValuesType() == DocValuesType.SORTED_NUMERIC) {\n            // SORTED_NUMERICS store sortable bits version of the value, need to retrieve the original\n            vals.add(sf.getType().toObject(f)); // (will materialize by side-effect)\n          } else {\n            vals.add( materialize(f) );\n          }\n          out.setField( f.name(), vals );\n        }\n        else{\n          out.setField( f.name(), materialize(f) );\n        }\n      }\n      else {\n        out.addField( f.name(), materialize(f) );\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f9d69f51e4c48f6b853fb7289438274934bc870","date":1558971288,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(Document,IndexSchema).mjava","sourceNew":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n      Object existing = out.get(f.name());\n      if (existing == null) {\n      SchemaField sf = schema.getFieldOrNull(f.name());\n\n      // don't return copyField targets\n        if (sf != null && schema.isCopyFieldTarget(sf)) continue;\n      \n        if (sf != null && sf.multiValued()) {\n        List<Object> vals = new ArrayList<>();\n          if (f.fieldType().docValuesType() == DocValuesType.SORTED_NUMERIC) {\n            // SORTED_NUMERICS store sortable bits version of the value, need to retrieve the original\n            vals.add(sf.getType().toObject(f)); // (will materialize by side-effect)\n          } else {\n            vals.add( materialize(f) );\n          }\n        out.setField(f.name(), vals);\n      } else {\n          out.setField( f.name(), materialize(f) );\n        }\n      }\n      else {\n        out.addField( f.name(), materialize(f) );\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  private static SolrDocument toSolrDoc(Document doc, IndexSchema schema) {\n    SolrDocument out = new SolrDocument();\n    for( IndexableField f : doc.getFields() ) {\n      // Make sure multivalued fields are represented as lists\n\n      SchemaField sf = schema.getFieldOrNull(f.name());\n      if (sf == null) {\n        // This is unexpected!\n        log.warn(\"schema.getFieldOrNull returned null {}, this is unexpected! \", f.name());\n        out.setField(f.name(), f.stringValue());\n        continue;\n      }\n\n      // don't return copyField targets\n      if (schema.isCopyFieldTarget(sf)) continue;\n      \n      if (out.get(f.name()) != null) {\n        out.addField(f.name(), sf.getType().toObject(f));\n        continue;\n      }\n\n      if (sf.multiValued()) {\n        List<Object> vals = new ArrayList<>();\n        vals.add(sf.getType().toObject(f));\n        out.setField(f.name(), vals);\n      } else {\n        out.setField(f.name(), sf.getType().toObject(f));\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f9d69f51e4c48f6b853fb7289438274934bc870":["f4ac57acabd75209118610266e690b498316434b"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"12f7f335611574989edc8f87d25d91e89aa385b6":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"c9578f99a6012b38cadca42a29f0bc79cdd5f3c6":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"1d028314cced5858683a1bb4741423d0f934257b":["c9578f99a6012b38cadca42a29f0bc79cdd5f3c6","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"022a4de90e0479b604264ca9c2e134c996454ab3":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","744b111b17d15d490a648eb021bfa240e7f11556"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b4eb0a25318cc756077fbde9bd3052690aed03d":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"f4ac57acabd75209118610266e690b498316434b":["12f7f335611574989edc8f87d25d91e89aa385b6"],"67588aedbc6edbcce873bd0c3c7b4199fbf0987c":["bd0ef6574805f3cb9880e0983b7548a6aa933508","c9578f99a6012b38cadca42a29f0bc79cdd5f3c6"],"744b111b17d15d490a648eb021bfa240e7f11556":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f9d69f51e4c48f6b853fb7289438274934bc870"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"2f9d69f51e4c48f6b853fb7289438274934bc870":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["12f7f335611574989edc8f87d25d91e89aa385b6","7b4eb0a25318cc756077fbde9bd3052690aed03d"],"12f7f335611574989edc8f87d25d91e89aa385b6":["f4ac57acabd75209118610266e690b498316434b"],"c9578f99a6012b38cadca42a29f0bc79cdd5f3c6":["1d028314cced5858683a1bb4741423d0f934257b","67588aedbc6edbcce873bd0c3c7b4199fbf0987c"],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"1d028314cced5858683a1bb4741423d0f934257b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["c9578f99a6012b38cadca42a29f0bc79cdd5f3c6","67588aedbc6edbcce873bd0c3c7b4199fbf0987c","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"7b4eb0a25318cc756077fbde9bd3052690aed03d":[],"f4ac57acabd75209118610266e690b498316434b":["2f9d69f51e4c48f6b853fb7289438274934bc870"],"67588aedbc6edbcce873bd0c3c7b4199fbf0987c":[],"744b111b17d15d490a648eb021bfa240e7f11556":["022a4de90e0479b604264ca9c2e134c996454ab3"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["022a4de90e0479b604264ca9c2e134c996454ab3","744b111b17d15d490a648eb021bfa240e7f11556"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7b4eb0a25318cc756077fbde9bd3052690aed03d","67588aedbc6edbcce873bd0c3c7b4199fbf0987c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}