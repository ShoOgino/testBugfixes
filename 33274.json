{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","commits":[{"id":"a02833f6a58f0cce6c4ee5547ff3e72773d259e3","date":1376754895,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader#docsAndPositions(FieldInfo,TempTermState,Bits,DocsAndPositionsEnum,int).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, int flags)\n    throws IOException {\n\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if ((!indexHasOffsets || (flags & DocsAndPositionsEnum.FLAG_OFFSETS) == 0) &&\n        (!indexHasPayloads || (flags & DocsAndPositionsEnum.FLAG_PAYLOADS) == 0)) {\n      BlockDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (BlockDocsAndPositionsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockDocsAndPositionsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockDocsAndPositionsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset(liveDocs, (IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, TempTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, int flags)\n    throws IOException {\n\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if ((!indexHasOffsets || (flags & DocsAndPositionsEnum.FLAG_OFFSETS) == 0) &&\n        (!indexHasPayloads || (flags & DocsAndPositionsEnum.FLAG_PAYLOADS) == 0)) {\n      BlockDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (BlockDocsAndPositionsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockDocsAndPositionsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockDocsAndPositionsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset(liveDocs, (IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, int flags)\n    throws IOException {\n\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if ((!indexHasOffsets || (flags & DocsAndPositionsEnum.FLAG_OFFSETS) == 0) &&\n        (!indexHasPayloads || (flags & DocsAndPositionsEnum.FLAG_PAYLOADS) == 0)) {\n      BlockDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (BlockDocsAndPositionsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockDocsAndPositionsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockDocsAndPositionsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset(liveDocs, (IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a02833f6a58f0cce6c4ee5547ff3e72773d259e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["a02833f6a58f0cce6c4ee5547ff3e72773d259e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02833f6a58f0cce6c4ee5547ff3e72773d259e3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a02833f6a58f0cce6c4ee5547ff3e72773d259e3":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}