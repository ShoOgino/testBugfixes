{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.FastStringTokenizer#next(Token).mjava","commits":[{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.FastStringTokenizer#next(Token).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.FastStringTokenizer#next().mjava","sourceNew":"    public Token next(final Token reusableToken) {\n      assert reusableToken != null;\n      // cache loop instance vars (performance)\n      String s = str;\n      int len = s.length();\n      int i = pos;\n      boolean letter = isLetter;\n      \n      int start = 0;\n      String text;\n      do {\n        // find beginning of token\n        text = null;\n        while (i < len && !isTokenChar(s.charAt(i), letter)) {\n          i++;\n        }\n        \n        if (i < len) { // found beginning; now find end of token\n          start = i;\n          while (i < len && isTokenChar(s.charAt(i), letter)) {\n            i++;\n          }\n          \n          text = s.substring(start, i);\n          if (toLowerCase) text = text.toLowerCase(locale);\n//          if (toLowerCase) {            \n////            use next line once JDK 1.5 String.toLowerCase() performance regression is fixed\n////            see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265809\n//            text = s.substring(start, i).toLowerCase(); \n////            char[] chars = new char[i-start];\n////            for (int j=start; j < i; j++) chars[j-start] = Character.toLowerCase(s.charAt(j));\n////            text = new String(chars);\n//          } else {\n//            text = s.substring(start, i);\n//          }\n        }\n      } while (text != null && isStopWord(text));\n      \n      pos = i;\n      if (text == null)\n      {\n        return null;\n      }\n      return reusableToken.reinit(text, start, i);\n    }\n\n","sourceOld":"    public Token next() {\n      // cache loop instance vars (performance)\n      String s = str;\n      int len = s.length();\n      int i = pos;\n      boolean letter = isLetter;\n      \n      int start = 0;\n      String text;\n      do {\n        // find beginning of token\n        text = null;\n        while (i < len && !isTokenChar(s.charAt(i), letter)) {\n          i++;\n        }\n        \n        if (i < len) { // found beginning; now find end of token\n          start = i;\n          while (i < len && isTokenChar(s.charAt(i), letter)) {\n            i++;\n          }\n          \n          text = s.substring(start, i);\n          if (toLowerCase) text = text.toLowerCase(locale);\n//          if (toLowerCase) {            \n////            use next line once JDK 1.5 String.toLowerCase() performance regression is fixed\n////            see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265809\n//            text = s.substring(start, i).toLowerCase(); \n////            char[] chars = new char[i-start];\n////            for (int j=start; j < i; j++) chars[j-start] = Character.toLowerCase(s.charAt(j));\n////            text = new String(chars);\n//          } else {\n//            text = s.substring(start, i);\n//          }\n        }\n      } while (text != null && isStopWord(text));\n      \n      pos = i;\n      return text != null ? new Token(text, start, i) : null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.FastStringTokenizer#incrementToken().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.FastStringTokenizer#next(Token).mjava","sourceNew":"    public boolean incrementToken() {\n      // cache loop instance vars (performance)\n      String s = str;\n      int len = s.length();\n      int i = pos;\n      boolean letter = isLetter;\n      \n      int start = 0;\n      String text;\n      do {\n        // find beginning of token\n        text = null;\n        while (i < len && !isTokenChar(s.charAt(i), letter)) {\n          i++;\n        }\n        \n        if (i < len) { // found beginning; now find end of token\n          start = i;\n          while (i < len && isTokenChar(s.charAt(i), letter)) {\n            i++;\n          }\n          \n          text = s.substring(start, i);\n          if (toLowerCase) text = text.toLowerCase(locale);\n//          if (toLowerCase) {            \n////            use next line once JDK 1.5 String.toLowerCase() performance regression is fixed\n////            see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265809\n//            text = s.substring(start, i).toLowerCase(); \n////            char[] chars = new char[i-start];\n////            for (int j=start; j < i; j++) chars[j-start] = Character.toLowerCase(s.charAt(j));\n////            text = new String(chars);\n//          } else {\n//            text = s.substring(start, i);\n//          }\n        }\n      } while (text != null && isStopWord(text));\n      \n      pos = i;\n      if (text == null)\n      {\n        return false;\n      }\n      termAtt.setTermBuffer(text);\n      offsetAtt.setOffset(start, i);\n      return true;\n    }\n\n","sourceOld":"    public Token next(final Token reusableToken) {\n      assert reusableToken != null;\n      // cache loop instance vars (performance)\n      String s = str;\n      int len = s.length();\n      int i = pos;\n      boolean letter = isLetter;\n      \n      int start = 0;\n      String text;\n      do {\n        // find beginning of token\n        text = null;\n        while (i < len && !isTokenChar(s.charAt(i), letter)) {\n          i++;\n        }\n        \n        if (i < len) { // found beginning; now find end of token\n          start = i;\n          while (i < len && isTokenChar(s.charAt(i), letter)) {\n            i++;\n          }\n          \n          text = s.substring(start, i);\n          if (toLowerCase) text = text.toLowerCase(locale);\n//          if (toLowerCase) {            \n////            use next line once JDK 1.5 String.toLowerCase() performance regression is fixed\n////            see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265809\n//            text = s.substring(start, i).toLowerCase(); \n////            char[] chars = new char[i-start];\n////            for (int j=start; j < i; j++) chars[j-start] = Character.toLowerCase(s.charAt(j));\n////            text = new String(chars);\n//          } else {\n//            text = s.substring(start, i);\n//          }\n        }\n      } while (text != null && isStopWord(text));\n      \n      pos = i;\n      if (text == null)\n      {\n        return null;\n      }\n      return reusableToken.reinit(text, start, i);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9b5756469957918cac40a831acec9cf01c8c2bb3"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}