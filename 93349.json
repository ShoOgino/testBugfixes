{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemmer#deleteFromIfTestVowelBeforeIn(String,String[],boolean,String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemmer#deleteFromIfTestVowelBeforeIn(String,String[],boolean,String).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemmer#deleteFromIfTestVowelBeforeIn(String,String[],boolean,String).mjava","sourceNew":"\t/**\n\t * Delete a suffix searched in zone \"source\" if the preceding letter is (or isn't) a vowel\n\t *\n\t * @param source java.lang.String - the primary source zone for search\n\t * @param search java.lang.String[] - the strings to search for suppression\n\t * @param vowel boolean - true if we need a vowel before the search string\n\t * @param from java.lang.String - the secondary source zone for search (where vowel could be)\n\t * @return boolean - true if modified\n\t */\n\tprivate boolean deleteFromIfTestVowelBeforeIn( String source, String[] search, boolean vowel, String from ) {\n\t\tboolean found = false;\n\t\tif (source!=null && from!=null)\n\t\t{\n\t\t\tfor (int i = 0; i < search.length; i++) {\n\t\t\t\tif ( source.endsWith( search[i] ))\n\t\t\t\t{\n\t\t\t\t\tif ((search[i].length() + 1) <= from.length())\n\t\t\t\t\t{\n\t\t\t\t\t\tboolean test = isVowel(sb.charAt(sb.length()-(search[i].length()+1)));\n\t\t\t\t\t\tif (test == vowel)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsb.delete( sb.length() - search[i].length(), sb.length());\n\t\t\t\t\t\t\tmodified = true;\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\tsetStrings();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn found;\n\t}\n\n","sourceOld":"\t/**\n\t * Delete a suffix searched in zone \"source\" if the preceding letter is (or isn't) a vowel\n\t *\n\t * @param source java.lang.String - the primary source zone for search\n\t * @param search java.lang.String[] - the strings to search for suppression\n\t * @param vowel boolean - true if we need a vowel before the search string\n\t * @param from java.lang.String - the secondary source zone for search (where vowel could be)\n\t * @return boolean - true if modified\n\t */\n\tprivate boolean deleteFromIfTestVowelBeforeIn( String source, String[] search, boolean vowel, String from ) {\n\t\tboolean found = false;\n\t\tif (source!=null && from!=null)\n\t\t{\n\t\t\tfor (int i = 0; i < search.length; i++) {\n\t\t\t\tif ( source.endsWith( search[i] ))\n\t\t\t\t{\n\t\t\t\t\tif ((search[i].length() + 1) <= from.length())\n\t\t\t\t\t{\n\t\t\t\t\t\tboolean test = isVowel(sb.charAt(sb.length()-(search[i].length()+1)));\n\t\t\t\t\t\tif (test == vowel)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsb.delete( sb.length() - search[i].length(), sb.length());\n\t\t\t\t\t\t\tmodified = true;\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\tsetStrings();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn found;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchStemmer#deleteFromIfTestVowelBeforeIn(String,String[],boolean,String).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemmer#deleteFromIfTestVowelBeforeIn(String,String[],boolean,String).mjava","sourceNew":"\t/**\n\t * Delete a suffix searched in zone \"source\" if the preceding letter is (or isn't) a vowel\n\t *\n\t * @param source java.lang.String - the primary source zone for search\n\t * @param search java.lang.String[] - the strings to search for suppression\n\t * @param vowel boolean - true if we need a vowel before the search string\n\t * @param from java.lang.String - the secondary source zone for search (where vowel could be)\n\t * @return boolean - true if modified\n\t */\n\tprivate boolean deleteFromIfTestVowelBeforeIn( String source, String[] search, boolean vowel, String from ) {\n\t\tboolean found = false;\n\t\tif (source!=null && from!=null)\n\t\t{\n\t\t\tfor (int i = 0; i < search.length; i++) {\n\t\t\t\tif ( source.endsWith( search[i] ))\n\t\t\t\t{\n\t\t\t\t\tif ((search[i].length() + 1) <= from.length())\n\t\t\t\t\t{\n\t\t\t\t\t\tboolean test = isVowel(sb.charAt(sb.length()-(search[i].length()+1)));\n\t\t\t\t\t\tif (test == vowel)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsb.delete( sb.length() - search[i].length(), sb.length());\n\t\t\t\t\t\t\tmodified = true;\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\tsetStrings();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn found;\n\t}\n\n","sourceOld":"\t/**\n\t * Delete a suffix searched in zone \"source\" if the preceding letter is (or isn't) a vowel\n\t *\n\t * @param source java.lang.String - the primary source zone for search\n\t * @param search java.lang.String[] - the strings to search for suppression\n\t * @param vowel boolean - true if we need a vowel before the search string\n\t * @param from java.lang.String - the secondary source zone for search (where vowel could be)\n\t * @return boolean - true if modified\n\t */\n\tprivate boolean deleteFromIfTestVowelBeforeIn( String source, String[] search, boolean vowel, String from ) {\n\t\tboolean found = false;\n\t\tif (source!=null && from!=null)\n\t\t{\n\t\t\tfor (int i = 0; i < search.length; i++) {\n\t\t\t\tif ( source.endsWith( search[i] ))\n\t\t\t\t{\n\t\t\t\t\tif ((search[i].length() + 1) <= from.length())\n\t\t\t\t\t{\n\t\t\t\t\t\tboolean test = isVowel(sb.charAt(sb.length()-(search[i].length()+1)));\n\t\t\t\t\t\tif (test == vowel)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsb.delete( sb.length() - search[i].length(), sb.length());\n\t\t\t\t\t\t\tmodified = true;\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\tsetStrings();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn found;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}