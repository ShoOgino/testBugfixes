{"path":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils.PolygonPredicate#test(int,int).mjava","commits":[{"id":"ee49d43fb47965f24d4ad89e7a1bdcc10410d615","date":1485765906,"type":2,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils.PolygonPredicate#test(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils.DistancePredicate#apply(int,int).mjava","sourceNew":"    /** Check whether the given point is within the considered polygon.\n     *  NOTE: this operates directly on the encoded representation of points. */\n    public boolean test(int lat, int lon) {\n      final int lat2 = ((lat - Integer.MIN_VALUE) >>> latShift);\n      if (lat2 < latBase || lat2 >= latBase + maxLatDelta) {\n        return false;\n      }\n      int lon2 = ((lon - Integer.MIN_VALUE) >>> lonShift);\n      if (lon2 < lonBase) { // wrap\n        lon2 += 1 << (32 - lonShift);\n      }\n      assert Integer.toUnsignedLong(lon2) >= lonBase;\n      assert lon2 - lonBase >= 0;\n      if (lon2 - lonBase >= maxLonDelta) {\n        return false;\n      }\n\n      final int relation = relations[(lat2 - latBase) * maxLonDelta + (lon2 - lonBase)];\n      if (relation == Relation.CELL_CROSSES_QUERY.ordinal()) {\n        return tree.contains(decodeLatitude(lat), decodeLongitude(lon));\n      } else {\n        return relation == Relation.CELL_INSIDE_QUERY.ordinal();\n      }\n    }\n\n","sourceOld":"    /** Check whether the given point is within a distance of another point.\n     *  NOTE: this operates directly on the encoded representation of points. */\n    public boolean apply(int lat, int lon) {\n      final int lat2 = ((lat - Integer.MIN_VALUE) >>> latShift);\n      if (lat2 < latBase || lat2 >= latBase + maxLatDelta) {\n        return false;\n      }\n      int lon2 = ((lon - Integer.MIN_VALUE) >>> lonShift);\n      if (lon2 < lonBase) { // wrap\n        lon2 += 1L << (32 - lonShift);\n        assert lon2 >= lonBase;\n      }\n      if (lon2 - lonBase >= maxLonDelta) {\n        return false;\n      }\n\n      final int relation = relations[(lat2 - latBase) * maxLonDelta + (lon2 - lonBase)];\n      if (relation == Relation.CELL_CROSSES_QUERY.ordinal()) {\n        return SloppyMath.haversinSortKey(\n            decodeLatitude(lat), decodeLongitude(lon),\n            this.lat, this.lon) <= distanceKey;\n      } else {\n        return relation == Relation.CELL_INSIDE_QUERY.ordinal();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":2,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils.PolygonPredicate#test(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils.DistancePredicate#apply(int,int).mjava","sourceNew":"    /** Check whether the given point is within the considered polygon.\n     *  NOTE: this operates directly on the encoded representation of points. */\n    public boolean test(int lat, int lon) {\n      final int lat2 = ((lat - Integer.MIN_VALUE) >>> latShift);\n      if (lat2 < latBase || lat2 >= latBase + maxLatDelta) {\n        return false;\n      }\n      int lon2 = ((lon - Integer.MIN_VALUE) >>> lonShift);\n      if (lon2 < lonBase) { // wrap\n        lon2 += 1 << (32 - lonShift);\n      }\n      assert Integer.toUnsignedLong(lon2) >= lonBase;\n      assert lon2 - lonBase >= 0;\n      if (lon2 - lonBase >= maxLonDelta) {\n        return false;\n      }\n\n      final int relation = relations[(lat2 - latBase) * maxLonDelta + (lon2 - lonBase)];\n      if (relation == Relation.CELL_CROSSES_QUERY.ordinal()) {\n        return tree.contains(decodeLatitude(lat), decodeLongitude(lon));\n      } else {\n        return relation == Relation.CELL_INSIDE_QUERY.ordinal();\n      }\n    }\n\n","sourceOld":"    /** Check whether the given point is within a distance of another point.\n     *  NOTE: this operates directly on the encoded representation of points. */\n    public boolean apply(int lat, int lon) {\n      final int lat2 = ((lat - Integer.MIN_VALUE) >>> latShift);\n      if (lat2 < latBase || lat2 >= latBase + maxLatDelta) {\n        return false;\n      }\n      int lon2 = ((lon - Integer.MIN_VALUE) >>> lonShift);\n      if (lon2 < lonBase) { // wrap\n        lon2 += 1L << (32 - lonShift);\n        assert lon2 >= lonBase;\n      }\n      if (lon2 - lonBase >= maxLonDelta) {\n        return false;\n      }\n\n      final int relation = relations[(lat2 - latBase) * maxLonDelta + (lon2 - lonBase)];\n      if (relation == Relation.CELL_CROSSES_QUERY.ordinal()) {\n        return SloppyMath.haversinSortKey(\n            decodeLatitude(lat), decodeLongitude(lon),\n            this.lat, this.lon) <= distanceKey;\n      } else {\n        return relation == Relation.CELL_INSIDE_QUERY.ordinal();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils.PolygonPredicate#test(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils.PolygonPredicate#test(int,int).mjava","sourceNew":"    /** Check whether the given point is within the considered polygon.\n     *  NOTE: this operates directly on the encoded representation of points. */\n    public boolean test(int lat, int lon) {\n      final int lat2 = ((lat - Integer.MIN_VALUE) >>> latShift);\n      if (lat2 < latBase || lat2 >= latBase + maxLatDelta) {\n        return false;\n      }\n      int lon2 = ((lon - Integer.MIN_VALUE) >>> lonShift);\n      if (lon2 < lonBase) { // wrap\n        lon2 += 1 << (32 - lonShift);\n      }\n      assert Integer.toUnsignedLong(lon2) >= lonBase;\n      assert lon2 - lonBase >= 0;\n      if (lon2 - lonBase >= maxLonDelta) {\n        return false;\n      }\n\n      final int relation = relations[(lat2 - latBase) * maxLonDelta + (lon2 - lonBase)];\n      if (relation == Relation.CELL_CROSSES_QUERY.ordinal()) {\n        return tree.contains(decodeLongitude(lon), decodeLatitude(lat));\n      } else {\n        return relation == Relation.CELL_INSIDE_QUERY.ordinal();\n      }\n    }\n\n","sourceOld":"    /** Check whether the given point is within the considered polygon.\n     *  NOTE: this operates directly on the encoded representation of points. */\n    public boolean test(int lat, int lon) {\n      final int lat2 = ((lat - Integer.MIN_VALUE) >>> latShift);\n      if (lat2 < latBase || lat2 >= latBase + maxLatDelta) {\n        return false;\n      }\n      int lon2 = ((lon - Integer.MIN_VALUE) >>> lonShift);\n      if (lon2 < lonBase) { // wrap\n        lon2 += 1 << (32 - lonShift);\n      }\n      assert Integer.toUnsignedLong(lon2) >= lonBase;\n      assert lon2 - lonBase >= 0;\n      if (lon2 - lonBase >= maxLonDelta) {\n        return false;\n      }\n\n      final int relation = relations[(lat2 - latBase) * maxLonDelta + (lon2 - lonBase)];\n      if (relation == Relation.CELL_CROSSES_QUERY.ordinal()) {\n        return tree.contains(decodeLatitude(lat), decodeLongitude(lon));\n      } else {\n        return relation == Relation.CELL_INSIDE_QUERY.ordinal();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils.PolygonPredicate#test(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils.PolygonPredicate#test(int,int).mjava","sourceNew":"    /** Check whether the given point is within the considered polygon.\n     *  NOTE: this operates directly on the encoded representation of points. */\n    public boolean test(int lat, int lon) {\n      final int lat2 = ((lat - Integer.MIN_VALUE) >>> latShift);\n      if (lat2 < latBase || lat2 >= latBase + maxLatDelta) {\n        return false;\n      }\n      int lon2 = ((lon - Integer.MIN_VALUE) >>> lonShift);\n      if (lon2 < lonBase) { // wrap\n        lon2 += 1 << (32 - lonShift);\n      }\n      assert Integer.toUnsignedLong(lon2) >= lonBase;\n      assert lon2 - lonBase >= 0;\n      if (lon2 - lonBase >= maxLonDelta) {\n        return false;\n      }\n\n      final int relation = relations[(lat2 - latBase) * maxLonDelta + (lon2 - lonBase)];\n      if (relation == Relation.CELL_CROSSES_QUERY.ordinal()) {\n        return tree.contains(decodeLongitude(lon), decodeLatitude(lat));\n      } else {\n        return relation == Relation.CELL_INSIDE_QUERY.ordinal();\n      }\n    }\n\n","sourceOld":"    /** Check whether the given point is within the considered polygon.\n     *  NOTE: this operates directly on the encoded representation of points. */\n    public boolean test(int lat, int lon) {\n      final int lat2 = ((lat - Integer.MIN_VALUE) >>> latShift);\n      if (lat2 < latBase || lat2 >= latBase + maxLatDelta) {\n        return false;\n      }\n      int lon2 = ((lon - Integer.MIN_VALUE) >>> lonShift);\n      if (lon2 < lonBase) { // wrap\n        lon2 += 1 << (32 - lonShift);\n      }\n      assert Integer.toUnsignedLong(lon2) >= lonBase;\n      assert lon2 - lonBase >= 0;\n      if (lon2 - lonBase >= maxLonDelta) {\n        return false;\n      }\n\n      final int relation = relations[(lat2 - latBase) * maxLonDelta + (lon2 - lonBase)];\n      if (relation == Relation.CELL_CROSSES_QUERY.ordinal()) {\n        return tree.contains(decodeLatitude(lat), decodeLongitude(lon));\n      } else {\n        return relation == Relation.CELL_INSIDE_QUERY.ordinal();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["ee49d43fb47965f24d4ad89e7a1bdcc10410d615"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee49d43fb47965f24d4ad89e7a1bdcc10410d615"],"ee49d43fb47965f24d4ad89e7a1bdcc10410d615":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"b0b597c65628ca9e73913a07e81691f8229bae35":["ee49d43fb47965f24d4ad89e7a1bdcc10410d615","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","ee49d43fb47965f24d4ad89e7a1bdcc10410d615"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"ee49d43fb47965f24d4ad89e7a1bdcc10410d615":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}