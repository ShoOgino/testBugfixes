{"path":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"/dev/null","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new KeywordAnalyzer(),\n        IndexWriter.MaxFieldLength.UNLIMITED);\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.close();   \n    \n    IndexSearcher searcher = new IndexSearcher(dir);\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7edb20114e86ec883b0b08bd624eee852c565c06","date":1273941247,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new MockAnalyzer(MockAnalyzer.KEYWORD, false),\n        IndexWriter.MaxFieldLength.UNLIMITED);\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.close();   \n    \n    IndexSearcher searcher = new IndexSearcher(dir);\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new KeywordAnalyzer(),\n        IndexWriter.MaxFieldLength.UNLIMITED);\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.close();   \n    \n    IndexSearcher searcher = new IndexSearcher(dir);\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ade882efb2f2235dafb176284c1e35dbdb1c126","date":1274043418,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new MockAnalyzer(MockTokenizer.KEYWORD, false),\n        IndexWriter.MaxFieldLength.UNLIMITED);\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.close();   \n    \n    IndexSearcher searcher = new IndexSearcher(dir);\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new MockAnalyzer(MockAnalyzer.KEYWORD, false),\n        IndexWriter.MaxFieldLength.UNLIMITED);\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.close();   \n    \n    IndexSearcher searcher = new IndexSearcher(dir);\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.KEYWORD, false)));\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new MockAnalyzer(MockTokenizer.KEYWORD, false),\n        IndexWriter.MaxFieldLength.UNLIMITED);\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.close();   \n    \n    IndexSearcher searcher = new IndexSearcher(dir);\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.KEYWORD, false)));\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new MockAnalyzer(MockTokenizer.KEYWORD, false),\n        IndexWriter.MaxFieldLength.UNLIMITED);\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.close();   \n    \n    IndexSearcher searcher = new IndexSearcher(dir);\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(MockTokenizer.KEYWORD, false));\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.KEYWORD, false)));\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(MockTokenizer.KEYWORD, false));\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.KEYWORD, false)));\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(MockTokenizer.KEYWORD, false));\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.KEYWORD, false)));\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    MockRAMDirectory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(MockTokenizer.KEYWORD, false));\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(MockTokenizer.KEYWORD, false));\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    MockRAMDirectory dir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(MockTokenizer.KEYWORD, false));\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    MockRAMDirectory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(MockTokenizer.KEYWORD, false));\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(MockTokenizer.KEYWORD, false));\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    MockRAMDirectory dir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(MockTokenizer.KEYWORD, false));\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(MockTokenizer.KEYWORD, false));\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(MockTokenizer.KEYWORD, false));\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(MockTokenizer.KEYWORD, false));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(MockTokenizer.KEYWORD, false));\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(MockTokenizer.KEYWORD, false));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    RAMDirectory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(MockTokenizer.KEYWORD, false));\n    \n    Document doc = new Document();\n    Field field = new Field(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.KEYWORD, false)).setMergePolicy(newInOrderLogMergePolicy()));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(MockTokenizer.KEYWORD, false));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.KEYWORD, false)).setMergePolicy(newInOrderLogMergePolicy()));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.KEYWORD, false)).setMergePolicy(newInOrderLogMergePolicy()));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.KEYWORD, false)).setMergePolicy(newInOrderLogMergePolicy()));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(MockTokenizer.KEYWORD, false));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.KEYWORD, false)).setMergePolicy(newInOrderLogMergePolicy()));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockAnalyzer(MockTokenizer.KEYWORD, false));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.KEYWORD, false)).setMergePolicy(newInOrderLogMergePolicy()));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.KEYWORD, false)).setMergePolicy(newInOrderLogMergePolicy()));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.KEYWORD, false)).setMergePolicy(newInOrderLogMergePolicy()));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.KEYWORD, false)).setMergePolicy(newInOrderLogMergePolicy()));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    final SimilarityProvider delegate = searcher.getSimilarityProvider();\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return delegate.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public Similarity get(String field) {\n        return delegate.get(field);\n      }\n    });\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    final SimilarityProvider delegate = searcher.getSimilarityProvider();\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return delegate.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public Similarity get(String field) {\n        return delegate.get(field);\n      }\n    });\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    \n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    final SimilarityProvider delegate = searcher.getSimilarityProvider();\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return delegate.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public Similarity get(String field) {\n        return delegate.get(field);\n      }\n    });\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    final SimilarityProvider delegate = searcher.getSimilarityProvider();\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return delegate.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public Similarity get(String field) {\n        return delegate.get(field);\n      }\n    });\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    final SimilarityProvider delegate = searcher.getSimilarityProvider();\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return delegate.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public Similarity get(String field) {\n        return delegate.get(field);\n      }\n    });\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    final SimilarityProvider delegate = searcher.getSimilarityProvider();\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return delegate.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public Similarity get(String field) {\n        return delegate.get(field);\n      }\n    });\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    final SimilarityProvider delegate = searcher.getSimilarityProvider();\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return delegate.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public Similarity get(String field) {\n        return delegate.get(field);\n      }\n    });\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    searcher.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    final SimilarityProvider delegate = searcher.getSimilarityProvider();\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return delegate.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public Similarity get(String field) {\n        return delegate.get(field);\n      }\n    });\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["06584e6e98d592b34e1329b384182f368d2025e8","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","132903c28af3aa6f67284b78de91c0f0a99488c2"],"c19f985e36a65cc969e8e564fe337a0d41512075":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"c084e47df29de3330311d69dabf515ceaa989512":["2ade882efb2f2235dafb176284c1e35dbdb1c126"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["06584e6e98d592b34e1329b384182f368d2025e8"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["132903c28af3aa6f67284b78de91c0f0a99488c2","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"7edb20114e86ec883b0b08bd624eee852c565c06":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"06584e6e98d592b34e1329b384182f368d2025e8":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"5f4e87790277826a2aea119328600dfb07761f32":["2ade882efb2f2235dafb176284c1e35dbdb1c126","c084e47df29de3330311d69dabf515ceaa989512"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["c19f985e36a65cc969e8e564fe337a0d41512075"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"2ade882efb2f2235dafb176284c1e35dbdb1c126":["7edb20114e86ec883b0b08bd624eee852c565c06"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["7edb20114e86ec883b0b08bd624eee852c565c06"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["06584e6e98d592b34e1329b384182f368d2025e8"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"c084e47df29de3330311d69dabf515ceaa989512":["15bbd254c1506df5299c4df8c148262c7bd6301e","4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","60ba444201d2570214b6fcf1d15600dc1a01f548","a3776dccca01c11e7046323cfad46a3b4a471233"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7edb20114e86ec883b0b08bd624eee852c565c06":["2ade882efb2f2235dafb176284c1e35dbdb1c126"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","3242a09f703274d3b9283f2064a1a33064b53a1b"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"06584e6e98d592b34e1329b384182f368d2025e8":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"962d04139994fce5193143ef35615499a9a96d78":[],"790e1fde4caa765b3faaad3fbcd25c6973450336":["01e5948db9a07144112d2f08f28ca2e3cd880348","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"2ade882efb2f2235dafb176284c1e35dbdb1c126":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}