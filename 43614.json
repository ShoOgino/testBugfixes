{"path":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testWriteVeryLongSuffix().mjava","commits":[{"id":"a78b813d9350cc28625598f6dbbb49b586a40618","date":1412073147,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testWriteVeryLongSuffix().mjava","pathOld":"/dev/null","sourceNew":"  public void testWriteVeryLongSuffix() throws Exception {\n    StringBuilder justLongEnough = new StringBuilder();\n    for (int i = 0; i < 255; i++) {\n      justLongEnough.append('a');\n    }\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, true);\n    byte[] id = StringHelper.randomId();\n    CodecUtil.writeSegmentHeader(output, \"foobar\", 5, id, justLongEnough.toString());\n    output.close();\n    \n    IndexInput input = new RAMInputStream(\"file\", file);\n    CodecUtil.checkSegmentHeader(input, \"foobar\", 5, 5, id, justLongEnough.toString());\n    assertEquals(input.getFilePointer(), input.length());\n    assertEquals(input.getFilePointer(), CodecUtil.segmentHeaderLength(\"foobar\", justLongEnough.toString()));\n    input.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testWriteVeryLongSuffix().mjava","pathOld":"/dev/null","sourceNew":"  public void testWriteVeryLongSuffix() throws Exception {\n    StringBuilder justLongEnough = new StringBuilder();\n    for (int i = 0; i < 255; i++) {\n      justLongEnough.append('a');\n    }\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, true);\n    byte[] id = StringHelper.randomId();\n    CodecUtil.writeSegmentHeader(output, \"foobar\", 5, id, justLongEnough.toString());\n    output.close();\n    \n    IndexInput input = new RAMInputStream(\"file\", file);\n    CodecUtil.checkSegmentHeader(input, \"foobar\", 5, 5, id, justLongEnough.toString());\n    assertEquals(input.getFilePointer(), input.length());\n    assertEquals(input.getFilePointer(), CodecUtil.segmentHeaderLength(\"foobar\", justLongEnough.toString()));\n    input.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testWriteVeryLongSuffix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testWriteVeryLongSuffix().mjava","sourceNew":"  public void testWriteVeryLongSuffix() throws Exception {\n    StringBuilder justLongEnough = new StringBuilder();\n    for (int i = 0; i < 255; i++) {\n      justLongEnough.append('a');\n    }\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, true);\n    byte[] id = StringHelper.randomId();\n    CodecUtil.writeIndexHeader(output, \"foobar\", 5, id, justLongEnough.toString());\n    output.close();\n    \n    IndexInput input = new RAMInputStream(\"file\", file);\n    CodecUtil.checkIndexHeader(input, \"foobar\", 5, 5, id, justLongEnough.toString());\n    assertEquals(input.getFilePointer(), input.length());\n    assertEquals(input.getFilePointer(), CodecUtil.indexHeaderLength(\"foobar\", justLongEnough.toString()));\n    input.close();\n  }\n\n","sourceOld":"  public void testWriteVeryLongSuffix() throws Exception {\n    StringBuilder justLongEnough = new StringBuilder();\n    for (int i = 0; i < 255; i++) {\n      justLongEnough.append('a');\n    }\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, true);\n    byte[] id = StringHelper.randomId();\n    CodecUtil.writeSegmentHeader(output, \"foobar\", 5, id, justLongEnough.toString());\n    output.close();\n    \n    IndexInput input = new RAMInputStream(\"file\", file);\n    CodecUtil.checkSegmentHeader(input, \"foobar\", 5, 5, id, justLongEnough.toString());\n    assertEquals(input.getFilePointer(), input.length());\n    assertEquals(input.getFilePointer(), CodecUtil.segmentHeaderLength(\"foobar\", justLongEnough.toString()));\n    input.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testWriteVeryLongSuffix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testWriteVeryLongSuffix().mjava","sourceNew":"  public void testWriteVeryLongSuffix() throws Exception {\n    StringBuilder justLongEnough = new StringBuilder();\n    for (int i = 0; i < 255; i++) {\n      justLongEnough.append('a');\n    }\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, true);\n    byte[] id = StringHelper.randomId();\n    CodecUtil.writeIndexHeader(output, \"foobar\", 5, id, justLongEnough.toString());\n    output.close();\n    \n    IndexInput input = new RAMInputStream(\"file\", file);\n    CodecUtil.checkIndexHeader(input, \"foobar\", 5, 5, id, justLongEnough.toString());\n    assertEquals(input.getFilePointer(), input.length());\n    assertEquals(input.getFilePointer(), CodecUtil.indexHeaderLength(\"foobar\", justLongEnough.toString()));\n    input.close();\n  }\n\n","sourceOld":"  public void testWriteVeryLongSuffix() throws Exception {\n    StringBuilder justLongEnough = new StringBuilder();\n    for (int i = 0; i < 255; i++) {\n      justLongEnough.append('a');\n    }\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, true);\n    byte[] id = StringHelper.randomId();\n    CodecUtil.writeSegmentHeader(output, \"foobar\", 5, id, justLongEnough.toString());\n    output.close();\n    \n    IndexInput input = new RAMInputStream(\"file\", file);\n    CodecUtil.checkSegmentHeader(input, \"foobar\", 5, 5, id, justLongEnough.toString());\n    assertEquals(input.getFilePointer(), input.length());\n    assertEquals(input.getFilePointer(), CodecUtil.segmentHeaderLength(\"foobar\", justLongEnough.toString()));\n    input.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71488d7f5786ae87541276121ecb69705a11a295","date":1465498138,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testWriteVeryLongSuffix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testWriteVeryLongSuffix().mjava","sourceNew":"  public void testWriteVeryLongSuffix() throws Exception {\n    StringBuilder justLongEnough = new StringBuilder();\n    for (int i = 0; i < 255; i++) {\n      justLongEnough.append('a');\n    }\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, true);\n    byte[] id = StringHelper.randomId();\n    CodecUtil.writeIndexHeader(output, \"foobar\", 5, id, justLongEnough.toString());\n    output.close();\n    \n    IndexInput input = new RAMInputStream(\"file\", file);\n    CodecUtil.checkIndexHeader(input, \"foobar\", 5, 5, id, justLongEnough.toString());\n    assertEquals(input.getFilePointer(), input.length());\n    assertEquals(input.getFilePointer(), CodecUtil.indexHeaderLength(\"foobar\", justLongEnough.toString()));\n    input.close();\n  }\n\n","sourceOld":"  public void testWriteVeryLongSuffix() throws Exception {\n    StringBuilder justLongEnough = new StringBuilder();\n    for (int i = 0; i < 255; i++) {\n      justLongEnough.append('a');\n    }\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, true);\n    byte[] id = StringHelper.randomId();\n    CodecUtil.writeIndexHeader(output, \"foobar\", 5, id, justLongEnough.toString());\n    output.close();\n    \n    IndexInput input = new RAMInputStream(\"file\", file);\n    CodecUtil.checkIndexHeader(input, \"foobar\", 5, 5, id, justLongEnough.toString());\n    assertEquals(input.getFilePointer(), input.length());\n    assertEquals(input.getFilePointer(), CodecUtil.indexHeaderLength(\"foobar\", justLongEnough.toString()));\n    input.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testWriteVeryLongSuffix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testWriteVeryLongSuffix().mjava","sourceNew":"  public void testWriteVeryLongSuffix() throws Exception {\n    StringBuilder justLongEnough = new StringBuilder();\n    for (int i = 0; i < 255; i++) {\n      justLongEnough.append('a');\n    }\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, true);\n    byte[] id = StringHelper.randomId();\n    CodecUtil.writeIndexHeader(output, \"foobar\", 5, id, justLongEnough.toString());\n    output.close();\n    \n    IndexInput input = new RAMInputStream(\"file\", file);\n    CodecUtil.checkIndexHeader(input, \"foobar\", 5, 5, id, justLongEnough.toString());\n    assertEquals(input.getFilePointer(), input.length());\n    assertEquals(input.getFilePointer(), CodecUtil.indexHeaderLength(\"foobar\", justLongEnough.toString()));\n    input.close();\n  }\n\n","sourceOld":"  public void testWriteVeryLongSuffix() throws Exception {\n    StringBuilder justLongEnough = new StringBuilder();\n    for (int i = 0; i < 255; i++) {\n      justLongEnough.append('a');\n    }\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, true);\n    byte[] id = StringHelper.randomId();\n    CodecUtil.writeIndexHeader(output, \"foobar\", 5, id, justLongEnough.toString());\n    output.close();\n    \n    IndexInput input = new RAMInputStream(\"file\", file);\n    CodecUtil.checkIndexHeader(input, \"foobar\", 5, 5, id, justLongEnough.toString());\n    assertEquals(input.getFilePointer(), input.length());\n    assertEquals(input.getFilePointer(), CodecUtil.indexHeaderLength(\"foobar\", justLongEnough.toString()));\n    input.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a78b813d9350cc28625598f6dbbb49b586a40618":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a78b813d9350cc28625598f6dbbb49b586a40618"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71488d7f5786ae87541276121ecb69705a11a295":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["a78b813d9350cc28625598f6dbbb49b586a40618"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","71488d7f5786ae87541276121ecb69705a11a295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71488d7f5786ae87541276121ecb69705a11a295"]},"commit2Childs":{"a78b813d9350cc28625598f6dbbb49b586a40618":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a78b813d9350cc28625598f6dbbb49b586a40618","9bb9a29a5e71a90295f175df8919802993142c9a"],"71488d7f5786ae87541276121ecb69705a11a295":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71488d7f5786ae87541276121ecb69705a11a295","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}