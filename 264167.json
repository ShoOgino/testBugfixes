{"path":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","sourceNew":"    private void decodeMetaData() throws IOException {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        if (VERBOSE) System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","sourceOld":"    private void decodeMetaData() throws IOException {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        if (VERBOSE) System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06e9e87a586e724774d060a39c60ed1178637952","date":1331555866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","sourceNew":"    private void decodeMetaData() throws IOException {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","sourceOld":"    private void decodeMetaData() throws IOException {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        if (VERBOSE) System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","sourceNew":"    private void decodeMetaData() throws IOException {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","sourceOld":"    private void decodeMetaData() throws IOException {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        if (VERBOSE) System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","sourceNew":"    private void decodeMetaData() throws IOException {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","sourceOld":"    private void decodeMetaData() throws IOException {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","sourceNew":"    private void decodeMetaData() throws IOException {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","sourceOld":"    private void decodeMetaData() throws IOException {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","sourceNew":"    private void decodeMetaData() {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","sourceOld":"    private void decodeMetaData() throws IOException {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","bugFix":["c8bb0f45246d2d999b5b8b9136efd068fcece5c4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","sourceNew":"    private void decodeMetaData() {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","sourceOld":"    private void decodeMetaData() throws IOException {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","sourceNew":"    private void decodeMetaData() {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","sourceOld":"    private void decodeMetaData() {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["06e9e87a586e724774d060a39c60ed1178637952"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","06e9e87a586e724774d060a39c60ed1178637952"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["06e9e87a586e724774d060a39c60ed1178637952","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06e9e87a586e724774d060a39c60ed1178637952":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","06e9e87a586e724774d060a39c60ed1178637952"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"06e9e87a586e724774d060a39c60ed1178637952":["76923f6a33f2c4bec7f584e3f251261afe7ea276","38e3b736c7ca086d61b7dbb841c905ee115490da","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}