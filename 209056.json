{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionStateFormat2Test#testZkNodeLocation(CloudSolrClient).mjava","commits":[{"id":"8766ce00bfd19255fc95ae5e3110af2e94cd7623","date":1432802994,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionStateFormat2Test#testZkNodeLocation(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ExternalCollectionsTest#testZkNodeLocation().mjava","sourceNew":"  private void testZkNodeLocation(CloudSolrClient client) throws Exception{\n\n    String collectionName = \"myExternColl\";\n\n    createCollection(collectionName, client, 2, 2);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"does not exist collection state externally\",\n        cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n    Stat stat = new Stat();\n    byte[] data = cloudClient.getZkStateReader().getZkClient().getData(ZkStateReader.getCollectionPath(collectionName), null, stat, true);\n    DocCollection c = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    assertEquals(\"The zkversion of the nodes must be same zkver:\" + stat.getVersion() , stat.getVersion(),clusterState.getCollection(collectionName).getZNodeVersion() );\n    assertTrue(\"DocCllection#getStateFormat() must be > 1\", cloudClient.getZkStateReader().getClusterState().getCollection(collectionName).getStateFormat() > 1);\n\n\n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    if (client == null) {\n      client = createCloudClient(null);\n    }\n\n    client.request(request);\n\n    checkForMissingCollection(collectionName);\n    assertFalse(\"collection state should not exist externally\", cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","sourceOld":"  private void testZkNodeLocation() throws Exception{\n\n    String collectionName = \"myExternColl\";\n\n    createCollection(collectionName, client, 2, 2);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"does not exist collection state externally\",\n        cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n    Stat stat = new Stat();\n    byte[] data = cloudClient.getZkStateReader().getZkClient().getData(ZkStateReader.getCollectionPath(collectionName), null, stat, true);\n    DocCollection c = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    assertEquals(\"The zkversion of the nodes must be same zkver:\" + stat.getVersion() , stat.getVersion(),clusterState.getCollection(collectionName).getZNodeVersion() );\n    assertTrue(\"DocCllection#getStateFormat() must be > 1\", cloudClient.getZkStateReader().getClusterState().getCollection(collectionName).getStateFormat() > 1);\n\n\n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    if (client == null) {\n      client = createCloudClient(null);\n    }\n\n    client.request(request);\n\n    checkForMissingCollection(collectionName);\n    assertFalse(\"collection state should not exist externally\", cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"234afba21d42e6c527535c6aa11baba09a4771f3","date":1432825127,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionStateFormat2Test#testZkNodeLocation(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionStateFormat2Test#testZkNodeLocation(CloudSolrClient).mjava","sourceNew":"  private void testZkNodeLocation(CloudSolrClient client) throws Exception{\n\n    String collectionName = \"myExternColl\";\n\n    createCollection(collectionName, client, 2, 2);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"does not exist collection state externally\",\n        cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n    Stat stat = new Stat();\n    byte[] data = cloudClient.getZkStateReader().getZkClient().getData(ZkStateReader.getCollectionPath(collectionName), null, stat, true);\n    DocCollection c = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    assertEquals(\"The zkversion of the nodes must be same zkver:\" + stat.getVersion() , stat.getVersion(),clusterState.getCollection(collectionName).getZNodeVersion() );\n    assertTrue(\"DocCllection#getStateFormat() must be > 1\", cloudClient.getZkStateReader().getClusterState().getCollection(collectionName).getStateFormat() > 1);\n\n\n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    if (client == null) {\n      client = createCloudClient(null);\n    }\n\n    client.request(request);\n\n    assertCollectionNotExists(collectionName, 45);\n    assertFalse(\"collection state should not exist externally\", cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","sourceOld":"  private void testZkNodeLocation(CloudSolrClient client) throws Exception{\n\n    String collectionName = \"myExternColl\";\n\n    createCollection(collectionName, client, 2, 2);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"does not exist collection state externally\",\n        cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n    Stat stat = new Stat();\n    byte[] data = cloudClient.getZkStateReader().getZkClient().getData(ZkStateReader.getCollectionPath(collectionName), null, stat, true);\n    DocCollection c = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    assertEquals(\"The zkversion of the nodes must be same zkver:\" + stat.getVersion() , stat.getVersion(),clusterState.getCollection(collectionName).getZNodeVersion() );\n    assertTrue(\"DocCllection#getStateFormat() must be > 1\", cloudClient.getZkStateReader().getClusterState().getCollection(collectionName).getStateFormat() > 1);\n\n\n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    if (client == null) {\n      client = createCloudClient(null);\n    }\n\n    client.request(request);\n\n    checkForMissingCollection(collectionName);\n    assertFalse(\"collection state should not exist externally\", cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a02c54923e5f4de08097fa9028e09e8cf5caa82","date":1475573567,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionStateFormat2Test#testZkNodeLocation(CloudSolrClient).mjava","sourceNew":null,"sourceOld":"  private void testZkNodeLocation(CloudSolrClient client) throws Exception{\n\n    String collectionName = \"myExternColl\";\n\n    createCollection(collectionName, client, 2, 2);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"does not exist collection state externally\",\n        cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n    Stat stat = new Stat();\n    byte[] data = cloudClient.getZkStateReader().getZkClient().getData(ZkStateReader.getCollectionPath(collectionName), null, stat, true);\n    DocCollection c = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    assertEquals(\"The zkversion of the nodes must be same zkver:\" + stat.getVersion() , stat.getVersion(),clusterState.getCollection(collectionName).getZNodeVersion() );\n    assertTrue(\"DocCllection#getStateFormat() must be > 1\", cloudClient.getZkStateReader().getClusterState().getCollection(collectionName).getStateFormat() > 1);\n\n\n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    if (client == null) {\n      client = createCloudClient(null);\n    }\n\n    client.request(request);\n\n    assertCollectionNotExists(collectionName, 45);\n    assertFalse(\"collection state should not exist externally\", cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionStateFormat2Test#testZkNodeLocation(CloudSolrClient).mjava","sourceNew":null,"sourceOld":"  private void testZkNodeLocation(CloudSolrClient client) throws Exception{\n\n    String collectionName = \"myExternColl\";\n\n    createCollection(collectionName, client, 2, 2);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"does not exist collection state externally\",\n        cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n    Stat stat = new Stat();\n    byte[] data = cloudClient.getZkStateReader().getZkClient().getData(ZkStateReader.getCollectionPath(collectionName), null, stat, true);\n    DocCollection c = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    assertEquals(\"The zkversion of the nodes must be same zkver:\" + stat.getVersion() , stat.getVersion(),clusterState.getCollection(collectionName).getZNodeVersion() );\n    assertTrue(\"DocCllection#getStateFormat() must be > 1\", cloudClient.getZkStateReader().getClusterState().getCollection(collectionName).getStateFormat() > 1);\n\n\n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    if (client == null) {\n      client = createCloudClient(null);\n    }\n\n    client.request(request);\n\n    assertCollectionNotExists(collectionName, 45);\n    assertFalse(\"collection state should not exist externally\", cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionStateFormat2Test#testZkNodeLocation(CloudSolrClient).mjava","sourceNew":null,"sourceOld":"  private void testZkNodeLocation(CloudSolrClient client) throws Exception{\n\n    String collectionName = \"myExternColl\";\n\n    createCollection(collectionName, client, 2, 2);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"does not exist collection state externally\",\n        cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n    Stat stat = new Stat();\n    byte[] data = cloudClient.getZkStateReader().getZkClient().getData(ZkStateReader.getCollectionPath(collectionName), null, stat, true);\n    DocCollection c = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    assertEquals(\"The zkversion of the nodes must be same zkver:\" + stat.getVersion() , stat.getVersion(),clusterState.getCollection(collectionName).getZNodeVersion() );\n    assertTrue(\"DocCllection#getStateFormat() must be > 1\", cloudClient.getZkStateReader().getClusterState().getCollection(collectionName).getStateFormat() > 1);\n\n\n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    if (client == null) {\n      client = createCloudClient(null);\n    }\n\n    client.request(request);\n\n    assertCollectionNotExists(collectionName, 45);\n    assertFalse(\"collection state should not exist externally\", cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1967bed916cc89da82a1c2085f27976da6d08cbd":["234afba21d42e6c527535c6aa11baba09a4771f3","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"234afba21d42e6c527535c6aa11baba09a4771f3":["8766ce00bfd19255fc95ae5e3110af2e94cd7623"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8766ce00bfd19255fc95ae5e3110af2e94cd7623":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["234afba21d42e6c527535c6aa11baba09a4771f3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["234afba21d42e6c527535c6aa11baba09a4771f3","1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1967bed916cc89da82a1c2085f27976da6d08cbd"]},"commit2Childs":{"1967bed916cc89da82a1c2085f27976da6d08cbd":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"234afba21d42e6c527535c6aa11baba09a4771f3":["1967bed916cc89da82a1c2085f27976da6d08cbd","5a02c54923e5f4de08097fa9028e09e8cf5caa82","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8766ce00bfd19255fc95ae5e3110af2e94cd7623"],"8766ce00bfd19255fc95ae5e3110af2e94cd7623":["234afba21d42e6c527535c6aa11baba09a4771f3"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}