{"path":"lucene/src/java/org/apache/lucene/util/TwoPhaseCommitTool#execute(TwoPhaseCommit...).mjava","commits":[{"id":"444ce93914cbb5645df5177663d7d707087fad95","date":1307988447,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/TwoPhaseCommitTool#execute(TwoPhaseCommit...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Executes a 2-phase commit algorithm by first\n   * {@link TwoPhaseCommit#prepareCommit()} all objects and only if all succeed,\n   * it proceeds with {@link TwoPhaseCommit#commit()}. If any of the objects\n   * fail on either the preparation or actual commit, it terminates and\n   * {@link TwoPhaseCommit#rollback()} all of them.\n   * <p>\n   * <b>NOTE:</b> it may happen that an object fails to commit, after few have\n   * already successfully committed. This tool will still issue a rollback\n   * instruction on them as well, but depending on the implementation, it may\n   * not have any effect.\n   * <p>\n   * <b>NOTE:</b> if any of the objects are {@code null}, this method simply\n   * skips over them.\n   * \n   * @throws PrepareCommitFailException\n   *           if any of the objects fail to\n   *           {@link TwoPhaseCommit#prepareCommit()}\n   * @throws CommitFailException\n   *           if any of the objects fail to {@link TwoPhaseCommit#commit()}\n   */\n  public static void execute(TwoPhaseCommit... objects)\n      throws PrepareCommitFailException, CommitFailException {\n    TwoPhaseCommit tpc = null;\n    try {\n      // first, all should successfully prepareCommit()\n      for (int i = 0; i < objects.length; i++) {\n        tpc = objects[i];\n        if (tpc != null) {\n          tpc.prepareCommit();\n        }\n      }\n    } catch (Throwable t) {\n      // first object that fails results in rollback all of them and\n      // throwing an exception.\n      rollback(objects);\n      throw new PrepareCommitFailException(t, tpc);\n    }\n    \n    // If all successfully prepareCommit(), attempt the actual commit()\n    try {\n      for (int i = 0; i < objects.length; i++) {\n        tpc = objects[i];\n        if (tpc != null) {\n          tpc.commit();\n        }\n      }\n    } catch (Throwable t) {\n      // first object that fails results in rollback all of them and\n      // throwing an exception.\n      rollback(objects);\n      throw new CommitFailException(t, tpc);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/TwoPhaseCommitTool#execute(TwoPhaseCommit...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Executes a 2-phase commit algorithm by first\n   * {@link TwoPhaseCommit#prepareCommit()} all objects and only if all succeed,\n   * it proceeds with {@link TwoPhaseCommit#commit()}. If any of the objects\n   * fail on either the preparation or actual commit, it terminates and\n   * {@link TwoPhaseCommit#rollback()} all of them.\n   * <p>\n   * <b>NOTE:</b> it may happen that an object fails to commit, after few have\n   * already successfully committed. This tool will still issue a rollback\n   * instruction on them as well, but depending on the implementation, it may\n   * not have any effect.\n   * <p>\n   * <b>NOTE:</b> if any of the objects are {@code null}, this method simply\n   * skips over them.\n   * \n   * @throws PrepareCommitFailException\n   *           if any of the objects fail to\n   *           {@link TwoPhaseCommit#prepareCommit()}\n   * @throws CommitFailException\n   *           if any of the objects fail to {@link TwoPhaseCommit#commit()}\n   */\n  public static void execute(TwoPhaseCommit... objects)\n      throws PrepareCommitFailException, CommitFailException {\n    TwoPhaseCommit tpc = null;\n    try {\n      // first, all should successfully prepareCommit()\n      for (int i = 0; i < objects.length; i++) {\n        tpc = objects[i];\n        if (tpc != null) {\n          tpc.prepareCommit();\n        }\n      }\n    } catch (Throwable t) {\n      // first object that fails results in rollback all of them and\n      // throwing an exception.\n      rollback(objects);\n      throw new PrepareCommitFailException(t, tpc);\n    }\n    \n    // If all successfully prepareCommit(), attempt the actual commit()\n    try {\n      for (int i = 0; i < objects.length; i++) {\n        tpc = objects[i];\n        if (tpc != null) {\n          tpc.commit();\n        }\n      }\n    } catch (Throwable t) {\n      // first object that fails results in rollback all of them and\n      // throwing an exception.\n      rollback(objects);\n      throw new CommitFailException(t, tpc);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/TwoPhaseCommitTool#execute(TwoPhaseCommit...).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/TwoPhaseCommitTool#execute(TwoPhaseCommit...).mjava","sourceNew":"  /**\n   * Executes a 2-phase commit algorithm by first\n   * {@link TwoPhaseCommit#prepareCommit()} all objects and only if all succeed,\n   * it proceeds with {@link TwoPhaseCommit#commit()}. If any of the objects\n   * fail on either the preparation or actual commit, it terminates and\n   * {@link TwoPhaseCommit#rollback()} all of them.\n   * <p>\n   * <b>NOTE:</b> it may happen that an object fails to commit, after few have\n   * already successfully committed. This tool will still issue a rollback\n   * instruction on them as well, but depending on the implementation, it may\n   * not have any effect.\n   * <p>\n   * <b>NOTE:</b> if any of the objects are {@code null}, this method simply\n   * skips over them.\n   * \n   * @throws PrepareCommitFailException\n   *           if any of the objects fail to\n   *           {@link TwoPhaseCommit#prepareCommit()}\n   * @throws CommitFailException\n   *           if any of the objects fail to {@link TwoPhaseCommit#commit()}\n   */\n  public static void execute(TwoPhaseCommit... objects)\n      throws PrepareCommitFailException, CommitFailException {\n    TwoPhaseCommit tpc = null;\n    try {\n      // first, all should successfully prepareCommit()\n      for (int i = 0; i < objects.length; i++) {\n        tpc = objects[i];\n        if (tpc != null) {\n          tpc.prepareCommit();\n        }\n      }\n    } catch (Throwable t) {\n      // first object that fails results in rollback all of them and\n      // throwing an exception.\n      rollback(objects);\n      throw new PrepareCommitFailException(t, tpc);\n    }\n    \n    // If all successfully prepareCommit(), attempt the actual commit()\n    try {\n      for (int i = 0; i < objects.length; i++) {\n        tpc = objects[i];\n        if (tpc != null) {\n          tpc.commit();\n        }\n      }\n    } catch (Throwable t) {\n      // first object that fails results in rollback all of them and\n      // throwing an exception.\n      rollback(objects);\n      throw new CommitFailException(t, tpc);\n    }\n  }\n\n","sourceOld":"  /**\n   * Executes a 2-phase commit algorithm by first\n   * {@link TwoPhaseCommit#prepareCommit()} all objects and only if all succeed,\n   * it proceeds with {@link TwoPhaseCommit#commit()}. If any of the objects\n   * fail on either the preparation or actual commit, it terminates and\n   * {@link TwoPhaseCommit#rollback()} all of them.\n   * <p>\n   * <b>NOTE:</b> it may happen that an object fails to commit, after few have\n   * already successfully committed. This tool will still issue a rollback\n   * instruction on them as well, but depending on the implementation, it may\n   * not have any effect.\n   * <p>\n   * <b>NOTE:</b> if any of the objects are {@code null}, this method simply\n   * skips over them.\n   * \n   * @throws PrepareCommitFailException\n   *           if any of the objects fail to\n   *           {@link TwoPhaseCommit#prepareCommit()}\n   * @throws CommitFailException\n   *           if any of the objects fail to {@link TwoPhaseCommit#commit()}\n   */\n  public static void execute(TwoPhaseCommit... objects)\n      throws PrepareCommitFailException, CommitFailException {\n    TwoPhaseCommit tpc = null;\n    try {\n      // first, all should successfully prepareCommit()\n      for (int i = 0; i < objects.length; i++) {\n        tpc = objects[i];\n        if (tpc != null) {\n          tpc.prepareCommit();\n        }\n      }\n    } catch (Throwable t) {\n      // first object that fails results in rollback all of them and\n      // throwing an exception.\n      rollback(objects);\n      throw new PrepareCommitFailException(t, tpc);\n    }\n    \n    // If all successfully prepareCommit(), attempt the actual commit()\n    try {\n      for (int i = 0; i < objects.length; i++) {\n        tpc = objects[i];\n        if (tpc != null) {\n          tpc.commit();\n        }\n      }\n    } catch (Throwable t) {\n      // first object that fails results in rollback all of them and\n      // throwing an exception.\n      rollback(objects);\n      throw new CommitFailException(t, tpc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["444ce93914cbb5645df5177663d7d707087fad95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","444ce93914cbb5645df5177663d7d707087fad95"],"444ce93914cbb5645df5177663d7d707087fad95":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ed208afa1e7aa98899ddb1dedfddedddf898253","444ce93914cbb5645df5177663d7d707087fad95"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":[],"444ce93914cbb5645df5177663d7d707087fad95":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ed208afa1e7aa98899ddb1dedfddedddf898253","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}