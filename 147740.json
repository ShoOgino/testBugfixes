{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean,int).mjava","commits":[{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   * @param maxDeterminizedStates maximum number of states that can be created\n   *   while determinizing a\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize,\n      int maxDeterminizedStates) {\n    this.maxInterval = maxInterval;\n    a = Operations.determinize(a, maxDeterminizedStates);\n    this.automaton = a;\n    points = a.getStartPoints();\n    initial = 0;\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1]) {\n          i++;\n        }\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7543e96e2d4820e09334d36a699b998ed963f4f","date":1476121426,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean,int).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   * @param maxDeterminizedStates maximum number of states that can be created\n   *   while determinizing a\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize,\n      int maxDeterminizedStates) {\n    this.maxInterval = maxInterval;\n    a = Operations.determinize(a, maxDeterminizedStates);\n    this.automaton = a;\n    points = a.getStartPoints();\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1]) {\n          i++;\n        }\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   * @param maxDeterminizedStates maximum number of states that can be created\n   *   while determinizing a\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize,\n      int maxDeterminizedStates) {\n    this.maxInterval = maxInterval;\n    a = Operations.determinize(a, maxDeterminizedStates);\n    this.automaton = a;\n    points = a.getStartPoints();\n    initial = 0;\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1]) {\n          i++;\n        }\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean,int).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   * @param maxDeterminizedStates maximum number of states that can be created\n   *   while determinizing a\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize,\n      int maxDeterminizedStates) {\n    this.maxInterval = maxInterval;\n    a = Operations.determinize(a, maxDeterminizedStates);\n    this.automaton = a;\n    points = a.getStartPoints();\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1]) {\n          i++;\n        }\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   * @param maxDeterminizedStates maximum number of states that can be created\n   *   while determinizing a\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize,\n      int maxDeterminizedStates) {\n    this.maxInterval = maxInterval;\n    a = Operations.determinize(a, maxDeterminizedStates);\n    this.automaton = a;\n    points = a.getStartPoints();\n    initial = 0;\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1]) {\n          i++;\n        }\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ddee54b1c3df60fd6198e3aa64c78038a1be8df","date":1487008231,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean,int).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   * @param maxDeterminizedStates maximum number of states that can be created\n   *   while determinizing a\n   */\n  protected RunAutomaton(Automaton a, int alphabetSize, int maxDeterminizedStates) {\n    this.alphabetSize = alphabetSize;\n    a = Operations.determinize(a, maxDeterminizedStates);\n    this.automaton = a;\n    points = a.getStartPoints();\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    classmap = new int[Math.min(256, alphabetSize)];\n    int i = 0;\n    for (int j = 0; j < classmap.length; j++) {\n      if (i + 1 < points.length && j == points[i + 1]) {\n        i++;\n      }\n      classmap[j] = i;\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   * @param maxDeterminizedStates maximum number of states that can be created\n   *   while determinizing a\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize,\n      int maxDeterminizedStates) {\n    this.maxInterval = maxInterval;\n    a = Operations.determinize(a, maxDeterminizedStates);\n    this.automaton = a;\n    points = a.getStartPoints();\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1]) {\n          i++;\n        }\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean,int).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   * @param maxDeterminizedStates maximum number of states that can be created\n   *   while determinizing a\n   */\n  protected RunAutomaton(Automaton a, int alphabetSize, int maxDeterminizedStates) {\n    this.alphabetSize = alphabetSize;\n    a = Operations.determinize(a, maxDeterminizedStates);\n    this.automaton = a;\n    points = a.getStartPoints();\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    classmap = new int[Math.min(256, alphabetSize)];\n    int i = 0;\n    for (int j = 0; j < classmap.length; j++) {\n      if (i + 1 < points.length && j == points[i + 1]) {\n        i++;\n      }\n      classmap[j] = i;\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   * @param maxDeterminizedStates maximum number of states that can be created\n   *   while determinizing a\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize,\n      int maxDeterminizedStates) {\n    this.maxInterval = maxInterval;\n    a = Operations.determinize(a, maxDeterminizedStates);\n    this.automaton = a;\n    points = a.getStartPoints();\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1]) {\n          i++;\n        }\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,int).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   * @param maxDeterminizedStates maximum number of states that can be created\n   *   while determinizing a\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize,\n      int maxDeterminizedStates) {\n    this.maxInterval = maxInterval;\n    a = Operations.determinize(a, maxDeterminizedStates);\n    this.automaton = a;\n    points = a.getStartPoints();\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1]) {\n          i++;\n        }\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   * @param maxDeterminizedStates maximum number of states that can be created\n   *   while determinizing a\n   */\n  protected RunAutomaton(Automaton a, int alphabetSize, int maxDeterminizedStates) {\n    this.alphabetSize = alphabetSize;\n    a = Operations.determinize(a, maxDeterminizedStates);\n    this.automaton = a;\n    points = a.getStartPoints();\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    classmap = new int[Math.min(256, alphabetSize)];\n    int i = 0;\n    for (int j = 0; j < classmap.length; j++) {\n      if (i + 1 < points.length && j == points[i + 1]) {\n        i++;\n      }\n      classmap[j] = i;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean,int).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   * @param maxDeterminizedStates maximum number of states that can be created\n   *   while determinizing a\n   */\n  protected RunAutomaton(Automaton a, int alphabetSize, int maxDeterminizedStates) {\n    this.alphabetSize = alphabetSize;\n    a = Operations.determinize(a, maxDeterminizedStates);\n    this.automaton = a;\n    points = a.getStartPoints();\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    classmap = new int[Math.min(256, alphabetSize)];\n    int i = 0;\n    for (int j = 0; j < classmap.length; j++) {\n      if (i + 1 < points.length && j == points[i + 1]) {\n        i++;\n      }\n      classmap[j] = i;\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   * @param maxDeterminizedStates maximum number of states that can be created\n   *   while determinizing a\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize,\n      int maxDeterminizedStates) {\n    this.maxInterval = maxInterval;\n    a = Operations.determinize(a, maxDeterminizedStates);\n    this.automaton = a;\n    points = a.getStartPoints();\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1]) {\n          i++;\n        }\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b7543e96e2d4820e09334d36a699b998ed963f4f","5ddee54b1c3df60fd6198e3aa64c78038a1be8df"],"b7543e96e2d4820e09334d36a699b998ed963f4f":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8b316f82baae88f5e279893a9cb7eee51fd8902f","b7543e96e2d4820e09334d36a699b998ed963f4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"5ddee54b1c3df60fd6198e3aa64c78038a1be8df":["b7543e96e2d4820e09334d36a699b998ed963f4f"]},"commit2Childs":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"b7543e96e2d4820e09334d36a699b998ed963f4f":["022a4de90e0479b604264ca9c2e134c996454ab3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","5ddee54b1c3df60fd6198e3aa64c78038a1be8df"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["b7543e96e2d4820e09334d36a699b998ed963f4f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"5ddee54b1c3df60fd6198e3aa64c78038a1be8df":["022a4de90e0479b604264ca9c2e134c996454ab3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}