{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testSrcField().mjava","commits":[{"id":"865f4fd64e27d7af89f145eaaadeec1ecef1cbac","date":1466515249,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testSrcField().mjava","pathOld":"/dev/null","sourceNew":"  public void testSrcField() throws Exception {\n    String json = \"{\\n\" +\n        \"  \\\"id\\\" : \\\"123\\\",\\n\" +\n        \"  \\\"description\\\": \\\"Testing /json/docs srcField 1\\\",\\n\" +\n        \"\\n\" +\n        \"  \\\"nested_data\\\" : {\\n\" +\n        \"    \\\"nested_inside\\\" : \\\"check check check 1\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    String json2 =\n        \" {\\n\" +\n            \"  \\\"id\\\" : \\\"345\\\",\\n\" +\n            \"  \\\"description\\\": \\\"Testing /json/docs srcField 2\\\",\\n\" +\n            \"\\n\" +\n            \"  \\\"nested_data\\\" : {\\n\" +\n            \"    \\\"nested_inside\\\" : \\\"check check check 2\\\"\\n\" +\n            \"  }\\n\" +\n            \"}\";\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/\", Arrays.asList(\"id:/id\"));\n    RecordingJSONParser parser = new RecordingJSONParser(new StringReader(json + json2));\n\n\n    streamer.streamRecords(parser, new JsonRecordReader.Handler() {\n      int count = 0;\n\n      @Override\n      public void handle(Map<String, Object> record, String path) {\n        count++;\n        String buf = parser.getBuf();\n        parser.resetBuf();\n\n        Map m = (Map) Utils.fromJSONString(buf);\n        if (count == 1) {\n          assertEquals(m.get(\"id\"), \"123\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 1\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 1\");\n        }\n        if (count++ == 2) {\n          assertEquals(m.get(\"id\"), \"345\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 2\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 2\");\n        }\n      }\n    });\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5aeeb572ea0395aa42c0427996f6fd3fba0afb69"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testSrcField().mjava","pathOld":"/dev/null","sourceNew":"  public void testSrcField() throws Exception {\n    String json = \"{\\n\" +\n        \"  \\\"id\\\" : \\\"123\\\",\\n\" +\n        \"  \\\"description\\\": \\\"Testing /json/docs srcField 1\\\",\\n\" +\n        \"\\n\" +\n        \"  \\\"nested_data\\\" : {\\n\" +\n        \"    \\\"nested_inside\\\" : \\\"check check check 1\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    String json2 =\n        \" {\\n\" +\n            \"  \\\"id\\\" : \\\"345\\\",\\n\" +\n            \"  \\\"description\\\": \\\"Testing /json/docs srcField 2\\\",\\n\" +\n            \"\\n\" +\n            \"  \\\"nested_data\\\" : {\\n\" +\n            \"    \\\"nested_inside\\\" : \\\"check check check 2\\\"\\n\" +\n            \"  }\\n\" +\n            \"}\";\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/\", Arrays.asList(\"id:/id\"));\n    RecordingJSONParser parser = new RecordingJSONParser(new StringReader(json + json2));\n\n\n    streamer.streamRecords(parser, new JsonRecordReader.Handler() {\n      int count = 0;\n\n      @Override\n      public void handle(Map<String, Object> record, String path) {\n        count++;\n        String buf = parser.getBuf();\n        parser.resetBuf();\n\n        Map m = (Map) Utils.fromJSONString(buf);\n        if (count == 1) {\n          assertEquals(m.get(\"id\"), \"123\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 1\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 1\");\n        }\n        if (count++ == 2) {\n          assertEquals(m.get(\"id\"), \"345\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 2\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 2\");\n        }\n      }\n    });\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5aeeb572ea0395aa42c0427996f6fd3fba0afb69","date":1480450369,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testSrcField().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testSrcField().mjava","sourceNew":"  public void testSrcField() throws Exception {\n    String json = \"{\\n\" +\n        \"  \\\"id\\\" : \\\"123\\\",\\n\" +\n        \"  \\\"description\\\": \\\"Testing /json/docs srcField 1\\\",\\n\" +\n        \"\\n\" +\n        \"  \\\"nested_data\\\" : {\\n\" +\n        \"    \\\"nested_inside\\\" : \\\"check check check 1\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n\n    String json2 =\n        \" {\\n\" +\n            \"  \\\"id\\\" : \\\"345\\\",\\n\" +\n            \"  \\\"payload\\\": \\\"\"+ StringUtils.repeat(\"0123456789\", 819) +\n            \"\\\",\\n\" +\n            \"  \\\"description\\\": \\\"Testing /json/docs srcField 2\\\",\\n\" +\n            \"\\n\" +\n            \"  \\\"nested_data\\\" : {\\n\" +\n            \"    \\\"nested_inside\\\" : \\\"check check check 2\\\"\\n\" +\n            \"  }\\n\" +\n            \"}\";\n\n    String json3 =\n        \" {\\n\" +\n            \"  \\\"id\\\" : \\\"678\\\",\\n\" +\n            \"  \\\"description\\\": \\\"Testing /json/docs srcField 3\\\",\\n\" +\n            \"\\n\" +\n            \"  \\\"nested_data\\\" : {\\n\" +\n            \"    \\\"nested_inside\\\" : \\\"check check check 3\\\"\\n\" +\n            \"  }\\n\" +\n            \"}\";\n\n\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/\", Arrays.asList(\"id:/id\"));\n    RecordingJSONParser parser = new RecordingJSONParser(new StringReader(json + json2 + json3));\n\n    streamer.streamRecords(parser, new JsonRecordReader.Handler() {\n      int count = 0;\n\n      @Override\n      public void handle(Map<String, Object> record, String path) {\n        count++;\n        String buf = parser.getBuf();\n        parser.resetBuf();\n\n        Map m = (Map) Utils.fromJSONString(buf);\n        if (count == 1) {\n          assertEquals(m.get(\"id\"), \"123\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 1\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 1\");\n        }\n        if (count++ == 2) {\n          assertEquals(m.get(\"id\"), \"345\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 2\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 2\");\n        }\n        if (count++ == 3) {\n          assertEquals(m.get(\"id\"), \"678\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 3\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 3\");\n        }\n\n      }\n    });\n\n  }\n\n","sourceOld":"  public void testSrcField() throws Exception {\n    String json = \"{\\n\" +\n        \"  \\\"id\\\" : \\\"123\\\",\\n\" +\n        \"  \\\"description\\\": \\\"Testing /json/docs srcField 1\\\",\\n\" +\n        \"\\n\" +\n        \"  \\\"nested_data\\\" : {\\n\" +\n        \"    \\\"nested_inside\\\" : \\\"check check check 1\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    String json2 =\n        \" {\\n\" +\n            \"  \\\"id\\\" : \\\"345\\\",\\n\" +\n            \"  \\\"description\\\": \\\"Testing /json/docs srcField 2\\\",\\n\" +\n            \"\\n\" +\n            \"  \\\"nested_data\\\" : {\\n\" +\n            \"    \\\"nested_inside\\\" : \\\"check check check 2\\\"\\n\" +\n            \"  }\\n\" +\n            \"}\";\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/\", Arrays.asList(\"id:/id\"));\n    RecordingJSONParser parser = new RecordingJSONParser(new StringReader(json + json2));\n\n\n    streamer.streamRecords(parser, new JsonRecordReader.Handler() {\n      int count = 0;\n\n      @Override\n      public void handle(Map<String, Object> record, String path) {\n        count++;\n        String buf = parser.getBuf();\n        parser.resetBuf();\n\n        Map m = (Map) Utils.fromJSONString(buf);\n        if (count == 1) {\n          assertEquals(m.get(\"id\"), \"123\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 1\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 1\");\n        }\n        if (count++ == 2) {\n          assertEquals(m.get(\"id\"), \"345\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 2\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 2\");\n        }\n      }\n    });\n\n  }\n\n","bugFix":["865f4fd64e27d7af89f145eaaadeec1ecef1cbac"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b101c3c0e7f5871415e80d970cb3289309f3522e","date":1480511898,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testSrcField().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testSrcField().mjava","sourceNew":"  public void testSrcField() throws Exception {\n    String json = \"{\\n\" +\n        \"  \\\"id\\\" : \\\"123\\\",\\n\" +\n        \"  \\\"description\\\": \\\"Testing /json/docs srcField 1\\\",\\n\" +\n        \"\\n\" +\n        \"  \\\"nested_data\\\" : {\\n\" +\n        \"    \\\"nested_inside\\\" : \\\"check check check 1\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n\n    String json2 =\n        \" {\\n\" +\n            \"  \\\"id\\\" : \\\"345\\\",\\n\" +\n            \"  \\\"payload\\\": \\\"\"+ StringUtils.repeat(\"0123456789\", 819) +\n            \"\\\",\\n\" +\n            \"  \\\"description\\\": \\\"Testing /json/docs srcField 2\\\",\\n\" +\n            \"\\n\" +\n            \"  \\\"nested_data\\\" : {\\n\" +\n            \"    \\\"nested_inside\\\" : \\\"check check check 2\\\"\\n\" +\n            \"  }\\n\" +\n            \"}\";\n\n    String json3 =\n        \" {\\n\" +\n            \"  \\\"id\\\" : \\\"678\\\",\\n\" +\n            \"  \\\"description\\\": \\\"Testing /json/docs srcField 3\\\",\\n\" +\n            \"\\n\" +\n            \"  \\\"nested_data\\\" : {\\n\" +\n            \"    \\\"nested_inside\\\" : \\\"check check check 3\\\"\\n\" +\n            \"  }\\n\" +\n            \"}\";\n\n\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/\", Arrays.asList(\"id:/id\"));\n    RecordingJSONParser parser = new RecordingJSONParser(new StringReader(json + json2 + json3));\n\n    streamer.streamRecords(parser, new JsonRecordReader.Handler() {\n      int count = 0;\n\n      @Override\n      public void handle(Map<String, Object> record, String path) {\n        count++;\n        String buf = parser.getBuf();\n        parser.resetBuf();\n\n        Map m = (Map) Utils.fromJSONString(buf);\n        if (count == 1) {\n          assertEquals(m.get(\"id\"), \"123\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 1\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 1\");\n        }\n        if (count++ == 2) {\n          assertEquals(m.get(\"id\"), \"345\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 2\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 2\");\n        }\n        if (count++ == 3) {\n          assertEquals(m.get(\"id\"), \"678\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 3\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 3\");\n        }\n\n      }\n    });\n\n  }\n\n","sourceOld":"  public void testSrcField() throws Exception {\n    String json = \"{\\n\" +\n        \"  \\\"id\\\" : \\\"123\\\",\\n\" +\n        \"  \\\"description\\\": \\\"Testing /json/docs srcField 1\\\",\\n\" +\n        \"\\n\" +\n        \"  \\\"nested_data\\\" : {\\n\" +\n        \"    \\\"nested_inside\\\" : \\\"check check check 1\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    String json2 =\n        \" {\\n\" +\n            \"  \\\"id\\\" : \\\"345\\\",\\n\" +\n            \"  \\\"description\\\": \\\"Testing /json/docs srcField 2\\\",\\n\" +\n            \"\\n\" +\n            \"  \\\"nested_data\\\" : {\\n\" +\n            \"    \\\"nested_inside\\\" : \\\"check check check 2\\\"\\n\" +\n            \"  }\\n\" +\n            \"}\";\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/\", Arrays.asList(\"id:/id\"));\n    RecordingJSONParser parser = new RecordingJSONParser(new StringReader(json + json2));\n\n\n    streamer.streamRecords(parser, new JsonRecordReader.Handler() {\n      int count = 0;\n\n      @Override\n      public void handle(Map<String, Object> record, String path) {\n        count++;\n        String buf = parser.getBuf();\n        parser.resetBuf();\n\n        Map m = (Map) Utils.fromJSONString(buf);\n        if (count == 1) {\n          assertEquals(m.get(\"id\"), \"123\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 1\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 1\");\n        }\n        if (count++ == 2) {\n          assertEquals(m.get(\"id\"), \"345\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 2\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 2\");\n        }\n      }\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testSrcField().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testSrcField().mjava","sourceNew":"  public void testSrcField() throws Exception {\n    String json = \"{\\n\" +\n        \"  \\\"id\\\" : \\\"123\\\",\\n\" +\n        \"  \\\"description\\\": \\\"Testing /json/docs srcField 1\\\",\\n\" +\n        \"\\n\" +\n        \"  \\\"nested_data\\\" : {\\n\" +\n        \"    \\\"nested_inside\\\" : \\\"check check check 1\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n\n    String json2 =\n        \" {\\n\" +\n            \"  \\\"id\\\" : \\\"345\\\",\\n\" +\n            \"  \\\"payload\\\": \\\"\"+ StringUtils.repeat(\"0123456789\", 819) +\n            \"\\\",\\n\" +\n            \"  \\\"description\\\": \\\"Testing /json/docs srcField 2\\\",\\n\" +\n            \"\\n\" +\n            \"  \\\"nested_data\\\" : {\\n\" +\n            \"    \\\"nested_inside\\\" : \\\"check check check 2\\\"\\n\" +\n            \"  }\\n\" +\n            \"}\";\n\n    String json3 =\n        \" {\\n\" +\n            \"  \\\"id\\\" : \\\"678\\\",\\n\" +\n            \"  \\\"description\\\": \\\"Testing /json/docs srcField 3\\\",\\n\" +\n            \"\\n\" +\n            \"  \\\"nested_data\\\" : {\\n\" +\n            \"    \\\"nested_inside\\\" : \\\"check check check 3\\\"\\n\" +\n            \"  }\\n\" +\n            \"}\";\n\n\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/\", Arrays.asList(\"id:/id\"));\n    RecordingJSONParser parser = new RecordingJSONParser(new StringReader(json + json2 + json3));\n\n    streamer.streamRecords(parser, new JsonRecordReader.Handler() {\n      int count = 0;\n\n      @Override\n      public void handle(Map<String, Object> record, String path) {\n        count++;\n        String buf = parser.getBuf();\n        parser.resetBuf();\n\n        Map m = (Map) Utils.fromJSONString(buf);\n        if (count == 1) {\n          assertEquals(m.get(\"id\"), \"123\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 1\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 1\");\n        }\n        if (count++ == 2) {\n          assertEquals(m.get(\"id\"), \"345\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 2\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 2\");\n        }\n        if (count++ == 3) {\n          assertEquals(m.get(\"id\"), \"678\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 3\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 3\");\n        }\n\n      }\n    });\n\n  }\n\n","sourceOld":"  public void testSrcField() throws Exception {\n    String json = \"{\\n\" +\n        \"  \\\"id\\\" : \\\"123\\\",\\n\" +\n        \"  \\\"description\\\": \\\"Testing /json/docs srcField 1\\\",\\n\" +\n        \"\\n\" +\n        \"  \\\"nested_data\\\" : {\\n\" +\n        \"    \\\"nested_inside\\\" : \\\"check check check 1\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n    String json2 =\n        \" {\\n\" +\n            \"  \\\"id\\\" : \\\"345\\\",\\n\" +\n            \"  \\\"description\\\": \\\"Testing /json/docs srcField 2\\\",\\n\" +\n            \"\\n\" +\n            \"  \\\"nested_data\\\" : {\\n\" +\n            \"    \\\"nested_inside\\\" : \\\"check check check 2\\\"\\n\" +\n            \"  }\\n\" +\n            \"}\";\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/\", Arrays.asList(\"id:/id\"));\n    RecordingJSONParser parser = new RecordingJSONParser(new StringReader(json + json2));\n\n\n    streamer.streamRecords(parser, new JsonRecordReader.Handler() {\n      int count = 0;\n\n      @Override\n      public void handle(Map<String, Object> record, String path) {\n        count++;\n        String buf = parser.getBuf();\n        parser.resetBuf();\n\n        Map m = (Map) Utils.fromJSONString(buf);\n        if (count == 1) {\n          assertEquals(m.get(\"id\"), \"123\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 1\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 1\");\n        }\n        if (count++ == 2) {\n          assertEquals(m.get(\"id\"), \"345\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 2\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 2\");\n        }\n      }\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testSrcField().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testSrcField().mjava","sourceNew":"  public void testSrcField() throws Exception {\n    String json = \"{\\n\" +\n        \"  \\\"id\\\" : \\\"123\\\",\\n\" +\n        \"  \\\"description\\\": \\\"Testing /json/docs srcField 1\\\",\\n\" +\n        \"\\n\" +\n        \"  \\\"nested_data\\\" : {\\n\" +\n        \"    \\\"nested_inside\\\" : \\\"check check check 1\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n\n    String json2 =\n        \" {\\n\" +\n            \"  \\\"id\\\" : \\\"345\\\",\\n\" +\n            \"  \\\"payload\\\": \\\"\"+ StringUtils.repeat(\"0123456789\", 819) +\n            \"\\\",\\n\" +\n            \"  \\\"description\\\": \\\"Testing /json/docs srcField 2\\\",\\n\" +\n            \"\\n\" +\n            \"  \\\"nested_data\\\" : {\\n\" +\n            \"    \\\"nested_inside\\\" : \\\"check check check 2\\\"\\n\" +\n            \"  }\\n\" +\n            \"}\";\n\n    String json3 =\n        \" {\\n\" +\n            \"  \\\"id\\\" : \\\"678\\\",\\n\" +\n            \"  \\\"description\\\": \\\"Testing /json/docs srcField 3\\\",\\n\" +\n            \"\\n\" +\n            \"  \\\"nested_data\\\" : {\\n\" +\n            \"    \\\"nested_inside\\\" : \\\"check check check 3\\\"\\n\" +\n            \"  }\\n\" +\n            \"}\";\n\n\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/\", Arrays.asList(\"id:/id\"));\n    RecordingJSONParser parser = new RecordingJSONParser(new StringReader(json + json2 + json3));\n\n    streamer.streamRecords(parser, new JsonRecordReader.Handler() {\n      int count = 0;\n\n      @Override\n      public void handle(Map<String, Object> record, String path) {\n        count++;\n        String buf = parser.getBuf();\n        parser.resetBuf();\n\n        @SuppressWarnings({\"rawtypes\"})\n        Map m = (Map) Utils.fromJSONString(buf);\n        if (count == 1) {\n          assertEquals(m.get(\"id\"), \"123\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 1\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 1\");\n        }\n        if (count++ == 2) {\n          assertEquals(m.get(\"id\"), \"345\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 2\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 2\");\n        }\n        if (count++ == 3) {\n          assertEquals(m.get(\"id\"), \"678\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 3\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 3\");\n        }\n\n      }\n    });\n\n  }\n\n","sourceOld":"  public void testSrcField() throws Exception {\n    String json = \"{\\n\" +\n        \"  \\\"id\\\" : \\\"123\\\",\\n\" +\n        \"  \\\"description\\\": \\\"Testing /json/docs srcField 1\\\",\\n\" +\n        \"\\n\" +\n        \"  \\\"nested_data\\\" : {\\n\" +\n        \"    \\\"nested_inside\\\" : \\\"check check check 1\\\"\\n\" +\n        \"  }\\n\" +\n        \"}\";\n\n    String json2 =\n        \" {\\n\" +\n            \"  \\\"id\\\" : \\\"345\\\",\\n\" +\n            \"  \\\"payload\\\": \\\"\"+ StringUtils.repeat(\"0123456789\", 819) +\n            \"\\\",\\n\" +\n            \"  \\\"description\\\": \\\"Testing /json/docs srcField 2\\\",\\n\" +\n            \"\\n\" +\n            \"  \\\"nested_data\\\" : {\\n\" +\n            \"    \\\"nested_inside\\\" : \\\"check check check 2\\\"\\n\" +\n            \"  }\\n\" +\n            \"}\";\n\n    String json3 =\n        \" {\\n\" +\n            \"  \\\"id\\\" : \\\"678\\\",\\n\" +\n            \"  \\\"description\\\": \\\"Testing /json/docs srcField 3\\\",\\n\" +\n            \"\\n\" +\n            \"  \\\"nested_data\\\" : {\\n\" +\n            \"    \\\"nested_inside\\\" : \\\"check check check 3\\\"\\n\" +\n            \"  }\\n\" +\n            \"}\";\n\n\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/\", Arrays.asList(\"id:/id\"));\n    RecordingJSONParser parser = new RecordingJSONParser(new StringReader(json + json2 + json3));\n\n    streamer.streamRecords(parser, new JsonRecordReader.Handler() {\n      int count = 0;\n\n      @Override\n      public void handle(Map<String, Object> record, String path) {\n        count++;\n        String buf = parser.getBuf();\n        parser.resetBuf();\n\n        Map m = (Map) Utils.fromJSONString(buf);\n        if (count == 1) {\n          assertEquals(m.get(\"id\"), \"123\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 1\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 1\");\n        }\n        if (count++ == 2) {\n          assertEquals(m.get(\"id\"), \"345\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 2\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 2\");\n        }\n        if (count++ == 3) {\n          assertEquals(m.get(\"id\"), \"678\");\n          assertEquals(m.get(\"description\"), \"Testing /json/docs srcField 3\");\n          assertEquals(((Map) m.get(\"nested_data\")).get(\"nested_inside\"), \"check check check 3\");\n        }\n\n      }\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["b101c3c0e7f5871415e80d970cb3289309f3522e"],"b101c3c0e7f5871415e80d970cb3289309f3522e":["865f4fd64e27d7af89f145eaaadeec1ecef1cbac","5aeeb572ea0395aa42c0427996f6fd3fba0afb69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b101c3c0e7f5871415e80d970cb3289309f3522e"],"5aeeb572ea0395aa42c0427996f6fd3fba0afb69":["865f4fd64e27d7af89f145eaaadeec1ecef1cbac"],"865f4fd64e27d7af89f145eaaadeec1ecef1cbac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","865f4fd64e27d7af89f145eaaadeec1ecef1cbac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b101c3c0e7f5871415e80d970cb3289309f3522e":["9ba1b632c041956c93c41aa1143d16a567014891","9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["865f4fd64e27d7af89f145eaaadeec1ecef1cbac","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"5aeeb572ea0395aa42c0427996f6fd3fba0afb69":["b101c3c0e7f5871415e80d970cb3289309f3522e"],"865f4fd64e27d7af89f145eaaadeec1ecef1cbac":["b101c3c0e7f5871415e80d970cb3289309f3522e","5aeeb572ea0395aa42c0427996f6fd3fba0afb69","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}