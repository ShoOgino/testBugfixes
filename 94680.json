{"path":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#verifyLeaderAssignment(CloudSolrServer,String).mjava","commits":[{"id":"5455c7b3fed6c1671990a44c19071cb0488c2c25","date":1413557414,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#verifyLeaderAssignment(CloudSolrServer,String).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyLeaderAssignment(CloudSolrServer client, String collectionName)\n      throws InterruptedException, KeeperException {\n    String lastFailMsg = \"\";\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      lastFailMsg = \"\";\n      client.getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n      for (Slice slice : clusterState.getSlices(collectionName)) {\n        Boolean foundLeader = false;\n        Boolean foundPreferred = false;\n        for (Replica replica : slice.getReplicas()) {\n          Boolean isLeader = replica.getBool(\"leader\", false);\n          Boolean isPreferred = replica.getBool(\"property.preferredleader\", false);\n          if (isLeader != isPreferred) {\n            lastFailMsg = \"Replica should NOT have preferredLeader != leader. Preferred: \" + isPreferred.toString() +\n                \" leader is \" + isLeader.toString();\n          }\n          if (foundLeader && isLeader) {\n            lastFailMsg = \"There should only be a single leader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second leader in slice \" + slice.getName();\n          }\n          if (foundPreferred && isPreferred) {\n            lastFailMsg = \"There should only be a single preferredLeader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second preferredLeader in slice \" + slice.getName();\n          }\n          foundLeader = foundLeader ? foundLeader : isLeader;\n          foundPreferred = foundPreferred ? foundPreferred : isPreferred;\n        }\n      }\n      if (lastFailMsg.length() == 0) return;\n      Thread.sleep(100);\n    }\n    fail(lastFailMsg);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#verifyLeaderAssignment(CloudSolrServer,String).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyLeaderAssignment(CloudSolrServer client, String collectionName)\n      throws InterruptedException, KeeperException {\n    String lastFailMsg = \"\";\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      lastFailMsg = \"\";\n      client.getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n      for (Slice slice : clusterState.getSlices(collectionName)) {\n        Boolean foundLeader = false;\n        Boolean foundPreferred = false;\n        for (Replica replica : slice.getReplicas()) {\n          Boolean isLeader = replica.getBool(\"leader\", false);\n          Boolean isPreferred = replica.getBool(\"property.preferredleader\", false);\n          if (isLeader != isPreferred) {\n            lastFailMsg = \"Replica should NOT have preferredLeader != leader. Preferred: \" + isPreferred.toString() +\n                \" leader is \" + isLeader.toString();\n          }\n          if (foundLeader && isLeader) {\n            lastFailMsg = \"There should only be a single leader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second leader in slice \" + slice.getName();\n          }\n          if (foundPreferred && isPreferred) {\n            lastFailMsg = \"There should only be a single preferredLeader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second preferredLeader in slice \" + slice.getName();\n          }\n          foundLeader = foundLeader ? foundLeader : isLeader;\n          foundPreferred = foundPreferred ? foundPreferred : isPreferred;\n        }\n      }\n      if (lastFailMsg.length() == 0) return;\n      Thread.sleep(100);\n    }\n    fail(lastFailMsg);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#verifyLeaderAssignment(CloudSolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#verifyLeaderAssignment(CloudSolrServer,String).mjava","sourceNew":"  private void verifyLeaderAssignment(CloudSolrClient client, String collectionName)\n      throws InterruptedException, KeeperException {\n    String lastFailMsg = \"\";\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      lastFailMsg = \"\";\n      client.getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n      for (Slice slice : clusterState.getSlices(collectionName)) {\n        Boolean foundLeader = false;\n        Boolean foundPreferred = false;\n        for (Replica replica : slice.getReplicas()) {\n          Boolean isLeader = replica.getBool(\"leader\", false);\n          Boolean isPreferred = replica.getBool(\"property.preferredleader\", false);\n          if (isLeader != isPreferred) {\n            lastFailMsg = \"Replica should NOT have preferredLeader != leader. Preferred: \" + isPreferred.toString() +\n                \" leader is \" + isLeader.toString();\n          }\n          if (foundLeader && isLeader) {\n            lastFailMsg = \"There should only be a single leader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second leader in slice \" + slice.getName();\n          }\n          if (foundPreferred && isPreferred) {\n            lastFailMsg = \"There should only be a single preferredLeader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second preferredLeader in slice \" + slice.getName();\n          }\n          foundLeader = foundLeader ? foundLeader : isLeader;\n          foundPreferred = foundPreferred ? foundPreferred : isPreferred;\n        }\n      }\n      if (lastFailMsg.length() == 0) return;\n      Thread.sleep(100);\n    }\n    fail(lastFailMsg);\n  }\n\n","sourceOld":"  private void verifyLeaderAssignment(CloudSolrServer client, String collectionName)\n      throws InterruptedException, KeeperException {\n    String lastFailMsg = \"\";\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      lastFailMsg = \"\";\n      client.getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = client.getZkStateReader().getClusterState();\n      for (Slice slice : clusterState.getSlices(collectionName)) {\n        Boolean foundLeader = false;\n        Boolean foundPreferred = false;\n        for (Replica replica : slice.getReplicas()) {\n          Boolean isLeader = replica.getBool(\"leader\", false);\n          Boolean isPreferred = replica.getBool(\"property.preferredleader\", false);\n          if (isLeader != isPreferred) {\n            lastFailMsg = \"Replica should NOT have preferredLeader != leader. Preferred: \" + isPreferred.toString() +\n                \" leader is \" + isLeader.toString();\n          }\n          if (foundLeader && isLeader) {\n            lastFailMsg = \"There should only be a single leader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second leader in slice \" + slice.getName();\n          }\n          if (foundPreferred && isPreferred) {\n            lastFailMsg = \"There should only be a single preferredLeader in _any_ shard! Replica \" + replica.getName() +\n                \" is the second preferredLeader in slice \" + slice.getName();\n          }\n          foundLeader = foundLeader ? foundLeader : isLeader;\n          foundPreferred = foundPreferred ? foundPreferred : isPreferred;\n        }\n      }\n      if (lastFailMsg.length() == 0) return;\n      Thread.sleep(100);\n    }\n    fail(lastFailMsg);\n  }\n\n","bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5455c7b3fed6c1671990a44c19071cb0488c2c25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["5455c7b3fed6c1671990a44c19071cb0488c2c25"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","5455c7b3fed6c1671990a44c19071cb0488c2c25"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}