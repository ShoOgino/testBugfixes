{"path":"src/java/org/apache/lucene/search/spans/SpanQuery#getPayloadSpans(IndexReader).mjava","commits":[{"id":"fd5947db4de866f035b932f219674c03562d904e","date":1219248396,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanQuery#getPayloadSpans(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the matches for this query in an index, including access to any {@link org.apache.lucene.index.Payload}s at those\n   * positions.  Implementing classes that want access to the payloads will need to implement this.\n   * @param reader  The {@link org.apache.lucene.index.IndexReader} to use to get spans/payloads\n   * @return null\n   * @throws IOException if there is an error accessing the payload\n   *\n   * <font color=\"#FF0000\">\n   * WARNING: The status of the <b>Payloads</b> feature is experimental.\n   * The APIs introduced here might change in the future and will not be\n   * supported anymore in such a case.</font>\n   */\n  public PayloadSpans getPayloadSpans(IndexReader reader) throws IOException{\n    return null;\n  }\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanQuery#getPayloadSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanQuery#getPayloadSpans(IndexReader).mjava","sourceNew":"  /**\n   * Returns the matches for this query in an index, including access to any {@link org.apache.lucene.index.Payload}s at those\n   * positions.  Implementing classes that want access to the payloads will need to implement this.\n   * @param reader  The {@link org.apache.lucene.index.IndexReader} to use to get spans/payloads\n   * @return null\n   * @throws IOException if there is an error accessing the payload\n   *\n   * <font color=\"#FF0000\">\n   * WARNING: The status of the <b>Payloads</b> feature is experimental.\n   * The APIs introduced here might change in the future and will not be\n   * supported anymore in such a case.</font>\n   */\n  public PayloadSpans getPayloadSpans(IndexReader reader) throws IOException{\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the matches for this query in an index, including access to any {@link org.apache.lucene.index.Payload}s at those\n   * positions.  Implementing classes that want access to the payloads will need to implement this.\n   * @param reader  The {@link org.apache.lucene.index.IndexReader} to use to get spans/payloads\n   * @return null\n   * @throws IOException if there is an error accessing the payload\n   *\n   * <font color=\"#FF0000\">\n   * WARNING: The status of the <b>Payloads</b> feature is experimental.\n   * The APIs introduced here might change in the future and will not be\n   * supported anymore in such a case.</font>\n   */\n  public PayloadSpans getPayloadSpans(IndexReader reader) throws IOException{\n    return null;\n  }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff93c6759a7da468c20c64fb459f85bccd0af370","date":1249413002,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/spans/SpanQuery#getPayloadSpans(IndexReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the matches for this query in an index, including access to any {@link org.apache.lucene.index.Payload}s at those\n   * positions.  Implementing classes that want access to the payloads will need to implement this.\n   * @param reader  The {@link org.apache.lucene.index.IndexReader} to use to get spans/payloads\n   * @return null\n   * @throws IOException if there is an error accessing the payload\n   *\n   * <font color=\"#FF0000\">\n   * WARNING: The status of the <b>Payloads</b> feature is experimental.\n   * The APIs introduced here might change in the future and will not be\n   * supported anymore in such a case.</font>\n   */\n  public PayloadSpans getPayloadSpans(IndexReader reader) throws IOException{\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd5947db4de866f035b932f219674c03562d904e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["fd5947db4de866f035b932f219674c03562d904e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff93c6759a7da468c20c64fb459f85bccd0af370"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd5947db4de866f035b932f219674c03562d904e"],"fd5947db4de866f035b932f219674c03562d904e":["052fac7830290bd38a04cddee1a121ee07656b56"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"052fac7830290bd38a04cddee1a121ee07656b56":["ff93c6759a7da468c20c64fb459f85bccd0af370"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}