{"path":"lucene/src/java/org/apache/lucene/index/MultiDocValues#reset(DocValuesIndex[]).mjava","commits":[{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiDocValues#reset(DocValuesIndex[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/MultiIndexDocValues#reset(DocValuesIndex[]).mjava","sourceNew":"  public DocValues reset(DocValuesIndex[] docValuesIdx) {\n    final int[] start = new int[docValuesIdx.length];\n    TypePromoter promoter = TypePromoter.getIdentityPromoter();\n    for (int i = 0; i < docValuesIdx.length; i++) {\n      start[i] = docValuesIdx[i].start;\n      if (!(docValuesIdx[i].docValues instanceof EmptyDocValues)) {\n        // only promote if not a dummy\n        final TypePromoter incomingPromoter = TypePromoter.create(\n            docValuesIdx[i].docValues.type(),\n            docValuesIdx[i].docValues.getValueSize());\n        promoter = promoter.promote(incomingPromoter);\n        if (promoter == null) {\n          throw new IllegalStateException(\"Can not promote \" + incomingPromoter);\n        }\n      }\n    }\n    this.type = promoter.type();\n    this.valueSize = promoter.getValueSize();\n    this.starts = start;\n    this.docValuesIdx = docValuesIdx;\n    return this;\n  }\n\n","sourceOld":"  public IndexDocValues reset(DocValuesIndex[] docValuesIdx) {\n    final int[] start = new int[docValuesIdx.length];\n    TypePromoter promoter = TypePromoter.getIdentityPromoter();\n    for (int i = 0; i < docValuesIdx.length; i++) {\n      start[i] = docValuesIdx[i].start;\n      if (!(docValuesIdx[i].docValues instanceof EmptyDocValues)) {\n        // only promote if not a dummy\n        final TypePromoter incomingPromoter = TypePromoter.create(\n            docValuesIdx[i].docValues.type(),\n            docValuesIdx[i].docValues.getValueSize());\n        promoter = promoter.promote(incomingPromoter);\n        if (promoter == null) {\n          throw new IllegalStateException(\"Can not promote \" + incomingPromoter);\n        }\n      }\n    }\n    this.type = promoter.type();\n    this.valueSize = promoter.getValueSize();\n    this.starts = start;\n    this.docValuesIdx = docValuesIdx;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cac4d5fa6c305b94f6232a70bda07f096ad0348c","date":1323538980,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/MultiDocValues#reset(DocValuesIndex[]).mjava","sourceNew":null,"sourceOld":"  public DocValues reset(DocValuesIndex[] docValuesIdx) {\n    final int[] start = new int[docValuesIdx.length];\n    TypePromoter promoter = TypePromoter.getIdentityPromoter();\n    for (int i = 0; i < docValuesIdx.length; i++) {\n      start[i] = docValuesIdx[i].start;\n      if (!(docValuesIdx[i].docValues instanceof EmptyDocValues)) {\n        // only promote if not a dummy\n        final TypePromoter incomingPromoter = TypePromoter.create(\n            docValuesIdx[i].docValues.type(),\n            docValuesIdx[i].docValues.getValueSize());\n        promoter = promoter.promote(incomingPromoter);\n        if (promoter == null) {\n          throw new IllegalStateException(\"Can not promote \" + incomingPromoter);\n        }\n      }\n    }\n    this.type = promoter.type();\n    this.valueSize = promoter.getValueSize();\n    this.starts = start;\n    this.docValuesIdx = docValuesIdx;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cac4d5fa6c305b94f6232a70bda07f096ad0348c":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"cac4d5fa6c305b94f6232a70bda07f096ad0348c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["cac4d5fa6c305b94f6232a70bda07f096ad0348c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cac4d5fa6c305b94f6232a70bda07f096ad0348c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}