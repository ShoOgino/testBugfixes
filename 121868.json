{"path":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch().mjava","commits":[{"id":"d029fbe10fe5651865203eddc5b9d07fa3c59128","date":1456214468,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch() throws Exception {\n    String rulesColl = \"ipRuleColl\";\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    String ip_1 = \"-1\";\n    String ip_2 = \"-1\";\n    Matcher hostAndPortMatcher = Pattern.compile(\"(?:https?://)?([^:]+):(\\\\d+)\").matcher(baseUrl);\n    if (hostAndPortMatcher.find()) {\n      String[] ipFragments = hostAndPortMatcher.group(1).split(\"\\\\.\");\n      ip_1 = ipFragments[ipFragments.length - 1];\n      ip_2 = ipFragments[ipFragments.length - 2];\n    }\n\n    try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(rulesColl);\n      create.setShards(\"shard1\");\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setReplicationFactor(2);\n\n      create.setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1 + \"9999\");\n      create.setSnitch(\"class:ImplicitSnitch\");\n\n      expectedException.expect(HttpSolrClient.RemoteSolrException.class);\n      expectedException.expectMessage(containsString(\"ip_1\"));\n\n      create.process(client);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a02c54923e5f4de08097fa9028e09e8cf5caa82","date":1475573567,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch().mjava","sourceNew":"  @Test\n  public void testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch() throws Exception {\n\n    String rulesColl = \"ipRuleColl\";\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String host = jetty.getBaseUrl().getHost();\n    String[] ipFragments = host.split(\"\\\\.\");\n    String ip_1 = ipFragments[ipFragments.length - 1];\n    String ip_2 = ipFragments[ipFragments.length - 2];\n\n    expectedException.expect(HttpSolrClient.RemoteSolrException.class);\n    expectedException.expectMessage(containsString(\"ip_1\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1 + \"9999\")\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n  }\n\n","sourceOld":"  @Test\n  public void testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch() throws Exception {\n    String rulesColl = \"ipRuleColl\";\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    String ip_1 = \"-1\";\n    String ip_2 = \"-1\";\n    Matcher hostAndPortMatcher = Pattern.compile(\"(?:https?://)?([^:]+):(\\\\d+)\").matcher(baseUrl);\n    if (hostAndPortMatcher.find()) {\n      String[] ipFragments = hostAndPortMatcher.group(1).split(\"\\\\.\");\n      ip_1 = ipFragments[ipFragments.length - 1];\n      ip_2 = ipFragments[ipFragments.length - 2];\n    }\n\n    try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(rulesColl);\n      create.setShards(\"shard1\");\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setReplicationFactor(2);\n\n      create.setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1 + \"9999\");\n      create.setSnitch(\"class:ImplicitSnitch\");\n\n      expectedException.expect(HttpSolrClient.RemoteSolrException.class);\n      expectedException.expectMessage(containsString(\"ip_1\"));\n\n      create.process(client);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch().mjava","sourceNew":"  @Test\n  public void testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch() throws Exception {\n\n    String rulesColl = \"ipRuleColl\";\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String host = jetty.getBaseUrl().getHost();\n    String[] ipFragments = host.split(\"\\\\.\");\n    String ip_1 = ipFragments[ipFragments.length - 1];\n    String ip_2 = ipFragments[ipFragments.length - 2];\n\n    expectedException.expect(HttpSolrClient.RemoteSolrException.class);\n    expectedException.expectMessage(containsString(\"ip_1\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1 + \"9999\")\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n  }\n\n","sourceOld":"  @Test\n  public void testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch() throws Exception {\n    String rulesColl = \"ipRuleColl\";\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    String ip_1 = \"-1\";\n    String ip_2 = \"-1\";\n    Matcher hostAndPortMatcher = Pattern.compile(\"(?:https?://)?([^:]+):(\\\\d+)\").matcher(baseUrl);\n    if (hostAndPortMatcher.find()) {\n      String[] ipFragments = hostAndPortMatcher.group(1).split(\"\\\\.\");\n      ip_1 = ipFragments[ipFragments.length - 1];\n      ip_2 = ipFragments[ipFragments.length - 2];\n    }\n\n    try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(rulesColl);\n      create.setShards(\"shard1\");\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setReplicationFactor(2);\n\n      create.setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1 + \"9999\");\n      create.setSnitch(\"class:ImplicitSnitch\");\n\n      expectedException.expect(HttpSolrClient.RemoteSolrException.class);\n      expectedException.expectMessage(containsString(\"ip_1\"));\n\n      create.process(client);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"432ec497284686a1567bffcc0c843a8b9eaae57b","date":1475677162,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch().mjava","sourceNew":"  @Test\n  public void testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch() throws Exception {\n\n    String rulesColl = \"ipRuleColl\";\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String host = jetty.getBaseUrl().getHost();\n    String[] ipFragments = host.split(\"\\\\.\");\n    String ip_1 = ipFragments[ipFragments.length - 1];\n    String ip_2 = ipFragments[ipFragments.length - 2];\n\n    expectedException.expect(HttpSolrClient.RemoteSolrException.class);\n    expectedException.expectMessage(containsString(\"ip_1\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1 + \"9999\")\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.deleteCollection(rulesColl).process(cluster.getSolrClient());\n\n  }\n\n","sourceOld":"  @Test\n  public void testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch() throws Exception {\n\n    String rulesColl = \"ipRuleColl\";\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String host = jetty.getBaseUrl().getHost();\n    String[] ipFragments = host.split(\"\\\\.\");\n    String ip_1 = ipFragments[ipFragments.length - 1];\n    String ip_2 = ipFragments[ipFragments.length - 2];\n\n    expectedException.expect(HttpSolrClient.RemoteSolrException.class);\n    expectedException.expectMessage(containsString(\"ip_1\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1 + \"9999\")\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82ac6146556cfb813fae76783544007fc3aaa34d","date":1476790432,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch().mjava","sourceNew":"  @Test\n  public void testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch() throws Exception {\n\n    String rulesColl = \"ipRuleColl\";\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String host = jetty.getBaseUrl().getHost();\n    String[] ipFragments = host.split(\"\\\\.\");\n    String ip_1 = ipFragments[ipFragments.length - 1];\n    String ip_2 = ipFragments[ipFragments.length - 2];\n\n    expectedException.expect(HttpSolrClient.RemoteSolrException.class);\n    expectedException.expectMessage(containsString(\"ip_1\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1 + \"9999\")\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n  }\n\n","sourceOld":"  @Test\n  public void testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch() throws Exception {\n\n    String rulesColl = \"ipRuleColl\";\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String host = jetty.getBaseUrl().getHost();\n    String[] ipFragments = host.split(\"\\\\.\");\n    String ip_1 = ipFragments[ipFragments.length - 1];\n    String ip_2 = ipFragments[ipFragments.length - 2];\n\n    expectedException.expect(HttpSolrClient.RemoteSolrException.class);\n    expectedException.expectMessage(containsString(\"ip_1\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1 + \"9999\")\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.deleteCollection(rulesColl).process(cluster.getSolrClient());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch().mjava","sourceNew":"  @Test\n  public void testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch() throws Exception {\n\n    String rulesColl = \"ipRuleColl\";\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String host = jetty.getBaseUrl().getHost();\n    String[] ipFragments = host.split(\"\\\\.\");\n    String ip_1 = ipFragments[ipFragments.length - 1];\n    String ip_2 = ipFragments[ipFragments.length - 2];\n\n    expectedException.expect(HttpSolrClient.RemoteSolrException.class);\n    expectedException.expectMessage(containsString(\"ip_1\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1 + \"9999\")\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n  }\n\n","sourceOld":"  @Test\n  public void testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch() throws Exception {\n    String rulesColl = \"ipRuleColl\";\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    String ip_1 = \"-1\";\n    String ip_2 = \"-1\";\n    Matcher hostAndPortMatcher = Pattern.compile(\"(?:https?://)?([^:]+):(\\\\d+)\").matcher(baseUrl);\n    if (hostAndPortMatcher.find()) {\n      String[] ipFragments = hostAndPortMatcher.group(1).split(\"\\\\.\");\n      ip_1 = ipFragments[ipFragments.length - 1];\n      ip_2 = ipFragments[ipFragments.length - 2];\n    }\n\n    try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(rulesColl);\n      create.setShards(\"shard1\");\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setReplicationFactor(2);\n\n      create.setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1 + \"9999\");\n      create.setSnitch(\"class:ImplicitSnitch\");\n\n      expectedException.expect(HttpSolrClient.RemoteSolrException.class);\n      expectedException.expectMessage(containsString(\"ip_1\"));\n\n      create.process(client);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch().mjava","sourceNew":"  @Test\n  public void testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch() throws Exception {\n\n    String rulesColl = \"ipRuleColl\";\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String host = jetty.getBaseUrl().getHost();\n    String[] ipFragments = host.split(\"\\\\.\");\n    String ip_1 = ipFragments[ipFragments.length - 1];\n    String ip_2 = ipFragments[ipFragments.length - 2];\n\n    expectedException.expect(BaseHttpSolrClient.RemoteSolrException.class);\n    expectedException.expectMessage(containsString(\"ip_1\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1 + \"9999\")\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n  }\n\n","sourceOld":"  @Test\n  public void testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch() throws Exception {\n\n    String rulesColl = \"ipRuleColl\";\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String host = jetty.getBaseUrl().getHost();\n    String[] ipFragments = host.split(\"\\\\.\");\n    String ip_1 = ipFragments[ipFragments.length - 1];\n    String ip_2 = ipFragments[ipFragments.length - 2];\n\n    expectedException.expect(HttpSolrClient.RemoteSolrException.class);\n    expectedException.expectMessage(containsString(\"ip_1\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1 + \"9999\")\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1967bed916cc89da82a1c2085f27976da6d08cbd":["d029fbe10fe5651865203eddc5b9d07fa3c59128","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"432ec497284686a1567bffcc0c843a8b9eaae57b":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"db96734b79e26d948b59f68bd4564c4836a71acf":["82ac6146556cfb813fae76783544007fc3aaa34d"],"82ac6146556cfb813fae76783544007fc3aaa34d":["432ec497284686a1567bffcc0c843a8b9eaae57b"],"d029fbe10fe5651865203eddc5b9d07fa3c59128":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["d029fbe10fe5651865203eddc5b9d07fa3c59128"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d029fbe10fe5651865203eddc5b9d07fa3c59128","82ac6146556cfb813fae76783544007fc3aaa34d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db96734b79e26d948b59f68bd4564c4836a71acf"]},"commit2Childs":{"1967bed916cc89da82a1c2085f27976da6d08cbd":["432ec497284686a1567bffcc0c843a8b9eaae57b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d029fbe10fe5651865203eddc5b9d07fa3c59128"],"432ec497284686a1567bffcc0c843a8b9eaae57b":["82ac6146556cfb813fae76783544007fc3aaa34d"],"db96734b79e26d948b59f68bd4564c4836a71acf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"82ac6146556cfb813fae76783544007fc3aaa34d":["db96734b79e26d948b59f68bd4564c4836a71acf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d029fbe10fe5651865203eddc5b9d07fa3c59128":["1967bed916cc89da82a1c2085f27976da6d08cbd","5a02c54923e5f4de08097fa9028e09e8cf5caa82","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}