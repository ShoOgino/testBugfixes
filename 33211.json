{"path":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores.AssertNeedsScores#createWeight(IndexSearcher).mjava","commits":[{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores.AssertNeedsScores#createWeight(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher) throws IOException {\n      final Weight w = in.createWeight(searcher);\n      return new Weight() {\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return w.explain(context, doc);\n        }\n\n        @Override\n        public Query getQuery() {\n          return AssertNeedsScores.this;\n        }\n\n        @Override\n        public float getValueForNormalization() throws IOException {\n          return w.getValueForNormalization();\n        }\n\n        @Override\n        public void normalize(float norm, float topLevelBoost) {\n          w.normalize(norm, topLevelBoost);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n          assertEquals(\"query=\" + in, value, needsScores);\n          return w.scorer(context, acceptDocs, needsScores);\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores.AssertNeedsScores#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores.AssertNeedsScores#createWeight(IndexSearcher).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      final Weight w = in.createWeight(searcher, needsScores);\n      return new Weight(AssertNeedsScores.this) {\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return w.explain(context, doc);\n        }\n\n        @Override\n        public float getValueForNormalization() throws IOException {\n          return w.getValueForNormalization();\n        }\n\n        @Override\n        public void normalize(float norm, float topLevelBoost) {\n          w.normalize(norm, topLevelBoost);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n          assertEquals(\"query=\" + in, value, needsScores);\n          return w.scorer(context, acceptDocs);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher) throws IOException {\n      final Weight w = in.createWeight(searcher);\n      return new Weight() {\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return w.explain(context, doc);\n        }\n\n        @Override\n        public Query getQuery() {\n          return AssertNeedsScores.this;\n        }\n\n        @Override\n        public float getValueForNormalization() throws IOException {\n          return w.getValueForNormalization();\n        }\n\n        @Override\n        public void normalize(float norm, float topLevelBoost) {\n          w.normalize(norm, topLevelBoost);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n          assertEquals(\"query=\" + in, value, needsScores);\n          return w.scorer(context, acceptDocs, needsScores);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb17639909a369c1e64866842e5c213440acc17e"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}