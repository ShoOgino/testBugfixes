{"path":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","commits":[{"id":"b3cefb552695b930cefe85eb7880cccdb914be6b","date":1275316631,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    final SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(sdp));\n\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            sdp.snapshot(getName());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (Thread t : threads) {\n      sdp.release(t.getName());\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","sourceNew":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Random random = newRandom();\n    Directory dir = new MockRAMDirectory();\n    final SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            sdp.snapshot(getName());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (Thread t : threads) {\n      sdp.release(t.getName());\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    writer.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    final SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(sdp));\n\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            sdp.snapshot(getName());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (Thread t : threads) {\n      sdp.release(t.getName());\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","sourceNew":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory(random);\n    final SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            sdp.snapshot(getName());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (Thread t : threads) {\n      sdp.release(t.getName());\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Random random = newRandom();\n    Directory dir = new MockRAMDirectory();\n    final SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            sdp.snapshot(getName());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (Thread t : threads) {\n      sdp.release(t.getName());\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","sourceNew":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    final SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            sdp.snapshot(getName());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (Thread t : threads) {\n      sdp.release(t.getName());\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory(random);\n    final SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            sdp.snapshot(getName());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (Thread t : threads) {\n      sdp.release(t.getName());\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","sourceNew":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    final SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            sdp.snapshot(getName());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (Thread t : threads) {\n      sdp.release(t.getName());\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    final SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(sdp));\n\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            sdp.snapshot(getName());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (Thread t : threads) {\n      sdp.release(t.getName());\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e","date":1327848882,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","sourceNew":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    final SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            sdp.snapshot(getName());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (Thread t : threads) {\n      sdp.release(t.getName());\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    final SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            sdp.snapshot(getName());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (Thread t : threads) {\n      sdp.release(t.getName());\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","sourceNew":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    final SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            sdp.snapshot(getName());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (Thread t : threads) {\n      sdp.release(t.getName());\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    final SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            sdp.snapshot(getName());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (Thread t : threads) {\n      sdp.release(t.getName());\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, IndexReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMultiThreadedSnapshotting().mjava","sourceNew":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    final SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            sdp.snapshot(getName());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (Thread t : threads) {\n      sdp.release(t.getName());\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultiThreadedSnapshotting() throws Exception {\n    Directory dir = newDirectory();\n    final SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            writer.addDocument(new Document());\n            writer.commit();\n            sdp.snapshot(getName());\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].setName(\"t\" + i);\n    }\n    \n    for (Thread t : threads) {\n      t.start();\n    }\n    \n    for (Thread t : threads) {\n      t.join();\n    }\n\n    // Do one last commit, so that after we release all snapshots, we stay w/ one commit\n    writer.addDocument(new Document());\n    writer.commit();\n    \n    for (Thread t : threads) {\n      sdp.release(t.getName());\n      writer.deleteUnusedFiles();\n    }\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"b3cefb552695b930cefe85eb7880cccdb914be6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3cefb552695b930cefe85eb7880cccdb914be6b","1f653cfcf159baeaafe5d01682a911e95bba4012"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["b3cefb552695b930cefe85eb7880cccdb914be6b"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["1f653cfcf159baeaafe5d01682a911e95bba4012","f9172d6bebb12f0bba2ebb1756779c2f8948ab7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["f9172d6bebb12f0bba2ebb1756779c2f8948ab7e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5cab9a86bd67202d20b6adc463008c8e982b070a"],"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"b3cefb552695b930cefe85eb7880cccdb914be6b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3cefb552695b930cefe85eb7880cccdb914be6b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}