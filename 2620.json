{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#logState(SolrCloudManager,Suggester).mjava","commits":[{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":0,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#logState(SolrCloudManager,Suggester).mjava","pathOld":"/dev/null","sourceNew":"  /**Use this to dump the state of a system and to generate a testcase\n   */\n  public static void logState(SolrCloudManager cloudManager, Suggester suggester) {\n    if(log.isTraceEnabled()) {\n      log.trace(\"LOGSTATE: {}\",\n          Utils.toJSONString((MapWriter) ew -> {\n            ew.put(\"liveNodes\", cloudManager.getClusterStateProvider().getLiveNodes());\n            ew.put(\"suggester\", suggester);\n            if (suggester.session.nodeStateProvider instanceof MapWriter) {\n              MapWriter nodeStateProvider = (MapWriter) suggester.session.nodeStateProvider;\n              nodeStateProvider.writeMap(ew);\n            }\n            try {\n              ew.put(\"autoscalingJson\", cloudManager.getDistribStateManager().getAutoScalingConfig());\n            } catch (InterruptedException e) {\n            }\n          }));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#logState(SolrCloudManager,Suggester).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#logState(SolrCloudManager,Suggester).mjava","sourceNew":"  /**Use this to dump the state of a system and to generate a testcase\n   */\n  public static void logState(SolrCloudManager cloudManager, Suggester suggester) {\n    if (log.isTraceEnabled()) {\n      log.trace(\"LOGSTATE: {}\",\n          Utils.toJSONString((MapWriter) ew -> {\n            ew.put(\"liveNodes\", cloudManager.getClusterStateProvider().getLiveNodes());\n            ew.put(\"suggester\", suggester);\n            if (suggester.session.nodeStateProvider instanceof MapWriter) {\n              MapWriter nodeStateProvider = (MapWriter) suggester.session.nodeStateProvider;\n              nodeStateProvider.writeMap(ew);\n            }\n            try {\n              ew.put(\"autoscalingJson\", cloudManager.getDistribStateManager().getAutoScalingConfig());\n            } catch (InterruptedException e) {\n            }\n          }));\n    }\n  }\n\n","sourceOld":"  /**Use this to dump the state of a system and to generate a testcase\n   */\n  public static void logState(SolrCloudManager cloudManager, Suggester suggester) {\n    if(log.isTraceEnabled()) {\n      log.trace(\"LOGSTATE: {}\",\n          Utils.toJSONString((MapWriter) ew -> {\n            ew.put(\"liveNodes\", cloudManager.getClusterStateProvider().getLiveNodes());\n            ew.put(\"suggester\", suggester);\n            if (suggester.session.nodeStateProvider instanceof MapWriter) {\n              MapWriter nodeStateProvider = (MapWriter) suggester.session.nodeStateProvider;\n              nodeStateProvider.writeMap(ew);\n            }\n            try {\n              ew.put(\"autoscalingJson\", cloudManager.getDistribStateManager().getAutoScalingConfig());\n            } catch (InterruptedException e) {\n            }\n          }));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6428b274f6593f368c4f838379620e7f5d196d65","date":1537799661,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#logState(SolrCloudManager,Suggester).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#logState(SolrCloudManager,Suggester).mjava","sourceNew":"  /**\n   * Use this to dump the state of a system and to generate a testcase\n   */\n  public static void logState(SolrCloudManager cloudManager, Suggester suggester) {\n    if (log.isTraceEnabled()) {\n      try {\n        log.trace(\"LOGSTATE: {}\",\n            Utils.writeJson(loggingInfo(cloudManager.getDistribStateManager().getAutoScalingConfig().getPolicy(), cloudManager, suggester),\n                new StringWriter(), true).toString());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":"  /**Use this to dump the state of a system and to generate a testcase\n   */\n  public static void logState(SolrCloudManager cloudManager, Suggester suggester) {\n    if (log.isTraceEnabled()) {\n      log.trace(\"LOGSTATE: {}\",\n          Utils.toJSONString((MapWriter) ew -> {\n            ew.put(\"liveNodes\", cloudManager.getClusterStateProvider().getLiveNodes());\n            ew.put(\"suggester\", suggester);\n            if (suggester.session.nodeStateProvider instanceof MapWriter) {\n              MapWriter nodeStateProvider = (MapWriter) suggester.session.nodeStateProvider;\n              nodeStateProvider.writeMap(ew);\n            }\n            try {\n              ew.put(\"autoscalingJson\", cloudManager.getDistribStateManager().getAutoScalingConfig());\n            } catch (InterruptedException e) {\n            }\n          }));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#logState(SolrCloudManager,Suggester).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#logState(SolrCloudManager,Suggester).mjava","sourceNew":"  /**\n   * Use this to dump the state of a system and to generate a testcase\n   */\n  public static void logState(SolrCloudManager cloudManager, Suggester suggester) {\n    if (log.isTraceEnabled()) {\n      try {\n        if (log.isTraceEnabled()) {\n          log.trace(\"LOGSTATE: {}\",\n              Utils.writeJson(loggingInfo(cloudManager.getDistribStateManager().getAutoScalingConfig().getPolicy(), cloudManager, suggester),\n                  new StringWriter(), true));\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Use this to dump the state of a system and to generate a testcase\n   */\n  public static void logState(SolrCloudManager cloudManager, Suggester suggester) {\n    if (log.isTraceEnabled()) {\n      try {\n        log.trace(\"LOGSTATE: {}\",\n            Utils.writeJson(loggingInfo(cloudManager.getDistribStateManager().getAutoScalingConfig().getPolicy(), cloudManager, suggester),\n                new StringWriter(), true).toString());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#logState(SolrCloudManager,Suggester).mjava","sourceNew":null,"sourceOld":"  /**\n   * Use this to dump the state of a system and to generate a testcase\n   */\n  public static void logState(SolrCloudManager cloudManager, Suggester suggester) {\n    if (log.isTraceEnabled()) {\n      try {\n        if (log.isTraceEnabled()) {\n          log.trace(\"LOGSTATE: {}\",\n              Utils.writeJson(loggingInfo(cloudManager.getDistribStateManager().getAutoScalingConfig().getPolicy(), cloudManager, suggester),\n                  new StringWriter(), true));\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["6428b274f6593f368c4f838379620e7f5d196d65"],"3f504512a03d978990cbff30db0522b354e846db":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6428b274f6593f368c4f838379620e7f5d196d65":["27639bb5e041490ce599065875dd2f6d8beef62a"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"27639bb5e041490ce599065875dd2f6d8beef62a":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"6428b274f6593f368c4f838379620e7f5d196d65":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["27639bb5e041490ce599065875dd2f6d8beef62a"],"27639bb5e041490ce599065875dd2f6d8beef62a":["6428b274f6593f368c4f838379620e7f5d196d65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}