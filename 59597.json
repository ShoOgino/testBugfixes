{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testCloudSolrStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(\"collection1\", zkServer.getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n    assertLong(tuples.get(0),\"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n    assertLong(tuples.get(0),\"alias.a_i\", 0);\n    assertString(tuples.get(0),\"name\", \"hello0\");    \n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n    assertLong(tuples.get(1),\"a_i\", 3);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7","date":1449800905,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","sourceNew":"  private void testCloudSolrStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(\"collection1\", zkServer.getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testCloudSolrStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(\"collection1\", zkServer.getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n    assertLong(tuples.get(0),\"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n    assertLong(tuples.get(0),\"alias.a_i\", 0);\n    assertString(tuples.get(0),\"name\", \"hello0\");    \n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n    assertLong(tuples.get(1),\"a_i\", 3);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","sourceNew":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n  }\n\n","sourceOld":"  private void testCloudSolrStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(\"collection1\", zkServer.getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","sourceNew":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n  }\n\n","sourceOld":"  private void testCloudSolrStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(\"collection1\", zkServer.getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","sourceNew":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n  }\n\n","sourceOld":"  private void testCloudSolrStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(\"collection1\", zkServer.getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","sourceNew":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n  }\n\n","sourceOld":"  private void testCloudSolrStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(\"collection1\", zkServer.getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"071baff2e8ccdf4709b106e0c0f720868fd7b444","date":1463622773,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","sourceNew":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"q param expected for search function\"));\n    }\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"blah\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"fl param expected for search function\"));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb10453c4217aa50392c51e3e89deb8b779bd51","date":1463648949,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","sourceNew":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"q param expected for search function\"));\n    }\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"blah\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"fl param expected for search function\"));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","sourceNew":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"q param expected for search function\"));\n    }\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"blah\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"fl param expected for search function\"));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","sourceNew":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"q param expected for search function\"));\n    }\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"blah\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"fl param expected for search function\"));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","sourceNew":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"q param expected for search function\"));\n    }\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"fl param expected for search function\"));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"q param expected for search function\"));\n    }\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"blah\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"fl param expected for search function\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","sourceNew":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"q param expected for search function\"));\n    }\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"fl param expected for search function\"));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"q param expected for search function\"));\n    }\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTION + \", q=\\\"blah\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"fl param expected for search function\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1995299b5e59567746bc05dcf3ebdb2539f8407e","date":1483145731,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","sourceNew":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"q param expected for search function\"));\n    }\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"fl param expected for search function\"));\n    }\n\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", fl=\\\"id, a_f\\\", sort=\\\"a_f\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"Invalid sort spec\"));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"q param expected for search function\"));\n    }\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"fl param expected for search function\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","sourceNew":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"q param expected for search function\"));\n    }\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"fl param expected for search function\"));\n    }\n\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", fl=\\\"id, a_f\\\", sort=\\\"a_f\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"Invalid sort spec\"));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"q param expected for search function\"));\n    }\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"fl param expected for search function\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","sourceNew":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"a_i\", 0);\n\n      // Basic w/aliases\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"alias.a_i\", 0);\n      assertString(tuples.get(0), \"name\", \"hello0\");\n\n      // Basic filtered test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n      assertOrder(tuples, 0, 3, 4);\n      assertLong(tuples.get(1), \"a_i\", 3);\n\n      try {\n        expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n        stream = new CloudSolrStream(expression, factory);\n        stream.setStreamContext(streamContext);\n        tuples = getTuples(stream);\n        throw new Exception(\"Should be an exception here\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"q param expected for search function\"));\n      }\n\n      try {\n        expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n        stream = new CloudSolrStream(expression, factory);\n        stream.setStreamContext(streamContext);\n        tuples = getTuples(stream);\n        throw new Exception(\"Should be an exception here\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"fl param expected for search function\"));\n      }\n\n      try {\n        expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", fl=\\\"id, a_f\\\", sort=\\\"a_f\\\")\");\n        stream = new CloudSolrStream(expression, factory);\n        stream.setStreamContext(streamContext);\n        tuples = getTuples(stream);\n        throw new Exception(\"Should be an exception here\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"Invalid sort spec\"));\n      }\n\n      // Test with shards param\n\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n\n      Map<String, List<String>> shardsMap = new HashMap();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(solrClientCache);\n\n      // Basic test\n      expression = StreamExpressionParser.parse(\"search(myCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"a_i\", 0);\n\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", \"search(myCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"a_i\", 0);\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"q param expected for search function\"));\n    }\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"fl param expected for search function\"));\n    }\n\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", fl=\\\"id, a_f\\\", sort=\\\"a_f\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"Invalid sort spec\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","sourceNew":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"a_i\", 0);\n\n      // Basic w/aliases\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"alias.a_i\", 0);\n      assertString(tuples.get(0), \"name\", \"hello0\");\n\n      // Basic filtered test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n      assertOrder(tuples, 0, 3, 4);\n      assertLong(tuples.get(1), \"a_i\", 3);\n\n      try {\n        expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n        stream = new CloudSolrStream(expression, factory);\n        stream.setStreamContext(streamContext);\n        tuples = getTuples(stream);\n        throw new Exception(\"Should be an exception here\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"q param expected for search function\"));\n      }\n\n      try {\n        expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n        stream = new CloudSolrStream(expression, factory);\n        stream.setStreamContext(streamContext);\n        tuples = getTuples(stream);\n        throw new Exception(\"Should be an exception here\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"fl param expected for search function\"));\n      }\n\n      try {\n        expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", fl=\\\"id, a_f\\\", sort=\\\"a_f\\\")\");\n        stream = new CloudSolrStream(expression, factory);\n        stream.setStreamContext(streamContext);\n        tuples = getTuples(stream);\n        throw new Exception(\"Should be an exception here\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"Invalid sort spec\"));\n      }\n\n      // Test with shards param\n\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n\n      Map<String, List<String>> shardsMap = new HashMap();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(solrClientCache);\n\n      // Basic test\n      expression = StreamExpressionParser.parse(\"search(myCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"a_i\", 0);\n\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", \"search(myCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"a_i\", 0);\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"a_i\", 0);\n\n    // Basic w/aliases\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n    assertLong(tuples.get(0), \"alias.a_i\", 0);\n    assertString(tuples.get(0), \"name\", \"hello0\");\n\n    // Basic filtered test\n    expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 3, 4);\n    assertLong(tuples.get(1), \"a_i\", 3);\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"q param expected for search function\"));\n    }\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"fl param expected for search function\"));\n    }\n\n\n    try {\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", fl=\\\"id, a_f\\\", sort=\\\"a_f\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      tuples = getTuples(stream);\n      throw new Exception(\"Should be an exception here\");\n    } catch(Exception e) {\n      assertTrue(e.getMessage().contains(\"Invalid sort spec\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","sourceNew":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"a_i\", 0);\n\n      // Basic w/aliases\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"alias.a_i\", 0);\n      assertString(tuples.get(0), \"name\", \"hello0\");\n\n      // Basic filtered test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n      assertOrder(tuples, 0, 3, 4);\n      assertLong(tuples.get(1), \"a_i\", 3);\n\n      try {\n        expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n        stream = new CloudSolrStream(expression, factory);\n        stream.setStreamContext(streamContext);\n        tuples = getTuples(stream);\n        throw new Exception(\"Should be an exception here\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"q param expected for search function\"));\n      }\n\n      try {\n        expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n        stream = new CloudSolrStream(expression, factory);\n        stream.setStreamContext(streamContext);\n        tuples = getTuples(stream);\n        throw new Exception(\"Should be an exception here\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"fl param expected for search function\"));\n      }\n\n      try {\n        expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", fl=\\\"id, a_f\\\", sort=\\\"a_f\\\")\");\n        stream = new CloudSolrStream(expression, factory);\n        stream.setStreamContext(streamContext);\n        tuples = getTuples(stream);\n        throw new Exception(\"Should be an exception here\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"Invalid sort spec\"));\n      }\n\n      // Test with shards param\n\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n\n      Map<String, List<String>> shardsMap = new HashMap();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(solrClientCache);\n\n      // Basic test\n      expression = StreamExpressionParser.parse(\"search(myCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"a_i\", 0);\n\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", \"search(myCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"a_i\", 0);\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"a_i\", 0);\n\n      // Basic w/aliases\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"alias.a_i\", 0);\n      assertString(tuples.get(0), \"name\", \"hello0\");\n\n      // Basic filtered test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n      assertOrder(tuples, 0, 3, 4);\n      assertLong(tuples.get(1), \"a_i\", 3);\n\n      try {\n        expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n        stream = new CloudSolrStream(expression, factory);\n        stream.setStreamContext(streamContext);\n        tuples = getTuples(stream);\n        throw new Exception(\"Should be an exception here\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"q param expected for search function\"));\n      }\n\n      try {\n        expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n        stream = new CloudSolrStream(expression, factory);\n        stream.setStreamContext(streamContext);\n        tuples = getTuples(stream);\n        throw new Exception(\"Should be an exception here\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"fl param expected for search function\"));\n      }\n\n      try {\n        expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", fl=\\\"id, a_f\\\", sort=\\\"a_f\\\")\");\n        stream = new CloudSolrStream(expression, factory);\n        stream.setStreamContext(streamContext);\n        tuples = getTuples(stream);\n        throw new Exception(\"Should be an exception here\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"Invalid sort spec\"));\n      }\n\n      // Test with shards param\n\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n\n      Map<String, List<String>> shardsMap = new HashMap();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(solrClientCache);\n\n      // Basic test\n      expression = StreamExpressionParser.parse(\"search(myCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"a_i\", 0);\n\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", \"search(myCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"a_i\", 0);\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCloudSolrStream().mjava","sourceNew":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"a_i\", 0);\n\n      // Basic w/aliases\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"alias.a_i\", 0);\n      assertString(tuples.get(0), \"name\", \"hello0\");\n\n      // Basic filtered test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n      assertOrder(tuples, 0, 3, 4);\n      assertLong(tuples.get(1), \"a_i\", 3);\n\n      try {\n        expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n        stream = new CloudSolrStream(expression, factory);\n        stream.setStreamContext(streamContext);\n        tuples = getTuples(stream);\n        throw new Exception(\"Should be an exception here\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"q param expected for search function\"));\n      }\n\n      try {\n        expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n        stream = new CloudSolrStream(expression, factory);\n        stream.setStreamContext(streamContext);\n        tuples = getTuples(stream);\n        throw new Exception(\"Should be an exception here\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"fl param expected for search function\"));\n      }\n\n      try {\n        expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", fl=\\\"id, a_f\\\", sort=\\\"a_f\\\")\");\n        stream = new CloudSolrStream(expression, factory);\n        stream.setStreamContext(streamContext);\n        tuples = getTuples(stream);\n        throw new Exception(\"Should be an exception here\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"Invalid sort spec\"));\n      }\n\n      // Test with shards param\n\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n\n      Map<String, List<String>> shardsMap = new HashMap<>();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(solrClientCache);\n\n      // Basic test\n      expression = StreamExpressionParser.parse(\"search(myCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"a_i\", 0);\n\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", \"search(myCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"a_i\", 0);\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCloudSolrStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress());\n    StreamExpression expression;\n    CloudSolrStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"a_i\", 0);\n\n      // Basic w/aliases\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"a_i=alias.a_i, a_s=name\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"alias.a_i\", 0);\n      assertString(tuples.get(0), \"name\", \"hello0\");\n\n      // Basic filtered test\n      expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n      assertOrder(tuples, 0, 3, 4);\n      assertLong(tuples.get(1), \"a_i\", 3);\n\n      try {\n        expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n        stream = new CloudSolrStream(expression, factory);\n        stream.setStreamContext(streamContext);\n        tuples = getTuples(stream);\n        throw new Exception(\"Should be an exception here\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"q param expected for search function\"));\n      }\n\n      try {\n        expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n        stream = new CloudSolrStream(expression, factory);\n        stream.setStreamContext(streamContext);\n        tuples = getTuples(stream);\n        throw new Exception(\"Should be an exception here\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"fl param expected for search function\"));\n      }\n\n      try {\n        expression = StreamExpressionParser.parse(\"search(\" + COLLECTIONORALIAS + \", q=\\\"blah\\\", fl=\\\"id, a_f\\\", sort=\\\"a_f\\\")\");\n        stream = new CloudSolrStream(expression, factory);\n        stream.setStreamContext(streamContext);\n        tuples = getTuples(stream);\n        throw new Exception(\"Should be an exception here\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"Invalid sort spec\"));\n      }\n\n      // Test with shards param\n\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n\n      Map<String, List<String>> shardsMap = new HashMap();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(solrClientCache);\n\n      // Basic test\n      expression = StreamExpressionParser.parse(\"search(myCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"a_i\", 0);\n\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", \"search(myCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\");\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n      assertLong(tuples.get(0), \"a_i\", 0);\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1eb10453c4217aa50392c51e3e89deb8b779bd51":["73450c0955930295d34703e7ddbfc6973b7a121a","071baff2e8ccdf4709b106e0c0f720868fd7b444"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["1995299b5e59567746bc05dcf3ebdb2539f8407e"],"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"73450c0955930295d34703e7ddbfc6973b7a121a":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7","b940572a59da1b42b6c20ab5278155b12816807a"],"071baff2e8ccdf4709b106e0c0f720868fd7b444":["73450c0955930295d34703e7ddbfc6973b7a121a"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["1995299b5e59567746bc05dcf3ebdb2539f8407e"],"b940572a59da1b42b6c20ab5278155b12816807a":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["73450c0955930295d34703e7ddbfc6973b7a121a","1eb10453c4217aa50392c51e3e89deb8b779bd51"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","1995299b5e59567746bc05dcf3ebdb2539f8407e"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"8c969f15cd04d31e520319c619a445ae21f02d72":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"1995299b5e59567746bc05dcf3ebdb2539f8407e":["8c969f15cd04d31e520319c619a445ae21f02d72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f00f1c5fad501b66705121feb623f8cfbb6712f9":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"1eb10453c4217aa50392c51e3e89deb8b779bd51":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"73450c0955930295d34703e7ddbfc6973b7a121a":["1eb10453c4217aa50392c51e3e89deb8b779bd51","071baff2e8ccdf4709b106e0c0f720868fd7b444","d470c8182e92b264680e34081b75e70a9f2b3c89","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"071baff2e8ccdf4709b106e0c0f720868fd7b444":["1eb10453c4217aa50392c51e3e89deb8b779bd51"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["9ba1b632c041956c93c41aa1143d16a567014891"],"8c969f15cd04d31e520319c619a445ae21f02d72":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","1995299b5e59567746bc05dcf3ebdb2539f8407e"],"1995299b5e59567746bc05dcf3ebdb2539f8407e":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c405288c4553ffb50ab8ca5adbdde9881bcec4e4","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","f03e4bed5023ec3ef93a771b8888cae991cf448d","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}