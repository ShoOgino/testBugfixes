{"path":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#addPosition(int,BytesRef).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#addPosition(int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTF;\n\n    final int delta = position - lastPosition;\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTF;\n\n    final int delta = position - lastPosition;\n    assert delta > 0 || position == 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTF;\n\n    final int delta = position - lastPosition;\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTF;\n\n    final int delta = position - lastPosition;\n    assert delta > 0 || position == 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTF;\n\n    final int delta = position - lastPosition;\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTF;\n\n    final int delta = position - lastPosition;\n    assert delta > 0 || position == 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTF;\n\n    final int delta = position - lastPosition;\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07972d15a5709171622bbb52bd91e9a35f1e3f26","date":1307194597,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTF;\n\n    final int delta = position - lastPosition;\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTF;\n\n    final int delta = position - lastPosition;\n    assert delta > 0 || position == 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e7c99bd45fa88a3d93a03fdd773053bef72268e","date":1307218088,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTF;\n\n    final int delta = position - lastPosition;\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTF;\n\n    final int delta = position - lastPosition;\n    assert delta > 0 || position == 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTF;\n\n    final int delta = position - lastPosition;\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTF;\n\n    final int delta = position - lastPosition;\n    assert delta > 0 || position == 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n\n    final int delta = position - lastPosition;\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTF;\n\n    final int delta = position - lastPosition;\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n\n    final int delta = position - lastPosition;\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n\n    final int delta = position - lastPosition;\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["07972d15a5709171622bbb52bd91e9a35f1e3f26"],"70ad682703b8585f5d0a637efec044d57ec05efb":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","56da903869515527852ee21ea7ef7bfe414cd40d"],"07972d15a5709171622bbb52bd91e9a35f1e3f26":["56da903869515527852ee21ea7ef7bfe414cd40d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["70ad682703b8585f5d0a637efec044d57ec05efb","07972d15a5709171622bbb52bd91e9a35f1e3f26"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","56da903869515527852ee21ea7ef7bfe414cd40d"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["56da903869515527852ee21ea7ef7bfe414cd40d","07972d15a5709171622bbb52bd91e9a35f1e3f26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60ba444201d2570214b6fcf1d15600dc1a01f548"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"70ad682703b8585f5d0a637efec044d57ec05efb":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"07972d15a5709171622bbb52bd91e9a35f1e3f26":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","07972d15a5709171622bbb52bd91e9a35f1e3f26","868da859b43505d9d2a023bfeae6dd0c795f5295","1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2","868da859b43505d9d2a023bfeae6dd0c795f5295","1e7c99bd45fa88a3d93a03fdd773053bef72268e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}