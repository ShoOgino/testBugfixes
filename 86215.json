{"path":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","sourceNew":"    /**\n     * Find words for a more-like-this query former.\n\t * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n\t * Each array has 6 elements.\n\t * The elements are:\n\t * <ol>\n\t * <li> The word (String)\n\t * <li> The top field that this word comes from (String)\n\t * <li> The score for this word (Float)\n\t * <li> The IDF value (Float)\n\t * <li> The frequency of this word in the index (Integer)\n\t * <li> The frequency of this word in the source document (Integer)\t \t \n\t * </ol>\n\t * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n\t * This method is exposed so that you can identify the \"interesting words\" in a document.\n\t * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n     *\n     * @param r the reader that has the content of the document\n\t * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n\t *\n\t * @see #retrieveInterestingTerms\n     */\n    public PriorityQueue<Object[]> retrieveTerms(Reader r) throws IOException {\n        Map<String,Int> words = new HashMap<String,Int>();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n\t\t\taddTermFrequencies(r, words, fieldName);\n        }\n        return createQueue(words);\n    }\n\n","sourceOld":"    /**\n     * Find words for a more-like-this query former.\n\t * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n\t * Each array has 6 elements.\n\t * The elements are:\n\t * <ol>\n\t * <li> The word (String)\n\t * <li> The top field that this word comes from (String)\n\t * <li> The score for this word (Float)\n\t * <li> The IDF value (Float)\n\t * <li> The frequency of this word in the index (Integer)\n\t * <li> The frequency of this word in the source document (Integer)\t \t \n\t * </ol>\n\t * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n\t * This method is exposed so that you can identify the \"interesting words\" in a document.\n\t * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n     *\n     * @param r the reader that has the content of the document\n\t * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n\t *\n\t * @see #retrieveInterestingTerms\n     */\n    public PriorityQueue<Object[]> retrieveTerms(Reader r) throws IOException {\n        Map<String,Int> words = new HashMap<String,Int>();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n\t\t\taddTermFrequencies(r, words, fieldName);\n        }\n        return createQueue(words);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e141595402370bee958745de8b1c9de1fa182581","date":1310547892,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n   * Each array has 6 elements.\n   * The elements are:\n   * <ol>\n   * <li> The word (String)\n   * <li> The top field that this word comes from (String)\n   * <li> The score for this word (Float)\n   * <li> The IDF value (Float)\n   * <li> The frequency of this word in the index (Integer)\n   * <li> The frequency of this word in the source document (Integer)\n   * </ol>\n   * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n   * This method is exposed so that you can identify the \"interesting words\" in a document.\n   * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n   *\n   * @param r the reader that has the content of the document\n   * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n   * @see #retrieveInterestingTerms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(Reader r) throws IOException {\n    Map<String, Int> words = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      addTermFrequencies(r, words, fieldName);\n    }\n    return createQueue(words);\n  }\n\n","sourceOld":"    /**\n     * Find words for a more-like-this query former.\n\t * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n\t * Each array has 6 elements.\n\t * The elements are:\n\t * <ol>\n\t * <li> The word (String)\n\t * <li> The top field that this word comes from (String)\n\t * <li> The score for this word (Float)\n\t * <li> The IDF value (Float)\n\t * <li> The frequency of this word in the index (Integer)\n\t * <li> The frequency of this word in the source document (Integer)\t \t \n\t * </ol>\n\t * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n\t * This method is exposed so that you can identify the \"interesting words\" in a document.\n\t * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n     *\n     * @param r the reader that has the content of the document\n\t * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n\t *\n\t * @see #retrieveInterestingTerms\n     */\n    public PriorityQueue<Object[]> retrieveTerms(Reader r) throws IOException {\n        Map<String,Int> words = new HashMap<String,Int>();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n\t\t\taddTermFrequencies(r, words, fieldName);\n        }\n        return createQueue(words);\n    }\n\n","bugFix":null,"bugIntro":["e562682007e295029696e354ac6947531b083c79"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1","date":1310609231,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Reader).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n   * Each array has 6 elements.\n   * The elements are:\n   * <ol>\n   * <li> The word (String)\n   * <li> The top field that this word comes from (String)\n   * <li> The score for this word (Float)\n   * <li> The IDF value (Float)\n   * <li> The frequency of this word in the index (Integer)\n   * <li> The frequency of this word in the source document (Integer)\n   * </ol>\n   * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n   * This method is exposed so that you can identify the \"interesting words\" in a document.\n   * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n   *\n   * @param r the reader that has the content of the document\n   * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n   * @see #retrieveInterestingTerms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(Reader r) throws IOException {\n    Map<String, Int> words = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      addTermFrequencies(r, words, fieldName);\n    }\n    return createQueue(words);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n   * Each array has 6 elements.\n   * The elements are:\n   * <ol>\n   * <li> The word (String)\n   * <li> The top field that this word comes from (String)\n   * <li> The score for this word (Float)\n   * <li> The IDF value (Float)\n   * <li> The frequency of this word in the index (Integer)\n   * <li> The frequency of this word in the source document (Integer)\n   * </ol>\n   * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n   * This method is exposed so that you can identify the \"interesting words\" in a document.\n   * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n   *\n   * @param r the reader that has the content of the document\n   * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n   * @see #retrieveInterestingTerms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(Reader r) throws IOException {\n    Map<String, Int> words = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      addTermFrequencies(r, words, fieldName);\n    }\n    return createQueue(words);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1":["e141595402370bee958745de8b1c9de1fa182581"],"e141595402370bee958745de8b1c9de1fa182581":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e141595402370bee958745de8b1c9de1fa182581":["b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e141595402370bee958745de8b1c9de1fa182581"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}