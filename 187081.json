{"path":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef).mjava","commits":[{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Copy BytesRef in */\n  public void copy(BytesRef bytes) throws IOException {\n    int byteCount = bytes.length;\n    int bytesUpto = bytes.offset;\n    while (byteCount > 0) {\n      int left = blockSize - upto;\n      if (left == 0) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n        left = blockSize;\n      }\n      if (left < byteCount) {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, left);\n        upto = blockSize;\n        byteCount -= left;\n        bytesUpto += left;\n      } else {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, (int) byteCount);\n        upto += byteCount;\n        break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9069c2e665572658f846820b6cb8ad53de19df0","date":1276611358,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef).mjava","sourceNew":"  /** Copy BytesRef in */\n  public void copy(BytesRef bytes) throws IOException {\n    int byteCount = bytes.length;\n    int bytesUpto = bytes.offset;\n    while (byteCount > 0) {\n      int left = blockSize - upto;\n      if (left == 0) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);          \n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n        left = blockSize;\n      }\n      if (left < byteCount) {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, left);\n        upto = blockSize;\n        byteCount -= left;\n        bytesUpto += left;\n      } else {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, (int) byteCount);\n        upto += byteCount;\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  /** Copy BytesRef in */\n  public void copy(BytesRef bytes) throws IOException {\n    int byteCount = bytes.length;\n    int bytesUpto = bytes.offset;\n    while (byteCount > 0) {\n      int left = blockSize - upto;\n      if (left == 0) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n        left = blockSize;\n      }\n      if (left < byteCount) {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, left);\n        upto = blockSize;\n        byteCount -= left;\n        bytesUpto += left;\n      } else {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, (int) byteCount);\n        upto += byteCount;\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef).mjava","sourceNew":"  /** Copy BytesRef in */\n  public void copy(BytesRef bytes) throws IOException {\n    int byteCount = bytes.length;\n    int bytesUpto = bytes.offset;\n    while (byteCount > 0) {\n      int left = blockSize - upto;\n      if (left == 0) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);          \n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n        left = blockSize;\n      }\n      if (left < byteCount) {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, left);\n        upto = blockSize;\n        byteCount -= left;\n        bytesUpto += left;\n      } else {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, (int) byteCount);\n        upto += byteCount;\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  /** Copy BytesRef in */\n  public void copy(BytesRef bytes) throws IOException {\n    int byteCount = bytes.length;\n    int bytesUpto = bytes.offset;\n    while (byteCount > 0) {\n      int left = blockSize - upto;\n      if (left == 0) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n        left = blockSize;\n      }\n      if (left < byteCount) {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, left);\n        upto = blockSize;\n        byteCount -= left;\n        bytesUpto += left;\n      } else {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, (int) byteCount);\n        upto += byteCount;\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df9ba72278ee433b2352986cbf97ab7161006953","date":1286047596,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef).mjava","sourceNew":"  /** Copy BytesRef in */\n  public void copy(BytesRef bytes) throws IOException {\n    int byteCount = bytes.length;\n    int bytesUpto = bytes.offset;\n    while (byteCount > 0) {\n      int left = blockSize - upto;\n      if (left == 0) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);          \n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n        left = blockSize;\n      }\n      if (left < byteCount) {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, left);\n        upto = blockSize;\n        byteCount -= left;\n        bytesUpto += left;\n      } else {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, byteCount);\n        upto += byteCount;\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  /** Copy BytesRef in */\n  public void copy(BytesRef bytes) throws IOException {\n    int byteCount = bytes.length;\n    int bytesUpto = bytes.offset;\n    while (byteCount > 0) {\n      int left = blockSize - upto;\n      if (left == 0) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);          \n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n        left = blockSize;\n      }\n      if (left < byteCount) {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, left);\n        upto = blockSize;\n        byteCount -= left;\n        bytesUpto += left;\n      } else {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, (int) byteCount);\n        upto += byteCount;\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef).mjava","sourceNew":"  /** Copy BytesRef in */\n  public void copy(BytesRef bytes) throws IOException {\n    int byteCount = bytes.length;\n    int bytesUpto = bytes.offset;\n    while (byteCount > 0) {\n      int left = blockSize - upto;\n      if (left == 0) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);          \n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n        left = blockSize;\n      }\n      if (left < byteCount) {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, left);\n        upto = blockSize;\n        byteCount -= left;\n        bytesUpto += left;\n      } else {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, byteCount);\n        upto += byteCount;\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  /** Copy BytesRef in */\n  public void copy(BytesRef bytes) throws IOException {\n    int byteCount = bytes.length;\n    int bytesUpto = bytes.offset;\n    while (byteCount > 0) {\n      int left = blockSize - upto;\n      if (left == 0) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);          \n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n        left = blockSize;\n      }\n      if (left < byteCount) {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, left);\n        upto = blockSize;\n        byteCount -= left;\n        bytesUpto += left;\n      } else {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, (int) byteCount);\n        upto += byteCount;\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef).mjava","sourceNew":"  /** Copy BytesRef in */\n  public void copy(BytesRef bytes) throws IOException {\n    int byteCount = bytes.length;\n    int bytesUpto = bytes.offset;\n    while (byteCount > 0) {\n      int left = blockSize - upto;\n      if (left == 0) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);          \n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n        left = blockSize;\n      }\n      if (left < byteCount) {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, left);\n        upto = blockSize;\n        byteCount -= left;\n        bytesUpto += left;\n      } else {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, byteCount);\n        upto += byteCount;\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  /** Copy BytesRef in */\n  public void copy(BytesRef bytes) throws IOException {\n    int byteCount = bytes.length;\n    int bytesUpto = bytes.offset;\n    while (byteCount > 0) {\n      int left = blockSize - upto;\n      if (left == 0) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);          \n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n        left = blockSize;\n      }\n      if (left < byteCount) {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, left);\n        upto = blockSize;\n        byteCount -= left;\n        bytesUpto += left;\n      } else {\n        System.arraycopy(bytes.bytes, bytesUpto, currentBlock, upto, byteCount);\n        upto += byteCount;\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["df9ba72278ee433b2352986cbf97ab7161006953"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df9ba72278ee433b2352986cbf97ab7161006953":["e9069c2e665572658f846820b6cb8ad53de19df0"],"5f4e87790277826a2aea119328600dfb07761f32":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","e9069c2e665572658f846820b6cb8ad53de19df0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","df9ba72278ee433b2352986cbf97ab7161006953"],"e9069c2e665572658f846820b6cb8ad53de19df0":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["5f4e87790277826a2aea119328600dfb07761f32","e9069c2e665572658f846820b6cb8ad53de19df0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"df9ba72278ee433b2352986cbf97ab7161006953":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"e9069c2e665572658f846820b6cb8ad53de19df0":["df9ba72278ee433b2352986cbf97ab7161006953","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}