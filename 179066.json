{"path":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","commits":[{"id":"c5c99ad021f3da085fcb66220598a8f91dc5e453","date":1462242046,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","sourceNew":"  // note: remember to reserve the indexCommit first so it won't get deleted concurrently\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + snapDir);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + snapDir);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        IndexFetcher.delTree(snapShotDir);\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + snapDir);\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + snapDir);\n    } catch (Exception e) {\n      IndexFetcher.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c7a21395bae9e2f61aeb639f47aaca771c426ed","date":1462255690,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","sourceNew":"  // note: remember to reserve the indexCommit first so it won't get deleted concurrently\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + snapDir);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + snapDir);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        IndexFetcher.delTree(snapShotDir);\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + snapDir);\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + snapDir);\n    } catch (Exception e) {\n      IndexFetcher.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","sourceNew":"  // note: remember to reserve the indexCommit first so it won't get deleted concurrently\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + snapDir);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + snapDir);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        IndexFetcher.delTree(snapShotDir);\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + snapDir);\n    NamedList<Object> details = new NamedList<>();\n    details.add(\"startTime\", new Date().toString());\n    try {\n      Collection<String> files = indexCommit.getFileNames();\n\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + snapDir);\n    } catch (Exception e) {\n      IndexFetcher.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getGeneration());\n      replicationHandler.snapShootDetails = details;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","date":1466705968,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","sourceNew":"  // note: remember to reserve the indexCommit first so it won't get deleted concurrently\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + baseSnapDirPath);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        for(String fileName : files) {\n          backupRepo.copyFileFrom(dir, fileName, snapshotDirPath);\n        }\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + baseSnapDirPath);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        backupRepo.deleteDirectory(snapshotDirPath);\n      }\n    }\n  }\n\n","sourceOld":"  // note: remember to reserve the indexCommit first so it won't get deleted concurrently\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + snapDir);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + snapDir);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        IndexFetcher.delTree(snapShotDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["1402fc060950f7e620c4e21df7cdfcaee1d2b230"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","sourceNew":"  // note: remember to reserve the indexCommit first so it won't get deleted concurrently\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + baseSnapDirPath);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        for(String fileName : files) {\n          backupRepo.copyFileFrom(dir, fileName, snapshotDirPath);\n        }\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + baseSnapDirPath);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        backupRepo.deleteDirectory(snapshotDirPath);\n      }\n    }\n  }\n\n","sourceOld":"  // note: remember to reserve the indexCommit first so it won't get deleted concurrently\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + snapDir);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        copyFiles(dir, files, snapShotDir);\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + snapDir);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        IndexFetcher.delTree(snapShotDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1402fc060950f7e620c4e21df7cdfcaee1d2b230","date":1484098519,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","sourceNew":"  // note: remember to reserve the indexCommit first so it won't get deleted concurrently\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + baseSnapDirPath);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        for(String fileName : files) {\n          backupRepo.copyFileFrom(dir, fileName, snapshotDirPath);\n        }\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + baseSnapDirPath);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        try {\n          backupRepo.deleteDirectory(snapshotDirPath);\n        } catch (Exception excDuringDelete) {\n          LOG.warn(\"Failed to delete \"+snapshotDirPath+\" after snapshot creation failed due to: \"+excDuringDelete);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // note: remember to reserve the indexCommit first so it won't get deleted concurrently\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + baseSnapDirPath);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        for(String fileName : files) {\n          backupRepo.copyFileFrom(dir, fileName, snapshotDirPath);\n        }\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + baseSnapDirPath);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        backupRepo.deleteDirectory(snapshotDirPath);\n      }\n    }\n  }\n\n","bugFix":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","sourceNew":"  // note: remember to reserve the indexCommit first so it won't get deleted concurrently\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + baseSnapDirPath);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        for(String fileName : files) {\n          backupRepo.copyFileFrom(dir, fileName, snapshotDirPath);\n        }\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + baseSnapDirPath);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        try {\n          backupRepo.deleteDirectory(snapshotDirPath);\n        } catch (Exception excDuringDelete) {\n          LOG.warn(\"Failed to delete \"+snapshotDirPath+\" after snapshot creation failed due to: \"+excDuringDelete);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // note: remember to reserve the indexCommit first so it won't get deleted concurrently\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + baseSnapDirPath);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        for(String fileName : files) {\n          backupRepo.copyFileFrom(dir, fileName, snapshotDirPath);\n        }\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + baseSnapDirPath);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        backupRepo.deleteDirectory(snapshotDirPath);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c0c76f8855bd391c39890131d8dbd56c3fdcef0","date":1512185429,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","sourceNew":"  // note: remember to reserve the indexCommit first so it won't get deleted concurrently\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    assert indexCommit != null;\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + baseSnapDirPath);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        for(String fileName : files) {\n          backupRepo.copyFileFrom(dir, fileName, snapshotDirPath);\n        }\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + baseSnapDirPath);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        try {\n          backupRepo.deleteDirectory(snapshotDirPath);\n        } catch (Exception excDuringDelete) {\n          LOG.warn(\"Failed to delete \"+snapshotDirPath+\" after snapshot creation failed due to: \"+excDuringDelete);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // note: remember to reserve the indexCommit first so it won't get deleted concurrently\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + baseSnapDirPath);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        for(String fileName : files) {\n          backupRepo.copyFileFrom(dir, fileName, snapshotDirPath);\n        }\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + baseSnapDirPath);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        try {\n          backupRepo.deleteDirectory(snapshotDirPath);\n        } catch (Exception excDuringDelete) {\n          LOG.warn(\"Failed to delete \"+snapshotDirPath+\" after snapshot creation failed due to: \"+excDuringDelete);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"670400747be2d99524159f3806d449ecfb0c2389","date":1512293281,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","sourceNew":"  // note: remember to reserve the indexCommit first so it won't get deleted concurrently\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    assert indexCommit != null;\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + baseSnapDirPath);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        for(String fileName : files) {\n          backupRepo.copyFileFrom(dir, fileName, snapshotDirPath);\n        }\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + baseSnapDirPath);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        try {\n          backupRepo.deleteDirectory(snapshotDirPath);\n        } catch (Exception excDuringDelete) {\n          LOG.warn(\"Failed to delete \"+snapshotDirPath+\" after snapshot creation failed due to: \"+excDuringDelete);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // note: remember to reserve the indexCommit first so it won't get deleted concurrently\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + baseSnapDirPath);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        for(String fileName : files) {\n          backupRepo.copyFileFrom(dir, fileName, snapshotDirPath);\n        }\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + baseSnapDirPath);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        try {\n          backupRepo.deleteDirectory(snapshotDirPath);\n        } catch (Exception excDuringDelete) {\n          LOG.warn(\"Failed to delete \"+snapshotDirPath+\" after snapshot creation failed due to: \"+excDuringDelete);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","sourceNew":"  // note: remember to reserve the indexCommit first so it won't get deleted concurrently\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    assert indexCommit != null;\n    log.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + baseSnapDirPath);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        for(String fileName : files) {\n          backupRepo.copyFileFrom(dir, fileName, snapshotDirPath);\n        }\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      log.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + baseSnapDirPath);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        try {\n          backupRepo.deleteDirectory(snapshotDirPath);\n        } catch (Exception excDuringDelete) {\n          log.warn(\"Failed to delete \"+snapshotDirPath+\" after snapshot creation failed due to: \"+excDuringDelete);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // note: remember to reserve the indexCommit first so it won't get deleted concurrently\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    assert indexCommit != null;\n    LOG.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + baseSnapDirPath);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        for(String fileName : files) {\n          backupRepo.copyFileFrom(dir, fileName, snapshotDirPath);\n        }\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      LOG.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + baseSnapDirPath);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        try {\n          backupRepo.deleteDirectory(snapshotDirPath);\n        } catch (Exception excDuringDelete) {\n          LOG.warn(\"Failed to delete \"+snapshotDirPath+\" after snapshot creation failed due to: \"+excDuringDelete);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19f02bb04467ed179738a398a7da80bbbe161c16","date":1573660732,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","sourceNew":"  /**\n   * Handles the logic of creating a snapshot\n   * <p>\n   * <b>NOTE:</b> The caller <em>MUST</em> ensure that the {@link IndexCommit} is saved prior to \n   * calling this method, and released after calling this method, or there is no no garuntee that the \n   * method will function correctly.\n   * </p>\n   *\n   * @see IndexDeletionPolicyWrapper#saveCommitPoint\n   * @see IndexDeletionPolicyWrapper#releaseCommitPoint\n   */\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    assert indexCommit != null;\n    log.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + baseSnapDirPath);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        for(String fileName : files) {\n          log.debug(\"Copying fileName={} from dir={} to snapshot={}\", fileName, dir, snapshotDirPath);\n          backupRepo.copyFileFrom(dir, fileName, snapshotDirPath);\n        }\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      log.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + baseSnapDirPath);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        try {\n          backupRepo.deleteDirectory(snapshotDirPath);\n        } catch (Exception excDuringDelete) {\n          log.warn(\"Failed to delete \"+snapshotDirPath+\" after snapshot creation failed due to: \"+excDuringDelete);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // note: remember to reserve the indexCommit first so it won't get deleted concurrently\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    assert indexCommit != null;\n    log.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + baseSnapDirPath);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        for(String fileName : files) {\n          backupRepo.copyFileFrom(dir, fileName, snapshotDirPath);\n        }\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      log.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + baseSnapDirPath);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        try {\n          backupRepo.deleteDirectory(snapshotDirPath);\n        } catch (Exception excDuringDelete) {\n          log.warn(\"Failed to delete \"+snapshotDirPath+\" after snapshot creation failed due to: \"+excDuringDelete);\n        }\n      }\n    }\n  }\n\n","bugFix":["c5c99ad021f3da085fcb66220598a8f91dc5e453"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec54bd926c45854b5a1599685b0f7d2bfbfe177f","date":1573838246,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","sourceNew":"  /**\n   * Handles the logic of creating a snapshot\n   * <p>\n   * <b>NOTE:</b> The caller <em>MUST</em> ensure that the {@link IndexCommit} is saved prior to \n   * calling this method, and released after calling this method, or there is no no garuntee that the \n   * method will function correctly.\n   * </p>\n   *\n   * @see IndexDeletionPolicyWrapper#saveCommitPoint\n   * @see IndexDeletionPolicyWrapper#releaseCommitPoint\n   */\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    assert indexCommit != null;\n    log.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + baseSnapDirPath);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        for(String fileName : files) {\n          log.debug(\"Copying fileName={} from dir={} to snapshot={}\", fileName, dir, snapshotDirPath);\n          backupRepo.copyFileFrom(dir, fileName, snapshotDirPath);\n        }\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      details.add(\"directoryName\", directoryName);\n      log.info(\"Done creating backup snapshot: {} into {}\", (snapshotName == null ? \"<not named>\" : snapshotName), snapshotDirPath);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        try {\n          backupRepo.deleteDirectory(snapshotDirPath);\n        } catch (Exception excDuringDelete) {\n          log.warn(\"Failed to delete \"+snapshotDirPath+\" after snapshot creation failed due to: \"+excDuringDelete);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Handles the logic of creating a snapshot\n   * <p>\n   * <b>NOTE:</b> The caller <em>MUST</em> ensure that the {@link IndexCommit} is saved prior to \n   * calling this method, and released after calling this method, or there is no no garuntee that the \n   * method will function correctly.\n   * </p>\n   *\n   * @see IndexDeletionPolicyWrapper#saveCommitPoint\n   * @see IndexDeletionPolicyWrapper#releaseCommitPoint\n   */\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    assert indexCommit != null;\n    log.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + baseSnapDirPath);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        for(String fileName : files) {\n          log.debug(\"Copying fileName={} from dir={} to snapshot={}\", fileName, dir, snapshotDirPath);\n          backupRepo.copyFileFrom(dir, fileName, snapshotDirPath);\n        }\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      log.info(\"Done creating backup snapshot: \" + (snapshotName == null ? \"<not named>\" : snapshotName) +\n          \" at \" + baseSnapDirPath);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        try {\n          backupRepo.deleteDirectory(snapshotDirPath);\n        } catch (Exception excDuringDelete) {\n          log.warn(\"Failed to delete \"+snapshotDirPath+\" after snapshot creation failed due to: \"+excDuringDelete);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","sourceNew":"  /**\n   * Handles the logic of creating a snapshot\n   * <p>\n   * <b>NOTE:</b> The caller <em>MUST</em> ensure that the {@link IndexCommit} is saved prior to \n   * calling this method, and released after calling this method, or there is no no garuntee that the \n   * method will function correctly.\n   * </p>\n   *\n   * @see IndexDeletionPolicyWrapper#saveCommitPoint\n   * @see IndexDeletionPolicyWrapper#releaseCommitPoint\n   */\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    assert indexCommit != null;\n    if (log.isInfoEnabled()) {\n      log.info(\"Creating backup snapshot {} at {}\", (snapshotName == null ? \"<not named>\" : snapshotName), baseSnapDirPath);\n    }\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        for(String fileName : files) {\n          log.debug(\"Copying fileName={} from dir={} to snapshot={}\", fileName, dir, snapshotDirPath);\n          backupRepo.copyFileFrom(dir, fileName, snapshotDirPath);\n        }\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      details.add(\"directoryName\", directoryName);\n      if (log.isInfoEnabled()) {\n        log.info(\"Done creating backup snapshot: {} into {}\", (snapshotName == null ? \"<not named>\" : snapshotName), snapshotDirPath);\n      }\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        try {\n          backupRepo.deleteDirectory(snapshotDirPath);\n        } catch (Exception excDuringDelete) {\n          log.warn(\"Failed to delete {} after snapshot creation failed due to: {}\", snapshotDirPath, excDuringDelete);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Handles the logic of creating a snapshot\n   * <p>\n   * <b>NOTE:</b> The caller <em>MUST</em> ensure that the {@link IndexCommit} is saved prior to \n   * calling this method, and released after calling this method, or there is no no garuntee that the \n   * method will function correctly.\n   * </p>\n   *\n   * @see IndexDeletionPolicyWrapper#saveCommitPoint\n   * @see IndexDeletionPolicyWrapper#releaseCommitPoint\n   */\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    assert indexCommit != null;\n    log.info(\"Creating backup snapshot \" + (snapshotName == null ? \"<not named>\" : snapshotName) + \" at \" + baseSnapDirPath);\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        for(String fileName : files) {\n          log.debug(\"Copying fileName={} from dir={} to snapshot={}\", fileName, dir, snapshotDirPath);\n          backupRepo.copyFileFrom(dir, fileName, snapshotDirPath);\n        }\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      details.add(\"directoryName\", directoryName);\n      log.info(\"Done creating backup snapshot: {} into {}\", (snapshotName == null ? \"<not named>\" : snapshotName), snapshotDirPath);\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        try {\n          backupRepo.deleteDirectory(snapshotDirPath);\n        } catch (Exception excDuringDelete) {\n          log.warn(\"Failed to delete \"+snapshotDirPath+\" after snapshot creation failed due to: \"+excDuringDelete);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit).mjava","sourceNew":"  /**\n   * Handles the logic of creating a snapshot\n   * <p>\n   * <b>NOTE:</b> The caller <em>MUST</em> ensure that the {@link IndexCommit} is saved prior to \n   * calling this method, and released after calling this method, or there is no no garuntee that the \n   * method will function correctly.\n   * </p>\n   *\n   * @see IndexDeletionPolicyWrapper#saveCommitPoint\n   * @see IndexDeletionPolicyWrapper#releaseCommitPoint\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    assert indexCommit != null;\n    if (log.isInfoEnabled()) {\n      log.info(\"Creating backup snapshot {} at {}\", (snapshotName == null ? \"<not named>\" : snapshotName), baseSnapDirPath);\n    }\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        for(String fileName : files) {\n          log.debug(\"Copying fileName={} from dir={} to snapshot={}\", fileName, dir, snapshotDirPath);\n          backupRepo.copyFileFrom(dir, fileName, snapshotDirPath);\n        }\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      details.add(\"directoryName\", directoryName);\n      if (log.isInfoEnabled()) {\n        log.info(\"Done creating backup snapshot: {} into {}\", (snapshotName == null ? \"<not named>\" : snapshotName), snapshotDirPath);\n      }\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        try {\n          backupRepo.deleteDirectory(snapshotDirPath);\n        } catch (Exception excDuringDelete) {\n          log.warn(\"Failed to delete {} after snapshot creation failed due to: {}\", snapshotDirPath, excDuringDelete);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Handles the logic of creating a snapshot\n   * <p>\n   * <b>NOTE:</b> The caller <em>MUST</em> ensure that the {@link IndexCommit} is saved prior to \n   * calling this method, and released after calling this method, or there is no no garuntee that the \n   * method will function correctly.\n   * </p>\n   *\n   * @see IndexDeletionPolicyWrapper#saveCommitPoint\n   * @see IndexDeletionPolicyWrapper#releaseCommitPoint\n   */\n  protected NamedList createSnapshot(final IndexCommit indexCommit) throws Exception {\n    assert indexCommit != null;\n    if (log.isInfoEnabled()) {\n      log.info(\"Creating backup snapshot {} at {}\", (snapshotName == null ? \"<not named>\" : snapshotName), baseSnapDirPath);\n    }\n    boolean success = false;\n    try {\n      NamedList<Object> details = new NamedList<>();\n      details.add(\"startTime\", new Date().toString());//bad; should be Instant.now().toString()\n\n      Collection<String> files = indexCommit.getFileNames();\n      Directory dir = solrCore.getDirectoryFactory().get(solrCore.getIndexDir(), DirContext.DEFAULT, solrCore.getSolrConfig().indexConfig.lockType);\n      try {\n        for(String fileName : files) {\n          log.debug(\"Copying fileName={} from dir={} to snapshot={}\", fileName, dir, snapshotDirPath);\n          backupRepo.copyFileFrom(dir, fileName, snapshotDirPath);\n        }\n      } finally {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());//bad; should be Instant.now().toString()\n      details.add(\"snapshotName\", snapshotName);\n      details.add(\"directoryName\", directoryName);\n      if (log.isInfoEnabled()) {\n        log.info(\"Done creating backup snapshot: {} into {}\", (snapshotName == null ? \"<not named>\" : snapshotName), snapshotDirPath);\n      }\n      success = true;\n      return details;\n    } finally {\n      if (!success) {\n        try {\n          backupRepo.deleteDirectory(snapshotDirPath);\n        } catch (Exception excDuringDelete) {\n          log.warn(\"Failed to delete {} after snapshot creation failed due to: {}\", snapshotDirPath, excDuringDelete);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5c99ad021f3da085fcb66220598a8f91dc5e453":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","1402fc060950f7e620c4e21df7cdfcaee1d2b230"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["19f02bb04467ed179738a398a7da80bbbe161c16"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"19f02bb04467ed179738a398a7da80bbbe161c16":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5c99ad021f3da085fcb66220598a8f91dc5e453"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c0c76f8855bd391c39890131d8dbd56c3fdcef0":["1402fc060950f7e620c4e21df7cdfcaee1d2b230"],"1402fc060950f7e620c4e21df7cdfcaee1d2b230":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"670400747be2d99524159f3806d449ecfb0c2389":["1402fc060950f7e620c4e21df7cdfcaee1d2b230","7c0c76f8855bd391c39890131d8dbd56c3fdcef0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["670400747be2d99524159f3806d449ecfb0c2389"]},"commit2Childs":{"c5c99ad021f3da085fcb66220598a8f91dc5e453":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","1402fc060950f7e620c4e21df7cdfcaee1d2b230"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["55b50463286869f584cf849d1587a0fcd54d1dfa","a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"19f02bb04467ed179738a398a7da80bbbe161c16":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5c99ad021f3da085fcb66220598a8f91dc5e453","55b50463286869f584cf849d1587a0fcd54d1dfa","1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"7c0c76f8855bd391c39890131d8dbd56c3fdcef0":["670400747be2d99524159f3806d449ecfb0c2389"],"1402fc060950f7e620c4e21df7cdfcaee1d2b230":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","7c0c76f8855bd391c39890131d8dbd56c3fdcef0","670400747be2d99524159f3806d449ecfb0c2389"],"670400747be2d99524159f3806d449ecfb0c2389":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["19f02bb04467ed179738a398a7da80bbbe161c16"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}