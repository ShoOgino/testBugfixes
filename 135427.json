{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#missingFacetTest().mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#missingFacetTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingFacetTest() throws Exception { \n    String[] params = new String[] {\n        \"o.func.facet_show_missing(a)\", \"fillmissing(a,\\\"(MISSING)\\\")\",\n        \"o.missingf.s.mean\", \"mean(int_id)\",\n        \"o.missingf.ff\", \"date_dtd\",\n        \"o.missingf.ff\", \"string_sd\",\n        \"o.missingf.ff.string_sd.sm\", \"true\",\n        \"o.missingf.ff\", \"date_dtdm\",\n        \"o.missingf.ff.date_dtdm.sm\", \"true\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //int MultiDate\n    assertTrue(responseStr, responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"date_dtdm\", \"(MISSING)\"));\n    ArrayList<Double> string = getValueList(response, \"missingf\", \"fieldFacets\", \"date_dtdm\", \"mean\", false);\n    ArrayList<Double> stringTest = calculateNumberStat(multiDateTestStart, \"mean\");\n    assertEquals(responseStr, string,stringTest);\n    \n    //Int String\n    assertTrue(responseStr, responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"(MISSING)\"));\n    assertTrue(responseStr, !responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"str0\"));\n    List<Double> intString = getValueList(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"mean\", false);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"mean\");\n    assertEquals(responseStr, intString,intStringTest);\n    \n    //Int Date\n    Collection<Double> intDate = getValueList(response, \"missingf\", \"fieldFacets\", \"date_dtd\", \"mean\", false);\n    ArrayList<ArrayList<Double>> intDateMissingTestStart = (ArrayList<ArrayList<Double>>) intDateTestStart.clone();\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateMissingTestStart, \"mean\");\n    assertEquals(responseStr,intDate,intDateTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#missingFacetTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingFacetTest() throws Exception { \n    String[] params = new String[] {\n        \"o.func.facet_show_missing(a)\", \"fillmissing(a,\\\"(MISSING)\\\")\",\n        \"o.missingf.s.mean\", \"mean(int_id)\",\n        \"o.missingf.ff\", \"date_dtd\",\n        \"o.missingf.ff\", \"string_sd\",\n        \"o.missingf.ff.string_sd.sm\", \"true\",\n        \"o.missingf.ff\", \"date_dtdm\",\n        \"o.missingf.ff.date_dtdm.sm\", \"true\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //int MultiDate\n    assertTrue(responseStr, responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"date_dtdm\", \"(MISSING)\"));\n    ArrayList<Double> string = getValueList(response, \"missingf\", \"fieldFacets\", \"date_dtdm\", \"mean\", false);\n    ArrayList<Double> stringTest = calculateNumberStat(multiDateTestStart, \"mean\");\n    assertEquals(responseStr, string,stringTest);\n    \n    //Int String\n    assertTrue(responseStr, responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"(MISSING)\"));\n    assertTrue(responseStr, !responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"str0\"));\n    List<Double> intString = getValueList(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"mean\", false);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"mean\");\n    assertEquals(responseStr, intString,intStringTest);\n    \n    //Int Date\n    Collection<Double> intDate = getValueList(response, \"missingf\", \"fieldFacets\", \"date_dtd\", \"mean\", false);\n    ArrayList<ArrayList<Double>> intDateMissingTestStart = (ArrayList<ArrayList<Double>>) intDateTestStart.clone();\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateMissingTestStart, \"mean\");\n    assertEquals(responseStr,intDate,intDateTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#missingFacetTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingFacetTest() throws Exception { \n    String[] params = new String[] {\n        \"o.func.facet_show_missing(a)\", \"fillmissing(a,\\\"(MISSING)\\\")\",\n        \"o.missingf.s.mean\", \"mean(int_id)\",\n        \"o.missingf.ff\", \"date_dtd\",\n        \"o.missingf.ff\", \"string_sd\",\n        \"o.missingf.ff.string_sd.sm\", \"true\",\n        \"o.missingf.ff\", \"date_dtdm\",\n        \"o.missingf.ff.date_dtdm.sm\", \"true\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //int MultiDate\n    assertTrue(responseStr, responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"date_dtdm\", \"(MISSING)\"));\n    ArrayList<Double> string = getValueList(response, \"missingf\", \"fieldFacets\", \"date_dtdm\", \"mean\", false);\n    ArrayList<Double> stringTest = calculateNumberStat(multiDateTestStart, \"mean\");\n    assertEquals(responseStr, string,stringTest);\n    \n    //Int String\n    assertTrue(responseStr, responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"(MISSING)\"));\n    assertTrue(responseStr, !responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"str0\"));\n    List<Double> intString = getValueList(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"mean\", false);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"mean\");\n    assertEquals(responseStr, intString,intStringTest);\n    \n    //Int Date\n    Collection<Double> intDate = getValueList(response, \"missingf\", \"fieldFacets\", \"date_dtd\", \"mean\", false);\n    ArrayList<ArrayList<Double>> intDateMissingTestStart = (ArrayList<ArrayList<Double>>) intDateTestStart.clone();\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateMissingTestStart, \"mean\");\n    assertEquals(responseStr,intDate,intDateTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3268d17c69c8720ec02a4815ece73ac3ab438c1","date":1499337647,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#missingFacetTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#missingFacetTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingFacetTest() throws Exception { \n    String[] params = new String[] {\n        \"o.missingf.s.mean\", \"mean(int_id)\",\n        \"o.missingf.ff\", \"date_dtd\",\n        \"o.missingf.ff\", \"string_sd\",\n        \"o.missingf.ff.string_sd.sm\", \"true\",\n        \"o.missingf.ff\", \"date_dtdm\",\n        \"o.missingf.ff.date_dtdm.sm\", \"true\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //int MultiDate\n    assertTrue(responseStr, responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"date_dtdm\", \"(MISSING)\"));\n    ArrayList<Double> string = getValueList(response, \"missingf\", \"fieldFacets\", \"date_dtdm\", \"mean\", false);\n    ArrayList<Double> stringTest = calculateNumberStat(multiDateTestStart, \"mean\");\n    assertEquals(responseStr, string,stringTest);\n    \n    //Int String\n    assertTrue(responseStr, responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"(MISSING)\"));\n    assertTrue(responseStr, !responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"str0\"));\n    List<Double> intString = getValueList(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"mean\", false);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"mean\");\n    assertEquals(responseStr, intString,intStringTest);\n    \n    //Int Date\n    Collection<Double> intDate = getValueList(response, \"missingf\", \"fieldFacets\", \"date_dtd\", \"mean\", false);\n    ArrayList<ArrayList<Double>> intDateMissingTestStart = (ArrayList<ArrayList<Double>>) intDateTestStart.clone();\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateMissingTestStart, \"mean\");\n    assertEquals(responseStr,intDate,intDateTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingFacetTest() throws Exception { \n    String[] params = new String[] {\n        \"o.func.facet_show_missing(a)\", \"fillmissing(a,\\\"(MISSING)\\\")\",\n        \"o.missingf.s.mean\", \"mean(int_id)\",\n        \"o.missingf.ff\", \"date_dtd\",\n        \"o.missingf.ff\", \"string_sd\",\n        \"o.missingf.ff.string_sd.sm\", \"true\",\n        \"o.missingf.ff\", \"date_dtdm\",\n        \"o.missingf.ff.date_dtdm.sm\", \"true\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //int MultiDate\n    assertTrue(responseStr, responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"date_dtdm\", \"(MISSING)\"));\n    ArrayList<Double> string = getValueList(response, \"missingf\", \"fieldFacets\", \"date_dtdm\", \"mean\", false);\n    ArrayList<Double> stringTest = calculateNumberStat(multiDateTestStart, \"mean\");\n    assertEquals(responseStr, string,stringTest);\n    \n    //Int String\n    assertTrue(responseStr, responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"(MISSING)\"));\n    assertTrue(responseStr, !responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"str0\"));\n    List<Double> intString = getValueList(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"mean\", false);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"mean\");\n    assertEquals(responseStr, intString,intStringTest);\n    \n    //Int Date\n    Collection<Double> intDate = getValueList(response, \"missingf\", \"fieldFacets\", \"date_dtd\", \"mean\", false);\n    ArrayList<ArrayList<Double>> intDateMissingTestStart = (ArrayList<ArrayList<Double>>) intDateTestStart.clone();\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateMissingTestStart, \"mean\");\n    assertEquals(responseStr,intDate,intDateTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#missingFacetTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#missingFacetTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingFacetTest() throws Exception { \n    String[] params = new String[] {\n        \"o.missingf.s.mean\", \"mean(int_id)\",\n        \"o.missingf.ff\", \"date_dtd\",\n        \"o.missingf.ff\", \"string_sd\",\n        \"o.missingf.ff.string_sd.sm\", \"true\",\n        \"o.missingf.ff\", \"date_dtdm\",\n        \"o.missingf.ff.date_dtdm.sm\", \"true\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //int MultiDate\n    assertTrue(responseStr, responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"date_dtdm\", \"(MISSING)\"));\n    ArrayList<Double> string = getValueList(response, \"missingf\", \"fieldFacets\", \"date_dtdm\", \"mean\", false);\n    ArrayList<Double> stringTest = calculateNumberStat(multiDateTestStart, \"mean\");\n    assertEquals(responseStr, string,stringTest);\n    \n    //Int String\n    assertTrue(responseStr, responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"(MISSING)\"));\n    assertTrue(responseStr, !responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"str0\"));\n    List<Double> intString = getValueList(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"mean\", false);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"mean\");\n    assertEquals(responseStr, intString,intStringTest);\n    \n    //Int Date\n    Collection<Double> intDate = getValueList(response, \"missingf\", \"fieldFacets\", \"date_dtd\", \"mean\", false);\n    ArrayList<ArrayList<Double>> intDateMissingTestStart = (ArrayList<ArrayList<Double>>) intDateTestStart.clone();\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateMissingTestStart, \"mean\");\n    assertEquals(responseStr,intDate,intDateTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingFacetTest() throws Exception { \n    String[] params = new String[] {\n        \"o.func.facet_show_missing(a)\", \"fillmissing(a,\\\"(MISSING)\\\")\",\n        \"o.missingf.s.mean\", \"mean(int_id)\",\n        \"o.missingf.ff\", \"date_dtd\",\n        \"o.missingf.ff\", \"string_sd\",\n        \"o.missingf.ff.string_sd.sm\", \"true\",\n        \"o.missingf.ff\", \"date_dtdm\",\n        \"o.missingf.ff.date_dtdm.sm\", \"true\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //int MultiDate\n    assertTrue(responseStr, responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"date_dtdm\", \"(MISSING)\"));\n    ArrayList<Double> string = getValueList(response, \"missingf\", \"fieldFacets\", \"date_dtdm\", \"mean\", false);\n    ArrayList<Double> stringTest = calculateNumberStat(multiDateTestStart, \"mean\");\n    assertEquals(responseStr, string,stringTest);\n    \n    //Int String\n    assertTrue(responseStr, responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"(MISSING)\"));\n    assertTrue(responseStr, !responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"str0\"));\n    List<Double> intString = getValueList(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"mean\", false);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"mean\");\n    assertEquals(responseStr, intString,intStringTest);\n    \n    //Int Date\n    Collection<Double> intDate = getValueList(response, \"missingf\", \"fieldFacets\", \"date_dtd\", \"mean\", false);\n    ArrayList<ArrayList<Double>> intDateMissingTestStart = (ArrayList<ArrayList<Double>>) intDateTestStart.clone();\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateMissingTestStart, \"mean\");\n    assertEquals(responseStr,intDate,intDateTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":4,"author":"Houston Putman","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#missingFacetTest().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingFacetTest() throws Exception { \n    String[] params = new String[] {\n        \"o.missingf.s.mean\", \"mean(int_id)\",\n        \"o.missingf.ff\", \"date_dtd\",\n        \"o.missingf.ff\", \"string_sd\",\n        \"o.missingf.ff.string_sd.sm\", \"true\",\n        \"o.missingf.ff\", \"date_dtdm\",\n        \"o.missingf.ff.date_dtdm.sm\", \"true\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //int MultiDate\n    assertTrue(responseStr, responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"date_dtdm\", \"(MISSING)\"));\n    ArrayList<Double> string = getValueList(response, \"missingf\", \"fieldFacets\", \"date_dtdm\", \"mean\", false);\n    ArrayList<Double> stringTest = calculateNumberStat(multiDateTestStart, \"mean\");\n    assertEquals(responseStr, string,stringTest);\n    \n    //Int String\n    assertTrue(responseStr, responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"(MISSING)\"));\n    assertTrue(responseStr, !responseContainsFacetValue(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"str0\"));\n    List<Double> intString = getValueList(response, \"missingf\", \"fieldFacets\", \"string_sd\", \"mean\", false);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"mean\");\n    assertEquals(responseStr, intString,intStringTest);\n    \n    //Int Date\n    Collection<Double> intDate = getValueList(response, \"missingf\", \"fieldFacets\", \"date_dtd\", \"mean\", false);\n    ArrayList<ArrayList<Double>> intDateMissingTestStart = (ArrayList<ArrayList<Double>>) intDateTestStart.clone();\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateMissingTestStart, \"mean\");\n    assertEquals(responseStr,intDate,intDateTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3268d17c69c8720ec02a4815ece73ac3ab438c1":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"e73d8d559120669b47658108d818b637df5456ea":["30c8e5574b55d57947e989443dfde611646530ee","e3268d17c69c8720ec02a4815ece73ac3ab438c1"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["e3268d17c69c8720ec02a4815ece73ac3ab438c1"]},"commit2Childs":{"e3268d17c69c8720ec02a4815ece73ac3ab438c1":["e73d8d559120669b47658108d818b637df5456ea","3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":["e73d8d559120669b47658108d818b637df5456ea"],"e73d8d559120669b47658108d818b637df5456ea":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["e3268d17c69c8720ec02a4815ece73ac3ab438c1","30c8e5574b55d57947e989443dfde611646530ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}