{"path":"solr/core/src/java/org/apache/solr/util/SpatialUtils#parseRectangle(String,SpatialContext).mjava","commits":[{"id":"59d82b0be40ecfcc2c94c776b324e0903a62b844","date":1423535462,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SpatialUtils#parseRectangle(String,SpatialContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses {@code str} in the format of '[minPoint TO maxPoint]' where {@code minPoint} is the lower left corner\n   * and maxPoint is the upper-right corner of the bounding box.  Both corners may optionally be wrapped with a quote\n   * and then it's parsed via {@link #parsePoint(String, com.spatial4j.core.context.SpatialContext)}.\n   * @param str Non-null; may *not* have leading or trailing spaces\n   * @param ctx Non-null\n   * @return the Rectangle\n   * @throws InvalidShapeException If for any reason there was a problem parsing the string or creating the rectangle.\n   */\n  public static Rectangle parseRectangle(String str, SpatialContext ctx) throws InvalidShapeException {\n    //note we don't do generic whitespace, just a literal space char detection\n    try {\n      int toIdx = str.indexOf(\" TO \");\n      if (toIdx == -1 || str.charAt(0) != '[' || str.charAt(str.length() - 1) != ']') {\n        throw new InvalidShapeException(\"expecting '[bottomLeft TO topRight]'\");\n      }\n      String leftPart = unwrapQuotes(str.substring(1, toIdx).trim());\n      String rightPart = unwrapQuotes(str.substring(toIdx + \" TO \".length(), str.length() - 1).trim());\n      return ctx.makeRectangle(parsePoint(leftPart, ctx), parsePoint(rightPart, ctx));\n    } catch (InvalidShapeException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new InvalidShapeException(e.toString(), e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bae0bbf5dfabb3daa76f77f636f38310a28de18a","date":1456970732,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SpatialUtils#parseRectangle(String,SpatialContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SpatialUtils#parseRectangle(String,SpatialContext).mjava","sourceNew":"  /**\n   * Parses {@code str} in the format of '[minPoint TO maxPoint]' where {@code minPoint} is the lower left corner\n   * and maxPoint is the upper-right corner of the bounding box.  Both corners may optionally be wrapped with a quote\n   * and then it's parsed via {@link #parsePoint(String, org.locationtech.spatial4j.context.SpatialContext)}.\n   * @param str Non-null; may *not* have leading or trailing spaces\n   * @param ctx Non-null\n   * @return the Rectangle\n   * @throws InvalidShapeException If for any reason there was a problem parsing the string or creating the rectangle.\n   */\n  public static Rectangle parseRectangle(String str, SpatialContext ctx) throws InvalidShapeException {\n    //note we don't do generic whitespace, just a literal space char detection\n    try {\n      int toIdx = str.indexOf(\" TO \");\n      if (toIdx == -1 || str.charAt(0) != '[' || str.charAt(str.length() - 1) != ']') {\n        throw new InvalidShapeException(\"expecting '[bottomLeft TO topRight]'\");\n      }\n      String leftPart = unwrapQuotes(str.substring(1, toIdx).trim());\n      String rightPart = unwrapQuotes(str.substring(toIdx + \" TO \".length(), str.length() - 1).trim());\n      return ctx.makeRectangle(parsePoint(leftPart, ctx), parsePoint(rightPart, ctx));\n    } catch (InvalidShapeException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new InvalidShapeException(e.toString(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses {@code str} in the format of '[minPoint TO maxPoint]' where {@code minPoint} is the lower left corner\n   * and maxPoint is the upper-right corner of the bounding box.  Both corners may optionally be wrapped with a quote\n   * and then it's parsed via {@link #parsePoint(String, com.spatial4j.core.context.SpatialContext)}.\n   * @param str Non-null; may *not* have leading or trailing spaces\n   * @param ctx Non-null\n   * @return the Rectangle\n   * @throws InvalidShapeException If for any reason there was a problem parsing the string or creating the rectangle.\n   */\n  public static Rectangle parseRectangle(String str, SpatialContext ctx) throws InvalidShapeException {\n    //note we don't do generic whitespace, just a literal space char detection\n    try {\n      int toIdx = str.indexOf(\" TO \");\n      if (toIdx == -1 || str.charAt(0) != '[' || str.charAt(str.length() - 1) != ']') {\n        throw new InvalidShapeException(\"expecting '[bottomLeft TO topRight]'\");\n      }\n      String leftPart = unwrapQuotes(str.substring(1, toIdx).trim());\n      String rightPart = unwrapQuotes(str.substring(toIdx + \" TO \".length(), str.length() - 1).trim());\n      return ctx.makeRectangle(parsePoint(leftPart, ctx), parsePoint(rightPart, ctx));\n    } catch (InvalidShapeException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new InvalidShapeException(e.toString(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e697e346b573b1b58353f45be00090a4f2de91e7","date":1457002125,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SpatialUtils#parseRectangle(String,SpatialContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SpatialUtils#parseRectangle(String,SpatialContext).mjava","sourceNew":"  /**\n   * Parses {@code str} in the format of '[minPoint TO maxPoint]' where {@code minPoint} is the lower left corner\n   * and maxPoint is the upper-right corner of the bounding box.  Both corners may optionally be wrapped with a quote\n   * and then it's parsed via {@link #parsePoint(String, org.locationtech.spatial4j.context.SpatialContext)}.\n   * @param str Non-null; may *not* have leading or trailing spaces\n   * @param ctx Non-null\n   * @return the Rectangle\n   * @throws InvalidShapeException If for any reason there was a problem parsing the string or creating the rectangle.\n   */\n  public static Rectangle parseRectangle(String str, SpatialContext ctx) throws InvalidShapeException {\n    //note we don't do generic whitespace, just a literal space char detection\n    try {\n      int toIdx = str.indexOf(\" TO \");\n      if (toIdx == -1 || str.charAt(0) != '[' || str.charAt(str.length() - 1) != ']') {\n        throw new InvalidShapeException(\"expecting '[bottomLeft TO topRight]'\");\n      }\n      String leftPart = unwrapQuotes(str.substring(1, toIdx).trim());\n      String rightPart = unwrapQuotes(str.substring(toIdx + \" TO \".length(), str.length() - 1).trim());\n      return ctx.makeRectangle(parsePoint(leftPart, ctx), parsePoint(rightPart, ctx));\n    } catch (InvalidShapeException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new InvalidShapeException(e.toString(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses {@code str} in the format of '[minPoint TO maxPoint]' where {@code minPoint} is the lower left corner\n   * and maxPoint is the upper-right corner of the bounding box.  Both corners may optionally be wrapped with a quote\n   * and then it's parsed via {@link #parsePoint(String, com.spatial4j.core.context.SpatialContext)}.\n   * @param str Non-null; may *not* have leading or trailing spaces\n   * @param ctx Non-null\n   * @return the Rectangle\n   * @throws InvalidShapeException If for any reason there was a problem parsing the string or creating the rectangle.\n   */\n  public static Rectangle parseRectangle(String str, SpatialContext ctx) throws InvalidShapeException {\n    //note we don't do generic whitespace, just a literal space char detection\n    try {\n      int toIdx = str.indexOf(\" TO \");\n      if (toIdx == -1 || str.charAt(0) != '[' || str.charAt(str.length() - 1) != ']') {\n        throw new InvalidShapeException(\"expecting '[bottomLeft TO topRight]'\");\n      }\n      String leftPart = unwrapQuotes(str.substring(1, toIdx).trim());\n      String rightPart = unwrapQuotes(str.substring(toIdx + \" TO \".length(), str.length() - 1).trim());\n      return ctx.makeRectangle(parsePoint(leftPart, ctx), parsePoint(rightPart, ctx));\n    } catch (InvalidShapeException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new InvalidShapeException(e.toString(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SpatialUtils#parseRectangle(String,SpatialContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SpatialUtils#parseRectangle(String,SpatialContext).mjava","sourceNew":"  /**\n   * Parses {@code str} in the format of '[minPoint TO maxPoint]' where {@code minPoint} is the lower left corner\n   * and maxPoint is the upper-right corner of the bounding box.  Both corners may optionally be wrapped with a quote\n   * and then it's parsed via {@link #parsePoint(String, org.locationtech.spatial4j.context.SpatialContext)}.\n   * @param str Non-null; may *not* have leading or trailing spaces\n   * @param ctx Non-null\n   * @return the Rectangle\n   * @throws InvalidShapeException If for any reason there was a problem parsing the string or creating the rectangle.\n   */\n  public static Rectangle parseRectangle(String str, SpatialContext ctx) throws InvalidShapeException {\n    //note we don't do generic whitespace, just a literal space char detection\n    try {\n      int toIdx = str.indexOf(\" TO \");\n      if (toIdx == -1 || str.charAt(0) != '[' || str.charAt(str.length() - 1) != ']') {\n        throw new InvalidShapeException(\"expecting '[bottomLeft TO topRight]'\");\n      }\n      String leftPart = unwrapQuotes(str.substring(1, toIdx).trim());\n      String rightPart = unwrapQuotes(str.substring(toIdx + \" TO \".length(), str.length() - 1).trim());\n      return ctx.makeRectangle(parsePoint(leftPart, ctx), parsePoint(rightPart, ctx));\n    } catch (InvalidShapeException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new InvalidShapeException(e.toString(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses {@code str} in the format of '[minPoint TO maxPoint]' where {@code minPoint} is the lower left corner\n   * and maxPoint is the upper-right corner of the bounding box.  Both corners may optionally be wrapped with a quote\n   * and then it's parsed via {@link #parsePoint(String, com.spatial4j.core.context.SpatialContext)}.\n   * @param str Non-null; may *not* have leading or trailing spaces\n   * @param ctx Non-null\n   * @return the Rectangle\n   * @throws InvalidShapeException If for any reason there was a problem parsing the string or creating the rectangle.\n   */\n  public static Rectangle parseRectangle(String str, SpatialContext ctx) throws InvalidShapeException {\n    //note we don't do generic whitespace, just a literal space char detection\n    try {\n      int toIdx = str.indexOf(\" TO \");\n      if (toIdx == -1 || str.charAt(0) != '[' || str.charAt(str.length() - 1) != ']') {\n        throw new InvalidShapeException(\"expecting '[bottomLeft TO topRight]'\");\n      }\n      String leftPart = unwrapQuotes(str.substring(1, toIdx).trim());\n      String rightPart = unwrapQuotes(str.substring(toIdx + \" TO \".length(), str.length() - 1).trim());\n      return ctx.makeRectangle(parsePoint(leftPart, ctx), parsePoint(rightPart, ctx));\n    } catch (InvalidShapeException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new InvalidShapeException(e.toString(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59d82b0be40ecfcc2c94c776b324e0903a62b844":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bae0bbf5dfabb3daa76f77f636f38310a28de18a":["59d82b0be40ecfcc2c94c776b324e0903a62b844"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e697e346b573b1b58353f45be00090a4f2de91e7":["59d82b0be40ecfcc2c94c776b324e0903a62b844","bae0bbf5dfabb3daa76f77f636f38310a28de18a"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["59d82b0be40ecfcc2c94c776b324e0903a62b844","e697e346b573b1b58353f45be00090a4f2de91e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"59d82b0be40ecfcc2c94c776b324e0903a62b844":["bae0bbf5dfabb3daa76f77f636f38310a28de18a","e697e346b573b1b58353f45be00090a4f2de91e7","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"bae0bbf5dfabb3daa76f77f636f38310a28de18a":["e697e346b573b1b58353f45be00090a4f2de91e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59d82b0be40ecfcc2c94c776b324e0903a62b844"],"e697e346b573b1b58353f45be00090a4f2de91e7":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}