{"path":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","sourceNew":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   */\n  public Field(String name, BytesRef bytes, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (type.indexed()) {\n      throw new IllegalArgumentException(\"Fields with BytesRef values cannot be indexed\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","sourceOld":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   */\n  public Field(String name, BytesRef bytes, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (type.indexed()) {\n      throw new IllegalArgumentException(\"Fields with BytesRef values cannot be indexed\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d","date":1346337224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","sourceNew":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   * @param name field name\n   * @param bytes BytesRef pointing to binary content (not copied)\n   * @param type field type\n   * @throws IllegalArgumentException if the field name is null,\n   *         or the field's type is indexed()\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, BytesRef bytes, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (type.indexed()) {\n      throw new IllegalArgumentException(\"Fields with BytesRef values cannot be indexed\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","sourceOld":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   */\n  public Field(String name, BytesRef bytes, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (type.indexed()) {\n      throw new IllegalArgumentException(\"Fields with BytesRef values cannot be indexed\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","sourceNew":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   * @param name field name\n   * @param bytes BytesRef pointing to binary content (not copied)\n   * @param type field type\n   * @throws IllegalArgumentException if the field name is null,\n   *         or the field's type is indexed()\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, BytesRef bytes, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (type.indexed()) {\n      throw new IllegalArgumentException(\"Fields with BytesRef values cannot be indexed\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","sourceOld":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   */\n  public Field(String name, BytesRef bytes, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (type.indexed()) {\n      throw new IllegalArgumentException(\"Fields with BytesRef values cannot be indexed\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d865fb5bb649d437707d6becbc9d8d940930d56","date":1399653385,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","sourceNew":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   * @param name field name\n   * @param bytes BytesRef pointing to binary content (not copied)\n   * @param type field type\n   * @throws IllegalArgumentException if the field name is null,\n   *         or the field's type is indexed()\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, BytesRef bytes, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (bytes == null) {\n      throw new IllegalArgumentException(\"bytes cannot be null\");\n    }\n    if (type.indexed()) {\n      throw new IllegalArgumentException(\"Fields with BytesRef values cannot be indexed\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","sourceOld":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   * @param name field name\n   * @param bytes BytesRef pointing to binary content (not copied)\n   * @param type field type\n   * @throws IllegalArgumentException if the field name is null,\n   *         or the field's type is indexed()\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, BytesRef bytes, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (type.indexed()) {\n      throw new IllegalArgumentException(\"Fields with BytesRef values cannot be indexed\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","bugFix":null,"bugIntro":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","sourceNew":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   * @param name field name\n   * @param bytes BytesRef pointing to binary content (not copied)\n   * @param type field type\n   * @throws IllegalArgumentException if the field name is null,\n   *         or the field's type is indexed()\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, BytesRef bytes, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (bytes == null) {\n      throw new IllegalArgumentException(\"bytes cannot be null\");\n    }\n    if (type.indexOptions() != null) {\n      throw new IllegalArgumentException(\"Fields with BytesRef values cannot be indexed\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","sourceOld":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   * @param name field name\n   * @param bytes BytesRef pointing to binary content (not copied)\n   * @param type field type\n   * @throws IllegalArgumentException if the field name is null,\n   *         or the field's type is indexed()\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, BytesRef bytes, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (bytes == null) {\n      throw new IllegalArgumentException(\"bytes cannot be null\");\n    }\n    if (type.indexed()) {\n      throw new IllegalArgumentException(\"Fields with BytesRef values cannot be indexed\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","sourceNew":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   * @param name field name\n   * @param bytes BytesRef pointing to binary content (not copied)\n   * @param type field type\n   * @throws IllegalArgumentException if the field name is null,\n   *         or the field's type is indexed()\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, BytesRef bytes, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (bytes == null) {\n      throw new IllegalArgumentException(\"bytes cannot be null\");\n    }\n    if (type.indexOptions() != null) {\n      throw new IllegalArgumentException(\"Fields with BytesRef values cannot be indexed\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","sourceOld":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   * @param name field name\n   * @param bytes BytesRef pointing to binary content (not copied)\n   * @param type field type\n   * @throws IllegalArgumentException if the field name is null,\n   *         or the field's type is indexed()\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, BytesRef bytes, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (bytes == null) {\n      throw new IllegalArgumentException(\"bytes cannot be null\");\n    }\n    if (type.indexed()) {\n      throw new IllegalArgumentException(\"Fields with BytesRef values cannot be indexed\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","sourceNew":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   * @param name field name\n   * @param bytes BytesRef pointing to binary content (not copied)\n   * @param type field type\n   * @throws IllegalArgumentException if the field name is null,\n   *         or the field's type is indexed()\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, BytesRef bytes, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (bytes == null) {\n      throw new IllegalArgumentException(\"bytes cannot be null\");\n    }\n    if (type.indexOptions() != IndexOptions.NO) {\n      throw new IllegalArgumentException(\"Fields with BytesRef values cannot be indexed\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","sourceOld":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   * @param name field name\n   * @param bytes BytesRef pointing to binary content (not copied)\n   * @param type field type\n   * @throws IllegalArgumentException if the field name is null,\n   *         or the field's type is indexed()\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, BytesRef bytes, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (bytes == null) {\n      throw new IllegalArgumentException(\"bytes cannot be null\");\n    }\n    if (type.indexOptions() != null) {\n      throw new IllegalArgumentException(\"Fields with BytesRef values cannot be indexed\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","sourceNew":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   * @param name field name\n   * @param bytes BytesRef pointing to binary content (not copied)\n   * @param type field type\n   * @throws IllegalArgumentException if the field name is null,\n   *         or the field's type is indexed()\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, BytesRef bytes, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (bytes == null) {\n      throw new IllegalArgumentException(\"bytes cannot be null\");\n    }\n    if (type.indexOptions() != IndexOptions.NONE) {\n      throw new IllegalArgumentException(\"Fields with BytesRef values cannot be indexed\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","sourceOld":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   * @param name field name\n   * @param bytes BytesRef pointing to binary content (not copied)\n   * @param type field type\n   * @throws IllegalArgumentException if the field name is null,\n   *         or the field's type is indexed()\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, BytesRef bytes, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (bytes == null) {\n      throw new IllegalArgumentException(\"bytes cannot be null\");\n    }\n    if (type.indexOptions() != IndexOptions.NO) {\n      throw new IllegalArgumentException(\"Fields with BytesRef values cannot be indexed\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"399d127639ae13222a8545b50e0ac545a6bcd2d7","date":1428704686,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","sourceNew":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   * @param name field name\n   * @param bytes BytesRef pointing to binary content (not copied)\n   * @param type field type\n   * @throws IllegalArgumentException if the field name is null,\n   *         or the field's type is indexed()\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, BytesRef bytes, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (bytes == null) {\n      throw new IllegalArgumentException(\"bytes cannot be null\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","sourceOld":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   * @param name field name\n   * @param bytes BytesRef pointing to binary content (not copied)\n   * @param type field type\n   * @throws IllegalArgumentException if the field name is null,\n   *         or the field's type is indexed()\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, BytesRef bytes, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (bytes == null) {\n      throw new IllegalArgumentException(\"bytes cannot be null\");\n    }\n    if (type.indexOptions() != IndexOptions.NONE) {\n      throw new IllegalArgumentException(\"Fields with BytesRef values cannot be indexed\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad0d09e969f4763b0df4230f8e3f74357872a4e4","date":1459188769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","sourceNew":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   * @param name field name\n   * @param bytes BytesRef pointing to binary content (not copied)\n   * @param type field type\n   * @throws IllegalArgumentException if the field name is null,\n   *         or the field's type is indexed()\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, BytesRef bytes, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name must not be null\");\n    }\n    if (bytes == null) {\n      throw new IllegalArgumentException(\"bytes must not be null\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","sourceOld":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   * @param name field name\n   * @param bytes BytesRef pointing to binary content (not copied)\n   * @param type field type\n   * @throws IllegalArgumentException if the field name is null,\n   *         or the field's type is indexed()\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, BytesRef bytes, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    if (bytes == null) {\n      throw new IllegalArgumentException(\"bytes cannot be null\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","bugFix":["fa0f44f887719e97183771e977cfc4bfb485b766","5d865fb5bb649d437707d6becbc9d8d940930d56"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeea025b4a7a8e8f70426ac4527ef481b3a86b72","date":1476199075,"type":5,"author":"yonik","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,IndexableFieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","sourceNew":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   * @param name field name\n   * @param bytes BytesRef pointing to binary content (not copied)\n   * @param type field type\n   * @throws IllegalArgumentException if the field name is null,\n   *         or the field's type is indexed()\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, BytesRef bytes, IndexableFieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name must not be null\");\n    }\n    if (bytes == null) {\n      throw new IllegalArgumentException(\"bytes must not be null\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","sourceOld":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   * @param name field name\n   * @param bytes BytesRef pointing to binary content (not copied)\n   * @param type field type\n   * @throws IllegalArgumentException if the field name is null,\n   *         or the field's type is indexed()\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, BytesRef bytes, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name must not be null\");\n    }\n    if (bytes == null) {\n      throw new IllegalArgumentException(\"bytes must not be null\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,BytesRef,FieldType).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create field with binary value.\n   *\n   * <p>NOTE: the provided BytesRef is not copied so be sure\n   * not to change it until you're done with this field.\n   * @param name field name\n   * @param bytes BytesRef pointing to binary content (not copied)\n   * @param type field type\n   * @throws IllegalArgumentException if the field name is null,\n   *         or the field's type is indexed()\n   * @throws NullPointerException if the type is null\n   */\n  public Field(String name, BytesRef bytes, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name must not be null\");\n    }\n    if (bytes == null) {\n      throw new IllegalArgumentException(\"bytes must not be null\");\n    }\n    this.fieldsData = bytes;\n    this.type = type;\n    this.name = name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5d865fb5bb649d437707d6becbc9d8d940930d56":["6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d"],"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3184874f7f3aca850248483485b4995343066875":["5d865fb5bb649d437707d6becbc9d8d940930d56"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ad0d09e969f4763b0df4230f8e3f74357872a4e4","eeea025b4a7a8e8f70426ac4527ef481b3a86b72"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["5d865fb5bb649d437707d6becbc9d8d940930d56","3184874f7f3aca850248483485b4995343066875"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["399d127639ae13222a8545b50e0ac545a6bcd2d7"],"6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72"]},"commit2Childs":{"5d865fb5bb649d437707d6becbc9d8d940930d56":["3184874f7f3aca850248483485b4995343066875","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["05a14b2611ead08655a2b2bdc61632eb31316e57","6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d"],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"f95ce1375367b92d411a06175eab3915fe93c6bc":["399d127639ae13222a8545b50e0ac545a6bcd2d7"],"3184874f7f3aca850248483485b4995343066875":["2bb2842e561df4e8e9ad89010605fc86ac265465","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d":["5d865fb5bb649d437707d6becbc9d8d940930d56","05a14b2611ead08655a2b2bdc61632eb31316e57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}