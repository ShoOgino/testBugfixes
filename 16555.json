{"path":"src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","commits":[{"id":"84242847a83fee6fb728f70226570c5251c39e31","date":1160951872,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      String trash = d.get(MAGIC_FIELD);\n      \n      List fields = d.getFields();\n      for (Iterator fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f = (Fieldable) fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {        \n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","sourceNew":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n      \n      List fields = d.getFields();\n      for (Iterator fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f = (Fieldable) fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {        \n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public static void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      String trash = d.get(MAGIC_FIELD);\n      \n      List fields = d.getFields();\n      for (Iterator fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f = (Fieldable) fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {        \n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","sourceNew":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n      \n      List fields = d.getFields();\n      for (Iterator fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f = (Fieldable) fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {        \n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n      \n      List fields = d.getFields();\n      for (Iterator fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f = (Fieldable) fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {        \n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","sourceNew":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n      \n      List fields = d.getFields();\n      for (Iterator fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f = (Fieldable) fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {        \n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n      \n      List fields = d.getFields();\n      for (Iterator fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f = (Fieldable) fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {        \n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","sourceNew":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n      \n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {        \n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n      \n      List fields = d.getFields();\n      for (Iterator fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f = (Fieldable) fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {        \n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","sourceNew":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n      \n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {        \n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n      \n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {        \n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb1066f2afe9450585d0d10063ea4450085236f1":["84242847a83fee6fb728f70226570c5251c39e31"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["cb1066f2afe9450585d0d10063ea4450085236f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["cb1066f2afe9450585d0d10063ea4450085236f1","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"84242847a83fee6fb728f70226570c5251c39e31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"cb1066f2afe9450585d0d10063ea4450085236f1":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84242847a83fee6fb728f70226570c5251c39e31"],"0a046c0c310bc77931fc8441bd920053b607dd14":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"84242847a83fee6fb728f70226570c5251c39e31":["cb1066f2afe9450585d0d10063ea4450085236f1"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}