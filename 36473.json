{"path":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testLeverageStats().mjava","commits":[{"id":"c9ee4c03e3ee986704eeeb45c571d001905a6430","date":1462194267,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testLeverageStats().mjava","pathOld":"/dev/null","sourceNew":"  public void testLeverageStats() throws IOException {\n    // single-valued points\n    PointValues values = new DummyPointValues(42, 42);\n    DocIdSetBuilder builder = new DocIdSetBuilder(100, values, \"foo\");\n    assertEquals(1d, builder.numValuesPerDoc, 0d);\n    assertFalse(builder.multivalued);\n    DocIdSetBuilder.BulkAdder adder = builder.grow(2);\n    adder.add(5);\n    adder.add(7);\n    DocIdSet set = builder.build();\n    assertTrue(set instanceof BitDocIdSet);\n    assertEquals(2, set.iterator().cost());\n\n    // multi-valued points\n    values = new DummyPointValues(42, 63);\n    builder = new DocIdSetBuilder(100, values, \"foo\");\n    assertEquals(1.5, builder.numValuesPerDoc, 0d);\n    assertTrue(builder.multivalued);\n    adder = builder.grow(2);\n    adder.add(5);\n    adder.add(7);\n    set = builder.build();\n    assertTrue(set instanceof BitDocIdSet);\n    assertEquals(1, set.iterator().cost()); // it thinks the same doc was added twice\n\n    // incomplete stats\n    values = new DummyPointValues(42, -1);\n    builder = new DocIdSetBuilder(100, values, \"foo\");\n    assertEquals(1d, builder.numValuesPerDoc, 0d);\n    assertTrue(builder.multivalued);\n\n    values = new DummyPointValues(-1, 84);\n    builder = new DocIdSetBuilder(100, values, \"foo\");\n    assertEquals(1d, builder.numValuesPerDoc, 0d);\n    assertTrue(builder.multivalued);\n\n    // single-valued terms\n    Terms terms = new DummyTerms(42, 42);\n    builder = new DocIdSetBuilder(100, terms);\n    assertEquals(1d, builder.numValuesPerDoc, 0d);\n    assertFalse(builder.multivalued);\n    adder = builder.grow(2);\n    adder.add(5);\n    adder.add(7);\n    set = builder.build();\n    assertTrue(set instanceof BitDocIdSet);\n    assertEquals(2, set.iterator().cost());\n\n    // multi-valued terms\n    terms = new DummyTerms(42, 63);\n    builder = new DocIdSetBuilder(100, terms);\n    assertEquals(1.5, builder.numValuesPerDoc, 0d);\n    assertTrue(builder.multivalued);\n    adder = builder.grow(2);\n    adder.add(5);\n    adder.add(7);\n    set = builder.build();\n    assertTrue(set instanceof BitDocIdSet);\n    assertEquals(1, set.iterator().cost()); // it thinks the same doc was added twice\n\n    // incomplete stats\n    terms = new DummyTerms(42, -1);\n    builder = new DocIdSetBuilder(100, terms);\n    assertEquals(1d, builder.numValuesPerDoc, 0d);\n    assertTrue(builder.multivalued);\n\n    terms = new DummyTerms(-1, 84);\n    builder = new DocIdSetBuilder(100, terms);\n    assertEquals(1d, builder.numValuesPerDoc, 0d);\n    assertTrue(builder.multivalued);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30540ec27130887a9372c159e8fe971200f37727","date":1462223109,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testLeverageStats().mjava","pathOld":"/dev/null","sourceNew":"  public void testLeverageStats() throws IOException {\n    // single-valued points\n    PointValues values = new DummyPointValues(42, 42);\n    DocIdSetBuilder builder = new DocIdSetBuilder(100, values, \"foo\");\n    assertEquals(1d, builder.numValuesPerDoc, 0d);\n    assertFalse(builder.multivalued);\n    DocIdSetBuilder.BulkAdder adder = builder.grow(2);\n    adder.add(5);\n    adder.add(7);\n    DocIdSet set = builder.build();\n    assertTrue(set instanceof BitDocIdSet);\n    assertEquals(2, set.iterator().cost());\n\n    // multi-valued points\n    values = new DummyPointValues(42, 63);\n    builder = new DocIdSetBuilder(100, values, \"foo\");\n    assertEquals(1.5, builder.numValuesPerDoc, 0d);\n    assertTrue(builder.multivalued);\n    adder = builder.grow(2);\n    adder.add(5);\n    adder.add(7);\n    set = builder.build();\n    assertTrue(set instanceof BitDocIdSet);\n    assertEquals(1, set.iterator().cost()); // it thinks the same doc was added twice\n\n    // incomplete stats\n    values = new DummyPointValues(42, -1);\n    builder = new DocIdSetBuilder(100, values, \"foo\");\n    assertEquals(1d, builder.numValuesPerDoc, 0d);\n    assertTrue(builder.multivalued);\n\n    values = new DummyPointValues(-1, 84);\n    builder = new DocIdSetBuilder(100, values, \"foo\");\n    assertEquals(1d, builder.numValuesPerDoc, 0d);\n    assertTrue(builder.multivalued);\n\n    // single-valued terms\n    Terms terms = new DummyTerms(42, 42);\n    builder = new DocIdSetBuilder(100, terms);\n    assertEquals(1d, builder.numValuesPerDoc, 0d);\n    assertFalse(builder.multivalued);\n    adder = builder.grow(2);\n    adder.add(5);\n    adder.add(7);\n    set = builder.build();\n    assertTrue(set instanceof BitDocIdSet);\n    assertEquals(2, set.iterator().cost());\n\n    // multi-valued terms\n    terms = new DummyTerms(42, 63);\n    builder = new DocIdSetBuilder(100, terms);\n    assertEquals(1.5, builder.numValuesPerDoc, 0d);\n    assertTrue(builder.multivalued);\n    adder = builder.grow(2);\n    adder.add(5);\n    adder.add(7);\n    set = builder.build();\n    assertTrue(set instanceof BitDocIdSet);\n    assertEquals(1, set.iterator().cost()); // it thinks the same doc was added twice\n\n    // incomplete stats\n    terms = new DummyTerms(42, -1);\n    builder = new DocIdSetBuilder(100, terms);\n    assertEquals(1d, builder.numValuesPerDoc, 0d);\n    assertTrue(builder.multivalued);\n\n    terms = new DummyTerms(-1, 84);\n    builder = new DocIdSetBuilder(100, terms);\n    assertEquals(1d, builder.numValuesPerDoc, 0d);\n    assertTrue(builder.multivalued);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testLeverageStats().mjava","pathOld":"/dev/null","sourceNew":"  public void testLeverageStats() throws IOException {\n    // single-valued points\n    PointValues values = new DummyPointValues(42, 42);\n    DocIdSetBuilder builder = new DocIdSetBuilder(100, values, \"foo\");\n    assertEquals(1d, builder.numValuesPerDoc, 0d);\n    assertFalse(builder.multivalued);\n    DocIdSetBuilder.BulkAdder adder = builder.grow(2);\n    adder.add(5);\n    adder.add(7);\n    DocIdSet set = builder.build();\n    assertTrue(set instanceof BitDocIdSet);\n    assertEquals(2, set.iterator().cost());\n\n    // multi-valued points\n    values = new DummyPointValues(42, 63);\n    builder = new DocIdSetBuilder(100, values, \"foo\");\n    assertEquals(1.5, builder.numValuesPerDoc, 0d);\n    assertTrue(builder.multivalued);\n    adder = builder.grow(2);\n    adder.add(5);\n    adder.add(7);\n    set = builder.build();\n    assertTrue(set instanceof BitDocIdSet);\n    assertEquals(1, set.iterator().cost()); // it thinks the same doc was added twice\n\n    // incomplete stats\n    values = new DummyPointValues(42, -1);\n    builder = new DocIdSetBuilder(100, values, \"foo\");\n    assertEquals(1d, builder.numValuesPerDoc, 0d);\n    assertTrue(builder.multivalued);\n\n    values = new DummyPointValues(-1, 84);\n    builder = new DocIdSetBuilder(100, values, \"foo\");\n    assertEquals(1d, builder.numValuesPerDoc, 0d);\n    assertTrue(builder.multivalued);\n\n    // single-valued terms\n    Terms terms = new DummyTerms(42, 42);\n    builder = new DocIdSetBuilder(100, terms);\n    assertEquals(1d, builder.numValuesPerDoc, 0d);\n    assertFalse(builder.multivalued);\n    adder = builder.grow(2);\n    adder.add(5);\n    adder.add(7);\n    set = builder.build();\n    assertTrue(set instanceof BitDocIdSet);\n    assertEquals(2, set.iterator().cost());\n\n    // multi-valued terms\n    terms = new DummyTerms(42, 63);\n    builder = new DocIdSetBuilder(100, terms);\n    assertEquals(1.5, builder.numValuesPerDoc, 0d);\n    assertTrue(builder.multivalued);\n    adder = builder.grow(2);\n    adder.add(5);\n    adder.add(7);\n    set = builder.build();\n    assertTrue(set instanceof BitDocIdSet);\n    assertEquals(1, set.iterator().cost()); // it thinks the same doc was added twice\n\n    // incomplete stats\n    terms = new DummyTerms(42, -1);\n    builder = new DocIdSetBuilder(100, terms);\n    assertEquals(1d, builder.numValuesPerDoc, 0d);\n    assertTrue(builder.multivalued);\n\n    terms = new DummyTerms(-1, 84);\n    builder = new DocIdSetBuilder(100, terms);\n    assertEquals(1d, builder.numValuesPerDoc, 0d);\n    assertTrue(builder.multivalued);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c9ee4c03e3ee986704eeeb45c571d001905a6430":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30540ec27130887a9372c159e8fe971200f37727":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c9ee4c03e3ee986704eeeb45c571d001905a6430"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30540ec27130887a9372c159e8fe971200f37727"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30540ec27130887a9372c159e8fe971200f37727"]},"commit2Childs":{"c9ee4c03e3ee986704eeeb45c571d001905a6430":["30540ec27130887a9372c159e8fe971200f37727"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9ee4c03e3ee986704eeeb45c571d001905a6430","30540ec27130887a9372c159e8fe971200f37727","55b50463286869f584cf849d1587a0fcd54d1dfa"],"30540ec27130887a9372c159e8fe971200f37727":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}