{"path":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#equals(Object).mjava","commits":[{"id":"c2042d3e27841c5b60112990fc33559e10ccf6dd","date":1424537395,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#equals(Object).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsFilter#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if ((obj == null) || (obj.getClass() != this.getClass())) {\n      return false;\n    }\n\n    TermsQuery that = (TermsQuery) obj;\n    // first check the fields before even comparing the bytes\n    if (that.hashCode == hashCode && getBoost() == that.getBoost() && Arrays.equals(termsAndFields, that.termsAndFields)) {\n      int lastOffset = termsAndFields[termsAndFields.length - 1].end;\n      // compare offsets since we sort they must be identical\n      if (ArrayUtil.equals(offsets, 0, that.offsets, 0, lastOffset + 1)) {\n        // straight byte comparison since we sort they must be identical\n        return  ArrayUtil.equals(termsBytes, 0, that.termsBytes, 0, offsets[lastOffset]);\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if ((obj == null) || (obj.getClass() != this.getClass())) {\n      return false;\n    }\n    \n    TermsFilter test = (TermsFilter) obj;\n    // first check the fields before even comparing the bytes\n    if (test.hashCode == hashCode && Arrays.equals(termsAndFields, test.termsAndFields)) {\n      int lastOffset = termsAndFields[termsAndFields.length - 1].end;\n      // compare offsets since we sort they must be identical\n      if (ArrayUtil.equals(offsets, 0, test.offsets, 0, lastOffset + 1)) {\n        // straight byte comparison since we sort they must be identical\n        return  ArrayUtil.equals(termsBytes, 0, test.termsBytes, 0, offsets[lastOffset]);\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdd0e99daabe8cd52cd4d7755679337bede8abe0","date":1425571318,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#equals(Object).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (!super.equals(obj)) {\n      return false;\n    }\n    TermsQuery that = (TermsQuery) obj;\n    // first check the fields before even comparing the bytes\n    if (that.hashCode == hashCode && getBoost() == that.getBoost() && Arrays.equals(termsAndFields, that.termsAndFields)) {\n      int lastOffset = termsAndFields[termsAndFields.length - 1].end;\n      // compare offsets since we sort they must be identical\n      if (ArrayUtil.equals(offsets, 0, that.offsets, 0, lastOffset + 1)) {\n        // straight byte comparison since we sort they must be identical\n        return  ArrayUtil.equals(termsBytes, 0, that.termsBytes, 0, offsets[lastOffset]);\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if ((obj == null) || (obj.getClass() != this.getClass())) {\n      return false;\n    }\n\n    TermsQuery that = (TermsQuery) obj;\n    // first check the fields before even comparing the bytes\n    if (that.hashCode == hashCode && getBoost() == that.getBoost() && Arrays.equals(termsAndFields, that.termsAndFields)) {\n      int lastOffset = termsAndFields[termsAndFields.length - 1].end;\n      // compare offsets since we sort they must be identical\n      if (ArrayUtil.equals(offsets, 0, that.offsets, 0, lastOffset + 1)) {\n        // straight byte comparison since we sort they must be identical\n        return  ArrayUtil.equals(termsBytes, 0, that.termsBytes, 0, offsets[lastOffset]);\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#equals(Object).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (!super.equals(obj)) {\n      return false;\n    }\n    TermsQuery that = (TermsQuery) obj;\n    // first check the fields before even comparing the bytes\n    if (that.hashCode == hashCode && getBoost() == that.getBoost() && Arrays.equals(termsAndFields, that.termsAndFields)) {\n      int lastOffset = termsAndFields[termsAndFields.length - 1].end;\n      // compare offsets since we sort they must be identical\n      if (ArrayUtil.equals(offsets, 0, that.offsets, 0, lastOffset + 1)) {\n        // straight byte comparison since we sort they must be identical\n        return  ArrayUtil.equals(termsBytes, 0, that.termsBytes, 0, offsets[lastOffset]);\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if ((obj == null) || (obj.getClass() != this.getClass())) {\n      return false;\n    }\n\n    TermsQuery that = (TermsQuery) obj;\n    // first check the fields before even comparing the bytes\n    if (that.hashCode == hashCode && getBoost() == that.getBoost() && Arrays.equals(termsAndFields, that.termsAndFields)) {\n      int lastOffset = termsAndFields[termsAndFields.length - 1].end;\n      // compare offsets since we sort they must be identical\n      if (ArrayUtil.equals(offsets, 0, that.offsets, 0, lastOffset + 1)) {\n        // straight byte comparison since we sort they must be identical\n        return  ArrayUtil.equals(termsBytes, 0, that.termsBytes, 0, offsets[lastOffset]);\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a54410d37fe11baed59cc55dcad44db795f732c2","date":1430995912,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#equals(Object).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if (!super.equals(obj)) {\n      return false;\n    }\n    TermsQuery that = (TermsQuery) obj;\n    // termData might be heavy to compare so check the hash code first\n    return termDataHashCode == that.termDataHashCode\n        && termData.equals(that.termData);\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (!super.equals(obj)) {\n      return false;\n    }\n    TermsQuery that = (TermsQuery) obj;\n    // first check the fields before even comparing the bytes\n    if (that.hashCode == hashCode && getBoost() == that.getBoost() && Arrays.equals(termsAndFields, that.termsAndFields)) {\n      int lastOffset = termsAndFields[termsAndFields.length - 1].end;\n      // compare offsets since we sort they must be identical\n      if (ArrayUtil.equals(offsets, 0, that.offsets, 0, lastOffset + 1)) {\n        // straight byte comparison since we sort they must be identical\n        return  ArrayUtil.equals(termsBytes, 0, that.termsBytes, 0, offsets[lastOffset]);\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#equals(Object).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           equalsTo(getClass().cast(other));\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if (!super.equals(obj)) {\n      return false;\n    }\n    TermsQuery that = (TermsQuery) obj;\n    // termData might be heavy to compare so check the hash code first\n    return termDataHashCode == that.termDataHashCode\n        && termData.equals(that.termData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#equals(Object).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           equalsTo(getClass().cast(other));\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if (!super.equals(obj)) {\n      return false;\n    }\n    TermsQuery that = (TermsQuery) obj;\n    // termData might be heavy to compare so check the hash code first\n    return termDataHashCode == that.termDataHashCode\n        && termData.equals(that.termData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d73510b39df24d6b65de48e56f8dccb136b9d01","date":1483971905,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermInSetQuery#equals(Object).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n        equalsTo(getClass().cast(other));\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           equalsTo(getClass().cast(other));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermInSetQuery#equals(Object).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n        equalsTo(getClass().cast(other));\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           equalsTo(getClass().cast(other));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fdd0e99daabe8cd52cd4d7755679337bede8abe0":["c2042d3e27841c5b60112990fc33559e10ccf6dd"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c2042d3e27841c5b60112990fc33559e10ccf6dd","fdd0e99daabe8cd52cd4d7755679337bede8abe0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["0e7bc21595222ae4f75509300fbb7726691f387f"],"0e7bc21595222ae4f75509300fbb7726691f387f":["a54410d37fe11baed59cc55dcad44db795f732c2"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8d73510b39df24d6b65de48e56f8dccb136b9d01"],"a54410d37fe11baed59cc55dcad44db795f732c2":["fdd0e99daabe8cd52cd4d7755679337bede8abe0"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a54410d37fe11baed59cc55dcad44db795f732c2","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d73510b39df24d6b65de48e56f8dccb136b9d01"]},"commit2Childs":{"fdd0e99daabe8cd52cd4d7755679337bede8abe0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a54410d37fe11baed59cc55dcad44db795f732c2"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2042d3e27841c5b60112990fc33559e10ccf6dd"],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e7bc21595222ae4f75509300fbb7726691f387f":["8d73510b39df24d6b65de48e56f8dccb136b9d01","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"a54410d37fe11baed59cc55dcad44db795f732c2":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["fdd0e99daabe8cd52cd4d7755679337bede8abe0","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}