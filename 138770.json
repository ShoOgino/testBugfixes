{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#checkNormsVsDocValues(IndexReader).mjava","commits":[{"id":"7ca1fe3f1f5edea2339f7e7a31f0754878a72b0e","date":1476167489,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#checkNormsVsDocValues(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private void checkNormsVsDocValues(IndexReader ir) throws IOException {\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      NumericDocValues expected = r.getNumericDocValues(\"dv\");\n      NumericDocValues actual = r.getNormValues(\"indexed\");\n      assertEquals(expected == null, actual == null);\n      if (expected != null) {\n        for (int d = expected.nextDoc(); d != DocIdSetIterator.NO_MORE_DOCS; d = expected.nextDoc()) {\n          assertEquals(d, actual.nextDoc());\n          assertEquals(\"doc \" + d, expected.longValue(), actual.longValue());\n        }\n        assertEquals(NO_MORE_DOCS, actual.nextDoc());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#checkNormsVsDocValues(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private void checkNormsVsDocValues(IndexReader ir) throws IOException {\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      NumericDocValues expected = r.getNumericDocValues(\"dv\");\n      NumericDocValues actual = r.getNormValues(\"indexed\");\n      assertEquals(expected == null, actual == null);\n      if (expected != null) {\n        for (int d = expected.nextDoc(); d != DocIdSetIterator.NO_MORE_DOCS; d = expected.nextDoc()) {\n          assertEquals(d, actual.nextDoc());\n          assertEquals(\"doc \" + d, expected.longValue(), actual.longValue());\n        }\n        assertEquals(NO_MORE_DOCS, actual.nextDoc());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7ca1fe3f1f5edea2339f7e7a31f0754878a72b0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7ca1fe3f1f5edea2339f7e7a31f0754878a72b0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ca1fe3f1f5edea2339f7e7a31f0754878a72b0e"]},"commit2Childs":{"7ca1fe3f1f5edea2339f7e7a31f0754878a72b0e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7ca1fe3f1f5edea2339f7e7a31f0754878a72b0e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}