{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader).mjava","commits":[{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>IndexReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>IndexReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * <code>SearcherManager</code> in\n   * <code>contrib/misc</code> to simplify managing this.\n   *\n   * <p>If a new reader is returned, it's safe to make changes\n   * (deletions, norms) with it.  All shared mutable state\n   * with the old reader uses \"copy on write\" semantics to\n   * ensure the changes are not seen by other readers.\n   *\n   * <p><b>NOTE</b>: If the provided reader is a near real-time\n   * reader, this method will return another near-real-time\n   * reader.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * IndexReader instance which you must eventually close\n   */  \n  public static IndexReader openIfChanged(IndexReader oldReader) throws IOException {\n    return oldReader.doOpenIfChanged();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["66a7b33505a58e6f91f780ddaa986820233e850b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66a7b33505a58e6f91f780ddaa986820233e850b","date":1317683383,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader).mjava","sourceNew":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>IndexReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>IndexReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * <code>SearcherManager</code> in\n   * <code>contrib/misc</code> to simplify managing this.\n   *\n   * <p>If a new reader is returned, it's safe to make changes\n   * (deletions, norms) with it.  All shared mutable state\n   * with the old reader uses \"copy on write\" semantics to\n   * ensure the changes are not seen by other readers.\n   *\n   * <p><b>NOTE</b>: If the provided reader is a near real-time\n   * reader, this method will return another near-real-time\n   * reader.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * IndexReader instance which you must eventually close\n   */  \n  public static IndexReader openIfChanged(IndexReader oldReader) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged();\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","sourceOld":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>IndexReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>IndexReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * <code>SearcherManager</code> in\n   * <code>contrib/misc</code> to simplify managing this.\n   *\n   * <p>If a new reader is returned, it's safe to make changes\n   * (deletions, norms) with it.  All shared mutable state\n   * with the old reader uses \"copy on write\" semantics to\n   * ensure the changes are not seen by other readers.\n   *\n   * <p><b>NOTE</b>: If the provided reader is a near real-time\n   * reader, this method will return another near-real-time\n   * reader.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * IndexReader instance which you must eventually close\n   */  \n  public static IndexReader openIfChanged(IndexReader oldReader) throws IOException {\n    return oldReader.doOpenIfChanged();\n  }\n\n","bugFix":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43369d257d14f61a881aa609962ef95e8a334d3a","date":1318786064,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader).mjava","sourceNew":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>IndexReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>IndexReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * <code>SearcherManager</code> in\n   * <code>contrib/misc</code> to simplify managing this.\n   *\n   * <p>If a new reader is returned, it's safe to make changes\n   * (deletions, norms) with it.  All shared mutable state\n   * with the old reader uses \"copy on write\" semantics to\n   * ensure the changes are not seen by other readers.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * IndexReader instance which you must eventually close\n   */  \n  public static IndexReader openIfChanged(IndexReader oldReader) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged();\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","sourceOld":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>IndexReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>IndexReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * <code>SearcherManager</code> in\n   * <code>contrib/misc</code> to simplify managing this.\n   *\n   * <p>If a new reader is returned, it's safe to make changes\n   * (deletions, norms) with it.  All shared mutable state\n   * with the old reader uses \"copy on write\" semantics to\n   * ensure the changes are not seen by other readers.\n   *\n   * <p><b>NOTE</b>: If the provided reader is a near real-time\n   * reader, this method will return another near-real-time\n   * reader.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * IndexReader instance which you must eventually close\n   */  \n  public static IndexReader openIfChanged(IndexReader oldReader) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged();\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dd8cac059f4a5d4491e279aa2d07064392f9357","date":1323099195,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader).mjava","sourceNew":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>IndexReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>IndexReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * <code>SearcherManager</code> in\n   * <code>contrib/misc</code> to simplify managing this.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * IndexReader instance which you must eventually close\n   */  \n  public static IndexReader openIfChanged(IndexReader oldReader) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged();\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","sourceOld":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>IndexReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>IndexReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * <code>SearcherManager</code> in\n   * <code>contrib/misc</code> to simplify managing this.\n   *\n   * <p>If a new reader is returned, it's safe to make changes\n   * (deletions, norms) with it.  All shared mutable state\n   * with the old reader uses \"copy on write\" semantics to\n   * ensure the changes are not seen by other readers.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * IndexReader instance which you must eventually close\n   */  \n  public static IndexReader openIfChanged(IndexReader oldReader) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged();\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8798017843f5b945fd0990fc29510deefb6912ec","date":1323113361,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader).mjava","sourceNew":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>IndexReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>IndexReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * {@link SearcherManager} to simplify managing this.\n   *\n   * <p>If a new reader is returned, it's safe to make changes\n   * (deletions, norms) with it.  All shared mutable state\n   * with the old reader uses \"copy on write\" semantics to\n   * ensure the changes are not seen by other readers.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * IndexReader instance which you must eventually close\n   */  \n  public static IndexReader openIfChanged(IndexReader oldReader) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged();\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","sourceOld":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>IndexReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>IndexReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * <code>SearcherManager</code> in\n   * <code>contrib/misc</code> to simplify managing this.\n   *\n   * <p>If a new reader is returned, it's safe to make changes\n   * (deletions, norms) with it.  All shared mutable state\n   * with the old reader uses \"copy on write\" semantics to\n   * ensure the changes are not seen by other readers.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * IndexReader instance which you must eventually close\n   */  \n  public static IndexReader openIfChanged(IndexReader oldReader) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged();\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"929d416aad35e36f2d2743c625e05e23908e7563","date":1323209095,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader).mjava","sourceNew":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>IndexReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>IndexReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * {@link SearcherManager} to simplify managing this.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * IndexReader instance which you must eventually close\n   */  \n  public static IndexReader openIfChanged(IndexReader oldReader) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged();\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","sourceOld":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>IndexReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>IndexReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * <code>SearcherManager</code> in\n   * <code>contrib/misc</code> to simplify managing this.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * IndexReader instance which you must eventually close\n   */  \n  public static IndexReader openIfChanged(IndexReader oldReader) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged();\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader).mjava","sourceNew":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>IndexReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>IndexReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * {@link SearcherManager} to simplify managing this.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * IndexReader instance which you must eventually close\n   */  \n  public static IndexReader openIfChanged(IndexReader oldReader) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged();\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","sourceOld":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>IndexReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>IndexReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * {@link SearcherManager} to simplify managing this.\n   *\n   * <p>If a new reader is returned, it's safe to make changes\n   * (deletions, norms) with it.  All shared mutable state\n   * with the old reader uses \"copy on write\" semantics to\n   * ensure the changes are not seen by other readers.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * IndexReader instance which you must eventually close\n   */  \n  public static IndexReader openIfChanged(IndexReader oldReader) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged();\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader).mjava","sourceNew":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>IndexReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>IndexReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * {@link SearcherManager} to simplify managing this.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * IndexReader instance which you must eventually close\n   */  \n  public static IndexReader openIfChanged(IndexReader oldReader) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged();\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","sourceOld":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>IndexReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>IndexReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * {@link SearcherManager} to simplify managing this.\n   *\n   * <p>If a new reader is returned, it's safe to make changes\n   * (deletions, norms) with it.  All shared mutable state\n   * with the old reader uses \"copy on write\" semantics to\n   * ensure the changes are not seen by other readers.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * IndexReader instance which you must eventually close\n   */  \n  public static IndexReader openIfChanged(IndexReader oldReader) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged();\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(CompositeIndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader).mjava","sourceNew":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>IndexReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>IndexReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * {@link SearcherManager} to simplify managing this.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * IndexReader instance which you must eventually close\n   */  \n  public static CompositeIndexReader openIfChanged(CompositeIndexReader oldReader) throws IOException {\n    final CompositeIndexReader newReader = oldReader.doOpenIfChanged();\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","sourceOld":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>IndexReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>IndexReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * {@link SearcherManager} to simplify managing this.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * IndexReader instance which you must eventually close\n   */  \n  public static IndexReader openIfChanged(IndexReader oldReader) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged();\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#openIfChanged(DirectoryReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader).mjava","sourceNew":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>DirectoryReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>DirectoryReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * {@link SearcherManager} to simplify managing this.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * DirectoryReader instance which you must eventually close\n   */  \n  public static DirectoryReader openIfChanged(DirectoryReader oldReader) throws IOException {\n    final DirectoryReader newReader = oldReader.doOpenIfChanged();\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","sourceOld":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>IndexReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>IndexReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * {@link SearcherManager} to simplify managing this.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * IndexReader instance which you must eventually close\n   */  \n  public static IndexReader openIfChanged(IndexReader oldReader) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged();\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"929d416aad35e36f2d2743c625e05e23908e7563":["2dd8cac059f4a5d4491e279aa2d07064392f9357","8798017843f5b945fd0990fc29510deefb6912ec"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["8798017843f5b945fd0990fc29510deefb6912ec","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"66a7b33505a58e6f91f780ddaa986820233e850b":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8798017843f5b945fd0990fc29510deefb6912ec":["43369d257d14f61a881aa609962ef95e8a334d3a"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["8798017843f5b945fd0990fc29510deefb6912ec","929d416aad35e36f2d2743c625e05e23908e7563"],"43369d257d14f61a881aa609962ef95e8a334d3a":["66a7b33505a58e6f91f780ddaa986820233e850b"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"2dd8cac059f4a5d4491e279aa2d07064392f9357":["43369d257d14f61a881aa609962ef95e8a334d3a"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["3615ce4a1f785ae1b779244de52c6a7d99227e60"]},"commit2Childs":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["66a7b33505a58e6f91f780ddaa986820233e850b"],"929d416aad35e36f2d2743c625e05e23908e7563":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"66a7b33505a58e6f91f780ddaa986820233e850b":["43369d257d14f61a881aa609962ef95e8a334d3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"8798017843f5b945fd0990fc29510deefb6912ec":["929d416aad35e36f2d2743c625e05e23908e7563","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"43369d257d14f61a881aa609962ef95e8a334d3a":["8798017843f5b945fd0990fc29510deefb6912ec","2dd8cac059f4a5d4491e279aa2d07064392f9357"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2dd8cac059f4a5d4491e279aa2d07064392f9357":["929d416aad35e36f2d2743c625e05e23908e7563"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}