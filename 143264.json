{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestDimensionalQueries#circleContainsPoint(double,double,double,double,double).mjava","commits":[{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDimensionalQueries#circleContainsPoint(double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#circleContainsPoint(double,double,double,double,double).mjava","sourceNew":"  @Override\n  protected Boolean circleContainsPoint(double centerLat, double centerLon, double radiusMeters, double pointLat, double pointLon) {\n    double distanceKM = SloppyMath.haversin(centerLat, centerLon, pointLat, pointLon);\n    boolean result = distanceKM*1000.0 <= radiusMeters;\n    //System.out.println(\"  shouldMatch?  centerLon=\" + centerLon + \" centerLat=\" + centerLat + \" pointLon=\" + pointLon + \" pointLat=\" + pointLat + \" result=\" + result + \" distanceMeters=\" + (distanceKM * 1000));\n    return result;\n  }\n\n","sourceOld":"  @Override\n  protected Boolean circleContainsPoint(double centerLat, double centerLon, double radiusMeters, double pointLat, double pointLon) {\n    double distanceKM = SloppyMath.haversin(centerLat, centerLon, pointLat, pointLon);\n    boolean result = distanceKM*1000.0 <= radiusMeters;\n    //System.out.println(\"  shouldMatch?  centerLon=\" + centerLon + \" centerLat=\" + centerLat + \" pointLon=\" + pointLon + \" pointLat=\" + pointLat + \" result=\" + result + \" distanceMeters=\" + (distanceKM * 1000));\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33bb6bd7295e66f93f182556f5353b97243e62ba","date":1449525768,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDimensionalQueries#circleContainsPoint(double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDimensionalQueries#circleContainsPoint(double,double,double,double,double).mjava","sourceNew":"  @Override\n  protected Boolean circleContainsPoint(double centerLat, double centerLon, double radiusMeters, double pointLat, double pointLon) {\n    double distanceMeters = GeoDistanceUtils.haversin(centerLat, centerLon, pointLat, pointLon);\n    boolean result = distanceMeters <= radiusMeters;\n    //System.out.println(\"  shouldMatch?  centerLon=\" + centerLon + \" centerLat=\" + centerLat + \" pointLon=\" + pointLon + \" pointLat=\" + pointLat + \" result=\" + result + \" distanceMeters=\" + (distanceKM * 1000));\n    return result;\n  }\n\n","sourceOld":"  @Override\n  protected Boolean circleContainsPoint(double centerLat, double centerLon, double radiusMeters, double pointLat, double pointLon) {\n    double distanceKM = SloppyMath.haversin(centerLat, centerLon, pointLat, pointLon);\n    boolean result = distanceKM*1000.0 <= radiusMeters;\n    //System.out.println(\"  shouldMatch?  centerLon=\" + centerLon + \" centerLat=\" + centerLat + \" pointLon=\" + pointLon + \" pointLat=\" + pointLat + \" result=\" + result + \" distanceMeters=\" + (distanceKM * 1000));\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#circleContainsPoint(double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDimensionalQueries#circleContainsPoint(double,double,double,double,double).mjava","sourceNew":"  @Override\n  protected Boolean circleContainsPoint(double centerLat, double centerLon, double radiusMeters, double pointLat, double pointLon) {\n    double distanceMeters = GeoDistanceUtils.haversin(centerLat, centerLon, pointLat, pointLon);\n    boolean result = distanceMeters <= radiusMeters;\n    //System.out.println(\"  shouldMatch?  centerLon=\" + centerLon + \" centerLat=\" + centerLat + \" pointLon=\" + pointLon + \" pointLat=\" + pointLat + \" result=\" + result + \" distanceMeters=\" + (distanceKM * 1000));\n    return result;\n  }\n\n","sourceOld":"  @Override\n  protected Boolean circleContainsPoint(double centerLat, double centerLon, double radiusMeters, double pointLat, double pointLon) {\n    double distanceMeters = GeoDistanceUtils.haversin(centerLat, centerLon, pointLat, pointLon);\n    boolean result = distanceMeters <= radiusMeters;\n    //System.out.println(\"  shouldMatch?  centerLon=\" + centerLon + \" centerLat=\" + centerLat + \" pointLon=\" + pointLon + \" pointLat=\" + pointLat + \" result=\" + result + \" distanceMeters=\" + (distanceKM * 1000));\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"33bb6bd7295e66f93f182556f5353b97243e62ba":["1904709ea0185dc04e3d77ea01c79e909caf2796"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"33bb6bd7295e66f93f182556f5353b97243e62ba":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}