{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","sourceNew":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null, operator=null, term=null;\n  FieldQueryNode qLower, qUpper;\n  boolean lowerInclusive, upperInclusive;\n\n  boolean group = false;\n    if (jj_2_2(3)) {\n      fieldToken = jj_consume_token(TERM);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OP_COLON:\n      case OP_EQUAL:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_COLON:\n          jj_consume_token(OP_COLON);\n          break;\n        case OP_EQUAL:\n          jj_consume_token(OP_EQUAL);\n          break;\n        default:\n          jj_la1[7] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        q = Term(field);\n        break;\n      case OP_LESSTHAN:\n      case OP_LESSTHANEQ:\n      case OP_MORETHAN:\n      case OP_MORETHANEQ:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_LESSTHAN:\n          operator = jj_consume_token(OP_LESSTHAN);\n          break;\n        case OP_LESSTHANEQ:\n          operator = jj_consume_token(OP_LESSTHANEQ);\n          break;\n        case OP_MORETHAN:\n          operator = jj_consume_token(OP_MORETHAN);\n          break;\n        case OP_MORETHANEQ:\n          operator = jj_consume_token(OP_MORETHANEQ);\n          break;\n        default:\n          jj_la1[8] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                                                                                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case TERM:\n          term = jj_consume_token(TERM);\n          break;\n        case QUOTED:\n          term = jj_consume_token(QUOTED);\n          break;\n        case NUMBER:\n          term = jj_consume_token(NUMBER);\n          break;\n        default:\n          jj_la1[9] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        if (term.kind == QUOTED) {\n            term.image = term.image.substring(1, term.image.length()-1);\n        }\n        switch (operator.kind) {\n            case OP_LESSTHAN:\n                lowerInclusive = true;\n                upperInclusive = false;\n\n                qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                        qUpper = new FieldQueryNode(field,\n                                 EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n\n                break;\n            case OP_LESSTHANEQ:\n                lowerInclusive = true;\n                upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHAN:\n                lowerInclusive = false;\n                upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHANEQ:\n                lowerInclusive = true;\n                upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            default:\n                {if (true) throw new Error(\"Unhandled case: operator=\"+operator.toString());}\n        }\n        q = new TermRangeQueryNode(qLower, qUpper, lowerInclusive, upperInclusive);\n        break;\n      default:\n        jj_la1[10] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        if (jj_2_1(2)) {\n          fieldToken = jj_consume_token(TERM);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case OP_COLON:\n            jj_consume_token(OP_COLON);\n            break;\n          case OP_EQUAL:\n            jj_consume_token(OP_EQUAL);\n            break;\n          default:\n            jj_la1[11] = jj_gen;\n            jj_consume_token(-1);\n            throw new ParseException();\n          }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        } else {\n          ;\n        }\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case QUOTED:\n        case TERM:\n        case REGEXPTERM:\n        case RANGEIN_START:\n        case RANGEEX_START:\n        case NUMBER:\n          q = Term(field);\n          break;\n        case LPAREN:\n          jj_consume_token(LPAREN);\n          q = Query(field);\n          jj_consume_token(RPAREN);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case CARAT:\n            jj_consume_token(CARAT);\n            boost = jj_consume_token(NUMBER);\n            break;\n          default:\n            jj_la1[12] = jj_gen;\n            ;\n          }\n                                                                 group=true;\n          break;\n        default:\n          jj_la1[13] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        break;\n      default:\n        jj_la1[14] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n      if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n                  }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null, operator=null, term=null;\n  FieldQueryNode qLower, qUpper;\n  boolean lowerInclusive, upperInclusive;\n\n  boolean group = false;\n    if (jj_2_2(3)) {\n      fieldToken = jj_consume_token(TERM);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OP_COLON:\n      case OP_EQUAL:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_COLON:\n          jj_consume_token(OP_COLON);\n          break;\n        case OP_EQUAL:\n          jj_consume_token(OP_EQUAL);\n          break;\n        default:\n          jj_la1[7] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        q = Term(field);\n        break;\n      case OP_LESSTHAN:\n      case OP_LESSTHANEQ:\n      case OP_MORETHAN:\n      case OP_MORETHANEQ:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_LESSTHAN:\n          operator = jj_consume_token(OP_LESSTHAN);\n          break;\n        case OP_LESSTHANEQ:\n          operator = jj_consume_token(OP_LESSTHANEQ);\n          break;\n        case OP_MORETHAN:\n          operator = jj_consume_token(OP_MORETHAN);\n          break;\n        case OP_MORETHANEQ:\n          operator = jj_consume_token(OP_MORETHANEQ);\n          break;\n        default:\n          jj_la1[8] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                                                                                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case TERM:\n          term = jj_consume_token(TERM);\n          break;\n        case QUOTED:\n          term = jj_consume_token(QUOTED);\n          break;\n        case NUMBER:\n          term = jj_consume_token(NUMBER);\n          break;\n        default:\n          jj_la1[9] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        if (term.kind == QUOTED) {\n            term.image = term.image.substring(1, term.image.length()-1);\n        }\n        switch (operator.kind) {\n            case OP_LESSTHAN:\n                lowerInclusive = true;\n                upperInclusive = false;\n\n                qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                        qUpper = new FieldQueryNode(field,\n                                 EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n\n                break;\n            case OP_LESSTHANEQ:\n                lowerInclusive = true;\n                upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHAN:\n                lowerInclusive = false;\n                upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHANEQ:\n                lowerInclusive = true;\n                upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            default:\n                {if (true) throw new Error(\"Unhandled case: operator=\"+operator.toString());}\n        }\n        q = new TermRangeQueryNode(qLower, qUpper, lowerInclusive, upperInclusive);\n        break;\n      default:\n        jj_la1[10] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        if (jj_2_1(2)) {\n          fieldToken = jj_consume_token(TERM);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case OP_COLON:\n            jj_consume_token(OP_COLON);\n            break;\n          case OP_EQUAL:\n            jj_consume_token(OP_EQUAL);\n            break;\n          default:\n            jj_la1[11] = jj_gen;\n            jj_consume_token(-1);\n            throw new ParseException();\n          }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        } else {\n          ;\n        }\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case QUOTED:\n        case TERM:\n        case REGEXPTERM:\n        case RANGEIN_START:\n        case RANGEEX_START:\n        case NUMBER:\n          q = Term(field);\n          break;\n        case LPAREN:\n          jj_consume_token(LPAREN);\n          q = Query(field);\n          jj_consume_token(RPAREN);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case CARAT:\n            jj_consume_token(CARAT);\n            boost = jj_consume_token(NUMBER);\n            break;\n          default:\n            jj_la1[12] = jj_gen;\n            ;\n          }\n                                                                 group=true;\n          break;\n        default:\n          jj_la1[13] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        break;\n      default:\n        jj_la1[14] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n      if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n                  }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","sourceNew":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null, operator=null, term=null;\n  FieldQueryNode qLower, qUpper;\n  boolean lowerInclusive, upperInclusive;\n\n  boolean group = false;\n    if (jj_2_2(3)) {\n      fieldToken = jj_consume_token(TERM);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OP_COLON:\n      case OP_EQUAL:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_COLON:\n          jj_consume_token(OP_COLON);\n          break;\n        case OP_EQUAL:\n          jj_consume_token(OP_EQUAL);\n          break;\n        default:\n          jj_la1[7] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        q = Term(field);\n        break;\n      case OP_LESSTHAN:\n      case OP_LESSTHANEQ:\n      case OP_MORETHAN:\n      case OP_MORETHANEQ:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_LESSTHAN:\n          operator = jj_consume_token(OP_LESSTHAN);\n          break;\n        case OP_LESSTHANEQ:\n          operator = jj_consume_token(OP_LESSTHANEQ);\n          break;\n        case OP_MORETHAN:\n          operator = jj_consume_token(OP_MORETHAN);\n          break;\n        case OP_MORETHANEQ:\n          operator = jj_consume_token(OP_MORETHANEQ);\n          break;\n        default:\n          jj_la1[8] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                                                                                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case TERM:\n          term = jj_consume_token(TERM);\n          break;\n        case QUOTED:\n          term = jj_consume_token(QUOTED);\n          break;\n        case NUMBER:\n          term = jj_consume_token(NUMBER);\n          break;\n        default:\n          jj_la1[9] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        if (term.kind == QUOTED) {\n            term.image = term.image.substring(1, term.image.length()-1);\n        }\n        switch (operator.kind) {\n            case OP_LESSTHAN:\n              lowerInclusive = true;\n              upperInclusive = false;\n\n               qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n            qUpper = new FieldQueryNode(field,\n                                 EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n\n                break;\n            case OP_LESSTHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHAN:\n              lowerInclusive = false;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            default:\n                {if (true) throw new Error(\"Unhandled case: operator=\"+operator.toString());}\n        }\n        q = new TermRangeQueryNode(qLower, qUpper, lowerInclusive, upperInclusive);\n        break;\n      default:\n        jj_la1[10] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        if (jj_2_1(2)) {\n          fieldToken = jj_consume_token(TERM);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case OP_COLON:\n            jj_consume_token(OP_COLON);\n            break;\n          case OP_EQUAL:\n            jj_consume_token(OP_EQUAL);\n            break;\n          default:\n            jj_la1[11] = jj_gen;\n            jj_consume_token(-1);\n            throw new ParseException();\n          }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        } else {\n          ;\n        }\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case QUOTED:\n        case TERM:\n        case REGEXPTERM:\n        case RANGEIN_START:\n        case RANGEEX_START:\n        case NUMBER:\n          q = Term(field);\n          break;\n        case LPAREN:\n          jj_consume_token(LPAREN);\n          q = Query(field);\n          jj_consume_token(RPAREN);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case CARAT:\n            jj_consume_token(CARAT);\n            boost = jj_consume_token(NUMBER);\n            break;\n          default:\n            jj_la1[12] = jj_gen;\n            ;\n          }\n                                                                 group=true;\n          break;\n        default:\n          jj_la1[13] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        break;\n      default:\n        jj_la1[14] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n      if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.valueOf(boost.image).floatValue();\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n      }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null, operator=null, term=null;\n  FieldQueryNode qLower, qUpper;\n  boolean lowerInclusive, upperInclusive;\n\n  boolean group = false;\n    if (jj_2_2(3)) {\n      fieldToken = jj_consume_token(TERM);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OP_COLON:\n      case OP_EQUAL:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_COLON:\n          jj_consume_token(OP_COLON);\n          break;\n        case OP_EQUAL:\n          jj_consume_token(OP_EQUAL);\n          break;\n        default:\n          jj_la1[7] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        q = Term(field);\n        break;\n      case OP_LESSTHAN:\n      case OP_LESSTHANEQ:\n      case OP_MORETHAN:\n      case OP_MORETHANEQ:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_LESSTHAN:\n          operator = jj_consume_token(OP_LESSTHAN);\n          break;\n        case OP_LESSTHANEQ:\n          operator = jj_consume_token(OP_LESSTHANEQ);\n          break;\n        case OP_MORETHAN:\n          operator = jj_consume_token(OP_MORETHAN);\n          break;\n        case OP_MORETHANEQ:\n          operator = jj_consume_token(OP_MORETHANEQ);\n          break;\n        default:\n          jj_la1[8] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                                                                                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case TERM:\n          term = jj_consume_token(TERM);\n          break;\n        case QUOTED:\n          term = jj_consume_token(QUOTED);\n          break;\n        case NUMBER:\n          term = jj_consume_token(NUMBER);\n          break;\n        default:\n          jj_la1[9] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        if (term.kind == QUOTED) {\n            term.image = term.image.substring(1, term.image.length()-1);\n        }\n        switch (operator.kind) {\n            case OP_LESSTHAN:\n                lowerInclusive = true;\n                upperInclusive = false;\n\n                qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                        qUpper = new FieldQueryNode(field,\n                                 EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n\n                break;\n            case OP_LESSTHANEQ:\n                lowerInclusive = true;\n                upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHAN:\n                lowerInclusive = false;\n                upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHANEQ:\n                lowerInclusive = true;\n                upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            default:\n                {if (true) throw new Error(\"Unhandled case: operator=\"+operator.toString());}\n        }\n        q = new TermRangeQueryNode(qLower, qUpper, lowerInclusive, upperInclusive);\n        break;\n      default:\n        jj_la1[10] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        if (jj_2_1(2)) {\n          fieldToken = jj_consume_token(TERM);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case OP_COLON:\n            jj_consume_token(OP_COLON);\n            break;\n          case OP_EQUAL:\n            jj_consume_token(OP_EQUAL);\n            break;\n          default:\n            jj_la1[11] = jj_gen;\n            jj_consume_token(-1);\n            throw new ParseException();\n          }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        } else {\n          ;\n        }\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case QUOTED:\n        case TERM:\n        case REGEXPTERM:\n        case RANGEIN_START:\n        case RANGEEX_START:\n        case NUMBER:\n          q = Term(field);\n          break;\n        case LPAREN:\n          jj_consume_token(LPAREN);\n          q = Query(field);\n          jj_consume_token(RPAREN);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case CARAT:\n            jj_consume_token(CARAT);\n            boost = jj_consume_token(NUMBER);\n            break;\n          default:\n            jj_la1[12] = jj_gen;\n            ;\n          }\n                                                                 group=true;\n          break;\n        default:\n          jj_la1[13] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        break;\n      default:\n        jj_la1[14] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n      if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n                  }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"383e6510a01a27ea3d860472f33049ed2c766e15","date":1424161215,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","sourceNew":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null, operator=null, term=null;\n  FieldQueryNode qLower, qUpper;\n  boolean lowerInclusive, upperInclusive;\n\n  boolean group = false;\n    if (jj_2_2(3)) {\n      fieldToken = jj_consume_token(TERM);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OP_COLON:\n      case OP_EQUAL:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_COLON:\n          jj_consume_token(OP_COLON);\n          break;\n        case OP_EQUAL:\n          jj_consume_token(OP_EQUAL);\n          break;\n        default:\n          jj_la1[5] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        q = Term(field);\n        break;\n      case OP_LESSTHAN:\n      case OP_LESSTHANEQ:\n      case OP_MORETHAN:\n      case OP_MORETHANEQ:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_LESSTHAN:\n          operator = jj_consume_token(OP_LESSTHAN);\n          break;\n        case OP_LESSTHANEQ:\n          operator = jj_consume_token(OP_LESSTHANEQ);\n          break;\n        case OP_MORETHAN:\n          operator = jj_consume_token(OP_MORETHAN);\n          break;\n        case OP_MORETHANEQ:\n          operator = jj_consume_token(OP_MORETHANEQ);\n          break;\n        default:\n          jj_la1[6] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                                                                                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case TERM:\n          term = jj_consume_token(TERM);\n          break;\n        case QUOTED:\n          term = jj_consume_token(QUOTED);\n          break;\n        case NUMBER:\n          term = jj_consume_token(NUMBER);\n          break;\n        default:\n          jj_la1[7] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        if (term.kind == QUOTED) {\n            term.image = term.image.substring(1, term.image.length()-1);\n        }\n        switch (operator.kind) {\n            case OP_LESSTHAN:\n              lowerInclusive = true;\n              upperInclusive = false;\n\n               qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n            qUpper = new FieldQueryNode(field,\n                                 EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n\n                break;\n            case OP_LESSTHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHAN:\n              lowerInclusive = false;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            default:\n                {if (true) throw new Error(\"Unhandled case: operator=\"+operator.toString());}\n        }\n        q = new TermRangeQueryNode(qLower, qUpper, lowerInclusive, upperInclusive);\n        break;\n      default:\n        jj_la1[8] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        if (jj_2_1(2)) {\n          fieldToken = jj_consume_token(TERM);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case OP_COLON:\n            jj_consume_token(OP_COLON);\n            break;\n          case OP_EQUAL:\n            jj_consume_token(OP_EQUAL);\n            break;\n          default:\n            jj_la1[9] = jj_gen;\n            jj_consume_token(-1);\n            throw new ParseException();\n          }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        } else {\n          ;\n        }\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case QUOTED:\n        case TERM:\n        case REGEXPTERM:\n        case RANGEIN_START:\n        case RANGEEX_START:\n        case NUMBER:\n          q = Term(field);\n          break;\n        case LPAREN:\n          jj_consume_token(LPAREN);\n          q = Query(field);\n          jj_consume_token(RPAREN);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case CARAT:\n            jj_consume_token(CARAT);\n            boost = jj_consume_token(NUMBER);\n            break;\n          default:\n            jj_la1[10] = jj_gen;\n            ;\n          }\n                                                                 group=true;\n          break;\n        default:\n          jj_la1[11] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        break;\n      default:\n        jj_la1[12] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n      if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.valueOf(boost.image).floatValue();\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n      }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null, operator=null, term=null;\n  FieldQueryNode qLower, qUpper;\n  boolean lowerInclusive, upperInclusive;\n\n  boolean group = false;\n    if (jj_2_2(3)) {\n      fieldToken = jj_consume_token(TERM);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OP_COLON:\n      case OP_EQUAL:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_COLON:\n          jj_consume_token(OP_COLON);\n          break;\n        case OP_EQUAL:\n          jj_consume_token(OP_EQUAL);\n          break;\n        default:\n          jj_la1[7] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        q = Term(field);\n        break;\n      case OP_LESSTHAN:\n      case OP_LESSTHANEQ:\n      case OP_MORETHAN:\n      case OP_MORETHANEQ:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_LESSTHAN:\n          operator = jj_consume_token(OP_LESSTHAN);\n          break;\n        case OP_LESSTHANEQ:\n          operator = jj_consume_token(OP_LESSTHANEQ);\n          break;\n        case OP_MORETHAN:\n          operator = jj_consume_token(OP_MORETHAN);\n          break;\n        case OP_MORETHANEQ:\n          operator = jj_consume_token(OP_MORETHANEQ);\n          break;\n        default:\n          jj_la1[8] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                                                                                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case TERM:\n          term = jj_consume_token(TERM);\n          break;\n        case QUOTED:\n          term = jj_consume_token(QUOTED);\n          break;\n        case NUMBER:\n          term = jj_consume_token(NUMBER);\n          break;\n        default:\n          jj_la1[9] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        if (term.kind == QUOTED) {\n            term.image = term.image.substring(1, term.image.length()-1);\n        }\n        switch (operator.kind) {\n            case OP_LESSTHAN:\n              lowerInclusive = true;\n              upperInclusive = false;\n\n               qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n            qUpper = new FieldQueryNode(field,\n                                 EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n\n                break;\n            case OP_LESSTHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHAN:\n              lowerInclusive = false;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            default:\n                {if (true) throw new Error(\"Unhandled case: operator=\"+operator.toString());}\n        }\n        q = new TermRangeQueryNode(qLower, qUpper, lowerInclusive, upperInclusive);\n        break;\n      default:\n        jj_la1[10] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        if (jj_2_1(2)) {\n          fieldToken = jj_consume_token(TERM);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case OP_COLON:\n            jj_consume_token(OP_COLON);\n            break;\n          case OP_EQUAL:\n            jj_consume_token(OP_EQUAL);\n            break;\n          default:\n            jj_la1[11] = jj_gen;\n            jj_consume_token(-1);\n            throw new ParseException();\n          }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        } else {\n          ;\n        }\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case QUOTED:\n        case TERM:\n        case REGEXPTERM:\n        case RANGEIN_START:\n        case RANGEEX_START:\n        case NUMBER:\n          q = Term(field);\n          break;\n        case LPAREN:\n          jj_consume_token(LPAREN);\n          q = Query(field);\n          jj_consume_token(RPAREN);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case CARAT:\n            jj_consume_token(CARAT);\n            boost = jj_consume_token(NUMBER);\n            break;\n          default:\n            jj_la1[12] = jj_gen;\n            ;\n          }\n                                                                 group=true;\n          break;\n        default:\n          jj_la1[13] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        break;\n      default:\n        jj_la1[14] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n      if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.valueOf(boost.image).floatValue();\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n      }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","date":1489572490,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","sourceNew":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null, operator=null, term=null;\n  FieldQueryNode qLower, qUpper;\n  boolean lowerInclusive, upperInclusive;\n\n  boolean group = false;\n    if (jj_2_2(3)) {\n      fieldToken = jj_consume_token(TERM);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OP_COLON:\n      case OP_EQUAL:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_COLON:\n          jj_consume_token(OP_COLON);\n          break;\n        case OP_EQUAL:\n          jj_consume_token(OP_EQUAL);\n          break;\n        default:\n          jj_la1[5] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        q = Term(field);\n        break;\n      case OP_LESSTHAN:\n      case OP_LESSTHANEQ:\n      case OP_MORETHAN:\n      case OP_MORETHANEQ:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_LESSTHAN:\n          operator = jj_consume_token(OP_LESSTHAN);\n          break;\n        case OP_LESSTHANEQ:\n          operator = jj_consume_token(OP_LESSTHANEQ);\n          break;\n        case OP_MORETHAN:\n          operator = jj_consume_token(OP_MORETHAN);\n          break;\n        case OP_MORETHANEQ:\n          operator = jj_consume_token(OP_MORETHANEQ);\n          break;\n        default:\n          jj_la1[6] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                                                                                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case TERM:\n          term = jj_consume_token(TERM);\n          break;\n        case QUOTED:\n          term = jj_consume_token(QUOTED);\n          break;\n        case NUMBER:\n          term = jj_consume_token(NUMBER);\n          break;\n        default:\n          jj_la1[7] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        if (term.kind == QUOTED) {\n            term.image = term.image.substring(1, term.image.length()-1);\n        }\n        switch (operator.kind) {\n            case OP_LESSTHAN:\n              lowerInclusive = true;\n              upperInclusive = false;\n\n               qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n            qUpper = new FieldQueryNode(field,\n                                 EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n\n                break;\n            case OP_LESSTHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHAN:\n              lowerInclusive = false;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            default:\n                {if (true) throw new Error(\"Unhandled case: operator=\"+operator.toString());}\n        }\n        q = new TermRangeQueryNode(qLower, qUpper, lowerInclusive, upperInclusive);\n        break;\n      default:\n        jj_la1[8] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        if (jj_2_1(2)) {\n          fieldToken = jj_consume_token(TERM);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case OP_COLON:\n            jj_consume_token(OP_COLON);\n            break;\n          case OP_EQUAL:\n            jj_consume_token(OP_EQUAL);\n            break;\n          default:\n            jj_la1[9] = jj_gen;\n            jj_consume_token(-1);\n            throw new ParseException();\n          }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        } else {\n          ;\n        }\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case QUOTED:\n        case TERM:\n        case REGEXPTERM:\n        case RANGEIN_START:\n        case RANGEEX_START:\n        case NUMBER:\n          q = Term(field);\n          break;\n        case LPAREN:\n          jj_consume_token(LPAREN);\n          q = Query(field);\n          jj_consume_token(RPAREN);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case CARAT:\n            jj_consume_token(CARAT);\n            boost = jj_consume_token(NUMBER);\n            break;\n          default:\n            jj_la1[10] = jj_gen;\n            ;\n          }\n                                                                 group=true;\n          break;\n        default:\n          jj_la1[11] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        break;\n      default:\n        jj_la1[12] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n      if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.parseFloat(boost.image);\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n      }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null, operator=null, term=null;\n  FieldQueryNode qLower, qUpper;\n  boolean lowerInclusive, upperInclusive;\n\n  boolean group = false;\n    if (jj_2_2(3)) {\n      fieldToken = jj_consume_token(TERM);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OP_COLON:\n      case OP_EQUAL:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_COLON:\n          jj_consume_token(OP_COLON);\n          break;\n        case OP_EQUAL:\n          jj_consume_token(OP_EQUAL);\n          break;\n        default:\n          jj_la1[5] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        q = Term(field);\n        break;\n      case OP_LESSTHAN:\n      case OP_LESSTHANEQ:\n      case OP_MORETHAN:\n      case OP_MORETHANEQ:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_LESSTHAN:\n          operator = jj_consume_token(OP_LESSTHAN);\n          break;\n        case OP_LESSTHANEQ:\n          operator = jj_consume_token(OP_LESSTHANEQ);\n          break;\n        case OP_MORETHAN:\n          operator = jj_consume_token(OP_MORETHAN);\n          break;\n        case OP_MORETHANEQ:\n          operator = jj_consume_token(OP_MORETHANEQ);\n          break;\n        default:\n          jj_la1[6] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                                                                                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case TERM:\n          term = jj_consume_token(TERM);\n          break;\n        case QUOTED:\n          term = jj_consume_token(QUOTED);\n          break;\n        case NUMBER:\n          term = jj_consume_token(NUMBER);\n          break;\n        default:\n          jj_la1[7] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        if (term.kind == QUOTED) {\n            term.image = term.image.substring(1, term.image.length()-1);\n        }\n        switch (operator.kind) {\n            case OP_LESSTHAN:\n              lowerInclusive = true;\n              upperInclusive = false;\n\n               qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n            qUpper = new FieldQueryNode(field,\n                                 EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n\n                break;\n            case OP_LESSTHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHAN:\n              lowerInclusive = false;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            default:\n                {if (true) throw new Error(\"Unhandled case: operator=\"+operator.toString());}\n        }\n        q = new TermRangeQueryNode(qLower, qUpper, lowerInclusive, upperInclusive);\n        break;\n      default:\n        jj_la1[8] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        if (jj_2_1(2)) {\n          fieldToken = jj_consume_token(TERM);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case OP_COLON:\n            jj_consume_token(OP_COLON);\n            break;\n          case OP_EQUAL:\n            jj_consume_token(OP_EQUAL);\n            break;\n          default:\n            jj_la1[9] = jj_gen;\n            jj_consume_token(-1);\n            throw new ParseException();\n          }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        } else {\n          ;\n        }\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case QUOTED:\n        case TERM:\n        case REGEXPTERM:\n        case RANGEIN_START:\n        case RANGEEX_START:\n        case NUMBER:\n          q = Term(field);\n          break;\n        case LPAREN:\n          jj_consume_token(LPAREN);\n          q = Query(field);\n          jj_consume_token(RPAREN);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case CARAT:\n            jj_consume_token(CARAT);\n            boost = jj_consume_token(NUMBER);\n            break;\n          default:\n            jj_la1[10] = jj_gen;\n            ;\n          }\n                                                                 group=true;\n          break;\n        default:\n          jj_la1[11] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        break;\n      default:\n        jj_la1[12] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n      if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.valueOf(boost.image).floatValue();\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n      }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55e0b3830b94d1abce4e32e98cfc875d5b14e76f","date":1489651910,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","sourceNew":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null, operator=null, term=null;\n  FieldQueryNode qLower, qUpper;\n  boolean lowerInclusive, upperInclusive;\n\n  boolean group = false;\n    if (jj_2_2(3)) {\n      fieldToken = jj_consume_token(TERM);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OP_COLON:\n      case OP_EQUAL:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_COLON:\n          jj_consume_token(OP_COLON);\n          break;\n        case OP_EQUAL:\n          jj_consume_token(OP_EQUAL);\n          break;\n        default:\n          jj_la1[5] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        q = Term(field);\n        break;\n      case OP_LESSTHAN:\n      case OP_LESSTHANEQ:\n      case OP_MORETHAN:\n      case OP_MORETHANEQ:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_LESSTHAN:\n          operator = jj_consume_token(OP_LESSTHAN);\n          break;\n        case OP_LESSTHANEQ:\n          operator = jj_consume_token(OP_LESSTHANEQ);\n          break;\n        case OP_MORETHAN:\n          operator = jj_consume_token(OP_MORETHAN);\n          break;\n        case OP_MORETHANEQ:\n          operator = jj_consume_token(OP_MORETHANEQ);\n          break;\n        default:\n          jj_la1[6] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                                                                                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case TERM:\n          term = jj_consume_token(TERM);\n          break;\n        case QUOTED:\n          term = jj_consume_token(QUOTED);\n          break;\n        case NUMBER:\n          term = jj_consume_token(NUMBER);\n          break;\n        default:\n          jj_la1[7] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        if (term.kind == QUOTED) {\n            term.image = term.image.substring(1, term.image.length()-1);\n        }\n        switch (operator.kind) {\n            case OP_LESSTHAN:\n              lowerInclusive = true;\n              upperInclusive = false;\n\n               qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n            qUpper = new FieldQueryNode(field,\n                                 EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n\n                break;\n            case OP_LESSTHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHAN:\n              lowerInclusive = false;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            default:\n                {if (true) throw new Error(\"Unhandled case: operator=\"+operator.toString());}\n        }\n        q = new TermRangeQueryNode(qLower, qUpper, lowerInclusive, upperInclusive);\n        break;\n      default:\n        jj_la1[8] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        if (jj_2_1(2)) {\n          fieldToken = jj_consume_token(TERM);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case OP_COLON:\n            jj_consume_token(OP_COLON);\n            break;\n          case OP_EQUAL:\n            jj_consume_token(OP_EQUAL);\n            break;\n          default:\n            jj_la1[9] = jj_gen;\n            jj_consume_token(-1);\n            throw new ParseException();\n          }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        } else {\n          ;\n        }\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case QUOTED:\n        case TERM:\n        case REGEXPTERM:\n        case RANGEIN_START:\n        case RANGEEX_START:\n        case NUMBER:\n          q = Term(field);\n          break;\n        case LPAREN:\n          jj_consume_token(LPAREN);\n          q = Query(field);\n          jj_consume_token(RPAREN);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case CARAT:\n            jj_consume_token(CARAT);\n            boost = jj_consume_token(NUMBER);\n            break;\n          default:\n            jj_la1[10] = jj_gen;\n            ;\n          }\n                                                                 group=true;\n          break;\n        default:\n          jj_la1[11] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        break;\n      default:\n        jj_la1[12] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n      if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.parseFloat(boost.image);\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n      }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null, operator=null, term=null;\n  FieldQueryNode qLower, qUpper;\n  boolean lowerInclusive, upperInclusive;\n\n  boolean group = false;\n    if (jj_2_2(3)) {\n      fieldToken = jj_consume_token(TERM);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OP_COLON:\n      case OP_EQUAL:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_COLON:\n          jj_consume_token(OP_COLON);\n          break;\n        case OP_EQUAL:\n          jj_consume_token(OP_EQUAL);\n          break;\n        default:\n          jj_la1[5] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        q = Term(field);\n        break;\n      case OP_LESSTHAN:\n      case OP_LESSTHANEQ:\n      case OP_MORETHAN:\n      case OP_MORETHANEQ:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_LESSTHAN:\n          operator = jj_consume_token(OP_LESSTHAN);\n          break;\n        case OP_LESSTHANEQ:\n          operator = jj_consume_token(OP_LESSTHANEQ);\n          break;\n        case OP_MORETHAN:\n          operator = jj_consume_token(OP_MORETHAN);\n          break;\n        case OP_MORETHANEQ:\n          operator = jj_consume_token(OP_MORETHANEQ);\n          break;\n        default:\n          jj_la1[6] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                                                                                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case TERM:\n          term = jj_consume_token(TERM);\n          break;\n        case QUOTED:\n          term = jj_consume_token(QUOTED);\n          break;\n        case NUMBER:\n          term = jj_consume_token(NUMBER);\n          break;\n        default:\n          jj_la1[7] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        if (term.kind == QUOTED) {\n            term.image = term.image.substring(1, term.image.length()-1);\n        }\n        switch (operator.kind) {\n            case OP_LESSTHAN:\n              lowerInclusive = true;\n              upperInclusive = false;\n\n               qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n            qUpper = new FieldQueryNode(field,\n                                 EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n\n                break;\n            case OP_LESSTHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHAN:\n              lowerInclusive = false;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            default:\n                {if (true) throw new Error(\"Unhandled case: operator=\"+operator.toString());}\n        }\n        q = new TermRangeQueryNode(qLower, qUpper, lowerInclusive, upperInclusive);\n        break;\n      default:\n        jj_la1[8] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        if (jj_2_1(2)) {\n          fieldToken = jj_consume_token(TERM);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case OP_COLON:\n            jj_consume_token(OP_COLON);\n            break;\n          case OP_EQUAL:\n            jj_consume_token(OP_EQUAL);\n            break;\n          default:\n            jj_la1[9] = jj_gen;\n            jj_consume_token(-1);\n            throw new ParseException();\n          }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        } else {\n          ;\n        }\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case QUOTED:\n        case TERM:\n        case REGEXPTERM:\n        case RANGEIN_START:\n        case RANGEEX_START:\n        case NUMBER:\n          q = Term(field);\n          break;\n        case LPAREN:\n          jj_consume_token(LPAREN);\n          q = Query(field);\n          jj_consume_token(RPAREN);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case CARAT:\n            jj_consume_token(CARAT);\n            boost = jj_consume_token(NUMBER);\n            break;\n          default:\n            jj_la1[10] = jj_gen;\n            ;\n          }\n                                                                 group=true;\n          break;\n        default:\n          jj_la1[11] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        break;\n      default:\n        jj_la1[12] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n      if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.valueOf(boost.image).floatValue();\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n      }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","sourceNew":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null, operator=null, term=null;\n  FieldQueryNode qLower, qUpper;\n  boolean lowerInclusive, upperInclusive;\n\n  boolean group = false;\n    if (jj_2_2(3)) {\n      fieldToken = jj_consume_token(TERM);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OP_COLON:\n      case OP_EQUAL:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_COLON:\n          jj_consume_token(OP_COLON);\n          break;\n        case OP_EQUAL:\n          jj_consume_token(OP_EQUAL);\n          break;\n        default:\n          jj_la1[5] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        q = Term(field);\n        break;\n      case OP_LESSTHAN:\n      case OP_LESSTHANEQ:\n      case OP_MORETHAN:\n      case OP_MORETHANEQ:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_LESSTHAN:\n          operator = jj_consume_token(OP_LESSTHAN);\n          break;\n        case OP_LESSTHANEQ:\n          operator = jj_consume_token(OP_LESSTHANEQ);\n          break;\n        case OP_MORETHAN:\n          operator = jj_consume_token(OP_MORETHAN);\n          break;\n        case OP_MORETHANEQ:\n          operator = jj_consume_token(OP_MORETHANEQ);\n          break;\n        default:\n          jj_la1[6] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                                                                                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case TERM:\n          term = jj_consume_token(TERM);\n          break;\n        case QUOTED:\n          term = jj_consume_token(QUOTED);\n          break;\n        case NUMBER:\n          term = jj_consume_token(NUMBER);\n          break;\n        default:\n          jj_la1[7] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        if (term.kind == QUOTED) {\n            term.image = term.image.substring(1, term.image.length()-1);\n        }\n        switch (operator.kind) {\n            case OP_LESSTHAN:\n              lowerInclusive = true;\n              upperInclusive = false;\n\n               qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n            qUpper = new FieldQueryNode(field,\n                                 EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n\n                break;\n            case OP_LESSTHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHAN:\n              lowerInclusive = false;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            default:\n                {if (true) throw new Error(\"Unhandled case: operator=\"+operator.toString());}\n        }\n        q = new TermRangeQueryNode(qLower, qUpper, lowerInclusive, upperInclusive);\n        break;\n      default:\n        jj_la1[8] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        if (jj_2_1(2)) {\n          fieldToken = jj_consume_token(TERM);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case OP_COLON:\n            jj_consume_token(OP_COLON);\n            break;\n          case OP_EQUAL:\n            jj_consume_token(OP_EQUAL);\n            break;\n          default:\n            jj_la1[9] = jj_gen;\n            jj_consume_token(-1);\n            throw new ParseException();\n          }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        } else {\n          ;\n        }\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case QUOTED:\n        case TERM:\n        case REGEXPTERM:\n        case RANGEIN_START:\n        case RANGEEX_START:\n        case NUMBER:\n          q = Term(field);\n          break;\n        case LPAREN:\n          jj_consume_token(LPAREN);\n          q = Query(field);\n          jj_consume_token(RPAREN);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case CARAT:\n            jj_consume_token(CARAT);\n            boost = jj_consume_token(NUMBER);\n            break;\n          default:\n            jj_la1[10] = jj_gen;\n            ;\n          }\n                                                                 group=true;\n          break;\n        default:\n          jj_la1[11] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        break;\n      default:\n        jj_la1[12] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n      if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.parseFloat(boost.image);\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n      }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null, operator=null, term=null;\n  FieldQueryNode qLower, qUpper;\n  boolean lowerInclusive, upperInclusive;\n\n  boolean group = false;\n    if (jj_2_2(3)) {\n      fieldToken = jj_consume_token(TERM);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OP_COLON:\n      case OP_EQUAL:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_COLON:\n          jj_consume_token(OP_COLON);\n          break;\n        case OP_EQUAL:\n          jj_consume_token(OP_EQUAL);\n          break;\n        default:\n          jj_la1[5] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        q = Term(field);\n        break;\n      case OP_LESSTHAN:\n      case OP_LESSTHANEQ:\n      case OP_MORETHAN:\n      case OP_MORETHANEQ:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_LESSTHAN:\n          operator = jj_consume_token(OP_LESSTHAN);\n          break;\n        case OP_LESSTHANEQ:\n          operator = jj_consume_token(OP_LESSTHANEQ);\n          break;\n        case OP_MORETHAN:\n          operator = jj_consume_token(OP_MORETHAN);\n          break;\n        case OP_MORETHANEQ:\n          operator = jj_consume_token(OP_MORETHANEQ);\n          break;\n        default:\n          jj_la1[6] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                                                                                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case TERM:\n          term = jj_consume_token(TERM);\n          break;\n        case QUOTED:\n          term = jj_consume_token(QUOTED);\n          break;\n        case NUMBER:\n          term = jj_consume_token(NUMBER);\n          break;\n        default:\n          jj_la1[7] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        if (term.kind == QUOTED) {\n            term.image = term.image.substring(1, term.image.length()-1);\n        }\n        switch (operator.kind) {\n            case OP_LESSTHAN:\n              lowerInclusive = true;\n              upperInclusive = false;\n\n               qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n            qUpper = new FieldQueryNode(field,\n                                 EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n\n                break;\n            case OP_LESSTHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHAN:\n              lowerInclusive = false;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            default:\n                {if (true) throw new Error(\"Unhandled case: operator=\"+operator.toString());}\n        }\n        q = new TermRangeQueryNode(qLower, qUpper, lowerInclusive, upperInclusive);\n        break;\n      default:\n        jj_la1[8] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        if (jj_2_1(2)) {\n          fieldToken = jj_consume_token(TERM);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case OP_COLON:\n            jj_consume_token(OP_COLON);\n            break;\n          case OP_EQUAL:\n            jj_consume_token(OP_EQUAL);\n            break;\n          default:\n            jj_la1[9] = jj_gen;\n            jj_consume_token(-1);\n            throw new ParseException();\n          }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        } else {\n          ;\n        }\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case QUOTED:\n        case TERM:\n        case REGEXPTERM:\n        case RANGEIN_START:\n        case RANGEEX_START:\n        case NUMBER:\n          q = Term(field);\n          break;\n        case LPAREN:\n          jj_consume_token(LPAREN);\n          q = Query(field);\n          jj_consume_token(RPAREN);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case CARAT:\n            jj_consume_token(CARAT);\n            boost = jj_consume_token(NUMBER);\n            break;\n          default:\n            jj_la1[10] = jj_gen;\n            ;\n          }\n                                                                 group=true;\n          break;\n        default:\n          jj_la1[11] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        break;\n      default:\n        jj_la1[12] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n      if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.valueOf(boost.image).floatValue();\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n      }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4bf8c857cdf9b9be903cae84ef15985ad090a05","date":1600342158,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","sourceNew":"  final public QueryNode Clause(CharSequence field) throws ParseException {QueryNode q;\n  Token fieldToken=null, boost=null, operator=null, term=null;\n  FieldQueryNode qLower, qUpper;\n  boolean lowerInclusive, upperInclusive;\n\n  boolean group = false;\n    if (jj_2_2(3)) {\n      fieldToken = jj_consume_token(TERM);\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case OP_COLON:\n      case OP_EQUAL:{\n        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n        case OP_COLON:{\n          jj_consume_token(OP_COLON);\n          break;\n          }\n        case OP_EQUAL:{\n          jj_consume_token(OP_EQUAL);\n          break;\n          }\n        default:\n          jj_la1[5] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\nfield=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        q = Term(field);\n        break;\n        }\n      case OP_LESSTHAN:\n      case OP_LESSTHANEQ:\n      case OP_MORETHAN:\n      case OP_MORETHANEQ:{\n        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n        case OP_LESSTHAN:{\n          operator = jj_consume_token(OP_LESSTHAN);\n          break;\n          }\n        case OP_LESSTHANEQ:{\n          operator = jj_consume_token(OP_LESSTHANEQ);\n          break;\n          }\n        case OP_MORETHAN:{\n          operator = jj_consume_token(OP_MORETHAN);\n          break;\n          }\n        case OP_MORETHANEQ:{\n          operator = jj_consume_token(OP_MORETHANEQ);\n          break;\n          }\n        default:\n          jj_la1[6] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\nfield=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n        case TERM:{\n          term = jj_consume_token(TERM);\n          break;\n          }\n        case QUOTED:{\n          term = jj_consume_token(QUOTED);\n          break;\n          }\n        case NUMBER:{\n          term = jj_consume_token(NUMBER);\n          break;\n          }\n        default:\n          jj_la1[7] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\nif (term.kind == QUOTED) {\n            term.image = term.image.substring(1, term.image.length()-1);\n        }\n        switch (operator.kind) {\n            case OP_LESSTHAN:\n              lowerInclusive = true;\n              upperInclusive = false;\n\n               qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n            qUpper = new FieldQueryNode(field,\n                                 EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n\n                break;\n            case OP_LESSTHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHAN:\n              lowerInclusive = false;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            default:\n                {if (true) throw new Error(\"Unhandled case: operator=\"+operator.toString());}\n        }\n        q = new TermRangeQueryNode(qLower, qUpper, lowerInclusive, upperInclusive);\n        break;\n        }\n      default:\n        jj_la1[8] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    } else if (jj_2_3(3)) {\n      if (jj_2_1(3)) {\n        fieldToken = jj_consume_token(TERM);\n        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n        case OP_COLON:{\n          jj_consume_token(OP_COLON);\n          break;\n          }\n        case OP_EQUAL:{\n          jj_consume_token(OP_EQUAL);\n          break;\n          }\n        default:\n          jj_la1[9] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\nfield=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n      } else {\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case QUOTED:\n      case TERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:{\n        q = Term(field);\n        break;\n        }\n      case LPAREN:{\n        jj_consume_token(LPAREN);\n        q = Query(field);\n        jj_consume_token(RPAREN);\n        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n        case CARAT:{\n          jj_consume_token(CARAT);\n          boost = jj_consume_token(NUMBER);\n          break;\n          }\n        default:\n          jj_la1[10] = jj_gen;\n          ;\n        }\ngroup=true;\n        break;\n        }\n      default:\n        jj_la1[11] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    } else {\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\nif (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.parseFloat(boost.image);\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n      }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (\"\" != null) return q;}\n    throw new Error(\"Missing return statement in function\");\n}\n\n","sourceOld":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null, operator=null, term=null;\n  FieldQueryNode qLower, qUpper;\n  boolean lowerInclusive, upperInclusive;\n\n  boolean group = false;\n    if (jj_2_2(3)) {\n      fieldToken = jj_consume_token(TERM);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OP_COLON:\n      case OP_EQUAL:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_COLON:\n          jj_consume_token(OP_COLON);\n          break;\n        case OP_EQUAL:\n          jj_consume_token(OP_EQUAL);\n          break;\n        default:\n          jj_la1[5] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        q = Term(field);\n        break;\n      case OP_LESSTHAN:\n      case OP_LESSTHANEQ:\n      case OP_MORETHAN:\n      case OP_MORETHANEQ:\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case OP_LESSTHAN:\n          operator = jj_consume_token(OP_LESSTHAN);\n          break;\n        case OP_LESSTHANEQ:\n          operator = jj_consume_token(OP_LESSTHANEQ);\n          break;\n        case OP_MORETHAN:\n          operator = jj_consume_token(OP_MORETHAN);\n          break;\n        case OP_MORETHANEQ:\n          operator = jj_consume_token(OP_MORETHANEQ);\n          break;\n        default:\n          jj_la1[6] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n                                                                                                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case TERM:\n          term = jj_consume_token(TERM);\n          break;\n        case QUOTED:\n          term = jj_consume_token(QUOTED);\n          break;\n        case NUMBER:\n          term = jj_consume_token(NUMBER);\n          break;\n        default:\n          jj_la1[7] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        if (term.kind == QUOTED) {\n            term.image = term.image.substring(1, term.image.length()-1);\n        }\n        switch (operator.kind) {\n            case OP_LESSTHAN:\n              lowerInclusive = true;\n              upperInclusive = false;\n\n               qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n            qUpper = new FieldQueryNode(field,\n                                 EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n\n                break;\n            case OP_LESSTHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHAN:\n              lowerInclusive = false;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            default:\n                {if (true) throw new Error(\"Unhandled case: operator=\"+operator.toString());}\n        }\n        q = new TermRangeQueryNode(qLower, qUpper, lowerInclusive, upperInclusive);\n        break;\n      default:\n        jj_la1[8] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        if (jj_2_1(2)) {\n          fieldToken = jj_consume_token(TERM);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case OP_COLON:\n            jj_consume_token(OP_COLON);\n            break;\n          case OP_EQUAL:\n            jj_consume_token(OP_EQUAL);\n            break;\n          default:\n            jj_la1[9] = jj_gen;\n            jj_consume_token(-1);\n            throw new ParseException();\n          }\n                                 field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        } else {\n          ;\n        }\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case QUOTED:\n        case TERM:\n        case REGEXPTERM:\n        case RANGEIN_START:\n        case RANGEEX_START:\n        case NUMBER:\n          q = Term(field);\n          break;\n        case LPAREN:\n          jj_consume_token(LPAREN);\n          q = Query(field);\n          jj_consume_token(RPAREN);\n          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n          case CARAT:\n            jj_consume_token(CARAT);\n            boost = jj_consume_token(NUMBER);\n            break;\n          default:\n            jj_la1[10] = jj_gen;\n            ;\n          }\n                                                                 group=true;\n          break;\n        default:\n          jj_la1[11] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        break;\n      default:\n        jj_la1[12] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n      if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.parseFloat(boost.image);\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n      }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9","date":1600414700,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","sourceNew":"  final private QueryNode Clause(CharSequence field) throws ParseException {QueryNode q;\n    if (jj_2_2(2)) {\n      q = FieldRangeExpr(field);\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case LPAREN:\n      case QUOTED:\n      case NUMBER:\n      case TERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:{\n        if (jj_2_1(2)) {\n          field = FieldName();\n          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n          case OP_COLON:{\n            jj_consume_token(OP_COLON);\n            break;\n            }\n          case OP_EQUAL:{\n            jj_consume_token(OP_EQUAL);\n            break;\n            }\n          default:\n            jj_la1[6] = jj_gen;\n            jj_consume_token(-1);\n            throw new ParseException();\n          }\n        } else {\n          ;\n        }\n        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n        case QUOTED:\n        case NUMBER:\n        case TERM:\n        case REGEXPTERM:\n        case RANGEIN_START:\n        case RANGEEX_START:{\n          q = Term(field);\n          break;\n          }\n        case LPAREN:{\n          q = GroupingExpr(field);\n          break;\n          }\n        default:\n          jj_la1[7] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n        break;\n        }\n      default:\n        jj_la1[8] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n{if (\"\" != null) return q;}\n    throw new Error(\"Missing return statement in function\");\n}\n\n","sourceOld":"  final public QueryNode Clause(CharSequence field) throws ParseException {QueryNode q;\n  Token fieldToken=null, boost=null, operator=null, term=null;\n  FieldQueryNode qLower, qUpper;\n  boolean lowerInclusive, upperInclusive;\n\n  boolean group = false;\n    if (jj_2_2(3)) {\n      fieldToken = jj_consume_token(TERM);\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case OP_COLON:\n      case OP_EQUAL:{\n        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n        case OP_COLON:{\n          jj_consume_token(OP_COLON);\n          break;\n          }\n        case OP_EQUAL:{\n          jj_consume_token(OP_EQUAL);\n          break;\n          }\n        default:\n          jj_la1[5] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\nfield=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        q = Term(field);\n        break;\n        }\n      case OP_LESSTHAN:\n      case OP_LESSTHANEQ:\n      case OP_MORETHAN:\n      case OP_MORETHANEQ:{\n        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n        case OP_LESSTHAN:{\n          operator = jj_consume_token(OP_LESSTHAN);\n          break;\n          }\n        case OP_LESSTHANEQ:{\n          operator = jj_consume_token(OP_LESSTHANEQ);\n          break;\n          }\n        case OP_MORETHAN:{\n          operator = jj_consume_token(OP_MORETHAN);\n          break;\n          }\n        case OP_MORETHANEQ:{\n          operator = jj_consume_token(OP_MORETHANEQ);\n          break;\n          }\n        default:\n          jj_la1[6] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\nfield=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n        case TERM:{\n          term = jj_consume_token(TERM);\n          break;\n          }\n        case QUOTED:{\n          term = jj_consume_token(QUOTED);\n          break;\n          }\n        case NUMBER:{\n          term = jj_consume_token(NUMBER);\n          break;\n          }\n        default:\n          jj_la1[7] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\nif (term.kind == QUOTED) {\n            term.image = term.image.substring(1, term.image.length()-1);\n        }\n        switch (operator.kind) {\n            case OP_LESSTHAN:\n              lowerInclusive = true;\n              upperInclusive = false;\n\n               qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n            qUpper = new FieldQueryNode(field,\n                                 EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n\n                break;\n            case OP_LESSTHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHAN:\n              lowerInclusive = false;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            case OP_MORETHANEQ:\n              lowerInclusive = true;\n              upperInclusive = true;\n\n                qLower = new FieldQueryNode(field,\n                                         EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n                qUpper = new FieldQueryNode(field,\n                                         \"*\", term.beginColumn, term.endColumn);\n                break;\n            default:\n                {if (true) throw new Error(\"Unhandled case: operator=\"+operator.toString());}\n        }\n        q = new TermRangeQueryNode(qLower, qUpper, lowerInclusive, upperInclusive);\n        break;\n        }\n      default:\n        jj_la1[8] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    } else if (jj_2_3(3)) {\n      if (jj_2_1(3)) {\n        fieldToken = jj_consume_token(TERM);\n        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n        case OP_COLON:{\n          jj_consume_token(OP_COLON);\n          break;\n          }\n        case OP_EQUAL:{\n          jj_consume_token(OP_EQUAL);\n          break;\n          }\n        default:\n          jj_la1[9] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\nfield=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n      } else {\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case QUOTED:\n      case TERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:{\n        q = Term(field);\n        break;\n        }\n      case LPAREN:{\n        jj_consume_token(LPAREN);\n        q = Query(field);\n        jj_consume_token(RPAREN);\n        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n        case CARAT:{\n          jj_consume_token(CARAT);\n          boost = jj_consume_token(NUMBER);\n          break;\n          }\n        default:\n          jj_la1[10] = jj_gen;\n          ;\n        }\ngroup=true;\n        break;\n        }\n      default:\n        jj_la1[11] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    } else {\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\nif (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.parseFloat(boost.image);\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n      }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (\"\" != null) return q;}\n    throw new Error(\"Missing return statement in function\");\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["383e6510a01a27ea3d860472f33049ed2c766e15"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["383e6510a01a27ea3d860472f33049ed2c766e15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4bf8c857cdf9b9be903cae84ef15985ad090a05":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8"],"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9":["c4bf8c857cdf9b9be903cae84ef15985ad090a05"],"383e6510a01a27ea3d860472f33049ed2c766e15":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"ab68488225b6a6c357dda72ed11dedca9914a192":["383e6510a01a27ea3d860472f33049ed2c766e15","55e0b3830b94d1abce4e32e98cfc875d5b14e76f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["c4bf8c857cdf9b9be903cae84ef15985ad090a05"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["ab68488225b6a6c357dda72ed11dedca9914a192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c4bf8c857cdf9b9be903cae84ef15985ad090a05":["cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9"],"383e6510a01a27ea3d860472f33049ed2c766e15":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","55e0b3830b94d1abce4e32e98cfc875d5b14e76f","ab68488225b6a6c357dda72ed11dedca9914a192"],"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["383e6510a01a27ea3d860472f33049ed2c766e15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab68488225b6a6c357dda72ed11dedca9914a192","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}