{"path":"solr/core/src/java/org/apache/solr/core/RequestHandlers.LazyRequestHandlerWrapper#getWrappedHandler().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers.LazyRequestHandlerWrapper#getWrappedHandler().mjava","pathOld":"solr/src/java/org/apache/solr/core/RequestHandlers.LazyRequestHandlerWrapper#getWrappedHandler().mjava","sourceNew":"    public synchronized SolrRequestHandler getWrappedHandler()\n    {\n      if( _handler == null ) {\n        try {\n          SolrRequestHandler handler = core.createRequestHandler(_className);\n          handler.init( _args );\n\n          if( handler instanceof SolrCoreAware ) {\n            ((SolrCoreAware)handler).inform( core );\n          }\n          _handler = handler;\n        }\n        catch( Exception ex ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"lazy loading error\", ex );\n        }\n      }\n      return _handler;\n    }\n\n","sourceOld":"    public synchronized SolrRequestHandler getWrappedHandler()\n    {\n      if( _handler == null ) {\n        try {\n          SolrRequestHandler handler = core.createRequestHandler(_className);\n          handler.init( _args );\n\n          if( handler instanceof SolrCoreAware ) {\n            ((SolrCoreAware)handler).inform( core );\n          }\n          _handler = handler;\n        }\n        catch( Exception ex ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"lazy loading error\", ex );\n        }\n      }\n      return _handler;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers.LazyRequestHandlerWrapper#getWrappedHandler().mjava","pathOld":"solr/src/java/org/apache/solr/core/RequestHandlers.LazyRequestHandlerWrapper#getWrappedHandler().mjava","sourceNew":"    public synchronized SolrRequestHandler getWrappedHandler()\n    {\n      if( _handler == null ) {\n        try {\n          SolrRequestHandler handler = core.createRequestHandler(_className);\n          handler.init( _args );\n\n          if( handler instanceof SolrCoreAware ) {\n            ((SolrCoreAware)handler).inform( core );\n          }\n          _handler = handler;\n        }\n        catch( Exception ex ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"lazy loading error\", ex );\n        }\n      }\n      return _handler;\n    }\n\n","sourceOld":"    public synchronized SolrRequestHandler getWrappedHandler()\n    {\n      if( _handler == null ) {\n        try {\n          SolrRequestHandler handler = core.createRequestHandler(_className);\n          handler.init( _args );\n\n          if( handler instanceof SolrCoreAware ) {\n            ((SolrCoreAware)handler).inform( core );\n          }\n          _handler = handler;\n        }\n        catch( Exception ex ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"lazy loading error\", ex );\n        }\n      }\n      return _handler;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers.LazyRequestHandlerWrapper#getWrappedHandler().mjava","pathOld":"solr/src/java/org/apache/solr/core/RequestHandlers.LazyRequestHandlerWrapper#getWrappedHandler().mjava","sourceNew":"    public synchronized SolrRequestHandler getWrappedHandler()\n    {\n      if( _handler == null ) {\n        try {\n          SolrRequestHandler handler = core.createRequestHandler(_className);\n          handler.init( _args );\n\n          if( handler instanceof SolrCoreAware ) {\n            ((SolrCoreAware)handler).inform( core );\n          }\n          _handler = handler;\n        }\n        catch( Exception ex ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"lazy loading error\", ex );\n        }\n      }\n      return _handler;\n    }\n\n","sourceOld":"    public synchronized SolrRequestHandler getWrappedHandler()\n    {\n      if( _handler == null ) {\n        try {\n          SolrRequestHandler handler = core.createRequestHandler(_className);\n          handler.init( _args );\n\n          if( handler instanceof SolrCoreAware ) {\n            ((SolrCoreAware)handler).inform( core );\n          }\n          _handler = handler;\n        }\n        catch( Exception ex ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"lazy loading error\", ex );\n        }\n      }\n      return _handler;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9bd61f133870fb7f5098ae91eeda31b729d446","date":1418891132,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers.LazyRequestHandlerWrapper#getWrappedHandler().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestHandlers.LazyRequestHandlerWrapper#getWrappedHandler().mjava","sourceNew":"    public synchronized SolrRequestHandler getWrappedHandler()\n    {\n      if( _handler == null ) {\n        try {\n          SolrRequestHandler handler = core.createRequestHandler(_className);\n\n          if (handler instanceof PluginInfoInitialized) {\n            ((PluginInfoInitialized) handler).init(_pluginInfo);\n          } else {\n            handler.init( _pluginInfo.initArgs );\n          }\n\n\n          if( handler instanceof SolrCoreAware ) {\n            ((SolrCoreAware)handler).inform( core );\n          }\n          _handler = handler;\n        }\n        catch( Exception ex ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"lazy loading error\", ex );\n        }\n      }\n      return _handler;\n    }\n\n","sourceOld":"    public synchronized SolrRequestHandler getWrappedHandler()\n    {\n      if( _handler == null ) {\n        try {\n          SolrRequestHandler handler = core.createRequestHandler(_className);\n          handler.init( _args );\n\n          if( handler instanceof SolrCoreAware ) {\n            ((SolrCoreAware)handler).inform( core );\n          }\n          _handler = handler;\n        }\n        catch( Exception ex ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"lazy loading error\", ex );\n        }\n      }\n      return _handler;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd","date":1419078070,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers.LazyRequestHandlerWrapper#getWrappedHandler().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestHandlers.LazyRequestHandlerWrapper#getWrappedHandler().mjava","sourceNew":"    public synchronized SolrRequestHandler getWrappedHandler()\n    {\n      if( _handler == null ) {\n        try {\n          SolrRequestHandler handler = createRequestHandler();\n          if (handler instanceof PluginInfoInitialized) {\n            ((PluginInfoInitialized) handler).init(_pluginInfo);\n          } else {\n            handler.init( _pluginInfo.initArgs );\n          }\n\n          if (handler instanceof PluginInfoInitialized) {\n            ((PluginInfoInitialized) handler).init(_pluginInfo);\n          } else {\n            handler.init( _pluginInfo.initArgs );\n          }\n\n\n          if( handler instanceof SolrCoreAware ) {\n            ((SolrCoreAware)handler).inform( core );\n          }\n          _handler = handler;\n        }\n        catch( Exception ex ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"lazy loading error\", ex );\n        }\n      }\n      return _handler;\n    }\n\n","sourceOld":"    public synchronized SolrRequestHandler getWrappedHandler()\n    {\n      if( _handler == null ) {\n        try {\n          SolrRequestHandler handler = core.createRequestHandler(_className);\n\n          if (handler instanceof PluginInfoInitialized) {\n            ((PluginInfoInitialized) handler).init(_pluginInfo);\n          } else {\n            handler.init( _pluginInfo.initArgs );\n          }\n\n\n          if( handler instanceof SolrCoreAware ) {\n            ((SolrCoreAware)handler).inform( core );\n          }\n          _handler = handler;\n        }\n        catch( Exception ex ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"lazy loading error\", ex );\n        }\n      }\n      return _handler;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2d72c3e6563e08675f940d4c74139309c5e3db2","date":1419411068,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers.LazyRequestHandlerWrapper#getWrappedHandler().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestHandlers.LazyRequestHandlerWrapper#getWrappedHandler().mjava","sourceNew":"    public synchronized SolrRequestHandler getWrappedHandler()\n    {\n      if( _handler == null ) {\n        try {\n          SolrRequestHandler handler = createRequestHandler();\n          if (handler instanceof PluginInfoInitialized) {\n            ((PluginInfoInitialized) handler).init(_pluginInfo);\n          } else {\n            handler.init( _pluginInfo.initArgs );\n          }\n\n          if (handler instanceof PluginInfoInitialized) {\n            ((PluginInfoInitialized) handler).init(_pluginInfo);\n          } else {\n            handler.init( _pluginInfo.initArgs );\n          }\n\n\n          if( handler instanceof SolrCoreAware ) {\n            ((SolrCoreAware)handler).inform( core );\n          }\n          if (handler instanceof RequestHandlerBase) ((RequestHandlerBase) handler).setPluginInfo(_pluginInfo);\n          _handler = handler;\n        }\n        catch( Exception ex ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"lazy loading error\", ex );\n        }\n      }\n      return _handler;\n    }\n\n","sourceOld":"    public synchronized SolrRequestHandler getWrappedHandler()\n    {\n      if( _handler == null ) {\n        try {\n          SolrRequestHandler handler = createRequestHandler();\n          if (handler instanceof PluginInfoInitialized) {\n            ((PluginInfoInitialized) handler).init(_pluginInfo);\n          } else {\n            handler.init( _pluginInfo.initArgs );\n          }\n\n          if (handler instanceof PluginInfoInitialized) {\n            ((PluginInfoInitialized) handler).init(_pluginInfo);\n          } else {\n            handler.init( _pluginInfo.initArgs );\n          }\n\n\n          if( handler instanceof SolrCoreAware ) {\n            ((SolrCoreAware)handler).inform( core );\n          }\n          _handler = handler;\n        }\n        catch( Exception ex ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"lazy loading error\", ex );\n        }\n      }\n      return _handler;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9793ccb9bd91c55b6b02e491778569200a781488","date":1423662803,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers.LazyRequestHandlerWrapper#getWrappedHandler().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestHandlers.LazyRequestHandlerWrapper#getWrappedHandler().mjava","sourceNew":"    public synchronized SolrRequestHandler getWrappedHandler() {\n      if (_handler == null) {\n        try {\n          SolrRequestHandler handler = createRequestHandler();\n          if (handler instanceof PluginInfoInitialized) {\n            ((PluginInfoInitialized) handler).init(_pluginInfo);\n          } else {\n            handler.init(_pluginInfo.initArgs);\n          }\n\n          if (handler instanceof PluginInfoInitialized) {\n            ((PluginInfoInitialized) handler).init(_pluginInfo);\n          } else {\n            handler.init(_pluginInfo.initArgs);\n          }\n\n\n          if (handler instanceof SolrCoreAware) {\n            ((SolrCoreAware) handler).inform(core);\n          }\n          if (handler instanceof RequestHandlerBase) ((RequestHandlerBase) handler).setPluginInfo(_pluginInfo);\n          _handler = handler;\n        } catch (Exception ex) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"lazy loading error\", ex);\n        }\n      }\n      return _handler;\n    }\n\n","sourceOld":"    public synchronized SolrRequestHandler getWrappedHandler()\n    {\n      if( _handler == null ) {\n        try {\n          SolrRequestHandler handler = createRequestHandler();\n          if (handler instanceof PluginInfoInitialized) {\n            ((PluginInfoInitialized) handler).init(_pluginInfo);\n          } else {\n            handler.init( _pluginInfo.initArgs );\n          }\n\n          if (handler instanceof PluginInfoInitialized) {\n            ((PluginInfoInitialized) handler).init(_pluginInfo);\n          } else {\n            handler.init( _pluginInfo.initArgs );\n          }\n\n\n          if( handler instanceof SolrCoreAware ) {\n            ((SolrCoreAware)handler).inform( core );\n          }\n          if (handler instanceof RequestHandlerBase) ((RequestHandlerBase) handler).setPluginInfo(_pluginInfo);\n          _handler = handler;\n        }\n        catch( Exception ex ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"lazy loading error\", ex );\n        }\n      }\n      return _handler;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/RequestHandlers.LazyRequestHandlerWrapper#getWrappedHandler().mjava","sourceNew":null,"sourceOld":"    public synchronized SolrRequestHandler getWrappedHandler() {\n      if (_handler == null) {\n        try {\n          SolrRequestHandler handler = createRequestHandler();\n          if (handler instanceof PluginInfoInitialized) {\n            ((PluginInfoInitialized) handler).init(_pluginInfo);\n          } else {\n            handler.init(_pluginInfo.initArgs);\n          }\n\n          if (handler instanceof PluginInfoInitialized) {\n            ((PluginInfoInitialized) handler).init(_pluginInfo);\n          } else {\n            handler.init(_pluginInfo.initArgs);\n          }\n\n\n          if (handler instanceof SolrCoreAware) {\n            ((SolrCoreAware) handler).inform(core);\n          }\n          if (handler instanceof RequestHandlerBase) ((RequestHandlerBase) handler).setPluginInfo(_pluginInfo);\n          _handler = handler;\n        } catch (Exception ex) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"lazy loading error\", ex);\n        }\n      }\n      return _handler;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/RequestHandlers.LazyRequestHandlerWrapper#getWrappedHandler().mjava","sourceNew":null,"sourceOld":"    public synchronized SolrRequestHandler getWrappedHandler() {\n      if (_handler == null) {\n        try {\n          SolrRequestHandler handler = createRequestHandler();\n          if (handler instanceof PluginInfoInitialized) {\n            ((PluginInfoInitialized) handler).init(_pluginInfo);\n          } else {\n            handler.init(_pluginInfo.initArgs);\n          }\n\n          if (handler instanceof PluginInfoInitialized) {\n            ((PluginInfoInitialized) handler).init(_pluginInfo);\n          } else {\n            handler.init(_pluginInfo.initArgs);\n          }\n\n\n          if (handler instanceof SolrCoreAware) {\n            ((SolrCoreAware) handler).inform(core);\n          }\n          if (handler instanceof RequestHandlerBase) ((RequestHandlerBase) handler).setPluginInfo(_pluginInfo);\n          _handler = handler;\n        } catch (Exception ex) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"lazy loading error\", ex);\n        }\n      }\n      return _handler;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["9793ccb9bd91c55b6b02e491778569200a781488","9aea0485ecacb6734c17da2d02569816c23a69c1"],"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["fd9bd61f133870fb7f5098ae91eeda31b729d446"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fd9bd61f133870fb7f5098ae91eeda31b729d446":["c26f00b574427b55127e869b935845554afde1fa"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["9793ccb9bd91c55b6b02e491778569200a781488"],"9793ccb9bd91c55b6b02e491778569200a781488":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9aea0485ecacb6734c17da2d02569816c23a69c1"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["fd9bd61f133870fb7f5098ae91eeda31b729d446"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"fd9bd61f133870fb7f5098ae91eeda31b729d446":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"9793ccb9bd91c55b6b02e491778569200a781488":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["9793ccb9bd91c55b6b02e491778569200a781488"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}