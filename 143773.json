{"path":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#disableCountingLines(boolean).mjava","commits":[{"id":"b26918d056f1bcc0ae9accb3bf0cb2b87803fe64","date":1201200417,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#disableCountingLines(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static String[] disableCountingLines (boolean disable) {\n    String dis = disable ? \"-\" : \"\";\n    return new String[] {\n        \"# ----- properties \",\n        \"doc.maker=\"+Reuters20DocMaker.class.getName(),\n        \"doc.add.log.step=30\",\n        \"doc.term.vector=false\",\n        \"doc.maker.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"task.max.depth.log=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  \"+dis+\"CreateIndex\",            // optionally disable counting here\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  \"+dis+\"  CloseIndex\",             // optionally disable counting here (with extra blanks)\n        \"}\",\n        \"RepSumByName\",\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","date":1245355139,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#disableCountingLines(boolean).mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#disableCountingLines(boolean).mjava","sourceNew":"  private static String[] disableCountingLines (boolean disable) {\n    String dis = disable ? \"-\" : \"\";\n    return new String[] {\n        \"# ----- properties \",\n        \"content.source=\"+Reuters20ContentSource.class.getName(),\n        \"content.source.log.step=30\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"task.max.depth.log=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  \"+dis+\"CreateIndex\",            // optionally disable counting here\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  \"+dis+\"  CloseIndex\",             // optionally disable counting here (with extra blanks)\n        \"}\",\n        \"RepSumByName\",\n    };\n  }\n\n","sourceOld":"  private static String[] disableCountingLines (boolean disable) {\n    String dis = disable ? \"-\" : \"\";\n    return new String[] {\n        \"# ----- properties \",\n        \"doc.maker=\"+Reuters20DocMaker.class.getName(),\n        \"doc.add.log.step=30\",\n        \"doc.term.vector=false\",\n        \"doc.maker.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"task.max.depth.log=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  \"+dis+\"CreateIndex\",            // optionally disable counting here\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  \"+dis+\"  CloseIndex\",             // optionally disable counting here (with extra blanks)\n        \"}\",\n        \"RepSumByName\",\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90cb6b3f4e5652555b614adc90204287fbebd27c","date":1259494272,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#disableCountingLines(boolean).mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#disableCountingLines(boolean).mjava","sourceNew":"  private static String[] disableCountingLines (boolean disable) {\n    String dis = disable ? \"-\" : \"\";\n    return new String[] {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=30\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"task.max.depth.log=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  \"+dis+\"CreateIndex\",            // optionally disable counting here\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  \"+dis+\"  CloseIndex\",             // optionally disable counting here (with extra blanks)\n        \"}\",\n        \"RepSumByName\",\n    };\n  }\n\n","sourceOld":"  private static String[] disableCountingLines (boolean disable) {\n    String dis = disable ? \"-\" : \"\";\n    return new String[] {\n        \"# ----- properties \",\n        \"content.source=\"+Reuters20ContentSource.class.getName(),\n        \"content.source.log.step=30\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"task.max.depth.log=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  \"+dis+\"CreateIndex\",            // optionally disable counting here\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  \"+dis+\"  CloseIndex\",             // optionally disable counting here (with extra blanks)\n        \"}\",\n        \"RepSumByName\",\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#disableCountingLines(boolean).mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#disableCountingLines(boolean).mjava","sourceNew":"  private static String[] disableCountingLines (boolean disable) {\n    String dis = disable ? \"-\" : \"\";\n    return new String[] {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=30\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"task.max.depth.log=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  \"+dis+\"CreateIndex\",            // optionally disable counting here\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  \"+dis+\"  CloseIndex\",             // optionally disable counting here (with extra blanks)\n        \"}\",\n        \"RepSumByName\",\n    };\n  }\n\n","sourceOld":"  private static String[] disableCountingLines (boolean disable) {\n    String dis = disable ? \"-\" : \"\";\n    return new String[] {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=30\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"task.max.depth.log=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  \"+dis+\"CreateIndex\",            // optionally disable counting here\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  \"+dis+\"  CloseIndex\",             // optionally disable counting here (with extra blanks)\n        \"}\",\n        \"RepSumByName\",\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90cb6b3f4e5652555b614adc90204287fbebd27c":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["b26918d056f1bcc0ae9accb3bf0cb2b87803fe64"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b26918d056f1bcc0ae9accb3bf0cb2b87803fe64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90cb6b3f4e5652555b614adc90204287fbebd27c"]},"commit2Childs":{"90cb6b3f4e5652555b614adc90204287fbebd27c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b26918d056f1bcc0ae9accb3bf0cb2b87803fe64"],"b26918d056f1bcc0ae9accb3bf0cb2b87803fe64":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}