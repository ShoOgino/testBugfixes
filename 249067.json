{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testOscillate().mjava","commits":[{"id":"96eb896f0c32b05e3f5a80e6f9a0ceede9269e7b","date":1538583935,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testOscillate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOscillate() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=oscillate(10, .3, 2.9),\" +\n        \"               b=describe(a),\" +\n        \"               c=getValue(b, min),\" +\n        \"               d=getValue(b, max),\" +\n        \"               e=harmfit(a),\" +\n        \"               f=getAmplitude(e),\" +\n        \"               g=getAngularFrequency(e),\" +\n        \"               h=getPhase(e))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> wave = (List<Number>)tuples.get(0).get(\"a\");\n    assertEquals(wave.size(), 128);\n    Map desc = (Map)tuples.get(0).get(\"b\");\n    Number min = (Number)tuples.get(0).get(\"c\");\n    Number max = (Number)tuples.get(0).get(\"d\");\n    assertEquals(min.doubleValue(), -9.9, .1);\n    assertEquals(max.doubleValue(), 9.9, .1);\n\n    List<Number> wave1 = (List<Number>)tuples.get(0).get(\"e\");\n    assertEquals(wave1.size(), 128);\n\n    Number amp = (Number)tuples.get(0).get(\"f\");\n    Number freq = (Number)tuples.get(0).get(\"g\");\n    Number pha = (Number)tuples.get(0).get(\"h\");\n\n    assertEquals(amp.doubleValue(), 10, .1);\n    assertEquals(freq.doubleValue(), .3, .1);\n    assertEquals(pha.doubleValue(), 2.9, .1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd9e2fa8ad30b74135a08f2ffa79e635b8255be3","date":1548008374,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testOscillate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testOscillate().mjava","sourceNew":"  @Test\n  public void testOscillate() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=oscillate(10, .3, 2.9),\" +\n        \"               b=describe(a),\" +\n        \"               c=getValue(b, min),\" +\n        \"               d=getValue(b, max),\" +\n        \"               e=harmfit(a),\" +\n        \"               f=getAmplitude(e),\" +\n        \"               g=getAngularFrequency(e),\" +\n        \"               h=getPhase(e),\" +\n        \"               i=derivative(a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> wave = (List<Number>)tuples.get(0).get(\"a\");\n    assertEquals(wave.size(), 128);\n    Map desc = (Map)tuples.get(0).get(\"b\");\n    Number min = (Number)tuples.get(0).get(\"c\");\n    Number max = (Number)tuples.get(0).get(\"d\");\n    assertEquals(min.doubleValue(), -9.9, .1);\n    assertEquals(max.doubleValue(), 9.9, .1);\n\n    List<Number> wave1 = (List<Number>)tuples.get(0).get(\"e\");\n    assertEquals(wave1.size(), 128);\n\n    Number amp = (Number)tuples.get(0).get(\"f\");\n    Number freq = (Number)tuples.get(0).get(\"g\");\n    Number pha = (Number)tuples.get(0).get(\"h\");\n\n    assertEquals(amp.doubleValue(), 10, .1);\n    assertEquals(freq.doubleValue(), .3, .1);\n    assertEquals(pha.doubleValue(), 2.9, .1);\n\n    List<Number> der = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(der.size(), 128);\n    assertEquals(der.get(0).doubleValue(), -0.7177479876419472, 0);\n    assertEquals(der.get(127).doubleValue(), 0.47586800641412696, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testOscillate() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=oscillate(10, .3, 2.9),\" +\n        \"               b=describe(a),\" +\n        \"               c=getValue(b, min),\" +\n        \"               d=getValue(b, max),\" +\n        \"               e=harmfit(a),\" +\n        \"               f=getAmplitude(e),\" +\n        \"               g=getAngularFrequency(e),\" +\n        \"               h=getPhase(e))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> wave = (List<Number>)tuples.get(0).get(\"a\");\n    assertEquals(wave.size(), 128);\n    Map desc = (Map)tuples.get(0).get(\"b\");\n    Number min = (Number)tuples.get(0).get(\"c\");\n    Number max = (Number)tuples.get(0).get(\"d\");\n    assertEquals(min.doubleValue(), -9.9, .1);\n    assertEquals(max.doubleValue(), 9.9, .1);\n\n    List<Number> wave1 = (List<Number>)tuples.get(0).get(\"e\");\n    assertEquals(wave1.size(), 128);\n\n    Number amp = (Number)tuples.get(0).get(\"f\");\n    Number freq = (Number)tuples.get(0).get(\"g\");\n    Number pha = (Number)tuples.get(0).get(\"h\");\n\n    assertEquals(amp.doubleValue(), 10, .1);\n    assertEquals(freq.doubleValue(), .3, .1);\n    assertEquals(pha.doubleValue(), 2.9, .1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":3,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testOscillate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testOscillate().mjava","sourceNew":"  @Test\n  public void testOscillate() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=oscillate(10, .3, 2.9),\" +\n        \"               b=describe(a),\" +\n        \"               c=getValue(b, min),\" +\n        \"               d=getValue(b, max),\" +\n        \"               e=harmfit(a),\" +\n        \"               f=getAmplitude(e),\" +\n        \"               g=getAngularFrequency(e),\" +\n        \"               h=getPhase(e),\" +\n        \"               i=derivative(a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> wave = (List<Number>)tuples.get(0).get(\"a\");\n    assertEquals(wave.size(), 128);\n    Map desc = (Map)tuples.get(0).get(\"b\");\n    Number min = (Number)tuples.get(0).get(\"c\");\n    Number max = (Number)tuples.get(0).get(\"d\");\n    assertEquals(min.doubleValue(), -9.9, .1);\n    assertEquals(max.doubleValue(), 9.9, .1);\n\n    List<Number> wave1 = (List<Number>)tuples.get(0).get(\"e\");\n    assertEquals(wave1.size(), 128);\n\n    Number amp = (Number)tuples.get(0).get(\"f\");\n    Number freq = (Number)tuples.get(0).get(\"g\");\n    Number pha = (Number)tuples.get(0).get(\"h\");\n\n    assertEquals(amp.doubleValue(), 10, .1);\n    assertEquals(freq.doubleValue(), .3, .1);\n    assertEquals(pha.doubleValue(), 2.9, .1);\n\n    List<Number> der = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(der.size(), 128);\n    assertEquals(der.get(0).doubleValue(), -0.7177479876419472, 0);\n    assertEquals(der.get(127).doubleValue(), 0.47586800641412696, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testOscillate() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=oscillate(10, .3, 2.9),\" +\n        \"               b=describe(a),\" +\n        \"               c=getValue(b, min),\" +\n        \"               d=getValue(b, max),\" +\n        \"               e=harmfit(a),\" +\n        \"               f=getAmplitude(e),\" +\n        \"               g=getAngularFrequency(e),\" +\n        \"               h=getPhase(e))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> wave = (List<Number>)tuples.get(0).get(\"a\");\n    assertEquals(wave.size(), 128);\n    Map desc = (Map)tuples.get(0).get(\"b\");\n    Number min = (Number)tuples.get(0).get(\"c\");\n    Number max = (Number)tuples.get(0).get(\"d\");\n    assertEquals(min.doubleValue(), -9.9, .1);\n    assertEquals(max.doubleValue(), 9.9, .1);\n\n    List<Number> wave1 = (List<Number>)tuples.get(0).get(\"e\");\n    assertEquals(wave1.size(), 128);\n\n    Number amp = (Number)tuples.get(0).get(\"f\");\n    Number freq = (Number)tuples.get(0).get(\"g\");\n    Number pha = (Number)tuples.get(0).get(\"h\");\n\n    assertEquals(amp.doubleValue(), 10, .1);\n    assertEquals(freq.doubleValue(), .3, .1);\n    assertEquals(pha.doubleValue(), 2.9, .1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35cc45f54fe95a5534e02f9b8ca2a54af211ded5","date":1564774706,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testOscillate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testOscillate().mjava","sourceNew":"  @Test\n  public void testOscillate() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=oscillate(10, .3, 2.9),\" +\n        \"               b=describe(a),\" +\n        \"               c=getValue(b, \\\"min\\\"),\" +\n        \"               d=getValue(b, \\\"max\\\"),\" +\n        \"               e=harmfit(a),\" +\n        \"               f=getAmplitude(e),\" +\n        \"               g=getAngularFrequency(e),\" +\n        \"               h=getPhase(e),\" +\n        \"               i=derivative(a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> wave = (List<Number>)tuples.get(0).get(\"a\");\n    assertEquals(wave.size(), 128);\n    Map desc = (Map)tuples.get(0).get(\"b\");\n    Number min = (Number)tuples.get(0).get(\"c\");\n    Number max = (Number)tuples.get(0).get(\"d\");\n    assertEquals(min.doubleValue(), -9.9, .1);\n    assertEquals(max.doubleValue(), 9.9, .1);\n\n    List<Number> wave1 = (List<Number>)tuples.get(0).get(\"e\");\n    assertEquals(wave1.size(), 128);\n\n    Number amp = (Number)tuples.get(0).get(\"f\");\n    Number freq = (Number)tuples.get(0).get(\"g\");\n    Number pha = (Number)tuples.get(0).get(\"h\");\n\n    assertEquals(amp.doubleValue(), 10, .1);\n    assertEquals(freq.doubleValue(), .3, .1);\n    assertEquals(pha.doubleValue(), 2.9, .1);\n\n    List<Number> der = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(der.size(), 128);\n    assertEquals(der.get(0).doubleValue(), -0.7177479876419472, 0);\n    assertEquals(der.get(127).doubleValue(), 0.47586800641412696, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testOscillate() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=oscillate(10, .3, 2.9),\" +\n        \"               b=describe(a),\" +\n        \"               c=getValue(b, min),\" +\n        \"               d=getValue(b, max),\" +\n        \"               e=harmfit(a),\" +\n        \"               f=getAmplitude(e),\" +\n        \"               g=getAngularFrequency(e),\" +\n        \"               h=getPhase(e),\" +\n        \"               i=derivative(a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> wave = (List<Number>)tuples.get(0).get(\"a\");\n    assertEquals(wave.size(), 128);\n    Map desc = (Map)tuples.get(0).get(\"b\");\n    Number min = (Number)tuples.get(0).get(\"c\");\n    Number max = (Number)tuples.get(0).get(\"d\");\n    assertEquals(min.doubleValue(), -9.9, .1);\n    assertEquals(max.doubleValue(), 9.9, .1);\n\n    List<Number> wave1 = (List<Number>)tuples.get(0).get(\"e\");\n    assertEquals(wave1.size(), 128);\n\n    Number amp = (Number)tuples.get(0).get(\"f\");\n    Number freq = (Number)tuples.get(0).get(\"g\");\n    Number pha = (Number)tuples.get(0).get(\"h\");\n\n    assertEquals(amp.doubleValue(), 10, .1);\n    assertEquals(freq.doubleValue(), .3, .1);\n    assertEquals(pha.doubleValue(), 2.9, .1);\n\n    List<Number> der = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(der.size(), 128);\n    assertEquals(der.get(0).doubleValue(), -0.7177479876419472, 0);\n    assertEquals(der.get(127).doubleValue(), 0.47586800641412696, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testOscillate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testOscillate().mjava","sourceNew":"  @Test\n  public void testOscillate() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=oscillate(10, .3, 2.9),\" +\n        \"               b=describe(a),\" +\n        \"               c=getValue(b, \\\"min\\\"),\" +\n        \"               d=getValue(b, \\\"max\\\"),\" +\n        \"               e=harmfit(a),\" +\n        \"               f=getAmplitude(e),\" +\n        \"               g=getAngularFrequency(e),\" +\n        \"               h=getPhase(e),\" +\n        \"               i=derivative(a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> wave = (List<Number>)tuples.get(0).get(\"a\");\n    assertEquals(wave.size(), 128);\n    Map desc = (Map)tuples.get(0).get(\"b\");\n    Number min = (Number)tuples.get(0).get(\"c\");\n    Number max = (Number)tuples.get(0).get(\"d\");\n    assertEquals(min.doubleValue(), -9.9, .1);\n    assertEquals(max.doubleValue(), 9.9, .1);\n\n    List<Number> wave1 = (List<Number>)tuples.get(0).get(\"e\");\n    assertEquals(wave1.size(), 128);\n\n    Number amp = (Number)tuples.get(0).get(\"f\");\n    Number freq = (Number)tuples.get(0).get(\"g\");\n    Number pha = (Number)tuples.get(0).get(\"h\");\n\n    assertEquals(amp.doubleValue(), 10, .1);\n    assertEquals(freq.doubleValue(), .3, .1);\n    assertEquals(pha.doubleValue(), 2.9, .1);\n\n    List<Number> der = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(der.size(), 128);\n    assertEquals(der.get(0).doubleValue(), -0.7177479876419472, 0);\n    assertEquals(der.get(127).doubleValue(), 0.47586800641412696, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testOscillate() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=oscillate(10, .3, 2.9),\" +\n        \"               b=describe(a),\" +\n        \"               c=getValue(b, min),\" +\n        \"               d=getValue(b, max),\" +\n        \"               e=harmfit(a),\" +\n        \"               f=getAmplitude(e),\" +\n        \"               g=getAngularFrequency(e),\" +\n        \"               h=getPhase(e),\" +\n        \"               i=derivative(a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> wave = (List<Number>)tuples.get(0).get(\"a\");\n    assertEquals(wave.size(), 128);\n    Map desc = (Map)tuples.get(0).get(\"b\");\n    Number min = (Number)tuples.get(0).get(\"c\");\n    Number max = (Number)tuples.get(0).get(\"d\");\n    assertEquals(min.doubleValue(), -9.9, .1);\n    assertEquals(max.doubleValue(), 9.9, .1);\n\n    List<Number> wave1 = (List<Number>)tuples.get(0).get(\"e\");\n    assertEquals(wave1.size(), 128);\n\n    Number amp = (Number)tuples.get(0).get(\"f\");\n    Number freq = (Number)tuples.get(0).get(\"g\");\n    Number pha = (Number)tuples.get(0).get(\"h\");\n\n    assertEquals(amp.doubleValue(), 10, .1);\n    assertEquals(freq.doubleValue(), .3, .1);\n    assertEquals(pha.doubleValue(), 2.9, .1);\n\n    List<Number> der = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(der.size(), 128);\n    assertEquals(der.get(0).doubleValue(), -0.7177479876419472, 0);\n    assertEquals(der.get(127).doubleValue(), 0.47586800641412696, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testOscillate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testOscillate().mjava","sourceNew":"  @Test\n  public void testOscillate() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=oscillate(10, .3, 2.9),\" +\n        \"               b=describe(a),\" +\n        \"               c=getValue(b, \\\"min\\\"),\" +\n        \"               d=getValue(b, \\\"max\\\"),\" +\n        \"               e=harmfit(a),\" +\n        \"               f=getAmplitude(e),\" +\n        \"               g=getAngularFrequency(e),\" +\n        \"               h=getPhase(e),\" +\n        \"               i=derivative(a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> wave = (List<Number>)tuples.get(0).get(\"a\");\n    assertEquals(wave.size(), 128);\n    Map desc = (Map)tuples.get(0).get(\"b\");\n    Number min = (Number)tuples.get(0).get(\"c\");\n    Number max = (Number)tuples.get(0).get(\"d\");\n    assertEquals(min.doubleValue(), -9.9, .1);\n    assertEquals(max.doubleValue(), 9.9, .1);\n\n    List<Number> wave1 = (List<Number>)tuples.get(0).get(\"e\");\n    assertEquals(wave1.size(), 128);\n\n    Number amp = (Number)tuples.get(0).get(\"f\");\n    Number freq = (Number)tuples.get(0).get(\"g\");\n    Number pha = (Number)tuples.get(0).get(\"h\");\n\n    assertEquals(amp.doubleValue(), 10, .1);\n    assertEquals(freq.doubleValue(), .3, .1);\n    assertEquals(pha.doubleValue(), 2.9, .1);\n\n    List<Number> der = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(der.size(), 128);\n    assertEquals(der.get(0).doubleValue(), -0.7177479876419472, 0);\n    assertEquals(der.get(127).doubleValue(), 0.47586800641412696, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testOscillate() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=oscillate(10, .3, 2.9),\" +\n        \"               b=describe(a),\" +\n        \"               c=getValue(b, min),\" +\n        \"               d=getValue(b, max),\" +\n        \"               e=harmfit(a),\" +\n        \"               f=getAmplitude(e),\" +\n        \"               g=getAngularFrequency(e),\" +\n        \"               h=getPhase(e),\" +\n        \"               i=derivative(a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> wave = (List<Number>)tuples.get(0).get(\"a\");\n    assertEquals(wave.size(), 128);\n    Map desc = (Map)tuples.get(0).get(\"b\");\n    Number min = (Number)tuples.get(0).get(\"c\");\n    Number max = (Number)tuples.get(0).get(\"d\");\n    assertEquals(min.doubleValue(), -9.9, .1);\n    assertEquals(max.doubleValue(), 9.9, .1);\n\n    List<Number> wave1 = (List<Number>)tuples.get(0).get(\"e\");\n    assertEquals(wave1.size(), 128);\n\n    Number amp = (Number)tuples.get(0).get(\"f\");\n    Number freq = (Number)tuples.get(0).get(\"g\");\n    Number pha = (Number)tuples.get(0).get(\"h\");\n\n    assertEquals(amp.doubleValue(), 10, .1);\n    assertEquals(freq.doubleValue(), .3, .1);\n    assertEquals(pha.doubleValue(), 2.9, .1);\n\n    List<Number> der = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(der.size(), 128);\n    assertEquals(der.get(0).doubleValue(), -0.7177479876419472, 0);\n    assertEquals(der.get(127).doubleValue(), 0.47586800641412696, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testOscillate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testOscillate().mjava","sourceNew":"  @Test\n  public void testOscillate() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=oscillate(10, .3, 2.9),\" +\n        \"               b=describe(a),\" +\n        \"               c=getValue(b, \\\"min\\\"),\" +\n        \"               d=getValue(b, \\\"max\\\"),\" +\n        \"               e=harmfit(a),\" +\n        \"               f=getAmplitude(e),\" +\n        \"               g=getAngularFrequency(e),\" +\n        \"               h=getPhase(e),\" +\n        \"               i=derivative(a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> wave = (List<Number>)tuples.get(0).get(\"a\");\n    assertEquals(wave.size(), 128);\n    Number min = (Number)tuples.get(0).get(\"c\");\n    Number max = (Number)tuples.get(0).get(\"d\");\n    assertEquals(min.doubleValue(), -9.9, .1);\n    assertEquals(max.doubleValue(), 9.9, .1);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> wave1 = (List<Number>)tuples.get(0).get(\"e\");\n    assertEquals(wave1.size(), 128);\n\n    Number amp = (Number)tuples.get(0).get(\"f\");\n    Number freq = (Number)tuples.get(0).get(\"g\");\n    Number pha = (Number)tuples.get(0).get(\"h\");\n\n    assertEquals(amp.doubleValue(), 10, .1);\n    assertEquals(freq.doubleValue(), .3, .1);\n    assertEquals(pha.doubleValue(), 2.9, .1);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> der = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(der.size(), 128);\n    assertEquals(der.get(0).doubleValue(), -0.7177479876419472, 0);\n    assertEquals(der.get(127).doubleValue(), 0.47586800641412696, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testOscillate() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=oscillate(10, .3, 2.9),\" +\n        \"               b=describe(a),\" +\n        \"               c=getValue(b, \\\"min\\\"),\" +\n        \"               d=getValue(b, \\\"max\\\"),\" +\n        \"               e=harmfit(a),\" +\n        \"               f=getAmplitude(e),\" +\n        \"               g=getAngularFrequency(e),\" +\n        \"               h=getPhase(e),\" +\n        \"               i=derivative(a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> wave = (List<Number>)tuples.get(0).get(\"a\");\n    assertEquals(wave.size(), 128);\n    Map desc = (Map)tuples.get(0).get(\"b\");\n    Number min = (Number)tuples.get(0).get(\"c\");\n    Number max = (Number)tuples.get(0).get(\"d\");\n    assertEquals(min.doubleValue(), -9.9, .1);\n    assertEquals(max.doubleValue(), 9.9, .1);\n\n    List<Number> wave1 = (List<Number>)tuples.get(0).get(\"e\");\n    assertEquals(wave1.size(), 128);\n\n    Number amp = (Number)tuples.get(0).get(\"f\");\n    Number freq = (Number)tuples.get(0).get(\"g\");\n    Number pha = (Number)tuples.get(0).get(\"h\");\n\n    assertEquals(amp.doubleValue(), 10, .1);\n    assertEquals(freq.doubleValue(), .3, .1);\n    assertEquals(pha.doubleValue(), 2.9, .1);\n\n    List<Number> der = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(der.size(), 128);\n    assertEquals(der.get(0).doubleValue(), -0.7177479876419472, 0);\n    assertEquals(der.get(127).doubleValue(), 0.47586800641412696, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"96eb896f0c32b05e3f5a80e6f9a0ceede9269e7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd9e2fa8ad30b74135a08f2ffa79e635b8255be3":["96eb896f0c32b05e3f5a80e6f9a0ceede9269e7b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["dd9e2fa8ad30b74135a08f2ffa79e635b8255be3","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["dd9e2fa8ad30b74135a08f2ffa79e635b8255be3"],"f8061ddd97f3352007d927dae445884a6f3d857b":["dd9e2fa8ad30b74135a08f2ffa79e635b8255be3","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["96eb896f0c32b05e3f5a80e6f9a0ceede9269e7b","dd9e2fa8ad30b74135a08f2ffa79e635b8255be3"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"96eb896f0c32b05e3f5a80e6f9a0ceede9269e7b":["dd9e2fa8ad30b74135a08f2ffa79e635b8255be3","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96eb896f0c32b05e3f5a80e6f9a0ceede9269e7b"],"dd9e2fa8ad30b74135a08f2ffa79e635b8255be3":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","35cc45f54fe95a5534e02f9b8ca2a54af211ded5","f8061ddd97f3352007d927dae445884a6f3d857b","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["9ba1b632c041956c93c41aa1143d16a567014891","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}