{"path":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testSingleNonMergeableSegment().mjava","commits":[{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testSingleNonMergeableSegment().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedOptimize#testSingleOptimizedSegment().mjava","sourceNew":"  public void testSingleNonMergeableSegment() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 3);\n    \n    writer.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.forceMerge(1);\n    writer.close();\n    \n    // Verify that the last segment does not have deletions.\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(1, sis.size());\n  }\n\n","sourceOld":"  public void testSingleOptimizedSegment() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 3);\n    \n    writer.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.optimize();\n    writer.close();\n    \n    // Verify that the last segment does not have deletions.\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(1, sis.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffd087e522c5de518e7a8f279af3ad6d77020d6f","date":1323350372,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testSingleNonMergeableSegment().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testSingleNonMergeableSegment().mjava","sourceNew":"  public void testSingleNonMergeableSegment() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 3, true);\n    \n    writer.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.forceMerge(1);\n    writer.close();\n    \n    // Verify that the last segment does not have deletions.\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(1, sis.size());\n  }\n\n","sourceOld":"  public void testSingleNonMergeableSegment() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 3);\n    \n    writer.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.forceMerge(1);\n    writer.close();\n    \n    // Verify that the last segment does not have deletions.\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(1, sis.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testSingleNonMergeableSegment().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testSingleNonMergeableSegment().mjava","sourceNew":"  public void testSingleNonMergeableSegment() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 3, true);\n    \n    writer.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.forceMerge(1);\n    writer.close();\n    \n    // Verify that the last segment does not have deletions.\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(1, sis.size());\n  }\n\n","sourceOld":"  public void testSingleNonMergeableSegment() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 3);\n    \n    writer.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.forceMerge(1);\n    writer.close();\n    \n    // Verify that the last segment does not have deletions.\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(1, sis.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testSingleNonMergeableSegment().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testSingleNonMergeableSegment().mjava","sourceNew":"  public void testSingleNonMergeableSegment() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 3, true);\n    \n    writer.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.forceMerge(1);\n    writer.close();\n    \n    // Verify that the last segment does not have deletions.\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(1, sis.size());\n  }\n\n","sourceOld":"  public void testSingleNonMergeableSegment() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 3);\n    \n    writer.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.forceMerge(1);\n    writer.close();\n    \n    // Verify that the last segment does not have deletions.\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(1, sis.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testSingleNonMergeableSegment().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testSingleNonMergeableSegment().mjava","sourceNew":"  public void testSingleNonMergeableSegment() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 3, true);\n    \n    writer.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.forceMerge(1);\n    writer.close();\n    \n    // Verify that the last segment does not have deletions.\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(1, sis.size());\n  }\n\n","sourceOld":"  public void testSingleNonMergeableSegment() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 3, true);\n    \n    writer.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.forceMerge(1);\n    writer.close();\n    \n    // Verify that the last segment does not have deletions.\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(1, sis.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ffd087e522c5de518e7a8f279af3ad6d77020d6f":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","ffd087e522c5de518e7a8f279af3ad6d77020d6f"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ffd087e522c5de518e7a8f279af3ad6d77020d6f":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ffd087e522c5de518e7a8f279af3ad6d77020d6f","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}