{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#QueryAutoStopWordAnalyzer(Version,Analyzer,IndexReader,int).mjava","commits":[{"id":"193a8346fc41165af561d084bb5f40a62125a878","date":1315971230,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#QueryAutoStopWordAnalyzer(Version,Analyzer,IndexReader,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new QueryAutoStopWordAnalyzer with stopwords calculated for all\n   * indexed fields from terms with a document frequency greater than the given\n   * maxDocFreq\n   *\n   * @param matchVersion Version to be used in {@link StopFilter}\n   * @param delegate Analyzer whose TokenStream will be filtered\n   * @param indexReader IndexReader to identify the stopwords from\n   * @param maxDocFreq Document frequency terms should be above in order to be stopwords\n   * @throws IOException Can be thrown while reading from the IndexReader\n   */\n  public QueryAutoStopWordAnalyzer(\n      Version matchVersion,\n      Analyzer delegate,\n      IndexReader indexReader,\n      int maxDocFreq) throws IOException {\n    this(matchVersion, delegate, indexReader, indexReader.getFieldNames(IndexReader.FieldOption.INDEXED), maxDocFreq);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#QueryAutoStopWordAnalyzer(Version,Analyzer,IndexReader,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#QueryAutoStopWordAnalyzer(Version,Analyzer,IndexReader,int).mjava","sourceNew":"  /**\n   * Creates a new QueryAutoStopWordAnalyzer with stopwords calculated for all\n   * indexed fields from terms with a document frequency greater than the given\n   * maxDocFreq\n   *\n   * @param matchVersion Version to be used in {@link StopFilter}\n   * @param delegate Analyzer whose TokenStream will be filtered\n   * @param indexReader IndexReader to identify the stopwords from\n   * @param maxDocFreq Document frequency terms should be above in order to be stopwords\n   * @throws IOException Can be thrown while reading from the IndexReader\n   */\n  public QueryAutoStopWordAnalyzer(\n      Version matchVersion,\n      Analyzer delegate,\n      IndexReader indexReader,\n      int maxDocFreq) throws IOException {\n    this(matchVersion, delegate, indexReader, ReaderUtil.getIndexedFields(indexReader), maxDocFreq);\n  }\n\n","sourceOld":"  /**\n   * Creates a new QueryAutoStopWordAnalyzer with stopwords calculated for all\n   * indexed fields from terms with a document frequency greater than the given\n   * maxDocFreq\n   *\n   * @param matchVersion Version to be used in {@link StopFilter}\n   * @param delegate Analyzer whose TokenStream will be filtered\n   * @param indexReader IndexReader to identify the stopwords from\n   * @param maxDocFreq Document frequency terms should be above in order to be stopwords\n   * @throws IOException Can be thrown while reading from the IndexReader\n   */\n  public QueryAutoStopWordAnalyzer(\n      Version matchVersion,\n      Analyzer delegate,\n      IndexReader indexReader,\n      int maxDocFreq) throws IOException {\n    this(matchVersion, delegate, indexReader, indexReader.getFieldNames(IndexReader.FieldOption.INDEXED), maxDocFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15a85fc0e6a026bb5e2b8039536da659064bd50f","date":1327850164,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#QueryAutoStopWordAnalyzer(Version,Analyzer,IndexReader,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#QueryAutoStopWordAnalyzer(Version,Analyzer,IndexReader,int).mjava","sourceNew":"  /**\n   * Creates a new QueryAutoStopWordAnalyzer with stopwords calculated for all\n   * indexed fields from terms with a document frequency greater than the given\n   * maxDocFreq\n   *\n   * @param matchVersion Version to be used in {@link StopFilter}\n   * @param delegate Analyzer whose TokenStream will be filtered\n   * @param indexReader IndexReader to identify the stopwords from\n   * @param maxDocFreq Document frequency terms should be above in order to be stopwords\n   * @throws IOException Can be thrown while reading from the IndexReader\n   */\n  public QueryAutoStopWordAnalyzer(\n      Version matchVersion,\n      Analyzer delegate,\n      IndexReader indexReader,\n      int maxDocFreq) throws IOException {\n    this(matchVersion, delegate, indexReader, MultiFields.getIndexedFields(indexReader), maxDocFreq);\n  }\n\n","sourceOld":"  /**\n   * Creates a new QueryAutoStopWordAnalyzer with stopwords calculated for all\n   * indexed fields from terms with a document frequency greater than the given\n   * maxDocFreq\n   *\n   * @param matchVersion Version to be used in {@link StopFilter}\n   * @param delegate Analyzer whose TokenStream will be filtered\n   * @param indexReader IndexReader to identify the stopwords from\n   * @param maxDocFreq Document frequency terms should be above in order to be stopwords\n   * @throws IOException Can be thrown while reading from the IndexReader\n   */\n  public QueryAutoStopWordAnalyzer(\n      Version matchVersion,\n      Analyzer delegate,\n      IndexReader indexReader,\n      int maxDocFreq) throws IOException {\n    this(matchVersion, delegate, indexReader, ReaderUtil.getIndexedFields(indexReader), maxDocFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#QueryAutoStopWordAnalyzer(Version,Analyzer,IndexReader,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#QueryAutoStopWordAnalyzer(Version,Analyzer,IndexReader,int).mjava","sourceNew":"  /**\n   * Creates a new QueryAutoStopWordAnalyzer with stopwords calculated for all\n   * indexed fields from terms with a document frequency greater than the given\n   * maxDocFreq\n   *\n   * @param matchVersion Version to be used in {@link StopFilter}\n   * @param delegate Analyzer whose TokenStream will be filtered\n   * @param indexReader IndexReader to identify the stopwords from\n   * @param maxDocFreq Document frequency terms should be above in order to be stopwords\n   * @throws IOException Can be thrown while reading from the IndexReader\n   */\n  public QueryAutoStopWordAnalyzer(\n      Version matchVersion,\n      Analyzer delegate,\n      IndexReader indexReader,\n      int maxDocFreq) throws IOException {\n    this(matchVersion, delegate, indexReader, MultiFields.getIndexedFields(indexReader), maxDocFreq);\n  }\n\n","sourceOld":"  /**\n   * Creates a new QueryAutoStopWordAnalyzer with stopwords calculated for all\n   * indexed fields from terms with a document frequency greater than the given\n   * maxDocFreq\n   *\n   * @param matchVersion Version to be used in {@link StopFilter}\n   * @param delegate Analyzer whose TokenStream will be filtered\n   * @param indexReader IndexReader to identify the stopwords from\n   * @param maxDocFreq Document frequency terms should be above in order to be stopwords\n   * @throws IOException Can be thrown while reading from the IndexReader\n   */\n  public QueryAutoStopWordAnalyzer(\n      Version matchVersion,\n      Analyzer delegate,\n      IndexReader indexReader,\n      int maxDocFreq) throws IOException {\n    this(matchVersion, delegate, indexReader, ReaderUtil.getIndexedFields(indexReader), maxDocFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#QueryAutoStopWordAnalyzer(Version,Analyzer,IndexReader,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#QueryAutoStopWordAnalyzer(Version,Analyzer,IndexReader,int).mjava","sourceNew":"  /**\n   * Creates a new QueryAutoStopWordAnalyzer with stopwords calculated for all\n   * indexed fields from terms with a document frequency greater than the given\n   * maxDocFreq\n   *\n   * @param matchVersion Version to be used in {@link StopFilter}\n   * @param delegate Analyzer whose TokenStream will be filtered\n   * @param indexReader IndexReader to identify the stopwords from\n   * @param maxDocFreq Document frequency terms should be above in order to be stopwords\n   * @throws IOException Can be thrown while reading from the IndexReader\n   */\n  public QueryAutoStopWordAnalyzer(\n      Version matchVersion,\n      Analyzer delegate,\n      IndexReader indexReader,\n      int maxDocFreq) throws IOException {\n    this(matchVersion, delegate, indexReader, MultiFields.getIndexedFields(indexReader), maxDocFreq);\n  }\n\n","sourceOld":"  /**\n   * Creates a new QueryAutoStopWordAnalyzer with stopwords calculated for all\n   * indexed fields from terms with a document frequency greater than the given\n   * maxDocFreq\n   *\n   * @param matchVersion Version to be used in {@link StopFilter}\n   * @param delegate Analyzer whose TokenStream will be filtered\n   * @param indexReader IndexReader to identify the stopwords from\n   * @param maxDocFreq Document frequency terms should be above in order to be stopwords\n   * @throws IOException Can be thrown while reading from the IndexReader\n   */\n  public QueryAutoStopWordAnalyzer(\n      Version matchVersion,\n      Analyzer delegate,\n      IndexReader indexReader,\n      int maxDocFreq) throws IOException {\n    this(matchVersion, delegate, indexReader, MultiFields.getIndexedFields(indexReader), maxDocFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15a85fc0e6a026bb5e2b8039536da659064bd50f":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"193a8346fc41165af561d084bb5f40a62125a878":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["193a8346fc41165af561d084bb5f40a62125a878"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","15a85fc0e6a026bb5e2b8039536da659064bd50f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"15a85fc0e6a026bb5e2b8039536da659064bd50f":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["193a8346fc41165af561d084bb5f40a62125a878"],"193a8346fc41165af561d084bb5f40a62125a878":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["15a85fc0e6a026bb5e2b8039536da659064bd50f","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}