{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#unzip(Path,Path).mjava","commits":[{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#unzip(Path,Path).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#unzip(File,File).mjava","sourceNew":"  /** \n   * Convenience method unzipping zipName into destDir, cleaning up \n   * destDir first. \n   */\n  public static void unzip(Path zipName, Path destDir) throws IOException {\n    IOUtils.rm(destDir);\n    Files.createDirectory(destDir);\n\n    ZipFile zipFile = new ZipFile(zipName.toFile());\n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n      \n      InputStream in = zipFile.getInputStream(entry);\n      Path targetFile = destDir.resolve(entry.getName());\n      \n      // be on the safe side: do not rely on that directories are always extracted\n      // before their children (although this makes sense, but is it guaranteed?)\n      Files.createDirectories(targetFile.getParent());\n      if (!entry.isDirectory()) {\n        OutputStream out = Files.newOutputStream(targetFile);\n        \n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n        \n        in.close();\n        out.close();\n      }\n    }\n    \n    zipFile.close();\n  }\n\n","sourceOld":"  /** \n   * Convenience method unzipping zipName into destDir, cleaning up \n   * destDir first. \n   */\n  public static void unzip(File zipName, File destDir) throws IOException {\n    IOUtils.rm(destDir);\n    destDir.mkdir();\n\n    ZipFile zipFile = new ZipFile(zipName);\n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n      \n      InputStream in = zipFile.getInputStream(entry);\n      File targetFile = new File(destDir, entry.getName());\n      if (entry.isDirectory()) {\n        // allow unzipping with directory structure\n        targetFile.mkdirs();\n      } else {\n        if (targetFile.getParentFile()!=null) {\n          // be on the safe side: do not rely on that directories are always extracted\n          // before their children (although this makes sense, but is it guaranteed?)\n          targetFile.getParentFile().mkdirs();   \n        }\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(targetFile));\n        \n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n        \n        in.close();\n        out.close();\n      }\n    }\n    \n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"509b34c7d48bc90eb4ec5e8757e0f879a19f22ee","date":1410650745,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#unzip(Path,Path).mjava","sourceNew":null,"sourceOld":"  /** \n   * Convenience method unzipping zipName into destDir, cleaning up \n   * destDir first. \n   */\n  public static void unzip(Path zipName, Path destDir) throws IOException {\n    IOUtils.rm(destDir);\n    Files.createDirectory(destDir);\n\n    ZipFile zipFile = new ZipFile(zipName.toFile());\n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n      \n      InputStream in = zipFile.getInputStream(entry);\n      Path targetFile = destDir.resolve(entry.getName());\n      \n      // be on the safe side: do not rely on that directories are always extracted\n      // before their children (although this makes sense, but is it guaranteed?)\n      Files.createDirectories(targetFile.getParent());\n      if (!entry.isDirectory()) {\n        OutputStream out = Files.newOutputStream(targetFile);\n        \n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n        \n        in.close();\n        out.close();\n      }\n    }\n    \n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"509b34c7d48bc90eb4ec5e8757e0f879a19f22ee":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["509b34c7d48bc90eb4ec5e8757e0f879a19f22ee"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4abec28b874149a7223e32cc7a01704c27790de"],"509b34c7d48bc90eb4ec5e8757e0f879a19f22ee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4abec28b874149a7223e32cc7a01704c27790de":["509b34c7d48bc90eb4ec5e8757e0f879a19f22ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}