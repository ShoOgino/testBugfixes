{"path":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/base/distance/DistanceUtils#distLawOfCosinesRAD(double,double,double,double).mjava","commits":[{"id":"c2047ba81272a0c4edeb11b1c7810ee23ba73502","date":1329808655,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/base/distance/DistanceUtils#distLawOfCosinesRAD(double,double,double,double).mjava","pathOld":"modules/spatial-TEMP/src/java/org/apache/lucene/spatial/base/distance/DistanceUtils#distLawOfCosinesRAD(double,double,double,double).mjava","sourceNew":"  /**\n   * Calculates the distance between two lat/lng's using the Law of Cosines. Due to numeric conditioning\n   * errors, it is not as accurate as the Haversine formula for small distances.  But with\n   * double precision, it isn't that bad -- <a href=\"http://www.movable-type.co.uk/scripts/latlong.html\">\n   *   allegedly 1 meter</a>.\n   * <p/>\n   * See <a href=\"http://gis.stackexchange.com/questions/4906/why-is-law-of-cosines-more-preferable-than-haversine-when-calculating-distance-b\">\n   *  Why is law of cosines more preferable than haversine when calculating distance between two latitude-longitude points?</a>\n   * <p/>\n   * The arguments and return value are in radians.\n   */\n  public static double distLawOfCosinesRAD(double lat1, double lon1, double lat2, double lon2) {\n    //TODO validate formula\n\n    //(MIGRATED FROM org.apache.lucene.spatial.geometry.LatLng.arcDistance())\n    // Imported from mq java client.  Variable references changed to match.\n\n    // Check for same position\n    if (lat1 == lat2 && lon1 == lon2)\n      return 0.0;\n\n    // Get the m_dLongitude difference. Don't need to worry about\n    // crossing 180 since cos(x) = cos(-x)\n    double dLon = lon2 - lon1;\n\n    double a = DEG_90_AS_RADS - lat1;\n    double c = DEG_90_AS_RADS - lat2;\n    double cosB = (Math.cos(a) * Math.cos(c))\n        + (Math.sin(a) * Math.sin(c) * Math.cos(dLon));\n\n    // Find angle subtended (with some bounds checking) in radians\n    if (cosB < -1.0)\n      return Math.PI;\n    else if (cosB >= 1.0)\n      return 0;\n    else\n      return Math.acos(cosB);\n  }\n\n","sourceOld":"  /**\n   * Calculates the distance between two lat/lng's using the Law of Cosines. Due to numeric conditioning\n   * errors, it is not as accurate as the Haversine formula for small distances.  But with\n   * double precision, it isn't that bad -- <a href=\"http://www.movable-type.co.uk/scripts/latlong.html\">\n   *   allegedly 1 meter</a>.\n   * <p/>\n   * See <a href=\"http://gis.stackexchange.com/questions/4906/why-is-law-of-cosines-more-preferable-than-haversine-when-calculating-distance-b\">\n   *  Why is law of cosines more preferable than haversine when calculating distance between two latitude-longitude points?</a>\n   * <p/>\n   * The arguments and return value are in radians.\n   */\n  public static double distLawOfCosinesRAD(double lat1, double lon1, double lat2, double lon2) {\n    //TODO validate formula\n\n    //(MIGRATED FROM org.apache.lucene.spatial.geometry.LatLng.arcDistance())\n    // Imported from mq java client.  Variable references changed to match.\n\n    // Check for same position\n    if (lat1 == lat2 && lon1 == lon2)\n      return 0.0;\n\n    // Get the m_dLongitude difference. Don't need to worry about\n    // crossing 180 since cos(x) = cos(-x)\n    double dLon = lon2 - lon1;\n\n    double a = DEG_90_AS_RADS - lat1;\n    double c = DEG_90_AS_RADS - lat2;\n    double cosB = (Math.cos(a) * Math.cos(c))\n        + (Math.sin(a) * Math.sin(c) * Math.cos(dLon));\n\n    // Find angle subtended (with some bounds checking) in radians\n    if (cosB < -1.0)\n      return Math.PI;\n    else if (cosB >= 1.0)\n      return 0;\n    else\n      return Math.acos(cosB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a","date":1329809096,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/base/src/java/org/apache/lucene/spatial/base/distance/DistanceUtils#distLawOfCosinesRAD(double,double,double,double).mjava","pathOld":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/base/distance/DistanceUtils#distLawOfCosinesRAD(double,double,double,double).mjava","sourceNew":"  /**\n   * Calculates the distance between two lat/lng's using the Law of Cosines. Due to numeric conditioning\n   * errors, it is not as accurate as the Haversine formula for small distances.  But with\n   * double precision, it isn't that bad -- <a href=\"http://www.movable-type.co.uk/scripts/latlong.html\">\n   *   allegedly 1 meter</a>.\n   * <p/>\n   * See <a href=\"http://gis.stackexchange.com/questions/4906/why-is-law-of-cosines-more-preferable-than-haversine-when-calculating-distance-b\">\n   *  Why is law of cosines more preferable than haversine when calculating distance between two latitude-longitude points?</a>\n   * <p/>\n   * The arguments and return value are in radians.\n   */\n  public static double distLawOfCosinesRAD(double lat1, double lon1, double lat2, double lon2) {\n    //TODO validate formula\n\n    //(MIGRATED FROM org.apache.lucene.spatial.geometry.LatLng.arcDistance())\n    // Imported from mq java client.  Variable references changed to match.\n\n    // Check for same position\n    if (lat1 == lat2 && lon1 == lon2)\n      return 0.0;\n\n    // Get the m_dLongitude difference. Don't need to worry about\n    // crossing 180 since cos(x) = cos(-x)\n    double dLon = lon2 - lon1;\n\n    double a = DEG_90_AS_RADS - lat1;\n    double c = DEG_90_AS_RADS - lat2;\n    double cosB = (Math.cos(a) * Math.cos(c))\n        + (Math.sin(a) * Math.sin(c) * Math.cos(dLon));\n\n    // Find angle subtended (with some bounds checking) in radians\n    if (cosB < -1.0)\n      return Math.PI;\n    else if (cosB >= 1.0)\n      return 0;\n    else\n      return Math.acos(cosB);\n  }\n\n","sourceOld":"  /**\n   * Calculates the distance between two lat/lng's using the Law of Cosines. Due to numeric conditioning\n   * errors, it is not as accurate as the Haversine formula for small distances.  But with\n   * double precision, it isn't that bad -- <a href=\"http://www.movable-type.co.uk/scripts/latlong.html\">\n   *   allegedly 1 meter</a>.\n   * <p/>\n   * See <a href=\"http://gis.stackexchange.com/questions/4906/why-is-law-of-cosines-more-preferable-than-haversine-when-calculating-distance-b\">\n   *  Why is law of cosines more preferable than haversine when calculating distance between two latitude-longitude points?</a>\n   * <p/>\n   * The arguments and return value are in radians.\n   */\n  public static double distLawOfCosinesRAD(double lat1, double lon1, double lat2, double lon2) {\n    //TODO validate formula\n\n    //(MIGRATED FROM org.apache.lucene.spatial.geometry.LatLng.arcDistance())\n    // Imported from mq java client.  Variable references changed to match.\n\n    // Check for same position\n    if (lat1 == lat2 && lon1 == lon2)\n      return 0.0;\n\n    // Get the m_dLongitude difference. Don't need to worry about\n    // crossing 180 since cos(x) = cos(-x)\n    double dLon = lon2 - lon1;\n\n    double a = DEG_90_AS_RADS - lat1;\n    double c = DEG_90_AS_RADS - lat2;\n    double cosB = (Math.cos(a) * Math.cos(c))\n        + (Math.sin(a) * Math.sin(c) * Math.cos(dLon));\n\n    // Find angle subtended (with some bounds checking) in radians\n    if (cosB < -1.0)\n      return Math.PI;\n    else if (cosB >= 1.0)\n      return 0;\n    else\n      return Math.acos(cosB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a":["c2047ba81272a0c4edeb11b1c7810ee23ba73502"]},"commit2Childs":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2047ba81272a0c4edeb11b1c7810ee23ba73502","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}