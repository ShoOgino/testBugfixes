{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testStopwords().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testStopwords().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testStopwords().mjava","sourceNew":"  public void testStopwords() throws Exception {\n    QueryParserWrapper qp = new QueryParserWrapper(\"a\", new StopAnalyzer(TEST_VERSION_CURRENT, StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"the\", \"foo\")));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp\n        .parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","sourceOld":"  public void testStopwords() throws Exception {\n    QueryParserWrapper qp = new QueryParserWrapper(\"a\", new StopAnalyzer(TEST_VERSION_CURRENT, StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"the\", \"foo\")));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp\n        .parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03276b2744036b1b19a7a2dd4b74ba7bc484f107","date":1274048508,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testStopwords().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testStopwords().mjava","sourceNew":"  public void testStopwords() throws Exception {\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    QueryParserWrapper qp = new QueryParserWrapper(\"a\", new MockAnalyzer(MockTokenizer.SIMPLE, true, stopSet, true));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp\n        .parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","sourceOld":"  public void testStopwords() throws Exception {\n    QueryParserWrapper qp = new QueryParserWrapper(\"a\", new StopAnalyzer(TEST_VERSION_CURRENT, StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"the\", \"foo\")));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp\n        .parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testStopwords().mjava","sourceNew":null,"sourceOld":"  public void testStopwords() throws Exception {\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    QueryParserWrapper qp = new QueryParserWrapper(\"a\", new MockAnalyzer(MockTokenizer.SIMPLE, true, stopSet, true));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp\n        .parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testStopwords().mjava","sourceNew":null,"sourceOld":"  public void testStopwords() throws Exception {\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    QueryParserWrapper qp = new QueryParserWrapper(\"a\", new MockAnalyzer(MockTokenizer.SIMPLE, true, stopSet, true));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp\n        .parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testStopwords().mjava","sourceNew":null,"sourceOld":"  public void testStopwords() throws Exception {\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    QueryParserWrapper qp = new QueryParserWrapper(\"a\", new MockAnalyzer(MockTokenizer.SIMPLE, true, stopSet, true));\n    Query result = qp.parse(\"a:the OR a:foo\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp\n        .parse(\"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE) System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03276b2744036b1b19a7a2dd4b74ba7bc484f107":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["03276b2744036b1b19a7a2dd4b74ba7bc484f107","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["03276b2744036b1b19a7a2dd4b74ba7bc484f107","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["03276b2744036b1b19a7a2dd4b74ba7bc484f107"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"03276b2744036b1b19a7a2dd4b74ba7bc484f107":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["03276b2744036b1b19a7a2dd4b74ba7bc484f107"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}