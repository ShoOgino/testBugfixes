{"path":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter.LeaderUrlSupplier#get().mjava","commits":[{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter.LeaderUrlSupplier#get().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public String get() {\n      CloudDescriptor cd = core.getCoreDescriptor().getCloudDescriptor();\n      if (cd == null) {\n        return null;\n      }\n      ClusterState state = core.getCoreDescriptor().getCoreContainer().getZkController().getClusterState();\n      DocCollection collection = state.getCollection(core.getCoreDescriptor().getCollectionName());\n      Replica replica = collection.getLeader(core.getCoreDescriptor().getCloudDescriptor().getShardId());\n      if (replica == null) {\n        log.warn(\"No leader for \" + collection.getName() + \"/\" + core.getCoreDescriptor().getCloudDescriptor().getShardId());\n        return null;\n      }\n      String baseUrl = replica.getStr(\"base_url\");\n      if (baseUrl == null) {\n        log.warn(\"No base_url for replica \" + replica);\n      }\n      return baseUrl;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter.LeaderUrlSupplier#get().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter.LeaderUrlSupplier#get().mjava","sourceNew":"    @Override\n    public String get() {\n      CloudDescriptor cd = core.getCoreDescriptor().getCloudDescriptor();\n      if (cd == null) {\n        return null;\n      }\n      ClusterState state = core.getCoreContainer().getZkController().getClusterState();\n      DocCollection collection = state.getCollection(core.getCoreDescriptor().getCollectionName());\n      Replica replica = collection.getLeader(core.getCoreDescriptor().getCloudDescriptor().getShardId());\n      if (replica == null) {\n        log.warn(\"No leader for \" + collection.getName() + \"/\" + core.getCoreDescriptor().getCloudDescriptor().getShardId());\n        return null;\n      }\n      String baseUrl = replica.getStr(\"base_url\");\n      if (baseUrl == null) {\n        log.warn(\"No base_url for replica \" + replica);\n      }\n      return baseUrl;\n    }\n\n","sourceOld":"    @Override\n    public String get() {\n      CloudDescriptor cd = core.getCoreDescriptor().getCloudDescriptor();\n      if (cd == null) {\n        return null;\n      }\n      ClusterState state = core.getCoreDescriptor().getCoreContainer().getZkController().getClusterState();\n      DocCollection collection = state.getCollection(core.getCoreDescriptor().getCollectionName());\n      Replica replica = collection.getLeader(core.getCoreDescriptor().getCloudDescriptor().getShardId());\n      if (replica == null) {\n        log.warn(\"No leader for \" + collection.getName() + \"/\" + core.getCoreDescriptor().getCloudDescriptor().getShardId());\n        return null;\n      }\n      String baseUrl = replica.getStr(\"base_url\");\n      if (baseUrl == null) {\n        log.warn(\"No base_url for replica \" + replica);\n      }\n      return baseUrl;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter.LeaderUrlSupplier#get().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter.LeaderUrlSupplier#get().mjava","sourceNew":"    @Override\n    public String get() {\n      CloudDescriptor cd = core.getCoreDescriptor().getCloudDescriptor();\n      if (cd == null) {\n        return null;\n      }\n      ClusterState state = core.getCoreContainer().getZkController().getClusterState();\n      DocCollection collection = state.getCollection(core.getCoreDescriptor().getCollectionName());\n      Replica replica = collection.getLeader(core.getCoreDescriptor().getCloudDescriptor().getShardId());\n      if (replica == null) {\n        log.warn(\"No leader for \" + collection.getName() + \"/\" + core.getCoreDescriptor().getCloudDescriptor().getShardId());\n        return null;\n      }\n      String baseUrl = replica.getStr(\"base_url\");\n      if (baseUrl == null) {\n        log.warn(\"No base_url for replica \" + replica);\n      }\n      return baseUrl;\n    }\n\n","sourceOld":"    @Override\n    public String get() {\n      CloudDescriptor cd = core.getCoreDescriptor().getCloudDescriptor();\n      if (cd == null) {\n        return null;\n      }\n      ClusterState state = core.getCoreDescriptor().getCoreContainer().getZkController().getClusterState();\n      DocCollection collection = state.getCollection(core.getCoreDescriptor().getCollectionName());\n      Replica replica = collection.getLeader(core.getCoreDescriptor().getCloudDescriptor().getShardId());\n      if (replica == null) {\n        log.warn(\"No leader for \" + collection.getName() + \"/\" + core.getCoreDescriptor().getCloudDescriptor().getShardId());\n        return null;\n      }\n      String baseUrl = replica.getStr(\"base_url\");\n      if (baseUrl == null) {\n        log.warn(\"No base_url for replica \" + replica);\n      }\n      return baseUrl;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter.LeaderUrlSupplier#get().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter.LeaderUrlSupplier#get().mjava","sourceNew":"    @Override\n    public String get() {\n      CloudDescriptor cd = core.getCoreDescriptor().getCloudDescriptor();\n      if (cd == null) {\n        return null;\n      }\n      ClusterState state = core.getCoreContainer().getZkController().getClusterState();\n      DocCollection collection = state.getCollection(core.getCoreDescriptor().getCollectionName());\n      Replica replica = collection.getLeader(core.getCoreDescriptor().getCloudDescriptor().getShardId());\n      if (replica == null) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"No leader for {}/{}\", collection.getName(), core.getCoreDescriptor().getCloudDescriptor().getShardId());\n        }\n        return null;\n      }\n      String baseUrl = replica.getStr(\"base_url\");\n      if (baseUrl == null) {\n        log.warn(\"No base_url for replica {}\", replica);\n      }\n      return baseUrl;\n    }\n\n","sourceOld":"    @Override\n    public String get() {\n      CloudDescriptor cd = core.getCoreDescriptor().getCloudDescriptor();\n      if (cd == null) {\n        return null;\n      }\n      ClusterState state = core.getCoreContainer().getZkController().getClusterState();\n      DocCollection collection = state.getCollection(core.getCoreDescriptor().getCollectionName());\n      Replica replica = collection.getLeader(core.getCoreDescriptor().getCloudDescriptor().getShardId());\n      if (replica == null) {\n        log.warn(\"No leader for \" + collection.getName() + \"/\" + core.getCoreDescriptor().getCloudDescriptor().getShardId());\n        return null;\n      }\n      String baseUrl = replica.getStr(\"base_url\");\n      if (baseUrl == null) {\n        log.warn(\"No base_url for replica \" + replica);\n      }\n      return baseUrl;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter.LeaderUrlSupplier#get().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter.LeaderUrlSupplier#get().mjava","sourceNew":"    @Override\n    public String get() {\n      CloudDescriptor cd = core.getCoreDescriptor().getCloudDescriptor();\n      if (cd == null) {\n        return null;\n      }\n      ClusterState state = core.getCoreContainer().getZkController().getClusterState();\n      DocCollection collection = state.getCollection(core.getCoreDescriptor().getCollectionName());\n      Replica replica = collection.getLeader(core.getCoreDescriptor().getCloudDescriptor().getShardId());\n      if (replica == null) {\n        log.warn(\"No leader for {}/{}\", collection.getName(), core.getCoreDescriptor().getCloudDescriptor().getShardId());\n        return null;\n      }\n      String baseUrl = replica.getStr(\"base_url\");\n      if (baseUrl == null) {\n        log.warn(\"No base_url for replica {}\", replica);\n      }\n      return baseUrl;\n    }\n\n","sourceOld":"    @Override\n    public String get() {\n      CloudDescriptor cd = core.getCoreDescriptor().getCloudDescriptor();\n      if (cd == null) {\n        return null;\n      }\n      ClusterState state = core.getCoreContainer().getZkController().getClusterState();\n      DocCollection collection = state.getCollection(core.getCoreDescriptor().getCollectionName());\n      Replica replica = collection.getLeader(core.getCoreDescriptor().getCloudDescriptor().getShardId());\n      if (replica == null) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"No leader for {}/{}\", collection.getName(), core.getCoreDescriptor().getCloudDescriptor().getShardId());\n        }\n        return null;\n      }\n      String baseUrl = replica.getStr(\"base_url\");\n      if (baseUrl == null) {\n        log.warn(\"No base_url for replica {}\", replica);\n      }\n      return baseUrl;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"575e66bd4b2349209027f6801184da7fc3cba13f":["9df8125ba9193a2e2e285ed92157810b1952a244"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"9df8125ba9193a2e2e285ed92157810b1952a244":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}