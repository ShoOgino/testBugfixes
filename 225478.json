{"path":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocsEnum(DocsEnum,DocsEnum,boolean).mjava","commits":[{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocsEnum(DocsEnum,DocsEnum,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocsEnum(DocsEnum,DocsEnum).mjava","sourceNew":"  /**\n   * checks docs + freqs, sequentially\n   */\n  public void assertDocsEnum(DocsEnum leftDocs, DocsEnum rightDocs, boolean hasFreqs) throws Exception {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    assertTrue(info, leftDocs.docID() == -1 || leftDocs.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(info, rightDocs.docID() == -1 || rightDocs.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    int docid;\n    while ((docid = leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(info, docid, rightDocs.nextDoc());\n      if (hasFreqs) {\n        assertEquals(info, leftDocs.freq(), rightDocs.freq());\n      }\n    }\n    assertEquals(info, DocIdSetIterator.NO_MORE_DOCS, rightDocs.nextDoc());\n  }\n\n","sourceOld":"  /**\n   * checks docs + freqs, sequentially\n   */\n  public void assertDocsEnum(DocsEnum leftDocs, DocsEnum rightDocs) throws Exception {\n    assertTrue(info, leftDocs.docID() == -1 || leftDocs.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(info, rightDocs.docID() == -1 || rightDocs.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    int docid;\n    while ((docid = leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(info, docid, rightDocs.nextDoc());\n      assertEquals(info, leftDocs.freq(), rightDocs.freq());\n    }\n    assertEquals(info, DocIdSetIterator.NO_MORE_DOCS, rightDocs.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocsEnum(DocsEnum,DocsEnum,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocsEnum(DocsEnum,DocsEnum).mjava","sourceNew":"  /**\n   * checks docs + freqs, sequentially\n   */\n  public void assertDocsEnum(DocsEnum leftDocs, DocsEnum rightDocs, boolean hasFreqs) throws Exception {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    assertTrue(info, leftDocs.docID() == -1 || leftDocs.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(info, rightDocs.docID() == -1 || rightDocs.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    int docid;\n    while ((docid = leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(info, docid, rightDocs.nextDoc());\n      if (hasFreqs) {\n        assertEquals(info, leftDocs.freq(), rightDocs.freq());\n      }\n    }\n    assertEquals(info, DocIdSetIterator.NO_MORE_DOCS, rightDocs.nextDoc());\n  }\n\n","sourceOld":"  /**\n   * checks docs + freqs, sequentially\n   */\n  public void assertDocsEnum(DocsEnum leftDocs, DocsEnum rightDocs) throws Exception {\n    assertTrue(info, leftDocs.docID() == -1 || leftDocs.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(info, rightDocs.docID() == -1 || rightDocs.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    int docid;\n    while ((docid = leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(info, docid, rightDocs.nextDoc());\n      assertEquals(info, leftDocs.freq(), rightDocs.freq());\n    }\n    assertEquals(info, DocIdSetIterator.NO_MORE_DOCS, rightDocs.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocsEnum(DocsEnum,DocsEnum,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocsEnum(DocsEnum,DocsEnum,boolean).mjava","sourceNew":"  /**\n   * checks docs + freqs, sequentially\n   */\n  public void assertDocsEnum(DocsEnum leftDocs, DocsEnum rightDocs, boolean hasFreqs) throws Exception {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    assertTrue(info, leftDocs.docID() == -1 || leftDocs.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(info, rightDocs.docID() == -1 || rightDocs.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    int docid;\n    while ((docid = leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(info, docid, rightDocs.nextDoc());\n      if (hasFreqs) {\n        assertEquals(info, leftDocs.freq(), rightDocs.freq());\n      }\n    }\n    assertEquals(info, DocIdSetIterator.NO_MORE_DOCS, rightDocs.nextDoc());\n  }\n\n","sourceOld":"  /**\n   * checks docs + freqs, sequentially\n   */\n  public void assertDocsEnum(DocsEnum leftDocs, DocsEnum rightDocs, boolean hasFreqs) throws Exception {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    assertTrue(info, leftDocs.docID() == -1 || leftDocs.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(info, rightDocs.docID() == -1 || rightDocs.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    int docid;\n    while ((docid = leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(info, docid, rightDocs.nextDoc());\n      if (hasFreqs) {\n        assertEquals(info, leftDocs.freq(), rightDocs.freq());\n      }\n    }\n    assertEquals(info, DocIdSetIterator.NO_MORE_DOCS, rightDocs.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}