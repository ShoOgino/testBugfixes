{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = new IndexSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = new IndexSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = new IndexSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(query, ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = new IndexSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","date":1366056945,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = newSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(query, ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = new IndexSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(query, ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = newSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(\"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(query, ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = newSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(query, ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = newSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(query, ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = newSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(\"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(query, ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = newSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(\"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(query, ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = newSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(query, ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"761333d77c7f29123c00c93b107b743f32f012e6","date":1411986072,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = newSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(\"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(query, ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = newSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(\"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(query, ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAllQueries(MemoryIndex,Directory,Analyzer).mjava","sourceNew":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = newSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(\"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(query, ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Run all queries against both the RAMDirectory and MemoryIndex, ensuring they are the same.\n   */\n  public void assertAllQueries(MemoryIndex memory, Directory ramdir, Analyzer analyzer) throws Exception {\n    IndexReader reader = DirectoryReader.open(ramdir);\n    IndexSearcher ram = newSearcher(reader);\n    IndexSearcher mem = memory.createSearcher();\n    QueryParser qp = new QueryParser(\"foo\", analyzer);\n    for (String query : queries) {\n      TopDocs ramDocs = ram.search(qp.parse(query), 1);\n      TopDocs memDocs = mem.search(qp.parse(query), 1);\n      assertEquals(query, ramDocs.totalHits, memDocs.totalHits);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["379db3ad24c4f0214f30a122265a6d6be003a99d","761333d77c7f29123c00c93b107b743f32f012e6"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"761333d77c7f29123c00c93b107b743f32f012e6":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["761333d77c7f29123c00c93b107b743f32f012e6"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["d9a47902d6207303f5ed3e7aaca62ca33433af66","761333d77c7f29123c00c93b107b743f32f012e6"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"761333d77c7f29123c00c93b107b743f32f012e6":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}