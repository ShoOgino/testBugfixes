{"path":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest#waitForThingsToLevelOut().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest#waitForThingsToLevelOut().mjava","pathOld":"/dev/null","sourceNew":"  private void waitForThingsToLevelOut() throws KeeperException,\n      InterruptedException, Exception, IOException, URISyntaxException {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE);\n      \n      commit();\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest#waitForThingsToLevelOut().mjava","pathOld":"/dev/null","sourceNew":"  private void waitForThingsToLevelOut() throws KeeperException,\n      InterruptedException, Exception, IOException, URISyntaxException {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE);\n      \n      commit();\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest#waitForThingsToLevelOut().mjava","pathOld":"/dev/null","sourceNew":"  private void waitForThingsToLevelOut() throws KeeperException,\n      InterruptedException, Exception, IOException, URISyntaxException {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE);\n      \n      commit();\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02d85ce8b40e2534dc93bce511e5d3750c6b09d3","date":1327639082,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest#waitForThingsToLevelOut().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest#waitForThingsToLevelOut().mjava","sourceNew":"  private void waitForThingsToLevelOut() throws KeeperException,\n      InterruptedException, Exception, IOException, URISyntaxException {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE);\n      \n      try {\n        commit();\n      } catch (Exception e) {\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","sourceOld":"  private void waitForThingsToLevelOut() throws KeeperException,\n      InterruptedException, Exception, IOException, URISyntaxException {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE);\n      \n      commit();\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest#waitForThingsToLevelOut().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest#waitForThingsToLevelOut().mjava","sourceNew":"  private void waitForThingsToLevelOut() throws KeeperException,\n      InterruptedException, Exception, IOException, URISyntaxException {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE);\n      \n      try {\n        commit();\n      } catch (Exception e) {\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","sourceOld":"  private void waitForThingsToLevelOut() throws KeeperException,\n      InterruptedException, Exception, IOException, URISyntaxException {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE);\n      \n      commit();\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest#waitForThingsToLevelOut().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest#waitForThingsToLevelOut().mjava","sourceNew":"  private void waitForThingsToLevelOut() throws KeeperException,\n      InterruptedException, Exception, IOException, URISyntaxException {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE);\n      \n      try {\n        commit();\n      } catch (Exception e) {\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","sourceOld":"  private void waitForThingsToLevelOut() throws KeeperException,\n      InterruptedException, Exception, IOException, URISyntaxException {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE);\n      \n      commit();\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest#waitForThingsToLevelOut().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest#waitForThingsToLevelOut().mjava","sourceNew":"  private void waitForThingsToLevelOut() throws Exception {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE);\n      \n      try {\n        commit();\n      } catch (Exception e) {\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","sourceOld":"  private void waitForThingsToLevelOut() throws KeeperException,\n      InterruptedException, Exception, IOException, URISyntaxException {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE);\n      \n      try {\n        commit();\n      } catch (Exception e) {\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest#waitForThingsToLevelOut().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest#waitForThingsToLevelOut().mjava","sourceNew":"  private void waitForThingsToLevelOut() throws Exception {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE);\n      \n      try {\n        commit();\n      } catch (Exception e) {\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","sourceOld":"  private void waitForThingsToLevelOut() throws KeeperException,\n      InterruptedException, Exception, IOException, URISyntaxException {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE);\n      \n      try {\n        commit();\n      } catch (Exception e) {\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","date":1342989037,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#waitForThingsToLevelOut(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest#waitForThingsToLevelOut().mjava","sourceNew":"  protected void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Exception e) {\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 2) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","sourceOld":"  private void waitForThingsToLevelOut() throws Exception {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE);\n      \n      try {\n        commit();\n      } catch (Exception e) {\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#waitForThingsToLevelOut(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest#waitForThingsToLevelOut().mjava","sourceNew":"  protected void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception {\n    log.info(\"Wait for recoveries to finish - wait \" + waitForRecTimeSeconds + \" for each attempt\");\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE, waitForRecTimeSeconds);\n      \n      try {\n        commit();\n      } catch (Exception e) {\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 2) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","sourceOld":"  private void waitForThingsToLevelOut() throws Exception {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE);\n      \n      try {\n        commit();\n      } catch (Exception e) {\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyNothingIsSafeTest#waitForThingsToLevelOut().mjava","sourceNew":null,"sourceOld":"  private void waitForThingsToLevelOut() throws Exception {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(VERBOSE);\n      \n      try {\n        commit();\n      } catch (Exception e) {\n        // we don't care if this commit fails on some nodes\n      }\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry  = true;\n      }\n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(4000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","02d85ce8b40e2534dc93bce511e5d3750c6b09d3"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","02d85ce8b40e2534dc93bce511e5d3750c6b09d3"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"aba371508186796cc6151d8223a5b4e16d02e26e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["02d85ce8b40e2534dc93bce511e5d3750c6b09d3","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02d85ce8b40e2534dc93bce511e5d3750c6b09d3":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["02d85ce8b40e2534dc93bce511e5d3750c6b09d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"]},"commit2Childs":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["78a55f24d9b493c2a1cecf79f1d78279062b545b"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"02d85ce8b40e2534dc93bce511e5d3750c6b09d3":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","02d85ce8b40e2534dc93bce511e5d3750c6b09d3"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}