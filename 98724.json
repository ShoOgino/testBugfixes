{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createConfNode(String,String,boolean).mjava","commits":[{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createConfNode(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,String,boolean).mjava","sourceNew":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  private void createConfNode(String configName, String coll, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  private void createConfNode(String configName, String coll, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createConfNode(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createConfNode(String,String,boolean).mjava","sourceNew":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  void createConfNode(String configName, String coll, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  private void createConfNode(String configName, String coll, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createConfNode(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createConfNode(String,String,boolean).mjava","sourceNew":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  void createConfNode(String configName, String coll, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  private void createConfNode(String configName, String coll, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createConfNode(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createConfNode(String,String,boolean).mjava","sourceNew":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  void createConfNode(String configName, String coll, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.debug(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  void createConfNode(String configName, String coll, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createConfNode(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createConfNode(String,String,boolean).mjava","sourceNew":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  void createConfNode(String configName, String coll, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.debug(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  void createConfNode(String configName, String coll, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createConfNode(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createConfNode(String,String,boolean).mjava","sourceNew":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  void createConfNode(String configName, String coll, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.debug(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  private void createConfNode(String configName, String coll, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createConfNode(DistribStateManager,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createConfNode(String,String,boolean).mjava","sourceNew":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  public static void createConfNode(DistribStateManager stateManager, String configName, String coll, boolean isLegacyCloud) throws IOException, AlreadyExistsException, BadVersionException, KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.debug(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (stateManager.hasData(collDir)) {\n        stateManager.setData(collDir, data, -1);\n      } else {\n        stateManager.makePath(collDir, data, CreateMode.PERSISTENT, false);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  void createConfNode(String configName, String coll, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.debug(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"962cd4f5e313777f35da8f521265323e84184929":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["403d05f7f8d69b65659157eff1bc1d2717f04c66","962cd4f5e313777f35da8f521265323e84184929"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["403d05f7f8d69b65659157eff1bc1d2717f04c66","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["962cd4f5e313777f35da8f521265323e84184929","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}