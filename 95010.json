{"path":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#auditAsync(AuditEvent).mjava","commits":[{"id":"12ddd922ea96c1d0ea68a68506b6984a246cfb22","date":1554385731,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#auditAsync(AuditEvent).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Enqueues an {@link AuditEvent} to a queue and returns immediately.\n   * A background thread will pull events from this queue and call {@link #audit(AuditEvent)}\n   * @param event the audit event\n   */\n  protected final void auditAsync(AuditEvent event) {\n    assert(async);\n    if (blockAsync) {\n      try {\n        queue.put(event);\n      } catch (InterruptedException e) {\n        log.warn(\"Interrupted while waiting to insert AuditEvent into blocking queue\");\n        Thread.currentThread().interrupt();\n      }\n    } else {\n      if (!queue.offer(event)) {\n        log.warn(\"Audit log async queue is full (size={}), not blocking since {}\", blockingQueueSize, PARAM_BLOCKASYNC + \"==false\");\n        numLost.mark();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#auditAsync(AuditEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuditLoggerPlugin#auditAsync(AuditEvent).mjava","sourceNew":"  /**\n   * Enqueues an {@link AuditEvent} to a queue and returns immediately.\n   * A background thread will pull events from this queue and call {@link #audit(AuditEvent)}\n   * @param event the audit event\n   */\n  protected final void auditAsync(AuditEvent event) {\n    assert(async);\n    if (blockAsync) {\n      try {\n        queue.put(event);\n      } catch (InterruptedException e) {\n        log.warn(\"Interrupted while waiting to insert AuditEvent into blocking queue\");\n        Thread.currentThread().interrupt();\n      }\n    } else {\n      if (!queue.offer(event)) {\n        log.warn(\"Audit log async queue is full (size={}), not blocking since {}==false\", blockingQueueSize, PARAM_BLOCKASYNC);\n        numLost.mark();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Enqueues an {@link AuditEvent} to a queue and returns immediately.\n   * A background thread will pull events from this queue and call {@link #audit(AuditEvent)}\n   * @param event the audit event\n   */\n  protected final void auditAsync(AuditEvent event) {\n    assert(async);\n    if (blockAsync) {\n      try {\n        queue.put(event);\n      } catch (InterruptedException e) {\n        log.warn(\"Interrupted while waiting to insert AuditEvent into blocking queue\");\n        Thread.currentThread().interrupt();\n      }\n    } else {\n      if (!queue.offer(event)) {\n        log.warn(\"Audit log async queue is full (size={}), not blocking since {}\", blockingQueueSize, PARAM_BLOCKASYNC + \"==false\");\n        numLost.mark();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"]},"commit2Childs":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}