{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekStemmer#stem(char[],int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekStemmer#stem(char[],int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/el/GreekStemmer#stem(char[],int).mjava","sourceNew":"  public int stem(char s[], int len) {\n    if (len < 4) // too short\n      return len;\n    \n    final int origLen = len;\n    // \"short rules\": if it hits one of these, it skips the \"long list\"\n    len = rule0(s, len);\n    len = rule1(s, len);\n    len = rule2(s, len);\n    len = rule3(s, len);\n    len = rule4(s, len);\n    len = rule5(s, len);\n    len = rule6(s, len);\n    len = rule7(s, len);\n    len = rule8(s, len);\n    len = rule9(s, len);\n    len = rule10(s, len);\n    len = rule11(s, len);\n    len = rule12(s, len);\n    len = rule13(s, len);\n    len = rule14(s, len);\n    len = rule15(s, len);\n    len = rule16(s, len);\n    len = rule17(s, len);\n    len = rule18(s, len);\n    len = rule19(s, len);\n    len = rule20(s, len);\n    // \"long list\"\n    if (len == origLen)\n      len = rule21(s, len);\n    \n    return rule22(s, len);\n  }\n\n","sourceOld":"  public int stem(char s[], int len) {\n    if (len < 4) // too short\n      return len;\n    \n    final int origLen = len;\n    // \"short rules\": if it hits one of these, it skips the \"long list\"\n    len = rule0(s, len);\n    len = rule1(s, len);\n    len = rule2(s, len);\n    len = rule3(s, len);\n    len = rule4(s, len);\n    len = rule5(s, len);\n    len = rule6(s, len);\n    len = rule7(s, len);\n    len = rule8(s, len);\n    len = rule9(s, len);\n    len = rule10(s, len);\n    len = rule11(s, len);\n    len = rule12(s, len);\n    len = rule13(s, len);\n    len = rule14(s, len);\n    len = rule15(s, len);\n    len = rule16(s, len);\n    len = rule17(s, len);\n    len = rule18(s, len);\n    len = rule19(s, len);\n    len = rule20(s, len);\n    // \"long list\"\n    if (len == origLen)\n      len = rule21(s, len);\n    \n    return rule22(s, len);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abf7f248da4dc5c773d792726cafc8bba623f432","date":1395056598,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekStemmer#stem(char[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekStemmer#stem(char[],int).mjava","sourceNew":" /**\n   * Stems a word contained in a leading portion of a char[] array.\n   * The word is passed through a number of rules that modify it's length.\n   * \n   * @param s A char[] array that contains the word to be stemmed.\n   * @param len The length of the char[] array.\n   * @return The new length of the stemmed word.\n   */\n  public int stem(char s[], int len) {\n    if (len < 4) // too short\n      return len;\n    \n    final int origLen = len;\n    // \"short rules\": if it hits one of these, it skips the \"long list\"\n    len = rule0(s, len);\n    len = rule1(s, len);\n    len = rule2(s, len);\n    len = rule3(s, len);\n    len = rule4(s, len);\n    len = rule5(s, len);\n    len = rule6(s, len);\n    len = rule7(s, len);\n    len = rule8(s, len);\n    len = rule9(s, len);\n    len = rule10(s, len);\n    len = rule11(s, len);\n    len = rule12(s, len);\n    len = rule13(s, len);\n    len = rule14(s, len);\n    len = rule15(s, len);\n    len = rule16(s, len);\n    len = rule17(s, len);\n    len = rule18(s, len);\n    len = rule19(s, len);\n    len = rule20(s, len);\n    // \"long list\"\n    if (len == origLen)\n      len = rule21(s, len);\n    \n    return rule22(s, len);\n  }\n\n","sourceOld":"  public int stem(char s[], int len) {\n    if (len < 4) // too short\n      return len;\n    \n    final int origLen = len;\n    // \"short rules\": if it hits one of these, it skips the \"long list\"\n    len = rule0(s, len);\n    len = rule1(s, len);\n    len = rule2(s, len);\n    len = rule3(s, len);\n    len = rule4(s, len);\n    len = rule5(s, len);\n    len = rule6(s, len);\n    len = rule7(s, len);\n    len = rule8(s, len);\n    len = rule9(s, len);\n    len = rule10(s, len);\n    len = rule11(s, len);\n    len = rule12(s, len);\n    len = rule13(s, len);\n    len = rule14(s, len);\n    len = rule15(s, len);\n    len = rule16(s, len);\n    len = rule17(s, len);\n    len = rule18(s, len);\n    len = rule19(s, len);\n    len = rule20(s, len);\n    // \"long list\"\n    if (len == origLen)\n      len = rule21(s, len);\n    \n    return rule22(s, len);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekStemmer#stem(char[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekStemmer#stem(char[],int).mjava","sourceNew":" /**\n   * Stems a word contained in a leading portion of a char[] array.\n   * The word is passed through a number of rules that modify its length.\n   * \n   * @param s A char[] array that contains the word to be stemmed.\n   * @param len The length of the char[] array.\n   * @return The new length of the stemmed word.\n   */\n  public int stem(char s[], int len) {\n    if (len < 4) // too short\n      return len;\n    \n    final int origLen = len;\n    // \"short rules\": if it hits one of these, it skips the \"long list\"\n    len = rule0(s, len);\n    len = rule1(s, len);\n    len = rule2(s, len);\n    len = rule3(s, len);\n    len = rule4(s, len);\n    len = rule5(s, len);\n    len = rule6(s, len);\n    len = rule7(s, len);\n    len = rule8(s, len);\n    len = rule9(s, len);\n    len = rule10(s, len);\n    len = rule11(s, len);\n    len = rule12(s, len);\n    len = rule13(s, len);\n    len = rule14(s, len);\n    len = rule15(s, len);\n    len = rule16(s, len);\n    len = rule17(s, len);\n    len = rule18(s, len);\n    len = rule19(s, len);\n    len = rule20(s, len);\n    // \"long list\"\n    if (len == origLen)\n      len = rule21(s, len);\n    \n    return rule22(s, len);\n  }\n\n","sourceOld":" /**\n   * Stems a word contained in a leading portion of a char[] array.\n   * The word is passed through a number of rules that modify it's length.\n   * \n   * @param s A char[] array that contains the word to be stemmed.\n   * @param len The length of the char[] array.\n   * @return The new length of the stemmed word.\n   */\n  public int stem(char s[], int len) {\n    if (len < 4) // too short\n      return len;\n    \n    final int origLen = len;\n    // \"short rules\": if it hits one of these, it skips the \"long list\"\n    len = rule0(s, len);\n    len = rule1(s, len);\n    len = rule2(s, len);\n    len = rule3(s, len);\n    len = rule4(s, len);\n    len = rule5(s, len);\n    len = rule6(s, len);\n    len = rule7(s, len);\n    len = rule8(s, len);\n    len = rule9(s, len);\n    len = rule10(s, len);\n    len = rule11(s, len);\n    len = rule12(s, len);\n    len = rule13(s, len);\n    len = rule14(s, len);\n    len = rule15(s, len);\n    len = rule16(s, len);\n    len = rule17(s, len);\n    len = rule18(s, len);\n    len = rule19(s, len);\n    len = rule20(s, len);\n    // \"long list\"\n    if (len == origLen)\n      len = rule21(s, len);\n    \n    return rule22(s, len);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["abf7f248da4dc5c773d792726cafc8bba623f432"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"abf7f248da4dc5c773d792726cafc8bba623f432":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["abf7f248da4dc5c773d792726cafc8bba623f432"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"abf7f248da4dc5c773d792726cafc8bba623f432":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}