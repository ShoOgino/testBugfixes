{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Bounds#addLongitudeBound(double,double).mjava","commits":[{"id":"851e4197476b684154a7b65f996f535522e67400","date":1428926498,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Bounds#addLongitudeBound(double,double).mjava","pathOld":"/dev/null","sourceNew":"    protected void addLongitudeBound(double newLeftLongitude, double newRightLongitude) {\n        if (leftLongitude == null && rightLongitude == null) {\n            leftLongitude = newLeftLongitude;\n            rightLongitude = newRightLongitude;\n        } else {\n            // Map the current range to something monotonically increasing\n            double currentLeftLongitude = leftLongitude;\n            double currentRightLongitude = rightLongitude;\n            if (currentRightLongitude < currentLeftLongitude)\n                currentRightLongitude += 2.0 * Math.PI;\n            double adjustedLeftLongitude = newLeftLongitude;\n            double adjustedRightLongitude = newRightLongitude;\n            if (adjustedRightLongitude < adjustedLeftLongitude)\n                adjustedRightLongitude += 2.0 * Math.PI;\n            // Compare to see what the relationship is\n            if (currentLeftLongitude <= adjustedLeftLongitude && currentRightLongitude >= adjustedRightLongitude) {\n                // No adjustment needed.\n            } else if (currentLeftLongitude >= adjustedLeftLongitude && currentRightLongitude <= adjustedRightLongitude) {\n                // New longitude entirely contains old one\n                leftLongitude = newLeftLongitude;\n                rightLongitude = newRightLongitude;\n            } else {\n                if (currentLeftLongitude > adjustedLeftLongitude) {\n                    // New left longitude needed\n                    leftLongitude = newLeftLongitude;\n                }\n                if (currentRightLongitude < adjustedRightLongitude) {\n                    // New right longitude needed\n                    rightLongitude = newRightLongitude;\n                }\n            }\n        }\n        double testRightLongitude = rightLongitude;\n        if (testRightLongitude < leftLongitude)\n            testRightLongitude += Math.PI * 2.0;\n        if (testRightLongitude - leftLongitude >= Math.PI * 2.0) {\n            noLongitudeBound = true;\n            leftLongitude = null;\n            rightLongitude = null;\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47619c5413e53c4d414c1ececa274bef0cd3c799","date":1430506189,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Bounds#addLongitudeBound(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Bounds#addLongitudeBound(double,double).mjava","sourceNew":"    protected void addLongitudeBound(double newLeftLongitude, double newRightLongitude) {\n        if (leftLongitude == null && rightLongitude == null) {\n            leftLongitude = newLeftLongitude;\n            rightLongitude = newRightLongitude;\n        } else {\n            // Map the current range to something monotonically increasing\n            double currentLeftLongitude = leftLongitude;\n            double currentRightLongitude = rightLongitude;\n            if (currentRightLongitude < currentLeftLongitude)\n                currentRightLongitude += 2.0 * Math.PI;\n            double adjustedLeftLongitude = newLeftLongitude;\n            double adjustedRightLongitude = newRightLongitude;\n            if (adjustedRightLongitude < adjustedLeftLongitude)\n                adjustedRightLongitude += 2.0 * Math.PI;\n            // Compare to see what the relationship is\n            if (currentLeftLongitude <= adjustedLeftLongitude && currentRightLongitude >= adjustedRightLongitude) {\n                // No adjustment needed.\n            } else if (currentLeftLongitude >= adjustedLeftLongitude && currentRightLongitude <= adjustedRightLongitude) {\n                // New longitude entirely contains old one\n                leftLongitude = newLeftLongitude;\n                rightLongitude = newRightLongitude;\n            } else {\n                if (currentLeftLongitude > adjustedLeftLongitude) {\n                    // New left longitude needed\n                    leftLongitude = newLeftLongitude;\n                }\n                if (currentRightLongitude < adjustedRightLongitude) {\n                    // New right longitude needed\n                    rightLongitude = newRightLongitude;\n                }\n            }\n        }\n        double testRightLongitude = rightLongitude;\n        if (testRightLongitude < leftLongitude)\n            testRightLongitude += Math.PI * 2.0;\n        // If the bound exceeds 180 degrees, we know we could have screwed up.\n        if (testRightLongitude - leftLongitude >= Math.PI) {\n            noLongitudeBound = true;\n            leftLongitude = null;\n            rightLongitude = null;\n        }\n    }\n\n","sourceOld":"    protected void addLongitudeBound(double newLeftLongitude, double newRightLongitude) {\n        if (leftLongitude == null && rightLongitude == null) {\n            leftLongitude = newLeftLongitude;\n            rightLongitude = newRightLongitude;\n        } else {\n            // Map the current range to something monotonically increasing\n            double currentLeftLongitude = leftLongitude;\n            double currentRightLongitude = rightLongitude;\n            if (currentRightLongitude < currentLeftLongitude)\n                currentRightLongitude += 2.0 * Math.PI;\n            double adjustedLeftLongitude = newLeftLongitude;\n            double adjustedRightLongitude = newRightLongitude;\n            if (adjustedRightLongitude < adjustedLeftLongitude)\n                adjustedRightLongitude += 2.0 * Math.PI;\n            // Compare to see what the relationship is\n            if (currentLeftLongitude <= adjustedLeftLongitude && currentRightLongitude >= adjustedRightLongitude) {\n                // No adjustment needed.\n            } else if (currentLeftLongitude >= adjustedLeftLongitude && currentRightLongitude <= adjustedRightLongitude) {\n                // New longitude entirely contains old one\n                leftLongitude = newLeftLongitude;\n                rightLongitude = newRightLongitude;\n            } else {\n                if (currentLeftLongitude > adjustedLeftLongitude) {\n                    // New left longitude needed\n                    leftLongitude = newLeftLongitude;\n                }\n                if (currentRightLongitude < adjustedRightLongitude) {\n                    // New right longitude needed\n                    rightLongitude = newRightLongitude;\n                }\n            }\n        }\n        double testRightLongitude = rightLongitude;\n        if (testRightLongitude < leftLongitude)\n            testRightLongitude += Math.PI * 2.0;\n        if (testRightLongitude - leftLongitude >= Math.PI * 2.0) {\n            noLongitudeBound = true;\n            leftLongitude = null;\n            rightLongitude = null;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2997acf74723385bd84aff1ea0b12af4aefde77","date":1430745542,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Bounds#addLongitudeBound(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Bounds#addLongitudeBound(double,double).mjava","sourceNew":"  protected void addLongitudeBound(double newLeftLongitude, double newRightLongitude) {\n    if (leftLongitude == null && rightLongitude == null) {\n      leftLongitude = newLeftLongitude;\n      rightLongitude = newRightLongitude;\n    } else {\n      // Map the current range to something monotonically increasing\n      double currentLeftLongitude = leftLongitude;\n      double currentRightLongitude = rightLongitude;\n      if (currentRightLongitude < currentLeftLongitude)\n        currentRightLongitude += 2.0 * Math.PI;\n      double adjustedLeftLongitude = newLeftLongitude;\n      double adjustedRightLongitude = newRightLongitude;\n      if (adjustedRightLongitude < adjustedLeftLongitude)\n        adjustedRightLongitude += 2.0 * Math.PI;\n      // Compare to see what the relationship is\n      if (currentLeftLongitude <= adjustedLeftLongitude && currentRightLongitude >= adjustedRightLongitude) {\n        // No adjustment needed.\n      } else if (currentLeftLongitude >= adjustedLeftLongitude && currentRightLongitude <= adjustedRightLongitude) {\n        // New longitude entirely contains old one\n        leftLongitude = newLeftLongitude;\n        rightLongitude = newRightLongitude;\n      } else {\n        if (currentLeftLongitude > adjustedLeftLongitude) {\n          // New left longitude needed\n          leftLongitude = newLeftLongitude;\n        }\n        if (currentRightLongitude < adjustedRightLongitude) {\n          // New right longitude needed\n          rightLongitude = newRightLongitude;\n        }\n      }\n    }\n    double testRightLongitude = rightLongitude;\n    if (testRightLongitude < leftLongitude)\n      testRightLongitude += Math.PI * 2.0;\n    // If the bound exceeds 180 degrees, we know we could have screwed up.\n    if (testRightLongitude - leftLongitude >= Math.PI) {\n      noLongitudeBound = true;\n      leftLongitude = null;\n      rightLongitude = null;\n    }\n  }\n\n","sourceOld":"    protected void addLongitudeBound(double newLeftLongitude, double newRightLongitude) {\n        if (leftLongitude == null && rightLongitude == null) {\n            leftLongitude = newLeftLongitude;\n            rightLongitude = newRightLongitude;\n        } else {\n            // Map the current range to something monotonically increasing\n            double currentLeftLongitude = leftLongitude;\n            double currentRightLongitude = rightLongitude;\n            if (currentRightLongitude < currentLeftLongitude)\n                currentRightLongitude += 2.0 * Math.PI;\n            double adjustedLeftLongitude = newLeftLongitude;\n            double adjustedRightLongitude = newRightLongitude;\n            if (adjustedRightLongitude < adjustedLeftLongitude)\n                adjustedRightLongitude += 2.0 * Math.PI;\n            // Compare to see what the relationship is\n            if (currentLeftLongitude <= adjustedLeftLongitude && currentRightLongitude >= adjustedRightLongitude) {\n                // No adjustment needed.\n            } else if (currentLeftLongitude >= adjustedLeftLongitude && currentRightLongitude <= adjustedRightLongitude) {\n                // New longitude entirely contains old one\n                leftLongitude = newLeftLongitude;\n                rightLongitude = newRightLongitude;\n            } else {\n                if (currentLeftLongitude > adjustedLeftLongitude) {\n                    // New left longitude needed\n                    leftLongitude = newLeftLongitude;\n                }\n                if (currentRightLongitude < adjustedRightLongitude) {\n                    // New right longitude needed\n                    rightLongitude = newRightLongitude;\n                }\n            }\n        }\n        double testRightLongitude = rightLongitude;\n        if (testRightLongitude < leftLongitude)\n            testRightLongitude += Math.PI * 2.0;\n        // If the bound exceeds 180 degrees, we know we could have screwed up.\n        if (testRightLongitude - leftLongitude >= Math.PI) {\n            noLongitudeBound = true;\n            leftLongitude = null;\n            rightLongitude = null;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Bounds#addLongitudeBound(double,double).mjava","pathOld":"/dev/null","sourceNew":"  protected void addLongitudeBound(double newLeftLongitude, double newRightLongitude) {\n    if (leftLongitude == null && rightLongitude == null) {\n      leftLongitude = newLeftLongitude;\n      rightLongitude = newRightLongitude;\n    } else {\n      // Map the current range to something monotonically increasing\n      double currentLeftLongitude = leftLongitude;\n      double currentRightLongitude = rightLongitude;\n      if (currentRightLongitude < currentLeftLongitude)\n        currentRightLongitude += 2.0 * Math.PI;\n      double adjustedLeftLongitude = newLeftLongitude;\n      double adjustedRightLongitude = newRightLongitude;\n      if (adjustedRightLongitude < adjustedLeftLongitude)\n        adjustedRightLongitude += 2.0 * Math.PI;\n      // Compare to see what the relationship is\n      if (currentLeftLongitude <= adjustedLeftLongitude && currentRightLongitude >= adjustedRightLongitude) {\n        // No adjustment needed.\n      } else if (currentLeftLongitude >= adjustedLeftLongitude && currentRightLongitude <= adjustedRightLongitude) {\n        // New longitude entirely contains old one\n        leftLongitude = newLeftLongitude;\n        rightLongitude = newRightLongitude;\n      } else {\n        if (currentLeftLongitude > adjustedLeftLongitude) {\n          // New left longitude needed\n          leftLongitude = newLeftLongitude;\n        }\n        if (currentRightLongitude < adjustedRightLongitude) {\n          // New right longitude needed\n          rightLongitude = newRightLongitude;\n        }\n      }\n    }\n    double testRightLongitude = rightLongitude;\n    if (testRightLongitude < leftLongitude)\n      testRightLongitude += Math.PI * 2.0;\n    // If the bound exceeds 180 degrees, we know we could have screwed up.\n    if (testRightLongitude - leftLongitude >= Math.PI) {\n      noLongitudeBound = true;\n      leftLongitude = null;\n      rightLongitude = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Bounds#addLongitudeBound(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Bounds#addLongitudeBound(double,double).mjava","sourceNew":"  protected void addLongitudeBound(double newLeftLongitude, double newRightLongitude) {\n    if (leftLongitude == null && rightLongitude == null) {\n      leftLongitude = newLeftLongitude;\n      rightLongitude = newRightLongitude;\n    } else {\n      // Map the current range to something monotonically increasing\n      double currentLeftLongitude = leftLongitude;\n      double currentRightLongitude = rightLongitude;\n      if (currentRightLongitude < currentLeftLongitude)\n        currentRightLongitude += 2.0 * Math.PI;\n      double adjustedLeftLongitude = newLeftLongitude;\n      double adjustedRightLongitude = newRightLongitude;\n      if (adjustedRightLongitude < adjustedLeftLongitude)\n        adjustedRightLongitude += 2.0 * Math.PI;\n      // Compare to see what the relationship is\n      if (currentLeftLongitude <= adjustedLeftLongitude && currentRightLongitude >= adjustedRightLongitude) {\n        // No adjustment needed.\n      } else if (currentLeftLongitude >= adjustedLeftLongitude && currentRightLongitude <= adjustedRightLongitude) {\n        // New longitude entirely contains old one\n        leftLongitude = newLeftLongitude;\n        rightLongitude = newRightLongitude;\n      } else {\n        if (currentLeftLongitude > adjustedLeftLongitude) {\n          // New left longitude needed\n          leftLongitude = newLeftLongitude;\n        }\n        if (currentRightLongitude < adjustedRightLongitude) {\n          // New right longitude needed\n          rightLongitude = newRightLongitude;\n        }\n      }\n    }\n    double testRightLongitude = rightLongitude;\n    if (testRightLongitude < leftLongitude)\n      testRightLongitude += Math.PI * 2.0;\n    // If the bound exceeds 180 degrees, we know we could have screwed up.\n    if (testRightLongitude - leftLongitude >= Math.PI) {\n      noLongitudeBound = true;\n      leftLongitude = null;\n      rightLongitude = null;\n    }\n  }\n\n","sourceOld":"  protected void addLongitudeBound(double newLeftLongitude, double newRightLongitude) {\n    if (leftLongitude == null && rightLongitude == null) {\n      leftLongitude = newLeftLongitude;\n      rightLongitude = newRightLongitude;\n    } else {\n      // Map the current range to something monotonically increasing\n      double currentLeftLongitude = leftLongitude;\n      double currentRightLongitude = rightLongitude;\n      if (currentRightLongitude < currentLeftLongitude)\n        currentRightLongitude += 2.0 * Math.PI;\n      double adjustedLeftLongitude = newLeftLongitude;\n      double adjustedRightLongitude = newRightLongitude;\n      if (adjustedRightLongitude < adjustedLeftLongitude)\n        adjustedRightLongitude += 2.0 * Math.PI;\n      // Compare to see what the relationship is\n      if (currentLeftLongitude <= adjustedLeftLongitude && currentRightLongitude >= adjustedRightLongitude) {\n        // No adjustment needed.\n      } else if (currentLeftLongitude >= adjustedLeftLongitude && currentRightLongitude <= adjustedRightLongitude) {\n        // New longitude entirely contains old one\n        leftLongitude = newLeftLongitude;\n        rightLongitude = newRightLongitude;\n      } else {\n        if (currentLeftLongitude > adjustedLeftLongitude) {\n          // New left longitude needed\n          leftLongitude = newLeftLongitude;\n        }\n        if (currentRightLongitude < adjustedRightLongitude) {\n          // New right longitude needed\n          rightLongitude = newRightLongitude;\n        }\n      }\n    }\n    double testRightLongitude = rightLongitude;\n    if (testRightLongitude < leftLongitude)\n      testRightLongitude += Math.PI * 2.0;\n    // If the bound exceeds 180 degrees, we know we could have screwed up.\n    if (testRightLongitude - leftLongitude >= Math.PI) {\n      noLongitudeBound = true;\n      leftLongitude = null;\n      rightLongitude = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"47619c5413e53c4d414c1ececa274bef0cd3c799":["851e4197476b684154a7b65f996f535522e67400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["47619c5413e53c4d414c1ececa274bef0cd3c799"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2997acf74723385bd84aff1ea0b12af4aefde77"],"851e4197476b684154a7b65f996f535522e67400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"47619c5413e53c4d414c1ececa274bef0cd3c799":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","851e4197476b684154a7b65f996f535522e67400"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"851e4197476b684154a7b65f996f535522e67400":["47619c5413e53c4d414c1ececa274bef0cd3c799"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}