{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testMergingAfterDeleteAll().mjava","commits":[{"id":"d9e22bdf0692bfa61e342b04a6ac7078670c1e16","date":1436866730,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testMergingAfterDeleteAll().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure merges still kick off after IW.deleteAll!\n  public void testMergingAfterDeleteAll() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(2);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(1);\n    iwc.setMergePolicy(mp);\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.commit();\n    w.deleteAll();\n\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w, true);\n    assertEquals(1, r.leaves().size());\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testMergingAfterDeleteAll().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testMergingAfterDeleteAll().mjava","sourceNew":"  // Make sure merges still kick off after IW.deleteAll!\n  public void testMergingAfterDeleteAll() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(2);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(1);\n    iwc.setMergePolicy(mp);\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.commit();\n    w.deleteAll();\n\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.leaves().size());\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure merges still kick off after IW.deleteAll!\n  public void testMergingAfterDeleteAll() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(2);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(1);\n    iwc.setMergePolicy(mp);\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.commit();\n    w.deleteAll();\n\n    for(int i=0;i<100;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w, true);\n    assertEquals(1, r.leaves().size());\n    r.close();\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9e22bdf0692bfa61e342b04a6ac7078670c1e16":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a1862266772deb28cdcb7d996b64d2177022687":["d9e22bdf0692bfa61e342b04a6ac7078670c1e16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a1862266772deb28cdcb7d996b64d2177022687"]},"commit2Childs":{"d9e22bdf0692bfa61e342b04a6ac7078670c1e16":["2a1862266772deb28cdcb7d996b64d2177022687"],"2a1862266772deb28cdcb7d996b64d2177022687":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9e22bdf0692bfa61e342b04a6ac7078670c1e16"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}