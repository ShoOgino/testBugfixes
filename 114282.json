{"path":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","commits":[{"id":"36f5a8c57e16c0f801006a52f87c75378427852e","date":1393256707,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#testLargerRandom().mjava","sourceNew":"  @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    checkSort(new OfflineSorter(OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(16), OfflineSorter.defaultTempDir(), OfflineSorter.MAX_TEMPFILES), \n        generateRandom((int)OfflineSorter.MB * 100));\n  }\n\n","sourceOld":"  @Test @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    checkSort(new Sort(Sort.DEFAULT_COMPARATOR, BufferSize.megabytes(16), Sort.defaultTempDir(), Sort.MAX_TEMPFILES), \n        generateRandom((int)Sort.MB * 100));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#testLargerRandom().mjava","sourceNew":"  @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    checkSort(new OfflineSorter(OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(16), OfflineSorter.defaultTempDir(), OfflineSorter.MAX_TEMPFILES), \n        generateRandom((int)OfflineSorter.MB * 100));\n  }\n\n","sourceOld":"  @Test @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    checkSort(new Sort(Sort.DEFAULT_COMPARATOR, BufferSize.megabytes(16), Sort.defaultTempDir(), Sort.MAX_TEMPFILES), \n        generateRandom((int)Sort.MB * 100));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2","date":1443129829,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","sourceNew":"  @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    checkSort(new OfflineSorter(OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(16), OfflineSorter.getDefaultTempDir(), OfflineSorter.MAX_TEMPFILES), \n        generateRandom((int)OfflineSorter.MB * 100));\n  }\n\n","sourceOld":"  @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    checkSort(new OfflineSorter(OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(16), OfflineSorter.defaultTempDir(), OfflineSorter.MAX_TEMPFILES), \n        generateRandom((int)OfflineSorter.MB * 100));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","sourceNew":"  @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    try (Directory dir = newDirectoryNoVirusScanner()) {\n      checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(16), OfflineSorter.MAX_TEMPFILES), \n                generateRandom((int)OfflineSorter.MB * 100));\n    }\n  }\n\n","sourceOld":"  @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    checkSort(new OfflineSorter(OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(16), OfflineSorter.getDefaultTempDir(), OfflineSorter.MAX_TEMPFILES), \n        generateRandom((int)OfflineSorter.MB * 100));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c792eecc49f00e913405a683798a51821d0de11d","date":1445015793,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","sourceNew":"  @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    try (Directory dir = newFSDirectoryNoVirusScanner()) {\n      checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(16), OfflineSorter.MAX_TEMPFILES), \n                generateRandom((int)OfflineSorter.MB * 100));\n    }\n  }\n\n","sourceOld":"  @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    try (Directory dir = newDirectoryNoVirusScanner()) {\n      checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(16), OfflineSorter.MAX_TEMPFILES), \n                generateRandom((int)OfflineSorter.MB * 100));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","sourceNew":"  @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    try (Directory dir = newFSDirectory(createTempDir())) {\n      checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(16), OfflineSorter.MAX_TEMPFILES), \n                generateRandom((int)OfflineSorter.MB * 100));\n    }\n  }\n\n","sourceOld":"  @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    try (Directory dir = newFSDirectoryNoVirusScanner()) {\n      checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(16), OfflineSorter.MAX_TEMPFILES), \n                generateRandom((int)OfflineSorter.MB * 100));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","sourceNew":"  @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    try (Directory dir = newFSDirectory(createTempDir())) {\n      checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(16), OfflineSorter.MAX_TEMPFILES), \n                generateRandom((int)OfflineSorter.MB * 100));\n    }\n  }\n\n","sourceOld":"  @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    try (Directory dir = newFSDirectoryNoVirusScanner()) {\n      checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(16), OfflineSorter.MAX_TEMPFILES), \n                generateRandom((int)OfflineSorter.MB * 100));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","sourceNew":"  @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    try (Directory dir = newFSDirectory(createTempDir())) {\n      checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(16), OfflineSorter.MAX_TEMPFILES), \n                generateRandom((int)OfflineSorter.MB * 100));\n    }\n  }\n\n","sourceOld":"  @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    try (Directory dir = newFSDirectoryNoVirusScanner()) {\n      checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(16), OfflineSorter.MAX_TEMPFILES), \n                generateRandom((int)OfflineSorter.MB * 100));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","sourceNew":"  @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    try (Directory dir = newFSDirectory(createTempDir())) {\n      checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(16), OfflineSorter.MAX_TEMPFILES), \n                generateRandom((int)OfflineSorter.MB * 100));\n    }\n  }\n\n","sourceOld":"  @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    try (Directory dir = newFSDirectoryNoVirusScanner()) {\n      checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(16), OfflineSorter.MAX_TEMPFILES), \n                generateRandom((int)OfflineSorter.MB * 100));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee52259641568741fbc6ecc51284431e2a36475c","date":1459331525,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","sourceNew":"  @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    try (Directory dir = newFSDirectory(createTempDir())) {\n      checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(16), OfflineSorter.MAX_TEMPFILES, -1), \n                generateRandom((int)OfflineSorter.MB * 100));\n    }\n  }\n\n","sourceOld":"  @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    try (Directory dir = newFSDirectory(createTempDir())) {\n      checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(16), OfflineSorter.MAX_TEMPFILES), \n                generateRandom((int)OfflineSorter.MB * 100));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dcb0432bcb41451b41e9aaaabe99f5d208258fe","date":1493203108,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","sourceNew":"  @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    try (Directory dir = newFSDirectory(createTempDir())) {\n      ExecutorService exec = randomExecutorServiceOrNull();\n      checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(16), OfflineSorter.MAX_TEMPFILES, -1, exec, TestUtil.nextInt(random(), 1, 4)),\n                generateRandom((int)OfflineSorter.MB * 100));\n      if (exec != null) {\n        exec.shutdownNow();\n      }\n    }\n  }\n\n","sourceOld":"  @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    try (Directory dir = newFSDirectory(createTempDir())) {\n      checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(16), OfflineSorter.MAX_TEMPFILES, -1), \n                generateRandom((int)OfflineSorter.MB * 100));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testLargerRandom().mjava","sourceNew":"  @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    try (Directory dir = newFSDirectory(createTempDir())) {\n      ExecutorService exec = randomExecutorServiceOrNull();\n      checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(16), OfflineSorter.MAX_TEMPFILES, -1, exec, TestUtil.nextInt(random(), 1, 4)),\n                generateRandom((int)OfflineSorter.MB * 100));\n      if (exec != null) {\n        exec.shutdownNow();\n      }\n    }\n  }\n\n","sourceOld":"  @Nightly\n  public void testLargerRandom() throws Exception {\n    // Sort 100MB worth of data with 15mb buffer.\n    try (Directory dir = newFSDirectory(createTempDir())) {\n      checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(16), OfflineSorter.MAX_TEMPFILES, -1), \n                generateRandom((int)OfflineSorter.MB * 100));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a207d19eac354d649c3f0e2cce070017c78125e":["c792eecc49f00e913405a683798a51821d0de11d","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["c792eecc49f00e913405a683798a51821d0de11d","b470f36a9372c97283360b1304eacbde22df6c0d"],"7dcb0432bcb41451b41e9aaaabe99f5d208258fe":["ee52259641568741fbc6ecc51284431e2a36475c"],"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["ee52259641568741fbc6ecc51284431e2a36475c","7dcb0432bcb41451b41e9aaaabe99f5d208258fe"],"c792eecc49f00e913405a683798a51821d0de11d":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","36f5a8c57e16c0f801006a52f87c75378427852e"],"36f5a8c57e16c0f801006a52f87c75378427852e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b470f36a9372c97283360b1304eacbde22df6c0d":["c792eecc49f00e913405a683798a51821d0de11d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee52259641568741fbc6ecc51284431e2a36475c":["5a207d19eac354d649c3f0e2cce070017c78125e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["c792eecc49f00e913405a683798a51821d0de11d"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dcb0432bcb41451b41e9aaaabe99f5d208258fe"]},"commit2Childs":{"5a207d19eac354d649c3f0e2cce070017c78125e":["ee52259641568741fbc6ecc51284431e2a36475c"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"7dcb0432bcb41451b41e9aaaabe99f5d208258fe":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"c792eecc49f00e913405a683798a51821d0de11d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"36f5a8c57e16c0f801006a52f87c75378427852e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","36f5a8c57e16c0f801006a52f87c75378427852e"],"ee52259641568741fbc6ecc51284431e2a36475c":["7dcb0432bcb41451b41e9aaaabe99f5d208258fe","e9017cf144952056066919f1ebc7897ff9bd71b1"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["c792eecc49f00e913405a683798a51821d0de11d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}