{"path":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoHandler().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoHandler().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoHandler().mjava","sourceNew":"  @Test\n  public void testCacheVetoHandler() throws Exception {\n    File f=makeFile(CONTENTS);\n    HttpMethodBase m=getUpdateMethod(\"GET\");\n    m.setQueryString(new NameValuePair[] { new NameValuePair(\"stream.file\",f.getCanonicalPath())});\n    getClient().executeMethod(m);\n    assertEquals(200, m.getStatusCode());\n    checkVetoHeaders(m, true);\n  }\n\n","sourceOld":"  @Test\n  public void testCacheVetoHandler() throws Exception {\n    File f=makeFile(CONTENTS);\n    HttpMethodBase m=getUpdateMethod(\"GET\");\n    m.setQueryString(new NameValuePair[] { new NameValuePair(\"stream.file\",f.getCanonicalPath())});\n    getClient().executeMethod(m);\n    assertEquals(200, m.getStatusCode());\n    checkVetoHeaders(m, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoHandler().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoHandler().mjava","sourceNew":"  @Test\n  public void testCacheVetoHandler() throws Exception {\n    File f=makeFile(CONTENTS);\n    HttpMethodBase m=getUpdateMethod(\"GET\");\n    m.setQueryString(new NameValuePair[] { new NameValuePair(\"stream.file\",f.getCanonicalPath())});\n    getClient().executeMethod(m);\n    assertEquals(200, m.getStatusCode());\n    checkVetoHeaders(m, true);\n  }\n\n","sourceOld":"  @Test\n  public void testCacheVetoHandler() throws Exception {\n    File f=makeFile(CONTENTS);\n    HttpMethodBase m=getUpdateMethod(\"GET\");\n    m.setQueryString(new NameValuePair[] { new NameValuePair(\"stream.file\",f.getCanonicalPath())});\n    getClient().executeMethod(m);\n    assertEquals(200, m.getStatusCode());\n    checkVetoHeaders(m, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoHandler().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoHandler().mjava","sourceNew":"  @Test\n  public void testCacheVetoHandler() throws Exception {\n    File f=makeFile(CONTENTS);\n    HttpMethodBase m=getUpdateMethod(\"GET\");\n    m.setQueryString(new NameValuePair[] { new NameValuePair(\"stream.file\",f.getCanonicalPath())});\n    getClient().executeMethod(m);\n    assertEquals(200, m.getStatusCode());\n    checkVetoHeaders(m, true);\n  }\n\n","sourceOld":"  @Test\n  public void testCacheVetoHandler() throws Exception {\n    File f=makeFile(CONTENTS);\n    HttpMethodBase m=getUpdateMethod(\"GET\");\n    m.setQueryString(new NameValuePair[] { new NameValuePair(\"stream.file\",f.getCanonicalPath())});\n    getClient().executeMethod(m);\n    assertEquals(200, m.getStatusCode());\n    checkVetoHeaders(m, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoHandler().mjava","sourceNew":"  @Test\n  public void testCacheVetoHandler() throws Exception {\n    File f=makeFile(CONTENTS);\n    HttpRequestBase m=getUpdateMethod(\"GET\", \"stream.file\", f.getCanonicalPath());\n    HttpResponse response = getClient().execute(m);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    checkVetoHeaders(response, true);\n  }\n\n","sourceOld":"  @Test\n  public void testCacheVetoHandler() throws Exception {\n    File f=makeFile(CONTENTS);\n    HttpMethodBase m=getUpdateMethod(\"GET\");\n    m.setQueryString(new NameValuePair[] { new NameValuePair(\"stream.file\",f.getCanonicalPath())});\n    getClient().executeMethod(m);\n    assertEquals(200, m.getStatusCode());\n    checkVetoHeaders(m, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c21fd09c177776b98a75be1a49c97a3b6f94095b","date":1334961546,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoHandler().mjava","sourceNew":"  @Test\n  public void testCacheVetoHandler() throws Exception {\n    File f=makeFile(CONTENTS);\n    HttpRequestBase m=getUpdateMethod(\"GET\", \n        CommonParams.STREAM_FILE, f.getCanonicalPath(),\n        CommonParams.STREAM_CONTENTTYPE, \"text/csv\" );\n    HttpResponse response = getClient().execute(m);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    checkVetoHeaders(response, true);\n  }\n\n","sourceOld":"  @Test\n  public void testCacheVetoHandler() throws Exception {\n    File f=makeFile(CONTENTS);\n    HttpRequestBase m=getUpdateMethod(\"GET\", \"stream.file\", f.getCanonicalPath());\n    HttpResponse response = getClient().execute(m);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    checkVetoHeaders(response, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91489a962261537277285219d9ee9ee40f4053c0","date":1341957256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoHandler().mjava","sourceNew":"  @Test\n  public void testCacheVetoHandler() throws Exception {\n    File f=makeFile(CONTENTS);\n    HttpRequestBase m=getUpdateMethod(\"GET\", \n        CommonParams.STREAM_FILE, f.getCanonicalPath(),\n        CommonParams.STREAM_CONTENTTYPE, \"text/csv\" );\n    HttpResponse response = getClient().execute(m);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    checkVetoHeaders(response, true);\n    f.delete();\n  }\n\n","sourceOld":"  @Test\n  public void testCacheVetoHandler() throws Exception {\n    File f=makeFile(CONTENTS);\n    HttpRequestBase m=getUpdateMethod(\"GET\", \n        CommonParams.STREAM_FILE, f.getCanonicalPath(),\n        CommonParams.STREAM_CONTENTTYPE, \"text/csv\" );\n    HttpResponse response = getClient().execute(m);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    checkVetoHeaders(response, true);\n  }\n\n","bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoHandler().mjava","sourceNew":"  @Test\n  public void testCacheVetoHandler() throws Exception {\n    File f=makeFile(CONTENTS);\n    HttpRequestBase m=getUpdateMethod(\"GET\", \n        CommonParams.STREAM_FILE, f.getCanonicalPath(),\n        CommonParams.STREAM_CONTENTTYPE, \"text/csv\" );\n    HttpResponse response = getClient().execute(m);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    checkVetoHeaders(response, true);\n    f.delete();\n  }\n\n","sourceOld":"  @Test\n  public void testCacheVetoHandler() throws Exception {\n    File f=makeFile(CONTENTS);\n    HttpRequestBase m=getUpdateMethod(\"GET\", \n        CommonParams.STREAM_FILE, f.getCanonicalPath(),\n        CommonParams.STREAM_CONTENTTYPE, \"text/csv\" );\n    HttpResponse response = getClient().execute(m);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    checkVetoHeaders(response, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoHandler().mjava","sourceNew":"  @Test\n  public void testCacheVetoHandler() throws Exception {\n    File f=makeFile(CONTENTS);\n    HttpRequestBase m=getUpdateMethod(\"GET\", \n        CommonParams.STREAM_FILE, f.getCanonicalPath(),\n        CommonParams.STREAM_CONTENTTYPE, \"text/csv\" );\n    HttpResponse response = getClient().execute(m);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    checkVetoHeaders(response, true);\n    f.delete();\n  }\n\n","sourceOld":"  @Test\n  public void testCacheVetoHandler() throws Exception {\n    File f=makeFile(CONTENTS);\n    HttpRequestBase m=getUpdateMethod(\"GET\", \n        CommonParams.STREAM_FILE, f.getCanonicalPath(),\n        CommonParams.STREAM_CONTENTTYPE, \"text/csv\" );\n    HttpResponse response = getClient().execute(m);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    checkVetoHeaders(response, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest#testCacheVetoHandler().mjava","sourceNew":"  @Test\n  public void testCacheVetoHandler() throws Exception {\n    File f=makeFile(CONTENTS);\n    HttpRequestBase m=getUpdateMethod(\"GET\", \n        CommonParams.STREAM_FILE, f.getCanonicalPath(),\n        CommonParams.STREAM_CONTENTTYPE, \"text/csv\" );\n    HttpResponse response = getClient().execute(m);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    checkVetoHeaders(response, true);\n    Files.delete(f.toPath());\n  }\n\n","sourceOld":"  @Test\n  public void testCacheVetoHandler() throws Exception {\n    File f=makeFile(CONTENTS);\n    HttpRequestBase m=getUpdateMethod(\"GET\", \n        CommonParams.STREAM_FILE, f.getCanonicalPath(),\n        CommonParams.STREAM_CONTENTTYPE, \"text/csv\" );\n    HttpResponse response = getClient().execute(m);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    checkVetoHeaders(response, true);\n    f.delete();\n  }\n\n","bugFix":["91489a962261537277285219d9ee9ee40f4053c0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c21fd09c177776b98a75be1a49c97a3b6f94095b":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"91489a962261537277285219d9ee9ee40f4053c0":["c21fd09c177776b98a75be1a49c97a3b6f94095b"],"aba371508186796cc6151d8223a5b4e16d02e26e":["c21fd09c177776b98a75be1a49c97a3b6f94095b","91489a962261537277285219d9ee9ee40f4053c0"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["91489a962261537277285219d9ee9ee40f4053c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c21fd09c177776b98a75be1a49c97a3b6f94095b","91489a962261537277285219d9ee9ee40f4053c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cbc3688252d4a8045d69a164236b2cf87b721f17"]},"commit2Childs":{"c21fd09c177776b98a75be1a49c97a3b6f94095b":["91489a962261537277285219d9ee9ee40f4053c0","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"91489a962261537277285219d9ee9ee40f4053c0":["aba371508186796cc6151d8223a5b4e16d02e26e","cbc3688252d4a8045d69a164236b2cf87b721f17","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"cbc3688252d4a8045d69a164236b2cf87b721f17":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["c21fd09c177776b98a75be1a49c97a3b6f94095b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}