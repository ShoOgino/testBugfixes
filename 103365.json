{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testRecursiveWildCard().mjava","commits":[{"id":"caf7f9acfdff984e59be68054cc1e0048b8ee030","date":1407766058,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testRecursiveWildCard().mjava","pathOld":"/dev/null","sourceNew":"  public void testRecursiveWildCard() throws IOException {\n    String json =\"{\\n\" +\n        \" \\\"a\\\":\\\"A\\\" ,\\n\" +\n        \" \\\"b\\\":[\\n\" +\n        \"     {\\\"c\\\":\\\"C\\\",\\\"d\\\":\\\"D\\\" ,\\\"e\\\": {\\n\" +\n        \"                         \\\"s\\\":\\\"S\\\",\\n\" +\n        \"                         \\\"t\\\":3 ,\\\"u\\\":{\\\"v\\\":3.1234,\\\"w\\\":false}}},\\n\" +\n        \"     {\\\"c\\\":\\\"C1\\\",\\\"d\\\":\\\"D1\\\"},\\n\" +\n        \"     {\\\"c\\\":\\\"C2\\\",\\\"d\\\":\\\"D2\\\"}\\n\" +\n        \" ]\\n\" +\n        \"}\";\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    streamer = JsonRecordReader.getInst(\"/b\", Collections.singletonList(\"/b/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(3, records.size());\n    assertEquals(\"records \"+records,  3l, ((Map)records.get(0)).get(\"t\") );\n    assertEquals( \"records \"+records,\"S\", ((Map)records.get(0)).get(\"s\") );\n    assertEquals( \"records \"+records,3.1234, ((Map)records.get(0)).get(\"v\") );\n    assertEquals( \"records \"+records,false, ((Map)records.get(0)).get(\"w\") );\n    for (Map<String, Object> record : records) {\n      assertNotNull(\"records \"+records,record.get(\"c\"));\n      assertNotNull(\"records \"+records,record.get(\"d\"));\n    }\n\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(1, records.size());\n    assertEquals(3, ((List)((Map)records.get(0)).get(\"c\")).size() );\n    assertEquals(3, ((List)((Map)records.get(0)).get(\"d\")).size() );\n    assertEquals(\"records \"+records,  3l, ((Map)records.get(0)).get(\"t\") );\n    assertEquals( \"records \"+records,\"S\", ((Map)records.get(0)).get(\"s\") );\n    assertEquals( \"records \"+records,\"A\", ((Map)records.get(0)).get(\"a\") );\n    assertEquals( \"records \"+records,false, ((Map)records.get(0)).get(\"w\") );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2330174b38007b9942205a2679db9ddffe35af89","date":1423653924,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testRecursiveWildCard().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testRecursiveWildCard().mjava","sourceNew":"  public void testRecursiveWildCard() throws IOException {\n    String json = \"{\\n\" +\n        \" \\\"a\\\":\\\"A\\\" ,\\n\" +\n        \" \\\"b\\\":[\\n\" +\n        \"     {\\\"c\\\":\\\"C\\\",\\\"d\\\":\\\"D\\\" ,\\\"e\\\": {\\n\" +\n        \"                         \\\"s\\\":\\\"S\\\",\\n\" +\n        \"                         \\\"t\\\":3 ,\\\"u\\\":{\\\"v\\\":3.1234,\\\"w\\\":false}}},\\n\" +\n        \"     {\\\"c\\\":\\\"C1\\\",\\\"d\\\":\\\"D1\\\"},\\n\" +\n        \"     {\\\"c\\\":\\\"C2\\\",\\\"d\\\":\\\"D2\\\"}\\n\" +\n        \" ]\\n\" +\n        \"}\";\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    streamer = JsonRecordReader.getInst(\"/b\", Collections.singletonList(\"/b/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(3, records.size());\n    assertEquals(\"records \" + records, 3l, ((Map) records.get(0)).get(\"t\"));\n    assertEquals(\"records \" + records, \"S\", ((Map) records.get(0)).get(\"s\"));\n    assertEquals(\"records \" + records, 3.1234, ((Map) records.get(0)).get(\"v\"));\n    assertEquals(\"records \" + records, false, ((Map) records.get(0)).get(\"w\"));\n    for (Map<String, Object> record : records) {\n      assertNotNull(\"records \" + records, record.get(\"c\"));\n      assertNotNull(\"records \" + records, record.get(\"d\"));\n    }\n\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(1, records.size());\n    assertEquals(3, ((List) ((Map) records.get(0)).get(\"c\")).size());\n    assertEquals(3, ((List) ((Map) records.get(0)).get(\"d\")).size());\n    assertEquals(\"records \" + records, 3l, ((Map) records.get(0)).get(\"t\"));\n    assertEquals(\"records \" + records, \"S\", ((Map) records.get(0)).get(\"s\"));\n    assertEquals(\"records \" + records, \"A\", ((Map) records.get(0)).get(\"a\"));\n    assertEquals(\"records \" + records, false, ((Map) records.get(0)).get(\"w\"));\n\n  }\n\n","sourceOld":"  public void testRecursiveWildCard() throws IOException {\n    String json =\"{\\n\" +\n        \" \\\"a\\\":\\\"A\\\" ,\\n\" +\n        \" \\\"b\\\":[\\n\" +\n        \"     {\\\"c\\\":\\\"C\\\",\\\"d\\\":\\\"D\\\" ,\\\"e\\\": {\\n\" +\n        \"                         \\\"s\\\":\\\"S\\\",\\n\" +\n        \"                         \\\"t\\\":3 ,\\\"u\\\":{\\\"v\\\":3.1234,\\\"w\\\":false}}},\\n\" +\n        \"     {\\\"c\\\":\\\"C1\\\",\\\"d\\\":\\\"D1\\\"},\\n\" +\n        \"     {\\\"c\\\":\\\"C2\\\",\\\"d\\\":\\\"D2\\\"}\\n\" +\n        \" ]\\n\" +\n        \"}\";\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    streamer = JsonRecordReader.getInst(\"/b\", Collections.singletonList(\"/b/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(3, records.size());\n    assertEquals(\"records \"+records,  3l, ((Map)records.get(0)).get(\"t\") );\n    assertEquals( \"records \"+records,\"S\", ((Map)records.get(0)).get(\"s\") );\n    assertEquals( \"records \"+records,3.1234, ((Map)records.get(0)).get(\"v\") );\n    assertEquals( \"records \"+records,false, ((Map)records.get(0)).get(\"w\") );\n    for (Map<String, Object> record : records) {\n      assertNotNull(\"records \"+records,record.get(\"c\"));\n      assertNotNull(\"records \"+records,record.get(\"d\"));\n    }\n\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(1, records.size());\n    assertEquals(3, ((List)((Map)records.get(0)).get(\"c\")).size() );\n    assertEquals(3, ((List)((Map)records.get(0)).get(\"d\")).size() );\n    assertEquals(\"records \"+records,  3l, ((Map)records.get(0)).get(\"t\") );\n    assertEquals( \"records \"+records,\"S\", ((Map)records.get(0)).get(\"s\") );\n    assertEquals( \"records \"+records,\"A\", ((Map)records.get(0)).get(\"a\") );\n    assertEquals( \"records \"+records,false, ((Map)records.get(0)).get(\"w\") );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2330174b38007b9942205a2679db9ddffe35af89":["caf7f9acfdff984e59be68054cc1e0048b8ee030"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"caf7f9acfdff984e59be68054cc1e0048b8ee030":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2330174b38007b9942205a2679db9ddffe35af89"]},"commit2Childs":{"2330174b38007b9942205a2679db9ddffe35af89":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["caf7f9acfdff984e59be68054cc1e0048b8ee030"],"caf7f9acfdff984e59be68054cc1e0048b8ee030":["2330174b38007b9942205a2679db9ddffe35af89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}