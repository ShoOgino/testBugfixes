{"path":"lucene/core/src/java/org/apache/lucene/document/Document#get(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#get(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Document#get(String).mjava","sourceNew":"  /** Returns the string value of the field with the given name if any exist in\n   * this document, or null.  If multiple fields exist with this name, this\n   * method returns the first value added. If only binary fields with this name\n   * exist, returns null.\n   * For {@link NumericField} it returns the string value of the number. If you want\n   * the actual {@code NumericField} instance back, use {@link #getField}.\n   */\n  public final String get(String name) {\n    for (IndexableField field : fields) {\n      if (field.name().equals(name) && field.stringValue() != null) {\n        return field.stringValue();\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns the string value of the field with the given name if any exist in\n   * this document, or null.  If multiple fields exist with this name, this\n   * method returns the first value added. If only binary fields with this name\n   * exist, returns null.\n   * For {@link NumericField} it returns the string value of the number. If you want\n   * the actual {@code NumericField} instance back, use {@link #getField}.\n   */\n  public final String get(String name) {\n    for (IndexableField field : fields) {\n      if (field.name().equals(name) && field.stringValue() != null) {\n        return field.stringValue();\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#get(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Document#get(String).mjava","sourceNew":"  /** Returns the string value of the field with the given name if any exist in\n   * this document, or null.  If multiple fields exist with this name, this\n   * method returns the first value added. If only binary fields with this name\n   * exist, returns null.\n   * For {@link IntField}, {@link LongField}, {@link\n   * FloatField} and {@link DoubleField} it returns the string value of the number. If you want\n   * the actual numeric field instance back, use {@link #getField}.\n   */\n  public final String get(String name) {\n    for (IndexableField field : fields) {\n      if (field.name().equals(name) && field.stringValue() != null) {\n        return field.stringValue();\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns the string value of the field with the given name if any exist in\n   * this document, or null.  If multiple fields exist with this name, this\n   * method returns the first value added. If only binary fields with this name\n   * exist, returns null.\n   * For {@link NumericField} it returns the string value of the number. If you want\n   * the actual {@code NumericField} instance back, use {@link #getField}.\n   */\n  public final String get(String name) {\n    for (IndexableField field : fields) {\n      if (field.name().equals(name) && field.stringValue() != null) {\n        return field.stringValue();\n      }\n    }\n    return null;\n  }\n\n","bugFix":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","date":1341524239,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#get(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Document#get(String).mjava","sourceNew":"  /** Returns the string value of the field with the given name if any exist in\n   * this document, or null.  If multiple fields exist with this name, this\n   * method returns the first value added. If only binary fields with this name\n   * exist, returns null.\n   * For {@link IntField}, {@link LongField}, {@link\n   * FloatField} and {@link DoubleField} it returns the string value of the number. If you want\n   * the actual numeric field instance back, use {@link #getField}.\n   */\n  public final String get(String name) {\n    Iterator<StorableField> it = storedFieldsIterator();\n    \n    while (it.hasNext()) {\n      StorableField field = it.next();\n      if (field.name().equals(name) && field.stringValue() != null) {\n        return field.stringValue();\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns the string value of the field with the given name if any exist in\n   * this document, or null.  If multiple fields exist with this name, this\n   * method returns the first value added. If only binary fields with this name\n   * exist, returns null.\n   * For {@link IntField}, {@link LongField}, {@link\n   * FloatField} and {@link DoubleField} it returns the string value of the number. If you want\n   * the actual numeric field instance back, use {@link #getField}.\n   */\n  public final String get(String name) {\n    for (IndexableField field : fields) {\n      if (field.name().equals(name) && field.stringValue() != null) {\n        return field.stringValue();\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#get(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Document#get(String).mjava","sourceNew":"  /** Returns the string value of the field with the given name if any exist in\n   * this document, or null.  If multiple fields exist with this name, this\n   * method returns the first value added. If only binary fields with this name\n   * exist, returns null.\n   * For {@link IntField}, {@link LongField}, {@link\n   * FloatField} and {@link DoubleField} it returns the string value of the number. If you want\n   * the actual numeric field instance back, use {@link #getField}.\n   */\n  public final String get(String name) {\n    Iterator<Field> it = storedFieldsIterator();\n    \n    while (it.hasNext()) {\n      StorableField field = it.next();\n      if (field.name().equals(name) && field.stringValue() != null) {\n        return field.stringValue();\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns the string value of the field with the given name if any exist in\n   * this document, or null.  If multiple fields exist with this name, this\n   * method returns the first value added. If only binary fields with this name\n   * exist, returns null.\n   * For {@link IntField}, {@link LongField}, {@link\n   * FloatField} and {@link DoubleField} it returns the string value of the number. If you want\n   * the actual numeric field instance back, use {@link #getField}.\n   */\n  public final String get(String name) {\n    Iterator<StorableField> it = storedFieldsIterator();\n    \n    while (it.hasNext()) {\n      StorableField field = it.next();\n      if (field.name().equals(name) && field.stringValue() != null) {\n        return field.stringValue();\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#get(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Document#get(String).mjava","sourceNew":"  /** Returns the string value of the field with the given name if any exist in\n   * this document, or null.  If multiple fields exist with this name, this\n   * method returns the first value added. If only binary fields with this name\n   * exist, returns null.\n   * For {@link IntField}, {@link LongField}, {@link\n   * FloatField} and {@link DoubleField} it returns the string value of the number. If you want\n   * the actual numeric field instance back, use {@link #getField}.\n   */\n  public final String get(String name) {\n    Iterator<Field> it = storedFieldsIterator();\n    \n    while (it.hasNext()) {\n      StorableField field = it.next();\n      if (field.name().equals(name) && field.stringValue() != null) {\n        return field.stringValue();\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns the string value of the field with the given name if any exist in\n   * this document, or null.  If multiple fields exist with this name, this\n   * method returns the first value added. If only binary fields with this name\n   * exist, returns null.\n   * For {@link IntField}, {@link LongField}, {@link\n   * FloatField} and {@link DoubleField} it returns the string value of the number. If you want\n   * the actual numeric field instance back, use {@link #getField}.\n   */\n  public final String get(String name) {\n    for (IndexableField field : fields) {\n      if (field.name().equals(name) && field.stringValue() != null) {\n        return field.stringValue();\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"286d87eabbc79863e93070d6126d558a2ca0fb28","date":1352063339,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#get(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Document#get(String).mjava","sourceNew":"  /** Returns the string value of the field with the given name if any exist in\n   * this document, or null.  If multiple fields exist with this name, this\n   * method returns the first value added. If only binary fields with this name\n   * exist, returns null.\n   * For {@link IntField}, {@link LongField}, {@link\n   * FloatField} and {@link DoubleField} it returns the string value of the number. If you want\n   * the actual numeric field instance back, use {@link #getField}.\n   */\n  public final String get(String name) {\n    for (Iterator<StorableField> it = storedFieldsIterator(); it.hasNext(); ) {\n      StorableField field = it.next();\n      if (field.name().equals(name) && field.stringValue() != null) {\n        return field.stringValue();\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns the string value of the field with the given name if any exist in\n   * this document, or null.  If multiple fields exist with this name, this\n   * method returns the first value added. If only binary fields with this name\n   * exist, returns null.\n   * For {@link IntField}, {@link LongField}, {@link\n   * FloatField} and {@link DoubleField} it returns the string value of the number. If you want\n   * the actual numeric field instance back, use {@link #getField}.\n   */\n  public final String get(String name) {\n    Iterator<Field> it = storedFieldsIterator();\n    \n    while (it.hasNext()) {\n      StorableField field = it.next();\n      if (field.name().equals(name) && field.stringValue() != null) {\n        return field.stringValue();\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#get(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Document#get(String).mjava","sourceNew":"  /** Returns the string value of the field with the given name if any exist in\n   * this document, or null.  If multiple fields exist with this name, this\n   * method returns the first value added. If only binary fields with this name\n   * exist, returns null.\n   * For {@link LegacyIntField}, {@link LegacyLongField}, {@link\n   * LegacyFloatField} and {@link LegacyDoubleField} it returns the string value of the number. If you want\n   * the actual numeric field instance back, use {@link #getField}.\n   */\n  public final String get(String name) {\n    for (Iterator<StorableField> it = storedFieldsIterator(); it.hasNext(); ) {\n      StorableField field = it.next();\n      if (field.name().equals(name) && field.stringValue() != null) {\n        return field.stringValue();\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns the string value of the field with the given name if any exist in\n   * this document, or null.  If multiple fields exist with this name, this\n   * method returns the first value added. If only binary fields with this name\n   * exist, returns null.\n   * For {@link IntField}, {@link LongField}, {@link\n   * FloatField} and {@link DoubleField} it returns the string value of the number. If you want\n   * the actual numeric field instance back, use {@link #getField}.\n   */\n  public final String get(String name) {\n    for (Iterator<StorableField> it = storedFieldsIterator(); it.hasNext(); ) {\n      StorableField field = it.next();\n      if (field.name().equals(name) && field.stringValue() != null) {\n        return field.stringValue();\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#get(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Document#get(String).mjava","sourceNew":"  /** Returns the string value of the field with the given name if any exist in\n   * this document, or null.  If multiple fields exist with this name, this\n   * method returns the first value added. If only binary fields with this name\n   * exist, returns null.\n   * For {@link LegacyIntField}, {@link LegacyLongField}, {@link\n   * LegacyFloatField} and {@link LegacyDoubleField} it returns the string value of the number. If you want\n   * the actual numeric field instance back, use {@link #getField}.\n   */\n  public final String get(String name) {\n    for (IndexableField field : fields) {\n      if (field.name().equals(name) && field.stringValue() != null) {\n        return field.stringValue();\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns the string value of the field with the given name if any exist in\n   * this document, or null.  If multiple fields exist with this name, this\n   * method returns the first value added. If only binary fields with this name\n   * exist, returns null.\n   * For {@link LegacyIntField}, {@link LegacyLongField}, {@link\n   * LegacyFloatField} and {@link LegacyDoubleField} it returns the string value of the number. If you want\n   * the actual numeric field instance back, use {@link #getField}.\n   */\n  public final String get(String name) {\n    for (Iterator<StorableField> it = storedFieldsIterator(); it.hasNext(); ) {\n      StorableField field = it.next();\n      if (field.name().equals(name) && field.stringValue() != null) {\n        return field.stringValue();\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"544309b0dc3bc728097b4aed954f876d7a5d7e85","date":1457452513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#get(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Document#get(String).mjava","sourceNew":"  /** Returns the string value of the field with the given name if any exist in\n   * this document, or null.  If multiple fields exist with this name, this\n   * method returns the first value added. If only binary fields with this name\n   * exist, returns null.\n   * For a numeric {@link StoredField} it returns the string value of the number. If you want\n   * the actual numeric field instance back, use {@link #getField}.\n   */\n  public final String get(String name) {\n    for (IndexableField field : fields) {\n      if (field.name().equals(name) && field.stringValue() != null) {\n        return field.stringValue();\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns the string value of the field with the given name if any exist in\n   * this document, or null.  If multiple fields exist with this name, this\n   * method returns the first value added. If only binary fields with this name\n   * exist, returns null.\n   * For {@link LegacyIntField}, {@link LegacyLongField}, {@link\n   * LegacyFloatField} and {@link LegacyDoubleField} it returns the string value of the number. If you want\n   * the actual numeric field instance back, use {@link #getField}.\n   */\n  public final String get(String name) {\n    for (IndexableField field : fields) {\n      if (field.name().equals(name) && field.stringValue() != null) {\n        return field.stringValue();\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"286d87eabbc79863e93070d6126d558a2ca0fb28":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["a78a90fc9701e511308346ea29f4f5e548bb39fe","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"544309b0dc3bc728097b4aed954f876d7a5d7e85":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"770342641f7b505eaa8dccdc666158bff2419109":["286d87eabbc79863e93070d6126d558a2ca0fb28"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["544309b0dc3bc728097b4aed954f876d7a5d7e85"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"a78a90fc9701e511308346ea29f4f5e548bb39fe":["1d028314cced5858683a1bb4741423d0f934257b","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"286d87eabbc79863e93070d6126d558a2ca0fb28":["770342641f7b505eaa8dccdc666158bff2419109"],"1d028314cced5858683a1bb4741423d0f934257b":["286d87eabbc79863e93070d6126d558a2ca0fb28"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["a7e4907084808af8fdb14b9809e6dceaccf6867b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"544309b0dc3bc728097b4aed954f876d7a5d7e85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"770342641f7b505eaa8dccdc666158bff2419109":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["544309b0dc3bc728097b4aed954f876d7a5d7e85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}