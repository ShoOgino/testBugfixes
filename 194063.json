{"path":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testAlgorithms().mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testAlgorithms().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testAlgorithms().mjava","sourceNew":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(\"Metaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(\"Metaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(\"DoubleMetaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(\"DoubleMetaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(\"Soundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(\"Soundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(\"RefinedSoundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(\"RefinedSoundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(\"Caverphone\", \"true\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(\"Caverphone\", \"false\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n    \n    assertAlgorithm(\"ColognePhonetic\", \"true\", \"Meier Schmitt Meir Schmidt\",\n        new String[] { \"67\", \"Meier\", \"862\", \"Schmitt\", \n          \"67\", \"Meir\", \"862\", \"Schmidt\" });\n    assertAlgorithm(\"ColognePhonetic\", \"false\", \"Meier Schmitt Meir Schmidt\",\n        new String[] { \"67\", \"862\", \"67\", \"862\" });\n  }\n\n","sourceOld":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(\"Metaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(\"Metaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(\"DoubleMetaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(\"DoubleMetaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(\"Soundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(\"Soundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(\"RefinedSoundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(\"RefinedSoundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(\"Caverphone\", \"true\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(\"Caverphone\", \"false\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n    \n    assertAlgorithm(\"ColognePhonetic\", \"true\", \"Meier Schmitt Meir Schmidt\",\n        new String[] { \"67\", \"Meier\", \"862\", \"Schmitt\", \n          \"67\", \"Meir\", \"862\", \"Schmidt\" });\n    assertAlgorithm(\"ColognePhonetic\", \"false\", \"Meier Schmitt Meir Schmidt\",\n        new String[] { \"67\", \"862\", \"67\", \"862\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testAlgorithms().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testAlgorithms().mjava","sourceNew":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(\"Metaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(\"Metaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(\"DoubleMetaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(\"DoubleMetaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(\"Soundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(\"Soundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(\"RefinedSoundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(\"RefinedSoundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(\"Caverphone\", \"true\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(\"Caverphone\", \"false\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n    \n    assertAlgorithm(\"ColognePhonetic\", \"true\", \"Meier Schmitt Meir Schmidt\",\n        new String[] { \"67\", \"Meier\", \"862\", \"Schmitt\", \n          \"67\", \"Meir\", \"862\", \"Schmidt\" });\n    assertAlgorithm(\"ColognePhonetic\", \"false\", \"Meier Schmitt Meir Schmidt\",\n        new String[] { \"67\", \"862\", \"67\", \"862\" });\n  }\n\n","sourceOld":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(\"Metaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(\"Metaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(\"DoubleMetaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(\"DoubleMetaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(\"Soundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(\"Soundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(\"RefinedSoundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(\"RefinedSoundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(\"Caverphone\", \"true\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(\"Caverphone\", \"false\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n    \n    assertAlgorithm(\"ColognePhonetic\", \"true\", \"Meier Schmitt Meir Schmidt\",\n        new String[] { \"67\", \"Meier\", \"862\", \"Schmitt\", \n          \"67\", \"Meir\", \"862\", \"Schmidt\" });\n    assertAlgorithm(\"ColognePhonetic\", \"false\", \"Meier Schmitt Meir Schmidt\",\n        new String[] { \"67\", \"862\", \"67\", \"862\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testAlgorithms().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testAlgorithms().mjava","sourceNew":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(\"Metaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(\"Metaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(\"DoubleMetaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(\"DoubleMetaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(\"Soundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(\"Soundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(\"RefinedSoundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(\"RefinedSoundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(\"Caverphone\", \"true\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(\"Caverphone\", \"false\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n    \n    assertAlgorithm(\"ColognePhonetic\", \"true\", \"Meier Schmitt Meir Schmidt\",\n        new String[] { \"67\", \"Meier\", \"862\", \"Schmitt\", \n          \"67\", \"Meir\", \"862\", \"Schmidt\" });\n    assertAlgorithm(\"ColognePhonetic\", \"false\", \"Meier Schmitt Meir Schmidt\",\n        new String[] { \"67\", \"862\", \"67\", \"862\" });\n  }\n\n","sourceOld":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(\"Metaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(\"Metaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(\"DoubleMetaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(\"DoubleMetaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(\"Soundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(\"Soundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(\"RefinedSoundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(\"RefinedSoundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(\"Caverphone\", \"true\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(\"Caverphone\", \"false\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n    \n    assertAlgorithm(\"ColognePhonetic\", \"true\", \"Meier Schmitt Meir Schmidt\",\n        new String[] { \"67\", \"Meier\", \"862\", \"Schmitt\", \n          \"67\", \"Meir\", \"862\", \"Schmidt\" });\n    assertAlgorithm(\"ColognePhonetic\", \"false\", \"Meier Schmitt Meir Schmidt\",\n        new String[] { \"67\", \"862\", \"67\", \"862\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testAlgorithms().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testAlgorithms().mjava","sourceNew":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(\"Metaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(\"Metaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(\"DoubleMetaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(\"DoubleMetaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(\"Soundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(\"Soundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(\"RefinedSoundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(\"RefinedSoundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(\"Caverphone\", \"true\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(\"Caverphone\", \"false\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n    \n    assertAlgorithm(\"ColognePhonetic\", \"true\", \"Meier Schmitt Meir Schmidt\",\n        new String[] { \"67\", \"Meier\", \"862\", \"Schmitt\", \n          \"67\", \"Meir\", \"862\", \"Schmidt\" });\n    assertAlgorithm(\"ColognePhonetic\", \"false\", \"Meier Schmitt Meir Schmidt\",\n        new String[] { \"67\", \"862\", \"67\", \"862\" });\n  }\n\n","sourceOld":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(\"Metaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(\"Metaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(\"DoubleMetaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(\"DoubleMetaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(\"Soundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(\"Soundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(\"RefinedSoundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(\"RefinedSoundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(\"Caverphone\", \"true\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(\"Caverphone\", \"false\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n    \n    assertAlgorithm(\"ColognePhonetic\", \"true\", \"Meier Schmitt Meir Schmidt\",\n        new String[] { \"67\", \"Meier\", \"862\", \"Schmitt\", \n          \"67\", \"Meir\", \"862\", \"Schmidt\" });\n    assertAlgorithm(\"ColognePhonetic\", \"false\", \"Meier Schmitt Meir Schmidt\",\n        new String[] { \"67\", \"862\", \"67\", \"862\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83ce4396c24a8d20a883c17c9770cbe348ca2df1","date":1415729085,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testAlgorithms().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testAlgorithms().mjava","sourceNew":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(\"Metaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(\"Metaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(\"DoubleMetaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(\"DoubleMetaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(\"Soundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(\"Soundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(\"RefinedSoundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(\"RefinedSoundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(\"Caverphone\", \"true\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(\"Caverphone\", \"false\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n    \n    assertAlgorithm(\"ColognePhonetic\", \"true\", \"Meier Schmitt Meir Schmidt\",\n        new String[] { \"67\", \"Meier\", \"862\", \"Schmitt\", \n          \"67\", \"Meir\", \"862\", \"Schmidt\" });\n    assertAlgorithm(\"ColognePhonetic\", \"false\", \"Meier Schmitt Meir Schmidt\",\n        new String[] { \"67\", \"862\", \"67\", \"862\" });\n    \n    assertAlgorithm(\"Nysiis\", \"true\", \"Macintosh Knuth Bart Hurd\",\n        new String[] { \"MCANT\", \"Macintosh\", \"NAT\", \"Knuth\", \n          \"BAD\", \"Bart\", \"HAD\", \"Hurd\" });\n    assertAlgorithm(\"Nysiis\", \"false\", \"Macintosh Knuth Bart Hurd\",\n        new String[] { \"MCANT\", \"NAT\", \"BAD\", \"HAD\" });\n  }\n\n","sourceOld":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(\"Metaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(\"Metaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(\"DoubleMetaphone\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(\"DoubleMetaphone\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(\"Soundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(\"Soundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(\"RefinedSoundex\", \"true\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(\"RefinedSoundex\", \"false\", \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(\"Caverphone\", \"true\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(\"Caverphone\", \"false\", \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n    \n    assertAlgorithm(\"ColognePhonetic\", \"true\", \"Meier Schmitt Meir Schmidt\",\n        new String[] { \"67\", \"Meier\", \"862\", \"Schmitt\", \n          \"67\", \"Meir\", \"862\", \"Schmidt\" });\n    assertAlgorithm(\"ColognePhonetic\", \"false\", \"Meier Schmitt Meir Schmidt\",\n        new String[] { \"67\", \"862\", \"67\", \"862\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83ce4396c24a8d20a883c17c9770cbe348ca2df1":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83ce4396c24a8d20a883c17c9770cbe348ca2df1"]},"commit2Childs":{"83ce4396c24a8d20a883c17c9770cbe348ca2df1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"5a1a22b1ad88b436661458df567f3fdb446392a4":["83ce4396c24a8d20a883c17c9770cbe348ca2df1","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}