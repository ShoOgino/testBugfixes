{"path":"src/java/org/apache/solr/request/BinaryResponseWriter.Resolver#writeDocList(DocList,NamedListCodec).mjava","commits":[{"id":"da0acfe5ceed804451d76c8f887855b3d060e132","date":1208287358,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/BinaryResponseWriter.Resolver#writeDocList(DocList,NamedListCodec).mjava","pathOld":"/dev/null","sourceNew":"    public void writeDocList(DocList ids, NamedListCodec codec) throws IOException {\n      codec.writeTag(NamedListCodec.SOLRDOCLST);\n      List l = new ArrayList(3);\n      l.add((long)ids.matches());\n      l.add((long)ids.offset());\n      Float maxScore = null;\n      if (includeScore && ids.hasScores()) {\n        maxScore = ids.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n\n      int sz = ids.size();\n      codec.writeTag(NamedListCodec.ARR, sz);\n\n      DocIterator iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = iterator.nextDoc();\n        Document doc = searcher.doc(id, returnFields);\n\n        SolrDocument sdoc = getDoc(doc);\n\n        if (includeScore && ids.hasScores()) {\n          sdoc.addField(\"score\", iterator.score());\n        }\n\n        codec.writeSolrDocument(sdoc);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["754182f2def7aee06292f7daf04ebaceb970e931"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"754182f2def7aee06292f7daf04ebaceb970e931","date":1229276256,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/request/BinaryResponseWriter.Resolver#writeDocList(DocList,NamedListCodec).mjava","pathOld":"src/java/org/apache/solr/request/BinaryResponseWriter.Resolver#writeDocList(DocList,NamedListCodec).mjava","sourceNew":"    public void writeDocList(DocList ids, NamedListCodec codec) throws IOException {\n      codec.writeTag(NamedListCodec.SOLRDOCLST);\n      List l = new ArrayList(3);\n      l.add((long) ids.matches());\n      l.add((long) ids.offset());\n      Float maxScore = null;\n      if (includeScore && ids.hasScores()) {\n        maxScore = ids.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n\n      int sz = ids.size();\n      codec.writeTag(NamedListCodec.ARR, sz);\n\n      DocIterator iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = iterator.nextDoc();\n        Document doc = searcher.doc(id, returnFields);\n\n        SolrDocument sdoc = getDoc(doc);\n\n        if (includeScore && ids.hasScores()) {\n          sdoc.addField(\"score\", iterator.score());\n        }\n\n        codec.writeSolrDocument(sdoc);\n      }\n    }\n\n","sourceOld":"    public void writeDocList(DocList ids, NamedListCodec codec) throws IOException {\n      codec.writeTag(NamedListCodec.SOLRDOCLST);\n      List l = new ArrayList(3);\n      l.add((long)ids.matches());\n      l.add((long)ids.offset());\n      Float maxScore = null;\n      if (includeScore && ids.hasScores()) {\n        maxScore = ids.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n\n      int sz = ids.size();\n      codec.writeTag(NamedListCodec.ARR, sz);\n\n      DocIterator iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = iterator.nextDoc();\n        Document doc = searcher.doc(id, returnFields);\n\n        SolrDocument sdoc = getDoc(doc);\n\n        if (includeScore && ids.hasScores()) {\n          sdoc.addField(\"score\", iterator.score());\n        }\n\n        codec.writeSolrDocument(sdoc);\n      }\n    }\n\n","bugFix":["da0acfe5ceed804451d76c8f887855b3d060e132"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18a1b51b47d1035bf90ecfc7d16c739fe983647a","date":1229928361,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/request/BinaryResponseWriter.Resolver#writeDocList(DocList,JavaBinCodec).mjava","pathOld":"src/java/org/apache/solr/request/BinaryResponseWriter.Resolver#writeDocList(DocList,NamedListCodec).mjava","sourceNew":"    public void writeDocList(DocList ids, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      List l = new ArrayList(3);\n      l.add((long) ids.matches());\n      l.add((long) ids.offset());\n      Float maxScore = null;\n      if (includeScore && ids.hasScores()) {\n        maxScore = ids.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n\n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n\n      DocIterator iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = iterator.nextDoc();\n        Document doc = searcher.doc(id, returnFields);\n\n        SolrDocument sdoc = getDoc(doc);\n\n        if (includeScore && ids.hasScores()) {\n          sdoc.addField(\"score\", iterator.score());\n        }\n\n        codec.writeSolrDocument(sdoc);\n      }\n    }\n\n","sourceOld":"    public void writeDocList(DocList ids, NamedListCodec codec) throws IOException {\n      codec.writeTag(NamedListCodec.SOLRDOCLST);\n      List l = new ArrayList(3);\n      l.add((long) ids.matches());\n      l.add((long) ids.offset());\n      Float maxScore = null;\n      if (includeScore && ids.hasScores()) {\n        maxScore = ids.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n\n      int sz = ids.size();\n      codec.writeTag(NamedListCodec.ARR, sz);\n\n      DocIterator iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = iterator.nextDoc();\n        Document doc = searcher.doc(id, returnFields);\n\n        SolrDocument sdoc = getDoc(doc);\n\n        if (includeScore && ids.hasScores()) {\n          sdoc.addField(\"score\", iterator.score());\n        }\n\n        codec.writeSolrDocument(sdoc);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da0acfe5ceed804451d76c8f887855b3d060e132":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"18a1b51b47d1035bf90ecfc7d16c739fe983647a":["754182f2def7aee06292f7daf04ebaceb970e931"],"754182f2def7aee06292f7daf04ebaceb970e931":["da0acfe5ceed804451d76c8f887855b3d060e132"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"da0acfe5ceed804451d76c8f887855b3d060e132":["754182f2def7aee06292f7daf04ebaceb970e931"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["da0acfe5ceed804451d76c8f887855b3d060e132"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"18a1b51b47d1035bf90ecfc7d16c739fe983647a":[],"754182f2def7aee06292f7daf04ebaceb970e931":["18a1b51b47d1035bf90ecfc7d16c739fe983647a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["18a1b51b47d1035bf90ecfc7d16c739fe983647a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}