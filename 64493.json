{"path":"solr/core/src/test/org/apache/solr/TestGroupingSearch#buildGroupedResult(IndexSchema,List[Grp],int,int,int,int,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestGroupingSearch#buildGroupedResult(IndexSchema,List[Grp],int,int,int,int,boolean).mjava","pathOld":"solr/src/test/org/apache/solr/TestGroupingSearch#buildGroupedResult(IndexSchema,List[Grp],int,int,int,int,boolean).mjava","sourceNew":"  public static Object buildGroupedResult(IndexSchema schema, List<Grp> sortedGroups, int start, int rows, int group_offset, int group_limit, boolean includeNGroups) {\n    Map<String,Object> result = new LinkedHashMap<String,Object>();\n\n    long matches = 0;\n    for (Grp grp : sortedGroups) {\n      matches += grp.docs.size();\n    }\n    result.put(\"matches\", matches);\n    if (includeNGroups) {\n      result.put(\"ngroups\", sortedGroups.size());\n    }\n    List groupList = new ArrayList();\n    result.put(\"groups\", groupList);\n\n    for (int i=start; i<sortedGroups.size(); i++) {\n      if (rows != -1 && groupList.size() >= rows) break;  // directly test rather than calculating, so we can catch any calc errors in the real code\n      Map<String,Object> group = new LinkedHashMap<String,Object>();\n      groupList.add(group);\n\n      Grp grp = sortedGroups.get(i);\n      group.put(\"groupValue\", grp.groupValue);\n\n      Map<String,Object> resultSet = new LinkedHashMap<String,Object>();\n      group.put(\"doclist\", resultSet);\n      resultSet.put(\"numFound\", grp.docs.size());\n      resultSet.put(\"start\", group_offset);\n      List docs = new ArrayList();\n      resultSet.put(\"docs\", docs);\n      for (int j=group_offset; j<grp.docs.size(); j++) {\n        if (group_limit != -1 && docs.size() >= group_limit) break;\n        docs.add( grp.docs.get(j).toObject(schema) );\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  public static Object buildGroupedResult(IndexSchema schema, List<Grp> sortedGroups, int start, int rows, int group_offset, int group_limit, boolean includeNGroups) {\n    Map<String,Object> result = new LinkedHashMap<String,Object>();\n\n    long matches = 0;\n    for (Grp grp : sortedGroups) {\n      matches += grp.docs.size();\n    }\n    result.put(\"matches\", matches);\n    if (includeNGroups) {\n      result.put(\"ngroups\", sortedGroups.size());\n    }\n    List groupList = new ArrayList();\n    result.put(\"groups\", groupList);\n\n    for (int i=start; i<sortedGroups.size(); i++) {\n      if (rows != -1 && groupList.size() >= rows) break;  // directly test rather than calculating, so we can catch any calc errors in the real code\n      Map<String,Object> group = new LinkedHashMap<String,Object>();\n      groupList.add(group);\n\n      Grp grp = sortedGroups.get(i);\n      group.put(\"groupValue\", grp.groupValue);\n\n      Map<String,Object> resultSet = new LinkedHashMap<String,Object>();\n      group.put(\"doclist\", resultSet);\n      resultSet.put(\"numFound\", grp.docs.size());\n      resultSet.put(\"start\", group_offset);\n      List docs = new ArrayList();\n      resultSet.put(\"docs\", docs);\n      for (int j=group_offset; j<grp.docs.size(); j++) {\n        if (group_limit != -1 && docs.size() >= group_limit) break;\n        docs.add( grp.docs.get(j).toObject(schema) );\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestGroupingSearch#buildGroupedResult(IndexSchema,List[Grp],int,int,int,int,boolean).mjava","pathOld":"solr/src/test/org/apache/solr/TestGroupingSearch#buildGroupedResult(IndexSchema,List[Grp],int,int,int,int,boolean).mjava","sourceNew":"  public static Object buildGroupedResult(IndexSchema schema, List<Grp> sortedGroups, int start, int rows, int group_offset, int group_limit, boolean includeNGroups) {\n    Map<String,Object> result = new LinkedHashMap<String,Object>();\n\n    long matches = 0;\n    for (Grp grp : sortedGroups) {\n      matches += grp.docs.size();\n    }\n    result.put(\"matches\", matches);\n    if (includeNGroups) {\n      result.put(\"ngroups\", sortedGroups.size());\n    }\n    List groupList = new ArrayList();\n    result.put(\"groups\", groupList);\n\n    for (int i=start; i<sortedGroups.size(); i++) {\n      if (rows != -1 && groupList.size() >= rows) break;  // directly test rather than calculating, so we can catch any calc errors in the real code\n      Map<String,Object> group = new LinkedHashMap<String,Object>();\n      groupList.add(group);\n\n      Grp grp = sortedGroups.get(i);\n      group.put(\"groupValue\", grp.groupValue);\n\n      Map<String,Object> resultSet = new LinkedHashMap<String,Object>();\n      group.put(\"doclist\", resultSet);\n      resultSet.put(\"numFound\", grp.docs.size());\n      resultSet.put(\"start\", group_offset);\n      List docs = new ArrayList();\n      resultSet.put(\"docs\", docs);\n      for (int j=group_offset; j<grp.docs.size(); j++) {\n        if (group_limit != -1 && docs.size() >= group_limit) break;\n        docs.add( grp.docs.get(j).toObject(schema) );\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  public static Object buildGroupedResult(IndexSchema schema, List<Grp> sortedGroups, int start, int rows, int group_offset, int group_limit, boolean includeNGroups) {\n    Map<String,Object> result = new LinkedHashMap<String,Object>();\n\n    long matches = 0;\n    for (Grp grp : sortedGroups) {\n      matches += grp.docs.size();\n    }\n    result.put(\"matches\", matches);\n    if (includeNGroups) {\n      result.put(\"ngroups\", sortedGroups.size());\n    }\n    List groupList = new ArrayList();\n    result.put(\"groups\", groupList);\n\n    for (int i=start; i<sortedGroups.size(); i++) {\n      if (rows != -1 && groupList.size() >= rows) break;  // directly test rather than calculating, so we can catch any calc errors in the real code\n      Map<String,Object> group = new LinkedHashMap<String,Object>();\n      groupList.add(group);\n\n      Grp grp = sortedGroups.get(i);\n      group.put(\"groupValue\", grp.groupValue);\n\n      Map<String,Object> resultSet = new LinkedHashMap<String,Object>();\n      group.put(\"doclist\", resultSet);\n      resultSet.put(\"numFound\", grp.docs.size());\n      resultSet.put(\"start\", group_offset);\n      List docs = new ArrayList();\n      resultSet.put(\"docs\", docs);\n      for (int j=group_offset; j<grp.docs.size(); j++) {\n        if (group_limit != -1 && docs.size() >= group_limit) break;\n        docs.add( grp.docs.get(j).toObject(schema) );\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestGroupingSearch#buildGroupedResult(IndexSchema,List[Grp],int,int,int,int,boolean).mjava","pathOld":"solr/src/test/org/apache/solr/TestGroupingSearch#buildGroupedResult(IndexSchema,List[Grp],int,int,int,int,boolean).mjava","sourceNew":"  public static Object buildGroupedResult(IndexSchema schema, List<Grp> sortedGroups, int start, int rows, int group_offset, int group_limit, boolean includeNGroups) {\n    Map<String,Object> result = new LinkedHashMap<String,Object>();\n\n    long matches = 0;\n    for (Grp grp : sortedGroups) {\n      matches += grp.docs.size();\n    }\n    result.put(\"matches\", matches);\n    if (includeNGroups) {\n      result.put(\"ngroups\", sortedGroups.size());\n    }\n    List groupList = new ArrayList();\n    result.put(\"groups\", groupList);\n\n    for (int i=start; i<sortedGroups.size(); i++) {\n      if (rows != -1 && groupList.size() >= rows) break;  // directly test rather than calculating, so we can catch any calc errors in the real code\n      Map<String,Object> group = new LinkedHashMap<String,Object>();\n      groupList.add(group);\n\n      Grp grp = sortedGroups.get(i);\n      group.put(\"groupValue\", grp.groupValue);\n\n      Map<String,Object> resultSet = new LinkedHashMap<String,Object>();\n      group.put(\"doclist\", resultSet);\n      resultSet.put(\"numFound\", grp.docs.size());\n      resultSet.put(\"start\", group_offset);\n      List docs = new ArrayList();\n      resultSet.put(\"docs\", docs);\n      for (int j=group_offset; j<grp.docs.size(); j++) {\n        if (group_limit != -1 && docs.size() >= group_limit) break;\n        docs.add( grp.docs.get(j).toObject(schema) );\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  public static Object buildGroupedResult(IndexSchema schema, List<Grp> sortedGroups, int start, int rows, int group_offset, int group_limit, boolean includeNGroups) {\n    Map<String,Object> result = new LinkedHashMap<String,Object>();\n\n    long matches = 0;\n    for (Grp grp : sortedGroups) {\n      matches += grp.docs.size();\n    }\n    result.put(\"matches\", matches);\n    if (includeNGroups) {\n      result.put(\"ngroups\", sortedGroups.size());\n    }\n    List groupList = new ArrayList();\n    result.put(\"groups\", groupList);\n\n    for (int i=start; i<sortedGroups.size(); i++) {\n      if (rows != -1 && groupList.size() >= rows) break;  // directly test rather than calculating, so we can catch any calc errors in the real code\n      Map<String,Object> group = new LinkedHashMap<String,Object>();\n      groupList.add(group);\n\n      Grp grp = sortedGroups.get(i);\n      group.put(\"groupValue\", grp.groupValue);\n\n      Map<String,Object> resultSet = new LinkedHashMap<String,Object>();\n      group.put(\"doclist\", resultSet);\n      resultSet.put(\"numFound\", grp.docs.size());\n      resultSet.put(\"start\", group_offset);\n      List docs = new ArrayList();\n      resultSet.put(\"docs\", docs);\n      for (int j=group_offset; j<grp.docs.size(); j++) {\n        if (group_limit != -1 && docs.size() >= group_limit) break;\n        docs.add( grp.docs.get(j).toObject(schema) );\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestGroupingSearch#buildGroupedResult(IndexSchema,List[Grp],int,int,int,int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestGroupingSearch#buildGroupedResult(IndexSchema,List[Grp],int,int,int,int,boolean).mjava","sourceNew":"  public static Object buildGroupedResult(IndexSchema schema, List<Grp> sortedGroups, int start, int rows, int group_offset, int group_limit, boolean includeNGroups) {\n    Map<String,Object> result = new LinkedHashMap<>();\n\n    long matches = 0;\n    for (Grp grp : sortedGroups) {\n      matches += grp.docs.size();\n    }\n    result.put(\"matches\", matches);\n    if (includeNGroups) {\n      result.put(\"ngroups\", sortedGroups.size());\n    }\n    List groupList = new ArrayList();\n    result.put(\"groups\", groupList);\n\n    for (int i=start; i<sortedGroups.size(); i++) {\n      if (rows != -1 && groupList.size() >= rows) break;  // directly test rather than calculating, so we can catch any calc errors in the real code\n      Map<String,Object> group = new LinkedHashMap<>();\n      groupList.add(group);\n\n      Grp grp = sortedGroups.get(i);\n      group.put(\"groupValue\", grp.groupValue);\n\n      Map<String,Object> resultSet = new LinkedHashMap<>();\n      group.put(\"doclist\", resultSet);\n      resultSet.put(\"numFound\", grp.docs.size());\n      resultSet.put(\"start\", group_offset);\n      List docs = new ArrayList();\n      resultSet.put(\"docs\", docs);\n      for (int j=group_offset; j<grp.docs.size(); j++) {\n        if (group_limit != -1 && docs.size() >= group_limit) break;\n        docs.add( grp.docs.get(j).toObject(schema) );\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  public static Object buildGroupedResult(IndexSchema schema, List<Grp> sortedGroups, int start, int rows, int group_offset, int group_limit, boolean includeNGroups) {\n    Map<String,Object> result = new LinkedHashMap<String,Object>();\n\n    long matches = 0;\n    for (Grp grp : sortedGroups) {\n      matches += grp.docs.size();\n    }\n    result.put(\"matches\", matches);\n    if (includeNGroups) {\n      result.put(\"ngroups\", sortedGroups.size());\n    }\n    List groupList = new ArrayList();\n    result.put(\"groups\", groupList);\n\n    for (int i=start; i<sortedGroups.size(); i++) {\n      if (rows != -1 && groupList.size() >= rows) break;  // directly test rather than calculating, so we can catch any calc errors in the real code\n      Map<String,Object> group = new LinkedHashMap<String,Object>();\n      groupList.add(group);\n\n      Grp grp = sortedGroups.get(i);\n      group.put(\"groupValue\", grp.groupValue);\n\n      Map<String,Object> resultSet = new LinkedHashMap<String,Object>();\n      group.put(\"doclist\", resultSet);\n      resultSet.put(\"numFound\", grp.docs.size());\n      resultSet.put(\"start\", group_offset);\n      List docs = new ArrayList();\n      resultSet.put(\"docs\", docs);\n      for (int j=group_offset; j<grp.docs.size(); j++) {\n        if (group_limit != -1 && docs.size() >= group_limit) break;\n        docs.add( grp.docs.get(j).toObject(schema) );\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestGroupingSearch#buildGroupedResult(IndexSchema,List[Grp],int,int,int,int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestGroupingSearch#buildGroupedResult(IndexSchema,List[Grp],int,int,int,int,boolean).mjava","sourceNew":"  public static Object buildGroupedResult(IndexSchema schema, List<Grp> sortedGroups, int start, int rows, int group_offset, int group_limit, boolean includeNGroups) {\n    Map<String,Object> result = new LinkedHashMap<>();\n\n    long matches = 0;\n    for (Grp grp : sortedGroups) {\n      matches += grp.docs.size();\n    }\n    result.put(\"matches\", matches);\n    if (includeNGroups) {\n      result.put(\"ngroups\", sortedGroups.size());\n    }\n    List<Map<String,Object>> groupList = new ArrayList<>();\n    result.put(\"groups\", groupList);\n\n    for (int i=start; i<sortedGroups.size(); i++) {\n      if (rows != -1 && groupList.size() >= rows) break;  // directly test rather than calculating, so we can catch any calc errors in the real code\n      Map<String,Object> group = new LinkedHashMap<>();\n      groupList.add(group);\n\n      Grp grp = sortedGroups.get(i);\n      group.put(\"groupValue\", grp.groupValue);\n\n      Map<String,Object> resultSet = new LinkedHashMap<>();\n      group.put(\"doclist\", resultSet);\n      resultSet.put(\"numFound\", grp.docs.size());\n      resultSet.put(\"start\", group_offset);\n      resultSet.put(\"numFoundExact\", true);\n      List<Map<String,Object>> docs = new ArrayList<>();\n      resultSet.put(\"docs\", docs);\n      for (int j=group_offset; j<grp.docs.size(); j++) {\n        if (group_limit != -1 && docs.size() >= group_limit) break;\n        docs.add( grp.docs.get(j).toObject(schema) );\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  public static Object buildGroupedResult(IndexSchema schema, List<Grp> sortedGroups, int start, int rows, int group_offset, int group_limit, boolean includeNGroups) {\n    Map<String,Object> result = new LinkedHashMap<>();\n\n    long matches = 0;\n    for (Grp grp : sortedGroups) {\n      matches += grp.docs.size();\n    }\n    result.put(\"matches\", matches);\n    if (includeNGroups) {\n      result.put(\"ngroups\", sortedGroups.size());\n    }\n    List groupList = new ArrayList();\n    result.put(\"groups\", groupList);\n\n    for (int i=start; i<sortedGroups.size(); i++) {\n      if (rows != -1 && groupList.size() >= rows) break;  // directly test rather than calculating, so we can catch any calc errors in the real code\n      Map<String,Object> group = new LinkedHashMap<>();\n      groupList.add(group);\n\n      Grp grp = sortedGroups.get(i);\n      group.put(\"groupValue\", grp.groupValue);\n\n      Map<String,Object> resultSet = new LinkedHashMap<>();\n      group.put(\"doclist\", resultSet);\n      resultSet.put(\"numFound\", grp.docs.size());\n      resultSet.put(\"start\", group_offset);\n      List docs = new ArrayList();\n      resultSet.put(\"docs\", docs);\n      for (int j=group_offset; j<grp.docs.size(); j++) {\n        if (group_limit != -1 && docs.size() >= group_limit) break;\n        docs.add( grp.docs.get(j).toObject(schema) );\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["640ded7811e1b7d29236a5e2934ec3cd266a8199"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}