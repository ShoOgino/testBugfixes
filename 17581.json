{"path":"src/java/org/apache/solr/schema/AbstractSubTypeFieldType#init(IndexSchema,Map[String,String]).mjava","commits":[{"id":"7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564","date":1262055526,"type":1,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/AbstractSubTypeFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/schema/CoordinateFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    this.schema = schema;\n    //it's not a first class citizen for the IndexSchema\n    SolrParams p = new MapSolrParams(args);\n    String subFT = p.get(SUB_FIELD_TYPE);\n    String subSuffix = p.get(SUB_FIELD_SUFFIX);\n    if (subFT != null) {\n      args.remove(SUB_FIELD_TYPE);\n      subType = schema.getFieldTypeByName(subFT.trim());\n      suffix = POLY_FIELD_SEPARATOR + subType.typeName;\n    } else if (subSuffix != null) {\n      args.remove(SUB_FIELD_SUFFIX);\n      suffix = subSuffix;\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The field type: \" + typeName\n              + \" must specify the \" +\n              SUB_FIELD_TYPE + \" attribute or the \" + SUB_FIELD_SUFFIX + \" attribute.\");\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n\n    //it's not a first class citizen for the IndexSchema\n    SolrParams p = new MapSolrParams(args);\n    String subFT = p.get(SUB_FIELD_TYPE);\n    String subSuffix = p.get(SUB_FIELD_SUFFIX);\n    if (subFT != null) {\n      args.remove(SUB_FIELD_TYPE);\n      subType = schema.getFieldTypeByName(subFT.trim());\n      suffix = POLY_FIELD_SEPARATOR + subType.typeName;      \n    } else if (subSuffix != null) {\n      args.remove(SUB_FIELD_SUFFIX);\n      suffix = subSuffix;\n    }else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The field type: \" + typeName\n              + \" must specify the \" +\n      SUB_FIELD_TYPE + \" attribute or the \" + SUB_FIELD_SUFFIX + \" attribute.\");\n    }\n\n    super.init(schema, args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/AbstractSubTypeFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/schema/AbstractSubTypeFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    this.schema = schema;\n    //it's not a first class citizen for the IndexSchema\n    SolrParams p = new MapSolrParams(args);\n    String subFT = p.get(SUB_FIELD_TYPE);\n    String subSuffix = p.get(SUB_FIELD_SUFFIX);\n    if (subFT != null) {\n      args.remove(SUB_FIELD_TYPE);\n      subType = schema.getFieldTypeByName(subFT.trim());\n      suffix = POLY_FIELD_SEPARATOR + subType.typeName;\n    } else if (subSuffix != null) {\n      args.remove(SUB_FIELD_SUFFIX);\n      suffix = subSuffix;\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The field type: \" + typeName\n              + \" must specify the \" +\n              SUB_FIELD_TYPE + \" attribute or the \" + SUB_FIELD_SUFFIX + \" attribute.\");\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    this.schema = schema;\n    //it's not a first class citizen for the IndexSchema\n    SolrParams p = new MapSolrParams(args);\n    String subFT = p.get(SUB_FIELD_TYPE);\n    String subSuffix = p.get(SUB_FIELD_SUFFIX);\n    if (subFT != null) {\n      args.remove(SUB_FIELD_TYPE);\n      subType = schema.getFieldTypeByName(subFT.trim());\n      suffix = POLY_FIELD_SEPARATOR + subType.typeName;\n    } else if (subSuffix != null) {\n      args.remove(SUB_FIELD_SUFFIX);\n      suffix = subSuffix;\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The field type: \" + typeName\n              + \" must specify the \" +\n              SUB_FIELD_TYPE + \" attribute or the \" + SUB_FIELD_SUFFIX + \" attribute.\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}