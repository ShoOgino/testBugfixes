{"path":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeLogHeader(LogCodec).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeLogHeader(LogCodec).mjava","pathOld":"/dev/null","sourceNew":"  private void writeLogHeader(LogCodec codec) throws IOException {\n    long pos = fos.size();\n    assert pos == 0;\n\n    Map header = new LinkedHashMap<String,Object>();\n    header.put(\"SOLR_TLOG\",1); // a magic string + version number\n    header.put(\"strings\",globalStringList);\n    codec.marshal(header, fos);\n\n    endRecord(pos);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeLogHeader(LogCodec).mjava","pathOld":"/dev/null","sourceNew":"  private void writeLogHeader(LogCodec codec) throws IOException {\n    long pos = fos.size();\n    assert pos == 0;\n\n    Map header = new LinkedHashMap<String,Object>();\n    header.put(\"SOLR_TLOG\",1); // a magic string + version number\n    header.put(\"strings\",globalStringList);\n    codec.marshal(header, fos);\n\n    endRecord(pos);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeLogHeader(LogCodec).mjava","pathOld":"/dev/null","sourceNew":"  private void writeLogHeader(LogCodec codec) throws IOException {\n    long pos = fos.size();\n    assert pos == 0;\n\n    Map header = new LinkedHashMap<String,Object>();\n    header.put(\"SOLR_TLOG\",1); // a magic string + version number\n    header.put(\"strings\",globalStringList);\n    codec.marshal(header, fos);\n\n    endRecord(pos);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeLogHeader(LogCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeLogHeader(LogCodec).mjava","sourceNew":"  protected void writeLogHeader(LogCodec codec) throws IOException {\n    long pos = fos.size();\n    assert pos == 0;\n\n    Map header = new LinkedHashMap<String,Object>();\n    header.put(\"SOLR_TLOG\",1); // a magic string + version number\n    header.put(\"strings\",globalStringList);\n    codec.marshal(header, fos);\n\n    endRecord(pos);\n  }\n\n","sourceOld":"  private void writeLogHeader(LogCodec codec) throws IOException {\n    long pos = fos.size();\n    assert pos == 0;\n\n    Map header = new LinkedHashMap<String,Object>();\n    header.put(\"SOLR_TLOG\",1); // a magic string + version number\n    header.put(\"strings\",globalStringList);\n    codec.marshal(header, fos);\n\n    endRecord(pos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeLogHeader(LogCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeLogHeader(LogCodec).mjava","sourceNew":"  protected void writeLogHeader(LogCodec codec) throws IOException {\n    long pos = fos.size();\n    assert pos == 0;\n\n    Map header = new LinkedHashMap<String,Object>();\n    header.put(\"SOLR_TLOG\",1); // a magic string + version number\n    header.put(\"strings\",globalStringList);\n    codec.marshal(header, fos);\n\n    endRecord(pos);\n  }\n\n","sourceOld":"  private void writeLogHeader(LogCodec codec) throws IOException {\n    long pos = fos.size();\n    assert pos == 0;\n\n    Map header = new LinkedHashMap<String,Object>();\n    header.put(\"SOLR_TLOG\",1); // a magic string + version number\n    header.put(\"strings\",globalStringList);\n    codec.marshal(header, fos);\n\n    endRecord(pos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeLogHeader(LogCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeLogHeader(LogCodec).mjava","sourceNew":"  protected void writeLogHeader(LogCodec codec) throws IOException {\n    long pos = fos.size();\n    assert pos == 0;\n\n    Map header = new LinkedHashMap<String, Object>();\n    header.put(\"SOLR_TLOG\", 1); // a magic string + version number\n    header.put(\"strings\", globalStringList);\n    codec.marshal(header, fos);\n\n    endRecord(pos);\n  }\n\n","sourceOld":"  protected void writeLogHeader(LogCodec codec) throws IOException {\n    long pos = fos.size();\n    assert pos == 0;\n\n    Map header = new LinkedHashMap<String,Object>();\n    header.put(\"SOLR_TLOG\",1); // a magic string + version number\n    header.put(\"strings\",globalStringList);\n    codec.marshal(header, fos);\n\n    endRecord(pos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeLogHeader(LogCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#writeLogHeader(LogCodec).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  protected void writeLogHeader(LogCodec codec) throws IOException {\n    long pos = fos.size();\n    assert pos == 0;\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map header = new LinkedHashMap<String, Object>();\n    header.put(\"SOLR_TLOG\", 1); // a magic string + version number\n    header.put(\"strings\", globalStringList);\n    codec.marshal(header, fos);\n\n    endRecord(pos);\n  }\n\n","sourceOld":"  protected void writeLogHeader(LogCodec codec) throws IOException {\n    long pos = fos.size();\n    assert pos == 0;\n\n    Map header = new LinkedHashMap<String, Object>();\n    header.put(\"SOLR_TLOG\", 1); // a magic string + version number\n    header.put(\"strings\", globalStringList);\n    codec.marshal(header, fos);\n\n    endRecord(pos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","ba33781da68babcaa5828121b443d3eb5c9d8480"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["849494cf2f3a96af5c8c84995108ddd8456fcd04","0d22ac6a4146774c1bc8400160fc0b6150294e92","37a0f60745e53927c4c876cfe5b5a58170f0646c","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","37a0f60745e53927c4c876cfe5b5a58170f0646c","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}