{"path":"src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */ \n  public void testBadParams() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //Bad document number, good field number\n      TermFreqVector vector = reader.get(50, testFields[0]);\n      assertTrue(vector == null);      \n    } catch (Exception e) {\n      assertTrue(false);\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);      \n    } catch (Exception e) {\n      assertTrue(false);\n    }\n  }    \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0","date":1096997448,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */ \n  public void testBadParams() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //Bad document number, good field number\n      TermFreqVector vector = reader.get(50, testFields[0]);\n      assertTrue(false);      \n    } catch (Exception e) {\n      assertTrue(true);\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);      \n    } catch (Exception e) {\n      assertTrue(false);\n    }\n  }    \n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */ \n  public void testBadParams() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //Bad document number, good field number\n      TermFreqVector vector = reader.get(50, testFields[0]);\n      assertTrue(vector == null);      \n    } catch (Exception e) {\n      assertTrue(false);\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);      \n    } catch (Exception e) {\n      assertTrue(false);\n    }\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00be19f91a643daa4c865f21f8e62923f702af5d","date":1101649247,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */ \n  public void testBadParams() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      assertTrue(false);      \n    } catch (IOException e) {\n      assertTrue(true);\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //Bad document number, no field\n      reader.get(50);\n      assertTrue(false);      \n    } catch (IOException e) {\n      assertTrue(true);\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);      \n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }    \n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */ \n  public void testBadParams() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //Bad document number, good field number\n      TermFreqVector vector = reader.get(50, testFields[0]);\n      assertTrue(false);      \n    } catch (Exception e) {\n      assertTrue(true);\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);      \n    } catch (Exception e) {\n      assertTrue(false);\n    }\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1229e4509cad6bf268c0fe18199b63a72216c66b","date":1120256033,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */ \n  public void testBadParams() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();      \n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //Bad document number, no field\n      reader.get(50);\n      fail();      \n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);      \n    } catch (IOException e) {\n      fail();\n    }\n  }    \n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */ \n  public void testBadParams() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      assertTrue(false);      \n    } catch (IOException e) {\n      assertTrue(true);\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //Bad document number, no field\n      reader.get(50);\n      assertTrue(false);      \n    } catch (IOException e) {\n      assertTrue(true);\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);      \n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb","date":1185160645,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n    } catch (IOException e) {\n      fail();\n    }\n  }\n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */ \n  public void testBadParams() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();      \n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //Bad document number, no field\n      reader.get(50);\n      fail();      \n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);      \n    } catch (IOException e) {\n      fail();\n    }\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n    } catch (IOException e) {\n      fail();\n    }\n  }\n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n    } catch (IOException e) {\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n    } catch (IOException e) {\n      fail();\n    }\n  }\n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n    } catch (IOException e) {\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"00be19f91a643daa4c865f21f8e62923f702af5d":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["352bfe1fae83b92d1562f01c057bfbe6f5af3ddb"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["00be19f91a643daa4c865f21f8e62923f702af5d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"00be19f91a643daa4c865f21f8e62923f702af5d":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["00be19f91a643daa4c865f21f8e62923f702af5d"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["352bfe1fae83b92d1562f01c057bfbe6f5af3ddb"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}