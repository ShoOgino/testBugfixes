{"path":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#getProps(CloudSolrServer,String,String,String...).mjava","commits":[{"id":"57517fbf5120ed94888bc0bfb86f9a81094059cf","date":1412273713,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#getProps(CloudSolrServer,String,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  // Expects the map will have keys, but blank values.\n  private Map<String, String> getProps(CloudSolrServer client, String collectionName, String replicaName, String... props) throws KeeperException, InterruptedException {\n    client.getZkStateReader().updateClusterState(true);\n    ClusterState clusterState = client.getZkStateReader().getClusterState();\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n    if (replica == null) {\n      fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n    }\n    Map<String, String> propMap = new HashMap<>();\n    for (String prop : props) {\n      propMap.put(prop, replica.getStr(prop));\n    }\n    return propMap;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#getProps(CloudSolrServer,String,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  // Expects the map will have keys, but blank values.\n  private Map<String, String> getProps(CloudSolrServer client, String collectionName, String replicaName, String... props) throws KeeperException, InterruptedException {\n    client.getZkStateReader().updateClusterState(true);\n    ClusterState clusterState = client.getZkStateReader().getClusterState();\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n    if (replica == null) {\n      fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n    }\n    Map<String, String> propMap = new HashMap<>();\n    for (String prop : props) {\n      propMap.put(prop, replica.getStr(prop));\n    }\n    return propMap;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64707d25b6352cf02909d3916038a3b3cec7f0a8","date":1412782122,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#getProps(CloudSolrServer,String,String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#getProps(CloudSolrServer,String,String,String...).mjava","sourceNew":"  // Expects the map will have keys, but blank values.\n  private Map<String, String> getProps(CloudSolrServer client, String collectionName, String replicaName, String... props)\n      throws KeeperException, InterruptedException {\n\n    client.getZkStateReader().updateClusterState(true);\n    ClusterState clusterState = client.getZkStateReader().getClusterState();\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n    if (replica == null) {\n      fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n    }\n    Map<String, String> propMap = new HashMap<>();\n    for (String prop : props) {\n      propMap.put(prop, replica.getStr(prop));\n    }\n    return propMap;\n  }\n\n","sourceOld":"  // Expects the map will have keys, but blank values.\n  private Map<String, String> getProps(CloudSolrServer client, String collectionName, String replicaName, String... props) throws KeeperException, InterruptedException {\n    client.getZkStateReader().updateClusterState(true);\n    ClusterState clusterState = client.getZkStateReader().getClusterState();\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n    if (replica == null) {\n      fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n    }\n    Map<String, String> propMap = new HashMap<>();\n    for (String prop : props) {\n      propMap.put(prop, replica.getStr(prop));\n    }\n    return propMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#getProps(CloudSolrServer,String,String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#getProps(CloudSolrServer,String,String,String...).mjava","sourceNew":"  // Expects the map will have keys, but blank values.\n  private Map<String, String> getProps(CloudSolrServer client, String collectionName, String replicaName, String... props)\n      throws KeeperException, InterruptedException {\n\n    client.getZkStateReader().updateClusterState(true);\n    ClusterState clusterState = client.getZkStateReader().getClusterState();\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n    if (replica == null) {\n      fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n    }\n    Map<String, String> propMap = new HashMap<>();\n    for (String prop : props) {\n      propMap.put(prop, replica.getStr(prop));\n    }\n    return propMap;\n  }\n\n","sourceOld":"  // Expects the map will have keys, but blank values.\n  private Map<String, String> getProps(CloudSolrServer client, String collectionName, String replicaName, String... props) throws KeeperException, InterruptedException {\n    client.getZkStateReader().updateClusterState(true);\n    ClusterState clusterState = client.getZkStateReader().getClusterState();\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n    if (replica == null) {\n      fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n    }\n    Map<String, String> propMap = new HashMap<>();\n    for (String prop : props) {\n      propMap.put(prop, replica.getStr(prop));\n    }\n    return propMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#getProps(CloudSolrClient,String,String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#getProps(CloudSolrServer,String,String,String...).mjava","sourceNew":"  // Expects the map will have keys, but blank values.\n  private Map<String, String> getProps(CloudSolrClient client, String collectionName, String replicaName, String... props)\n      throws KeeperException, InterruptedException {\n\n    client.getZkStateReader().updateClusterState(true);\n    ClusterState clusterState = client.getZkStateReader().getClusterState();\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n    if (replica == null) {\n      fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n    }\n    Map<String, String> propMap = new HashMap<>();\n    for (String prop : props) {\n      propMap.put(prop, replica.getStr(prop));\n    }\n    return propMap;\n  }\n\n","sourceOld":"  // Expects the map will have keys, but blank values.\n  private Map<String, String> getProps(CloudSolrServer client, String collectionName, String replicaName, String... props)\n      throws KeeperException, InterruptedException {\n\n    client.getZkStateReader().updateClusterState(true);\n    ClusterState clusterState = client.getZkStateReader().getClusterState();\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n    if (replica == null) {\n      fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n    }\n    Map<String, String> propMap = new HashMap<>();\n    for (String prop : props) {\n      propMap.put(prop, replica.getStr(prop));\n    }\n    return propMap;\n  }\n\n","bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["d9a47902d6207303f5ed3e7aaca62ca33433af66","64707d25b6352cf02909d3916038a3b3cec7f0a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["57517fbf5120ed94888bc0bfb86f9a81094059cf"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","57517fbf5120ed94888bc0bfb86f9a81094059cf"],"bafca15d8e408346a67f4282ad1143b88023893b":["64707d25b6352cf02909d3916038a3b3cec7f0a8"],"57517fbf5120ed94888bc0bfb86f9a81094059cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","57517fbf5120ed94888bc0bfb86f9a81094059cf"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["55980207f1977bd1463465de1659b821347e2fa8","bafca15d8e408346a67f4282ad1143b88023893b"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["55980207f1977bd1463465de1659b821347e2fa8"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57517fbf5120ed94888bc0bfb86f9a81094059cf":["64707d25b6352cf02909d3916038a3b3cec7f0a8","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}