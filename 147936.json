{"path":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(state.numDocs);\n        assert state.segmentName != null;\n        writer.finish(state.numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n\n    for (final TermsHashConsumerPerField field : fieldsToFlush.values() ) {\n      TermVectorsConsumerPerField perField = (TermVectorsConsumerPerField) field;\n      perField.termsHashPerField.reset();\n      perField.shrinkHash();\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(state.numDocs);\n        assert state.segmentName != null;\n        writer.finish(state.numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n\n    for (final TermsHashConsumerPerField field : fieldsToFlush.values() ) {\n      TermVectorsConsumerPerField perField = (TermVectorsConsumerPerField) field;\n      perField.termsHashPerField.reset();\n      perField.shrinkHash();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd9165e54429bb5c99e75d5cb1c926cc98772456","date":1337362687,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<String, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(state.numDocs);\n        assert state.segmentName != null;\n        writer.finish(state.numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n\n    for (final TermsHashConsumerPerField field : fieldsToFlush.values() ) {\n      TermVectorsConsumerPerField perField = (TermVectorsConsumerPerField) field;\n      perField.termsHashPerField.reset();\n      perField.shrinkHash();\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(state.numDocs);\n        assert state.segmentName != null;\n        writer.finish(state.numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n\n    for (final TermsHashConsumerPerField field : fieldsToFlush.values() ) {\n      TermVectorsConsumerPerField perField = (TermVectorsConsumerPerField) field;\n      perField.termsHashPerField.reset();\n      perField.shrinkHash();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<String, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.getDocCount();\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n\n    for (final TermsHashConsumerPerField field : fieldsToFlush.values() ) {\n      TermVectorsConsumerPerField perField = (TermVectorsConsumerPerField) field;\n      perField.termsHashPerField.reset();\n      perField.shrinkHash();\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(state.numDocs);\n        assert state.segmentName != null;\n        writer.finish(state.numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n\n    for (final TermsHashConsumerPerField field : fieldsToFlush.values() ) {\n      TermVectorsConsumerPerField perField = (TermVectorsConsumerPerField) field;\n      perField.termsHashPerField.reset();\n      perField.shrinkHash();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","cd9165e54429bb5c99e75d5cb1c926cc98772456"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd9165e54429bb5c99e75d5cb1c926cc98772456":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","cd9165e54429bb5c99e75d5cb1c926cc98772456"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd9165e54429bb5c99e75d5cb1c926cc98772456":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}