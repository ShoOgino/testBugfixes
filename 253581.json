{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","commits":[{"id":"7875fce026a0a335830cfc75abc3eb009eff9a73","date":1425897108,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, zkClient);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","sourceNew":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, zkClient);\n  }\n\n","sourceOld":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, zkClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, zkClient);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bdcb86c29922edae9a14852e636303bc52df094","date":1438887454,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","sourceNew":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH,\"{}\".getBytes(StandardCharsets.UTF_8),CreateMode.PERSISTENT, zkClient);\n  }\n\n","sourceOld":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, zkClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf","date":1440482195,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","sourceNew":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n  }\n\n","sourceOld":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH,\"{}\".getBytes(StandardCharsets.UTF_8),CreateMode.PERSISTENT, zkClient);\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9227359ab3bd86e5b85fab89a99332da7d5bacb1","date":1490341270,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","sourceNew":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n  }\n\n","sourceOld":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"464244264804e3f981bf1fb4b732516d8d62dbc2","date":1495736161,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","sourceNew":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n  }\n\n","sourceOld":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5531f16a602ef350b6c9adfb08ebaa13a60fe3db","date":1495756318,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","sourceNew":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n  }\n\n","sourceOld":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","sourceNew":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n  }\n\n","sourceOld":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","sourceNew":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n  }\n\n","sourceOld":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","sourceNew":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n  }\n\n","sourceOld":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c77a387d47ede09f8574d5d4abe19efa4ae53ad","date":1496757723,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","sourceNew":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n  }\n\n","sourceOld":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c32a8448145a74a8902798f2e63e322827757ff2","date":1496834422,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","sourceNew":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n  }\n\n","sourceOld":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"664ff2b928393480d9655010aa700656b0fcade0","date":1496842764,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","sourceNew":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n  }\n\n","sourceOld":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","sourceNew":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException, IOException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n   bootstrapDefaultConfigSet(zkClient);\n  }\n\n","sourceOld":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","sourceNew":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException, IOException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n   bootstrapDefaultConfigSet(zkClient);\n  }\n\n","sourceOld":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","sourceNew":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException, IOException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n   bootstrapDefaultConfigSet(zkClient);\n  }\n\n","sourceOld":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","sourceNew":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException, IOException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n   bootstrapDefaultConfigSet(zkClient);\n  }\n\n","sourceOld":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException, IOException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n   bootstrapDefaultConfigSet(zkClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","sourceNew":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException, IOException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n   bootstrapDefaultConfigSet(zkClient);\n  }\n\n","sourceOld":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException, IOException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n   bootstrapDefaultConfigSet(zkClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","sourceNew":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient)\n      throws KeeperException, InterruptedException, IOException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    bootstrapDefaultConfigSet(zkClient);\n  }\n\n","sourceOld":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient) throws KeeperException, InterruptedException, IOException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n   bootstrapDefaultConfigSet(zkClient);\n  }\n\n","bugFix":["197bbedf08450ade98a11f4a0001448059666bec"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","sourceNew":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient)\n      throws KeeperException, InterruptedException, IOException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    bootstrapDefaultConfigSet(zkClient);\n  }\n\n","sourceOld":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient)\n      throws KeeperException, InterruptedException, IOException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.CLUSTER_STATE, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    bootstrapDefaultConfigSet(zkClient);\n  }\n\n","bugFix":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createClusterZkNodes(SolrZkClient).mjava","sourceNew":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient)\n      throws KeeperException, InterruptedException, IOException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    bootstrapDefaultConfigSet(zkClient);\n  }\n\n","sourceOld":"  /**\n   * Create the zknodes necessary for a cluster to operate\n   *\n   * @param zkClient a SolrZkClient\n   * @throws KeeperException      if there is a Zookeeper error\n   * @throws InterruptedException on interrupt\n   */\n  public static void createClusterZkNodes(SolrZkClient zkClient)\n      throws KeeperException, InterruptedException, IOException {\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zkClient.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.ALIASES, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH, zkClient);\n    byte[] emptyJson = \"{}\".getBytes(StandardCharsets.UTF_8);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_SECURITY_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    cmdExecutor.ensureExists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, emptyJson, CreateMode.PERSISTENT, zkClient);\n    bootstrapDefaultConfigSet(zkClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bdcb86c29922edae9a14852e636303bc52df094":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"197bbedf08450ade98a11f4a0001448059666bec":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"3f504512a03d978990cbff30db0522b354e846db":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["560c18d71dad43d675158783c3840f8c80d6d39c"],"28288370235ed02234a64753cdbf0c6ec096304a":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf","197bbedf08450ade98a11f4a0001448059666bec"],"9227359ab3bd86e5b85fab89a99332da7d5bacb1":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"8c77a387d47ede09f8574d5d4abe19efa4ae53ad":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fbcfc050b9f253136eaa5950b57248b2109eac11"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["9227359ab3bd86e5b85fab89a99332da7d5bacb1","464244264804e3f981bf1fb4b732516d8d62dbc2"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["9227359ab3bd86e5b85fab89a99332da7d5bacb1"],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["6bdcb86c29922edae9a14852e636303bc52df094"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["664ff2b928393480d9655010aa700656b0fcade0","197bbedf08450ade98a11f4a0001448059666bec"],"c32a8448145a74a8902798f2e63e322827757ff2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["7875fce026a0a335830cfc75abc3eb009eff9a73"],"664ff2b928393480d9655010aa700656b0fcade0":["8c77a387d47ede09f8574d5d4abe19efa4ae53ad","c32a8448145a74a8902798f2e63e322827757ff2"]},"commit2Childs":{"6bdcb86c29922edae9a14852e636303bc52df094":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["3f504512a03d978990cbff30db0522b354e846db"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"197bbedf08450ade98a11f4a0001448059666bec":["28288370235ed02234a64753cdbf0c6ec096304a","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"9227359ab3bd86e5b85fab89a99332da7d5bacb1":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","464244264804e3f981bf1fb4b732516d8d62dbc2"],"8c77a387d47ede09f8574d5d4abe19efa4ae53ad":["664ff2b928393480d9655010aa700656b0fcade0"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["8c77a387d47ede09f8574d5d4abe19efa4ae53ad"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["e9017cf144952056066919f1ebc7897ff9bd71b1","c32a8448145a74a8902798f2e63e322827757ff2"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["197bbedf08450ade98a11f4a0001448059666bec","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7875fce026a0a335830cfc75abc3eb009eff9a73"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["28288370235ed02234a64753cdbf0c6ec096304a","9227359ab3bd86e5b85fab89a99332da7d5bacb1","74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7"],"c32a8448145a74a8902798f2e63e322827757ff2":["664ff2b928393480d9655010aa700656b0fcade0"],"560c18d71dad43d675158783c3840f8c80d6d39c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["6bdcb86c29922edae9a14852e636303bc52df094","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"664ff2b928393480d9655010aa700656b0fcade0":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}