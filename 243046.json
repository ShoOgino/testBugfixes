{"path":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkElectionQueues().mjava","commits":[{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkElectionQueues().mjava","pathOld":"/dev/null","sourceNew":"  // Do all active nodes in each slice appear exactly once in the slice's leader election queue?\n  // Since we assert that the number of live replicas is the same size as the leader election queue, we only\n  // have to compare one way.\n  private void checkElectionQueues() throws KeeperException, InterruptedException {\n\n    DocCollection docCollection = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(COLLECTION_NAME);\n    Set<String> liveNodes = cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes();\n\n    for (Slice slice : docCollection.getSlices()) {\n      Set<Replica> liveReplicas = new HashSet<>();\n      slice.getReplicas().forEach(replica -> {\n        if (replica.isActive(liveNodes)) {\n          liveReplicas.add(replica);\n        }\n      });\n      checkOneQueue(docCollection, slice, liveReplicas);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkElectionQueues().mjava","pathOld":"/dev/null","sourceNew":"  // Do all active nodes in each slice appear exactly once in the slice's leader election queue?\n  // Since we assert that the number of live replicas is the same size as the leader election queue, we only\n  // have to compare one way.\n  private void checkElectionQueues() throws KeeperException, InterruptedException {\n\n    DocCollection docCollection = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(COLLECTION_NAME);\n    Set<String> liveNodes = cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes();\n\n    for (Slice slice : docCollection.getSlices()) {\n      Set<Replica> liveReplicas = new HashSet<>();\n      slice.getReplicas().forEach(replica -> {\n        if (replica.isActive(liveNodes)) {\n          liveReplicas.add(replica);\n        }\n      });\n      checkOneQueue(docCollection, slice, liveReplicas);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73fd358e8ec697393d56617f4d9cedaca74dca14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73fd358e8ec697393d56617f4d9cedaca74dca14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73fd358e8ec697393d56617f4d9cedaca74dca14"]},"commit2Childs":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}