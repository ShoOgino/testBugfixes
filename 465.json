{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","sourceNew":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  public void rollback() throws IOException {\n    ensureOpen();\n\n    // Ensure that only one thread actually gets to do the closing:\n    if (shouldClose())\n      rollbackInternal();\n  }\n\n","sourceOld":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  public void rollback() throws IOException {\n    ensureOpen();\n\n    // Ensure that only one thread actually gets to do the closing:\n    if (shouldClose())\n      rollbackInternal();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f241b963c5bcd6c2293a928059dd2d64988a6042","date":1340296137,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","sourceNew":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  public void rollback() throws IOException {\n    ensureOpen();\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        rollbackInternal();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  public void rollback() throws IOException {\n    ensureOpen();\n\n    // Ensure that only one thread actually gets to do the closing:\n    if (shouldClose())\n      rollbackInternal();\n  }\n\n","bugFix":["c619aff1490fbcbfb8aee81049da5e5120a986d6"],"bugIntro":["322c7e6294f703248e9b818ca5b393b090ac05ad"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","sourceNew":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  public void rollback() throws IOException {\n    ensureOpen();\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        rollbackInternal();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  public void rollback() throws IOException {\n    ensureOpen();\n\n    // Ensure that only one thread actually gets to do the closing:\n    if (shouldClose())\n      rollbackInternal();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","sourceNew":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void rollback() throws IOException {\n    ensureOpen();\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        rollbackInternal();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  public void rollback() throws IOException {\n    ensureOpen();\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        rollbackInternal();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","sourceNew":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void rollback() throws IOException {\n    ensureOpen();\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        rollbackInternal();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  public void rollback() throws IOException {\n    ensureOpen();\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        rollbackInternal();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ad5831ce5311e0afb145f4ffafb431feb9ac224","date":1383743871,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","sourceNew":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void rollback() throws IOException {\n    ensureOpen();\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        rollbackInternal();\n      }\n    }\n    assert eventQueue.isEmpty() : eventQueue;\n  }\n\n","sourceOld":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void rollback() throws IOException {\n    ensureOpen();\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        rollbackInternal();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36d11d10048211b240fce248fcfd8fcf9735efd8","date":1389299500,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","sourceNew":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void rollback() throws IOException {\n    ensureOpen();\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        rollbackInternal();\n      }\n    }\n    assert assertEventQueueAfterClose();\n  }\n\n","sourceOld":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void rollback() throws IOException {\n    ensureOpen();\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        rollbackInternal();\n      }\n    }\n    assert eventQueue.isEmpty() : eventQueue;\n  }\n\n","bugFix":null,"bugIntro":["3c8ae37f624b6dd2e224b74ec2632c0810de8d18"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e9ca12badc371399673a8a074cb281a72f34049","date":1395419500,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","sourceNew":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void rollback() throws IOException {\n    // don't call ensureOpen here: this acts like \"close()\" in closeable.\n    \n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        rollbackInternal();\n      }\n    }\n    assert assertEventQueueAfterClose();\n  }\n\n","sourceOld":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void rollback() throws IOException {\n    ensureOpen();\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        rollbackInternal();\n      }\n    }\n    assert assertEventQueueAfterClose();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3c8ae37f624b6dd2e224b74ec2632c0810de8d18","date":1396297002,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","sourceNew":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void rollback() throws IOException {\n    // don't call ensureOpen here: this acts like \"close()\" in closeable.\n    \n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        rollbackInternal();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void rollback() throws IOException {\n    // don't call ensureOpen here: this acts like \"close()\" in closeable.\n    \n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        rollbackInternal();\n      }\n    }\n    assert assertEventQueueAfterClose();\n  }\n\n","bugFix":["36d11d10048211b240fce248fcfd8fcf9735efd8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","sourceNew":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void rollback() throws IOException {\n    // don't call ensureOpen here: this acts like \"close()\" in closeable.\n    \n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        rollbackInternal();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void rollback() throws IOException {\n    // don't call ensureOpen here: this acts like \"close()\" in closeable.\n    \n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        rollbackInternal();\n      }\n    }\n    assert assertEventQueueAfterClose();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9e22bdf0692bfa61e342b04a6ac7078670c1e16","date":1436866730,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","sourceNew":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void rollback() throws IOException {\n    // don't call ensureOpen here: this acts like \"close()\" in closeable.\n    \n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose(true)) {\n        rollbackInternal();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void rollback() throws IOException {\n    // don't call ensureOpen here: this acts like \"close()\" in closeable.\n    \n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        rollbackInternal();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["322c7e6294f703248e9b818ca5b393b090ac05ad"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"322c7e6294f703248e9b818ca5b393b090ac05ad","date":1442166853,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#rollback().mjava","sourceNew":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void rollback() throws IOException {\n    // don't call ensureOpen here: this acts like \"close()\" in closeable.\n    \n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    if (shouldClose(true)) {\n      rollbackInternal();\n    }\n  }\n\n","sourceOld":"  /**\n   * Close the <code>IndexWriter</code> without committing\n   * any changes that have occurred since the last commit\n   * (or since it was opened, if commit hasn't been called).\n   * This removes any temporary files that had been created,\n   * after which the state of the index will be the same as\n   * it was when commit() was last called or when this\n   * writer was first opened.  This also clears a previous\n   * call to {@link #prepareCommit}.\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void rollback() throws IOException {\n    // don't call ensureOpen here: this acts like \"close()\" in closeable.\n    \n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose(true)) {\n        rollbackInternal();\n      }\n    }\n  }\n\n","bugFix":["d9e22bdf0692bfa61e342b04a6ac7078670c1e16","f241b963c5bcd6c2293a928059dd2d64988a6042"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["6e9ca12badc371399673a8a074cb281a72f34049","3c8ae37f624b6dd2e224b74ec2632c0810de8d18"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["f241b963c5bcd6c2293a928059dd2d64988a6042","7530de27b87b961b51f01bd1299b7004d46e8823"],"322c7e6294f703248e9b818ca5b393b090ac05ad":["d9e22bdf0692bfa61e342b04a6ac7078670c1e16"],"f241b963c5bcd6c2293a928059dd2d64988a6042":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e9ca12badc371399673a8a074cb281a72f34049":["36d11d10048211b240fce248fcfd8fcf9735efd8"],"36d11d10048211b240fce248fcfd8fcf9735efd8":["4ad5831ce5311e0afb145f4ffafb431feb9ac224"],"4ad5831ce5311e0afb145f4ffafb431feb9ac224":["7530de27b87b961b51f01bd1299b7004d46e8823"],"3c8ae37f624b6dd2e224b74ec2632c0810de8d18":["6e9ca12badc371399673a8a074cb281a72f34049"],"d9e22bdf0692bfa61e342b04a6ac7078670c1e16":["3c8ae37f624b6dd2e224b74ec2632c0810de8d18"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f241b963c5bcd6c2293a928059dd2d64988a6042"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["f241b963c5bcd6c2293a928059dd2d64988a6042"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["322c7e6294f703248e9b818ca5b393b090ac05ad"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"322c7e6294f703248e9b818ca5b393b090ac05ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f241b963c5bcd6c2293a928059dd2d64988a6042":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","7530de27b87b961b51f01bd1299b7004d46e8823"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f241b963c5bcd6c2293a928059dd2d64988a6042","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"6e9ca12badc371399673a8a074cb281a72f34049":["5eb2511ababf862ea11e10761c70ee560cd84510","3c8ae37f624b6dd2e224b74ec2632c0810de8d18"],"36d11d10048211b240fce248fcfd8fcf9735efd8":["6e9ca12badc371399673a8a074cb281a72f34049"],"4ad5831ce5311e0afb145f4ffafb431feb9ac224":["36d11d10048211b240fce248fcfd8fcf9735efd8"],"3c8ae37f624b6dd2e224b74ec2632c0810de8d18":["5eb2511ababf862ea11e10761c70ee560cd84510","d9e22bdf0692bfa61e342b04a6ac7078670c1e16"],"d9e22bdf0692bfa61e342b04a6ac7078670c1e16":["322c7e6294f703248e9b818ca5b393b090ac05ad"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4ad5831ce5311e0afb145f4ffafb431feb9ac224"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}