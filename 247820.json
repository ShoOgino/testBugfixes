{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#createPhiTransform(double,double,double[][]).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#createPhiTransform(double,double,double[][]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoProjectionUtils#createPhiTransform(double,double,double[][]).mjava","sourceNew":"  /**\n   * Create the rotation matrix for converting Earth Centered Fixed to Easting Northing Up\n   * @param originLon ENU origin longitude (in degrees)\n   * @param originLat ENU origin latitude (in degrees)\n   * @param phiMatrix reusable phi matrix result\n   * @return phi rotation matrix\n   */\n  private static double[][] createPhiTransform(double originLon, double originLat, double[][] phiMatrix) {\n\n    if (phiMatrix == null) {\n      phiMatrix = new double[3][3];\n    }\n\n    originLon = TO_RADIANS * originLon;\n    originLat = TO_RADIANS * originLat;\n\n    final double sLon = sin(originLon);\n    final double cLon = cos(originLon);\n    final double sLat = sin(originLat);\n    final double cLat = cos(originLat);\n\n    phiMatrix[0][0] = -sLon;\n    phiMatrix[0][1] = cLon;\n    phiMatrix[0][2] = 0.0D;\n    phiMatrix[1][0] = -sLat * cLon;\n    phiMatrix[1][1] = -sLat * sLon;\n    phiMatrix[1][2] = cLat;\n    phiMatrix[2][0] = cLat * cLon;\n    phiMatrix[2][1] = cLat * sLon;\n    phiMatrix[2][2] = sLat;\n\n    return phiMatrix;\n  }\n\n","sourceOld":"  /**\n   * Create the rotation matrix for converting Earth Centered Fixed to Easting Northing Up\n   * @param originLon ENU origin longitude (in degrees)\n   * @param originLat ENU origin latitude (in degrees)\n   * @param phiMatrix reusable phi matrix result\n   * @return phi rotation matrix\n   */\n  private static double[][] createPhiTransform(double originLon, double originLat, double[][] phiMatrix) {\n\n    if (phiMatrix == null) {\n      phiMatrix = new double[3][3];\n    }\n\n    originLon = TO_RADIANS * originLon;\n    originLat = TO_RADIANS * originLat;\n\n    final double sLon = SloppyMath.sin(originLon);\n    final double cLon = SloppyMath.cos(originLon);\n    final double sLat = SloppyMath.sin(originLat);\n    final double cLat = SloppyMath.cos(originLat);\n\n    phiMatrix[0][0] = -sLon;\n    phiMatrix[0][1] = cLon;\n    phiMatrix[0][2] = 0.0D;\n    phiMatrix[1][0] = -sLat * cLon;\n    phiMatrix[1][1] = -sLat * sLon;\n    phiMatrix[1][2] = cLat;\n    phiMatrix[2][0] = cLat * cLon;\n    phiMatrix[2][1] = cLat * sLon;\n    phiMatrix[2][2] = sLat;\n\n    return phiMatrix;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#createPhiTransform(double,double,double[][]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoProjectionUtils#createPhiTransform(double,double,double[][]).mjava","sourceNew":"  /**\n   * Create the rotation matrix for converting Earth Centered Fixed to Easting Northing Up\n   * @param originLon ENU origin longitude (in degrees)\n   * @param originLat ENU origin latitude (in degrees)\n   * @param phiMatrix reusable phi matrix result\n   * @return phi rotation matrix\n   */\n  private static double[][] createPhiTransform(double originLon, double originLat, double[][] phiMatrix) {\n\n    if (phiMatrix == null) {\n      phiMatrix = new double[3][3];\n    }\n\n    originLon = TO_RADIANS * originLon;\n    originLat = TO_RADIANS * originLat;\n\n    final double sLon = sin(originLon);\n    final double cLon = cos(originLon);\n    final double sLat = sin(originLat);\n    final double cLat = cos(originLat);\n\n    phiMatrix[0][0] = -sLon;\n    phiMatrix[0][1] = cLon;\n    phiMatrix[0][2] = 0.0D;\n    phiMatrix[1][0] = -sLat * cLon;\n    phiMatrix[1][1] = -sLat * sLon;\n    phiMatrix[1][2] = cLat;\n    phiMatrix[2][0] = cLat * cLon;\n    phiMatrix[2][1] = cLat * sLon;\n    phiMatrix[2][2] = sLat;\n\n    return phiMatrix;\n  }\n\n","sourceOld":"  /**\n   * Create the rotation matrix for converting Earth Centered Fixed to Easting Northing Up\n   * @param originLon ENU origin longitude (in degrees)\n   * @param originLat ENU origin latitude (in degrees)\n   * @param phiMatrix reusable phi matrix result\n   * @return phi rotation matrix\n   */\n  private static double[][] createPhiTransform(double originLon, double originLat, double[][] phiMatrix) {\n\n    if (phiMatrix == null) {\n      phiMatrix = new double[3][3];\n    }\n\n    originLon = TO_RADIANS * originLon;\n    originLat = TO_RADIANS * originLat;\n\n    final double sLon = SloppyMath.sin(originLon);\n    final double cLon = SloppyMath.cos(originLon);\n    final double sLat = SloppyMath.sin(originLat);\n    final double cLat = SloppyMath.cos(originLat);\n\n    phiMatrix[0][0] = -sLon;\n    phiMatrix[0][1] = cLon;\n    phiMatrix[0][2] = 0.0D;\n    phiMatrix[1][0] = -sLat * cLon;\n    phiMatrix[1][1] = -sLat * sLon;\n    phiMatrix[1][2] = cLat;\n    phiMatrix[2][0] = cLat * cLon;\n    phiMatrix[2][1] = cLat * sLon;\n    phiMatrix[2][2] = sLat;\n\n    return phiMatrix;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#createPhiTransform(double,double,double[][]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#createPhiTransform(double,double,double[][]).mjava","sourceNew":"  /**\n   * Create the rotation matrix for converting Earth Centered Fixed to Easting Northing Up\n   * @param originLon ENU origin longitude (in degrees)\n   * @param originLat ENU origin latitude (in degrees)\n   * @param phiMatrix reusable phi matrix result\n   * @return phi rotation matrix\n   */\n  private static double[][] createPhiTransform(double originLon, double originLat, double[][] phiMatrix) {\n\n    if (phiMatrix == null) {\n      phiMatrix = new double[3][3];\n    }\n\n    originLon = TO_RADIANS * originLon;\n    originLat = TO_RADIANS * originLat;\n\n    final double sLon = sloppySin(originLon);\n    final double cLon = cos(originLon);\n    final double sLat = sloppySin(originLat);\n    final double cLat = cos(originLat);\n\n    phiMatrix[0][0] = -sLon;\n    phiMatrix[0][1] = cLon;\n    phiMatrix[0][2] = 0.0D;\n    phiMatrix[1][0] = -sLat * cLon;\n    phiMatrix[1][1] = -sLat * sLon;\n    phiMatrix[1][2] = cLat;\n    phiMatrix[2][0] = cLat * cLon;\n    phiMatrix[2][1] = cLat * sLon;\n    phiMatrix[2][2] = sLat;\n\n    return phiMatrix;\n  }\n\n","sourceOld":"  /**\n   * Create the rotation matrix for converting Earth Centered Fixed to Easting Northing Up\n   * @param originLon ENU origin longitude (in degrees)\n   * @param originLat ENU origin latitude (in degrees)\n   * @param phiMatrix reusable phi matrix result\n   * @return phi rotation matrix\n   */\n  private static double[][] createPhiTransform(double originLon, double originLat, double[][] phiMatrix) {\n\n    if (phiMatrix == null) {\n      phiMatrix = new double[3][3];\n    }\n\n    originLon = TO_RADIANS * originLon;\n    originLat = TO_RADIANS * originLat;\n\n    final double sLon = sin(originLon);\n    final double cLon = cos(originLon);\n    final double sLat = sin(originLat);\n    final double cLat = cos(originLat);\n\n    phiMatrix[0][0] = -sLon;\n    phiMatrix[0][1] = cLon;\n    phiMatrix[0][2] = 0.0D;\n    phiMatrix[1][0] = -sLat * cLon;\n    phiMatrix[1][1] = -sLat * sLon;\n    phiMatrix[1][2] = cLat;\n    phiMatrix[2][0] = cLat * cLon;\n    phiMatrix[2][1] = cLat * sLon;\n    phiMatrix[2][2] = sLat;\n\n    return phiMatrix;\n  }\n\n","bugFix":["937923083e4d137932336fc80f3d78758ff698a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#createPhiTransform(double,double,double[][]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create the rotation matrix for converting Earth Centered Fixed to Easting Northing Up\n   * @param originLon ENU origin longitude (in degrees)\n   * @param originLat ENU origin latitude (in degrees)\n   * @param phiMatrix reusable phi matrix result\n   * @return phi rotation matrix\n   */\n  private static double[][] createPhiTransform(double originLon, double originLat, double[][] phiMatrix) {\n\n    if (phiMatrix == null) {\n      phiMatrix = new double[3][3];\n    }\n\n    originLon = TO_RADIANS * originLon;\n    originLat = TO_RADIANS * originLat;\n\n    final double sLon = sloppySin(originLon);\n    final double cLon = cos(originLon);\n    final double sLat = sloppySin(originLat);\n    final double cLat = cos(originLat);\n\n    phiMatrix[0][0] = -sLon;\n    phiMatrix[0][1] = cLon;\n    phiMatrix[0][2] = 0.0D;\n    phiMatrix[1][0] = -sLat * cLon;\n    phiMatrix[1][1] = -sLat * sLon;\n    phiMatrix[1][2] = cLat;\n    phiMatrix[2][0] = cLat * cLon;\n    phiMatrix[2][1] = cLat * sLon;\n    phiMatrix[2][2] = sLat;\n\n    return phiMatrix;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["937923083e4d137932336fc80f3d78758ff698a6"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec996bf2daff09d61a876319e8fae4aebbea58e3"]},"commit2Childs":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"937923083e4d137932336fc80f3d78758ff698a6":["ec60431d008a694828dacb4bc3cda775b6c44a9f","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}