{"path":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<Long>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"2\"));\n      assertU(adoc(\"id\",\"3\"));\n      assertU(delI(\"2\"));\n      assertU(adoc(\"id\",\"4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<Long>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"2\"));\n      assertU(adoc(\"id\",\"3\"));\n      assertU(delI(\"2\"));\n      assertU(adoc(\"id\",\"4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<Long>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"2\"));\n      assertU(adoc(\"id\",\"3\"));\n      assertU(delI(\"2\"));\n      assertU(adoc(\"id\",\"4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e98f8ae83ed9c1151cd99b37a7371fd6754ac2","date":1329660825,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<Long>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<Long>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"2\"));\n      assertU(adoc(\"id\",\"3\"));\n      assertU(delI(\"2\"));\n      assertU(adoc(\"id\",\"4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<Long>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"268f09ed3a9a9b77003b15a5ae30386dc4e3721f","date":1483992000,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); // live map view\n\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      // check metrics\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      assertEquals(5L, replayDocs.getCount());\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["0642d05afc07bfe3de944300b21fdbf1e17d3baf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0642d05afc07bfe3de944300b21fdbf1e17d3baf","date":1484045056,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); // live map view\n\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      // check metrics\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(5L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); // live map view\n\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      // check metrics\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      assertEquals(5L, replayDocs.getCount());\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","bugFix":["268f09ed3a9a9b77003b15a5ae30386dc4e3721f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); // live map view\n\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      // check metrics\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(5L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    \n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 1)), null)); // atomic update\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 2)), null)); // in-place update\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); // live map view\n\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      // check metrics\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(7L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); // live map view\n\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      // check metrics\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(5L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    \n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 1)), null)); // atomic update\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 2)), null)); // in-place update\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); // live map view\n\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      // check metrics\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(7L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); // live map view\n\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      // check metrics\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(5L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1","date":1579200426,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    \n    try {\n\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 1)), null)); // atomic update\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 2)), null)); // in-place update\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); // live map view\n\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      // check metrics\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(7L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplay() throws Exception {\n    \n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 1)), null)); // atomic update\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 2)), null)); // in-place update\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); // live map view\n\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      // check metrics\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(7L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplay().mjava","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    \n    try {\n\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 1)), null)); // atomic update\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 2)), null)); // in-place update\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); // live map view\n\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      // check metrics\n      @SuppressWarnings({\"unchecked\"})\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      @SuppressWarnings({\"unchecked\"})\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      @SuppressWarnings({\"unchecked\"})\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(7L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplay() throws Exception {\n    \n    try {\n\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 1)), null)); // atomic update\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 2)), null)); // in-place update\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); // live map view\n\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      // check metrics\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(7L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["0642d05afc07bfe3de944300b21fdbf1e17d3baf"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["01e98f8ae83ed9c1151cd99b37a7371fd6754ac2"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","415bbbe7da8065dd3c477bdc3c703c6425622998"],"268f09ed3a9a9b77003b15a5ae30386dc4e3721f":["3a0c04b71951333291abc7f317109a6a5957bd28"],"0642d05afc07bfe3de944300b21fdbf1e17d3baf":["268f09ed3a9a9b77003b15a5ae30386dc4e3721f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["3a0c04b71951333291abc7f317109a6a5957bd28","0642d05afc07bfe3de944300b21fdbf1e17d3baf"],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"3a0c04b71951333291abc7f317109a6a5957bd28":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"e98520789adb1d5ad05afb4956eca0944a929688":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"01e98f8ae83ed9c1151cd99b37a7371fd6754ac2":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a0c04b71951333291abc7f317109a6a5957bd28"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"268f09ed3a9a9b77003b15a5ae30386dc4e3721f":["0642d05afc07bfe3de944300b21fdbf1e17d3baf"],"0642d05afc07bfe3de944300b21fdbf1e17d3baf":["415bbbe7da8065dd3c477bdc3c703c6425622998","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["598b5d23aa7c9732bf473c21a9cd309c44599394"],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["e98520789adb1d5ad05afb4956eca0944a929688"],"3a0c04b71951333291abc7f317109a6a5957bd28":["268f09ed3a9a9b77003b15a5ae30386dc4e3721f","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","01e98f8ae83ed9c1151cd99b37a7371fd6754ac2"],"01e98f8ae83ed9c1151cd99b37a7371fd6754ac2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}