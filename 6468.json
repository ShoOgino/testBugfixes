{"path":"lucene/core/src/test/org/apache/lucene/document/TestField#testStoredFieldBytes().mjava","commits":[{"id":"3a3635dad24b0681f0088f2ef680456482cdb451","date":1344025573,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestField#testStoredFieldBytes().mjava","pathOld":"/dev/null","sourceNew":"  public void testStoredFieldBytes() throws Exception {\n    Field fields[] = new Field[] {\n        new StoredField(\"foo\", \"bar\".getBytes(\"UTF-8\")),\n        new StoredField(\"foo\", \"bar\".getBytes(\"UTF-8\"), 0, 3),\n        new StoredField(\"foo\", new BytesRef(\"bar\")),\n    };\n    \n    for (Field field : fields) {\n      trySetBoost(field);\n      trySetByteValue(field);\n      field.setBytesValue(\"baz\".getBytes(\"UTF-8\"));\n      field.setBytesValue(new BytesRef(\"baz\"));\n      trySetDoubleValue(field);\n      trySetIntValue(field);\n      trySetFloatValue(field);\n      trySetLongValue(field);\n      trySetReaderValue(field);\n      trySetShortValue(field);\n      trySetStringValue(field);\n      trySetTokenStreamValue(field);\n      \n      assertEquals(new BytesRef(\"baz\"), field.binaryValue());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestField#testStoredFieldBytes().mjava","pathOld":"/dev/null","sourceNew":"  public void testStoredFieldBytes() throws Exception {\n    Field fields[] = new Field[] {\n        new StoredField(\"foo\", \"bar\".getBytes(\"UTF-8\")),\n        new StoredField(\"foo\", \"bar\".getBytes(\"UTF-8\"), 0, 3),\n        new StoredField(\"foo\", new BytesRef(\"bar\")),\n    };\n    \n    for (Field field : fields) {\n      trySetBoost(field);\n      trySetByteValue(field);\n      field.setBytesValue(\"baz\".getBytes(\"UTF-8\"));\n      field.setBytesValue(new BytesRef(\"baz\"));\n      trySetDoubleValue(field);\n      trySetIntValue(field);\n      trySetFloatValue(field);\n      trySetLongValue(field);\n      trySetReaderValue(field);\n      trySetShortValue(field);\n      trySetStringValue(field);\n      trySetTokenStreamValue(field);\n      \n      assertEquals(new BytesRef(\"baz\"), field.binaryValue());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestField#testStoredFieldBytes().mjava","pathOld":"/dev/null","sourceNew":"  public void testStoredFieldBytes() throws Exception {\n    Field fields[] = new Field[] {\n        new StoredField(\"foo\", \"bar\".getBytes(\"UTF-8\")),\n        new StoredField(\"foo\", \"bar\".getBytes(\"UTF-8\"), 0, 3),\n        new StoredField(\"foo\", new BytesRef(\"bar\")),\n    };\n    \n    for (Field field : fields) {\n      trySetBoost(field);\n      trySetByteValue(field);\n      field.setBytesValue(\"baz\".getBytes(\"UTF-8\"));\n      field.setBytesValue(new BytesRef(\"baz\"));\n      trySetDoubleValue(field);\n      trySetIntValue(field);\n      trySetFloatValue(field);\n      trySetLongValue(field);\n      trySetReaderValue(field);\n      trySetShortValue(field);\n      trySetStringValue(field);\n      trySetTokenStreamValue(field);\n      \n      assertEquals(new BytesRef(\"baz\"), field.binaryValue());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestField#testStoredFieldBytes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestField#testStoredFieldBytes().mjava","sourceNew":"  public void testStoredFieldBytes() throws Exception {\n    Field fields[] = new Field[] {\n        new StoredField(\"foo\", \"bar\".getBytes(StandardCharsets.UTF_8)),\n        new StoredField(\"foo\", \"bar\".getBytes(StandardCharsets.UTF_8), 0, 3),\n        new StoredField(\"foo\", new BytesRef(\"bar\")),\n    };\n    \n    for (Field field : fields) {\n      trySetBoost(field);\n      trySetByteValue(field);\n      field.setBytesValue(\"baz\".getBytes(StandardCharsets.UTF_8));\n      field.setBytesValue(new BytesRef(\"baz\"));\n      trySetDoubleValue(field);\n      trySetIntValue(field);\n      trySetFloatValue(field);\n      trySetLongValue(field);\n      trySetReaderValue(field);\n      trySetShortValue(field);\n      trySetStringValue(field);\n      trySetTokenStreamValue(field);\n      \n      assertEquals(new BytesRef(\"baz\"), field.binaryValue());\n    }\n  }\n\n","sourceOld":"  public void testStoredFieldBytes() throws Exception {\n    Field fields[] = new Field[] {\n        new StoredField(\"foo\", \"bar\".getBytes(\"UTF-8\")),\n        new StoredField(\"foo\", \"bar\".getBytes(\"UTF-8\"), 0, 3),\n        new StoredField(\"foo\", new BytesRef(\"bar\")),\n    };\n    \n    for (Field field : fields) {\n      trySetBoost(field);\n      trySetByteValue(field);\n      field.setBytesValue(\"baz\".getBytes(\"UTF-8\"));\n      field.setBytesValue(new BytesRef(\"baz\"));\n      trySetDoubleValue(field);\n      trySetIntValue(field);\n      trySetFloatValue(field);\n      trySetLongValue(field);\n      trySetReaderValue(field);\n      trySetShortValue(field);\n      trySetStringValue(field);\n      trySetTokenStreamValue(field);\n      \n      assertEquals(new BytesRef(\"baz\"), field.binaryValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestField#testStoredFieldBytes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestField#testStoredFieldBytes().mjava","sourceNew":"  public void testStoredFieldBytes() throws Exception {\n    Field fields[] = new Field[] {\n        new StoredField(\"foo\", \"bar\".getBytes(StandardCharsets.UTF_8)),\n        new StoredField(\"foo\", \"bar\".getBytes(StandardCharsets.UTF_8), 0, 3),\n        new StoredField(\"foo\", new BytesRef(\"bar\")),\n    };\n    \n    for (Field field : fields) {\n      trySetBoost(field);\n      trySetByteValue(field);\n      field.setBytesValue(\"baz\".getBytes(StandardCharsets.UTF_8));\n      field.setBytesValue(new BytesRef(\"baz\"));\n      trySetDoubleValue(field);\n      trySetIntValue(field);\n      trySetFloatValue(field);\n      trySetLongValue(field);\n      trySetReaderValue(field);\n      trySetShortValue(field);\n      trySetStringValue(field);\n      trySetTokenStreamValue(field);\n      \n      assertEquals(new BytesRef(\"baz\"), field.binaryValue());\n    }\n  }\n\n","sourceOld":"  public void testStoredFieldBytes() throws Exception {\n    Field fields[] = new Field[] {\n        new StoredField(\"foo\", \"bar\".getBytes(\"UTF-8\")),\n        new StoredField(\"foo\", \"bar\".getBytes(\"UTF-8\"), 0, 3),\n        new StoredField(\"foo\", new BytesRef(\"bar\")),\n    };\n    \n    for (Field field : fields) {\n      trySetBoost(field);\n      trySetByteValue(field);\n      field.setBytesValue(\"baz\".getBytes(\"UTF-8\"));\n      field.setBytesValue(new BytesRef(\"baz\"));\n      trySetDoubleValue(field);\n      trySetIntValue(field);\n      trySetFloatValue(field);\n      trySetLongValue(field);\n      trySetReaderValue(field);\n      trySetShortValue(field);\n      trySetStringValue(field);\n      trySetTokenStreamValue(field);\n      \n      assertEquals(new BytesRef(\"baz\"), field.binaryValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestField#testStoredFieldBytes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestField#testStoredFieldBytes().mjava","sourceNew":"  public void testStoredFieldBytes() throws Exception {\n    Field fields[] = new Field[] {\n        new StoredField(\"foo\", \"bar\".getBytes(StandardCharsets.UTF_8)),\n        new StoredField(\"foo\", \"bar\".getBytes(StandardCharsets.UTF_8), 0, 3),\n        new StoredField(\"foo\", new BytesRef(\"bar\")),\n    };\n    \n    for (Field field : fields) {\n      trySetByteValue(field);\n      field.setBytesValue(\"baz\".getBytes(StandardCharsets.UTF_8));\n      field.setBytesValue(new BytesRef(\"baz\"));\n      trySetDoubleValue(field);\n      trySetIntValue(field);\n      trySetFloatValue(field);\n      trySetLongValue(field);\n      trySetReaderValue(field);\n      trySetShortValue(field);\n      trySetStringValue(field);\n      trySetTokenStreamValue(field);\n      \n      assertEquals(new BytesRef(\"baz\"), field.binaryValue());\n    }\n  }\n\n","sourceOld":"  public void testStoredFieldBytes() throws Exception {\n    Field fields[] = new Field[] {\n        new StoredField(\"foo\", \"bar\".getBytes(StandardCharsets.UTF_8)),\n        new StoredField(\"foo\", \"bar\".getBytes(StandardCharsets.UTF_8), 0, 3),\n        new StoredField(\"foo\", new BytesRef(\"bar\")),\n    };\n    \n    for (Field field : fields) {\n      trySetBoost(field);\n      trySetByteValue(field);\n      field.setBytesValue(\"baz\".getBytes(StandardCharsets.UTF_8));\n      field.setBytesValue(new BytesRef(\"baz\"));\n      trySetDoubleValue(field);\n      trySetIntValue(field);\n      trySetFloatValue(field);\n      trySetLongValue(field);\n      trySetReaderValue(field);\n      trySetShortValue(field);\n      trySetStringValue(field);\n      trySetTokenStreamValue(field);\n      \n      assertEquals(new BytesRef(\"baz\"), field.binaryValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["3a3635dad24b0681f0088f2ef680456482cdb451","7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3a3635dad24b0681f0088f2ef680456482cdb451"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3a3635dad24b0681f0088f2ef680456482cdb451"],"7d89d7e4e5101347833eea558851bf4209218619":["3a3635dad24b0681f0088f2ef680456482cdb451"],"acd9883560fd89e6448b2b447302fe543040cd4f":["7d89d7e4e5101347833eea558851bf4209218619"],"3a3635dad24b0681f0088f2ef680456482cdb451":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","3a3635dad24b0681f0088f2ef680456482cdb451"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","acd9883560fd89e6448b2b447302fe543040cd4f"],"3a3635dad24b0681f0088f2ef680456482cdb451":["5eb2511ababf862ea11e10761c70ee560cd84510","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","7d89d7e4e5101347833eea558851bf4209218619"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}