{"path":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanSpanQuery().mjava","commits":[{"id":"0e354c63cdcc974a17c9f8531cecc001229c0952","date":1365702197,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanSpanQuery().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.close();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(indexReader);\n\n    DisjunctionMaxQuery query = new DisjunctionMaxQuery(1.0f);\n    SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n    query.add(sq1);\n    query.add(sq2);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(hits, 1);\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanSpanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanSpanQuery().mjava","sourceNew":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.shutdown();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(indexReader);\n\n    DisjunctionMaxQuery query = new DisjunctionMaxQuery(1.0f);\n    SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n    query.add(sq1);\n    query.add(sq2);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(hits, 1);\n    directory.close();\n  }\n\n","sourceOld":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.close();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(indexReader);\n\n    DisjunctionMaxQuery query = new DisjunctionMaxQuery(1.0f);\n    SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n    query.add(sq1);\n    query.add(sq2);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(hits, 1);\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanSpanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanSpanQuery().mjava","sourceNew":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.close();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(indexReader);\n\n    DisjunctionMaxQuery query = new DisjunctionMaxQuery(1.0f);\n    SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n    query.add(sq1);\n    query.add(sq2);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(hits, 1);\n    directory.close();\n  }\n\n","sourceOld":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.shutdown();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(indexReader);\n\n    DisjunctionMaxQuery query = new DisjunctionMaxQuery(1.0f);\n    SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n    query.add(sq1);\n    query.add(sq2);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(hits, 1);\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanSpanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanSpanQuery().mjava","sourceNew":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.close();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(indexReader);\n\n    DisjunctionMaxQuery query = new DisjunctionMaxQuery(1.0f);\n    SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n    query.add(sq1);\n    query.add(sq2);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000);\n    searcher.search(query, collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(hits, 1);\n    directory.close();\n  }\n\n","sourceOld":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.close();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(indexReader);\n\n    DisjunctionMaxQuery query = new DisjunctionMaxQuery(1.0f);\n    SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n    query.add(sq1);\n    query.add(sq2);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(hits, 1);\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5d3ee590efa5b1f764e8ce985d9125bc97af483","date":1446225158,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanSpanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanSpanQuery().mjava","sourceNew":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.close();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(indexReader);\n\n    DisjunctionMaxQuery query = new DisjunctionMaxQuery(\n        Arrays.asList(\n            new SpanTermQuery(new Term(FIELD, \"clockwork\")),\n            new SpanTermQuery(new Term(FIELD, \"clckwork\"))),\n        1.0f);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000);\n    searcher.search(query, collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(hits, 1);\n    directory.close();\n  }\n\n","sourceOld":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.close();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(indexReader);\n\n    DisjunctionMaxQuery query = new DisjunctionMaxQuery(1.0f);\n    SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n    query.add(sq1);\n    query.add(sq2);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000);\n    searcher.search(query, collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(hits, 1);\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3c6364bed04a73ad0884b05401d80ce96027a9","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanSpanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanSpanQuery().mjava","sourceNew":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.close();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(indexReader);\n\n    DisjunctionMaxQuery query = new DisjunctionMaxQuery(\n        Arrays.asList(\n            new SpanTermQuery(new Term(FIELD, \"clockwork\")),\n            new SpanTermQuery(new Term(FIELD, \"clckwork\"))),\n        1.0f);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, Integer.MAX_VALUE);\n    searcher.search(query, collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(hits, 1);\n    directory.close();\n  }\n\n","sourceOld":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.close();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(indexReader);\n\n    DisjunctionMaxQuery query = new DisjunctionMaxQuery(\n        Arrays.asList(\n            new SpanTermQuery(new Term(FIELD, \"clockwork\")),\n            new SpanTermQuery(new Term(FIELD, \"clckwork\"))),\n        1.0f);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000);\n    searcher.search(query, collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(hits, 1);\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"0e354c63cdcc974a17c9f8531cecc001229c0952":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["0e354c63cdcc974a17c9f8531cecc001229c0952"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"]},"commit2Childs":{"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"0e354c63cdcc974a17c9f8531cecc001229c0952":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e354c63cdcc974a17c9f8531cecc001229c0952"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}