{"path":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checksumEntireFile(IndexInput).mjava","commits":[{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checksumEntireFile(IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Clones the provided input, reads all bytes from the file, and calls {@link #checkFooter} \n   * <p>\n   * Note that this method may be slow, as it must process the entire file.\n   * If you just need to extract the checksum value, call {@link #retrieveChecksum}.\n   */\n  public static long checksumEntireFile(IndexInput input) throws IOException {\n    IndexInput clone = input.clone();\n    clone.seek(0);\n    ChecksumIndexInput in = new BufferedChecksumIndexInput(clone);\n    assert in.getFilePointer() == 0;\n    final byte[] buffer = new byte[1024];\n    long bytesToRead = in.length() - footerLength();\n    for (long skipped = 0; skipped < bytesToRead; ) {\n      final int toRead = (int) Math.min(bytesToRead - skipped, buffer.length);\n      in.readBytes(buffer, 0, toRead);\n      skipped += toRead;\n    }\n    return checkFooter(in);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c7bda8b8b6640dd6438d931c8f9432366011a094"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checksumEntireFile(IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Clones the provided input, reads all bytes from the file, and calls {@link #checkFooter} \n   * <p>\n   * Note that this method may be slow, as it must process the entire file.\n   * If you just need to extract the checksum value, call {@link #retrieveChecksum}.\n   */\n  public static long checksumEntireFile(IndexInput input) throws IOException {\n    IndexInput clone = input.clone();\n    clone.seek(0);\n    ChecksumIndexInput in = new BufferedChecksumIndexInput(clone);\n    assert in.getFilePointer() == 0;\n    final byte[] buffer = new byte[1024];\n    long bytesToRead = in.length() - footerLength();\n    for (long skipped = 0; skipped < bytesToRead; ) {\n      final int toRead = (int) Math.min(bytesToRead - skipped, buffer.length);\n      in.readBytes(buffer, 0, toRead);\n      skipped += toRead;\n    }\n    return checkFooter(in);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bda8b8b6640dd6438d931c8f9432366011a094","date":1397113958,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checksumEntireFile(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checksumEntireFile(IndexInput).mjava","sourceNew":"  /** \n   * Clones the provided input, reads all bytes from the file, and calls {@link #checkFooter} \n   * <p>\n   * Note that this method may be slow, as it must process the entire file.\n   * If you just need to extract the checksum value, call {@link #retrieveChecksum}.\n   */\n  public static long checksumEntireFile(IndexInput input) throws IOException {\n    IndexInput clone = input.clone();\n    clone.seek(0);\n    ChecksumIndexInput in = new BufferedChecksumIndexInput(clone);\n    assert in.getFilePointer() == 0;\n    in.seek(in.length() - footerLength());\n    return checkFooter(in);\n  }\n\n","sourceOld":"  /** \n   * Clones the provided input, reads all bytes from the file, and calls {@link #checkFooter} \n   * <p>\n   * Note that this method may be slow, as it must process the entire file.\n   * If you just need to extract the checksum value, call {@link #retrieveChecksum}.\n   */\n  public static long checksumEntireFile(IndexInput input) throws IOException {\n    IndexInput clone = input.clone();\n    clone.seek(0);\n    ChecksumIndexInput in = new BufferedChecksumIndexInput(clone);\n    assert in.getFilePointer() == 0;\n    final byte[] buffer = new byte[1024];\n    long bytesToRead = in.length() - footerLength();\n    for (long skipped = 0; skipped < bytesToRead; ) {\n      final int toRead = (int) Math.min(bytesToRead - skipped, buffer.length);\n      in.readBytes(buffer, 0, toRead);\n      skipped += toRead;\n    }\n    return checkFooter(in);\n  }\n\n","bugFix":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34a1e1a1a2514cde835c2bf4371e3f561d13b3cd","date":1494952317,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checksumEntireFile(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checksumEntireFile(IndexInput).mjava","sourceNew":"  /** \n   * Clones the provided input, reads all bytes from the file, and calls {@link #checkFooter} \n   * <p>\n   * Note that this method may be slow, as it must process the entire file.\n   * If you just need to extract the checksum value, call {@link #retrieveChecksum}.\n   */\n  public static long checksumEntireFile(IndexInput input) throws IOException {\n    IndexInput clone = input.clone();\n    clone.seek(0);\n    ChecksumIndexInput in = new BufferedChecksumIndexInput(clone);\n    assert in.getFilePointer() == 0;\n    if (in.length() < footerLength()) {\n      throw new CorruptIndexException(\"misplaced codec footer (file truncated?): length=\" + in.length() + \" but footerLength==\" + footerLength(), input);\n    }\n    in.seek(in.length() - footerLength());\n    return checkFooter(in);\n  }\n\n","sourceOld":"  /** \n   * Clones the provided input, reads all bytes from the file, and calls {@link #checkFooter} \n   * <p>\n   * Note that this method may be slow, as it must process the entire file.\n   * If you just need to extract the checksum value, call {@link #retrieveChecksum}.\n   */\n  public static long checksumEntireFile(IndexInput input) throws IOException {\n    IndexInput clone = input.clone();\n    clone.seek(0);\n    ChecksumIndexInput in = new BufferedChecksumIndexInput(clone);\n    assert in.getFilePointer() == 0;\n    in.seek(in.length() - footerLength());\n    return checkFooter(in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","date":1495081498,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checksumEntireFile(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checksumEntireFile(IndexInput).mjava","sourceNew":"  /** \n   * Clones the provided input, reads all bytes from the file, and calls {@link #checkFooter} \n   * <p>\n   * Note that this method may be slow, as it must process the entire file.\n   * If you just need to extract the checksum value, call {@link #retrieveChecksum}.\n   */\n  public static long checksumEntireFile(IndexInput input) throws IOException {\n    IndexInput clone = input.clone();\n    clone.seek(0);\n    ChecksumIndexInput in = new BufferedChecksumIndexInput(clone);\n    assert in.getFilePointer() == 0;\n    if (in.length() < footerLength()) {\n      throw new CorruptIndexException(\"misplaced codec footer (file truncated?): length=\" + in.length() + \" but footerLength==\" + footerLength(), input);\n    }\n    in.seek(in.length() - footerLength());\n    return checkFooter(in);\n  }\n\n","sourceOld":"  /** \n   * Clones the provided input, reads all bytes from the file, and calls {@link #checkFooter} \n   * <p>\n   * Note that this method may be slow, as it must process the entire file.\n   * If you just need to extract the checksum value, call {@link #retrieveChecksum}.\n   */\n  public static long checksumEntireFile(IndexInput input) throws IOException {\n    IndexInput clone = input.clone();\n    clone.seek(0);\n    ChecksumIndexInput in = new BufferedChecksumIndexInput(clone);\n    assert in.getFilePointer() == 0;\n    in.seek(in.length() - footerLength());\n    return checkFooter(in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checksumEntireFile(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checksumEntireFile(IndexInput).mjava","sourceNew":"  /** \n   * Clones the provided input, reads all bytes from the file, and calls {@link #checkFooter} \n   * <p>\n   * Note that this method may be slow, as it must process the entire file.\n   * If you just need to extract the checksum value, call {@link #retrieveChecksum}.\n   */\n  public static long checksumEntireFile(IndexInput input) throws IOException {\n    IndexInput clone = input.clone();\n    clone.seek(0);\n    ChecksumIndexInput in = new BufferedChecksumIndexInput(clone);\n    assert in.getFilePointer() == 0;\n    if (in.length() < footerLength()) {\n      throw new CorruptIndexException(\"misplaced codec footer (file truncated?): length=\" + in.length() + \" but footerLength==\" + footerLength(), input);\n    }\n    in.seek(in.length() - footerLength());\n    return checkFooter(in);\n  }\n\n","sourceOld":"  /** \n   * Clones the provided input, reads all bytes from the file, and calls {@link #checkFooter} \n   * <p>\n   * Note that this method may be slow, as it must process the entire file.\n   * If you just need to extract the checksum value, call {@link #retrieveChecksum}.\n   */\n  public static long checksumEntireFile(IndexInput input) throws IOException {\n    IndexInput clone = input.clone();\n    clone.seek(0);\n    ChecksumIndexInput in = new BufferedChecksumIndexInput(clone);\n    assert in.getFilePointer() == 0;\n    in.seek(in.length() - footerLength());\n    return checkFooter(in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"c7bda8b8b6640dd6438d931c8f9432366011a094":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["c7bda8b8b6640dd6438d931c8f9432366011a094","c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["c7bda8b8b6640dd6438d931c8f9432366011a094","34a1e1a1a2514cde835c2bf4371e3f561d13b3cd"],"34a1e1a1a2514cde835c2bf4371e3f561d13b3cd":["c7bda8b8b6640dd6438d931c8f9432366011a094"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","c7bda8b8b6640dd6438d931c8f9432366011a094"],"c7bda8b8b6640dd6438d931c8f9432366011a094":["e9017cf144952056066919f1ebc7897ff9bd71b1","c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","34a1e1a1a2514cde835c2bf4371e3f561d13b3cd"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"34a1e1a1a2514cde835c2bf4371e3f561d13b3cd":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}