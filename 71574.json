{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#open().mjava","commits":[{"id":"10b9c6c42133576daaccbd79bd04c88511b9caca","date":1455930223,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#open().mjava","pathOld":"/dev/null","sourceNew":"  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new CloudSolrClient(zkHost);\n      this.cloudSolrClient.connect();\n    }\n\n    if(checkpoints.size() == 0) {\n      getPersistedCheckpoints();\n      if(checkpoints.size() == 0) {\n        getCheckpoints();\n      }\n    }\n\n    constructStreams();\n    openStreams();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n\n    if(checkpoints.size() == 0) {\n      getPersistedCheckpoints();\n      if(checkpoints.size() == 0) {\n        getCheckpoints();\n      }\n    }\n\n    constructStreams();\n    openStreams();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new CloudSolrClient(zkHost);\n      this.cloudSolrClient.connect();\n    }\n\n    if(checkpoints.size() == 0) {\n      getPersistedCheckpoints();\n      if(checkpoints.size() == 0) {\n        getCheckpoints();\n      }\n    }\n\n    constructStreams();\n    openStreams();\n  }\n\n","bugFix":null,"bugIntro":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n\n    if(checkpoints.size() == 0) {\n      getPersistedCheckpoints();\n      if(checkpoints.size() == 0) {\n        getCheckpoints();\n      }\n    }\n\n    constructStreams();\n    openStreams();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new CloudSolrClient(zkHost);\n      this.cloudSolrClient.connect();\n    }\n\n    if(checkpoints.size() == 0) {\n      getPersistedCheckpoints();\n      if(checkpoints.size() == 0) {\n        getCheckpoints();\n      }\n    }\n\n    constructStreams();\n    openStreams();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n\n    if(streamContext.getSolrClientCache() != null) {\n      cloudSolrClient = streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n\n    if(checkpoints.size() == 0) {\n      getPersistedCheckpoints();\n      if(checkpoints.size() == 0) {\n        getCheckpoints();\n      }\n    }\n\n    constructStreams();\n    openStreams();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n\n    if(checkpoints.size() == 0) {\n      getPersistedCheckpoints();\n      if(checkpoints.size() == 0) {\n        getCheckpoints();\n      }\n    }\n\n    constructStreams();\n    openStreams();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n\n    if(streamContext.getSolrClientCache() != null) {\n      cloudSolrClient = streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n\n    if(checkpoints.size() == 0) {\n      getPersistedCheckpoints();\n      if(checkpoints.size() == 0) {\n        getCheckpoints();\n      }\n    }\n\n    constructStreams();\n    openStreams();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n\n    if(checkpoints.size() == 0) {\n      getPersistedCheckpoints();\n      if(checkpoints.size() == 0) {\n        getCheckpoints();\n      }\n    }\n\n    constructStreams();\n    openStreams();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n\n    if(streamContext.getSolrClientCache() != null) {\n      cloudSolrClient = streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n\n    if(checkpoints.size() == 0) {\n      getPersistedCheckpoints();\n      if(checkpoints.size() == 0) {\n        getCheckpoints();\n      }\n    }\n\n    constructStreams();\n    openStreams();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n\n    if(checkpoints.size() == 0) {\n      getPersistedCheckpoints();\n      if(checkpoints.size() == 0) {\n        getCheckpoints();\n      }\n    }\n\n    constructStreams();\n    openStreams();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"915201312eef398482b3dffe8a297e1809f3b29a","date":1468722990,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n\n    if(checkpoints.size() == 0 && streamContext.numWorkers > 1) {\n      //Each worker must maintain it's own checkpoints\n      this.id = this.id+\"_\"+streamContext.workerID;\n    }\n\n    if(streamContext.getSolrClientCache() != null) {\n      cloudSolrClient = streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n\n    if(checkpoints.size() == 0) {\n      getPersistedCheckpoints();\n      if(checkpoints.size() == 0) {\n        getCheckpoints();\n      }\n    }\n\n    constructStreams();\n    openStreams();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n\n    if(streamContext.getSolrClientCache() != null) {\n      cloudSolrClient = streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n\n    if(checkpoints.size() == 0) {\n      getPersistedCheckpoints();\n      if(checkpoints.size() == 0) {\n        getCheckpoints();\n      }\n    }\n\n    constructStreams();\n    openStreams();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n\n    if(checkpoints.size() == 0 && streamContext.numWorkers > 1) {\n      //Each worker must maintain it's own checkpoints\n      this.id = this.id+\"_\"+streamContext.workerID;\n    }\n\n    if(streamContext.getSolrClientCache() != null) {\n      cloudSolrClient = streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n\n    if(checkpoints.size() == 0) {\n      getPersistedCheckpoints();\n      if(checkpoints.size() == 0) {\n        getCheckpoints();\n      }\n    }\n\n    constructStreams();\n    openStreams();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n\n    if(checkpoints.size() == 0) {\n      getPersistedCheckpoints();\n      if(checkpoints.size() == 0) {\n        getCheckpoints();\n      }\n    }\n\n    constructStreams();\n    openStreams();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n\n    if(checkpoints.size() == 0 && streamContext.numWorkers > 1) {\n      //Each worker must maintain it's own checkpoints\n      this.id = this.id+\"_\"+streamContext.workerID;\n    }\n\n    if(streamContext.getSolrClientCache() != null) {\n      cloudSolrClient = streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<String>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty())\n          .build();\n      this.cloudSolrClient.connect();\n    }\n\n    if(checkpoints.size() == 0) {\n      getPersistedCheckpoints();\n      if(checkpoints.size() == 0) {\n        getCheckpoints();\n      }\n    }\n\n    constructStreams();\n    openStreams();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n\n    if(checkpoints.size() == 0 && streamContext.numWorkers > 1) {\n      //Each worker must maintain it's own checkpoints\n      this.id = this.id+\"_\"+streamContext.workerID;\n    }\n\n    if(streamContext.getSolrClientCache() != null) {\n      cloudSolrClient = streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n\n    if(checkpoints.size() == 0) {\n      getPersistedCheckpoints();\n      if(checkpoints.size() == 0) {\n        getCheckpoints();\n      }\n    }\n\n    constructStreams();\n    openStreams();\n  }\n\n","bugFix":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c342e04e879b5c549539944338f5ec0ff3000f3","date":1539630497,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n\n    if(checkpoints.size() == 0 && streamContext.numWorkers > 1) {\n      //Each worker must maintain its own checkpoints\n      this.id = this.id+\"_\"+streamContext.workerID;\n    }\n\n    if(streamContext.getSolrClientCache() != null) {\n      cloudSolrClient = streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<String>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty())\n          .build();\n      this.cloudSolrClient.connect();\n    }\n\n    if(checkpoints.size() == 0) {\n      getPersistedCheckpoints();\n      if(checkpoints.size() == 0) {\n        getCheckpoints();\n      }\n    }\n\n    constructStreams();\n    openStreams();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n\n    if(checkpoints.size() == 0 && streamContext.numWorkers > 1) {\n      //Each worker must maintain it's own checkpoints\n      this.id = this.id+\"_\"+streamContext.workerID;\n    }\n\n    if(streamContext.getSolrClientCache() != null) {\n      cloudSolrClient = streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<String>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty())\n          .build();\n      this.cloudSolrClient.connect();\n    }\n\n    if(checkpoints.size() == 0) {\n      getPersistedCheckpoints();\n      if(checkpoints.size() == 0) {\n        getCheckpoints();\n      }\n    }\n\n    constructStreams();\n    openStreams();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    this.tuples = new TreeSet<>();\n    this.solrStreams = new ArrayList<>();\n    this.eofTuples = Collections.synchronizedMap(new HashMap<>());\n\n    if(checkpoints.size() == 0 && streamContext.numWorkers > 1) {\n      //Each worker must maintain its own checkpoints\n      this.id = this.id+\"_\"+streamContext.workerID;\n    }\n\n    if(streamContext.getSolrClientCache() != null) {\n      cloudSolrClient = streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<String>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty())\n          .build();\n      this.cloudSolrClient.connect();\n    }\n\n    if(checkpoints.size() == 0) {\n      getPersistedCheckpoints();\n      if(checkpoints.size() == 0) {\n        getCheckpoints();\n      }\n    }\n\n    constructStreams();\n    openStreams();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n\n    if(checkpoints.size() == 0 && streamContext.numWorkers > 1) {\n      //Each worker must maintain its own checkpoints\n      this.id = this.id+\"_\"+streamContext.workerID;\n    }\n\n    if(streamContext.getSolrClientCache() != null) {\n      cloudSolrClient = streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<String>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty())\n          .build();\n      this.cloudSolrClient.connect();\n    }\n\n    if(checkpoints.size() == 0) {\n      getPersistedCheckpoints();\n      if(checkpoints.size() == 0) {\n        getCheckpoints();\n      }\n    }\n\n    constructStreams();\n    openStreams();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"10b9c6c42133576daaccbd79bd04c88511b9caca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"915201312eef398482b3dffe8a297e1809f3b29a":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","915201312eef398482b3dffe8a297e1809f3b29a"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["915201312eef398482b3dffe8a297e1809f3b29a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["10b9c6c42133576daaccbd79bd04c88511b9caca","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["5c342e04e879b5c549539944338f5ec0ff3000f3"],"5c342e04e879b5c549539944338f5ec0ff3000f3":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"]},"commit2Childs":{"10b9c6c42133576daaccbd79bd04c88511b9caca":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"915201312eef398482b3dffe8a297e1809f3b29a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["915201312eef398482b3dffe8a297e1809f3b29a"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["5c342e04e879b5c549539944338f5ec0ff3000f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c342e04e879b5c549539944338f5ec0ff3000f3":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}