{"path":"src/java/org/apache/solr/search/ToMultiValueSource#getValues(Map,IndexReader).mjava","commits":[{"id":"abec2fd822be07fc74ef5ba3609b9c5625a87d6d","date":1261659802,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/ToMultiValueSource#getValues(Map,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    int size = sources.size();\n    final DocValues[] valsArr = new DocValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, reader);\n    }\n    return new DocValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"toMultiVS(\");\n        boolean firstTime = true;\n        for (DocValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c663601756d9e58d4222866f6655485b747d9afa","date":1261691652,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/ToMultiValueSource#getValues(Map,IndexReader).mjava","pathOld":"src/java/org/apache/solr/search/ToMultiValueSource#getValues(Map,IndexReader).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final DocValues x = sources.get(0).getValues(context, reader);\n      final DocValues y = sources.get(1).getValues(context, reader);\n      return new DocValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n\n        @Override\n        public void shortVal(int doc, short[] vals) {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        public String toString(int doc) {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final DocValues[] valsArr = new DocValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, reader);\n    }\n\n    return new DocValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (DocValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    int size = sources.size();\n    final DocValues[] valsArr = new DocValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, reader);\n    }\n    return new DocValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"toMultiVS(\");\n        boolean firstTime = true;\n        for (DocValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["f665ce4b6a64b2db94dc9da2de12ad24afd3e673"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5703611aa66d862b378d511ccaa2e6d68bab5326","date":1262011278,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/VectorValueSource#getValues(Map,IndexReader).mjava","pathOld":"src/java/org/apache/solr/search/ToMultiValueSource#getValues(Map,IndexReader).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final DocValues x = sources.get(0).getValues(context, reader);\n      final DocValues y = sources.get(1).getValues(context, reader);\n      return new DocValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n\n        @Override\n        public void shortVal(int doc, short[] vals) {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        public String toString(int doc) {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final DocValues[] valsArr = new DocValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, reader);\n    }\n\n    return new DocValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (DocValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final DocValues x = sources.get(0).getValues(context, reader);\n      final DocValues y = sources.get(1).getValues(context, reader);\n      return new DocValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n\n        @Override\n        public void shortVal(int doc, short[] vals) {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        public String toString(int doc) {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final DocValues[] valsArr = new DocValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, reader);\n    }\n\n    return new DocValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (DocValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"5703611aa66d862b378d511ccaa2e6d68bab5326":["c663601756d9e58d4222866f6655485b747d9afa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c663601756d9e58d4222866f6655485b747d9afa":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["c663601756d9e58d4222866f6655485b747d9afa"],"5703611aa66d862b378d511ccaa2e6d68bab5326":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"c663601756d9e58d4222866f6655485b747d9afa":["5703611aa66d862b378d511ccaa2e6d68bab5326"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5703611aa66d862b378d511ccaa2e6d68bab5326","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}