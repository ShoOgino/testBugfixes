{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#toString(Reader).mjava","commits":[{"id":"50e7972fe4865715af8951d4ba15555e3426fc5d","date":1115024647,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#toString(Reader).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Reads until end-of-stream and returns all read chars, finally closes the stream.\n\t * \n\t * @param input the input stream\n\t * @throws IOException if an I/O error occurs while reading the stream\n\t */\n\tprivate static String toString(Reader input) throws IOException {\n\t\ttry {\n\t\t\tint len = 256;\n\t\t\tchar[] buffer = new char[len];\n\t\t\tchar[] output = new char[len];\n\t\t\t\n\t\t\tlen = 0;\n\t\t\tint n;\n\t\t\twhile ((n = input.read(buffer)) >= 0) {\n\t\t\t\tif (len + n > output.length) { // grow capacity\n\t\t\t\t\tchar[] tmp = new char[Math.max(output.length << 1, len + n)];\n\t\t\t\t\tSystem.arraycopy(output, 0, tmp, 0, len);\n\t\t\t\t\tSystem.arraycopy(buffer, 0, tmp, len, n);\n\t\t\t\t\tbuffer = output; // use larger buffer for future larger bulk reads\n\t\t\t\t\toutput = tmp;\n\t\t\t\t} else {\n\t\t\t\t\tSystem.arraycopy(buffer, 0, output, len, n);\n\t\t\t\t}\n\t\t\t\tlen += n;\n\t\t\t}\n\n\t\t\treturn new String(output, 0, output.length);\n\t\t} finally {\n\t\t\tif (input != null) input.close();\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8f14489323057ef6de92ba5ea2d0cfe6e34755f","date":1120167605,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#toString(Reader).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#toString(Reader).mjava","sourceNew":"\t/**\r\n\t * Reads until end-of-stream and returns all read chars, finally closes the stream.\r\n\t * \r\n\t * @param input the input stream\r\n\t * @throws IOException if an I/O error occurs while reading the stream\r\n\t */\r\n\tprivate static String toString(Reader input) throws IOException {\r\n\t\ttry {\r\n\t\t\tint len = 256;\r\n\t\t\tchar[] buffer = new char[len];\r\n\t\t\tchar[] output = new char[len];\r\n\t\t\t\r\n\t\t\tlen = 0;\r\n\t\t\tint n;\r\n\t\t\twhile ((n = input.read(buffer)) >= 0) {\r\n\t\t\t\tif (len + n > output.length) { // grow capacity\r\n\t\t\t\t\tchar[] tmp = new char[Math.max(output.length << 1, len + n)];\r\n\t\t\t\t\tSystem.arraycopy(output, 0, tmp, 0, len);\r\n\t\t\t\t\tSystem.arraycopy(buffer, 0, tmp, len, n);\r\n\t\t\t\t\tbuffer = output; // use larger buffer for future larger bulk reads\r\n\t\t\t\t\toutput = tmp;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tSystem.arraycopy(buffer, 0, output, len, n);\r\n\t\t\t\t}\r\n\t\t\t\tlen += n;\r\n\t\t\t}\r\n\r\n\t\t\treturn new String(output, 0, output.length);\r\n\t\t} finally {\r\n\t\t\tif (input != null) input.close();\r\n\t\t}\r\n\t}\r\n\n","sourceOld":"\t/**\n\t * Reads until end-of-stream and returns all read chars, finally closes the stream.\n\t * \n\t * @param input the input stream\n\t * @throws IOException if an I/O error occurs while reading the stream\n\t */\n\tprivate static String toString(Reader input) throws IOException {\n\t\ttry {\n\t\t\tint len = 256;\n\t\t\tchar[] buffer = new char[len];\n\t\t\tchar[] output = new char[len];\n\t\t\t\n\t\t\tlen = 0;\n\t\t\tint n;\n\t\t\twhile ((n = input.read(buffer)) >= 0) {\n\t\t\t\tif (len + n > output.length) { // grow capacity\n\t\t\t\t\tchar[] tmp = new char[Math.max(output.length << 1, len + n)];\n\t\t\t\t\tSystem.arraycopy(output, 0, tmp, 0, len);\n\t\t\t\t\tSystem.arraycopy(buffer, 0, tmp, len, n);\n\t\t\t\t\tbuffer = output; // use larger buffer for future larger bulk reads\n\t\t\t\t\toutput = tmp;\n\t\t\t\t} else {\n\t\t\t\t\tSystem.arraycopy(buffer, 0, output, len, n);\n\t\t\t\t}\n\t\t\t\tlen += n;\n\t\t\t}\n\n\t\t\treturn new String(output, 0, output.length);\n\t\t} finally {\n\t\t\tif (input != null) input.close();\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2542e236e1661f6d0e8e4aa8f09dd1495e58e35a","date":1133587576,"type":4,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#toString(Reader).mjava","sourceNew":null,"sourceOld":"\t/**\r\n\t * Reads until end-of-stream and returns all read chars, finally closes the stream.\r\n\t * \r\n\t * @param input the input stream\r\n\t * @throws IOException if an I/O error occurs while reading the stream\r\n\t */\r\n\tprivate static String toString(Reader input) throws IOException {\r\n\t\ttry {\r\n\t\t\tint len = 256;\r\n\t\t\tchar[] buffer = new char[len];\r\n\t\t\tchar[] output = new char[len];\r\n\t\t\t\r\n\t\t\tlen = 0;\r\n\t\t\tint n;\r\n\t\t\twhile ((n = input.read(buffer)) >= 0) {\r\n\t\t\t\tif (len + n > output.length) { // grow capacity\r\n\t\t\t\t\tchar[] tmp = new char[Math.max(output.length << 1, len + n)];\r\n\t\t\t\t\tSystem.arraycopy(output, 0, tmp, 0, len);\r\n\t\t\t\t\tSystem.arraycopy(buffer, 0, tmp, len, n);\r\n\t\t\t\t\tbuffer = output; // use larger buffer for future larger bulk reads\r\n\t\t\t\t\toutput = tmp;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tSystem.arraycopy(buffer, 0, output, len, n);\r\n\t\t\t\t}\r\n\t\t\t\tlen += n;\r\n\t\t\t}\r\n\r\n\t\t\treturn new String(output, 0, output.length);\r\n\t\t} finally {\r\n\t\t\tif (input != null) input.close();\r\n\t\t}\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29bb5af2486a9a013c0a0daffdb51dce2a3adb8e","date":1133587670,"type":0,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#toString(Reader).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Reads until end-of-stream and returns all read chars, finally closes the stream.\n\t * \n\t * @param input the input stream\n\t * @throws IOException if an I/O error occurs while reading the stream\n\t */\n\tprivate static String toString(Reader input) throws IOException {\n\t\ttry {\n\t\t\tint len = 256;\n\t\t\tchar[] buffer = new char[len];\n\t\t\tchar[] output = new char[len];\n\t\t\t\n\t\t\tlen = 0;\n\t\t\tint n;\n\t\t\twhile ((n = input.read(buffer)) >= 0) {\n\t\t\t\tif (len + n > output.length) { // grow capacity\n\t\t\t\t\tchar[] tmp = new char[Math.max(output.length << 1, len + n)];\n\t\t\t\t\tSystem.arraycopy(output, 0, tmp, 0, len);\n\t\t\t\t\tSystem.arraycopy(buffer, 0, tmp, len, n);\n\t\t\t\t\tbuffer = output; // use larger buffer for future larger bulk reads\n\t\t\t\t\toutput = tmp;\n\t\t\t\t} else {\n\t\t\t\t\tSystem.arraycopy(buffer, 0, output, len, n);\n\t\t\t\t}\n\t\t\t\tlen += n;\n\t\t\t}\n\n\t\t\treturn new String(output, 0, output.length);\n\t\t} finally {\n\t\t\tif (input != null) input.close();\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#toString(Reader).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#toString(Reader).mjava","sourceNew":"  /**\n   * Reads until end-of-stream and returns all read chars, finally closes the stream.\n   * \n   * @param input the input stream\n   * @throws IOException if an I/O error occurs while reading the stream\n   */\n  private static String toString(Reader input) throws IOException {\n    try {\n      int len = 256;\n      char[] buffer = new char[len];\n      char[] output = new char[len];\n      \n      len = 0;\n      int n;\n      while ((n = input.read(buffer)) >= 0) {\n        if (len + n > output.length) { // grow capacity\n          char[] tmp = new char[Math.max(output.length << 1, len + n)];\n          System.arraycopy(output, 0, tmp, 0, len);\n          System.arraycopy(buffer, 0, tmp, len, n);\n          buffer = output; // use larger buffer for future larger bulk reads\n          output = tmp;\n        } else {\n          System.arraycopy(buffer, 0, output, len, n);\n        }\n        len += n;\n      }\n\n      return new String(output, 0, output.length);\n    } finally {\n      if (input != null) input.close();\n    }\n  }\n\n","sourceOld":"\t/**\n\t * Reads until end-of-stream and returns all read chars, finally closes the stream.\n\t * \n\t * @param input the input stream\n\t * @throws IOException if an I/O error occurs while reading the stream\n\t */\n\tprivate static String toString(Reader input) throws IOException {\n\t\ttry {\n\t\t\tint len = 256;\n\t\t\tchar[] buffer = new char[len];\n\t\t\tchar[] output = new char[len];\n\t\t\t\n\t\t\tlen = 0;\n\t\t\tint n;\n\t\t\twhile ((n = input.read(buffer)) >= 0) {\n\t\t\t\tif (len + n > output.length) { // grow capacity\n\t\t\t\t\tchar[] tmp = new char[Math.max(output.length << 1, len + n)];\n\t\t\t\t\tSystem.arraycopy(output, 0, tmp, 0, len);\n\t\t\t\t\tSystem.arraycopy(buffer, 0, tmp, len, n);\n\t\t\t\t\tbuffer = output; // use larger buffer for future larger bulk reads\n\t\t\t\t\toutput = tmp;\n\t\t\t\t} else {\n\t\t\t\t\tSystem.arraycopy(buffer, 0, output, len, n);\n\t\t\t\t}\n\t\t\t\tlen += n;\n\t\t\t}\n\n\t\t\treturn new String(output, 0, output.length);\n\t\t} finally {\n\t\t\tif (input != null) input.close();\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"467682197b87eae34e32351634b863766b16f150","date":1159427499,"type":3,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#toString(Reader).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#toString(Reader).mjava","sourceNew":"  /**\n   * Reads until end-of-stream and returns all read chars, finally closes the stream.\n   * \n   * @param input the input stream\n   * @throws IOException if an I/O error occurs while reading the stream\n   */\n  private static String toString(Reader input) throws IOException {\n    try {\n      int len = 256;\n      char[] buffer = new char[len];\n      char[] output = new char[len];\n      \n      len = 0;\n      int n;\n      while ((n = input.read(buffer)) >= 0) {\n        if (len + n > output.length) { // grow capacity\n          char[] tmp = new char[Math.max(output.length << 1, len + n)];\n          System.arraycopy(output, 0, tmp, 0, len);\n          System.arraycopy(buffer, 0, tmp, len, n);\n          buffer = output; // use larger buffer for future larger bulk reads\n          output = tmp;\n        } else {\n          System.arraycopy(buffer, 0, output, len, n);\n        }\n        len += n;\n      }\n\n      return new String(output, 0, len);\n    } finally {\n      if (input != null) input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads until end-of-stream and returns all read chars, finally closes the stream.\n   * \n   * @param input the input stream\n   * @throws IOException if an I/O error occurs while reading the stream\n   */\n  private static String toString(Reader input) throws IOException {\n    try {\n      int len = 256;\n      char[] buffer = new char[len];\n      char[] output = new char[len];\n      \n      len = 0;\n      int n;\n      while ((n = input.read(buffer)) >= 0) {\n        if (len + n > output.length) { // grow capacity\n          char[] tmp = new char[Math.max(output.length << 1, len + n)];\n          System.arraycopy(output, 0, tmp, 0, len);\n          System.arraycopy(buffer, 0, tmp, len, n);\n          buffer = output; // use larger buffer for future larger bulk reads\n          output = tmp;\n        } else {\n          System.arraycopy(buffer, 0, output, len, n);\n        }\n        len += n;\n      }\n\n      return new String(output, 0, output.length);\n    } finally {\n      if (input != null) input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d8c222875ac4ef7e08f3e25d40508b821d711ff","date":1257374221,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#toString(Reader).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#toString(Reader).mjava","sourceNew":"  /**\n   * Reads until end-of-stream and returns all read chars, finally closes the stream.\n   * \n   * @param input the input stream\n   * @throws IOException if an I/O error occurs while reading the stream\n   */\n  private static String toString(Reader input) throws IOException {\n    try {\n      int len = 256;\n      char[] buffer = new char[len];\n      char[] output = new char[len];\n      \n      len = 0;\n      int n;\n      while ((n = input.read(buffer)) >= 0) {\n        if (len + n > output.length) { // grow capacity\n          char[] tmp = new char[Math.max(output.length << 1, len + n)];\n          System.arraycopy(output, 0, tmp, 0, len);\n          System.arraycopy(buffer, 0, tmp, len, n);\n          buffer = output; // use larger buffer for future larger bulk reads\n          output = tmp;\n        } else {\n          System.arraycopy(buffer, 0, output, len, n);\n        }\n        len += n;\n      }\n\n      return new String(output, 0, len);\n    } finally {\n      if (input != null) input.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads until end-of-stream and returns all read chars, finally closes the stream.\n   * \n   * @param input the input stream\n   * @throws IOException if an I/O error occurs while reading the stream\n   */\n  private static String toString(Reader input) throws IOException {\n    try {\n      int len = 256;\n      char[] buffer = new char[len];\n      char[] output = new char[len];\n      \n      len = 0;\n      int n;\n      while ((n = input.read(buffer)) >= 0) {\n        if (len + n > output.length) { // grow capacity\n          char[] tmp = new char[Math.max(output.length << 1, len + n)];\n          System.arraycopy(output, 0, tmp, 0, len);\n          System.arraycopy(buffer, 0, tmp, len, n);\n          buffer = output; // use larger buffer for future larger bulk reads\n          output = tmp;\n        } else {\n          System.arraycopy(buffer, 0, output, len, n);\n        }\n        len += n;\n      }\n\n      return new String(output, 0, len);\n    } finally {\n      if (input != null) input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2542e236e1661f6d0e8e4aa8f09dd1495e58e35a":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"0d8c222875ac4ef7e08f3e25d40508b821d711ff":["467682197b87eae34e32351634b863766b16f150"],"29bb5af2486a9a013c0a0daffdb51dce2a3adb8e":["2542e236e1661f6d0e8e4aa8f09dd1495e58e35a"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"467682197b87eae34e32351634b863766b16f150":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["29bb5af2486a9a013c0a0daffdb51dce2a3adb8e"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d8c222875ac4ef7e08f3e25d40508b821d711ff"]},"commit2Childs":{"2542e236e1661f6d0e8e4aa8f09dd1495e58e35a":["29bb5af2486a9a013c0a0daffdb51dce2a3adb8e"],"0d8c222875ac4ef7e08f3e25d40508b821d711ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29bb5af2486a9a013c0a0daffdb51dce2a3adb8e":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["2542e236e1661f6d0e8e4aa8f09dd1495e58e35a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"467682197b87eae34e32351634b863766b16f150":["0d8c222875ac4ef7e08f3e25d40508b821d711ff"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["467682197b87eae34e32351634b863766b16f150"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}