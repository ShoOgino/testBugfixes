{"path":"lucene/core/src/test/org/apache/lucene/store/TestNRTCachingDirectory#getDirectory(Path).mjava","commits":[{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestNRTCachingDirectory#getDirectory(Path).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestNRTCachingDirectory#getDirectory(File).mjava","sourceNew":"  // TODO: RAMDir used here, because its still too slow to use e.g. SimpleFS\n  // for the threads tests... maybe because of the synchronization in listAll?\n  // would be good to investigate further...\n  @Override\n  protected Directory getDirectory(Path path) throws IOException {\n    return new NRTCachingDirectory(new RAMDirectory(),\n                                   .1 + 2.0*random().nextDouble(),\n                                   .1 + 5.0*random().nextDouble());\n  }\n\n","sourceOld":"  // TODO: RAMDir used here, because its still too slow to use e.g. SimpleFS\n  // for the threads tests... maybe because of the synchronization in listAll?\n  // would be good to investigate further...\n  @Override\n  protected Directory getDirectory(File path) throws IOException {\n    return new NRTCachingDirectory(new RAMDirectory(),\n                                   .1 + 2.0*random().nextDouble(),\n                                   .1 + 5.0*random().nextDouble());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestNRTCachingDirectory#getDirectory(Path).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestNRTCachingDirectory#getDirectory(Path).mjava","sourceNew":"  // TODO: RAMDir used here, because it's still too slow to use e.g. SimpleFS\n  // for the threads tests... maybe because of the synchronization in listAll?\n  // would be good to investigate further...\n  @Override\n  protected Directory getDirectory(Path path) throws IOException {\n    return new NRTCachingDirectory(new RAMDirectory(),\n                                   .1 + 2.0*random().nextDouble(),\n                                   .1 + 5.0*random().nextDouble());\n  }\n\n","sourceOld":"  // TODO: RAMDir used here, because its still too slow to use e.g. SimpleFS\n  // for the threads tests... maybe because of the synchronization in listAll?\n  // would be good to investigate further...\n  @Override\n  protected Directory getDirectory(Path path) throws IOException {\n    return new NRTCachingDirectory(new RAMDirectory(),\n                                   .1 + 2.0*random().nextDouble(),\n                                   .1 + 5.0*random().nextDouble());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestNRTCachingDirectory#getDirectory(Path).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestNRTCachingDirectory#getDirectory(Path).mjava","sourceNew":"  // TODO: RAMDir used here, because it's still too slow to use e.g. SimpleFS\n  // for the threads tests... maybe because of the synchronization in listAll?\n  // would be good to investigate further...\n  @Override\n  protected Directory getDirectory(Path path) throws IOException {\n    return new NRTCachingDirectory(new ByteBuffersDirectory(),\n                                   .1 + 2.0*random().nextDouble(),\n                                   .1 + 5.0*random().nextDouble());\n  }\n\n","sourceOld":"  // TODO: RAMDir used here, because it's still too slow to use e.g. SimpleFS\n  // for the threads tests... maybe because of the synchronization in listAll?\n  // would be good to investigate further...\n  @Override\n  protected Directory getDirectory(Path path) throws IOException {\n    return new NRTCachingDirectory(new RAMDirectory(),\n                                   .1 + 2.0*random().nextDouble(),\n                                   .1 + 5.0*random().nextDouble());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"f4abec28b874149a7223e32cc7a01704c27790de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["d77dafd89756a5161d244985903e3487ca109182"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4abec28b874149a7223e32cc7a01704c27790de"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4abec28b874149a7223e32cc7a01704c27790de":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}