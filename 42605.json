{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session,double[]).mjava","commits":[{"id":"16a22f8085bb46850c91784e94f7714345011404","date":1533741843,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session,double[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","sourceNew":"  public List<Violation> test(Policy.Session session, double[] deviations) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCounts = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCounts.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (tag.varType.meta.isNodeSpecificVal()) computedValueEvaluator.node = counts.getKey();\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            ReplicaCount replicas = counts.getValue();\n            if (!sealedClause.replica.isPass(replicas)) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.varType.meta.isNodeSpecificVal() ? computedValueEvaluator.node : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(replicas),\n                  tag.varType.meta.isNodeSpecificVal() ? null : counts.getKey());\n              tag.varType.addViolatingReplicas(ctx.reset(counts.getKey(), replicas, violation));\n            } else {\n              if (deviations != null && sealedClause.replica.op == RANGE_EQUAL) {\n                Number actualCount = replicas.getVal(type);\n                Double realDelta = ((RangeVal) sealedClause.replica.val).realDelta(actualCount.doubleValue());\n                realDelta = this.isReplicaZero() ? -1 * realDelta : realDelta;\n                deviations[0] += Math.abs(realDelta);\n              }\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        computedValueEvaluator.node = r.node;\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          sealedClause.getGlobalTag().varType.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name),\n                  sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(Policy.Session session) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCounts = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCounts.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (tag.varType.meta.isNodeSpecificVal()) computedValueEvaluator.node = counts.getKey();\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            ReplicaCount replicas = counts.getValue();\n            if (!sealedClause.replica.isPass(replicas)) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.varType.meta.isNodeSpecificVal() ? computedValueEvaluator.node : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(replicas),\n                  tag.varType.meta.isNodeSpecificVal() ? null : counts.getKey());\n              tag.varType.addViolatingReplicas(ctx.reset(counts.getKey(), replicas, violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        computedValueEvaluator.node = r.node;\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          sealedClause.getGlobalTag().varType.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name),\n                  sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee5183ac042828ef74f90f0874eaba7daeb409bd","date":1536546264,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session,double[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session,double[]).mjava","sourceNew":"  public List<Violation> test(Policy.Session session, double[] deviations) {\n    if (isPerCollectiontag()) {\n      return tag.varType == Type.NODE ||\n          (tag.varType.meta.isNodeSpecificVal() && replica.computedType == null) ?\n          testPerNode(session, deviations) :\n          testGroupNodes(session, deviations);\n    } else {\n      ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n      Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, computedValueEvaluator);\n      for (Row r : session.matrix) {\n        computedValueEvaluator.node = r.node;\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          ctx.resetAndAddViolation(r.node, null, new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name),\n              sealedClause.globalTag.delta(r.getVal(globalTag.name)), r.node));\n          addViolatingReplicas(sealedClause.globalTag, computedValueEvaluator, ctx, Type.CORES.tagName, r.node, ctx.currentViolation, session);\n\n        }\n      }\n      return ctx.allViolations;\n\n    }\n  }\n\n","sourceOld":"  public List<Violation> test(Policy.Session session, double[] deviations) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCounts = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCounts.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (tag.varType.meta.isNodeSpecificVal()) computedValueEvaluator.node = counts.getKey();\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            ReplicaCount replicas = counts.getValue();\n            if (!sealedClause.replica.isPass(replicas)) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.varType.meta.isNodeSpecificVal() ? computedValueEvaluator.node : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(replicas),\n                  tag.varType.meta.isNodeSpecificVal() ? null : counts.getKey());\n              tag.varType.addViolatingReplicas(ctx.reset(counts.getKey(), replicas, violation));\n            } else {\n              if (deviations != null && sealedClause.replica.op == RANGE_EQUAL) {\n                Number actualCount = replicas.getVal(type);\n                Double realDelta = ((RangeVal) sealedClause.replica.val).realDelta(actualCount.doubleValue());\n                realDelta = this.isReplicaZero() ? -1 * realDelta : realDelta;\n                deviations[0] += Math.abs(realDelta);\n              }\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        computedValueEvaluator.node = r.node;\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          sealedClause.getGlobalTag().varType.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name),\n                  sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddd9a76400512cda8f22bbc69e3d8b85672a91a","date":1559288755,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session,double[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session,double[]).mjava","sourceNew":"  public List<Violation> test(Policy.Session session, double[] deviations) {\n    if (isPerCollectiontag()) {\n      if(nodeSetPresent) {\n\n      }\n\n      return tag.varType == Type.NODE ||\n          (tag.varType.meta.isNodeSpecificVal() && replica.computedType == null) ?\n          testPerNode(session, deviations) :\n          testGroupNodes(session, deviations);\n    } else {\n      ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n      Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, computedValueEvaluator);\n      for (Row r : session.matrix) {\n        computedValueEvaluator.node = r.node;\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          ctx.resetAndAddViolation(r.node, null, new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name),\n              sealedClause.globalTag.delta(r.getVal(globalTag.name)), r.node));\n          addViolatingReplicas(sealedClause.globalTag, computedValueEvaluator, ctx, Type.CORES.tagName, r.node, ctx.currentViolation, session);\n\n        }\n      }\n      return ctx.allViolations;\n\n    }\n  }\n\n","sourceOld":"  public List<Violation> test(Policy.Session session, double[] deviations) {\n    if (isPerCollectiontag()) {\n      return tag.varType == Type.NODE ||\n          (tag.varType.meta.isNodeSpecificVal() && replica.computedType == null) ?\n          testPerNode(session, deviations) :\n          testGroupNodes(session, deviations);\n    } else {\n      ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n      Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, computedValueEvaluator);\n      for (Row r : session.matrix) {\n        computedValueEvaluator.node = r.node;\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          ctx.resetAndAddViolation(r.node, null, new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name),\n              sealedClause.globalTag.delta(r.getVal(globalTag.name)), r.node));\n          addViolatingReplicas(sealedClause.globalTag, computedValueEvaluator, ctx, Type.CORES.tagName, r.node, ctx.currentViolation, session);\n\n        }\n      }\n      return ctx.allViolations;\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session,double[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session,double[]).mjava","sourceNew":"  public List<Violation> test(Policy.Session session, double[] deviations) {\n    if (isPerCollectiontag()) {\n      if(nodeSetPresent) {\n\n      }\n\n      return tag.varType == Type.NODE ||\n          (tag.varType.meta.isNodeSpecificVal() && replica.computedType == null) ?\n          testPerNode(session, deviations) :\n          testGroupNodes(session, deviations);\n    } else {\n      ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n      Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, computedValueEvaluator);\n      for (Row r : session.matrix) {\n        computedValueEvaluator.node = r.node;\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          ctx.resetAndAddViolation(r.node, null, new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name),\n              sealedClause.globalTag.delta(r.getVal(globalTag.name)), r.node));\n          addViolatingReplicas(sealedClause.globalTag, computedValueEvaluator, ctx, Type.CORES.tagName, r.node, ctx.currentViolation, session);\n\n        }\n      }\n      return ctx.allViolations;\n\n    }\n  }\n\n","sourceOld":"  public List<Violation> test(Policy.Session session, double[] deviations) {\n    if (isPerCollectiontag()) {\n      return tag.varType == Type.NODE ||\n          (tag.varType.meta.isNodeSpecificVal() && replica.computedType == null) ?\n          testPerNode(session, deviations) :\n          testGroupNodes(session, deviations);\n    } else {\n      ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n      Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, computedValueEvaluator);\n      for (Row r : session.matrix) {\n        computedValueEvaluator.node = r.node;\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          ctx.resetAndAddViolation(r.node, null, new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name),\n              sealedClause.globalTag.delta(r.getVal(globalTag.name)), r.node));\n          addViolatingReplicas(sealedClause.globalTag, computedValueEvaluator, ctx, Type.CORES.tagName, r.node, ctx.currentViolation, session);\n\n        }\n      }\n      return ctx.allViolations;\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3501ebc2bbcfa61e7fc22e7d18f68d83b367093","date":1559465668,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session,double[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session,double[]).mjava","sourceNew":"  public List<Violation> test(Policy.Session session, double[] deviations) {\n    if (isPerCollectiontag()) {\n      return tag.varType == Type.NODE ||\n          (tag.varType.meta.isNodeSpecificVal() && replica.computedType == null) ?\n          testPerNode(session, deviations) :\n          testGroupNodes(session, deviations);\n    } else {\n      ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n      Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, computedValueEvaluator);\n      for (Row r : session.matrix) {\n        computedValueEvaluator.node = r.node;\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          ctx.resetAndAddViolation(r.node, null, new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name),\n              sealedClause.globalTag.delta(r.getVal(globalTag.name)), r.node));\n          addViolatingReplicas(sealedClause.globalTag, computedValueEvaluator, ctx, Type.CORES.tagName, r.node, ctx.currentViolation, session);\n\n        }\n      }\n      return ctx.allViolations;\n\n    }\n  }\n\n","sourceOld":"  public List<Violation> test(Policy.Session session, double[] deviations) {\n    if (isPerCollectiontag()) {\n      if(nodeSetPresent) {\n\n      }\n\n      return tag.varType == Type.NODE ||\n          (tag.varType.meta.isNodeSpecificVal() && replica.computedType == null) ?\n          testPerNode(session, deviations) :\n          testGroupNodes(session, deviations);\n    } else {\n      ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n      Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, computedValueEvaluator);\n      for (Row r : session.matrix) {\n        computedValueEvaluator.node = r.node;\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          ctx.resetAndAddViolation(r.node, null, new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name),\n              sealedClause.globalTag.delta(r.getVal(globalTag.name)), r.node));\n          addViolatingReplicas(sealedClause.globalTag, computedValueEvaluator, ctx, Type.CORES.tagName, r.node, ctx.currentViolation, session);\n\n        }\n      }\n      return ctx.allViolations;\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa","date":1559549598,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session,double[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session,double[]).mjava","sourceNew":"  public List<Violation> test(Policy.Session session, double[] deviations) {\n    if (isPerCollectiontag()) {\n      if(nodeSetPresent) {\n        if(put == Put.ON_EACH){\n          return testPerNode(session, deviations) ;\n        } else {\n          return testGroupNodes(session, deviations);\n        }\n      }\n\n      return tag.varType == Type.NODE ||\n          (tag.varType.meta.isNodeSpecificVal() && replica.computedType == null) ?\n          testPerNode(session, deviations) :\n          testGroupNodes(session, deviations);\n    } else {\n      ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n      Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, computedValueEvaluator);\n      for (Row r : session.matrix) {\n        computedValueEvaluator.node = r.node;\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          ctx.resetAndAddViolation(r.node, null, new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name),\n              sealedClause.globalTag.delta(r.getVal(globalTag.name)), r.node));\n          addViolatingReplicasForGroup(sealedClause.globalTag, computedValueEvaluator, ctx, Type.CORES.tagName, r.node, ctx.currentViolation, session.matrix);\n\n        }\n      }\n      return ctx.allViolations;\n\n    }\n  }\n\n","sourceOld":"  public List<Violation> test(Policy.Session session, double[] deviations) {\n    if (isPerCollectiontag()) {\n      return tag.varType == Type.NODE ||\n          (tag.varType.meta.isNodeSpecificVal() && replica.computedType == null) ?\n          testPerNode(session, deviations) :\n          testGroupNodes(session, deviations);\n    } else {\n      ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n      Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, computedValueEvaluator);\n      for (Row r : session.matrix) {\n        computedValueEvaluator.node = r.node;\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          ctx.resetAndAddViolation(r.node, null, new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name),\n              sealedClause.globalTag.delta(r.getVal(globalTag.name)), r.node));\n          addViolatingReplicas(sealedClause.globalTag, computedValueEvaluator, ctx, Type.CORES.tagName, r.node, ctx.currentViolation, session);\n\n        }\n      }\n      return ctx.allViolations;\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"067ba8c807b0f23eae8bf41bc27046a87b548134","date":1587570399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session,double[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session,double[]).mjava","sourceNew":"  public List<Violation> test(Policy.Session session, double[] deviations) {\n    if (isPerCollectiontag()) {\n      if(nodeSetPresent) {\n        if(put == Put.ON_EACH){\n          return testPerNode(session, deviations) ;\n        } else {\n          return testGroupNodes(session, deviations);\n        }\n      }\n\n      return tag.varType == Type.NODE ||\n          (tag.varType.meta.isNodeSpecificVal() && replica.computedType == null) ?\n          testPerNode(session, deviations) :\n          testGroupNodes(session, deviations);\n    } else {\n      ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n      Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, computedValueEvaluator);\n      for (Row r : session.matrix) {\n        computedValueEvaluator.node = r.node;\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        // check only live nodes\n        if (r.isLive() && !sealedClause.getGlobalTag().isPass(r)) {\n          ctx.resetAndAddViolation(r.node, null, new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name),\n              sealedClause.globalTag.delta(r.getVal(globalTag.name)), r.node));\n          addViolatingReplicasForGroup(sealedClause.globalTag, computedValueEvaluator, ctx, Type.CORES.tagName, r.node, ctx.currentViolation, session.matrix);\n\n        }\n      }\n      return ctx.allViolations;\n\n    }\n  }\n\n","sourceOld":"  public List<Violation> test(Policy.Session session, double[] deviations) {\n    if (isPerCollectiontag()) {\n      if(nodeSetPresent) {\n        if(put == Put.ON_EACH){\n          return testPerNode(session, deviations) ;\n        } else {\n          return testGroupNodes(session, deviations);\n        }\n      }\n\n      return tag.varType == Type.NODE ||\n          (tag.varType.meta.isNodeSpecificVal() && replica.computedType == null) ?\n          testPerNode(session, deviations) :\n          testGroupNodes(session, deviations);\n    } else {\n      ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n      Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, computedValueEvaluator);\n      for (Row r : session.matrix) {\n        computedValueEvaluator.node = r.node;\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          ctx.resetAndAddViolation(r.node, null, new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name),\n              sealedClause.globalTag.delta(r.getVal(globalTag.name)), r.node));\n          addViolatingReplicasForGroup(sealedClause.globalTag, computedValueEvaluator, ctx, Type.CORES.tagName, r.node, ctx.currentViolation, session.matrix);\n\n        }\n      }\n      return ctx.allViolations;\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session,double[]).mjava","sourceNew":null,"sourceOld":"  public List<Violation> test(Policy.Session session, double[] deviations) {\n    if (isPerCollectiontag()) {\n      if(nodeSetPresent) {\n        if(put == Put.ON_EACH){\n          return testPerNode(session, deviations) ;\n        } else {\n          return testGroupNodes(session, deviations);\n        }\n      }\n\n      return tag.varType == Type.NODE ||\n          (tag.varType.meta.isNodeSpecificVal() && replica.computedType == null) ?\n          testPerNode(session, deviations) :\n          testGroupNodes(session, deviations);\n    } else {\n      ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n      Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, computedValueEvaluator);\n      for (Row r : session.matrix) {\n        computedValueEvaluator.node = r.node;\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        // check only live nodes\n        if (r.isLive() && !sealedClause.getGlobalTag().isPass(r)) {\n          ctx.resetAndAddViolation(r.node, null, new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name),\n              sealedClause.globalTag.delta(r.getVal(globalTag.name)), r.node));\n          addViolatingReplicasForGroup(sealedClause.globalTag, computedValueEvaluator, ctx, Type.CORES.tagName, r.node, ctx.currentViolation, session.matrix);\n\n        }\n      }\n      return ctx.allViolations;\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["067ba8c807b0f23eae8bf41bc27046a87b548134"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["ee5183ac042828ef74f90f0874eaba7daeb409bd","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["16a22f8085bb46850c91784e94f7714345011404"],"067ba8c807b0f23eae8bf41bc27046a87b548134":["081849c2756a6c9b9883ab9e332f3f3fcf2f05fa"],"d3501ebc2bbcfa61e7fc22e7d18f68d83b367093":["9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa":["d3501ebc2bbcfa61e7fc22e7d18f68d83b367093"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"16a22f8085bb46850c91784e94f7714345011404":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16a22f8085bb46850c91784e94f7714345011404"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","d3501ebc2bbcfa61e7fc22e7d18f68d83b367093"],"067ba8c807b0f23eae8bf41bc27046a87b548134":["3f504512a03d978990cbff30db0522b354e846db"],"d3501ebc2bbcfa61e7fc22e7d18f68d83b367093":["081849c2756a6c9b9883ab9e332f3f3fcf2f05fa"],"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa":["067ba8c807b0f23eae8bf41bc27046a87b548134"],"16a22f8085bb46850c91784e94f7714345011404":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}