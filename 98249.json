{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,Cell[],boolean,Map[String,Map[String,List[ReplicaInfo]]],boolean,Policy.Session,Map,Map).mjava","commits":[{"id":"58e890cd5653ae8550bc6088d739f4eaaf950aff","date":1547036285,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,Cell[],boolean,Map[String,Map[String,List[ReplicaInfo]]],boolean,Policy.Session,Map,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,Cell[],boolean,Map[String,Map[String,List[ReplicaInfo]]],boolean,Policy.Session).mjava","sourceNew":"  public Row(String node, Cell[] cells, boolean anyValueMissing, Map<String,\n      Map<String, List<ReplicaInfo>>> collectionVsShardVsReplicas, boolean isLive, Policy.Session session, Map perRowCache, Map globalCache) {\n    this.session = session;\n    this.node = node;\n    this.isLive = isLive;\n    this.cells = new Cell[cells.length];\n    for (int i = 0; i < this.cells.length; i++) {\n      this.cells[i] = cells[i].copy();\n      this.cells[i].row = this;\n    }\n    this.anyValueMissing = anyValueMissing;\n    this.collectionVsShardVsReplicas = collectionVsShardVsReplicas;\n    this.perCollCache = perRowCache;\n    this.globalCache = globalCache;\n  }\n\n","sourceOld":"  public Row(String node, Cell[] cells, boolean anyValueMissing, Map<String,\n      Map<String, List<ReplicaInfo>>> collectionVsShardVsReplicas, boolean isLive, Policy.Session session) {\n    this.session = session;\n    this.node = node;\n    this.isLive = isLive;\n    this.cells = new Cell[cells.length];\n    for (int i = 0; i < this.cells.length; i++) {\n      this.cells[i] = cells[i].copy();\n      this.cells[i].row = this;\n    }\n    this.anyValueMissing = anyValueMissing;\n    this.collectionVsShardVsReplicas = collectionVsShardVsReplicas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527adea7ce767368d7317339023e18e39702132e","date":1592163810,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,Cell[],boolean,Map[String,Map[String,List[ReplicaInfo]]],boolean,Policy.Session,Map,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,Cell[],boolean,Map[String,Map[String,List[ReplicaInfo]]],boolean,Policy.Session,Map,Map).mjava","sourceNew":"  public Row(String node, Cell[] cells, boolean anyValueMissing,\n             @SuppressWarnings({\"rawtypes\"}) Map<String,\n                     Map<String, List<ReplicaInfo>>> collectionVsShardVsReplicas, boolean isLive, Policy.Session session,\n             @SuppressWarnings({\"rawtypes\"}) Map perRowCache,\n             @SuppressWarnings({\"rawtypes\"})Map globalCache) {\n    this.session = session;\n    this.node = node;\n    this.isLive = isLive;\n    this.cells = new Cell[cells.length];\n    for (int i = 0; i < this.cells.length; i++) {\n      this.cells[i] = cells[i].copy();\n      this.cells[i].row = this;\n    }\n    this.anyValueMissing = anyValueMissing;\n    this.collectionVsShardVsReplicas = collectionVsShardVsReplicas;\n    this.perCollCache = perRowCache;\n    this.globalCache = globalCache;\n  }\n\n","sourceOld":"  public Row(String node, Cell[] cells, boolean anyValueMissing, Map<String,\n      Map<String, List<ReplicaInfo>>> collectionVsShardVsReplicas, boolean isLive, Policy.Session session, Map perRowCache, Map globalCache) {\n    this.session = session;\n    this.node = node;\n    this.isLive = isLive;\n    this.cells = new Cell[cells.length];\n    for (int i = 0; i < this.cells.length; i++) {\n      this.cells[i] = cells[i].copy();\n      this.cells[i].row = this;\n    }\n    this.anyValueMissing = anyValueMissing;\n    this.collectionVsShardVsReplicas = collectionVsShardVsReplicas;\n    this.perCollCache = perRowCache;\n    this.globalCache = globalCache;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,Cell[],boolean,Map[String,Map[String,List[Replica]]],boolean,Policy.Session,Map,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,Cell[],boolean,Map[String,Map[String,List[ReplicaInfo]]],boolean,Policy.Session,Map,Map).mjava","sourceNew":"  public Row(String node, Cell[] cells, boolean anyValueMissing,\n             @SuppressWarnings({\"rawtypes\"}) Map<String,\n                     Map<String, List<Replica>>> collectionVsShardVsReplicas, boolean isLive, Policy.Session session,\n             @SuppressWarnings({\"rawtypes\"}) Map perRowCache,\n             @SuppressWarnings({\"rawtypes\"})Map globalCache) {\n    this.session = session;\n    this.node = node;\n    this.isLive = isLive;\n    this.cells = new Cell[cells.length];\n    for (int i = 0; i < this.cells.length; i++) {\n      this.cells[i] = cells[i].copy();\n      this.cells[i].row = this;\n    }\n    this.anyValueMissing = anyValueMissing;\n    this.collectionVsShardVsReplicas = collectionVsShardVsReplicas;\n    this.perCollCache = perRowCache;\n    this.globalCache = globalCache;\n  }\n\n","sourceOld":"  public Row(String node, Cell[] cells, boolean anyValueMissing,\n             @SuppressWarnings({\"rawtypes\"}) Map<String,\n                     Map<String, List<ReplicaInfo>>> collectionVsShardVsReplicas, boolean isLive, Policy.Session session,\n             @SuppressWarnings({\"rawtypes\"}) Map perRowCache,\n             @SuppressWarnings({\"rawtypes\"})Map globalCache) {\n    this.session = session;\n    this.node = node;\n    this.isLive = isLive;\n    this.cells = new Cell[cells.length];\n    for (int i = 0; i < this.cells.length; i++) {\n      this.cells[i] = cells[i].copy();\n      this.cells[i].row = this;\n    }\n    this.anyValueMissing = anyValueMissing;\n    this.collectionVsShardVsReplicas = collectionVsShardVsReplicas;\n    this.perCollCache = perRowCache;\n    this.globalCache = globalCache;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["527adea7ce767368d7317339023e18e39702132e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"527adea7ce767368d7317339023e18e39702132e":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"]},"commit2Childs":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["527adea7ce767368d7317339023e18e39702132e"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"527adea7ce767368d7317339023e18e39702132e":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}