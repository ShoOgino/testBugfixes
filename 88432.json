{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testConstructorDefatuls(AnalyzingInfixSuggester,Input[],Analyzer,boolean,boolean).mjava","commits":[{"id":"7055cd9d1615c97eb7ddc5b4964c4e66e71ce273","date":1420568044,"type":0,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testConstructorDefatuls(AnalyzingInfixSuggester,Input[],Analyzer,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void testConstructorDefatuls(AnalyzingInfixSuggester suggester, Input[] keys, Analyzer a, \n      boolean allTermsRequired, boolean highlight) throws IOException {\n    AnalyzingInfixSuggester suggester2 = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false, allTermsRequired, highlight);\n    suggester2.build(new InputArrayIterator(keys));\n    \n    CharSequence key = TestUtil.stringToCharSequence(\"penny ea\", random());\n    \n    List<LookupResult> results1 = suggester.lookup(key, 10, allTermsRequired, highlight);\n    List<LookupResult> results2 = suggester2.lookup(key, false, 10);\n    assertEquals(results1.size(), results2.size());\n    assertEquals(results1.get(0).key, results2.get(0).key);\n    assertEquals(results1.get(0).highlightKey, results2.get(0).highlightKey);\n    \n    suggester2.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca7fbb27b5ca0c241732978139f9680144cb2769","date":1420654222,"type":5,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testConstructorDefaults(AnalyzingInfixSuggester,Input[],Analyzer,boolean,boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggesterTest#testConstructorDefatuls(AnalyzingInfixSuggester,Input[],Analyzer,boolean,boolean).mjava","sourceNew":"  private void testConstructorDefaults(AnalyzingInfixSuggester suggester, Input[] keys, Analyzer a, \n      boolean allTermsRequired, boolean highlight) throws IOException {\n    AnalyzingInfixSuggester suggester2 = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false, allTermsRequired, highlight);\n    suggester2.build(new InputArrayIterator(keys));\n    \n    CharSequence key = TestUtil.stringToCharSequence(\"penny ea\", random());\n    \n    List<LookupResult> results1 = suggester.lookup(key, 10, allTermsRequired, highlight);\n    List<LookupResult> results2 = suggester2.lookup(key, false, 10);\n    assertEquals(results1.size(), results2.size());\n    assertEquals(results1.get(0).key, results2.get(0).key);\n    assertEquals(results1.get(0).highlightKey, results2.get(0).highlightKey);\n    \n    suggester2.close();\n  }\n\n","sourceOld":"  private void testConstructorDefatuls(AnalyzingInfixSuggester suggester, Input[] keys, Analyzer a, \n      boolean allTermsRequired, boolean highlight) throws IOException {\n    AnalyzingInfixSuggester suggester2 = new AnalyzingInfixSuggester(newDirectory(), a, a, 3, false, allTermsRequired, highlight);\n    suggester2.build(new InputArrayIterator(keys));\n    \n    CharSequence key = TestUtil.stringToCharSequence(\"penny ea\", random());\n    \n    List<LookupResult> results1 = suggester.lookup(key, 10, allTermsRequired, highlight);\n    List<LookupResult> results2 = suggester2.lookup(key, false, 10);\n    assertEquals(results1.size(), results2.size());\n    assertEquals(results1.get(0).key, results2.get(0).key);\n    assertEquals(results1.get(0).highlightKey, results2.get(0).highlightKey);\n    \n    suggester2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ca7fbb27b5ca0c241732978139f9680144cb2769":["7055cd9d1615c97eb7ddc5b4964c4e66e71ce273"],"7055cd9d1615c97eb7ddc5b4964c4e66e71ce273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ca7fbb27b5ca0c241732978139f9680144cb2769"]},"commit2Childs":{"ca7fbb27b5ca0c241732978139f9680144cb2769":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7055cd9d1615c97eb7ddc5b4964c4e66e71ce273":["ca7fbb27b5ca0c241732978139f9680144cb2769"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7055cd9d1615c97eb7ddc5b4964c4e66e71ce273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}