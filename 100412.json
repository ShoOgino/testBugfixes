{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","commits":[{"id":"b820d01e1d958b7498397c2f7b17a5f214364d49","date":1238969930,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = AbstractDataImportHandlerTest.getContext(null, new VariableResolverImpl(), null, Context.FULL_DUMP, flds, Collections.EMPTY_MAP);\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<String, Object>();\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    Assert.assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","sourceNew":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = AbstractDataImportHandlerTest.getContext(null, new VariableResolverImpl(), null, Context.FULL_DUMP, flds, Collections.EMPTY_MAP);\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<String, Object>();\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    Assert.assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","sourceOld":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = AbstractDataImportHandlerTest.getContext(null, new VariableResolverImpl(), null, Context.FULL_DUMP, flds, Collections.EMPTY_MAP);\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<String, Object>();\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    Assert.assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b820d01e1d958b7498397c2f7b17a5f214364d49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["b820d01e1d958b7498397c2f7b17a5f214364d49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["b820d01e1d958b7498397c2f7b17a5f214364d49"],"b820d01e1d958b7498397c2f7b17a5f214364d49":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}