{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestCheckJoinIndex#testOrphans().mjava","commits":[{"id":"a67f37df79147ed4dd608300c2336c2979db98be","date":1436271524,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestCheckJoinIndex#testOrphans().mjava","pathOld":"/dev/null","sourceNew":"  public void testOrphans() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    {\n      // Add a first valid block\n      List<Document> block = new ArrayList<>();\n      final int numChildren = TestUtil.nextInt(random(), 0, 3);\n      for (int i = 0; i < numChildren; ++i) {\n        block.add(new Document());\n      }\n      Document parent = new Document();\n      parent.add(new StringField(\"parent\", \"true\", Store.NO));\n      block.add(parent);\n      w.addDocuments(block);\n    }\n\n    {\n      // Then a block with no parent\n      List<Document> block = new ArrayList<>();\n      final int numChildren = TestUtil.nextInt(random(), 1, 3);\n      for (int i = 0; i < numChildren; ++i) {\n        block.add(new Document());\n      }\n      w.addDocuments(block);\n    }\n\n    final IndexReader reader = w.getReader();\n    w.close();\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new QueryWrapperFilter(new TermQuery(new Term(\"parent\", \"true\"))));\n    try {\n      CheckJoinIndex.check(reader, parentsFilter);\n      fail(\"Invalid index\");\n    } catch (IllegalStateException e) {\n      // expected\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestCheckJoinIndex#testOrphans().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestCheckJoinIndex#testOrphans().mjava","sourceNew":"  public void testOrphans() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    {\n      // Add a first valid block\n      List<Document> block = new ArrayList<>();\n      final int numChildren = TestUtil.nextInt(random(), 0, 3);\n      for (int i = 0; i < numChildren; ++i) {\n        block.add(new Document());\n      }\n      Document parent = new Document();\n      parent.add(new StringField(\"parent\", \"true\", Store.NO));\n      block.add(parent);\n      w.addDocuments(block);\n    }\n\n    {\n      // Then a block with no parent\n      List<Document> block = new ArrayList<>();\n      final int numChildren = TestUtil.nextInt(random(), 1, 3);\n      for (int i = 0; i < numChildren; ++i) {\n        block.add(new Document());\n      }\n      w.addDocuments(block);\n    }\n\n    final IndexReader reader = w.getReader();\n    w.close();\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"parent\", \"true\")));\n    try {\n      CheckJoinIndex.check(reader, parentsFilter);\n      fail(\"Invalid index\");\n    } catch (IllegalStateException e) {\n      // expected\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testOrphans() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    {\n      // Add a first valid block\n      List<Document> block = new ArrayList<>();\n      final int numChildren = TestUtil.nextInt(random(), 0, 3);\n      for (int i = 0; i < numChildren; ++i) {\n        block.add(new Document());\n      }\n      Document parent = new Document();\n      parent.add(new StringField(\"parent\", \"true\", Store.NO));\n      block.add(parent);\n      w.addDocuments(block);\n    }\n\n    {\n      // Then a block with no parent\n      List<Document> block = new ArrayList<>();\n      final int numChildren = TestUtil.nextInt(random(), 1, 3);\n      for (int i = 0; i < numChildren; ++i) {\n        block.add(new Document());\n      }\n      w.addDocuments(block);\n    }\n\n    final IndexReader reader = w.getReader();\n    w.close();\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new QueryWrapperFilter(new TermQuery(new Term(\"parent\", \"true\"))));\n    try {\n      CheckJoinIndex.check(reader, parentsFilter);\n      fail(\"Invalid index\");\n    } catch (IllegalStateException e) {\n      // expected\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd8a7e622c1138188be79e193b1dc52f3f0889a5","date":1564419078,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestCheckJoinIndex#testOrphans().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestCheckJoinIndex#testOrphans().mjava","sourceNew":"  public void testOrphans() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    {\n      // Add a first valid block\n      List<Document> block = new ArrayList<>();\n      final int numChildren = TestUtil.nextInt(random(), 0, 3);\n      for (int i = 0; i < numChildren; ++i) {\n        block.add(new Document());\n      }\n      Document parent = new Document();\n      parent.add(new StringField(\"parent\", \"true\", Store.NO));\n      block.add(parent);\n      w.addDocuments(block);\n    }\n\n    {\n      // Then a block with no parent\n      List<Document> block = new ArrayList<>();\n      final int numChildren = TestUtil.nextInt(random(), 1, 3);\n      for (int i = 0; i < numChildren; ++i) {\n        block.add(new Document());\n      }\n      w.addDocuments(block);\n    }\n\n    final IndexReader reader = w.getReader();\n    w.close();\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"parent\", \"true\")));\n    try {\n      expectThrows(IllegalStateException.class, () -> CheckJoinIndex.check(reader, parentsFilter));\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testOrphans() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    {\n      // Add a first valid block\n      List<Document> block = new ArrayList<>();\n      final int numChildren = TestUtil.nextInt(random(), 0, 3);\n      for (int i = 0; i < numChildren; ++i) {\n        block.add(new Document());\n      }\n      Document parent = new Document();\n      parent.add(new StringField(\"parent\", \"true\", Store.NO));\n      block.add(parent);\n      w.addDocuments(block);\n    }\n\n    {\n      // Then a block with no parent\n      List<Document> block = new ArrayList<>();\n      final int numChildren = TestUtil.nextInt(random(), 1, 3);\n      for (int i = 0; i < numChildren; ++i) {\n        block.add(new Document());\n      }\n      w.addDocuments(block);\n    }\n\n    final IndexReader reader = w.getReader();\n    w.close();\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"parent\", \"true\")));\n    try {\n      CheckJoinIndex.check(reader, parentsFilter);\n      fail(\"Invalid index\");\n    } catch (IllegalStateException e) {\n      // expected\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestCheckJoinIndex#testOrphans().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestCheckJoinIndex#testOrphans().mjava","sourceNew":"  public void testOrphans() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    {\n      // Add a first valid block\n      List<Document> block = new ArrayList<>();\n      final int numChildren = TestUtil.nextInt(random(), 0, 3);\n      for (int i = 0; i < numChildren; ++i) {\n        block.add(new Document());\n      }\n      Document parent = new Document();\n      parent.add(new StringField(\"parent\", \"true\", Store.NO));\n      block.add(parent);\n      w.addDocuments(block);\n    }\n\n    {\n      // Then a block with no parent\n      List<Document> block = new ArrayList<>();\n      final int numChildren = TestUtil.nextInt(random(), 1, 3);\n      for (int i = 0; i < numChildren; ++i) {\n        block.add(new Document());\n      }\n      w.addDocuments(block);\n    }\n\n    final IndexReader reader = w.getReader();\n    w.close();\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"parent\", \"true\")));\n    try {\n      expectThrows(IllegalStateException.class, () -> CheckJoinIndex.check(reader, parentsFilter));\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testOrphans() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    {\n      // Add a first valid block\n      List<Document> block = new ArrayList<>();\n      final int numChildren = TestUtil.nextInt(random(), 0, 3);\n      for (int i = 0; i < numChildren; ++i) {\n        block.add(new Document());\n      }\n      Document parent = new Document();\n      parent.add(new StringField(\"parent\", \"true\", Store.NO));\n      block.add(parent);\n      w.addDocuments(block);\n    }\n\n    {\n      // Then a block with no parent\n      List<Document> block = new ArrayList<>();\n      final int numChildren = TestUtil.nextInt(random(), 1, 3);\n      for (int i = 0; i < numChildren; ++i) {\n        block.add(new Document());\n      }\n      w.addDocuments(block);\n    }\n\n    final IndexReader reader = w.getReader();\n    w.close();\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"parent\", \"true\")));\n    try {\n      CheckJoinIndex.check(reader, parentsFilter);\n      fail(\"Invalid index\");\n    } catch (IllegalStateException e) {\n      // expected\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cd8a7e622c1138188be79e193b1dc52f3f0889a5":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["a67f37df79147ed4dd608300c2336c2979db98be"],"a67f37df79147ed4dd608300c2336c2979db98be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["d52e48927ca4ef3655a261f2230b968b6fdf3608","cd8a7e622c1138188be79e193b1dc52f3f0889a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cd8a7e622c1138188be79e193b1dc52f3f0889a5"]},"commit2Childs":{"cd8a7e622c1138188be79e193b1dc52f3f0889a5":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["cd8a7e622c1138188be79e193b1dc52f3f0889a5","f8061ddd97f3352007d927dae445884a6f3d857b"],"a67f37df79147ed4dd608300c2336c2979db98be":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a67f37df79147ed4dd608300c2336c2979db98be"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}