{"path":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(ContentStream).mjava","commits":[{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(ContentStream).mjava","pathOld":"/dev/null","sourceNew":"    private void handleCommands( ContentStream stream) throws IOException {\n    ConfigOverlay overlay = req.getCore().getSolrConfig().getOverlay();\n    List<CommandOperation> ops = CommandOperation.parse(stream.getReader());\n    for (CommandOperation op : ops) {\n      if(SET_PROPERTY.equals( op.name) ){\n        overlay = applySetProp(op, overlay);\n      }else if(UNSET_PROPERTY.equals(op.name)){\n        overlay = applyUnset(op,overlay);\n      }else if(SET_USER_PROPERTY.equals(op.name)){\n        overlay = applySetUserProp(op ,overlay);\n      }else if(UNSET_USER_PROPERTY.equals(op.name)){\n        overlay = applyUnsetUserProp(op, overlay);\n      }\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS,errs);\n      return;\n    }\n\n    SolrResourceLoader loader = req.getCore().getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkController.persistConfigResourceToZooKeeper(loader,overlay.getZnodeVersion(),\n          ConfigOverlay.RESOURCE_NAME,overlay.toByteArray(),true);\n\n      String collectionName = req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName();\n      Map map = ZkNodeProps.makeMap(CoreAdminParams.ACTION, CollectionParams.CollectionAction.RELOAD.toString() ,\n          CollectionParams.NAME, collectionName);\n\n      SolrQueryRequest  solrQueryRequest = new LocalSolrQueryRequest(req.getCore(), new MapSolrParams(map));\n      SolrQueryResponse tmpResp = new SolrQueryResponse();\n      try {\n        //doing a collection reload\n        req.getCore().getCoreDescriptor().getCoreContainer().getCollectionsHandler().handleRequestBody(solrQueryRequest,tmpResp);\n      } catch (Exception e) {\n        String msg = MessageFormat.format(\"Unable to reload collection {0}\", collectionName);\n        log.error(msg);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n      }\n\n    } else {\n      SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n      req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08f9f60ad238cb88d12306a20077e84d1f1f93e4","date":1416549887,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(List[CommandOperation],ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleCommands(ContentStream).mjava","sourceNew":"    private void handleCommands(List<CommandOperation> ops, ConfigOverlay overlay ) throws IOException {\n    for (CommandOperation op : ops) {\n      switch (op.name) {\n        case SET_PROPERTY:\n          overlay = applySetProp(op, overlay);\n          break;\n        case UNSET_PROPERTY:\n          overlay = applyUnset(op, overlay);\n          break;\n        case SET_USER_PROPERTY:\n          overlay = applySetUserProp(op, overlay);\n          break;\n        case UNSET_USER_PROPERTY:\n          overlay = applyUnsetUserProp(op, overlay);\n          break;\n      }\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS,errs);\n      return;\n    }\n\n    SolrResourceLoader loader = req.getCore().getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkController.persistConfigResourceToZooKeeper(loader,overlay.getZnodeVersion(),\n          ConfigOverlay.RESOURCE_NAME,overlay.toByteArray(),true);\n\n    } else {\n      SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n      req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n    }\n\n  }\n\n","sourceOld":"    private void handleCommands( ContentStream stream) throws IOException {\n    ConfigOverlay overlay = req.getCore().getSolrConfig().getOverlay();\n    List<CommandOperation> ops = CommandOperation.parse(stream.getReader());\n    for (CommandOperation op : ops) {\n      if(SET_PROPERTY.equals( op.name) ){\n        overlay = applySetProp(op, overlay);\n      }else if(UNSET_PROPERTY.equals(op.name)){\n        overlay = applyUnset(op,overlay);\n      }else if(SET_USER_PROPERTY.equals(op.name)){\n        overlay = applySetUserProp(op ,overlay);\n      }else if(UNSET_USER_PROPERTY.equals(op.name)){\n        overlay = applyUnsetUserProp(op, overlay);\n      }\n    }\n    List errs = CommandOperation.captureErrors(ops);\n    if (!errs.isEmpty()) {\n      resp.add(CommandOperation.ERR_MSGS,errs);\n      return;\n    }\n\n    SolrResourceLoader loader = req.getCore().getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkController.persistConfigResourceToZooKeeper(loader,overlay.getZnodeVersion(),\n          ConfigOverlay.RESOURCE_NAME,overlay.toByteArray(),true);\n\n      String collectionName = req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName();\n      Map map = ZkNodeProps.makeMap(CoreAdminParams.ACTION, CollectionParams.CollectionAction.RELOAD.toString() ,\n          CollectionParams.NAME, collectionName);\n\n      SolrQueryRequest  solrQueryRequest = new LocalSolrQueryRequest(req.getCore(), new MapSolrParams(map));\n      SolrQueryResponse tmpResp = new SolrQueryResponse();\n      try {\n        //doing a collection reload\n        req.getCore().getCoreDescriptor().getCoreContainer().getCollectionsHandler().handleRequestBody(solrQueryRequest,tmpResp);\n      } catch (Exception e) {\n        String msg = MessageFormat.format(\"Unable to reload collection {0}\", collectionName);\n        log.error(msg);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n      }\n\n    } else {\n      SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, overlay.toByteArray());\n      req.getCore().getCoreDescriptor().getCoreContainer().reload(req.getCore().getName());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"]},"commit2Childs":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}