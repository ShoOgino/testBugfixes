{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#verifyDebugSections(SolrQuery,SolrServer).mjava","commits":[{"id":"53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e","date":1399316048,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#verifyDebugSections(SolrQuery,SolrServer).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyDebugSections(SolrQuery query, SolrServer server) throws SolrServerException {\n    query.set(\"debugQuery\", \"true\");\n    query.remove(\"debug\");\n    QueryResponse response = server.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"true\");\n    query.remove(\"debugQuery\");\n    response = server.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\",  \"track\");\n    response = server.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\",  \"query\");\n    response = server.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\",  \"results\");\n    response = server.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\",  \"timing\");\n    response = server.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\",  \"false\");\n    response = server.query(query);\n    assertNull(response.getDebugMap());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#verifyDebugSections(SolrQuery,SolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#verifyDebugSections(SolrQuery,SolrServer).mjava","sourceNew":"  private void verifyDebugSections(SolrQuery query, SolrClient client) throws SolrServerException {\n    query.set(\"debugQuery\", \"true\");\n    query.remove(\"debug\");\n    QueryResponse response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"true\");\n    query.remove(\"debugQuery\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"track\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"query\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"results\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"timing\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"false\");\n    response = client.query(query);\n    assertNull(response.getDebugMap());\n  }\n\n","sourceOld":"  private void verifyDebugSections(SolrQuery query, SolrServer server) throws SolrServerException {\n    query.set(\"debugQuery\", \"true\");\n    query.remove(\"debug\");\n    QueryResponse response = server.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"true\");\n    query.remove(\"debugQuery\");\n    response = server.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\",  \"track\");\n    response = server.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\",  \"query\");\n    response = server.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\",  \"results\");\n    response = server.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\",  \"timing\");\n    response = server.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\",  \"false\");\n    response = server.query(query);\n    assertNull(response.getDebugMap());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bafca15d8e408346a67f4282ad1143b88023893b":["53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e"],"53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}