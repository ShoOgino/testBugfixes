{"path":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testNoDupCommitFileNames().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testNoDupCommitFileNames().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1509\n  public void testNoDupCommitFileNames() throws Throwable {\n\n    Directory dir = new MockRAMDirectory();\n    \n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    writer.setMaxBufferedDocs(2);\n    writer.addDocument(createDocument(\"a\"));\n    writer.addDocument(createDocument(\"a\"));\n    writer.addDocument(createDocument(\"a\"));\n    writer.close();\n    \n    Collection commits = IndexReader.listCommits(dir);\n    Iterator it = commits.iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      Collection files = commit.getFileNames();\n      HashSet seen = new HashSet();\n      Iterator it2 = files.iterator();\n      while(it2.hasNext()) {\n        String fileName = (String) it2.next();\n        assertTrue(\"file \" + fileName + \" was duplicated\", !seen.contains(fileName));\n        seen.add(fileName);\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testNoDupCommitFileNames().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testNoDupCommitFileNames().mjava","sourceNew":"  // LUCENE-1509\n  public void testNoDupCommitFileNames() throws Throwable {\n\n    Directory dir = new MockRAMDirectory();\n    \n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    writer.setMaxBufferedDocs(2);\n    writer.addDocument(createDocument(\"a\"));\n    writer.addDocument(createDocument(\"a\"));\n    writer.addDocument(createDocument(\"a\"));\n    writer.close();\n    \n    Collection commits = IndexReader.listCommits(dir);\n    Iterator it = commits.iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      Collection files = commit.getFileNames();\n      HashSet seen = new HashSet();\n      Iterator it2 = files.iterator();\n      while(it2.hasNext()) {\n        String fileName = (String) it2.next();\n        assertTrue(\"file \" + fileName + \" was duplicated\", !seen.contains(fileName));\n        seen.add(fileName);\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1509\n  public void testNoDupCommitFileNames() throws Throwable {\n\n    Directory dir = new MockRAMDirectory();\n    \n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    writer.setMaxBufferedDocs(2);\n    writer.addDocument(createDocument(\"a\"));\n    writer.addDocument(createDocument(\"a\"));\n    writer.addDocument(createDocument(\"a\"));\n    writer.close();\n    \n    Collection commits = IndexReader.listCommits(dir);\n    Iterator it = commits.iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      Collection files = commit.getFileNames();\n      HashSet seen = new HashSet();\n      Iterator it2 = files.iterator();\n      while(it2.hasNext()) {\n        String fileName = (String) it2.next();\n        assertTrue(\"file \" + fileName + \" was duplicated\", !seen.contains(fileName));\n        seen.add(fileName);\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}