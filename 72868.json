{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#createCollectAcc(int,int).mjava","commits":[{"id":"9e13d0d4d8b6dc352cb304974502b9a36c153f78","date":1436492687,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#createCollectAcc(int,int).mjava","pathOld":"/dev/null","sourceNew":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    } else {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deffered aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b834e175d4d6b99680745b76417f082cfad6b76f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b834e175d4d6b99680745b76417f082cfad6b76f","date":1445799013,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#createCollectAcc(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#createCollectAcc(int,int).mjava","sourceNew":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    } else {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","sourceOld":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    } else {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deffered aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","bugFix":["9e13d0d4d8b6dc352cb304974502b9a36c153f78"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79759974460bc59933cd169acc94f5c6b16368d5","date":1471318443,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createCollectAcc(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#createCollectAcc(int,int).mjava","sourceNew":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    } else {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","sourceOld":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    } else {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createCollectAcc(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#createCollectAcc(int,int).mjava","sourceNew":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    } else {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","sourceOld":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    } else {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createCollectAcc(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#createCollectAcc(int,int).mjava","sourceNew":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    } else {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","sourceOld":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    } else {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createCollectAcc(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#createCollectAcc(int,int).mjava","sourceNew":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    } else {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","sourceOld":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    } else {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b834e175d4d6b99680745b76417f082cfad6b76f":["9e13d0d4d8b6dc352cb304974502b9a36c153f78"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["b834e175d4d6b99680745b76417f082cfad6b76f","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"9e13d0d4d8b6dc352cb304974502b9a36c153f78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["b834e175d4d6b99680745b76417f082cfad6b76f","79759974460bc59933cd169acc94f5c6b16368d5"],"79759974460bc59933cd169acc94f5c6b16368d5":["b834e175d4d6b99680745b76417f082cfad6b76f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b834e175d4d6b99680745b76417f082cfad6b76f","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"b834e175d4d6b99680745b76417f082cfad6b76f":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","79759974460bc59933cd169acc94f5c6b16368d5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9e13d0d4d8b6dc352cb304974502b9a36c153f78":["b834e175d4d6b99680745b76417f082cfad6b76f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e13d0d4d8b6dc352cb304974502b9a36c153f78"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"79759974460bc59933cd169acc94f5c6b16368d5":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}