{"path":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","pathOld":"solr/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","sourceNew":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT);\n    List<Callable<Integer>> callees = new ArrayList<Callable<Integer>>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT);\n    List<Callable<Integer>> callees = new ArrayList<Callable<Integer>>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","pathOld":"solr/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","sourceNew":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT);\n    List<Callable<Integer>> callees = new ArrayList<Callable<Integer>>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT);\n    List<Callable<Integer>> callees = new ArrayList<Callable<Integer>>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","pathOld":"solr/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","sourceNew":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT);\n    List<Callable<Integer>> callees = new ArrayList<Callable<Integer>>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT);\n    List<Callable<Integer>> callees = new ArrayList<Callable<Integer>>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c8719b2c0b382be11f5b193b6fc14bc310e906b","date":1344770591,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","sourceNew":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT, new DefaultSolrThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<Callable<Integer>>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT);\n    List<Callable<Integer>> callees = new ArrayList<Callable<Integer>>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","sourceNew":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT, new DefaultSolrThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<Callable<Integer>>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT);\n    List<Callable<Integer>> callees = new ArrayList<Callable<Integer>>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","sourceNew":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT, new DefaultSolrThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<Callable<Integer>>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT);\n    List<Callable<Integer>> callees = new ArrayList<Callable<Integer>>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","sourceNew":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT, new DefaultSolrThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<Callable<Integer>>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        @Override\n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT, new DefaultSolrThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<Callable<Integer>>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","sourceNew":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT, new DefaultSolrThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<Callable<Integer>>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        @Override\n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT, new DefaultSolrThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<Callable<Integer>>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","sourceNew":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT, new DefaultSolrThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<Callable<Integer>>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        @Override\n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT, new DefaultSolrThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<Callable<Integer>>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        @Override\n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","sourceNew":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT, new DefaultSolrThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<Callable<Integer>>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        @Override\n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT, new DefaultSolrThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<Callable<Integer>>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        @Override\n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","sourceNew":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT, new DefaultSolrThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        @Override\n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT, new DefaultSolrThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<Callable<Integer>>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        @Override\n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","sourceNew":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT, new DefaultSolrThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        @Override\n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(SolrTestCaseJ4.DEFAULT_TEST_CORENAME);\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT, new DefaultSolrThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        @Override\n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(\"\");\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5af3afeddbb803fb785098176e6e177c34261b","date":1428905393,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","sourceNew":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = ExecutorUtil.newMDCAwareFixedThreadPool(MT, new DefaultSolrThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        @Override\n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(SolrTestCaseJ4.DEFAULT_TEST_CORENAME);\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = Executors.newFixedThreadPool(MT, new DefaultSolrThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        @Override\n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(SolrTestCaseJ4.DEFAULT_TEST_CORENAME);\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef36ce50425e274054b6abe60abfd167a67550cb","date":1575981154,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","sourceNew":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = ExecutorUtil.newMDCAwareFixedThreadPool(MT, new DefaultSolrThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yieldInt(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        @Override\n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(SolrTestCaseJ4.DEFAULT_TEST_CORENAME);\n              // sprinkle concurrency hinting...\n              yieldInt(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yieldInt(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yieldInt(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yieldInt(l);\n              core.close();\n              core = null;\n              yieldInt(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = ExecutorUtil.newMDCAwareFixedThreadPool(MT, new DefaultSolrThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        @Override\n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(SolrTestCaseJ4.DEFAULT_TEST_CORENAME);\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"993b0c7dda6341b437fe5685d35c6cc35eaac420","date":1575985950,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","sourceNew":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = ExecutorUtil.newMDCAwareFixedThreadPool(MT, new DefaultSolrThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yieldInt(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        @Override\n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(SolrTestCaseJ4.DEFAULT_TEST_CORENAME);\n              // sprinkle concurrency hinting...\n              yieldInt(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yieldInt(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yieldInt(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yieldInt(l);\n              core.close();\n              core = null;\n              yieldInt(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = ExecutorUtil.newMDCAwareFixedThreadPool(MT, new DefaultSolrThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yield(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        @Override\n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(SolrTestCaseJ4.DEFAULT_TEST_CORENAME);\n              // sprinkle concurrency hinting...\n              yield(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yield(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yield(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yield(l);\n              core.close();\n              core = null;\n              yield(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testRefCountMT().mjava","sourceNew":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = ExecutorUtil.newMDCAwareFixedThreadPool(MT, new SolrNamedThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yieldInt(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        @Override\n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(SolrTestCaseJ4.DEFAULT_TEST_CORENAME);\n              // sprinkle concurrency hinting...\n              yieldInt(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yieldInt(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yieldInt(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yieldInt(l);\n              core.close();\n              core = null;\n              yieldInt(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testRefCountMT() throws Exception {\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n\n    final ClosingRequestHandler handler1 = new ClosingRequestHandler();\n    handler1.inform(core);\n    String path = \"/this/is A path /that won't be registered!\";\n    SolrRequestHandler old = core.registerRequestHandler(path, handler1);\n    assertNull(old); // should not be anything...\n    assertEquals(core.getRequestHandlers().get(path), handler1);\n\n    final int LOOP = 100;\n    final int MT = 16;\n    ExecutorService service = ExecutorUtil.newMDCAwareFixedThreadPool(MT, new DefaultSolrThreadFactory(\"refCountMT\"));\n    List<Callable<Integer>> callees = new ArrayList<>(MT);\n    final CoreContainer cores = h.getCoreContainer();\n    for (int i = 0; i < MT; ++i) {\n      Callable<Integer> call = new Callable<Integer>() {\n        void yieldInt(int n) {\n          try {\n            Thread.sleep(0, (n % 13 + 1) * 10);\n          } catch (InterruptedException xint) {\n          }\n        }\n        \n        @Override\n        public Integer call() {\n          SolrCore core = null;\n          int r = 0;\n          try {\n            for (int l = 0; l < LOOP; ++l) {\n              r += 1;\n              core = cores.getCore(SolrTestCaseJ4.DEFAULT_TEST_CORENAME);\n              // sprinkle concurrency hinting...\n              yieldInt(l);\n              assertTrue(\"Refcount < 1\", core.getOpenCount() >= 1);              \n              yieldInt(l);\n              assertTrue(\"Refcount > 17\", core.getOpenCount() <= 17);             \n              yieldInt(l);\n              assertTrue(\"Handler is closed\", handler1.closed == false);\n              yieldInt(l);\n              core.close();\n              core = null;\n              yieldInt(l);\n            }\n            return r;\n          } finally {\n            if (core != null)\n              core.close();\n          }\n        }\n      };\n      callees.add(call);\n    }\n\n    List<Future<Integer>> results = service.invokeAll(callees);\n    for (Future<Integer> result : results) {\n      assertTrue(\"loop=\" + result.get() +\" < \" + LOOP, result.get() >= LOOP);\n    }\n    \n    cores.shutdown();\n    assertTrue(\"Refcount != 0\", core.getOpenCount() == 0);\n    assertTrue(\"Handler not closed\", core.isClosed() && handler1.closed == true);\n    \n    service.shutdown();\n    assertTrue(\"Running for too long...\", service.awaitTermination(60, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef36ce50425e274054b6abe60abfd167a67550cb":["cb5af3afeddbb803fb785098176e6e177c34261b"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["1c8719b2c0b382be11f5b193b6fc14bc310e906b","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["7530de27b87b961b51f01bd1299b7004d46e8823","19275ba31e621f6da1b83bf13af75233876fd3d4"],"993b0c7dda6341b437fe5685d35c6cc35eaac420":["cb5af3afeddbb803fb785098176e6e177c34261b","ef36ce50425e274054b6abe60abfd167a67550cb"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["7530de27b87b961b51f01bd1299b7004d46e8823"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["c26f00b574427b55127e869b935845554afde1fa","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["ef36ce50425e274054b6abe60abfd167a67550cb"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"cb5af3afeddbb803fb785098176e6e177c34261b":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["c26f00b574427b55127e869b935845554afde1fa","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"1c8719b2c0b382be11f5b193b6fc14bc310e906b":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"ef36ce50425e274054b6abe60abfd167a67550cb":["993b0c7dda6341b437fe5685d35c6cc35eaac420","fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"993b0c7dda6341b437fe5685d35c6cc35eaac420":[],"c26f00b574427b55127e869b935845554afde1fa":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["cb5af3afeddbb803fb785098176e6e177c34261b"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cb5af3afeddbb803fb785098176e6e177c34261b":["ef36ce50425e274054b6abe60abfd167a67550cb","993b0c7dda6341b437fe5685d35c6cc35eaac420"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"1c8719b2c0b382be11f5b193b6fc14bc310e906b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7869f64c874ebf7f317d22c00baf2b6857797a6","7530de27b87b961b51f01bd1299b7004d46e8823","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","993b0c7dda6341b437fe5685d35c6cc35eaac420","c7869f64c874ebf7f317d22c00baf2b6857797a6","a258fbb26824fd104ed795e5d9033d2d040049ee","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}