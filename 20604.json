{"path":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docsWriter = wrappedPostingsBaseFormat.postingsWriterBase(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriter(freqCutoff, docsWriter);\n\n    // Terms dict\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, pulsingWriter, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docsWriter = wrappedPostingsBaseFormat.postingsWriterBase(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriter(freqCutoff, docsWriter);\n\n    // Terms dict\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, pulsingWriter, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public InvertedFieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docsWriter = wrappedPostingsBaseFormat.postingsWriterBase(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriter(freqCutoff, docsWriter);\n\n    // Terms dict\n    boolean success = false;\n    try {\n      InvertedFieldsConsumer ret = new BlockTreeTermsWriter(state, pulsingWriter, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docsWriter = wrappedPostingsBaseFormat.postingsWriterBase(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriter(freqCutoff, docsWriter);\n\n    // Terms dict\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, pulsingWriter, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docsWriter = wrappedPostingsBaseFormat.postingsWriterBase(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriter(freqCutoff, docsWriter);\n\n    // Terms dict\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, pulsingWriter, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public InvertedFieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docsWriter = wrappedPostingsBaseFormat.postingsWriterBase(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriter(freqCutoff, docsWriter);\n\n    // Terms dict\n    boolean success = false;\n    try {\n      InvertedFieldsConsumer ret = new BlockTreeTermsWriter(state, pulsingWriter, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd5dd283c3d9f22e186699bf823c9d1e67f49152","date":1339431132,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docsWriter = null;\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = null;\n\n    // Terms dict\n    boolean success = false;\n    try {\n      docsWriter = wrappedPostingsBaseFormat.postingsWriterBase(state);\n\n      // Terms that have <= freqCutoff number of docs are\n      // \"pulsed\" (inlined):\n      pulsingWriter = new PulsingPostingsWriter(freqCutoff, docsWriter);\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, pulsingWriter, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docsWriter, pulsingWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docsWriter = wrappedPostingsBaseFormat.postingsWriterBase(state);\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = new PulsingPostingsWriter(freqCutoff, docsWriter);\n\n    // Terms dict\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, pulsingWriter, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        pulsingWriter.close();\n      }\n    }\n  }\n\n","bugFix":["7b91922b55d15444d554721b352861d028eb8278"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docsWriter = null;\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = null;\n\n    // Terms dict\n    boolean success = false;\n    try {\n      docsWriter = wrappedPostingsBaseFormat.postingsWriterBase(state);\n\n      // Terms that have <= freqCutoff number of docs are\n      // \"pulsed\" (inlined):\n      pulsingWriter = new PulsingPostingsWriter(freqCutoff, docsWriter);\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, pulsingWriter, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docsWriter, pulsingWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docsWriter = null;\n\n    // Terms that have <= freqCutoff number of docs are\n    // \"pulsed\" (inlined):\n    PostingsWriterBase pulsingWriter = null;\n\n    // Terms dict\n    boolean success = false;\n    try {\n      docsWriter = wrappedPostingsBaseFormat.postingsWriterBase(state);\n\n      // Terms that have <= freqCutoff number of docs are\n      // \"pulsed\" (inlined):\n      pulsingWriter = new PulsingPostingsWriter(freqCutoff, docsWriter);\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, pulsingWriter, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docsWriter, pulsingWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["dd5dd283c3d9f22e186699bf823c9d1e67f49152"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dd5dd283c3d9f22e186699bf823c9d1e67f49152":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["dd5dd283c3d9f22e186699bf823c9d1e67f49152"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"dd5dd283c3d9f22e186699bf823c9d1e67f49152":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}