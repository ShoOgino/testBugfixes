{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","commits":[{"id":"34ce7c842452c79b12c45a8feb64e4597c7110e8","date":1321637224,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testExpungeDeletes().mjava","sourceNew":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.deleteDocument(0);\n    ir.deleteDocument(7);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test expungeDeletes, when 2 singular merges\n  // are required\n  public void testExpungeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.deleteDocument(0);\n    ir.deleteDocument(7);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.expungeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","sourceNew":null,"sourceOld":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.deleteDocument(0);\n    ir.deleteDocument(7);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24ba3838b71dd2da24e0108e7074e25ebb99f355","date":1323364643,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2","a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","sourceNew":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.deleteDocument(0);\n    ir.deleteDocument(7);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","sourceNew":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir, false);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.deleteDocument(0);\n    ir.deleteDocument(7);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = IndexReader.open(dir, true);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","sourceNew":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["34ce7c842452c79b12c45a8feb64e4597c7110e8","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"24ba3838b71dd2da24e0108e7074e25ebb99f355":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["34ce7c842452c79b12c45a8feb64e4597c7110e8","24ba3838b71dd2da24e0108e7074e25ebb99f355"],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["24ba3838b71dd2da24e0108e7074e25ebb99f355"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"24ba3838b71dd2da24e0108e7074e25ebb99f355":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}