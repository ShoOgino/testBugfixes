{"path":"backwards/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#obtain().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#obtain().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized boolean obtain() throws IOException {\n\n    if (lockExists()) {\n      // Our instance is already locked:\n      return false;\n    }\n\n    // Ensure that lockDir exists and is a directory.\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n\n    String canonicalPath = path.getCanonicalPath();\n\n    boolean markedHeld = false;\n\n    try {\n\n      // Make sure nobody else in-process has this lock held\n      // already, and, mark it held if not:\n\n      synchronized(LOCK_HELD) {\n        if (LOCK_HELD.contains(canonicalPath)) {\n          // Someone else in this JVM already has the lock:\n          return false;\n        } else {\n          // This \"reserves\" the fact that we are the one\n          // thread trying to obtain this lock, so we own\n          // the only instance of a channel against this\n          // file:\n          LOCK_HELD.add(canonicalPath);\n          markedHeld = true;\n        }\n      }\n\n      try {\n        f = new RandomAccessFile(path, \"rw\");\n      } catch (IOException e) {\n        // On Windows, we can get intermittent \"Access\n        // Denied\" here.  So, we treat this as failure to\n        // acquire the lock, but, store the reason in case\n        // there is in fact a real error case.\n        failureReason = e;\n        f = null;\n      }\n\n      if (f != null) {\n        try {\n          channel = f.getChannel();\n          try {\n            lock = channel.tryLock();\n          } catch (IOException e) {\n            // At least on OS X, we will sometimes get an\n            // intermittent \"Permission Denied\" IOException,\n            // which seems to simply mean \"you failed to get\n            // the lock\".  But other IOExceptions could be\n            // \"permanent\" (eg, locking is not supported via\n            // the filesystem).  So, we record the failure\n            // reason here; the timeout obtain (usually the\n            // one calling us) will use this as \"root cause\"\n            // if it fails to get the lock.\n            failureReason = e;\n          } finally {\n            if (lock == null) {\n              try {\n                channel.close();\n              } finally {\n                channel = null;\n              }\n            }\n          }\n        } finally {\n          if (channel == null) {\n            try {\n              f.close();\n            } finally {\n              f = null;\n            }\n          }\n        }\n      }\n\n    } finally {\n      if (markedHeld && !lockExists()) {\n        synchronized(LOCK_HELD) {\n          if (LOCK_HELD.contains(canonicalPath)) {\n            LOCK_HELD.remove(canonicalPath);\n          }\n        }\n      }\n    }\n    return lockExists();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#obtain().mjava","pathOld":"backwards/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#obtain().mjava","sourceNew":"  @Override\n  public synchronized boolean obtain() throws IOException {\n\n    if (lockExists()) {\n      // Our instance is already locked:\n      return false;\n    }\n\n    // Ensure that lockDir exists and is a directory.\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n\n    String canonicalPath = path.getCanonicalPath();\n\n    boolean markedHeld = false;\n\n    try {\n\n      // Make sure nobody else in-process has this lock held\n      // already, and, mark it held if not:\n\n      synchronized(LOCK_HELD) {\n        if (LOCK_HELD.contains(canonicalPath)) {\n          // Someone else in this JVM already has the lock:\n          return false;\n        } else {\n          // This \"reserves\" the fact that we are the one\n          // thread trying to obtain this lock, so we own\n          // the only instance of a channel against this\n          // file:\n          LOCK_HELD.add(canonicalPath);\n          markedHeld = true;\n        }\n      }\n\n      try {\n        f = new RandomAccessFile(path, \"rw\");\n      } catch (IOException e) {\n        // On Windows, we can get intermittent \"Access\n        // Denied\" here.  So, we treat this as failure to\n        // acquire the lock, but, store the reason in case\n        // there is in fact a real error case.\n        failureReason = e;\n        f = null;\n      }\n\n      if (f != null) {\n        try {\n          channel = f.getChannel();\n          try {\n            lock = channel.tryLock();\n          } catch (IOException e) {\n            // At least on OS X, we will sometimes get an\n            // intermittent \"Permission Denied\" IOException,\n            // which seems to simply mean \"you failed to get\n            // the lock\".  But other IOExceptions could be\n            // \"permanent\" (eg, locking is not supported via\n            // the filesystem).  So, we record the failure\n            // reason here; the timeout obtain (usually the\n            // one calling us) will use this as \"root cause\"\n            // if it fails to get the lock.\n            failureReason = e;\n          } finally {\n            if (lock == null) {\n              try {\n                channel.close();\n              } finally {\n                channel = null;\n              }\n            }\n          }\n        } finally {\n          if (channel == null) {\n            try {\n              f.close();\n            } finally {\n              f = null;\n            }\n          }\n        }\n      }\n\n    } finally {\n      if (markedHeld && !lockExists()) {\n        synchronized(LOCK_HELD) {\n          if (LOCK_HELD.contains(canonicalPath)) {\n            LOCK_HELD.remove(canonicalPath);\n          }\n        }\n      }\n    }\n    return lockExists();\n  }\n\n","sourceOld":"  @Override\n  public synchronized boolean obtain() throws IOException {\n\n    if (lockExists()) {\n      // Our instance is already locked:\n      return false;\n    }\n\n    // Ensure that lockDir exists and is a directory.\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" +\n                              lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\"Found regular file where directory expected: \" + \n                            lockDir.getAbsolutePath());\n    }\n\n    String canonicalPath = path.getCanonicalPath();\n\n    boolean markedHeld = false;\n\n    try {\n\n      // Make sure nobody else in-process has this lock held\n      // already, and, mark it held if not:\n\n      synchronized(LOCK_HELD) {\n        if (LOCK_HELD.contains(canonicalPath)) {\n          // Someone else in this JVM already has the lock:\n          return false;\n        } else {\n          // This \"reserves\" the fact that we are the one\n          // thread trying to obtain this lock, so we own\n          // the only instance of a channel against this\n          // file:\n          LOCK_HELD.add(canonicalPath);\n          markedHeld = true;\n        }\n      }\n\n      try {\n        f = new RandomAccessFile(path, \"rw\");\n      } catch (IOException e) {\n        // On Windows, we can get intermittent \"Access\n        // Denied\" here.  So, we treat this as failure to\n        // acquire the lock, but, store the reason in case\n        // there is in fact a real error case.\n        failureReason = e;\n        f = null;\n      }\n\n      if (f != null) {\n        try {\n          channel = f.getChannel();\n          try {\n            lock = channel.tryLock();\n          } catch (IOException e) {\n            // At least on OS X, we will sometimes get an\n            // intermittent \"Permission Denied\" IOException,\n            // which seems to simply mean \"you failed to get\n            // the lock\".  But other IOExceptions could be\n            // \"permanent\" (eg, locking is not supported via\n            // the filesystem).  So, we record the failure\n            // reason here; the timeout obtain (usually the\n            // one calling us) will use this as \"root cause\"\n            // if it fails to get the lock.\n            failureReason = e;\n          } finally {\n            if (lock == null) {\n              try {\n                channel.close();\n              } finally {\n                channel = null;\n              }\n            }\n          }\n        } finally {\n          if (channel == null) {\n            try {\n              f.close();\n            } finally {\n              f = null;\n            }\n          }\n        }\n      }\n\n    } finally {\n      if (markedHeld && !lockExists()) {\n        synchronized(LOCK_HELD) {\n          if (LOCK_HELD.contains(canonicalPath)) {\n            LOCK_HELD.remove(canonicalPath);\n          }\n        }\n      }\n    }\n    return lockExists();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}