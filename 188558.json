{"path":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","commits":[{"id":"8d9ecbe4fecfad4689ea50a5ece2b815854aacdf","date":1374966910,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      String method = req.getMethod().toUpperCase(Locale.ROOT);\n      if (\"GET\".equals(method) || \"HEAD\".equals(method) \n          || (\"PUT\".equals(method) && req.getRequestURI().contains(\"/schema\"))) {\n        return parseQueryString(req.getQueryString());\n      }\n      if (\"POST\".equals( method ) ) {\n        if (formdata.isFormData(req)) {\n          return formdata.parseParamsAndFillStreams(req, streams);\n        }\n        if (ServletFileUpload.isMultipartContent(req)) {\n          return multipart.parseParamsAndFillStreams(req, streams);\n        }\n        return raw.parseParamsAndFillStreams(req, streams);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      String method = req.getMethod().toUpperCase(Locale.ROOT);\n      if (\"GET\".equals(method) || \"HEAD\".equals(method) \n          || (\"PUT\".equals(method) && req.getRequestURI().contains(\"/schema\"))) {\n        return parseQueryString(req.getQueryString());\n      }\n      if (\"POST\".equals( method ) ) {\n        if (formdata.isFormData(req)) {\n          return formdata.parseParamsAndFillStreams(req, streams);\n        }\n        if (ServletFileUpload.isMultipartContent(req)) {\n          return multipart.parseParamsAndFillStreams(req, streams);\n        }\n        return raw.parseParamsAndFillStreams(req, streams);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43","date":1386062370,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      String method = req.getMethod().toUpperCase(Locale.ROOT);\n      if (\"GET\".equals(method) || \"HEAD\".equals(method) \n          || (\"PUT\".equals(method) && req.getRequestURI().contains(\"/schema\"))) {\n        return parseQueryString(req.getQueryString());\n      }\n      if (\"POST\".equals( method ) ) {\n        if (formdata.isFormData(req)) {\n          return formdata.parseParamsAndFillStreams(req, streams);\n        }\n        if (ServletFileUpload.isMultipartContent(req)) {\n          return multipart.parseParamsAndFillStreams(req, streams);\n        }\n        if (req.getContentType() != null) {\n          return raw.parseParamsAndFillStreams(req, streams);\n        }\n        throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      String method = req.getMethod().toUpperCase(Locale.ROOT);\n      if (\"GET\".equals(method) || \"HEAD\".equals(method) \n          || (\"PUT\".equals(method) && req.getRequestURI().contains(\"/schema\"))) {\n        return parseQueryString(req.getQueryString());\n      }\n      if (\"POST\".equals( method ) ) {\n        if (formdata.isFormData(req)) {\n          return formdata.parseParamsAndFillStreams(req, streams);\n        }\n        if (ServletFileUpload.isMultipartContent(req)) {\n          return multipart.parseParamsAndFillStreams(req, streams);\n        }\n        return raw.parseParamsAndFillStreams(req, streams);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      String method = req.getMethod().toUpperCase(Locale.ROOT);\n      if (\"GET\".equals(method) || \"HEAD\".equals(method) \n          || (\"PUT\".equals(method) && req.getRequestURI().contains(\"/schema\"))) {\n        return parseQueryString(req.getQueryString());\n      }\n      if (\"POST\".equals( method ) ) {\n        if (formdata.isFormData(req)) {\n          return formdata.parseParamsAndFillStreams(req, streams);\n        }\n        if (ServletFileUpload.isMultipartContent(req)) {\n          return multipart.parseParamsAndFillStreams(req, streams);\n        }\n        if (req.getContentType() != null) {\n          return raw.parseParamsAndFillStreams(req, streams);\n        }\n        throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      String method = req.getMethod().toUpperCase(Locale.ROOT);\n      if (\"GET\".equals(method) || \"HEAD\".equals(method) \n          || (\"PUT\".equals(method) && req.getRequestURI().contains(\"/schema\"))) {\n        return parseQueryString(req.getQueryString());\n      }\n      if (\"POST\".equals( method ) ) {\n        if (formdata.isFormData(req)) {\n          return formdata.parseParamsAndFillStreams(req, streams);\n        }\n        if (ServletFileUpload.isMultipartContent(req)) {\n          return multipart.parseParamsAndFillStreams(req, streams);\n        }\n        return raw.parseParamsAndFillStreams(req, streams);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afb6bf9ce227ab6aac5068547e286ecc958b8b9d","date":1394661169,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      String method = req.getMethod().toUpperCase(Locale.ROOT);\n      if (\"GET\".equals(method) || \"HEAD\".equals(method) \n          || ((\"PUT\".equals(method) || \"DELETE\".equals(method))\n              && (req.getRequestURI().contains(\"/schema\")\n                  || req.getRequestURI().contains(\"/config\")))) {\n        return parseQueryString(req.getQueryString());\n      }\n      if (\"POST\".equals( method ) ) {\n        if (formdata.isFormData(req)) {\n          return formdata.parseParamsAndFillStreams(req, streams);\n        }\n        if (ServletFileUpload.isMultipartContent(req)) {\n          return multipart.parseParamsAndFillStreams(req, streams);\n        }\n        if (req.getContentType() != null) {\n          return raw.parseParamsAndFillStreams(req, streams);\n        }\n        throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      String method = req.getMethod().toUpperCase(Locale.ROOT);\n      if (\"GET\".equals(method) || \"HEAD\".equals(method) \n          || (\"PUT\".equals(method) && req.getRequestURI().contains(\"/schema\"))) {\n        return parseQueryString(req.getQueryString());\n      }\n      if (\"POST\".equals( method ) ) {\n        if (formdata.isFormData(req)) {\n          return formdata.parseParamsAndFillStreams(req, streams);\n        }\n        if (ServletFileUpload.isMultipartContent(req)) {\n          return multipart.parseParamsAndFillStreams(req, streams);\n        }\n        if (req.getContentType() != null) {\n          return raw.parseParamsAndFillStreams(req, streams);\n        }\n        throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d196318cb8ce39ae32035f290cd1397833e472","date":1418140712,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      String method = req.getMethod().toUpperCase(Locale.ROOT);\n      if (\"GET\".equals(method) || \"HEAD\".equals(method) \n          || ((\"PUT\".equals(method) || \"DELETE\".equals(method))\n              && (req.getRequestURI().contains(\"/schema\")\n                  || req.getRequestURI().contains(\"/config\")))) {\n        return parseQueryString(req.getQueryString());\n      }\n      if (\"POST\".equals( method ) ) {\n        if (formdata.isFormData(req)) {\n          return formdata.parseParamsAndFillStreams(req, streams);\n        }\n        if (ServletFileUpload.isMultipartContent(req)) {\n          return multipart.parseParamsAndFillStreams(req, streams);\n        }\n        return raw.parseParamsAndFillStreams(req, streams);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      String method = req.getMethod().toUpperCase(Locale.ROOT);\n      if (\"GET\".equals(method) || \"HEAD\".equals(method) \n          || ((\"PUT\".equals(method) || \"DELETE\".equals(method))\n              && (req.getRequestURI().contains(\"/schema\")\n                  || req.getRequestURI().contains(\"/config\")))) {\n        return parseQueryString(req.getQueryString());\n      }\n      if (\"POST\".equals( method ) ) {\n        if (formdata.isFormData(req)) {\n          return formdata.parseParamsAndFillStreams(req, streams);\n        }\n        if (ServletFileUpload.isMultipartContent(req)) {\n          return multipart.parseParamsAndFillStreams(req, streams);\n        }\n        if (req.getContentType() != null) {\n          return raw.parseParamsAndFillStreams(req, streams);\n        }\n        throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d17ec5164debc23076db7fd11d0331f201583b5","date":1426658173,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost) {\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n        idx = uri.indexOf(\"/config\");\n        if (idx >= 0 && uri.endsWith(\"/config\") || uri.contains(\"/config/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n        FastInputStream input = FastInputStream.wrap( req.getInputStream() );\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (ServletFileUpload.isMultipartContent(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      String method = req.getMethod().toUpperCase(Locale.ROOT);\n      if (\"GET\".equals(method) || \"HEAD\".equals(method) \n          || ((\"PUT\".equals(method) || \"DELETE\".equals(method))\n              && (req.getRequestURI().contains(\"/schema\")\n                  || req.getRequestURI().contains(\"/config\")))) {\n        return parseQueryString(req.getQueryString());\n      }\n      if (\"POST\".equals( method ) ) {\n        if (formdata.isFormData(req)) {\n          return formdata.parseParamsAndFillStreams(req, streams);\n        }\n        if (ServletFileUpload.isMultipartContent(req)) {\n          return multipart.parseParamsAndFillStreams(req, streams);\n        }\n        return raw.parseParamsAndFillStreams(req, streams);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n    }\n\n","bugFix":null,"bugIntro":["26ab43e1a461b9c1d9db0739ee0eb5caed8bc521"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost) {\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n        idx = uri.indexOf(\"/config\");\n        if (idx >= 0 && uri.endsWith(\"/config\") || uri.contains(\"/config/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n        FastInputStream input = FastInputStream.wrap( req.getInputStream() );\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (ServletFileUpload.isMultipartContent(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      String method = req.getMethod().toUpperCase(Locale.ROOT);\n      if (\"GET\".equals(method) || \"HEAD\".equals(method) \n          || ((\"PUT\".equals(method) || \"DELETE\".equals(method))\n              && (req.getRequestURI().contains(\"/schema\")\n                  || req.getRequestURI().contains(\"/config\")))) {\n        return parseQueryString(req.getQueryString());\n      }\n      if (\"POST\".equals( method ) ) {\n        if (formdata.isFormData(req)) {\n          return formdata.parseParamsAndFillStreams(req, streams);\n        }\n        if (ServletFileUpload.isMultipartContent(req)) {\n          return multipart.parseParamsAndFillStreams(req, streams);\n        }\n        return raw.parseParamsAndFillStreams(req, streams);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26ab43e1a461b9c1d9db0739ee0eb5caed8bc521","date":1461254038,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost) {\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n        idx = uri.indexOf(\"/config\");\n        if (idx >= 0 && uri.endsWith(\"/config\") || uri.contains(\"/config/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n\n        // Protect container owned streams from being closed by us, see SOLR-8933\n        FastInputStream input = FastInputStream.wrap( new CloseShieldInputStream(req.getInputStream()) );\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (ServletFileUpload.isMultipartContent(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost) {\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n        idx = uri.indexOf(\"/config\");\n        if (idx >= 0 && uri.endsWith(\"/config\") || uri.contains(\"/config/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n        FastInputStream input = FastInputStream.wrap( req.getInputStream() );\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (ServletFileUpload.isMultipartContent(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","bugFix":["0d17ec5164debc23076db7fd11d0331f201583b5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","date":1461308643,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost) {\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n        idx = uri.indexOf(\"/config\");\n        if (idx >= 0 && uri.endsWith(\"/config\") || uri.contains(\"/config/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n\n        // Protect container owned streams from being closed by us, see SOLR-8933\n        FastInputStream input = FastInputStream.wrap( new CloseShieldInputStream(req.getInputStream()) );\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (ServletFileUpload.isMultipartContent(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost) {\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n        idx = uri.indexOf(\"/config\");\n        if (idx >= 0 && uri.endsWith(\"/config\") || uri.contains(\"/config/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n        FastInputStream input = FastInputStream.wrap( req.getInputStream() );\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (ServletFileUpload.isMultipartContent(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a32f7ef7108695fb3ba9ee6045d6fba14104c40d","date":1497256269,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost) {\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n\n        // Protect container owned streams from being closed by us, see SOLR-8933\n        FastInputStream input = FastInputStream.wrap( new CloseShieldInputStream(req.getInputStream()) );\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (ServletFileUpload.isMultipartContent(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost) {\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n        idx = uri.indexOf(\"/config\");\n        if (idx >= 0 && uri.endsWith(\"/config\") || uri.contains(\"/config/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n\n        // Protect container owned streams from being closed by us, see SOLR-8933\n        FastInputStream input = FastInputStream.wrap( new CloseShieldInputStream(req.getInputStream()) );\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (ServletFileUpload.isMultipartContent(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost) {\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n\n        // Protect container owned streams from being closed by us, see SOLR-8933\n        FastInputStream input = FastInputStream.wrap( new CloseShieldInputStream(req.getInputStream()) );\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (ServletFileUpload.isMultipartContent(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost) {\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n        idx = uri.indexOf(\"/config\");\n        if (idx >= 0 && uri.endsWith(\"/config\") || uri.contains(\"/config/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n\n        // Protect container owned streams from being closed by us, see SOLR-8933\n        FastInputStream input = FastInputStream.wrap( new CloseShieldInputStream(req.getInputStream()) );\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (ServletFileUpload.isMultipartContent(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost) {\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n\n        // Protect container owned streams from being closed by us, see SOLR-8933\n        FastInputStream input = FastInputStream.wrap( new CloseShieldInputStream(req.getInputStream()) );\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (ServletFileUpload.isMultipartContent(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost) {\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n        idx = uri.indexOf(\"/config\");\n        if (idx >= 0 && uri.endsWith(\"/config\") || uri.contains(\"/config/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n\n        // Protect container owned streams from being closed by us, see SOLR-8933\n        FastInputStream input = FastInputStream.wrap( new CloseShieldInputStream(req.getInputStream()) );\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (ServletFileUpload.isMultipartContent(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac35531329b1809368fb0780bcf1e72d0add3c21","date":1525474926,"type":3,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost) {\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n\n        FastInputStream input = FastInputStream.wrap(req.getInputStream());\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (ServletFileUpload.isMultipartContent(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost) {\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n\n        // Protect container owned streams from being closed by us, see SOLR-8933\n        FastInputStream input = FastInputStream.wrap( new CloseShieldInputStream(req.getInputStream()) );\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (ServletFileUpload.isMultipartContent(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isRawPut = \"PUT\".equals(method) && BINARY_CONTENT_TYPE.equals(contentType);\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost && !isRawPut) {\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n\n        FastInputStream input = FastInputStream.wrap(req.getInputStream());\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (ServletFileUpload.isMultipartContent(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost) {\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n\n        FastInputStream input = FastInputStream.wrap(req.getInputStream());\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (ServletFileUpload.isMultipartContent(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isRawPut = \"PUT\".equals(method) && BINARY_CONTENT_TYPE.equals(contentType);\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost && !isRawPut) {\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n\n        FastInputStream input = FastInputStream.wrap(req.getInputStream());\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (ServletFileUpload.isMultipartContent(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost) {\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n\n        FastInputStream input = FastInputStream.wrap(req.getInputStream());\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (ServletFileUpload.isMultipartContent(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f18dcd5b6e136616bf9b6f9a22a17d26b74b202b","date":1573537504,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isV2 = getHttpSolrCall(req) instanceof V2HttpCall;\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost) {\n        if (isV2) {\n          return raw.parseParamsAndFillStreams(req, streams);\n        }\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n\n        FastInputStream input = FastInputStream.wrap(req.getInputStream());\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (ServletFileUpload.isMultipartContent(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isRawPut = \"PUT\".equals(method) && BINARY_CONTENT_TYPE.equals(contentType);\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost && !isRawPut) {\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n\n        FastInputStream input = FastInputStream.wrap(req.getInputStream());\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (ServletFileUpload.isMultipartContent(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac5c4637fb06d45efdeaf0f2d262b133ab2de181","date":1590122088,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isV2 = getHttpSolrCall(req) instanceof V2HttpCall;\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost) {\n        if (isV2) {\n          return raw.parseParamsAndFillStreams(req, streams);\n        }\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n\n        FastInputStream input = FastInputStream.wrap(req.getInputStream());\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (multipart.isMultipart(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isV2 = getHttpSolrCall(req) instanceof V2HttpCall;\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost) {\n        if (isV2) {\n          return raw.parseParamsAndFillStreams(req, streams);\n        }\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n\n        FastInputStream input = FastInputStream.wrap(req.getInputStream());\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (ServletFileUpload.isMultipartContent(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","bugFix":null,"bugIntro":["cff9a1253bcbc24e064decfe816f4c724029de8a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cff9a1253bcbc24e064decfe816f4c724029de8a","date":1600810938,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isV2 = getHttpSolrCall(req) instanceof V2HttpCall;\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost) {\n        if (isV2) {\n          return raw.parseParamsAndFillStreams(req, streams);\n        }\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n\n        FastInputStream input = FastInputStream.wrap(req.getInputStream());\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (MultipartRequestParser.isMultipart(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isV2 = getHttpSolrCall(req) instanceof V2HttpCall;\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost) {\n        if (isV2) {\n          return raw.parseParamsAndFillStreams(req, streams);\n        }\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n\n        FastInputStream input = FastInputStream.wrap(req.getInputStream());\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (multipart.isMultipart(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","bugFix":["ac5c4637fb06d45efdeaf0f2d262b133ab2de181"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b","date":1601832109,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.StandardRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isV2 = getHttpSolrCall(req) instanceof V2HttpCall;\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by the RestManager classes if the URI contained /schema or /config\n      if (!isPost) {\n        if (isV2) {\n          return raw.parseParamsAndFillStreams(req, streams);\n        }\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean schemaRestPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          schemaRestPath = true;\n        }\n\n        if (schemaRestPath) {\n          return raw.parseParamsAndFillStreams(req, streams);\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n\n        FastInputStream input = FastInputStream.wrap(req.getInputStream());\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (MultipartRequestParser.isMultipart(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {\n      String contentType = req.getContentType();\n      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive\n      String uri = req.getRequestURI();\n      boolean isV2 = getHttpSolrCall(req) instanceof V2HttpCall;\n      boolean isPost = \"POST\".equals(method);\n\n      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,\n      // but now it will use the raw request parser.\n      /***\n       if (contentType == null && isPost) {\n         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, \"Must specify a Content-Type header with POST requests\");\n       }\n       ***/\n\n\n      // According to previous StandardRequestParser logic (this is a re-written version),\n      // POST was handled normally, but other methods (PUT/DELETE)\n      // were handled by restlet if the URI contained /schema or /config\n      // \"handled by restlet\" means that we don't attempt to handle any request body here.\n      if (!isPost) {\n        if (isV2) {\n          return raw.parseParamsAndFillStreams(req, streams);\n        }\n        if (contentType == null) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        // OK, we have a BODY at this point\n\n        boolean restletPath = false;\n        int idx = uri.indexOf(\"/schema\");\n        if (idx >= 0 && uri.endsWith(\"/schema\") || uri.contains(\"/schema/\")) {\n          restletPath = true;\n        }\n\n        if (restletPath) {\n          return parseQueryString(req.getQueryString());\n        }\n\n        if (\"PUT\".equals(method) || \"DELETE\".equals(method)) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported method: \" + method + \" for request \" + req);\n        }\n      }\n\n\n      if (formdata.isFormData(req)) {\n        String userAgent = req.getHeader(\"User-Agent\");\n        boolean isCurl = userAgent != null && userAgent.startsWith(\"curl/\");\n\n        FastInputStream input = FastInputStream.wrap(req.getInputStream());\n\n        if (isCurl) {\n          SolrParams params = autodetect(req, streams, input);\n          if (params != null) return params;\n        }\n\n        return formdata.parseParamsAndFillStreams(req, streams, input);\n      }\n\n      if (MultipartRequestParser.isMultipart(req)) {\n        return multipart.parseParamsAndFillStreams(req, streams);\n      }\n\n      // some other content-type (json, XML, csv, etc)\n      return raw.parseParamsAndFillStreams(req, streams);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d9ecbe4fecfad4689ea50a5ece2b815854aacdf"],"ac5c4637fb06d45efdeaf0f2d262b133ab2de181":["f18dcd5b6e136616bf9b6f9a22a17d26b74b202b"],"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["0d17ec5164debc23076db7fd11d0331f201583b5","26ab43e1a461b9c1d9db0739ee0eb5caed8bc521"],"cff9a1253bcbc24e064decfe816f4c724029de8a":["ac5c4637fb06d45efdeaf0f2d262b133ab2de181"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43"],"ac35531329b1809368fb0780bcf1e72d0add3c21":["28288370235ed02234a64753cdbf0c6ec096304a"],"8476949555f799dff381770c01cfad051a264487":["ac35531329b1809368fb0780bcf1e72d0add3c21"],"28288370235ed02234a64753cdbf0c6ec096304a":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","a32f7ef7108695fb3ba9ee6045d6fba14104c40d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0d196318cb8ce39ae32035f290cd1397833e472","0d17ec5164debc23076db7fd11d0331f201583b5"],"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["cff9a1253bcbc24e064decfe816f4c724029de8a"],"0d17ec5164debc23076db7fd11d0331f201583b5":["a0d196318cb8ce39ae32035f290cd1397833e472"],"4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43":["8d9ecbe4fecfad4689ea50a5ece2b815854aacdf"],"a0d196318cb8ce39ae32035f290cd1397833e472":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"8d9ecbe4fecfad4689ea50a5ece2b815854aacdf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f18dcd5b6e136616bf9b6f9a22a17d26b74b202b":["8476949555f799dff381770c01cfad051a264487"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["8d9ecbe4fecfad4689ea50a5ece2b815854aacdf","4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43"],"26ab43e1a461b9c1d9db0739ee0eb5caed8bc521":["0d17ec5164debc23076db7fd11d0331f201583b5"],"a32f7ef7108695fb3ba9ee6045d6fba14104c40d":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","a32f7ef7108695fb3ba9ee6045d6fba14104c40d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"],"b0b597c65628ca9e73913a07e81691f8229bae35":["ac35531329b1809368fb0780bcf1e72d0add3c21","8476949555f799dff381770c01cfad051a264487"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"ac5c4637fb06d45efdeaf0f2d262b133ab2de181":["cff9a1253bcbc24e064decfe816f4c724029de8a"],"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["28288370235ed02234a64753cdbf0c6ec096304a","a32f7ef7108695fb3ba9ee6045d6fba14104c40d","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"cff9a1253bcbc24e064decfe816f4c724029de8a":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a0d196318cb8ce39ae32035f290cd1397833e472"],"ac35531329b1809368fb0780bcf1e72d0add3c21":["8476949555f799dff381770c01cfad051a264487","b0b597c65628ca9e73913a07e81691f8229bae35"],"8476949555f799dff381770c01cfad051a264487":["f18dcd5b6e136616bf9b6f9a22a17d26b74b202b","b0b597c65628ca9e73913a07e81691f8229bae35"],"28288370235ed02234a64753cdbf0c6ec096304a":["ac35531329b1809368fb0780bcf1e72d0add3c21"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d17ec5164debc23076db7fd11d0331f201583b5":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","26ab43e1a461b9c1d9db0739ee0eb5caed8bc521"],"4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","8d9ecbe4fecfad4689ea50a5ece2b815854aacdf"],"8d9ecbe4fecfad4689ea50a5ece2b815854aacdf":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","4a5c97e98e8e65bb8f85fe1a1a6418dafc568b43","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0d196318cb8ce39ae32035f290cd1397833e472":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d17ec5164debc23076db7fd11d0331f201583b5"],"f18dcd5b6e136616bf9b6f9a22a17d26b74b202b":["ac5c4637fb06d45efdeaf0f2d262b133ab2de181"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"26ab43e1a461b9c1d9db0739ee0eb5caed8bc521":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"a32f7ef7108695fb3ba9ee6045d6fba14104c40d":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","74f45af4339b0daf7a95c820ab88c1aea74fbce0","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}