{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(long,TermsEnum,TermsEnum).mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(long,TermsEnum,TermsEnum).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#assertEquals(long,TermsEnum,TermsEnum).mjava","sourceNew":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(long,TermsEnum,TermsEnum).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#assertEquals(long,TermsEnum,TermsEnum).mjava","sourceNew":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(long,TermsEnum,TermsEnum).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#assertEquals(long,TermsEnum,TermsEnum).mjava","sourceNew":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efcf27cd5ca23def8376b4c321970c14dd71623","date":1400662679,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(long,TermsEnum,Bits,TermsEnum,Bits).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(long,TermsEnum,TermsEnum).mjava","sourceNew":"  private void assertEquals(long numOrds, TermsEnum expected, Bits liveOrdsExpected, TermsEnum actual, Bits liveOrdsActual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = next(expected, liveOrdsExpected)) != null) {\n      assertEquals(ref, next(actual, liveOrdsActual));\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(next(actual, liveOrdsActual));\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      if (liveOrdsExpected.get((int) i) == false) {\n        continue;\n      }\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      if (liveOrdsExpected.get((int) i) == false) {\n        continue;\n      }\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      if (liveOrdsExpected.get((int) randomOrd) == false) {\n        continue;\n      }\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      if (liveOrdsExpected.get((int) i) == false) {\n        continue;\n      }\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = seekCeil(expected, target, liveOrdsExpected);\n      assertEquals(expectedStatus, seekCeil(actual, target, liveOrdsActual));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45a621dd071a902e1fd30367200d7bbbea037706","date":1400686915,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(long,TermsEnum,TermsEnum).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(long,TermsEnum,Bits,TermsEnum,Bits).mjava","sourceNew":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(long numOrds, TermsEnum expected, Bits liveOrdsExpected, TermsEnum actual, Bits liveOrdsActual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = next(expected, liveOrdsExpected)) != null) {\n      assertEquals(ref, next(actual, liveOrdsActual));\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(next(actual, liveOrdsActual));\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      if (liveOrdsExpected.get((int) i) == false) {\n        continue;\n      }\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      if (liveOrdsExpected.get((int) i) == false) {\n        continue;\n      }\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      if (liveOrdsExpected.get((int) randomOrd) == false) {\n        continue;\n      }\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      if (liveOrdsExpected.get((int) i) == false) {\n        continue;\n      }\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = seekCeil(expected, target, liveOrdsExpected);\n      assertEquals(expectedStatus, seekCeil(actual, target, liveOrdsActual));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheVsDocValues#assertEquals(long,TermsEnum,TermsEnum).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(long,TermsEnum,TermsEnum).mjava","sourceNew":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheVsDocValues#assertEquals(long,TermsEnum,TermsEnum).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(long,TermsEnum,TermsEnum).mjava","sourceNew":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheVsDocValues#assertEquals(long,TermsEnum,TermsEnum).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(long,TermsEnum,TermsEnum).mjava","sourceNew":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheVsDocValues#assertEquals(long,TermsEnum,TermsEnum).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(long,TermsEnum,TermsEnum).mjava","sourceNew":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"45a621dd071a902e1fd30367200d7bbbea037706":["0efcf27cd5ca23def8376b4c321970c14dd71623"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["93dd449115a9247533e44bab47e8429e5dccbc6d","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"0efcf27cd5ca23def8376b4c321970c14dd71623":["56572ec06f1407c066d6b7399413178b33176cd8"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["93dd449115a9247533e44bab47e8429e5dccbc6d","0e121d43b5a10f2df530f406f935102656e9c4e8"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["93dd449115a9247533e44bab47e8429e5dccbc6d","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"45a621dd071a902e1fd30367200d7bbbea037706":[],"0efcf27cd5ca23def8376b4c321970c14dd71623":["45a621dd071a902e1fd30367200d7bbbea037706"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"56572ec06f1407c066d6b7399413178b33176cd8":["0efcf27cd5ca23def8376b4c321970c14dd71623"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["45a621dd071a902e1fd30367200d7bbbea037706","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}