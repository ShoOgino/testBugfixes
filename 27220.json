{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws Exception {\n    RAMDirectory d = new MockRAMDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    \n  }\n\n","sourceOld":"  public void testTermVectors() throws Exception {\n    RAMDirectory d = new MockRAMDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws Exception {\n    RAMDirectory d = new MockRAMDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    \n  }\n\n","sourceOld":"  public void testTermVectors() throws Exception {\n    RAMDirectory d = new MockRAMDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws Exception {\n    RAMDirectory d = new MockRAMDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    \n  }\n\n","sourceOld":"  public void testTermVectors() throws Exception {\n    RAMDirectory d = new MockRAMDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws Exception {\n    RAMDirectory d = new MockRAMDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    \n  }\n\n","sourceOld":"  public void testTermVectors() throws Exception {\n    RAMDirectory d = new MockRAMDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws Exception {\n    MockRAMDirectory d = new MockRAMDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    \n  }\n\n","sourceOld":"  public void testTermVectors() throws Exception {\n    RAMDirectory d = new MockRAMDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws Exception {\n    MockRAMDirectory d = newDirectory(random);\n    // set up writer\n    IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermVectors() throws Exception {\n    MockRAMDirectory d = new MockRAMDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory(random);\n    // set up writer\n    IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermVectors() throws Exception {\n    MockRAMDirectory d = newDirectory(random);\n    // set up writer\n    IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory(random);\n    // set up writer\n    IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermVectors() throws Exception {\n    RAMDirectory d = new MockRAMDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy())\n    );\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy())\n    );\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy())\n    );\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy())\n    );\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy())\n    );\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy())\n    );\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n    customType5.setStoreTermVectors(true);\n    FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n    customType6.setStoreTermVectors(true);\n    customType6.setStoreTermVectorOffsets(true);\n    FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n    customType7.setStoreTermVectors(true);\n    customType7.setStoreTermVectorPositions(true);\n    FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n    customType8.setStoreTermVectors(true);\n    customType8.setStoreTermVectorOffsets(true);\n    customType8.setStoreTermVectorPositions(true);\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",TextField.TYPE_STORED,\"one two two three three three\"));\n        doc.add(new Field(\"termvector\",customType5,\"one two two three three three\"));\n        doc.add(new Field(\"tvoffset\",customType6,\"one two two three three three\"));\n        doc.add(new Field(\"tvposition\",customType7,\"one two two three three three\"));\n        doc.add(new Field(\"tvpositionoffset\",customType8, \"one two two three three three\"));\n        \n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy())\n    );\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy())\n    );\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n    customType5.setStoreTermVectors(true);\n    FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n    customType6.setStoreTermVectors(true);\n    customType6.setStoreTermVectorOffsets(true);\n    FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n    customType7.setStoreTermVectors(true);\n    customType7.setStoreTermVectorPositions(true);\n    FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n    customType8.setStoreTermVectors(true);\n    customType8.setStoreTermVectorOffsets(true);\n    customType8.setStoreTermVectorPositions(true);\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\", \"one two two three three three\", TextField.TYPE_STORED));\n        doc.add(new Field(\"termvector\", \"one two two three three three\", customType5));\n        doc.add(new Field(\"tvoffset\", \"one two two three three three\", customType6));\n        doc.add(new Field(\"tvposition\", \"one two two three three three\", customType7));\n        doc.add(new Field(\"tvpositionoffset\", \"one two two three three three\", customType8));\n        \n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy())\n    );\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n    customType5.setStoreTermVectors(true);\n    FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n    customType6.setStoreTermVectors(true);\n    customType6.setStoreTermVectorOffsets(true);\n    FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n    customType7.setStoreTermVectors(true);\n    customType7.setStoreTermVectorPositions(true);\n    FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n    customType8.setStoreTermVectors(true);\n    customType8.setStoreTermVectorOffsets(true);\n    customType8.setStoreTermVectorPositions(true);\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",TextField.TYPE_STORED,\"one two two three three three\"));\n        doc.add(new Field(\"termvector\",customType5,\"one two two three three three\"));\n        doc.add(new Field(\"tvoffset\",customType6,\"one two two three three three\"));\n        doc.add(new Field(\"tvposition\",customType7,\"one two two three three three\"));\n        doc.add(new Field(\"tvpositionoffset\",customType8, \"one two two three three three\"));\n        \n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy())\n    );\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n    customType5.setStoreTermVectors(true);\n    FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n    customType6.setStoreTermVectors(true);\n    customType6.setStoreTermVectorOffsets(true);\n    FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n    customType7.setStoreTermVectors(true);\n    customType7.setStoreTermVectorPositions(true);\n    FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n    customType8.setStoreTermVectors(true);\n    customType8.setStoreTermVectorOffsets(true);\n    customType8.setStoreTermVectorPositions(true);\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\", \"one two two three three three\", TextField.TYPE_STORED));\n        doc.add(new Field(\"termvector\", \"one two two three three three\", customType5));\n        doc.add(new Field(\"tvoffset\", \"one two two three three three\", customType6));\n        doc.add(new Field(\"tvposition\", \"one two two three three three\", customType7));\n        doc.add(new Field(\"tvpositionoffset\", \"one two two three three three\", customType8));\n        \n        writer.addDocument(doc);\n    }\n    writer.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy())\n    );\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n    customType5.setStoreTermVectors(true);\n    FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n    customType6.setStoreTermVectors(true);\n    customType6.setStoreTermVectorOffsets(true);\n    FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n    customType7.setStoreTermVectors(true);\n    customType7.setStoreTermVectorPositions(true);\n    FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n    customType8.setStoreTermVectors(true);\n    customType8.setStoreTermVectorOffsets(true);\n    customType8.setStoreTermVectorPositions(true);\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\", \"one two two three three three\", TextField.TYPE_STORED));\n        doc.add(new Field(\"termvector\", \"one two two three three three\", customType5));\n        doc.add(new Field(\"tvoffset\", \"one two two three three three\", customType6));\n        doc.add(new Field(\"tvposition\", \"one two two three three three\", customType7));\n        doc.add(new Field(\"tvpositionoffset\", \"one two two three three three\", customType8));\n        \n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map<String,SortedSet<TermVectorEntry>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set<TermVectorEntry> set = map.get(\"termvector\");\n    for (Iterator<TermVectorEntry> iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry =  iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      if (VERBOSE) System.out.println(\"Entry: \" + entry);\n    }\n    reader.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy())\n    );\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n    customType5.setStoreTermVectors(true);\n    FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n    customType6.setStoreTermVectors(true);\n    customType6.setStoreTermVectorOffsets(true);\n    FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n    customType7.setStoreTermVectors(true);\n    customType7.setStoreTermVectorPositions(true);\n    FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n    customType8.setStoreTermVectors(true);\n    customType8.setStoreTermVectorOffsets(true);\n    customType8.setStoreTermVectorPositions(true);\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\", \"one two two three three three\", TextField.TYPE_STORED));\n        doc.add(new Field(\"termvector\", \"one two two three three three\", customType5));\n        doc.add(new Field(\"tvoffset\", \"one two two three three three\", customType6));\n        doc.add(new Field(\"tvposition\", \"one two two three three three\", customType7));\n        doc.add(new Field(\"tvpositionoffset\", \"one two two three three three\", customType8));\n        \n        writer.addDocument(doc);\n    }\n    writer.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testTermVectors() throws Exception {\n    Directory d = newDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy())\n    );\n    // want to get some more segments here\n    // new termvector fields\n    int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n    FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n    customType5.setStoreTermVectors(true);\n    FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n    customType6.setStoreTermVectors(true);\n    customType6.setStoreTermVectorOffsets(true);\n    FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n    customType7.setStoreTermVectors(true);\n    customType7.setStoreTermVectorPositions(true);\n    FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n    customType8.setStoreTermVectors(true);\n    customType8.setStoreTermVectorOffsets(true);\n    customType8.setStoreTermVectorPositions(true);\n    for (int i = 0; i < 5 * mergeFactor; i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\", \"one two two three three three\", TextField.TYPE_STORED));\n        doc.add(new Field(\"termvector\", \"one two two three three three\", customType5));\n        doc.add(new Field(\"tvoffset\", \"one two two three three three\", customType6));\n        doc.add(new Field(\"tvposition\", \"one two two three three three\", customType7));\n        doc.add(new Field(\"tvpositionoffset\", \"one two two three three three\", customType8));\n        \n        writer.addDocument(doc);\n    }\n    writer.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3cc749c053615f5871f3b95715fe292f34e70a53":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["3cc749c053615f5871f3b95715fe292f34e70a53"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}