{"path":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\");\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n\n      zkClient.makePath(\"/collections/collection99/shards\");\n\n      zkClient.makePath(\"collections/collection99/config=collection1\");\n\n      zkClient.makePath(\"collections/collection99/config=collection3\");\n      \n      zkClient.makePath(\"/collections/collection97/shards\");\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\");\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n\n      zkClient.makePath(\"/collections/collection99/shards\");\n\n      zkClient.makePath(\"collections/collection99/config=collection1\");\n\n      zkClient.makePath(\"collections/collection99/config=collection3\");\n      \n      zkClient.makePath(\"/collections/collection97/shards\");\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\");\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n\n      zkClient.makePath(\"/collections/collection99/shards\");\n\n      zkClient.makePath(\"collections/collection99/config=collection1\");\n\n      zkClient.makePath(\"collections/collection99/config=collection3\");\n      \n      zkClient.makePath(\"/collections/collection97/shards\");\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\");\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n\n      zkClient.makePath(\"/collections/collection99/shards\");\n\n      zkClient.makePath(\"collections/collection99/config=collection1\");\n\n      zkClient.makePath(\"collections/collection99/config=collection3\");\n      \n      zkClient.makePath(\"/collections/collection97/shards\");\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\");\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n\n      zkClient.makePath(\"/collections/collection99/shards\");\n\n      zkClient.makePath(\"collections/collection99/config=collection1\");\n\n      zkClient.makePath(\"collections/collection99/config=collection3\");\n      \n      zkClient.makePath(\"/collections/collection97/shards\");\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\");\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n\n      zkClient.makePath(\"/collections/collection99/shards\");\n\n      zkClient.makePath(\"collections/collection99/config=collection1\");\n\n      zkClient.makePath(\"collections/collection99/config=collection3\");\n      \n      zkClient.makePath(\"/collections/collection97/shards\");\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\");\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n\n      zkClient.makePath(\"/collections/collection99/shards\");\n\n      zkClient.makePath(\"collections/collection99/config=collection1\");\n\n      zkClient.makePath(\"collections/collection99/config=collection3\");\n      \n      zkClient.makePath(\"/collections/collection97/shards\");\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\");\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n\n      zkClient.makePath(\"/collections/collection99/shards\");\n\n      zkClient.makePath(\"collections/collection99/config=collection1\");\n\n      zkClient.makePath(\"collections/collection99/config=collection3\");\n      \n      zkClient.makePath(\"/collections/collection97/shards\");\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\");\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n\n      zkClient.makePath(\"/collections/collection99/shards\");\n\n      zkClient.makePath(\"collections/collection99/config=collection1\");\n\n      zkClient.makePath(\"collections/collection99/config=collection3\");\n      \n      zkClient.makePath(\"/collections/collection97/shards\");\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54330a409c8e064a29559958c4bbdbfed9058af0","date":1346669086,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      final CountDownLatch latch = new CountDownLatch(1);\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      final CountDownLatch latch = new CountDownLatch(1);\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      final CountDownLatch latch = new CountDownLatch(1);\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      final CountDownLatch latch = new CountDownLatch(1);\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      final CountDownLatch latch = new CountDownLatch(1);\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      final CountDownLatch latch = new CountDownLatch(1);\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      final CountDownLatch latch = new CountDownLatch(1);\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      final CountDownLatch latch = new CountDownLatch(1);\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      final CountDownLatch latch = new CountDownLatch(1);\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      final CountDownLatch latch = new CountDownLatch(1);\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      final CountDownLatch latch = new CountDownLatch(1);\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e9ce820cd3ed9efb959c181daaafd22f0c70143","date":1396201051,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      final CountDownLatch latch = new CountDownLatch(1);\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      final CountDownLatch latch = new CountDownLatch(1);\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      final CountDownLatch latch = new CountDownLatch(1);\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      final CountDownLatch latch = new CountDownLatch(1);\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8650ae4e5d74a324411f8b7dd6201774f2b6fb2e","date":1406603075,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    try (ZkConnection conn = new ZkConnection ()) {\n      final SolrZkClient zkClient = conn.getClient();\n      final AtomicInteger cnt = new AtomicInteger();\n      final CountDownLatch latch = new CountDownLatch(1);\n\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      final CountDownLatch latch = new CountDownLatch(1);\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    try (ZkConnection conn = new ZkConnection ()) {\n      final SolrZkClient zkClient = conn.getClient();\n      final AtomicInteger cnt = new AtomicInteger();\n      final CountDownLatch latch = new CountDownLatch(1);\n\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException | InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    try (ZkConnection conn = new ZkConnection ()) {\n      final SolrZkClient zkClient = conn.getClient();\n      final AtomicInteger cnt = new AtomicInteger();\n      final CountDownLatch latch = new CountDownLatch(1);\n\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82fbc9a4af34a68002cd5cf8bbac6b604aeef413","date":1474634253,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    try (ZkConnection conn = new ZkConnection ()) {\n      final SolrZkClient zkClient = conn.getClient();\n      final AtomicInteger cnt = new AtomicInteger();\n      final CountDownLatch latch = new CountDownLatch(1);\n\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException | InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    try (ZkConnection conn = new ZkConnection ()) {\n      final SolrZkClient zkClient = conn.getClient();\n      final AtomicInteger cnt = new AtomicInteger();\n      final CountDownLatch latch = new CountDownLatch(1);\n\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException | InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    try (ZkConnection conn = new ZkConnection ()) {\n      final SolrZkClient zkClient = conn.getClient();\n      final AtomicInteger cnt = new AtomicInteger();\n      final CountDownLatch latch = new CountDownLatch(1);\n\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException | InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    try (ZkConnection conn = new ZkConnection ()) {\n      final SolrZkClient zkClient = conn.getClient();\n      final AtomicInteger cnt = new AtomicInteger();\n      final CountDownLatch latch = new CountDownLatch(1);\n\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException | InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    try (ZkConnection conn = new ZkConnection ()) {\n      final SolrZkClient zkClient = conn.getClient();\n      final AtomicInteger cnt = new AtomicInteger();\n      final CountDownLatch latch = new CountDownLatch(1);\n\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException | InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    try (ZkConnection conn = new ZkConnection ()) {\n      final SolrZkClient zkClient = conn.getClient();\n      final AtomicInteger cnt = new AtomicInteger();\n      final CountDownLatch latch = new CountDownLatch(1);\n\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException | InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  @SuppressWarnings({\"try\"})\n  public void testWatchChildren() throws Exception {\n    try (ZkConnection conn = new ZkConnection ()) {\n      final SolrZkClient zkClient = conn.getClient();\n      final AtomicInteger cnt = new AtomicInteger();\n      final CountDownLatch latch = new CountDownLatch(1);\n\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException | InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    try (ZkConnection conn = new ZkConnection ()) {\n      final SolrZkClient zkClient = conn.getClient();\n      final AtomicInteger cnt = new AtomicInteger();\n      final CountDownLatch latch = new CountDownLatch(1);\n\n      zkClient.makePath(\"/collections\", true);\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        @Override\n        public void process(WatchedEvent event) {\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this, true);\n            latch.countDown();\n          } catch (KeeperException | InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }, true);\n\n      zkClient.makePath(\"/collections/collection99/shards\", true);\n      latch.await(); //wait until watch has been re-created\n\n      zkClient.makePath(\"collections/collection99/config=collection1\", true);\n\n      zkClient.makePath(\"collections/collection99/config=collection3\", true);\n      \n      zkClient.makePath(\"/collections/collection97/shards\", true);\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["d9405f486872f1e416304dfe389741f4ee2f8a4d","7530de27b87b961b51f01bd1299b7004d46e8823"],"c6e1dc1bb4254226c8d7151b596cc1be40671751":["8650ae4e5d74a324411f8b7dd6201774f2b6fb2e"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["7530de27b87b961b51f01bd1299b7004d46e8823"],"82fbc9a4af34a68002cd5cf8bbac6b604aeef413":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["7530de27b87b961b51f01bd1299b7004d46e8823","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["54330a409c8e064a29559958c4bbdbfed9058af0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c6e1dc1bb4254226c8d7151b596cc1be40671751","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"8650ae4e5d74a324411f8b7dd6201774f2b6fb2e":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c6e1dc1bb4254226c8d7151b596cc1be40671751","82fbc9a4af34a68002cd5cf8bbac6b604aeef413"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2126b84bd093fa3d921582a109a0ee578c28126":["54330a409c8e064a29559958c4bbdbfed9058af0","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"54330a409c8e064a29559958c4bbdbfed9058af0":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c6e1dc1bb4254226c8d7151b596cc1be40671751":["82fbc9a4af34a68002cd5cf8bbac6b604aeef413","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"82fbc9a4af34a68002cd5cf8bbac6b604aeef413":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["8650ae4e5d74a324411f8b7dd6201774f2b6fb2e"],"c26f00b574427b55127e869b935845554afde1fa":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f2126b84bd093fa3d921582a109a0ee578c28126","7530de27b87b961b51f01bd1299b7004d46e8823"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8650ae4e5d74a324411f8b7dd6201774f2b6fb2e":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","54330a409c8e064a29559958c4bbdbfed9058af0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bb1f22cfa77230b5f05b7784feae5367f6bbb488","2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"54330a409c8e064a29559958c4bbdbfed9058af0":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0d22ac6a4146774c1bc8400160fc0b6150294e92","a258fbb26824fd104ed795e5d9033d2d040049ee","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}