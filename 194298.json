{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long).mjava","commits":[{"id":"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7","date":1456959208,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[]).mjava","sourceNew":"  /** Called by consumers that have their own on-disk format for the index (e.g. SimpleText) */\n  protected BKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                      byte[] minPackedValue, byte[] maxPackedValue, long pointCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","sourceOld":"  /** Called by consumers that have their own on-disk format for the index (e.g. SimpleText) */\n  protected BKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                      byte[] minPackedValue, byte[] maxPackedValue) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251c5b33f0a2c8988550b63c78ed22b0e84524e5","date":1456961997,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#BKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long).mjava","sourceNew":"  /** Called by consumers that have their own on-disk format for the index (e.g. SimpleText) */\n  protected BKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                      byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","sourceOld":"  /** Called by consumers that have their own on-disk format for the index (e.g. SimpleText) */\n  protected BKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                      byte[] minPackedValue, byte[] maxPackedValue, long pointCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"251c5b33f0a2c8988550b63c78ed22b0e84524e5":["879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"251c5b33f0a2c8988550b63c78ed22b0e84524e5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7":["251c5b33f0a2c8988550b63c78ed22b0e84524e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["251c5b33f0a2c8988550b63c78ed22b0e84524e5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}