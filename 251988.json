{"path":"lucene/core/src/test/org/apache/lucene/geo/TestXYRectangle2D#testRandomTriangles().mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestXYRectangle2D#testRandomTriangles().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/geo/TestXYRectangle2D#testRandomTriangles().mjava","sourceNew":"  public void testRandomTriangles() {\n    XYRectangle rectangle = ShapeTestUtil.nextBox();\n    Component2D rectangle2D = XYRectangle2D.create(rectangle);\n    for (int i =0; i < 100; i++) {\n      float ax = (float) ShapeTestUtil.nextDouble();\n      float ay = (float) ShapeTestUtil.nextDouble();\n      float bx = (float) ShapeTestUtil.nextDouble();\n      float by = (float) ShapeTestUtil.nextDouble();\n      float cx = (float) ShapeTestUtil.nextDouble();\n      float cy = (float) ShapeTestUtil.nextDouble();\n\n      float tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      float tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      float tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      float tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n\n      PointValues.Relation r = rectangle2D.relate(tMinX, tMaxX, tMinY, tMaxY);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_OUTSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n      }\n      else if (r == PointValues.Relation.CELL_INSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_INSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomTriangles() {\n    XYRectangle rectangle = ShapeTestUtil.nextBox();\n    Component2D rectangle2D = XYRectangle2D.create(rectangle);\n    for (int i =0; i < 100; i++) {\n      float ax = (float) ShapeTestUtil.nextDouble();\n      float ay = (float) ShapeTestUtil.nextDouble();\n      float bx = (float) ShapeTestUtil.nextDouble();\n      float by = (float) ShapeTestUtil.nextDouble();\n      float cx = (float) ShapeTestUtil.nextDouble();\n      float cy = (float) ShapeTestUtil.nextDouble();\n\n      float tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      float tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      float tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      float tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n\n      PointValues.Relation r = rectangle2D.relate(tMinX, tMaxX, tMinY, tMaxY);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_OUTSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n      }\n      else if (r == PointValues.Relation.CELL_INSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_INSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"617d6d4150e0fb2acef8980ce51e3b8e628fb200","date":1580326292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestXYRectangle2D#testRandomTriangles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestXYRectangle2D#testRandomTriangles().mjava","sourceNew":"  public void testRandomTriangles() {\n    Random random = random();\n    XYRectangle rectangle = ShapeTestUtil.nextBox(random);\n    Component2D rectangle2D = XYRectangle2D.create(rectangle);\n    for (int i =0; i < 100; i++) {\n      float ax = (float) ShapeTestUtil.nextDouble(random);\n      float ay = (float) ShapeTestUtil.nextDouble(random);\n      float bx = (float) ShapeTestUtil.nextDouble(random);\n      float by = (float) ShapeTestUtil.nextDouble(random);\n      float cx = (float) ShapeTestUtil.nextDouble(random);\n      float cy = (float) ShapeTestUtil.nextDouble(random);\n\n      float tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      float tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      float tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      float tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n\n      PointValues.Relation r = rectangle2D.relate(tMinX, tMaxX, tMinY, tMaxY);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_OUTSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n      }\n      else if (r == PointValues.Relation.CELL_INSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_INSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomTriangles() {\n    XYRectangle rectangle = ShapeTestUtil.nextBox();\n    Component2D rectangle2D = XYRectangle2D.create(rectangle);\n    for (int i =0; i < 100; i++) {\n      float ax = (float) ShapeTestUtil.nextDouble();\n      float ay = (float) ShapeTestUtil.nextDouble();\n      float bx = (float) ShapeTestUtil.nextDouble();\n      float by = (float) ShapeTestUtil.nextDouble();\n      float cx = (float) ShapeTestUtil.nextDouble();\n      float cy = (float) ShapeTestUtil.nextDouble();\n\n      float tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      float tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      float tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      float tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n\n      PointValues.Relation r = rectangle2D.relate(tMinX, tMaxX, tMinY, tMaxY);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_OUTSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n      }\n      else if (r == PointValues.Relation.CELL_INSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_INSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4d14322963cbbe599706c6c272d5cba0817ea32","date":1581676750,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestXYRectangle2D#testRandomTriangles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestXYRectangle2D#testRandomTriangles().mjava","sourceNew":"  public void testRandomTriangles() {\n    Random random = random();\n    XYRectangle rectangle = ShapeTestUtil.nextBox(random);\n    Component2D rectangle2D = XYRectangle2D.create(rectangle);\n    for (int i =0; i < 100; i++) {\n      float ax = ShapeTestUtil.nextFloat(random);\n      float ay = ShapeTestUtil.nextFloat(random);\n      float bx = ShapeTestUtil.nextFloat(random);\n      float by = ShapeTestUtil.nextFloat(random);\n      float cx = ShapeTestUtil.nextFloat(random);\n      float cy = ShapeTestUtil.nextFloat(random);\n\n      float tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      float tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      float tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      float tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n\n      PointValues.Relation r = rectangle2D.relate(tMinX, tMaxX, tMinY, tMaxY);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_OUTSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n      }\n      else if (r == PointValues.Relation.CELL_INSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_INSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomTriangles() {\n    Random random = random();\n    XYRectangle rectangle = ShapeTestUtil.nextBox(random);\n    Component2D rectangle2D = XYRectangle2D.create(rectangle);\n    for (int i =0; i < 100; i++) {\n      float ax = (float) ShapeTestUtil.nextDouble(random);\n      float ay = (float) ShapeTestUtil.nextDouble(random);\n      float bx = (float) ShapeTestUtil.nextDouble(random);\n      float by = (float) ShapeTestUtil.nextDouble(random);\n      float cx = (float) ShapeTestUtil.nextDouble(random);\n      float cy = (float) ShapeTestUtil.nextDouble(random);\n\n      float tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      float tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      float tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      float tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n\n      PointValues.Relation r = rectangle2D.relate(tMinX, tMaxX, tMinY, tMaxY);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_OUTSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n      }\n      else if (r == PointValues.Relation.CELL_INSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_INSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f66eaefcdea9f8ffcf9508f78556159d61b8e3df","date":1581695213,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestXYRectangle2D#testRandomTriangles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestXYRectangle2D#testRandomTriangles().mjava","sourceNew":"  public void testRandomTriangles() {\n    Random random = random();\n    XYRectangle rectangle = ShapeTestUtil.nextBox(random);\n    Component2D rectangle2D = XYRectangle2D.create(rectangle);\n    for (int i =0; i < 100; i++) {\n      float ax = ShapeTestUtil.nextFloat(random);\n      float ay = ShapeTestUtil.nextFloat(random);\n      float bx = ShapeTestUtil.nextFloat(random);\n      float by = ShapeTestUtil.nextFloat(random);\n      float cx = ShapeTestUtil.nextFloat(random);\n      float cy = ShapeTestUtil.nextFloat(random);\n\n      float tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      float tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      float tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      float tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n\n      PointValues.Relation r = rectangle2D.relate(tMinX, tMaxX, tMinY, tMaxY);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_OUTSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n      }\n      else if (r == PointValues.Relation.CELL_INSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_INSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomTriangles() {\n    Random random = random();\n    XYRectangle rectangle = ShapeTestUtil.nextBox(random);\n    Component2D rectangle2D = XYRectangle2D.create(rectangle);\n    for (int i =0; i < 100; i++) {\n      float ax = (float) ShapeTestUtil.nextDouble(random);\n      float ay = (float) ShapeTestUtil.nextDouble(random);\n      float bx = (float) ShapeTestUtil.nextDouble(random);\n      float by = (float) ShapeTestUtil.nextDouble(random);\n      float cx = (float) ShapeTestUtil.nextDouble(random);\n      float cy = (float) ShapeTestUtil.nextDouble(random);\n\n      float tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      float tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      float tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      float tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n\n      PointValues.Relation r = rectangle2D.relate(tMinX, tMaxX, tMinY, tMaxY);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_OUTSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n      }\n      else if (r == PointValues.Relation.CELL_INSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_INSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56c42be8d779573d0c86ba775117e17360dbf5a6","date":1583217404,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestXYRectangle2D#testRandomTriangles().mjava","sourceNew":null,"sourceOld":"  public void testRandomTriangles() {\n    Random random = random();\n    XYRectangle rectangle = ShapeTestUtil.nextBox(random);\n    Component2D rectangle2D = XYRectangle2D.create(rectangle);\n    for (int i =0; i < 100; i++) {\n      float ax = ShapeTestUtil.nextFloat(random);\n      float ay = ShapeTestUtil.nextFloat(random);\n      float bx = ShapeTestUtil.nextFloat(random);\n      float by = ShapeTestUtil.nextFloat(random);\n      float cx = ShapeTestUtil.nextFloat(random);\n      float cy = ShapeTestUtil.nextFloat(random);\n\n      float tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      float tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      float tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      float tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n\n      PointValues.Relation r = rectangle2D.relate(tMinX, tMaxX, tMinY, tMaxY);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_OUTSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n      }\n      else if (r == PointValues.Relation.CELL_INSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_INSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df"],"f66eaefcdea9f8ffcf9508f78556159d61b8e3df":["617d6d4150e0fb2acef8980ce51e3b8e628fb200","a4d14322963cbbe599706c6c272d5cba0817ea32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56c42be8d779573d0c86ba775117e17360dbf5a6"],"a4d14322963cbbe599706c6c272d5cba0817ea32":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"]},"commit2Childs":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f66eaefcdea9f8ffcf9508f78556159d61b8e3df":["56c42be8d779573d0c86ba775117e17360dbf5a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df","a4d14322963cbbe599706c6c272d5cba0817ea32"],"a4d14322963cbbe599706c6c272d5cba0817ea32":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}