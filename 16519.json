{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#verify(byte[][][],int[],int,int,int).mjava","commits":[{"id":"b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7","date":1482745036,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#verify(byte[][][],int[],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void verify(byte[][][] docValues, int[] docIDs, int numDims, int numBytesPerDim,\n      int maxPointsInLeafNode) throws Exception {\n    try (Directory dir = getDirectory(docValues.length)) {\n      double maxMB = (float) 3.0 + (3*random().nextDouble());\n      verify(dir, docValues, docIDs, numDims, numBytesPerDim, maxPointsInLeafNode, maxMB);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#verify(byte[][][],int[],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void verify(byte[][][] docValues, int[] docIDs, int numDims, int numBytesPerDim,\n      int maxPointsInLeafNode) throws Exception {\n    try (Directory dir = getDirectory(docValues.length)) {\n      double maxMB = (float) 3.0 + (3*random().nextDouble());\n      verify(dir, docValues, docIDs, numDims, numBytesPerDim, maxPointsInLeafNode, maxMB);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#verify(byte[][][],int[],int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#verify(byte[][][],int[],int,int,int).mjava","sourceNew":"  /** docIDs can be null, for the single valued case, else it maps value to docID */\n  private void verify(byte[][][] docValues, int[] docIDs, int numDataDims, int numIndexDims, int numBytesPerDim) throws Exception {\n    verify(docValues, docIDs, numDataDims, numIndexDims, numBytesPerDim, TestUtil.nextInt(random(), 50, 1000));\n  }\n\n","sourceOld":"  private void verify(byte[][][] docValues, int[] docIDs, int numDims, int numBytesPerDim,\n      int maxPointsInLeafNode) throws Exception {\n    try (Directory dir = getDirectory(docValues.length)) {\n      double maxMB = (float) 3.0 + (3*random().nextDouble());\n      verify(dir, docValues, docIDs, numDims, numBytesPerDim, maxPointsInLeafNode, maxMB);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f6652c943595e92c187ee904c382863013eae28f":["b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f6652c943595e92c187ee904c382863013eae28f"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7"]},"commit2Childs":{"f6652c943595e92c187ee904c382863013eae28f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7":["f6652c943595e92c187ee904c382863013eae28f","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}