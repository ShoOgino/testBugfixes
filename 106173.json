{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary_operator().mjava","commits":[{"id":"f18d4e1cdc7330101ca433af5e8564dfd894f2bf","date":1379041877,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary_operator().mjava","pathOld":"/dev/null","sourceNew":"    // $ANTLR start \"unary_operator\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:304:1: unary_operator : ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT );\n    public final JavascriptParser.unary_operator_return unary_operator() throws RecognitionException {\n        JavascriptParser.unary_operator_return retval = new JavascriptParser.unary_operator_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token AT_SUBTRACT43=null;\n        Token AT_BIT_NOT44=null;\n        Token AT_BOOL_NOT45=null;\n\n        CommonTree AT_SUBTRACT43_tree=null;\n        CommonTree AT_BIT_NOT44_tree=null;\n        CommonTree AT_BOOL_NOT45_tree=null;\n        RewriteRuleTokenStream stream_AT_SUBTRACT=new RewriteRuleTokenStream(adaptor,\"token AT_SUBTRACT\");\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:305:5: ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT )\n            int alt13=3;\n            switch ( input.LA(1) ) {\n            case AT_SUBTRACT:\n                {\n                alt13=1;\n                }\n                break;\n            case AT_BIT_NOT:\n                {\n                alt13=2;\n                }\n                break;\n            case AT_BOOL_NOT:\n                {\n                alt13=3;\n                }\n                break;\n            default:\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 13, 0, input);\n\n                throw nvae;\n\n            }\n\n            switch (alt13) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT\n                    {\n                    AT_SUBTRACT43=(Token)match(input,AT_SUBTRACT,FOLLOW_AT_SUBTRACT_in_unary_operator1123);  \n                    stream_AT_SUBTRACT.add(AT_SUBTRACT43);\n\n\n                    // AST REWRITE\n                    // elements: \n                    // token labels: \n                    // rule labels: retval\n                    // token list labels: \n                    // rule list labels: \n                    // wildcard labels: \n                    retval.tree = root_0;\n                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                    root_0 = (CommonTree)adaptor.nil();\n                    // 305:19: -> AT_NEGATE\n                    {\n                        adaptor.addChild(root_0, \n                        (CommonTree)adaptor.create(AT_NEGATE, \"AT_NEGATE\")\n                        );\n\n                    }\n\n\n                    retval.tree = root_0;\n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    AT_BIT_NOT44=(Token)match(input,AT_BIT_NOT,FOLLOW_AT_BIT_NOT_in_unary_operator1135); \n                    AT_BIT_NOT44_tree = \n                    (CommonTree)adaptor.create(AT_BIT_NOT44)\n                    ;\n                    adaptor.addChild(root_0, AT_BIT_NOT44_tree);\n\n\n                    }\n                    break;\n                case 3 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    AT_BOOL_NOT45=(Token)match(input,AT_BOOL_NOT,FOLLOW_AT_BOOL_NOT_in_unary_operator1143); \n                    AT_BOOL_NOT45_tree = \n                    (CommonTree)adaptor.create(AT_BOOL_NOT45)\n                    ;\n                    adaptor.addChild(root_0, AT_BOOL_NOT45_tree);\n\n\n                    }\n                    break;\n\n            }\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n    \tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n        \t// do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"unary_operator\"\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3623d67605fbbdfce2fadea678e2f4bbe2ab2310","date":1379042933,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary_operator().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary_operator().mjava","sourceNew":"    // $ANTLR start \"unary_operator\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:304:1: unary_operator : ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT );\n    public final JavascriptParser.unary_operator_return unary_operator() throws RecognitionException {\n        JavascriptParser.unary_operator_return retval = new JavascriptParser.unary_operator_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token AT_SUBTRACT43=null;\n        Token AT_BIT_NOT44=null;\n        Token AT_BOOL_NOT45=null;\n\n        CommonTree AT_SUBTRACT43_tree=null;\n        CommonTree AT_BIT_NOT44_tree=null;\n        CommonTree AT_BOOL_NOT45_tree=null;\n        RewriteRuleTokenStream stream_AT_SUBTRACT=new RewriteRuleTokenStream(adaptor,\"token AT_SUBTRACT\");\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:305:5: ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT )\n            int alt13=3;\n            switch ( input.LA(1) ) {\n            case AT_SUBTRACT:\n                {\n                alt13=1;\n                }\n                break;\n            case AT_BIT_NOT:\n                {\n                alt13=2;\n                }\n                break;\n            case AT_BOOL_NOT:\n                {\n                alt13=3;\n                }\n                break;\n            default:\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 13, 0, input);\n\n                throw nvae;\n\n            }\n\n            switch (alt13) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT\n                    {\n                    AT_SUBTRACT43=(Token)match(input,AT_SUBTRACT,FOLLOW_AT_SUBTRACT_in_unary_operator1123);  \n                    stream_AT_SUBTRACT.add(AT_SUBTRACT43);\n\n\n                    // AST REWRITE\n                    // elements: \n                    // token labels: \n                    // rule labels: retval\n                    // token list labels: \n                    // rule list labels: \n                    // wildcard labels: \n                    retval.tree = root_0;\n                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                    root_0 = (CommonTree)adaptor.nil();\n                    // 305:19: -> AT_NEGATE\n                    {\n                        adaptor.addChild(root_0, \n                        (CommonTree)adaptor.create(AT_NEGATE, \"AT_NEGATE\")\n                        );\n\n                    }\n\n\n                    retval.tree = root_0;\n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    AT_BIT_NOT44=(Token)match(input,AT_BIT_NOT,FOLLOW_AT_BIT_NOT_in_unary_operator1135); \n                    AT_BIT_NOT44_tree = \n                    (CommonTree)adaptor.create(AT_BIT_NOT44)\n                    ;\n                    adaptor.addChild(root_0, AT_BIT_NOT44_tree);\n\n\n                    }\n                    break;\n                case 3 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    AT_BOOL_NOT45=(Token)match(input,AT_BOOL_NOT,FOLLOW_AT_BOOL_NOT_in_unary_operator1143); \n                    AT_BOOL_NOT45_tree = \n                    (CommonTree)adaptor.create(AT_BOOL_NOT45)\n                    ;\n                    adaptor.addChild(root_0, AT_BOOL_NOT45_tree);\n\n\n                    }\n                    break;\n\n            }\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"unary_operator\"\n\n","sourceOld":"    // $ANTLR start \"unary_operator\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:304:1: unary_operator : ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT );\n    public final JavascriptParser.unary_operator_return unary_operator() throws RecognitionException {\n        JavascriptParser.unary_operator_return retval = new JavascriptParser.unary_operator_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token AT_SUBTRACT43=null;\n        Token AT_BIT_NOT44=null;\n        Token AT_BOOL_NOT45=null;\n\n        CommonTree AT_SUBTRACT43_tree=null;\n        CommonTree AT_BIT_NOT44_tree=null;\n        CommonTree AT_BOOL_NOT45_tree=null;\n        RewriteRuleTokenStream stream_AT_SUBTRACT=new RewriteRuleTokenStream(adaptor,\"token AT_SUBTRACT\");\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:305:5: ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT )\n            int alt13=3;\n            switch ( input.LA(1) ) {\n            case AT_SUBTRACT:\n                {\n                alt13=1;\n                }\n                break;\n            case AT_BIT_NOT:\n                {\n                alt13=2;\n                }\n                break;\n            case AT_BOOL_NOT:\n                {\n                alt13=3;\n                }\n                break;\n            default:\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 13, 0, input);\n\n                throw nvae;\n\n            }\n\n            switch (alt13) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT\n                    {\n                    AT_SUBTRACT43=(Token)match(input,AT_SUBTRACT,FOLLOW_AT_SUBTRACT_in_unary_operator1123);  \n                    stream_AT_SUBTRACT.add(AT_SUBTRACT43);\n\n\n                    // AST REWRITE\n                    // elements: \n                    // token labels: \n                    // rule labels: retval\n                    // token list labels: \n                    // rule list labels: \n                    // wildcard labels: \n                    retval.tree = root_0;\n                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                    root_0 = (CommonTree)adaptor.nil();\n                    // 305:19: -> AT_NEGATE\n                    {\n                        adaptor.addChild(root_0, \n                        (CommonTree)adaptor.create(AT_NEGATE, \"AT_NEGATE\")\n                        );\n\n                    }\n\n\n                    retval.tree = root_0;\n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    AT_BIT_NOT44=(Token)match(input,AT_BIT_NOT,FOLLOW_AT_BIT_NOT_in_unary_operator1135); \n                    AT_BIT_NOT44_tree = \n                    (CommonTree)adaptor.create(AT_BIT_NOT44)\n                    ;\n                    adaptor.addChild(root_0, AT_BIT_NOT44_tree);\n\n\n                    }\n                    break;\n                case 3 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    AT_BOOL_NOT45=(Token)match(input,AT_BOOL_NOT,FOLLOW_AT_BOOL_NOT_in_unary_operator1143); \n                    AT_BOOL_NOT45_tree = \n                    (CommonTree)adaptor.create(AT_BOOL_NOT45)\n                    ;\n                    adaptor.addChild(root_0, AT_BOOL_NOT45_tree);\n\n\n                    }\n                    break;\n\n            }\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n    \tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n        \t// do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"unary_operator\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2","date":1379096281,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary_operator().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary_operator().mjava","sourceNew":"    // $ANTLR start \"unary_operator\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:304:1: unary_operator : ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT );\n    public final JavascriptParser.unary_operator_return unary_operator() throws RecognitionException {\n        JavascriptParser.unary_operator_return retval = new JavascriptParser.unary_operator_return();\n        retval.start = input.LT(1);\n\n        CommonTree root_0 = null;\n\n        Token AT_SUBTRACT43=null;\n        Token AT_BIT_NOT44=null;\n        Token AT_BOOL_NOT45=null;\n\n        CommonTree AT_SUBTRACT43_tree=null;\n        CommonTree AT_BIT_NOT44_tree=null;\n        CommonTree AT_BOOL_NOT45_tree=null;\n        RewriteRuleTokenStream stream_AT_SUBTRACT=new RewriteRuleTokenStream(adaptor,\"token AT_SUBTRACT\");\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:305:5: ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT )\n            int alt13=3;\n            switch ( input.LA(1) ) {\n            case AT_SUBTRACT:\n                {\n                alt13=1;\n                }\n                break;\n            case AT_BIT_NOT:\n                {\n                alt13=2;\n                }\n                break;\n            case AT_BOOL_NOT:\n                {\n                alt13=3;\n                }\n                break;\n            default:\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 13, 0, input);\n                throw nvae;\n            }\n            switch (alt13) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT\n                    {\n                    AT_SUBTRACT43=(Token)match(input,AT_SUBTRACT,FOLLOW_AT_SUBTRACT_in_unary_operator1123);  \n                    stream_AT_SUBTRACT.add(AT_SUBTRACT43);\n\n                    // AST REWRITE\n                    // elements: \n                    // token labels: \n                    // rule labels: retval\n                    // token list labels: \n                    // rule list labels: \n                    // wildcard labels: \n                    retval.tree = root_0;\n                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.getTree():null);\n\n                    root_0 = (CommonTree)adaptor.nil();\n                    // 305:19: -> AT_NEGATE\n                    {\n                        adaptor.addChild(root_0, (CommonTree)adaptor.create(AT_NEGATE, \"AT_NEGATE\"));\n                    }\n\n\n                    retval.tree = root_0;\n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    AT_BIT_NOT44=(Token)match(input,AT_BIT_NOT,FOLLOW_AT_BIT_NOT_in_unary_operator1135); \n                    AT_BIT_NOT44_tree = (CommonTree)adaptor.create(AT_BIT_NOT44);\n                    adaptor.addChild(root_0, AT_BIT_NOT44_tree);\n\n                    }\n                    break;\n                case 3 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    AT_BOOL_NOT45=(Token)match(input,AT_BOOL_NOT,FOLLOW_AT_BOOL_NOT_in_unary_operator1143); \n                    AT_BOOL_NOT45_tree = (CommonTree)adaptor.create(AT_BOOL_NOT45);\n                    adaptor.addChild(root_0, AT_BOOL_NOT45_tree);\n\n                    }\n                    break;\n\n            }\n            retval.stop = input.LT(-1);\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n        }\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"unary_operator\"\n\n","sourceOld":"    // $ANTLR start \"unary_operator\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:304:1: unary_operator : ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT );\n    public final JavascriptParser.unary_operator_return unary_operator() throws RecognitionException {\n        JavascriptParser.unary_operator_return retval = new JavascriptParser.unary_operator_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token AT_SUBTRACT43=null;\n        Token AT_BIT_NOT44=null;\n        Token AT_BOOL_NOT45=null;\n\n        CommonTree AT_SUBTRACT43_tree=null;\n        CommonTree AT_BIT_NOT44_tree=null;\n        CommonTree AT_BOOL_NOT45_tree=null;\n        RewriteRuleTokenStream stream_AT_SUBTRACT=new RewriteRuleTokenStream(adaptor,\"token AT_SUBTRACT\");\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:305:5: ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT )\n            int alt13=3;\n            switch ( input.LA(1) ) {\n            case AT_SUBTRACT:\n                {\n                alt13=1;\n                }\n                break;\n            case AT_BIT_NOT:\n                {\n                alt13=2;\n                }\n                break;\n            case AT_BOOL_NOT:\n                {\n                alt13=3;\n                }\n                break;\n            default:\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 13, 0, input);\n\n                throw nvae;\n\n            }\n\n            switch (alt13) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT\n                    {\n                    AT_SUBTRACT43=(Token)match(input,AT_SUBTRACT,FOLLOW_AT_SUBTRACT_in_unary_operator1123);  \n                    stream_AT_SUBTRACT.add(AT_SUBTRACT43);\n\n\n                    // AST REWRITE\n                    // elements: \n                    // token labels: \n                    // rule labels: retval\n                    // token list labels: \n                    // rule list labels: \n                    // wildcard labels: \n                    retval.tree = root_0;\n                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.tree:null);\n\n                    root_0 = (CommonTree)adaptor.nil();\n                    // 305:19: -> AT_NEGATE\n                    {\n                        adaptor.addChild(root_0, \n                        (CommonTree)adaptor.create(AT_NEGATE, \"AT_NEGATE\")\n                        );\n\n                    }\n\n\n                    retval.tree = root_0;\n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    AT_BIT_NOT44=(Token)match(input,AT_BIT_NOT,FOLLOW_AT_BIT_NOT_in_unary_operator1135); \n                    AT_BIT_NOT44_tree = \n                    (CommonTree)adaptor.create(AT_BIT_NOT44)\n                    ;\n                    adaptor.addChild(root_0, AT_BIT_NOT44_tree);\n\n\n                    }\n                    break;\n                case 3 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    AT_BOOL_NOT45=(Token)match(input,AT_BOOL_NOT,FOLLOW_AT_BOOL_NOT_in_unary_operator1143); \n                    AT_BOOL_NOT45_tree = \n                    (CommonTree)adaptor.create(AT_BOOL_NOT45)\n                    ;\n                    adaptor.addChild(root_0, AT_BOOL_NOT45_tree);\n\n\n                    }\n                    break;\n\n            }\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"unary_operator\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1441eba4282a646ef88d12acb797483db37554e","date":1379096538,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary_operator().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary_operator().mjava","sourceNew":"  // $ANTLR start \"unary_operator\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:304:1: unary_operator : ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT );\n  public final JavascriptParser.unary_operator_return unary_operator() throws RecognitionException {\n    JavascriptParser.unary_operator_return retval = new JavascriptParser.unary_operator_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token AT_SUBTRACT43=null;\n    Token AT_BIT_NOT44=null;\n    Token AT_BOOL_NOT45=null;\n\n    CommonTree AT_SUBTRACT43_tree=null;\n    CommonTree AT_BIT_NOT44_tree=null;\n    CommonTree AT_BOOL_NOT45_tree=null;\n    RewriteRuleTokenStream stream_AT_SUBTRACT=new RewriteRuleTokenStream(adaptor,\"token AT_SUBTRACT\");\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:305:5: ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT )\n      int alt13=3;\n      switch ( input.LA(1) ) {\n      case AT_SUBTRACT:\n        {\n        alt13=1;\n        }\n        break;\n      case AT_BIT_NOT:\n        {\n        alt13=2;\n        }\n        break;\n      case AT_BOOL_NOT:\n        {\n        alt13=3;\n        }\n        break;\n      default:\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 13, 0, input);\n        throw nvae;\n      }\n      switch (alt13) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT\n          {\n          AT_SUBTRACT43=(Token)match(input,AT_SUBTRACT,FOLLOW_AT_SUBTRACT_in_unary_operator1123);  \n          stream_AT_SUBTRACT.add(AT_SUBTRACT43);\n\n          // AST REWRITE\n          // elements: \n          // token labels: \n          // rule labels: retval\n          // token list labels: \n          // rule list labels: \n          // wildcard labels: \n          retval.tree = root_0;\n          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.getTree():null);\n\n          root_0 = (CommonTree)adaptor.nil();\n          // 305:19: -> AT_NEGATE\n          {\n            adaptor.addChild(root_0, (CommonTree)adaptor.create(AT_NEGATE, \"AT_NEGATE\"));\n          }\n\n\n          retval.tree = root_0;\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          AT_BIT_NOT44=(Token)match(input,AT_BIT_NOT,FOLLOW_AT_BIT_NOT_in_unary_operator1135); \n          AT_BIT_NOT44_tree = (CommonTree)adaptor.create(AT_BIT_NOT44);\n          adaptor.addChild(root_0, AT_BIT_NOT44_tree);\n\n          }\n          break;\n        case 3 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          AT_BOOL_NOT45=(Token)match(input,AT_BOOL_NOT,FOLLOW_AT_BOOL_NOT_in_unary_operator1143); \n          AT_BOOL_NOT45_tree = (CommonTree)adaptor.create(AT_BOOL_NOT45);\n          adaptor.addChild(root_0, AT_BOOL_NOT45_tree);\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"unary_operator\"\n\n","sourceOld":"    // $ANTLR start \"unary_operator\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:304:1: unary_operator : ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT );\n    public final JavascriptParser.unary_operator_return unary_operator() throws RecognitionException {\n        JavascriptParser.unary_operator_return retval = new JavascriptParser.unary_operator_return();\n        retval.start = input.LT(1);\n\n        CommonTree root_0 = null;\n\n        Token AT_SUBTRACT43=null;\n        Token AT_BIT_NOT44=null;\n        Token AT_BOOL_NOT45=null;\n\n        CommonTree AT_SUBTRACT43_tree=null;\n        CommonTree AT_BIT_NOT44_tree=null;\n        CommonTree AT_BOOL_NOT45_tree=null;\n        RewriteRuleTokenStream stream_AT_SUBTRACT=new RewriteRuleTokenStream(adaptor,\"token AT_SUBTRACT\");\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:305:5: ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT )\n            int alt13=3;\n            switch ( input.LA(1) ) {\n            case AT_SUBTRACT:\n                {\n                alt13=1;\n                }\n                break;\n            case AT_BIT_NOT:\n                {\n                alt13=2;\n                }\n                break;\n            case AT_BOOL_NOT:\n                {\n                alt13=3;\n                }\n                break;\n            default:\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 13, 0, input);\n                throw nvae;\n            }\n            switch (alt13) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT\n                    {\n                    AT_SUBTRACT43=(Token)match(input,AT_SUBTRACT,FOLLOW_AT_SUBTRACT_in_unary_operator1123);  \n                    stream_AT_SUBTRACT.add(AT_SUBTRACT43);\n\n                    // AST REWRITE\n                    // elements: \n                    // token labels: \n                    // rule labels: retval\n                    // token list labels: \n                    // rule list labels: \n                    // wildcard labels: \n                    retval.tree = root_0;\n                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.getTree():null);\n\n                    root_0 = (CommonTree)adaptor.nil();\n                    // 305:19: -> AT_NEGATE\n                    {\n                        adaptor.addChild(root_0, (CommonTree)adaptor.create(AT_NEGATE, \"AT_NEGATE\"));\n                    }\n\n\n                    retval.tree = root_0;\n\n                    }\n                    break;\n                case 2 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    AT_BIT_NOT44=(Token)match(input,AT_BIT_NOT,FOLLOW_AT_BIT_NOT_in_unary_operator1135); \n                    AT_BIT_NOT44_tree = (CommonTree)adaptor.create(AT_BIT_NOT44);\n                    adaptor.addChild(root_0, AT_BIT_NOT44_tree);\n\n                    }\n                    break;\n                case 3 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT\n                    {\n                    root_0 = (CommonTree)adaptor.nil();\n\n\n                    AT_BOOL_NOT45=(Token)match(input,AT_BOOL_NOT,FOLLOW_AT_BOOL_NOT_in_unary_operator1143); \n                    AT_BOOL_NOT45_tree = (CommonTree)adaptor.create(AT_BOOL_NOT45);\n                    adaptor.addChild(root_0, AT_BOOL_NOT45_tree);\n\n                    }\n                    break;\n\n            }\n            retval.stop = input.LT(-1);\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n        }\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"unary_operator\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary_operator().mjava","pathOld":"/dev/null","sourceNew":"  // $ANTLR start \"unary_operator\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:304:1: unary_operator : ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT );\n  public final JavascriptParser.unary_operator_return unary_operator() throws RecognitionException {\n    JavascriptParser.unary_operator_return retval = new JavascriptParser.unary_operator_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token AT_SUBTRACT43=null;\n    Token AT_BIT_NOT44=null;\n    Token AT_BOOL_NOT45=null;\n\n    CommonTree AT_SUBTRACT43_tree=null;\n    CommonTree AT_BIT_NOT44_tree=null;\n    CommonTree AT_BOOL_NOT45_tree=null;\n    RewriteRuleTokenStream stream_AT_SUBTRACT=new RewriteRuleTokenStream(adaptor,\"token AT_SUBTRACT\");\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:305:5: ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT )\n      int alt13=3;\n      switch ( input.LA(1) ) {\n      case AT_SUBTRACT:\n        {\n        alt13=1;\n        }\n        break;\n      case AT_BIT_NOT:\n        {\n        alt13=2;\n        }\n        break;\n      case AT_BOOL_NOT:\n        {\n        alt13=3;\n        }\n        break;\n      default:\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 13, 0, input);\n        throw nvae;\n      }\n      switch (alt13) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT\n          {\n          AT_SUBTRACT43=(Token)match(input,AT_SUBTRACT,FOLLOW_AT_SUBTRACT_in_unary_operator1123);  \n          stream_AT_SUBTRACT.add(AT_SUBTRACT43);\n\n          // AST REWRITE\n          // elements: \n          // token labels: \n          // rule labels: retval\n          // token list labels: \n          // rule list labels: \n          // wildcard labels: \n          retval.tree = root_0;\n          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.getTree():null);\n\n          root_0 = (CommonTree)adaptor.nil();\n          // 305:19: -> AT_NEGATE\n          {\n            adaptor.addChild(root_0, (CommonTree)adaptor.create(AT_NEGATE, \"AT_NEGATE\"));\n          }\n\n\n          retval.tree = root_0;\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          AT_BIT_NOT44=(Token)match(input,AT_BIT_NOT,FOLLOW_AT_BIT_NOT_in_unary_operator1135); \n          AT_BIT_NOT44_tree = (CommonTree)adaptor.create(AT_BIT_NOT44);\n          adaptor.addChild(root_0, AT_BIT_NOT44_tree);\n\n          }\n          break;\n        case 3 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          AT_BOOL_NOT45=(Token)match(input,AT_BOOL_NOT,FOLLOW_AT_BOOL_NOT_in_unary_operator1143); \n          AT_BOOL_NOT45_tree = (CommonTree)adaptor.create(AT_BOOL_NOT45);\n          adaptor.addChild(root_0, AT_BOOL_NOT45_tree);\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"unary_operator\"\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d23d4828afa583ebf35b4a541763af6206133458","date":1438931440,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#unary_operator().mjava","sourceNew":null,"sourceOld":"  // $ANTLR start \"unary_operator\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:304:1: unary_operator : ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT );\n  public final JavascriptParser.unary_operator_return unary_operator() throws RecognitionException {\n    JavascriptParser.unary_operator_return retval = new JavascriptParser.unary_operator_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token AT_SUBTRACT43=null;\n    Token AT_BIT_NOT44=null;\n    Token AT_BOOL_NOT45=null;\n\n    CommonTree AT_SUBTRACT43_tree=null;\n    CommonTree AT_BIT_NOT44_tree=null;\n    CommonTree AT_BOOL_NOT45_tree=null;\n    RewriteRuleTokenStream stream_AT_SUBTRACT=new RewriteRuleTokenStream(adaptor,\"token AT_SUBTRACT\");\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:305:5: ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT )\n      int alt13=3;\n      switch ( input.LA(1) ) {\n      case AT_SUBTRACT:\n        {\n        alt13=1;\n        }\n        break;\n      case AT_BIT_NOT:\n        {\n        alt13=2;\n        }\n        break;\n      case AT_BOOL_NOT:\n        {\n        alt13=3;\n        }\n        break;\n      default:\n        NoViableAltException nvae =\n          new NoViableAltException(\"\", 13, 0, input);\n        throw nvae;\n      }\n      switch (alt13) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT\n          {\n          AT_SUBTRACT43=(Token)match(input,AT_SUBTRACT,FOLLOW_AT_SUBTRACT_in_unary_operator1123);  \n          stream_AT_SUBTRACT.add(AT_SUBTRACT43);\n\n          // AST REWRITE\n          // elements: \n          // token labels: \n          // rule labels: retval\n          // token list labels: \n          // rule list labels: \n          // wildcard labels: \n          retval.tree = root_0;\n          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,\"rule retval\",retval!=null?retval.getTree():null);\n\n          root_0 = (CommonTree)adaptor.nil();\n          // 305:19: -> AT_NEGATE\n          {\n            adaptor.addChild(root_0, (CommonTree)adaptor.create(AT_NEGATE, \"AT_NEGATE\"));\n          }\n\n\n          retval.tree = root_0;\n\n          }\n          break;\n        case 2 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          AT_BIT_NOT44=(Token)match(input,AT_BIT_NOT,FOLLOW_AT_BIT_NOT_in_unary_operator1135); \n          AT_BIT_NOT44_tree = (CommonTree)adaptor.create(AT_BIT_NOT44);\n          adaptor.addChild(root_0, AT_BIT_NOT44_tree);\n\n          }\n          break;\n        case 3 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT\n          {\n          root_0 = (CommonTree)adaptor.nil();\n\n\n          AT_BOOL_NOT45=(Token)match(input,AT_BOOL_NOT,FOLLOW_AT_BOOL_NOT_in_unary_operator1143); \n          AT_BOOL_NOT45_tree = (CommonTree)adaptor.create(AT_BOOL_NOT45);\n          adaptor.addChild(root_0, AT_BOOL_NOT45_tree);\n\n          }\n          break;\n\n      }\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"unary_operator\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d23d4828afa583ebf35b4a541763af6206133458":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2":["3623d67605fbbdfce2fadea678e2f4bbe2ab2310"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1441eba4282a646ef88d12acb797483db37554e":["68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3623d67605fbbdfce2fadea678e2f4bbe2ab2310":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d23d4828afa583ebf35b4a541763af6206133458"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d1441eba4282a646ef88d12acb797483db37554e"]},"commit2Childs":{"d23d4828afa583ebf35b4a541763af6206133458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2":["d1441eba4282a646ef88d12acb797483db37554e"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["3623d67605fbbdfce2fadea678e2f4bbe2ab2310"],"d1441eba4282a646ef88d12acb797483db37554e":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"3623d67605fbbdfce2fadea678e2f4bbe2ab2310":["68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["d23d4828afa583ebf35b4a541763af6206133458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}