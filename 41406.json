{"path":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","sourceNew":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      Similarity sim = getSimilarity();\n      if (fieldName != cachedFieldName || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        float n = sim.computeNorm(fieldName, invertState);\n        byte norm = sim.encodeNormValue(n);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + n + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      Similarity sim = getSimilarity();\n      if (fieldName != cachedFieldName || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        float n = sim.computeNorm(fieldName, invertState);\n        byte norm = sim.encodeNormValue(n);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + n + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","sourceNew":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (fieldName != cachedFieldName || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        Similarity fieldSim = sim.get(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        float n = fieldSim.computeNorm(fieldName, invertState);\n        byte norm = fieldSim.encodeNormValue(n);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + n + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      Similarity sim = getSimilarity();\n      if (fieldName != cachedFieldName || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        float n = sim.computeNorm(fieldName, invertState);\n        byte norm = sim.encodeNormValue(n);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + n + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","sourceNew":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (fieldName != cachedFieldName || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        Similarity fieldSim = sim.get(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        float n = fieldSim.computeNorm(fieldName, invertState);\n        byte norm = fieldSim.encodeNormValue(n);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + n + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      Similarity sim = getSimilarity();\n      if (fieldName != cachedFieldName || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        float n = sim.computeNorm(fieldName, invertState);\n        byte norm = sim.encodeNormValue(n);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + n + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","sourceNew":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (fieldName != cachedFieldName || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        Similarity fieldSim = sim.get(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        float n = fieldSim.computeNorm(fieldName, invertState);\n        byte norm = fieldSim.encodeNormValue(n);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + n + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      Similarity sim = getSimilarity();\n      if (fieldName != cachedFieldName || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        float n = sim.computeNorm(fieldName, invertState);\n        byte norm = sim.encodeNormValue(n);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + n + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ce8d53d5582eaa6a0c771c9b119d480f41da59c","date":1297466174,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","sourceNew":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (fieldName != cachedFieldName || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        Similarity fieldSim = sim.get(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        float n = fieldSim.computeNorm(invertState);\n        byte norm = fieldSim.encodeNormValue(n);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + n + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (fieldName != cachedFieldName || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        Similarity fieldSim = sim.get(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        float n = fieldSim.computeNorm(fieldName, invertState);\n        byte norm = fieldSim.encodeNormValue(n);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + n + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","sourceNew":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (fieldName != cachedFieldName || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        Similarity fieldSim = sim.get(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        float n = fieldSim.computeNorm(invertState);\n        byte norm = fieldSim.encodeNormValue(n);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + n + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (fieldName != cachedFieldName || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        Similarity fieldSim = sim.get(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        float n = fieldSim.computeNorm(fieldName, invertState);\n        byte norm = fieldSim.encodeNormValue(n);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + n + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","sourceNew":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (fieldName != cachedFieldName || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        Similarity fieldSim = sim.get(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        float n = fieldSim.computeNorm(invertState);\n        byte norm = fieldSim.encodeNormValue(n);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + n + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (fieldName != cachedFieldName || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        Similarity fieldSim = sim.get(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        float n = fieldSim.computeNorm(fieldName, invertState);\n        byte norm = fieldSim.encodeNormValue(n);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + n + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","sourceNew":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (fieldName != cachedFieldName || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        Similarity fieldSim = sim.get(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        byte norm = fieldSim.computeNorm(invertState);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (fieldName != cachedFieldName || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        Similarity fieldSim = sim.get(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        float n = fieldSim.computeNorm(invertState);\n        byte norm = fieldSim.encodeNormValue(n);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + n + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","sourceNew":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (fieldName != cachedFieldName || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        Similarity fieldSim = sim.get(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        byte norm = fieldSim.computeNorm(invertState);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (fieldName != cachedFieldName || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        Similarity fieldSim = sim.get(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        float n = fieldSim.computeNorm(invertState);\n        byte norm = fieldSim.encodeNormValue(n);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + n + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","sourceNew":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (fieldName != cachedFieldName || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        Similarity fieldSim = sim.get(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        byte norm = fieldSim.computeNorm(invertState);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (fieldName != cachedFieldName || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        Similarity fieldSim = sim.get(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        float n = fieldSim.computeNorm(invertState);\n        byte norm = fieldSim.encodeNormValue(n);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + n + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72b952811367f6e21added5f7306dc6bf2aa1e9c","date":1310127304,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","sourceNew":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (!fieldName.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        Similarity fieldSim = sim.get(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        byte norm = fieldSim.computeNorm(invertState);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (fieldName != cachedFieldName || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        Similarity fieldSim = sim.get(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        byte norm = fieldSim.computeNorm(invertState);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","sourceNew":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (!fieldName.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        Similarity fieldSim = sim.get(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        byte norm = fieldSim.computeNorm(invertState);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (fieldName != cachedFieldName || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        Similarity fieldSim = sim.get(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        byte norm = fieldSim.computeNorm(invertState);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#normValues(String).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#norms(String).mjava","sourceNew":"    @Override\n    public DocValues normValues(String field) throws IOException {\n      DocValues norms = cachedNormValues;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (!field.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(field);\n        Similarity fieldSim = sim.get(field);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        byte norm = fieldSim.computeNorm(invertState);\n        SingleByteSource singleByteSource = new SingleByteSource(new byte[] {norm});\n        norms = new MemoryIndexNormDocValues(singleByteSource);\n        // cache it for future reuse\n        cachedNormValues = norms;\n        cachedFieldName = field;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + field + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","sourceOld":"    @Override\n    public byte[] norms(String fieldName) {\n      byte[] norms = cachedNorms;\n      SimilarityProvider sim = getSimilarityProvider();\n      if (!fieldName.equals(cachedFieldName) || sim != cachedSimilarity) { // not cached?\n        Info info = getInfo(fieldName);\n        Similarity fieldSim = sim.get(fieldName);\n        int numTokens = info != null ? info.numTokens : 0;\n        int numOverlapTokens = info != null ? info.numOverlapTokens : 0;\n        float boost = info != null ? info.getBoost() : 1.0f; \n        FieldInvertState invertState = new FieldInvertState(0, numTokens, numOverlapTokens, 0, boost);\n        byte norm = fieldSim.computeNorm(invertState);\n        norms = new byte[] {norm};\n        \n        // cache it for future reuse\n        cachedNorms = norms;\n        cachedFieldName = fieldName;\n        cachedSimilarity = sim;\n        if (DEBUG) System.err.println(\"MemoryIndexReader.norms: \" + fieldName + \":\" + norm + \":\" + numTokens);\n      }\n      return norms;\n    }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"72b952811367f6e21added5f7306dc6bf2aa1e9c":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["9454a6510e2db155fb01faa5c049b06ece95fab9","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1291e4568eb7d9463d751627596ef14baf4c1603":["5ce8d53d5582eaa6a0c771c9b119d480f41da59c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["5ce8d53d5582eaa6a0c771c9b119d480f41da59c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["f0b9507caf22f292ac0e5e59f62db4275adf4511","72b952811367f6e21added5f7306dc6bf2aa1e9c"],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["72b952811367f6e21added5f7306dc6bf2aa1e9c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["72b952811367f6e21added5f7306dc6bf2aa1e9c","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"72b952811367f6e21added5f7306dc6bf2aa1e9c":["5d004d0e0b3f65bb40da76d476d659d7888270e8","f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","29ef99d61cda9641b6250bf9567329a6e65f901d","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["0f3cee3d20b0c786e6fca20539454262e29edcab","f1bdbf92da222965b46c0a942c3857ba56e5c638","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","fd9325c7ff9928fabe81c28553b41fc7aa57dfab","29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","1291e4568eb7d9463d751627596ef14baf4c1603","5d004d0e0b3f65bb40da76d476d659d7888270e8","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}