{"path":"src/java/org/apache/lucene/search/QueryFilter#bits(IndexReader).mjava","commits":[{"id":"9bd797247fad4b51583ce210ef9b44a22f32b13c","date":1028570756,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/QueryFilter#bits(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public BitSet bits(IndexReader reader) throws IOException {\n\n    synchronized (cache) {                        // check cache\n      BitSet cached = (BitSet)cache.get(reader);\n      if (cached != null)\n        return cached;\n    }\n\n    final BitSet bits = new BitSet(reader.maxDoc());\n\n    new IndexSearcher(reader).search(query, new HitCollector() {\n\tpublic final void collect(int doc, float score) {\n          bits.set(doc);                          // set bit for hit\n        }\n      });\n                                     \n\n    synchronized (cache) {                        // update cache\n      cache.put(reader, bits);\n    }\n\n    return bits;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39332adc80701d999b904c433479b676c101d2a6","date":1063449985,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/QueryFilter#bits(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/QueryFilter#bits(IndexReader).mjava","sourceNew":"    public BitSet bits(IndexReader reader) throws IOException {\n\n        synchronized (cache) {  // check cache\n            BitSet cached = (BitSet) cache.get(reader);\n            if (cached != null)\n                return cached;\n        }\n\n        final BitSet bits = new BitSet(reader.maxDoc());\n\n        new IndexSearcher(reader).search(query, new HitCollector() {\n            public final void collect(int doc, float score) {\n                bits.set(doc);  // set bit for hit\n            }\n        });\n\n\n        synchronized (cache) {  // update cache\n            cache.put(reader, bits);\n        }\n\n        return bits;\n    }\n\n","sourceOld":"  public BitSet bits(IndexReader reader) throws IOException {\n\n    synchronized (cache) {                        // check cache\n      BitSet cached = (BitSet)cache.get(reader);\n      if (cached != null)\n        return cached;\n    }\n\n    final BitSet bits = new BitSet(reader.maxDoc());\n\n    new IndexSearcher(reader).search(query, new HitCollector() {\n\tpublic final void collect(int doc, float score) {\n          bits.set(doc);                          // set bit for hit\n        }\n      });\n                                     \n\n    synchronized (cache) {                        // update cache\n      cache.put(reader, bits);\n    }\n\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09801d5e36f040f424c56c388007a47a95d36d46","date":1063496429,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/QueryFilter#bits(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/QueryFilter#bits(IndexReader).mjava","sourceNew":"  public BitSet bits(IndexReader reader) throws IOException {\n\n    synchronized (cache) {  // check cache\n      BitSet cached = (BitSet) cache.get(reader);\n      if (cached != null) {\n        return cached;\n      }\n    }\n\n    final BitSet bits = new BitSet(reader.maxDoc());\n\n    new IndexSearcher(reader).search(query, new HitCollector() {\n      public final void collect(int doc, float score) {\n        bits.set(doc);  // set bit for hit\n      }\n    });\n\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, bits);\n    }\n\n    return bits;\n  }\n\n","sourceOld":"    public BitSet bits(IndexReader reader) throws IOException {\n\n        synchronized (cache) {  // check cache\n            BitSet cached = (BitSet) cache.get(reader);\n            if (cached != null)\n                return cached;\n        }\n\n        final BitSet bits = new BitSet(reader.maxDoc());\n\n        new IndexSearcher(reader).search(query, new HitCollector() {\n            public final void collect(int doc, float score) {\n                bits.set(doc);  // set bit for hit\n            }\n        });\n\n\n        synchronized (cache) {  // update cache\n            cache.put(reader, bits);\n        }\n\n        return bits;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5305a67beef3fd0fd78ff66ad88bca7d024449fd","date":1063716730,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/QueryFilter#bits(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/QueryFilter#bits(IndexReader).mjava","sourceNew":"  public BitSet bits(IndexReader reader) throws IOException {\n\n    if (cache == null) {\n      cache = new WeakHashMap();\n    }\n\n    synchronized (cache) {  // check cache\n      BitSet cached = (BitSet) cache.get(reader);\n      if (cached != null) {\n        return cached;\n      }\n    }\n\n    final BitSet bits = new BitSet(reader.maxDoc());\n\n    new IndexSearcher(reader).search(query, new HitCollector() {\n      public final void collect(int doc, float score) {\n        bits.set(doc);  // set bit for hit\n      }\n    });\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, bits);\n    }\n\n    return bits;\n  }\n\n","sourceOld":"  public BitSet bits(IndexReader reader) throws IOException {\n\n    synchronized (cache) {  // check cache\n      BitSet cached = (BitSet) cache.get(reader);\n      if (cached != null) {\n        return cached;\n      }\n    }\n\n    final BitSet bits = new BitSet(reader.maxDoc());\n\n    new IndexSearcher(reader).search(query, new HitCollector() {\n      public final void collect(int doc, float score) {\n        bits.set(doc);  // set bit for hit\n      }\n    });\n\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, bits);\n    }\n\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a92cc2b646f64bb8587798072b1685133c7a54a9","date":1176237767,"type":5,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/QueryWrapperFilter#bits(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/QueryFilter#bits(IndexReader).mjava","sourceNew":"  public BitSet bits(IndexReader reader) throws IOException {\n    final BitSet bits = new BitSet(reader.maxDoc());\n\n    new IndexSearcher(reader).search(query, new HitCollector() {\n      public final void collect(int doc, float score) {\n        bits.set(doc);  // set bit for hit\n      }\n    });\n    return bits;\n  }\n\n","sourceOld":"  public BitSet bits(IndexReader reader) throws IOException {\n\n    if (cache == null) {\n      cache = new WeakHashMap();\n    }\n\n    synchronized (cache) {  // check cache\n      BitSet cached = (BitSet) cache.get(reader);\n      if (cached != null) {\n        return cached;\n      }\n    }\n\n    final BitSet bits = new BitSet(reader.maxDoc());\n\n    new IndexSearcher(reader).search(query, new HitCollector() {\n      public final void collect(int doc, float score) {\n        bits.set(doc);  // set bit for hit\n      }\n    });\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, bits);\n    }\n\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39332adc80701d999b904c433479b676c101d2a6":["9bd797247fad4b51583ce210ef9b44a22f32b13c"],"5305a67beef3fd0fd78ff66ad88bca7d024449fd":["09801d5e36f040f424c56c388007a47a95d36d46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09801d5e36f040f424c56c388007a47a95d36d46":["39332adc80701d999b904c433479b676c101d2a6"],"a92cc2b646f64bb8587798072b1685133c7a54a9":["5305a67beef3fd0fd78ff66ad88bca7d024449fd"],"9bd797247fad4b51583ce210ef9b44a22f32b13c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a92cc2b646f64bb8587798072b1685133c7a54a9"]},"commit2Childs":{"39332adc80701d999b904c433479b676c101d2a6":["09801d5e36f040f424c56c388007a47a95d36d46"],"5305a67beef3fd0fd78ff66ad88bca7d024449fd":["a92cc2b646f64bb8587798072b1685133c7a54a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9bd797247fad4b51583ce210ef9b44a22f32b13c"],"09801d5e36f040f424c56c388007a47a95d36d46":["5305a67beef3fd0fd78ff66ad88bca7d024449fd"],"a92cc2b646f64bb8587798072b1685133c7a54a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9bd797247fad4b51583ce210ef9b44a22f32b13c":["39332adc80701d999b904c433479b676c101d2a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}