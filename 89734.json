{"path":"lucene/core/src/java/org/apache/lucene/util/MergedIterator#MergedIterator(Iterator[T]...).mjava","commits":[{"id":"fb07ab105350b80ed9d63ca64b117084ed7391bc","date":1344824719,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MergedIterator#MergedIterator(Iterator[T]...).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public MergedIterator(Iterator<T>... iterators) {\n    queue = new TermMergeQueue<T>(iterators.length);\n    top = new SubIterator[iterators.length];\n    int index = 0;\n    for (Iterator<T> iterator : iterators) {\n      if (iterator.hasNext()) {\n        SubIterator<T> sub = new SubIterator<T>();\n        sub.current = iterator.next();\n        sub.iterator = iterator;\n        sub.index = index++;\n        queue.add(sub);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MergedIterator#MergedIterator(Iterator[T]...).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public MergedIterator(Iterator<T>... iterators) {\n    queue = new TermMergeQueue<T>(iterators.length);\n    top = new SubIterator[iterators.length];\n    int index = 0;\n    for (Iterator<T> iterator : iterators) {\n      if (iterator.hasNext()) {\n        SubIterator<T> sub = new SubIterator<T>();\n        sub.current = iterator.next();\n        sub.iterator = iterator;\n        sub.index = index++;\n        queue.add(sub);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MergedIterator#MergedIterator(Iterator[T]...).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public MergedIterator(Iterator<T>... iterators) {\n    queue = new TermMergeQueue<T>(iterators.length);\n    top = new SubIterator[iterators.length];\n    int index = 0;\n    for (Iterator<T> iterator : iterators) {\n      if (iterator.hasNext()) {\n        SubIterator<T> sub = new SubIterator<T>();\n        sub.current = iterator.next();\n        sub.iterator = iterator;\n        sub.index = index++;\n        queue.add(sub);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c7a37580e62e8384ea11b972c15c00221cf64fa","date":1344870636,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergedIterator#MergedIterator(Iterator[T]...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/MergedIterator#MergedIterator(Iterator[T]...).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public MergedIterator(Iterator<T>... iterators) {\n    queue = new TermMergeQueue<T>(iterators.length);\n    top = new SubIterator[iterators.length];\n    int index = 0;\n    for (Iterator<T> iterator : iterators) {\n      if (iterator.hasNext()) {\n        SubIterator<T> sub = new SubIterator<T>();\n        sub.current = iterator.next();\n        sub.iterator = iterator;\n        sub.index = index++;\n        queue.add(sub);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public MergedIterator(Iterator<T>... iterators) {\n    queue = new TermMergeQueue<T>(iterators.length);\n    top = new SubIterator[iterators.length];\n    int index = 0;\n    for (Iterator<T> iterator : iterators) {\n      if (iterator.hasNext()) {\n        SubIterator<T> sub = new SubIterator<T>();\n        sub.current = iterator.next();\n        sub.iterator = iterator;\n        sub.index = index++;\n        queue.add(sub);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergedIterator#MergedIterator(Iterator[T]...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/MergedIterator#MergedIterator(Iterator[T]...).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public MergedIterator(Iterator<T>... iterators) {\n    queue = new TermMergeQueue<T>(iterators.length);\n    top = new SubIterator[iterators.length];\n    int index = 0;\n    for (Iterator<T> iterator : iterators) {\n      if (iterator.hasNext()) {\n        SubIterator<T> sub = new SubIterator<T>();\n        sub.current = iterator.next();\n        sub.iterator = iterator;\n        sub.index = index++;\n        queue.add(sub);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public MergedIterator(Iterator<T>... iterators) {\n    queue = new TermMergeQueue<T>(iterators.length);\n    top = new SubIterator[iterators.length];\n    int index = 0;\n    for (Iterator<T> iterator : iterators) {\n      if (iterator.hasNext()) {\n        SubIterator<T> sub = new SubIterator<T>();\n        sub.current = iterator.next();\n        sub.iterator = iterator;\n        sub.index = index++;\n        queue.add(sub);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergedIterator#MergedIterator(Iterator[T]...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/MergedIterator#MergedIterator(Iterator[T]...).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public MergedIterator(Iterator<T>... iterators) {\n    queue = new TermMergeQueue<T>(iterators.length);\n    top = new SubIterator[iterators.length];\n    int index = 0;\n    for (Iterator<T> iterator : iterators) {\n      if (iterator.hasNext()) {\n        SubIterator<T> sub = new SubIterator<T>();\n        sub.current = iterator.next();\n        sub.iterator = iterator;\n        sub.index = index++;\n        queue.add(sub);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public MergedIterator(Iterator<T>... iterators) {\n    queue = new TermMergeQueue<T>(iterators.length);\n    top = new SubIterator[iterators.length];\n    int index = 0;\n    for (Iterator<T> iterator : iterators) {\n      if (iterator.hasNext()) {\n        SubIterator<T> sub = new SubIterator<T>();\n        sub.current = iterator.next();\n        sub.iterator = iterator;\n        sub.index = index++;\n        queue.add(sub);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MergedIterator#MergedIterator(Iterator[T]...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergedIterator#MergedIterator(Iterator[T]...).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public MergedIterator(Iterator<T>... iterators) {\n    queue = new TermMergeQueue<T>(iterators.length);\n    top = new SubIterator[iterators.length];\n    int index = 0;\n    for (Iterator<T> iterator : iterators) {\n      if (iterator.hasNext()) {\n        SubIterator<T> sub = new SubIterator<T>();\n        sub.current = iterator.next();\n        sub.iterator = iterator;\n        sub.index = index++;\n        queue.add(sub);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public MergedIterator(Iterator<T>... iterators) {\n    queue = new TermMergeQueue<T>(iterators.length);\n    top = new SubIterator[iterators.length];\n    int index = 0;\n    for (Iterator<T> iterator : iterators) {\n      if (iterator.hasNext()) {\n        SubIterator<T> sub = new SubIterator<T>();\n        sub.current = iterator.next();\n        sub.iterator = iterator;\n        sub.index = index++;\n        queue.add(sub);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergedIterator#MergedIterator(Iterator[T]...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/MergedIterator#MergedIterator(Iterator[T]...).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public MergedIterator(Iterator<T>... iterators) {\n    queue = new TermMergeQueue<T>(iterators.length);\n    top = new SubIterator[iterators.length];\n    int index = 0;\n    for (Iterator<T> iterator : iterators) {\n      if (iterator.hasNext()) {\n        SubIterator<T> sub = new SubIterator<T>();\n        sub.current = iterator.next();\n        sub.iterator = iterator;\n        sub.index = index++;\n        queue.add(sub);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public MergedIterator(Iterator<T>... iterators) {\n    queue = new TermMergeQueue<T>(iterators.length);\n    top = new SubIterator[iterators.length];\n    int index = 0;\n    for (Iterator<T> iterator : iterators) {\n      if (iterator.hasNext()) {\n        SubIterator<T> sub = new SubIterator<T>();\n        sub.current = iterator.next();\n        sub.iterator = iterator;\n        sub.index = index++;\n        queue.add(sub);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"050e6201c3a7d4c351ebc06cbe4822e26e028117","date":1382375603,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MergedIterator#MergedIterator(Iterator[T]...).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public MergedIterator(Iterator<T>... iterators) {\n    this(true, iterators);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","0c7a37580e62e8384ea11b972c15c00221cf64fa"],"050e6201c3a7d4c351ebc06cbe4822e26e028117":["0c7a37580e62e8384ea11b972c15c00221cf64fa"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","0c7a37580e62e8384ea11b972c15c00221cf64fa"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["050e6201c3a7d4c351ebc06cbe4822e26e028117"],"0c7a37580e62e8384ea11b972c15c00221cf64fa":["fb07ab105350b80ed9d63ca64b117084ed7391bc"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","fb07ab105350b80ed9d63ca64b117084ed7391bc","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","0c7a37580e62e8384ea11b972c15c00221cf64fa"],"050e6201c3a7d4c351ebc06cbe4822e26e028117":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"0c7a37580e62e8384ea11b972c15c00221cf64fa":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","050e6201c3a7d4c351ebc06cbe4822e26e028117","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}