{"path":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/MultiFieldQueryParserWrapper#MultiFieldQueryParserWrapper(String[],Analyzer,Map).mjava","commits":[{"id":"b955a87bc7c5daeda1ed56821ec0bec2e8789e44","date":1249270724,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/MultiFieldQueryParserWrapper#MultiFieldQueryParserWrapper(String[],Analyzer,Map).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a MultiFieldQueryParser. Allows passing of a map with term to\n   * Boost, and the boost to apply to each term.\n   * \n   * <p>\n   * It will, when parse(String query) is called, construct a query like this\n   * (assuming the query consists of two terms and you specify the two fields\n   * <code>title</code> and <code>body</code>):\n   * </p>\n   * \n   * <code>\n     * (title:term1 body:term1) (title:term2 body:term2)\n     * </code>\n   * \n   * <p>\n   * When setDefaultOperator(AND_OPERATOR) is set, the result will be:\n   * </p>\n   * \n   * <code>\n     * +(title:term1 body:term1) +(title:term2 body:term2)\n     * </code>\n   * \n   * <p>\n   * When you pass a boost (title=>5 body=>10) you can get\n   * </p>\n   * \n   * <code>\n     * +(title:term1^5.0 body:term1^10.0) +(title:term2^5.0 body:term2^10.0)\n     * </code>\n   * \n   * <p>\n   * In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.\n   * </p>\n   */\n  @SuppressWarnings(\"unchecked\")\npublic MultiFieldQueryParserWrapper(String[] fields, Analyzer analyzer, Map boosts) {\n    this(fields, analyzer);\n    OriginalQueryParserHelper qpHelper = (OriginalQueryParserHelper) getQueryParserHelper();\n\n    qpHelper.setMultiFields(fields);\n    qpHelper.setFieldsBoost(boosts);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/MultiFieldQueryParserWrapper#MultiFieldQueryParserWrapper(String[],Analyzer,Map).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/MultiFieldQueryParserWrapper#MultiFieldQueryParserWrapper(String[],Analyzer,Map).mjava","sourceNew":"  /**\n   * Creates a MultiFieldQueryParser. Allows passing of a map with term to\n   * Boost, and the boost to apply to each term.\n   * \n   * <p>\n   * It will, when parse(String query) is called, construct a query like this\n   * (assuming the query consists of two terms and you specify the two fields\n   * <code>title</code> and <code>body</code>):\n   * </p>\n   * \n   * <code>\n     * (title:term1 body:term1) (title:term2 body:term2)\n     * </code>\n   * \n   * <p>\n   * When setDefaultOperator(AND_OPERATOR) is set, the result will be:\n   * </p>\n   * \n   * <code>\n     * +(title:term1 body:term1) +(title:term2 body:term2)\n     * </code>\n   * \n   * <p>\n   * When you pass a boost (title=>5 body=>10) you can get\n   * </p>\n   * \n   * <code>\n     * +(title:term1^5.0 body:term1^10.0) +(title:term2^5.0 body:term2^10.0)\n     * </code>\n   * \n   * <p>\n   * In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.\n   * </p>\n   */\n  @SuppressWarnings(\"unchecked\")\npublic MultiFieldQueryParserWrapper(String[] fields, Analyzer analyzer, Map boosts) {\n    this(fields, analyzer);\n    StandardQueryParser qpHelper = (StandardQueryParser) getQueryParserHelper();\n\n    qpHelper.setMultiFields(fields);\n    qpHelper.setFieldsBoost(boosts);\n\n  }\n\n","sourceOld":"  /**\n   * Creates a MultiFieldQueryParser. Allows passing of a map with term to\n   * Boost, and the boost to apply to each term.\n   * \n   * <p>\n   * It will, when parse(String query) is called, construct a query like this\n   * (assuming the query consists of two terms and you specify the two fields\n   * <code>title</code> and <code>body</code>):\n   * </p>\n   * \n   * <code>\n     * (title:term1 body:term1) (title:term2 body:term2)\n     * </code>\n   * \n   * <p>\n   * When setDefaultOperator(AND_OPERATOR) is set, the result will be:\n   * </p>\n   * \n   * <code>\n     * +(title:term1 body:term1) +(title:term2 body:term2)\n     * </code>\n   * \n   * <p>\n   * When you pass a boost (title=>5 body=>10) you can get\n   * </p>\n   * \n   * <code>\n     * +(title:term1^5.0 body:term1^10.0) +(title:term2^5.0 body:term2^10.0)\n     * </code>\n   * \n   * <p>\n   * In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.\n   * </p>\n   */\n  @SuppressWarnings(\"unchecked\")\npublic MultiFieldQueryParserWrapper(String[] fields, Analyzer analyzer, Map boosts) {\n    this(fields, analyzer);\n    OriginalQueryParserHelper qpHelper = (OriginalQueryParserHelper) getQueryParserHelper();\n\n    qpHelper.setMultiFields(fields);\n    qpHelper.setFieldsBoost(boosts);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8a848e758754282137f42bf85793c278e250390"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}