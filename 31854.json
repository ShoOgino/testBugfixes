{"path":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#getReader(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#getReader(int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#getReader(int).mjava","sourceNew":"  /** Expert: like {@link #getReader}, except you can\n   *  specify which termInfosIndexDivisor should be used for\n   *  any newly opened readers.\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely. */\n  public IndexReader getReader(int termInfosIndexDivisor) throws IOException {\n    if (infoStream != null) {\n      message(\"flush at getReader\");\n    }\n\n    // Do this up front before flushing so that the readers\n    // obtained during this flush are pooled, the first time\n    // this method is called:\n    poolReaders = true;\n\n    flush(true, true, true);\n    \n    // Prevent segmentInfos from changing while opening the\n    // reader; in theory we could do similar retry logic,\n    // just like we do when loading segments_N\n    synchronized(this) {\n      return new ReadOnlyDirectoryReader(this, segmentInfos, termInfosIndexDivisor);\n    }\n  }\n\n","sourceOld":"  /** Expert: like {@link #getReader}, except you can\n   *  specify which termInfosIndexDivisor should be used for\n   *  any newly opened readers.\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely. */\n  public IndexReader getReader(int termInfosIndexDivisor) throws IOException {\n    if (infoStream != null) {\n      message(\"flush at getReader\");\n    }\n\n    // Do this up front before flushing so that the readers\n    // obtained during this flush are pooled, the first time\n    // this method is called:\n    poolReaders = true;\n\n    flush(true, true, true);\n    \n    // Prevent segmentInfos from changing while opening the\n    // reader; in theory we could do similar retry logic,\n    // just like we do when loading segments_N\n    synchronized(this) {\n      return new ReadOnlyDirectoryReader(this, segmentInfos, termInfosIndexDivisor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#getReader(int).mjava","sourceNew":null,"sourceOld":"  /** Expert: like {@link #getReader}, except you can\n   *  specify which termInfosIndexDivisor should be used for\n   *  any newly opened readers.\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely. */\n  public IndexReader getReader(int termInfosIndexDivisor) throws IOException {\n    if (infoStream != null) {\n      message(\"flush at getReader\");\n    }\n\n    // Do this up front before flushing so that the readers\n    // obtained during this flush are pooled, the first time\n    // this method is called:\n    poolReaders = true;\n\n    flush(true, true, true);\n    \n    // Prevent segmentInfos from changing while opening the\n    // reader; in theory we could do similar retry logic,\n    // just like we do when loading segments_N\n    synchronized(this) {\n      return new ReadOnlyDirectoryReader(this, segmentInfos, termInfosIndexDivisor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}