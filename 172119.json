{"path":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","sourceNew":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, indexDivisor);\n\n    DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    true);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(0) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocsEnum.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random, reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    \n    assertTrue(tdocs.advance(0) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocsEnum.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random, reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocsEnum.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random, reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n    \n    assertTrue(tdocs.advance(5) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocsEnum.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random, reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocsEnum.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random, reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    assertTrue(tdocs.advance(5) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocsEnum.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, indexDivisor);\n\n    DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    true);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(0) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocsEnum.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random, reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    \n    assertTrue(tdocs.advance(0) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocsEnum.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random, reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocsEnum.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random, reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n    \n    assertTrue(tdocs.advance(5) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocsEnum.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random, reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocsEnum.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random, reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    assertTrue(tdocs.advance(5) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocsEnum.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","sourceNew":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, indexDivisor);\n\n    DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    true);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random, reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random, reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random, reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random, reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random, reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, indexDivisor);\n\n    DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    true);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(0) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocsEnum.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random, reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    \n    assertTrue(tdocs.advance(0) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocsEnum.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random, reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocsEnum.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random, reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n    \n    assertTrue(tdocs.advance(5) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocsEnum.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random, reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocsEnum.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random, reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    assertTrue(tdocs.advance(5) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocsEnum.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["07c6861cb029cd251d930aa4c4578c8ca21aa957"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","sourceNew":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, indexDivisor);\n\n    DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    true);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random, reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random, reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random, reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random, reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random, reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, indexDivisor);\n\n    DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    true);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(0) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocsEnum.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random, reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    \n    assertTrue(tdocs.advance(0) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocsEnum.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random, reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocsEnum.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random, reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n    \n    assertTrue(tdocs.advance(5) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocsEnum.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random, reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocsEnum.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random, reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    assertTrue(tdocs.advance(5) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocsEnum.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocsEnum.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","sourceNew":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, indexDivisor);\n\n    DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    true);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, indexDivisor);\n\n    DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    true);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random, reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random, reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random, reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random, reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random, reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","sourceNew":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir, indexDivisor);\n\n    DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    true);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, indexDivisor);\n\n    DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    true);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","sourceNew":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir, indexDivisor);\n\n    DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    DocsEnum.FLAG_FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir, indexDivisor);\n\n    DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    true);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","sourceNew":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir, indexDivisor);\n\n    DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    DocsEnum.FLAG_FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir, indexDivisor);\n\n    DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    true);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","sourceNew":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir, indexDivisor);\n\n    DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    DocsEnum.FLAG_FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir, indexDivisor);\n\n    DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    true);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           true);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           false);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07c6861cb029cd251d930aa4c4578c8ca21aa957","date":1364984125,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","sourceNew":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir, indexDivisor);\n\n    DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    DocsEnum.FLAG_FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(2) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(12) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(28) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir, indexDivisor);\n\n    DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    DocsEnum.FLAG_FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","sourceNew":null,"sourceOld":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir, indexDivisor);\n\n    DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    DocsEnum.FLAG_FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(2) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(12) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(28) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","sourceNew":null,"sourceOld":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.forceMerge(1);\n    writer.close();\n    \n    IndexReader reader = DirectoryReader.open(dir, indexDivisor);\n\n    DocsEnum tdocs = _TestUtil.docs(random(), reader,\n                                    ta.field(),\n                                    new BytesRef(ta.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    DocsEnum.FLAG_FREQS);\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(1, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(2) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           ta.field(),\n                           new BytesRef(ta.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           0);\n    \n    assertTrue(tdocs.advance(0) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, tdocs.docID());\n    assertTrue(tdocs.advance(4) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(4, tdocs.docID());\n    assertTrue(tdocs.advance(9) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(9, tdocs.docID());\n    assertFalse(tdocs.advance(10) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(11, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(12) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(12, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tb.field(),\n                           new BytesRef(tb.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n    \n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(10, tdocs.docID());\n    assertTrue(tdocs.advance(15) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(15, tdocs.docID());\n    assertTrue(tdocs.advance(24) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(24, tdocs.docID());\n    assertTrue(tdocs.advance(25) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(25, tdocs.docID());\n    assertFalse(tdocs.advance(26) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           DocsEnum.FLAG_FREQS);\n\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(27, tdocs.docID());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.advance(28) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(28, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    //without next\n    tdocs = _TestUtil.docs(random(), reader,\n                           tc.field(),\n                           new BytesRef(tc.text()),\n                           MultiFields.getLiveDocs(reader),\n                           null,\n                           0);\n    assertTrue(tdocs.advance(5) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(26, tdocs.docID());\n    assertTrue(tdocs.advance(40) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(40, tdocs.docID());\n    assertTrue(tdocs.advance(57) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(57, tdocs.docID());\n    assertTrue(tdocs.advance(74) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(74, tdocs.docID());\n    assertTrue(tdocs.advance(75) != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(75, tdocs.docID());\n    assertFalse(tdocs.advance(76) != DocIdSetIterator.NO_MORE_DOCS);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"a45bec74b98f6fc05f52770cfb425739e6563960":["07c6861cb029cd251d930aa4c4578c8ca21aa957"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"07c6861cb029cd251d930aa4c4578c8ca21aa957":["02331260bb246364779cb6f04919ca47900d01bb"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","02331260bb246364779cb6f04919ca47900d01bb"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["07c6861cb029cd251d930aa4c4578c8ca21aa957"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","02331260bb246364779cb6f04919ca47900d01bb"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a45bec74b98f6fc05f52770cfb425739e6563960"],"02331260bb246364779cb6f04919ca47900d01bb":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a45bec74b98f6fc05f52770cfb425739e6563960":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"07c6861cb029cd251d930aa4c4578c8ca21aa957":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"02331260bb246364779cb6f04919ca47900d01bb":["07c6861cb029cd251d930aa4c4578c8ca21aa957","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}