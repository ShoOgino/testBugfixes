{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testMethodStream().mjava","commits":[{"id":"3661d6742eed69ff6cc30ea2538d572624a7cdf8","date":1472676864,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testMethodStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testStatsSimple().mjava","sourceNew":"  @Test\n  public void testMethodStream() throws Exception {\n    Client client = Client.localClient();\n    indexSimple(client);\n\n    // test multiple json.facet commands\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{x:'sum(num_d)'}\"\n            , \"json.facet\", \"{y:'min(num_d)'}\"\n        )\n        , \"facets=={count:6 , x:3.0, y:-9.0 }\"\n    );\n\n\n    // test streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream }}\" + // won't stream; need sort:index asc\n                              \", cat2:{terms:{field:'cat_s', method:stream, sort:'index asc' }}\" +\n                              \", cat3:{terms:{field:'cat_s', method:stream, sort:'index asc', mincount:3 }}\" + // mincount\n                              \", cat4:{terms:{field:'cat_s', method:stream, sort:'index asc', prefix:B }}\" + // prefix\n                              \", cat5:{terms:{field:'cat_s', method:stream, sort:'index asc', offset:1 }}\" + // offset\n                \" }\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:B, count:3},{val:A, count:2}]}\" +\n            \", cat2:{buckets:[{val:A, count:2},{val:B, count:3}]}\" +\n            \", cat3:{buckets:[{val:B, count:3}]}\" +\n            \", cat4:{buckets:[{val:B, count:3}]}\" +\n            \", cat5:{buckets:[{val:B, count:3}]}\" +\n            \" }\"\n    );\n\n\n    // test nested streaming under non-streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n        , \"json.facet\", \"{   cat:{terms:{field:'cat_s', sort:'index asc', facet:{where:{terms:{field:where_s,method:stream,sort:'index asc'}}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n        \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1},{val:NY,count:1}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2},{val:NY,count:1}]}    }]}\"\n        + \"}\"\n    );\n\n    // test nested streaming under streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{where:{terms:{field:where_s,method:stream,sort:'index asc'}}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1},{val:NY,count:1}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2},{val:NY,count:1}]}    }]}\"\n            + \"}\"\n    );\n\n    // test nested streaming with stats under streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{  where:{terms:{field:where_s,method:stream,sort:'index asc',sort:'index asc', facet:{x:'max(num_d)'}     }}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1,x:2.0},{val:NY,count:1,x:4.0}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2,x:11.0},{val:NY,count:1,x:-5.0}]}    }]}\"\n            + \"}\"\n    );\n\n    // test nested streaming with stats under streaming with stats\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\",\n            \"facet\",\"true\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{ y:'min(num_d)',  where:{terms:{field:where_s,method:stream,sort:'index asc', facet:{x:'max(num_d)'}     }}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, y:2.0, where:{buckets:[{val:NJ,count:1,x:2.0},{val:NY,count:1,x:4.0}]}   },{val:B, count:3, y:-9.0, where:{buckets:[{val:NJ,count:2,x:11.0},{val:NY,count:1,x:-5.0}]}    }]}\"\n            + \"}\"\n    );\n\n\n    assertJQ(req(\"q\", \"*:*\", \"fq\",\"cat_s:A\")\n        , \"response/numFound==2\"\n    );\n  }\n\n","sourceOld":"  public void testStatsSimple() throws Exception {\n    Client client = Client.localClient();\n    indexSimple(client);\n\n    // test multiple json.facet commands\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{x:'sum(num_d)'}\"\n            , \"json.facet\", \"{y:'min(num_d)'}\"\n        )\n        , \"facets=={count:6 , x:3.0, y:-9.0 }\"\n    );\n\n\n    // test streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream }}\" +\n                              \", cat2:{terms:{field:'cat_s', method:stream, sort:'index asc' }}\" + // default sort\n                              \", cat3:{terms:{field:'cat_s', method:stream, mincount:3 }}\" + // mincount\n                              \", cat4:{terms:{field:'cat_s', method:stream, prefix:B }}\" + // prefix\n                              \", cat5:{terms:{field:'cat_s', method:stream, offset:1 }}\" + // offset\n                \" }\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2},{val:B, count:3}]}\" +\n            \", cat2:{buckets:[{val:A, count:2},{val:B, count:3}]}\" +\n            \", cat3:{buckets:[{val:B, count:3}]}\" +\n            \", cat4:{buckets:[{val:B, count:3}]}\" +\n            \", cat5:{buckets:[{val:B, count:3}]}\" +\n            \" }\"\n    );\n\n\n    // test nested streaming under non-streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n        , \"json.facet\", \"{   cat:{terms:{field:'cat_s', sort:'index asc', facet:{where:{terms:{field:where_s,method:stream}}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n        \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1},{val:NY,count:1}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2},{val:NY,count:1}]}    }]}\"\n        + \"}\"\n    );\n\n    // test nested streaming under streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream, facet:{where:{terms:{field:where_s,method:stream}}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1},{val:NY,count:1}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2},{val:NY,count:1}]}    }]}\"\n            + \"}\"\n    );\n\n    // test nested streaming with stats under streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream, facet:{  where:{terms:{field:where_s,method:stream, facet:{x:'max(num_d)'}     }}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1,x:2.0},{val:NY,count:1,x:4.0}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2,x:11.0},{val:NY,count:1,x:-5.0}]}    }]}\"\n            + \"}\"\n    );\n\n    // test nested streaming with stats under streaming with stats\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\",\n            \"facet\",\"true\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream, facet:{ y:'min(num_d)',  where:{terms:{field:where_s,method:stream, facet:{x:'max(num_d)'}     }}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, y:2.0, where:{buckets:[{val:NJ,count:1,x:2.0},{val:NY,count:1,x:4.0}]}   },{val:B, count:3, y:-9.0, where:{buckets:[{val:NJ,count:2,x:11.0},{val:NY,count:1,x:-5.0}]}    }]}\"\n            + \"}\"\n    );\n\n\n    assertJQ(req(\"q\", \"*:*\", \"fq\",\"cat_s:A\")\n        , \"response/numFound==2\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testMethodStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testStatsSimple().mjava","sourceNew":"  @Test\n  public void testMethodStream() throws Exception {\n    Client client = Client.localClient();\n    indexSimple(client);\n\n    // test multiple json.facet commands\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{x:'sum(num_d)'}\"\n            , \"json.facet\", \"{y:'min(num_d)'}\"\n        )\n        , \"facets=={count:6 , x:3.0, y:-9.0 }\"\n    );\n\n\n    // test streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream }}\" + // won't stream; need sort:index asc\n                              \", cat2:{terms:{field:'cat_s', method:stream, sort:'index asc' }}\" +\n                              \", cat3:{terms:{field:'cat_s', method:stream, sort:'index asc', mincount:3 }}\" + // mincount\n                              \", cat4:{terms:{field:'cat_s', method:stream, sort:'index asc', prefix:B }}\" + // prefix\n                              \", cat5:{terms:{field:'cat_s', method:stream, sort:'index asc', offset:1 }}\" + // offset\n                \" }\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:B, count:3},{val:A, count:2}]}\" +\n            \", cat2:{buckets:[{val:A, count:2},{val:B, count:3}]}\" +\n            \", cat3:{buckets:[{val:B, count:3}]}\" +\n            \", cat4:{buckets:[{val:B, count:3}]}\" +\n            \", cat5:{buckets:[{val:B, count:3}]}\" +\n            \" }\"\n    );\n\n\n    // test nested streaming under non-streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n        , \"json.facet\", \"{   cat:{terms:{field:'cat_s', sort:'index asc', facet:{where:{terms:{field:where_s,method:stream,sort:'index asc'}}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n        \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1},{val:NY,count:1}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2},{val:NY,count:1}]}    }]}\"\n        + \"}\"\n    );\n\n    // test nested streaming under streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{where:{terms:{field:where_s,method:stream,sort:'index asc'}}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1},{val:NY,count:1}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2},{val:NY,count:1}]}    }]}\"\n            + \"}\"\n    );\n\n    // test nested streaming with stats under streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{  where:{terms:{field:where_s,method:stream,sort:'index asc',sort:'index asc', facet:{x:'max(num_d)'}     }}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1,x:2.0},{val:NY,count:1,x:4.0}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2,x:11.0},{val:NY,count:1,x:-5.0}]}    }]}\"\n            + \"}\"\n    );\n\n    // test nested streaming with stats under streaming with stats\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\",\n            \"facet\",\"true\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{ y:'min(num_d)',  where:{terms:{field:where_s,method:stream,sort:'index asc', facet:{x:'max(num_d)'}     }}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, y:2.0, where:{buckets:[{val:NJ,count:1,x:2.0},{val:NY,count:1,x:4.0}]}   },{val:B, count:3, y:-9.0, where:{buckets:[{val:NJ,count:2,x:11.0},{val:NY,count:1,x:-5.0}]}    }]}\"\n            + \"}\"\n    );\n\n\n    assertJQ(req(\"q\", \"*:*\", \"fq\",\"cat_s:A\")\n        , \"response/numFound==2\"\n    );\n  }\n\n","sourceOld":"  public void testStatsSimple() throws Exception {\n    Client client = Client.localClient();\n    indexSimple(client);\n\n    // test multiple json.facet commands\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{x:'sum(num_d)'}\"\n            , \"json.facet\", \"{y:'min(num_d)'}\"\n        )\n        , \"facets=={count:6 , x:3.0, y:-9.0 }\"\n    );\n\n\n    // test streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream }}\" +\n                              \", cat2:{terms:{field:'cat_s', method:stream, sort:'index asc' }}\" + // default sort\n                              \", cat3:{terms:{field:'cat_s', method:stream, mincount:3 }}\" + // mincount\n                              \", cat4:{terms:{field:'cat_s', method:stream, prefix:B }}\" + // prefix\n                              \", cat5:{terms:{field:'cat_s', method:stream, offset:1 }}\" + // offset\n                \" }\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2},{val:B, count:3}]}\" +\n            \", cat2:{buckets:[{val:A, count:2},{val:B, count:3}]}\" +\n            \", cat3:{buckets:[{val:B, count:3}]}\" +\n            \", cat4:{buckets:[{val:B, count:3}]}\" +\n            \", cat5:{buckets:[{val:B, count:3}]}\" +\n            \" }\"\n    );\n\n\n    // test nested streaming under non-streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n        , \"json.facet\", \"{   cat:{terms:{field:'cat_s', sort:'index asc', facet:{where:{terms:{field:where_s,method:stream}}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n        \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1},{val:NY,count:1}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2},{val:NY,count:1}]}    }]}\"\n        + \"}\"\n    );\n\n    // test nested streaming under streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream, facet:{where:{terms:{field:where_s,method:stream}}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1},{val:NY,count:1}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2},{val:NY,count:1}]}    }]}\"\n            + \"}\"\n    );\n\n    // test nested streaming with stats under streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream, facet:{  where:{terms:{field:where_s,method:stream, facet:{x:'max(num_d)'}     }}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1,x:2.0},{val:NY,count:1,x:4.0}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2,x:11.0},{val:NY,count:1,x:-5.0}]}    }]}\"\n            + \"}\"\n    );\n\n    // test nested streaming with stats under streaming with stats\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\",\n            \"facet\",\"true\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream, facet:{ y:'min(num_d)',  where:{terms:{field:where_s,method:stream, facet:{x:'max(num_d)'}     }}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, y:2.0, where:{buckets:[{val:NJ,count:1,x:2.0},{val:NY,count:1,x:4.0}]}   },{val:B, count:3, y:-9.0, where:{buckets:[{val:NJ,count:2,x:11.0},{val:NY,count:1,x:-5.0}]}    }]}\"\n            + \"}\"\n    );\n\n\n    assertJQ(req(\"q\", \"*:*\", \"fq\",\"cat_s:A\")\n        , \"response/numFound==2\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testMethodStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMethodStream() throws Exception {\n    Client client = Client.localClient();\n    indexSimple(client);\n\n    // test multiple json.facet commands\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{x:'sum(num_d)'}\"\n            , \"json.facet\", \"{y:'min(num_d)'}\"\n        )\n        , \"facets=={count:6 , x:3.0, y:-9.0 }\"\n    );\n\n\n    // test streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream }}\" + // won't stream; need sort:index asc\n                              \", cat2:{terms:{field:'cat_s', method:stream, sort:'index asc' }}\" +\n                              \", cat3:{terms:{field:'cat_s', method:stream, sort:'index asc', mincount:3 }}\" + // mincount\n                              \", cat4:{terms:{field:'cat_s', method:stream, sort:'index asc', prefix:B }}\" + // prefix\n                              \", cat5:{terms:{field:'cat_s', method:stream, sort:'index asc', offset:1 }}\" + // offset\n                \" }\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:B, count:3},{val:A, count:2}]}\" +\n            \", cat2:{buckets:[{val:A, count:2},{val:B, count:3}]}\" +\n            \", cat3:{buckets:[{val:B, count:3}]}\" +\n            \", cat4:{buckets:[{val:B, count:3}]}\" +\n            \", cat5:{buckets:[{val:B, count:3}]}\" +\n            \" }\"\n    );\n\n\n    // test nested streaming under non-streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n        , \"json.facet\", \"{   cat:{terms:{field:'cat_s', sort:'index asc', facet:{where:{terms:{field:where_s,method:stream,sort:'index asc'}}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n        \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1},{val:NY,count:1}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2},{val:NY,count:1}]}    }]}\"\n        + \"}\"\n    );\n\n    // test nested streaming under streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{where:{terms:{field:where_s,method:stream,sort:'index asc'}}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1},{val:NY,count:1}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2},{val:NY,count:1}]}    }]}\"\n            + \"}\"\n    );\n\n    // test nested streaming with stats under streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{  where:{terms:{field:where_s,method:stream,sort:'index asc',sort:'index asc', facet:{x:'max(num_d)'}     }}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1,x:2.0},{val:NY,count:1,x:4.0}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2,x:11.0},{val:NY,count:1,x:-5.0}]}    }]}\"\n            + \"}\"\n    );\n\n    // test nested streaming with stats under streaming with stats\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\",\n            \"facet\",\"true\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{ y:'min(num_d)',  where:{terms:{field:where_s,method:stream,sort:'index asc', facet:{x:'max(num_d)'}     }}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, y:2.0, where:{buckets:[{val:NJ,count:1,x:2.0},{val:NY,count:1,x:4.0}]}   },{val:B, count:3, y:-9.0, where:{buckets:[{val:NJ,count:2,x:11.0},{val:NY,count:1,x:-5.0}]}    }]}\"\n            + \"}\"\n    );\n\n\n    assertJQ(req(\"q\", \"*:*\", \"fq\",\"cat_s:A\")\n        , \"response/numFound==2\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testMethodStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMethodStream() throws Exception {\n    Client client = Client.localClient();\n    indexSimple(client);\n\n    // test multiple json.facet commands\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{x:'sum(num_d)'}\"\n            , \"json.facet\", \"{y:'min(num_d)'}\"\n        )\n        , \"facets=={count:6 , x:3.0, y:-9.0 }\"\n    );\n\n\n    // test streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream }}\" + // won't stream; need sort:index asc\n                              \", cat2:{terms:{field:'cat_s', method:stream, sort:'index asc' }}\" +\n                              \", cat3:{terms:{field:'cat_s', method:stream, sort:'index asc', mincount:3 }}\" + // mincount\n                              \", cat4:{terms:{field:'cat_s', method:stream, sort:'index asc', prefix:B }}\" + // prefix\n                              \", cat5:{terms:{field:'cat_s', method:stream, sort:'index asc', offset:1 }}\" + // offset\n                \" }\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:B, count:3},{val:A, count:2}]}\" +\n            \", cat2:{buckets:[{val:A, count:2},{val:B, count:3}]}\" +\n            \", cat3:{buckets:[{val:B, count:3}]}\" +\n            \", cat4:{buckets:[{val:B, count:3}]}\" +\n            \", cat5:{buckets:[{val:B, count:3}]}\" +\n            \" }\"\n    );\n\n\n    // test nested streaming under non-streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n        , \"json.facet\", \"{   cat:{terms:{field:'cat_s', sort:'index asc', facet:{where:{terms:{field:where_s,method:stream,sort:'index asc'}}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n        \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1},{val:NY,count:1}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2},{val:NY,count:1}]}    }]}\"\n        + \"}\"\n    );\n\n    // test nested streaming under streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{where:{terms:{field:where_s,method:stream,sort:'index asc'}}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1},{val:NY,count:1}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2},{val:NY,count:1}]}    }]}\"\n            + \"}\"\n    );\n\n    // test nested streaming with stats under streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{  where:{terms:{field:where_s,method:stream,sort:'index asc',sort:'index asc', facet:{x:'max(num_d)'}     }}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1,x:2.0},{val:NY,count:1,x:4.0}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2,x:11.0},{val:NY,count:1,x:-5.0}]}    }]}\"\n            + \"}\"\n    );\n\n    // test nested streaming with stats under streaming with stats\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\",\n            \"facet\",\"true\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{ y:'min(num_d)',  where:{terms:{field:where_s,method:stream,sort:'index asc', facet:{x:'max(num_d)'}     }}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, y:2.0, where:{buckets:[{val:NJ,count:1,x:2.0},{val:NY,count:1,x:4.0}]}   },{val:B, count:3, y:-9.0, where:{buckets:[{val:NJ,count:2,x:11.0},{val:NY,count:1,x:-5.0}]}    }]}\"\n            + \"}\"\n    );\n\n\n    assertJQ(req(\"q\", \"*:*\", \"fq\",\"cat_s:A\")\n        , \"response/numFound==2\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fa9270995767ab6c92b235a5a62267aa426f47d","date":1575523102,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testMethodStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testMethodStream().mjava","sourceNew":"  @Test\n  public void testMethodStream() throws Exception {\n    Client client = Client.localClient();\n    indexSimple(client);\n\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{x:'sum(num_is)'}\")\n        , \"facets=={count:6 , x:,10.0}\"\n    );\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{x:'min(num_is)'}\")\n        , \"facets=={count:6 , x:,-9}\"\n    );\n\n    // test multiple json.facet commands\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n        , \"json.facet\", \"{x:'sum(num_d)'}\"\n        , \"json.facet\", \"{y:'min(num_d)'}\"\n        , \"json.facet\", \"{z:'min(num_is)'}\"\n        )\n        , \"facets=={count:6 , x:3.0, y:-9.0, z:-9 }\"\n    );\n\n\n    // test streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream }}\" + // won't stream; need sort:index asc\n                              \", cat2:{terms:{field:'cat_s', method:stream, sort:'index asc' }}\" +\n                              \", cat3:{terms:{field:'cat_s', method:stream, sort:'index asc', mincount:3 }}\" + // mincount\n                              \", cat4:{terms:{field:'cat_s', method:stream, sort:'index asc', prefix:B }}\" + // prefix\n                              \", cat5:{terms:{field:'cat_s', method:stream, sort:'index asc', offset:1 }}\" + // offset\n                \" }\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:B, count:3},{val:A, count:2}]}\" +\n            \", cat2:{buckets:[{val:A, count:2},{val:B, count:3}]}\" +\n            \", cat3:{buckets:[{val:B, count:3}]}\" +\n            \", cat4:{buckets:[{val:B, count:3}]}\" +\n            \", cat5:{buckets:[{val:B, count:3}]}\" +\n            \" }\"\n    );\n\n\n    // test nested streaming under non-streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n        , \"json.facet\", \"{   cat:{terms:{field:'cat_s', sort:'index asc', facet:{where:{terms:{field:where_s,method:stream,sort:'index asc'}}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n        \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1},{val:NY,count:1}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2},{val:NY,count:1}]}    }]}\"\n        + \"}\"\n    );\n\n    // test nested streaming under streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{where:{terms:{field:where_s,method:stream,sort:'index asc'}}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1},{val:NY,count:1}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2},{val:NY,count:1}]}    }]}\"\n            + \"}\"\n    );\n\n    // test nested streaming with stats under streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{  where:{terms:{field:where_s,method:stream,sort:'index asc',sort:'index asc', facet:{x:'max(num_d)', y:'sum(num_is)'}     }}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1,x:2.0,y:5.0},{val:NY,count:1,x:4.0,y:6.0}]}   },\" +\n            \"{val:B, count:3, where:{buckets:[{val:NJ,count:2,x:11.0,y:4.0},{val:NY,count:1,x:-5.0,y:-5.0}]}    }]}\"\n            + \"}\"\n    );\n\n    // test nested streaming with stats under streaming with stats\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\",\n            \"facet\",\"true\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{ y:'min(num_d)',  where:{terms:{field:where_s,method:stream,sort:'index asc', facet:{x:'max(num_d)'}     }}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, y:2.0, where:{buckets:[{val:NJ,count:1,x:2.0},{val:NY,count:1,x:4.0}]}   },{val:B, count:3, y:-9.0, where:{buckets:[{val:NJ,count:2,x:11.0},{val:NY,count:1,x:-5.0}]}    }]}\"\n            + \"}\"\n    );\n\n\n    assertJQ(req(\"q\", \"*:*\", \"fq\",\"cat_s:A\")\n        , \"response/numFound==2\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testMethodStream() throws Exception {\n    Client client = Client.localClient();\n    indexSimple(client);\n\n    // test multiple json.facet commands\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{x:'sum(num_d)'}\"\n            , \"json.facet\", \"{y:'min(num_d)'}\"\n        )\n        , \"facets=={count:6 , x:3.0, y:-9.0 }\"\n    );\n\n\n    // test streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream }}\" + // won't stream; need sort:index asc\n                              \", cat2:{terms:{field:'cat_s', method:stream, sort:'index asc' }}\" +\n                              \", cat3:{terms:{field:'cat_s', method:stream, sort:'index asc', mincount:3 }}\" + // mincount\n                              \", cat4:{terms:{field:'cat_s', method:stream, sort:'index asc', prefix:B }}\" + // prefix\n                              \", cat5:{terms:{field:'cat_s', method:stream, sort:'index asc', offset:1 }}\" + // offset\n                \" }\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:B, count:3},{val:A, count:2}]}\" +\n            \", cat2:{buckets:[{val:A, count:2},{val:B, count:3}]}\" +\n            \", cat3:{buckets:[{val:B, count:3}]}\" +\n            \", cat4:{buckets:[{val:B, count:3}]}\" +\n            \", cat5:{buckets:[{val:B, count:3}]}\" +\n            \" }\"\n    );\n\n\n    // test nested streaming under non-streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n        , \"json.facet\", \"{   cat:{terms:{field:'cat_s', sort:'index asc', facet:{where:{terms:{field:where_s,method:stream,sort:'index asc'}}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n        \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1},{val:NY,count:1}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2},{val:NY,count:1}]}    }]}\"\n        + \"}\"\n    );\n\n    // test nested streaming under streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{where:{terms:{field:where_s,method:stream,sort:'index asc'}}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1},{val:NY,count:1}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2},{val:NY,count:1}]}    }]}\"\n            + \"}\"\n    );\n\n    // test nested streaming with stats under streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{  where:{terms:{field:where_s,method:stream,sort:'index asc',sort:'index asc', facet:{x:'max(num_d)'}     }}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1,x:2.0},{val:NY,count:1,x:4.0}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2,x:11.0},{val:NY,count:1,x:-5.0}]}    }]}\"\n            + \"}\"\n    );\n\n    // test nested streaming with stats under streaming with stats\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\",\n            \"facet\",\"true\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{ y:'min(num_d)',  where:{terms:{field:where_s,method:stream,sort:'index asc', facet:{x:'max(num_d)'}     }}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, y:2.0, where:{buckets:[{val:NJ,count:1,x:2.0},{val:NY,count:1,x:4.0}]}   },{val:B, count:3, y:-9.0, where:{buckets:[{val:NJ,count:2,x:11.0},{val:NY,count:1,x:-5.0}]}    }]}\"\n            + \"}\"\n    );\n\n\n    assertJQ(req(\"q\", \"*:*\", \"fq\",\"cat_s:A\")\n        , \"response/numFound==2\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a90f561fc609ec007ba18b10dea9191dbbd71831","date":1575541054,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testMethodStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testMethodStream().mjava","sourceNew":"  @Test\n  public void testMethodStream() throws Exception {\n    Client client = Client.localClient();\n    indexSimple(client);\n\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{x:'sum(num_is)'}\")\n        , \"facets=={count:6 , x:,10.0}\"\n    );\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{x:'min(num_is)'}\")\n        , \"facets=={count:6 , x:,-9}\"\n    );\n\n    // test multiple json.facet commands\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n        , \"json.facet\", \"{x:'sum(num_d)'}\"\n        , \"json.facet\", \"{y:'min(num_d)'}\"\n        , \"json.facet\", \"{z:'min(num_is)'}\"\n        )\n        , \"facets=={count:6 , x:3.0, y:-9.0, z:-9 }\"\n    );\n\n\n    // test streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream }}\" + // won't stream; need sort:index asc\n                              \", cat2:{terms:{field:'cat_s', method:stream, sort:'index asc' }}\" +\n                              \", cat3:{terms:{field:'cat_s', method:stream, sort:'index asc', mincount:3 }}\" + // mincount\n                              \", cat4:{terms:{field:'cat_s', method:stream, sort:'index asc', prefix:B }}\" + // prefix\n                              \", cat5:{terms:{field:'cat_s', method:stream, sort:'index asc', offset:1 }}\" + // offset\n                \" }\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:B, count:3},{val:A, count:2}]}\" +\n            \", cat2:{buckets:[{val:A, count:2},{val:B, count:3}]}\" +\n            \", cat3:{buckets:[{val:B, count:3}]}\" +\n            \", cat4:{buckets:[{val:B, count:3}]}\" +\n            \", cat5:{buckets:[{val:B, count:3}]}\" +\n            \" }\"\n    );\n\n\n    // test nested streaming under non-streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n        , \"json.facet\", \"{   cat:{terms:{field:'cat_s', sort:'index asc', facet:{where:{terms:{field:where_s,method:stream,sort:'index asc'}}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n        \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1},{val:NY,count:1}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2},{val:NY,count:1}]}    }]}\"\n        + \"}\"\n    );\n\n    // test nested streaming under streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{where:{terms:{field:where_s,method:stream,sort:'index asc'}}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1},{val:NY,count:1}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2},{val:NY,count:1}]}    }]}\"\n            + \"}\"\n    );\n\n    // test nested streaming with stats under streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{  where:{terms:{field:where_s,method:stream,sort:'index asc',sort:'index asc', facet:{x:'max(num_d)', y:'sum(num_is)'}     }}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1,x:2.0,y:5.0},{val:NY,count:1,x:4.0,y:6.0}]}   },\" +\n            \"{val:B, count:3, where:{buckets:[{val:NJ,count:2,x:11.0,y:4.0},{val:NY,count:1,x:-5.0,y:-5.0}]}    }]}\"\n            + \"}\"\n    );\n\n    // test nested streaming with stats under streaming with stats\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\",\n            \"facet\",\"true\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{ y:'min(num_d)',  where:{terms:{field:where_s,method:stream,sort:'index asc', facet:{x:'max(num_d)'}     }}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, y:2.0, where:{buckets:[{val:NJ,count:1,x:2.0},{val:NY,count:1,x:4.0}]}   },{val:B, count:3, y:-9.0, where:{buckets:[{val:NJ,count:2,x:11.0},{val:NY,count:1,x:-5.0}]}    }]}\"\n            + \"}\"\n    );\n\n\n    assertJQ(req(\"q\", \"*:*\", \"fq\",\"cat_s:A\")\n        , \"response/numFound==2\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testMethodStream() throws Exception {\n    Client client = Client.localClient();\n    indexSimple(client);\n\n    // test multiple json.facet commands\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{x:'sum(num_d)'}\"\n            , \"json.facet\", \"{y:'min(num_d)'}\"\n        )\n        , \"facets=={count:6 , x:3.0, y:-9.0 }\"\n    );\n\n\n    // test streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream }}\" + // won't stream; need sort:index asc\n                              \", cat2:{terms:{field:'cat_s', method:stream, sort:'index asc' }}\" +\n                              \", cat3:{terms:{field:'cat_s', method:stream, sort:'index asc', mincount:3 }}\" + // mincount\n                              \", cat4:{terms:{field:'cat_s', method:stream, sort:'index asc', prefix:B }}\" + // prefix\n                              \", cat5:{terms:{field:'cat_s', method:stream, sort:'index asc', offset:1 }}\" + // offset\n                \" }\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:B, count:3},{val:A, count:2}]}\" +\n            \", cat2:{buckets:[{val:A, count:2},{val:B, count:3}]}\" +\n            \", cat3:{buckets:[{val:B, count:3}]}\" +\n            \", cat4:{buckets:[{val:B, count:3}]}\" +\n            \", cat5:{buckets:[{val:B, count:3}]}\" +\n            \" }\"\n    );\n\n\n    // test nested streaming under non-streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n        , \"json.facet\", \"{   cat:{terms:{field:'cat_s', sort:'index asc', facet:{where:{terms:{field:where_s,method:stream,sort:'index asc'}}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n        \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1},{val:NY,count:1}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2},{val:NY,count:1}]}    }]}\"\n        + \"}\"\n    );\n\n    // test nested streaming under streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{where:{terms:{field:where_s,method:stream,sort:'index asc'}}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1},{val:NY,count:1}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2},{val:NY,count:1}]}    }]}\"\n            + \"}\"\n    );\n\n    // test nested streaming with stats under streaming\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{  where:{terms:{field:where_s,method:stream,sort:'index asc',sort:'index asc', facet:{x:'max(num_d)'}     }}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, where:{buckets:[{val:NJ,count:1,x:2.0},{val:NY,count:1,x:4.0}]}   },{val:B, count:3, where:{buckets:[{val:NJ,count:2,x:11.0},{val:NY,count:1,x:-5.0}]}    }]}\"\n            + \"}\"\n    );\n\n    // test nested streaming with stats under streaming with stats\n    assertJQ(req(\"q\", \"*:*\", \"rows\", \"0\",\n            \"facet\",\"true\"\n            , \"json.facet\", \"{   cat:{terms:{field:'cat_s', method:stream,sort:'index asc', facet:{ y:'min(num_d)',  where:{terms:{field:where_s,method:stream,sort:'index asc', facet:{x:'max(num_d)'}     }}}   }}}\"\n        )\n        , \"facets=={count:6 \" +\n            \", cat :{buckets:[{val:A, count:2, y:2.0, where:{buckets:[{val:NJ,count:1,x:2.0},{val:NY,count:1,x:4.0}]}   },{val:B, count:3, y:-9.0, where:{buckets:[{val:NJ,count:2,x:11.0},{val:NY,count:1,x:-5.0}]}    }]}\"\n            + \"}\"\n    );\n\n\n    assertJQ(req(\"q\", \"*:*\", \"fq\",\"cat_s:A\")\n        , \"response/numFound==2\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2fa9270995767ab6c92b235a5a62267aa426f47d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a90f561fc609ec007ba18b10dea9191dbbd71831":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","2fa9270995767ab6c92b235a5a62267aa426f47d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3661d6742eed69ff6cc30ea2538d572624a7cdf8"],"3661d6742eed69ff6cc30ea2538d572624a7cdf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bc8f206328a706450934717bec7ccc22ad166fc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3661d6742eed69ff6cc30ea2538d572624a7cdf8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fa9270995767ab6c92b235a5a62267aa426f47d"]},"commit2Childs":{"2fa9270995767ab6c92b235a5a62267aa426f47d":["a90f561fc609ec007ba18b10dea9191dbbd71831","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a90f561fc609ec007ba18b10dea9191dbbd71831":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["2fa9270995767ab6c92b235a5a62267aa426f47d","a90f561fc609ec007ba18b10dea9191dbbd71831","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","3661d6742eed69ff6cc30ea2538d572624a7cdf8","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3661d6742eed69ff6cc30ea2538d572624a7cdf8":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a90f561fc609ec007ba18b10dea9191dbbd71831","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}