{"path":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","sourceNew":"  @Test\n  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = Short.valueOf((short) minId);\n    Short maxIdO = Short.valueOf((short) maxId);\n    Short medIdO = Short.valueOf((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",Short.valueOf(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,Short.valueOf(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = Short.valueOf((short) minId);\n    Short maxIdO = Short.valueOf((short) maxId);\n    Short medIdO = Short.valueOf((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",Short.valueOf(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,Short.valueOf(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = Short.valueOf((short) minId);\n    Short maxIdO = Short.valueOf((short) maxId);\n    Short medIdO = Short.valueOf((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",Short.valueOf(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,Short.valueOf(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterShorts().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testFieldCacheRangeFilterShorts() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Short minIdO = Short.valueOf((short) minId);\n    Short maxIdO = Short.valueOf((short) maxId);\n    Short medIdO = Short.valueOf((short) medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",Short.valueOf(Short.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",null,Short.valueOf(Short.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newShortRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","59a0020b413d44dd79d85d7a66ed5004265fb453"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59a0020b413d44dd79d85d7a66ed5004265fb453"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}