{"path":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointExactEquals().mjava","commits":[{"id":"5839bca64b33c24668e37476ee168d00dc0bb96d","date":1457536035,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointExactEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testPointExactEquals() {\n    Query q = IntPoint.newExactQuery(\"a\", 1000);\n    assertEquals(q, IntPoint.newExactQuery(\"a\", 1000));\n    assertFalse(q.equals(IntPoint.newExactQuery(\"a\", 1)));\n\n    q = LongPoint.newExactQuery(\"a\", 1000);\n    assertEquals(q, LongPoint.newExactQuery(\"a\", 1000));\n    assertFalse(q.equals(LongPoint.newExactQuery(\"a\", 1)));\n\n    q = FloatPoint.newExactQuery(\"a\", 1000);\n    assertEquals(q, FloatPoint.newExactQuery(\"a\", 1000));\n    assertFalse(q.equals(FloatPoint.newExactQuery(\"a\", 1)));\n\n    q = DoublePoint.newExactQuery(\"a\", 1000);\n    assertEquals(q, DoublePoint.newExactQuery(\"a\", 1000));\n    assertFalse(q.equals(DoublePoint.newExactQuery(\"a\", 1)));\n\n    byte[] ones = new byte[5];\n    Arrays.fill(ones, (byte) 0xff);\n    q = BinaryPoint.newExactQuery(\"a\", ones);\n    assertEquals(q, BinaryPoint.newExactQuery(\"a\", ones));\n    byte[] other = ones.clone();\n    other[2] = (byte) 5;\n    assertFalse(q.equals(BinaryPoint.newExactQuery(\"a\", other)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["606ea169579957651185909e7264798e99e714f9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"606ea169579957651185909e7264798e99e714f9","date":1458504317,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointExactEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointExactEquals().mjava","sourceNew":"  public void testPointExactEquals() {\n    Query q1 = IntPoint.newExactQuery(\"a\", 1000);\n    Query q2 = IntPoint.newExactQuery(\"a\", 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(IntPoint.newExactQuery(\"a\", 1)));\n\n    q1 = LongPoint.newExactQuery(\"a\", 1000);\n    q2 = LongPoint.newExactQuery(\"a\", 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(LongPoint.newExactQuery(\"a\", 1)));\n\n    q1 = FloatPoint.newExactQuery(\"a\", 1000);\n    q2 = FloatPoint.newExactQuery(\"a\", 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(FloatPoint.newExactQuery(\"a\", 1)));\n\n    q1 = DoublePoint.newExactQuery(\"a\", 1000);\n    q2 = DoublePoint.newExactQuery(\"a\", 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(DoublePoint.newExactQuery(\"a\", 1)));\n\n    byte[] ones = new byte[5];\n    Arrays.fill(ones, (byte) 0xff);\n    q1 = BinaryPoint.newExactQuery(\"a\", ones);\n    q2 = BinaryPoint.newExactQuery(\"a\", ones);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    byte[] other = ones.clone();\n    other[2] = (byte) 5;\n    assertFalse(q1.equals(BinaryPoint.newExactQuery(\"a\", other)));\n  }\n\n","sourceOld":"  public void testPointExactEquals() {\n    Query q = IntPoint.newExactQuery(\"a\", 1000);\n    assertEquals(q, IntPoint.newExactQuery(\"a\", 1000));\n    assertFalse(q.equals(IntPoint.newExactQuery(\"a\", 1)));\n\n    q = LongPoint.newExactQuery(\"a\", 1000);\n    assertEquals(q, LongPoint.newExactQuery(\"a\", 1000));\n    assertFalse(q.equals(LongPoint.newExactQuery(\"a\", 1)));\n\n    q = FloatPoint.newExactQuery(\"a\", 1000);\n    assertEquals(q, FloatPoint.newExactQuery(\"a\", 1000));\n    assertFalse(q.equals(FloatPoint.newExactQuery(\"a\", 1)));\n\n    q = DoublePoint.newExactQuery(\"a\", 1000);\n    assertEquals(q, DoublePoint.newExactQuery(\"a\", 1000));\n    assertFalse(q.equals(DoublePoint.newExactQuery(\"a\", 1)));\n\n    byte[] ones = new byte[5];\n    Arrays.fill(ones, (byte) 0xff);\n    q = BinaryPoint.newExactQuery(\"a\", ones);\n    assertEquals(q, BinaryPoint.newExactQuery(\"a\", ones));\n    byte[] other = ones.clone();\n    other[2] = (byte) 5;\n    assertFalse(q.equals(BinaryPoint.newExactQuery(\"a\", other)));\n  }\n\n","bugFix":["5839bca64b33c24668e37476ee168d00dc0bb96d"],"bugIntro":["d2270976e274799939e1b5339eb6c16c7601dfda"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2270976e274799939e1b5339eb6c16c7601dfda","date":1458767534,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointExactEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointExactEquals().mjava","sourceNew":"  public void testPointExactEquals() {\n    Query q1, q2;\n\n    q1 = IntPoint.newExactQuery(\"a\", 1000);\n    q2 = IntPoint.newExactQuery(\"a\", 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(IntPoint.newExactQuery(\"a\", 1)));\n    assertFalse(q1.equals(IntPoint.newExactQuery(\"b\", 1000)));\n\n    q1 = LongPoint.newExactQuery(\"a\", 1000);\n    q2 = LongPoint.newExactQuery(\"a\", 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(LongPoint.newExactQuery(\"a\", 1)));\n\n    q1 = FloatPoint.newExactQuery(\"a\", 1000);\n    q2 = FloatPoint.newExactQuery(\"a\", 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(FloatPoint.newExactQuery(\"a\", 1)));\n\n    q1 = DoublePoint.newExactQuery(\"a\", 1000);\n    q2 = DoublePoint.newExactQuery(\"a\", 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(DoublePoint.newExactQuery(\"a\", 1)));\n\n    byte[] ones = new byte[5];\n    Arrays.fill(ones, (byte) 0xff);\n    q1 = BinaryPoint.newExactQuery(\"a\", ones);\n    q2 = BinaryPoint.newExactQuery(\"a\", ones);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    byte[] other = ones.clone();\n    other[2] = (byte) 5;\n    assertFalse(q1.equals(BinaryPoint.newExactQuery(\"a\", other)));\n  }\n\n","sourceOld":"  public void testPointExactEquals() {\n    Query q1 = IntPoint.newExactQuery(\"a\", 1000);\n    Query q2 = IntPoint.newExactQuery(\"a\", 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(IntPoint.newExactQuery(\"a\", 1)));\n\n    q1 = LongPoint.newExactQuery(\"a\", 1000);\n    q2 = LongPoint.newExactQuery(\"a\", 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(LongPoint.newExactQuery(\"a\", 1)));\n\n    q1 = FloatPoint.newExactQuery(\"a\", 1000);\n    q2 = FloatPoint.newExactQuery(\"a\", 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(FloatPoint.newExactQuery(\"a\", 1)));\n\n    q1 = DoublePoint.newExactQuery(\"a\", 1000);\n    q2 = DoublePoint.newExactQuery(\"a\", 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(DoublePoint.newExactQuery(\"a\", 1)));\n\n    byte[] ones = new byte[5];\n    Arrays.fill(ones, (byte) 0xff);\n    q1 = BinaryPoint.newExactQuery(\"a\", ones);\n    q2 = BinaryPoint.newExactQuery(\"a\", ones);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    byte[] other = ones.clone();\n    other[2] = (byte) 5;\n    assertFalse(q1.equals(BinaryPoint.newExactQuery(\"a\", other)));\n  }\n\n","bugFix":["606ea169579957651185909e7264798e99e714f9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f2fc67ed530b94c8d95563d7824e6e424d82886","date":1561636515,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointExactEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointExactEquals().mjava","sourceNew":"  public void testPointExactEquals() {\n    Query q1, q2;\n\n    q1 = IntPoint.newExactQuery(\"a\", 1000);\n    q2 = IntPoint.newExactQuery(\"a\", 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(IntPoint.newExactQuery(\"a\", 1)));\n    assertFalse(q1.equals(IntPoint.newExactQuery(\"b\", 1000)));\n\n    assertTrue(q1 instanceof PointRangeQuery && q2 instanceof PointRangeQuery);\n    PointRangeQuery pq1 = (PointRangeQuery) q1;\n    PointRangeQuery pq2 = (PointRangeQuery) q2;\n\n    assertTrue(Arrays.equals(pq1.getLowerPoint(), pq2.getLowerPoint()));\n    assertTrue(Arrays.equals(pq1.getUpperPoint(), pq2.getUpperPoint()));\n\n    q1 = LongPoint.newExactQuery(\"a\", 1000);\n    q2 = LongPoint.newExactQuery(\"a\", 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(LongPoint.newExactQuery(\"a\", 1)));\n\n    assertTrue(q1 instanceof PointRangeQuery && q2 instanceof PointRangeQuery);\n    pq1 = (PointRangeQuery) q1;\n    pq2 = (PointRangeQuery) q2;\n\n    assertTrue(Arrays.equals(pq1.getLowerPoint(), pq2.getLowerPoint()));\n    assertTrue(Arrays.equals(pq1.getUpperPoint(), pq2.getUpperPoint()));\n\n    q1 = FloatPoint.newExactQuery(\"a\", 1000);\n    q2 = FloatPoint.newExactQuery(\"a\", 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(FloatPoint.newExactQuery(\"a\", 1)));\n\n    assertTrue(q1 instanceof PointRangeQuery && q2 instanceof PointRangeQuery);\n    pq1 = (PointRangeQuery) q1;\n    pq2 = (PointRangeQuery) q2;\n\n    assertTrue(Arrays.equals(pq1.getLowerPoint(), pq2.getLowerPoint()));\n    assertTrue(Arrays.equals(pq1.getUpperPoint(), pq2.getUpperPoint()));\n\n    q1 = DoublePoint.newExactQuery(\"a\", 1000);\n    q2 = DoublePoint.newExactQuery(\"a\", 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(DoublePoint.newExactQuery(\"a\", 1)));\n\n    assertTrue(q1 instanceof PointRangeQuery && q2 instanceof PointRangeQuery);\n    pq1 = (PointRangeQuery) q1;\n    pq2 = (PointRangeQuery) q2;\n\n    assertTrue(Arrays.equals(pq1.getLowerPoint(), pq2.getLowerPoint()));\n    assertTrue(Arrays.equals(pq1.getUpperPoint(), pq2.getUpperPoint()));\n\n    byte[] ones = new byte[5];\n    Arrays.fill(ones, (byte) 0xff);\n    q1 = BinaryPoint.newExactQuery(\"a\", ones);\n    q2 = BinaryPoint.newExactQuery(\"a\", ones);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    byte[] other = ones.clone();\n    other[2] = (byte) 5;\n    assertFalse(q1.equals(BinaryPoint.newExactQuery(\"a\", other)));\n\n    assertTrue(q1 instanceof PointRangeQuery && q2 instanceof PointRangeQuery);\n    pq1 = (PointRangeQuery) q1;\n    pq2 = (PointRangeQuery) q2;\n\n    assertTrue(Arrays.equals(pq1.getLowerPoint(), pq2.getLowerPoint()));\n    assertTrue(Arrays.equals(pq1.getUpperPoint(), pq2.getUpperPoint()));\n  }\n\n","sourceOld":"  public void testPointExactEquals() {\n    Query q1, q2;\n\n    q1 = IntPoint.newExactQuery(\"a\", 1000);\n    q2 = IntPoint.newExactQuery(\"a\", 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(IntPoint.newExactQuery(\"a\", 1)));\n    assertFalse(q1.equals(IntPoint.newExactQuery(\"b\", 1000)));\n\n    q1 = LongPoint.newExactQuery(\"a\", 1000);\n    q2 = LongPoint.newExactQuery(\"a\", 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(LongPoint.newExactQuery(\"a\", 1)));\n\n    q1 = FloatPoint.newExactQuery(\"a\", 1000);\n    q2 = FloatPoint.newExactQuery(\"a\", 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(FloatPoint.newExactQuery(\"a\", 1)));\n\n    q1 = DoublePoint.newExactQuery(\"a\", 1000);\n    q2 = DoublePoint.newExactQuery(\"a\", 1000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(DoublePoint.newExactQuery(\"a\", 1)));\n\n    byte[] ones = new byte[5];\n    Arrays.fill(ones, (byte) 0xff);\n    q1 = BinaryPoint.newExactQuery(\"a\", ones);\n    q2 = BinaryPoint.newExactQuery(\"a\", ones);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    byte[] other = ones.clone();\n    other[2] = (byte) 5;\n    assertFalse(q1.equals(BinaryPoint.newExactQuery(\"a\", other)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2270976e274799939e1b5339eb6c16c7601dfda":["606ea169579957651185909e7264798e99e714f9"],"7f2fc67ed530b94c8d95563d7824e6e424d82886":["d2270976e274799939e1b5339eb6c16c7601dfda"],"5839bca64b33c24668e37476ee168d00dc0bb96d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"606ea169579957651185909e7264798e99e714f9":["5839bca64b33c24668e37476ee168d00dc0bb96d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f2fc67ed530b94c8d95563d7824e6e424d82886"]},"commit2Childs":{"d2270976e274799939e1b5339eb6c16c7601dfda":["7f2fc67ed530b94c8d95563d7824e6e424d82886"],"7f2fc67ed530b94c8d95563d7824e6e424d82886":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5839bca64b33c24668e37476ee168d00dc0bb96d":["606ea169579957651185909e7264798e99e714f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5839bca64b33c24668e37476ee168d00dc0bb96d"],"606ea169579957651185909e7264798e99e714f9":["d2270976e274799939e1b5339eb6c16c7601dfda"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}