{"path":"solr/core/src/test/org/apache/solr/search/TestReloadDeadlock#addDoc(int,long,long).mjava","commits":[{"id":"76fe9c497e8a6dfe48a1c3d048a6778db23b5a0b","date":1439091488,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReloadDeadlock#addDoc(int,long,long).mjava","pathOld":"/dev/null","sourceNew":"  private void addDoc(int id, long nextVal, long version) throws Exception {\n    ifVerbose(\"adding id\", id, \"val=\", nextVal, \"version\", version);\n\n    Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), field, Long.toString(nextVal),\n        \"_version_\", Long.toString(version)), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n    if (returnedVersion != null) {\n      assertEquals(version, returnedVersion.longValue());\n    }\n\n    // only update model if the version is newer\n    synchronized (model) {\n      DocInfo currInfo = model.get(id);\n      if (version > currInfo.version) {\n        model.put(id, new DocInfo(version, nextVal));\n      }\n    }\n\n    ifVerbose(\"adding id\", id, \"val=\", nextVal, \"version\", version, \"DONE\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReloadDeadlock#addDoc(int,long,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReloadDeadlock#addDoc(int,long,long).mjava","sourceNew":"  private void addDoc(int id, long nextVal, long version) throws Exception {\n    ifVerbose(\"adding id\", id, \"val=\", nextVal, \"version\", version);\n\n    Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), FIELD, Long.toString(nextVal),\n        \"_version_\", Long.toString(version)), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n    if (returnedVersion != null) {\n      assertEquals(version, returnedVersion.longValue());\n    }\n\n    // only update model if the version is newer\n    synchronized (model) {\n      DocInfo currInfo = model.get(id);\n      if (version > currInfo.version) {\n        model.put(id, new DocInfo(version, nextVal));\n      }\n    }\n\n    ifVerbose(\"adding id\", id, \"val=\", nextVal, \"version\", version, \"DONE\");\n  }\n\n","sourceOld":"  private void addDoc(int id, long nextVal, long version) throws Exception {\n    ifVerbose(\"adding id\", id, \"val=\", nextVal, \"version\", version);\n\n    Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), field, Long.toString(nextVal),\n        \"_version_\", Long.toString(version)), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n    if (returnedVersion != null) {\n      assertEquals(version, returnedVersion.longValue());\n    }\n\n    // only update model if the version is newer\n    synchronized (model) {\n      DocInfo currInfo = model.get(id);\n      if (version > currInfo.version) {\n        model.put(id, new DocInfo(version, nextVal));\n      }\n    }\n\n    ifVerbose(\"adding id\", id, \"val=\", nextVal, \"version\", version, \"DONE\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReloadDeadlock#addDoc(int,long,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReloadDeadlock#addDoc(int,long,long).mjava","sourceNew":"  private void addDoc(int id, long nextVal, long version) throws Exception {\n    ifVerbose(\"adding id\", id, \"val=\", nextVal, \"version\", version);\n\n    Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), FIELD, Long.toString(nextVal),\n        \"_version_\", Long.toString(version)), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n    if (returnedVersion != null) {\n      assertEquals(version, returnedVersion.longValue());\n    }\n\n    // only update model if the version is newer\n    synchronized (model) {\n      DocInfo currInfo = model.get(id);\n      if (version > currInfo.version) {\n        model.put(id, new DocInfo(version, nextVal));\n      }\n    }\n\n    ifVerbose(\"adding id\", id, \"val=\", nextVal, \"version\", version, \"DONE\");\n  }\n\n","sourceOld":"  private void addDoc(int id, long nextVal, long version) throws Exception {\n    ifVerbose(\"adding id\", id, \"val=\", nextVal, \"version\", version);\n\n    Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), field, Long.toString(nextVal),\n        \"_version_\", Long.toString(version)), params(DISTRIB_UPDATE_PARAM, FROM_LEADER));\n    if (returnedVersion != null) {\n      assertEquals(version, returnedVersion.longValue());\n    }\n\n    // only update model if the version is newer\n    synchronized (model) {\n      DocInfo currInfo = model.get(id);\n      if (version > currInfo.version) {\n        model.put(id, new DocInfo(version, nextVal));\n      }\n    }\n\n    ifVerbose(\"adding id\", id, \"val=\", nextVal, \"version\", version, \"DONE\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5de502b5478255493125e7e801411ba17a6682ec":["76fe9c497e8a6dfe48a1c3d048a6778db23b5a0b"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["76fe9c497e8a6dfe48a1c3d048a6778db23b5a0b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76fe9c497e8a6dfe48a1c3d048a6778db23b5a0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5de502b5478255493125e7e801411ba17a6682ec"]},"commit2Childs":{"5de502b5478255493125e7e801411ba17a6682ec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["76fe9c497e8a6dfe48a1c3d048a6778db23b5a0b"],"76fe9c497e8a6dfe48a1c3d048a6778db23b5a0b":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f20fd35e3055a0c5b387df0b986a68d65d86441","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}