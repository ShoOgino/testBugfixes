{"path":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#addDocsAndCommit(SolrInputDocument...).mjava","commits":[{"id":"5613a70439d5d429f0689c2c5a21615e58deff97","date":1512102314,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#addDocsAndCommit(SolrInputDocument...).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimePartitionedUpdateProcessorTest#addDocsAndCommit(SolrInputDocument...).mjava","sourceNew":"  /** Adds these documents and commits, returning when they are committed.\n   * We randomly go about this in different ways. */\n  private void addDocsAndCommit(SolrInputDocument... solrInputDocuments) throws Exception {\n    // we assume these are not old docs!\n\n    // this is a list of the collections & the alias name.  Use to pick randomly where to send.\n    //   (it doesn't matter where we send docs since the alias is honored at the URP level)\n    List<String> collections = new ArrayList<>();\n    collections.add(alias);\n    collections.addAll(new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias));\n\n    int commitWithin = random().nextBoolean() ? -1 : 500; // if -1, we commit explicitly instead\n    int numDocsBefore = queryNumDocs();\n    if (random().nextBoolean()) {\n      // send in separate requests\n      for (SolrInputDocument solrInputDocument : solrInputDocuments) {\n        String col = collections.get(random().nextInt(collections.size()));\n        solrClient.add(col, solrInputDocument, commitWithin);\n      }\n    } else {\n      // send in a batch.\n      String col = collections.get(random().nextInt(collections.size()));\n      solrClient.add(col, Arrays.asList(solrInputDocuments), commitWithin);\n    }\n    String col = collections.get(random().nextInt(collections.size()));\n    if (commitWithin == -1) {\n      solrClient.commit(col);\n    } else {\n      // check that it all got committed eventually\n      int numDocs = queryNumDocs();\n      if (numDocs == numDocsBefore + solrInputDocuments.length) {\n        System.err.println(\"Docs committed sooner than expected.  Bug or slow test env?\");\n        return;\n      }\n      // wait until it's committed, plus some play time for commit to become visible\n      Thread.sleep(commitWithin + 200);\n      numDocs = queryNumDocs();\n      assertEquals(\"not committed.  Bug or a slow test?\",\n          numDocsBefore + solrInputDocuments.length, numDocs);\n    }\n  }\n\n","sourceOld":"  /** Adds these documents and commits, returning when they are committed.\n   * We randomly go about this in different ways. */\n  private void addDocsAndCommit(SolrInputDocument... solrInputDocuments) throws Exception {\n    // we assume these are not old docs!\n\n    // this is a list of the collections & the alias name.  Use to pick randomly where to send.\n    //   (it doesn't matter where we send docs since the alias is honored at the URP level)\n    List<String> collections = new ArrayList<>();\n    collections.add(alias);\n    collections.addAll(new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias));\n\n    int commitWithin = random().nextBoolean() ? -1 : 500; // if -1, we commit explicitly instead\n    int numDocsBefore = queryNumDocs();\n    if (random().nextBoolean()) {\n      // send in separate requests\n      for (SolrInputDocument solrInputDocument : solrInputDocuments) {\n        String col = collections.get(random().nextInt(collections.size()));\n        solrClient.add(col, solrInputDocument, commitWithin);\n      }\n    } else {\n      // send in a batch.\n      String col = collections.get(random().nextInt(collections.size()));\n      solrClient.add(col, Arrays.asList(solrInputDocuments), commitWithin);\n    }\n    String col = collections.get(random().nextInt(collections.size()));\n    if (commitWithin == -1) {\n      solrClient.commit(col);\n    } else {\n      // check that it all got committed eventually\n      int numDocs = queryNumDocs();\n      if (numDocs == numDocsBefore + solrInputDocuments.length) {\n        System.err.println(\"Docs committed sooner than expected.  Bug or slow test env?\");\n        return;\n      }\n      // wait until it's committed, plus some play time for commit to become visible\n      Thread.sleep(commitWithin + 200);\n      numDocs = queryNumDocs();\n      assertEquals(\"not committed.  Bug or a slow test?\",\n          numDocsBefore + solrInputDocuments.length, numDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af3e10d8a1fbcc5c79b22f7477e79de467dd326c","date":1515178406,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#addDocsAndCommit(SolrInputDocument...).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#addDocsAndCommit(SolrInputDocument...).mjava","sourceNew":"  /** Adds these documents and commits, returning when they are committed.\n   * We randomly go about this in different ways. */\n  private void addDocsAndCommit(SolrInputDocument... solrInputDocuments) throws Exception {\n    // we assume all docs will be added (none too old/new to cause exception)\n    Collections.shuffle(Arrays.asList(solrInputDocuments), random());\n\n    // this is a list of the collections & the alias name.  Use to pick randomly where to send.\n    //   (it doesn't matter where we send docs since the alias is honored at the URP level)\n    List<String> collections = new ArrayList<>();\n    collections.add(alias);\n    collections.addAll(new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias));\n\n    int commitWithin = random().nextBoolean() ? -1 : 500; // if -1, we commit explicitly instead\n    int numDocsBefore = queryNumDocs();\n    if (random().nextBoolean()) {\n      // Send in separate threads. Choose random collection & solrClient\n      try (CloudSolrClient solrClient = getCloudSolrClient(cluster)) {\n        ExecutorService exec = ExecutorUtil.newMDCAwareFixedThreadPool(1 + random().nextInt(2),\n            new DefaultSolrThreadFactory(getTestName()));\n        List<Future<UpdateResponse>> futures = new ArrayList<>(solrInputDocuments.length);\n        for (SolrInputDocument solrInputDocument : solrInputDocuments) {\n          String col = collections.get(random().nextInt(collections.size()));\n          futures.add(exec.submit(() -> solrClient.add(col, solrInputDocument, commitWithin)));\n        }\n        for (Future<UpdateResponse> future : futures) {\n          assertUpdateResponse(future.get());\n        }\n        // at this point there shouldn't be any tasks running\n        assertEquals(0, exec.shutdownNow().size());\n      }\n    } else {\n      // send in a batch.\n      String col = collections.get(random().nextInt(collections.size()));\n      try (CloudSolrClient solrClient = getCloudSolrClient(cluster)) {\n        assertUpdateResponse(solrClient.add(col, Arrays.asList(solrInputDocuments), commitWithin));\n      }\n    }\n    String col = collections.get(random().nextInt(collections.size()));\n    if (commitWithin == -1) {\n      solrClient.commit(col);\n    } else {\n      // check that it all got committed eventually\n      int numDocs = queryNumDocs();\n      if (numDocs == numDocsBefore + solrInputDocuments.length) {\n        System.err.println(\"Docs committed sooner than expected.  Bug or slow test env?\");\n        return;\n      }\n      // wait until it's committed, plus some play time for commit to become visible\n      Thread.sleep(commitWithin + 200);\n      numDocs = queryNumDocs();\n      assertEquals(\"not committed.  Bug or a slow test?\",\n          numDocsBefore + solrInputDocuments.length, numDocs);\n    }\n  }\n\n","sourceOld":"  /** Adds these documents and commits, returning when they are committed.\n   * We randomly go about this in different ways. */\n  private void addDocsAndCommit(SolrInputDocument... solrInputDocuments) throws Exception {\n    // we assume these are not old docs!\n\n    // this is a list of the collections & the alias name.  Use to pick randomly where to send.\n    //   (it doesn't matter where we send docs since the alias is honored at the URP level)\n    List<String> collections = new ArrayList<>();\n    collections.add(alias);\n    collections.addAll(new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias));\n\n    int commitWithin = random().nextBoolean() ? -1 : 500; // if -1, we commit explicitly instead\n    int numDocsBefore = queryNumDocs();\n    if (random().nextBoolean()) {\n      // send in separate requests\n      for (SolrInputDocument solrInputDocument : solrInputDocuments) {\n        String col = collections.get(random().nextInt(collections.size()));\n        solrClient.add(col, solrInputDocument, commitWithin);\n      }\n    } else {\n      // send in a batch.\n      String col = collections.get(random().nextInt(collections.size()));\n      solrClient.add(col, Arrays.asList(solrInputDocuments), commitWithin);\n    }\n    String col = collections.get(random().nextInt(collections.size()));\n    if (commitWithin == -1) {\n      solrClient.commit(col);\n    } else {\n      // check that it all got committed eventually\n      int numDocs = queryNumDocs();\n      if (numDocs == numDocsBefore + solrInputDocuments.length) {\n        System.err.println(\"Docs committed sooner than expected.  Bug or slow test env?\");\n        return;\n      }\n      // wait until it's committed, plus some play time for commit to become visible\n      Thread.sleep(commitWithin + 200);\n      numDocs = queryNumDocs();\n      assertEquals(\"not committed.  Bug or a slow test?\",\n          numDocsBefore + solrInputDocuments.length, numDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5c862cfe45668f0af659e21d1279ff235c6cadd6","date":1515871011,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#addDocsAndCommit(SolrInputDocument...).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#addDocsAndCommit(SolrInputDocument...).mjava","sourceNew":"  /** Adds these documents and commits, returning when they are committed.\n   * We randomly go about this in different ways. */\n  private void addDocsAndCommit(SolrInputDocument... solrInputDocuments) throws Exception {\n    // we assume all docs will be added (none too old/new to cause exception)\n    Collections.shuffle(Arrays.asList(solrInputDocuments), random());\n\n    // this is a list of the collections & the alias name.  Use to pick randomly where to send.\n    //   (it doesn't matter where we send docs since the alias is honored at the URP level)\n    List<String> collections = new ArrayList<>();\n    collections.add(alias);\n    collections.addAll(new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias));\n\n    int commitWithin = random().nextBoolean() ? -1 : 500; // if -1, we commit explicitly instead\n    int numDocsBefore = queryNumDocs();\n    if (random().nextBoolean()) {\n      // Send in separate threads. Choose random collection & solrClient\n      try (CloudSolrClient solrClient = getCloudSolrClient(cluster)) {\n        ExecutorService exec = ExecutorUtil.newMDCAwareFixedThreadPool(1 + random().nextInt(2),\n            new DefaultSolrThreadFactory(getTestName()));\n        List<Future<UpdateResponse>> futures = new ArrayList<>(solrInputDocuments.length);\n        for (SolrInputDocument solrInputDocument : solrInputDocuments) {\n          String col = collections.get(random().nextInt(collections.size()));\n          futures.add(exec.submit(() -> solrClient.add(col, solrInputDocument, commitWithin)));\n        }\n        for (Future<UpdateResponse> future : futures) {\n          assertUpdateResponse(future.get());\n        }\n        // at this point there shouldn't be any tasks running\n        assertEquals(0, exec.shutdownNow().size());\n      }\n    } else {\n      // send in a batch.\n      String col = collections.get(random().nextInt(collections.size()));\n      try (CloudSolrClient solrClient = getCloudSolrClient(cluster)) {\n        assertUpdateResponse(solrClient.add(col, Arrays.asList(solrInputDocuments), commitWithin));\n      }\n    }\n    String col = collections.get(random().nextInt(collections.size()));\n    if (commitWithin == -1) {\n      solrClient.commit(col);\n    } else {\n      // check that it all got committed eventually\n      int numDocs = queryNumDocs();\n      if (numDocs == numDocsBefore + solrInputDocuments.length) {\n        System.err.println(\"Docs committed sooner than expected.  Bug or slow test env?\");\n        return;\n      }\n      // wait until it's committed\n      Thread.sleep(commitWithin);\n      for (int idx = 0; idx < 100; ++idx) { // Loop for up to 10 seconds waiting for commit to catch up\n        numDocs = queryNumDocs();\n        if (numDocsBefore + solrInputDocuments.length == numDocs) break;\n        Thread.sleep(100);\n      }\n\n      assertEquals(\"not committed.  Bug or a slow test?\",\n          numDocsBefore + solrInputDocuments.length, numDocs);\n    }\n  }\n\n","sourceOld":"  /** Adds these documents and commits, returning when they are committed.\n   * We randomly go about this in different ways. */\n  private void addDocsAndCommit(SolrInputDocument... solrInputDocuments) throws Exception {\n    // we assume all docs will be added (none too old/new to cause exception)\n    Collections.shuffle(Arrays.asList(solrInputDocuments), random());\n\n    // this is a list of the collections & the alias name.  Use to pick randomly where to send.\n    //   (it doesn't matter where we send docs since the alias is honored at the URP level)\n    List<String> collections = new ArrayList<>();\n    collections.add(alias);\n    collections.addAll(new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias));\n\n    int commitWithin = random().nextBoolean() ? -1 : 500; // if -1, we commit explicitly instead\n    int numDocsBefore = queryNumDocs();\n    if (random().nextBoolean()) {\n      // Send in separate threads. Choose random collection & solrClient\n      try (CloudSolrClient solrClient = getCloudSolrClient(cluster)) {\n        ExecutorService exec = ExecutorUtil.newMDCAwareFixedThreadPool(1 + random().nextInt(2),\n            new DefaultSolrThreadFactory(getTestName()));\n        List<Future<UpdateResponse>> futures = new ArrayList<>(solrInputDocuments.length);\n        for (SolrInputDocument solrInputDocument : solrInputDocuments) {\n          String col = collections.get(random().nextInt(collections.size()));\n          futures.add(exec.submit(() -> solrClient.add(col, solrInputDocument, commitWithin)));\n        }\n        for (Future<UpdateResponse> future : futures) {\n          assertUpdateResponse(future.get());\n        }\n        // at this point there shouldn't be any tasks running\n        assertEquals(0, exec.shutdownNow().size());\n      }\n    } else {\n      // send in a batch.\n      String col = collections.get(random().nextInt(collections.size()));\n      try (CloudSolrClient solrClient = getCloudSolrClient(cluster)) {\n        assertUpdateResponse(solrClient.add(col, Arrays.asList(solrInputDocuments), commitWithin));\n      }\n    }\n    String col = collections.get(random().nextInt(collections.size()));\n    if (commitWithin == -1) {\n      solrClient.commit(col);\n    } else {\n      // check that it all got committed eventually\n      int numDocs = queryNumDocs();\n      if (numDocs == numDocsBefore + solrInputDocuments.length) {\n        System.err.println(\"Docs committed sooner than expected.  Bug or slow test env?\");\n        return;\n      }\n      // wait until it's committed, plus some play time for commit to become visible\n      Thread.sleep(commitWithin + 200);\n      numDocs = queryNumDocs();\n      assertEquals(\"not committed.  Bug or a slow test?\",\n          numDocsBefore + solrInputDocuments.length, numDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#addDocsAndCommit(SolrInputDocument...).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#addDocsAndCommit(SolrInputDocument...).mjava","sourceNew":"  /** Adds these documents and commits, returning when they are committed.\n   * We randomly go about this in different ways. */\n  private void addDocsAndCommit(SolrInputDocument... solrInputDocuments) throws Exception {\n    // we assume all docs will be added (none too old/new to cause exception)\n    Collections.shuffle(Arrays.asList(solrInputDocuments), random());\n\n    // this is a list of the collections & the alias name.  Use to pick randomly where to send.\n    //   (it doesn't matter where we send docs since the alias is honored at the URP level)\n    List<String> collections = new ArrayList<>();\n    collections.add(alias);\n    collections.addAll(new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias));\n\n    int commitWithin = random().nextBoolean() ? -1 : 500; // if -1, we commit explicitly instead\n    int numDocsBefore = queryNumDocs();\n    if (random().nextBoolean()) {\n      // Send in separate threads. Choose random collection & solrClient\n      try (CloudSolrClient solrClient = getCloudSolrClient(cluster)) {\n        ExecutorService exec = ExecutorUtil.newMDCAwareFixedThreadPool(1 + random().nextInt(2),\n            new DefaultSolrThreadFactory(getTestName()));\n        List<Future<UpdateResponse>> futures = new ArrayList<>(solrInputDocuments.length);\n        for (SolrInputDocument solrInputDocument : solrInputDocuments) {\n          String col = collections.get(random().nextInt(collections.size()));\n          futures.add(exec.submit(() -> solrClient.add(col, solrInputDocument, commitWithin)));\n        }\n        for (Future<UpdateResponse> future : futures) {\n          assertUpdateResponse(future.get());\n        }\n        // at this point there shouldn't be any tasks running\n        assertEquals(0, exec.shutdownNow().size());\n      }\n    } else {\n      // send in a batch.\n      String col = collections.get(random().nextInt(collections.size()));\n      try (CloudSolrClient solrClient = getCloudSolrClient(cluster)) {\n        assertUpdateResponse(solrClient.add(col, Arrays.asList(solrInputDocuments), commitWithin));\n      }\n    }\n    String col = collections.get(random().nextInt(collections.size()));\n    if (commitWithin == -1) {\n      solrClient.commit(col);\n    } else {\n      // check that it all got committed eventually\n      int numDocs = queryNumDocs();\n      if (numDocs == numDocsBefore + solrInputDocuments.length) {\n        System.err.println(\"Docs committed sooner than expected.  Bug or slow test env?\");\n        return;\n      }\n      // wait until it's committed\n      Thread.sleep(commitWithin);\n      for (int idx = 0; idx < 100; ++idx) { // Loop for up to 10 seconds waiting for commit to catch up\n        numDocs = queryNumDocs();\n        if (numDocsBefore + solrInputDocuments.length == numDocs) break;\n        Thread.sleep(100);\n      }\n\n      assertEquals(\"not committed.  Bug or a slow test?\",\n          numDocsBefore + solrInputDocuments.length, numDocs);\n    }\n  }\n\n","sourceOld":"  /** Adds these documents and commits, returning when they are committed.\n   * We randomly go about this in different ways. */\n  private void addDocsAndCommit(SolrInputDocument... solrInputDocuments) throws Exception {\n    // we assume these are not old docs!\n\n    // this is a list of the collections & the alias name.  Use to pick randomly where to send.\n    //   (it doesn't matter where we send docs since the alias is honored at the URP level)\n    List<String> collections = new ArrayList<>();\n    collections.add(alias);\n    collections.addAll(new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias));\n\n    int commitWithin = random().nextBoolean() ? -1 : 500; // if -1, we commit explicitly instead\n    int numDocsBefore = queryNumDocs();\n    if (random().nextBoolean()) {\n      // send in separate requests\n      for (SolrInputDocument solrInputDocument : solrInputDocuments) {\n        String col = collections.get(random().nextInt(collections.size()));\n        solrClient.add(col, solrInputDocument, commitWithin);\n      }\n    } else {\n      // send in a batch.\n      String col = collections.get(random().nextInt(collections.size()));\n      solrClient.add(col, Arrays.asList(solrInputDocuments), commitWithin);\n    }\n    String col = collections.get(random().nextInt(collections.size()));\n    if (commitWithin == -1) {\n      solrClient.commit(col);\n    } else {\n      // check that it all got committed eventually\n      int numDocs = queryNumDocs();\n      if (numDocs == numDocsBefore + solrInputDocuments.length) {\n        System.err.println(\"Docs committed sooner than expected.  Bug or slow test env?\");\n        return;\n      }\n      // wait until it's committed, plus some play time for commit to become visible\n      Thread.sleep(commitWithin + 200);\n      numDocs = queryNumDocs();\n      assertEquals(\"not committed.  Bug or a slow test?\",\n          numDocsBefore + solrInputDocuments.length, numDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cbd743a4843f513f793670e3ab0e272bf824faf","date":1518149529,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#addDocsAndCommit(boolean,SolrInputDocument...).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#addDocsAndCommit(SolrInputDocument...).mjava","sourceNew":"  /** Adds these documents and commits, returning when they are committed.\n   * We randomly go about this in different ways. */\n  private void addDocsAndCommit(boolean aliasOnly, SolrInputDocument... solrInputDocuments) throws Exception {\n    // we assume all docs will be added (none too old/new to cause exception)\n    Collections.shuffle(Arrays.asList(solrInputDocuments), random());\n\n    // this is a list of the collections & the alias name.  Use to pick randomly where to send.\n    //   (it doesn't matter where we send docs since the alias is honored at the URP level)\n    List<String> collections = new ArrayList<>();\n    collections.add(alias);\n    if (!aliasOnly) {\n      collections.addAll(new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias));\n    }\n\n    int commitWithin = random().nextBoolean() ? -1 : 500; // if -1, we commit explicitly instead\n\n    if (random().nextBoolean()) {\n      // Send in separate threads. Choose random collection & solrClient\n      try (CloudSolrClient solrClient = getCloudSolrClient(cluster)) {\n        ExecutorService exec = ExecutorUtil.newMDCAwareFixedThreadPool(1 + random().nextInt(2),\n            new DefaultSolrThreadFactory(getTestName()));\n        List<Future<UpdateResponse>> futures = new ArrayList<>(solrInputDocuments.length);\n        for (SolrInputDocument solrInputDocument : solrInputDocuments) {\n          String col = collections.get(random().nextInt(collections.size()));\n          futures.add(exec.submit(() -> solrClient.add(col, solrInputDocument, commitWithin)));\n        }\n        for (Future<UpdateResponse> future : futures) {\n          assertUpdateResponse(future.get());\n        }\n        // at this point there shouldn't be any tasks running\n        assertEquals(0, exec.shutdownNow().size());\n      }\n    } else {\n      // send in a batch.\n      String col = collections.get(random().nextInt(collections.size()));\n      try (CloudSolrClient solrClient = getCloudSolrClient(cluster)) {\n        assertUpdateResponse(solrClient.add(col, Arrays.asList(solrInputDocuments), commitWithin));\n      }\n    }\n    String col = collections.get(random().nextInt(collections.size()));\n    if (commitWithin == -1) {\n      solrClient.commit(col);\n    } else {\n      // check that it all got committed eventually\n      String docsQ =\n          \"{!terms f=id}\"\n          + Arrays.stream(solrInputDocuments).map(d -> d.getFieldValue(\"id\").toString())\n              .collect(Collectors.joining(\",\"));\n      int numDocs = queryNumDocs(docsQ);\n      if (numDocs == solrInputDocuments.length) {\n        System.err.println(\"Docs committed sooner than expected.  Bug or slow test env?\");\n        return;\n      }\n      // wait until it's committed\n      Thread.sleep(commitWithin);\n      for (int idx = 0; idx < 100; ++idx) { // Loop for up to 10 seconds waiting for commit to catch up\n        numDocs = queryNumDocs(docsQ);\n        if (numDocs == solrInputDocuments.length) break;\n        Thread.sleep(100);\n      }\n\n      assertEquals(\"not committed.  Bug or a slow test?\",\n          solrInputDocuments.length, numDocs);\n    }\n  }\n\n","sourceOld":"  /** Adds these documents and commits, returning when they are committed.\n   * We randomly go about this in different ways. */\n  private void addDocsAndCommit(SolrInputDocument... solrInputDocuments) throws Exception {\n    // we assume all docs will be added (none too old/new to cause exception)\n    Collections.shuffle(Arrays.asList(solrInputDocuments), random());\n\n    // this is a list of the collections & the alias name.  Use to pick randomly where to send.\n    //   (it doesn't matter where we send docs since the alias is honored at the URP level)\n    List<String> collections = new ArrayList<>();\n    collections.add(alias);\n    collections.addAll(new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias));\n\n    int commitWithin = random().nextBoolean() ? -1 : 500; // if -1, we commit explicitly instead\n    int numDocsBefore = queryNumDocs();\n    if (random().nextBoolean()) {\n      // Send in separate threads. Choose random collection & solrClient\n      try (CloudSolrClient solrClient = getCloudSolrClient(cluster)) {\n        ExecutorService exec = ExecutorUtil.newMDCAwareFixedThreadPool(1 + random().nextInt(2),\n            new DefaultSolrThreadFactory(getTestName()));\n        List<Future<UpdateResponse>> futures = new ArrayList<>(solrInputDocuments.length);\n        for (SolrInputDocument solrInputDocument : solrInputDocuments) {\n          String col = collections.get(random().nextInt(collections.size()));\n          futures.add(exec.submit(() -> solrClient.add(col, solrInputDocument, commitWithin)));\n        }\n        for (Future<UpdateResponse> future : futures) {\n          assertUpdateResponse(future.get());\n        }\n        // at this point there shouldn't be any tasks running\n        assertEquals(0, exec.shutdownNow().size());\n      }\n    } else {\n      // send in a batch.\n      String col = collections.get(random().nextInt(collections.size()));\n      try (CloudSolrClient solrClient = getCloudSolrClient(cluster)) {\n        assertUpdateResponse(solrClient.add(col, Arrays.asList(solrInputDocuments), commitWithin));\n      }\n    }\n    String col = collections.get(random().nextInt(collections.size()));\n    if (commitWithin == -1) {\n      solrClient.commit(col);\n    } else {\n      // check that it all got committed eventually\n      int numDocs = queryNumDocs();\n      if (numDocs == numDocsBefore + solrInputDocuments.length) {\n        System.err.println(\"Docs committed sooner than expected.  Bug or slow test env?\");\n        return;\n      }\n      // wait until it's committed\n      Thread.sleep(commitWithin);\n      for (int idx = 0; idx < 100; ++idx) { // Loop for up to 10 seconds waiting for commit to catch up\n        numDocs = queryNumDocs();\n        if (numDocsBefore + solrInputDocuments.length == numDocs) break;\n        Thread.sleep(100);\n      }\n\n      assertEquals(\"not committed.  Bug or a slow test?\",\n          numDocsBefore + solrInputDocuments.length, numDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["5613a70439d5d429f0689c2c5a21615e58deff97","5c862cfe45668f0af659e21d1279ff235c6cadd6"],"5c862cfe45668f0af659e21d1279ff235c6cadd6":["af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"3cbd743a4843f513f793670e3ab0e272bf824faf":["b94236357aaa22b76c10629851fe4e376e0cea82"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["5613a70439d5d429f0689c2c5a21615e58deff97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5613a70439d5d429f0689c2c5a21615e58deff97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cbd743a4843f513f793670e3ab0e272bf824faf"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["3cbd743a4843f513f793670e3ab0e272bf824faf"],"5c862cfe45668f0af659e21d1279ff235c6cadd6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["5c862cfe45668f0af659e21d1279ff235c6cadd6"],"3cbd743a4843f513f793670e3ab0e272bf824faf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5613a70439d5d429f0689c2c5a21615e58deff97"],"5613a70439d5d429f0689c2c5a21615e58deff97":["b94236357aaa22b76c10629851fe4e376e0cea82","af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}