{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testPartialHaversin().mjava","commits":[{"id":"d210c7f333402b4828c1d10dfd5457c9fe312c7d","date":1457987131,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testPartialHaversin().mjava","pathOld":"/dev/null","sourceNew":"  /** Test this method sorts the same way as real haversin */\n  public void testPartialHaversin() {\n    for (int i = 0; i < 100000; i++) {\n      double centerLat = -90 + 180.0 * random().nextDouble();\n      double centerLon = -180 + 360.0 * random().nextDouble();\n\n      double lat1 = -90 + 180.0 * random().nextDouble();\n      double lon1 = -180 + 360.0 * random().nextDouble();\n\n      double lat2 = -90 + 180.0 * random().nextDouble();\n      double lon2 = -180 + 360.0 * random().nextDouble();\n\n      int expected = Integer.signum(Double.compare(GeoDistanceUtils.haversin(centerLat, centerLon, lat1, lon1),\n                                                   GeoDistanceUtils.haversin(centerLat, centerLon, lat2, lon2)));\n      int actual = Integer.signum(Double.compare(LatLonPointDistanceComparator.haversin1(centerLat, centerLon, lat1, lon1),\n                                                 LatLonPointDistanceComparator.haversin1(centerLat, centerLon, lat2, lon2)));\n      assertEquals(expected, actual);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSloppyMath#testHaversinSortKey().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testPartialHaversin().mjava","sourceNew":"  /** Test this method sorts the same way as real haversin */\n  public void testHaversinSortKey() {\n    for (int i = 0; i < 100000; i++) {\n      double centerLat = -90 + 180.0 * random().nextDouble();\n      double centerLon = -180 + 360.0 * random().nextDouble();\n\n      double lat1 = -90 + 180.0 * random().nextDouble();\n      double lon1 = -180 + 360.0 * random().nextDouble();\n\n      double lat2 = -90 + 180.0 * random().nextDouble();\n      double lon2 = -180 + 360.0 * random().nextDouble();\n\n      int expected = Integer.signum(Double.compare(haversinMeters(centerLat, centerLon, lat1, lon1),\n                                                   haversinMeters(centerLat, centerLon, lat2, lon2)));\n      int actual = Integer.signum(Double.compare(haversinSortKey(centerLat, centerLon, lat1, lon1),\n                                                 haversinSortKey(centerLat, centerLon, lat2, lon2)));\n      assertEquals(expected, actual);\n      assertEquals(haversinMeters(centerLat, centerLon, lat1, lon1), haversinMeters(haversinSortKey(centerLat, centerLon, lat1, lon1)), 0.0D);\n      assertEquals(haversinMeters(centerLat, centerLon, lat2, lon2), haversinMeters(haversinSortKey(centerLat, centerLon, lat2, lon2)), 0.0D);\n    }\n  }\n\n","sourceOld":"  /** Test this method sorts the same way as real haversin */\n  public void testPartialHaversin() {\n    for (int i = 0; i < 100000; i++) {\n      double centerLat = -90 + 180.0 * random().nextDouble();\n      double centerLon = -180 + 360.0 * random().nextDouble();\n\n      double lat1 = -90 + 180.0 * random().nextDouble();\n      double lon1 = -180 + 360.0 * random().nextDouble();\n\n      double lat2 = -90 + 180.0 * random().nextDouble();\n      double lon2 = -180 + 360.0 * random().nextDouble();\n\n      int expected = Integer.signum(Double.compare(GeoDistanceUtils.haversin(centerLat, centerLon, lat1, lon1),\n                                                   GeoDistanceUtils.haversin(centerLat, centerLon, lat2, lon2)));\n      int actual = Integer.signum(Double.compare(LatLonPointDistanceComparator.haversin1(centerLat, centerLon, lat1, lon1),\n                                                 LatLonPointDistanceComparator.haversin1(centerLat, centerLon, lat2, lon2)));\n      assertEquals(expected, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d210c7f333402b4828c1d10dfd5457c9fe312c7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ec60431d008a694828dacb4bc3cda775b6c44a9f":["d210c7f333402b4828c1d10dfd5457c9fe312c7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec60431d008a694828dacb4bc3cda775b6c44a9f"]},"commit2Childs":{"d210c7f333402b4828c1d10dfd5457c9fe312c7d":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"ec60431d008a694828dacb4bc3cda775b6c44a9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d210c7f333402b4828c1d10dfd5457c9fe312c7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}