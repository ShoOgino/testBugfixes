{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValuesDoNotAffectBoostPositionsOrOffset().mjava","commits":[{"id":"253a79e1af11467dd01315b1919025d288aa0ccb","date":1458032260,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValuesDoNotAffectBoostPositionsOrOffset().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocValuesDoNotAffectBoostPositionsOrOffset() throws Exception {\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")));\n    doc.add(new TextField(\"text\", \"quick brown fox\", Field.Store.NO));\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer, true, true);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n    TermsEnum tenum = leafReader.terms(\"text\").iterator();\n\n    assertEquals(\"brown\", tenum.next().utf8ToString());\n    PostingsEnum penum = tenum.postings(null, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(1, penum.nextPosition());\n    assertEquals(6, penum.startOffset());\n    assertEquals(11, penum.endOffset());\n\n    assertEquals(\"fox\", tenum.next().utf8ToString());\n    penum = tenum.postings(penum, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(2, penum.nextPosition());\n    assertEquals(12, penum.startOffset());\n    assertEquals(15, penum.endOffset());\n\n    assertEquals(\"quick\", tenum.next().utf8ToString());\n    penum = tenum.postings(penum, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(0, penum.nextPosition());\n    assertEquals(0, penum.startOffset());\n    assertEquals(5, penum.endOffset());\n\n    BinaryDocValues binaryDocValues = leafReader.getBinaryDocValues(\"text\");\n    assertEquals(\"quick brown fox\", binaryDocValues.get(0).utf8ToString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValuesDoNotAffectBoostPositionsOrOffset().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValuesDoNotAffectBoostPositionsOrOffset().mjava","sourceNew":"  public void testDocValuesDoNotAffectBoostPositionsOrOffset() throws Exception {\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")));\n    doc.add(new TextField(\"text\", \"quick brown fox\", Field.Store.NO));\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer, true, true);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n    TermsEnum tenum = leafReader.terms(\"text\").iterator();\n\n    assertEquals(\"brown\", tenum.next().utf8ToString());\n    PostingsEnum penum = tenum.postings(null, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(1, penum.nextPosition());\n    assertEquals(6, penum.startOffset());\n    assertEquals(11, penum.endOffset());\n\n    assertEquals(\"fox\", tenum.next().utf8ToString());\n    penum = tenum.postings(penum, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(2, penum.nextPosition());\n    assertEquals(12, penum.startOffset());\n    assertEquals(15, penum.endOffset());\n\n    assertEquals(\"quick\", tenum.next().utf8ToString());\n    penum = tenum.postings(penum, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(0, penum.nextPosition());\n    assertEquals(0, penum.startOffset());\n    assertEquals(5, penum.endOffset());\n\n    BinaryDocValues binaryDocValues = leafReader.getBinaryDocValues(\"text\");\n    assertEquals(0, binaryDocValues.nextDoc());\n    assertEquals(\"quick brown fox\", binaryDocValues.binaryValue().utf8ToString());\n  }\n\n","sourceOld":"  public void testDocValuesDoNotAffectBoostPositionsOrOffset() throws Exception {\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")));\n    doc.add(new TextField(\"text\", \"quick brown fox\", Field.Store.NO));\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer, true, true);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n    TermsEnum tenum = leafReader.terms(\"text\").iterator();\n\n    assertEquals(\"brown\", tenum.next().utf8ToString());\n    PostingsEnum penum = tenum.postings(null, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(1, penum.nextPosition());\n    assertEquals(6, penum.startOffset());\n    assertEquals(11, penum.endOffset());\n\n    assertEquals(\"fox\", tenum.next().utf8ToString());\n    penum = tenum.postings(penum, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(2, penum.nextPosition());\n    assertEquals(12, penum.startOffset());\n    assertEquals(15, penum.endOffset());\n\n    assertEquals(\"quick\", tenum.next().utf8ToString());\n    penum = tenum.postings(penum, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(0, penum.nextPosition());\n    assertEquals(0, penum.startOffset());\n    assertEquals(5, penum.endOffset());\n\n    BinaryDocValues binaryDocValues = leafReader.getBinaryDocValues(\"text\");\n    assertEquals(\"quick brown fox\", binaryDocValues.get(0).utf8ToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValuesDoNotAffectBoostPositionsOrOffset().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValuesDoNotAffectBoostPositionsOrOffset().mjava","sourceNew":"  public void testDocValuesDoNotAffectBoostPositionsOrOffset() throws Exception {\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")));\n    doc.add(new TextField(\"text\", \"quick brown fox\", Field.Store.NO));\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer, true, true);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n    TermsEnum tenum = leafReader.terms(\"text\").iterator();\n\n    assertEquals(\"brown\", tenum.next().utf8ToString());\n    PostingsEnum penum = tenum.postings(null, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(1, penum.nextPosition());\n    assertEquals(6, penum.startOffset());\n    assertEquals(11, penum.endOffset());\n\n    assertEquals(\"fox\", tenum.next().utf8ToString());\n    penum = tenum.postings(penum, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(2, penum.nextPosition());\n    assertEquals(12, penum.startOffset());\n    assertEquals(15, penum.endOffset());\n\n    assertEquals(\"quick\", tenum.next().utf8ToString());\n    penum = tenum.postings(penum, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(0, penum.nextPosition());\n    assertEquals(0, penum.startOffset());\n    assertEquals(5, penum.endOffset());\n\n    BinaryDocValues binaryDocValues = leafReader.getBinaryDocValues(\"text\");\n    assertEquals(0, binaryDocValues.nextDoc());\n    assertEquals(\"quick brown fox\", binaryDocValues.binaryValue().utf8ToString());\n  }\n\n","sourceOld":"  public void testDocValuesDoNotAffectBoostPositionsOrOffset() throws Exception {\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")));\n    doc.add(new TextField(\"text\", \"quick brown fox\", Field.Store.NO));\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer, true, true);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n    TermsEnum tenum = leafReader.terms(\"text\").iterator();\n\n    assertEquals(\"brown\", tenum.next().utf8ToString());\n    PostingsEnum penum = tenum.postings(null, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(1, penum.nextPosition());\n    assertEquals(6, penum.startOffset());\n    assertEquals(11, penum.endOffset());\n\n    assertEquals(\"fox\", tenum.next().utf8ToString());\n    penum = tenum.postings(penum, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(2, penum.nextPosition());\n    assertEquals(12, penum.startOffset());\n    assertEquals(15, penum.endOffset());\n\n    assertEquals(\"quick\", tenum.next().utf8ToString());\n    penum = tenum.postings(penum, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(0, penum.nextPosition());\n    assertEquals(0, penum.startOffset());\n    assertEquals(5, penum.endOffset());\n\n    BinaryDocValues binaryDocValues = leafReader.getBinaryDocValues(\"text\");\n    assertEquals(\"quick brown fox\", binaryDocValues.get(0).utf8ToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValuesDoNotAffectBoostPositionsOrOffset().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testDocValuesDoNotAffectBoostPositionsOrOffset().mjava","sourceNew":"  public void testDocValuesDoNotAffectBoostPositionsOrOffset() throws Exception {\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")));\n    doc.add(new TextField(\"text\", \"quick brown fox\", Field.Store.NO));\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer, true, true);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n    TermsEnum tenum = leafReader.terms(\"text\").iterator();\n\n    assertEquals(\"brown\", tenum.next().utf8ToString());\n    PostingsEnum penum = tenum.postings(null, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(1, penum.nextPosition());\n    assertEquals(6, penum.startOffset());\n    assertEquals(11, penum.endOffset());\n\n    assertEquals(\"fox\", tenum.next().utf8ToString());\n    penum = tenum.postings(penum, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(2, penum.nextPosition());\n    assertEquals(12, penum.startOffset());\n    assertEquals(15, penum.endOffset());\n\n    assertEquals(\"quick\", tenum.next().utf8ToString());\n    penum = tenum.postings(penum, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(0, penum.nextPosition());\n    assertEquals(0, penum.startOffset());\n    assertEquals(5, penum.endOffset());\n\n    BinaryDocValues binaryDocValues = leafReader.getBinaryDocValues(\"text\");\n    assertEquals(0, binaryDocValues.nextDoc());\n    assertEquals(\"quick brown fox\", binaryDocValues.binaryValue().utf8ToString());\n  }\n\n","sourceOld":"  public void testDocValuesDoNotAffectBoostPositionsOrOffset() throws Exception {\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")));\n    doc.add(new TextField(\"text\", \"quick brown fox\", Field.Store.NO));\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer, true, true);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n    TermsEnum tenum = leafReader.terms(\"text\").iterator();\n\n    assertEquals(\"brown\", tenum.next().utf8ToString());\n    PostingsEnum penum = tenum.postings(null, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(1, penum.nextPosition());\n    assertEquals(6, penum.startOffset());\n    assertEquals(11, penum.endOffset());\n\n    assertEquals(\"fox\", tenum.next().utf8ToString());\n    penum = tenum.postings(penum, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(2, penum.nextPosition());\n    assertEquals(12, penum.startOffset());\n    assertEquals(15, penum.endOffset());\n\n    assertEquals(\"quick\", tenum.next().utf8ToString());\n    penum = tenum.postings(penum, PostingsEnum.OFFSETS);\n    assertEquals(0, penum.nextDoc());\n    assertEquals(1, penum.freq());\n    assertEquals(0, penum.nextPosition());\n    assertEquals(0, penum.startOffset());\n    assertEquals(5, penum.endOffset());\n\n    BinaryDocValues binaryDocValues = leafReader.getBinaryDocValues(\"text\");\n    assertEquals(\"quick brown fox\", binaryDocValues.get(0).utf8ToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"253a79e1af11467dd01315b1919025d288aa0ccb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["253a79e1af11467dd01315b1919025d288aa0ccb","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["253a79e1af11467dd01315b1919025d288aa0ccb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["253a79e1af11467dd01315b1919025d288aa0ccb","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"253a79e1af11467dd01315b1919025d288aa0ccb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["253a79e1af11467dd01315b1919025d288aa0ccb"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}