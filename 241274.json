{"path":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFacetComponentSupport#handleResponses(ResponseBuilder,ShardRequest).mjava","commits":[{"id":"c7368def5a7dda562981cf936054217291690b88","date":1471606585,"type":1,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFacetComponentSupport#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFacetComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    NamedList collectedChildFacetFields = getChildFacetFields(rb.rsp.getValues(), true);\n    List<ShardResponse> responses = sreq.responses;\n    for (ShardResponse shardResponse : responses) {\n      NamedList shardChildFacetFields = getChildFacetFields(shardResponse.getSolrResponse().getResponse(), false);\n      mergeFacets(collectedChildFacetFields, shardChildFacetFields);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    NamedList collectedChildFacetFields = getChildFacetFields(rb.rsp.getValues(), true);\n    List<ShardResponse> responses = sreq.responses;\n    for (ShardResponse shardResponse : responses) {\n      NamedList shardChildFacetFields = getChildFacetFields(shardResponse.getSolrResponse().getResponse(), false);\n      mergeFacets(collectedChildFacetFields, shardChildFacetFields);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFacetComponentSupport#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFacetComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    NamedList collectedChildFacetFields = getChildFacetFields(rb.rsp.getValues(), true);\n    List<ShardResponse> responses = sreq.responses;\n    for (ShardResponse shardResponse : responses) {\n      NamedList shardChildFacetFields = getChildFacetFields(shardResponse.getSolrResponse().getResponse(), false);\n      mergeFacets(collectedChildFacetFields, shardChildFacetFields);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    NamedList collectedChildFacetFields = getChildFacetFields(rb.rsp.getValues(), true);\n    List<ShardResponse> responses = sreq.responses;\n    for (ShardResponse shardResponse : responses) {\n      NamedList shardChildFacetFields = getChildFacetFields(shardResponse.getSolrResponse().getResponse(), false);\n      mergeFacets(collectedChildFacetFields, shardChildFacetFields);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFacetComponentSupport#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFacetComponent#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    NamedList collectedChildFacetFields = getChildFacetFields(rb.rsp.getValues(), true);\n    List<ShardResponse> responses = sreq.responses;\n    for (ShardResponse shardResponse : responses) {\n      NamedList shardChildFacetFields = getChildFacetFields(shardResponse.getSolrResponse().getResponse(), false);\n      mergeFacets(collectedChildFacetFields, shardChildFacetFields);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    NamedList collectedChildFacetFields = getChildFacetFields(rb.rsp.getValues(), true);\n    List<ShardResponse> responses = sreq.responses;\n    for (ShardResponse shardResponse : responses) {\n      NamedList shardChildFacetFields = getChildFacetFields(shardResponse.getSolrResponse().getResponse(), false);\n      mergeFacets(collectedChildFacetFields, shardChildFacetFields);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce10a28c50d8072f34d6c5dd02ff8e2ed0396a94","date":1493112785,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFacetComponentSupport#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFacetComponentSupport#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n      NamedList collectedChildFacetFields = getChildFacetFields(rb.rsp.getValues(), true);\n      List<ShardResponse> responses = sreq.responses;\n      for (ShardResponse shardResponse : responses) {\n        NamedList shardChildFacetFields = getChildFacetFields(shardResponse.getSolrResponse().getResponse(), false);\n        mergeFacets(collectedChildFacetFields, shardChildFacetFields);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    NamedList collectedChildFacetFields = getChildFacetFields(rb.rsp.getValues(), true);\n    List<ShardResponse> responses = sreq.responses;\n    for (ShardResponse shardResponse : responses) {\n      NamedList shardChildFacetFields = getChildFacetFields(shardResponse.getSolrResponse().getResponse(), false);\n      mergeFacets(collectedChildFacetFields, shardChildFacetFields);\n    }\n  }\n\n","bugFix":["dbb4b815ac37f3938a2f7c18c2e7a5267ed50a1d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFacetComponentSupport#handleResponses(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFacetComponentSupport#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n      NamedList collectedChildFacetFields = getChildFacetFields(rb.rsp.getValues(), true);\n      List<ShardResponse> responses = sreq.responses;\n      for (ShardResponse shardResponse : responses) {\n        NamedList shardChildFacetFields = getChildFacetFields(shardResponse.getSolrResponse().getResponse(), false);\n        mergeFacets(collectedChildFacetFields, shardChildFacetFields);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    NamedList collectedChildFacetFields = getChildFacetFields(rb.rsp.getValues(), true);\n    List<ShardResponse> responses = sreq.responses;\n    for (ShardResponse shardResponse : responses) {\n      NamedList shardChildFacetFields = getChildFacetFields(shardResponse.getSolrResponse().getResponse(), false);\n      mergeFacets(collectedChildFacetFields, shardChildFacetFields);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00a778ad8ad6c2c04607538d2f36fee001239eef","date":1576657013,"type":4,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFacetComponentSupport#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n      NamedList collectedChildFacetFields = getChildFacetFields(rb.rsp.getValues(), true);\n      List<ShardResponse> responses = sreq.responses;\n      for (ShardResponse shardResponse : responses) {\n        NamedList shardChildFacetFields = getChildFacetFields(shardResponse.getSolrResponse().getResponse(), false);\n        mergeFacets(collectedChildFacetFields, shardChildFacetFields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"246314af59d76a47fccc31e9494eefee01ec9c00","date":1576657955,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/join/BlockJoinFacetComponentSupport#handleResponses(ResponseBuilder,ShardRequest).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) {\n      NamedList collectedChildFacetFields = getChildFacetFields(rb.rsp.getValues(), true);\n      List<ShardResponse> responses = sreq.responses;\n      for (ShardResponse shardResponse : responses) {\n        NamedList shardChildFacetFields = getChildFacetFields(shardResponse.getSolrResponse().getResponse(), false);\n        mergeFacets(collectedChildFacetFields, shardChildFacetFields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"246314af59d76a47fccc31e9494eefee01ec9c00":["ce10a28c50d8072f34d6c5dd02ff8e2ed0396a94","00a778ad8ad6c2c04607538d2f36fee001239eef"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["403d05f7f8d69b65659157eff1bc1d2717f04c66","ce10a28c50d8072f34d6c5dd02ff8e2ed0396a94"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7368def5a7dda562981cf936054217291690b88"],"ce10a28c50d8072f34d6c5dd02ff8e2ed0396a94":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"c7368def5a7dda562981cf936054217291690b88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"00a778ad8ad6c2c04607538d2f36fee001239eef":["ce10a28c50d8072f34d6c5dd02ff8e2ed0396a94"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["00a778ad8ad6c2c04607538d2f36fee001239eef"]},"commit2Childs":{"246314af59d76a47fccc31e9494eefee01ec9c00":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["e9017cf144952056066919f1ebc7897ff9bd71b1","ce10a28c50d8072f34d6c5dd02ff8e2ed0396a94","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ce10a28c50d8072f34d6c5dd02ff8e2ed0396a94":["246314af59d76a47fccc31e9494eefee01ec9c00","e9017cf144952056066919f1ebc7897ff9bd71b1","00a778ad8ad6c2c04607538d2f36fee001239eef"],"c7368def5a7dda562981cf936054217291690b88":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","c7368def5a7dda562981cf936054217291690b88","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"00a778ad8ad6c2c04607538d2f36fee001239eef":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["246314af59d76a47fccc31e9494eefee01ec9c00","e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}