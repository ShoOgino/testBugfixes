{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Build a string representation of the path, with its components separated\n   * by the given delimiter character. The resulting string is returned as a\n   * new String object. To avoid this temporary object creation, consider\n   * using {@link #appendTo(Appendable, char)} instead.\n   * <P>\n   * Note that the two cases of zero components and one component with zero\n   * length produce indistinguishable results (both of them return an empty\n   * string). This is normally not a problem, because components should not\n   * normally have zero lengths.\n   */\n  public String toString(char delimiter) {\n    if (ncomponents == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder(ends[ncomponents - 1]\n        + (ncomponents - 1));\n    try {\n      this.appendTo(sb, delimiter);\n    } catch (IOException e) {\n      // can't happen, because StringBuilder.append() never actually\n      // throws an exception!\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Build a string representation of the path, with its components separated\n   * by the given delimiter character. The resulting string is returned as a\n   * new String object. To avoid this temporary object creation, consider\n   * using {@link #appendTo(Appendable, char)} instead.\n   * <P>\n   * Note that the two cases of zero components and one component with zero\n   * length produce indistinguishable results (both of them return an empty\n   * string). This is normally not a problem, because components should not\n   * normally have zero lengths.\n   */\n  public String toString(char delimiter) {\n    if (ncomponents == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder(ends[ncomponents - 1]\n        + (ncomponents - 1));\n    try {\n      this.appendTo(sb, delimiter);\n    } catch (IOException e) {\n      // can't happen, because StringBuilder.append() never actually\n      // throws an exception!\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Build a string representation of the path, with its components separated\n   * by the given delimiter character. The resulting string is returned as a\n   * new String object. To avoid this temporary object creation, consider\n   * using {@link #appendTo(Appendable, char)} instead.\n   * <P>\n   * Note that the two cases of zero components and one component with zero\n   * length produce indistinguishable results (both of them return an empty\n   * string). This is normally not a problem, because components should not\n   * normally have zero lengths.\n   */\n  public String toString(char delimiter) {\n    if (ncomponents == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder(ends[ncomponents - 1]\n        + (ncomponents - 1));\n    try {\n      this.appendTo(sb, delimiter);\n    } catch (IOException e) {\n      // can't happen, because StringBuilder.append() never actually\n      // throws an exception!\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#toString(char).mjava","sourceNew":"  /**\n   * Build a string representation of the path, with its components separated\n   * by the given delimiter character. The resulting string is returned as a\n   * new String object. To avoid this temporary object creation, consider\n   * using {@link #appendTo(Appendable, char)} instead.\n   * <P>\n   * Note that the two cases of zero components and one component with zero\n   * length produce indistinguishable results (both of them return an empty\n   * string). This is normally not a problem, because components should not\n   * normally have zero lengths.\n   */\n  public String toString(char delimiter) {\n    if (ncomponents == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder(ends[ncomponents - 1]\n        + (ncomponents - 1));\n    try {\n      this.appendTo(sb, delimiter);\n    } catch (IOException e) {\n      // can't happen, because StringBuilder.append() never actually\n      // throws an exception!\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Build a string representation of the path, with its components separated\n   * by the given delimiter character. The resulting string is returned as a\n   * new String object. To avoid this temporary object creation, consider\n   * using {@link #appendTo(Appendable, char)} instead.\n   * <P>\n   * Note that the two cases of zero components and one component with zero\n   * length produce indistinguishable results (both of them return an empty\n   * string). This is normally not a problem, because components should not\n   * normally have zero lengths.\n   */\n  public String toString(char delimiter) {\n    if (ncomponents == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder(ends[ncomponents - 1]\n        + (ncomponents - 1));\n    try {\n      this.appendTo(sb, delimiter);\n    } catch (IOException e) {\n      // can't happen, because StringBuilder.append() never actually\n      // throws an exception!\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}