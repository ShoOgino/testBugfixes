{"path":"lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram#out_grouping(char[],int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram#out_grouping(char[],int,int).mjava","pathOld":"modules/analysis/common/src/java/org/tartarus/snowball/SnowballProgram#out_grouping(char[],int,int).mjava","sourceNew":"    protected boolean out_grouping(char [] s, int min, int max)\n    {\n\tif (cursor >= limit) return false;\n\tchar ch = current[cursor];\n\tif (ch > max || ch < min) {\n\t    cursor++;\n\t    return true;\n\t}\n\tch -= min;\n\tif ((s[ch >> 3] & (0X1 << (ch & 0X7))) == 0) {\n\t    cursor ++;\n\t    return true;\n\t}\n\treturn false;\n    }\n\n","sourceOld":"    protected boolean out_grouping(char [] s, int min, int max)\n    {\n\tif (cursor >= limit) return false;\n\tchar ch = current[cursor];\n\tif (ch > max || ch < min) {\n\t    cursor++;\n\t    return true;\n\t}\n\tch -= min;\n\tif ((s[ch >> 3] & (0X1 << (ch & 0X7))) == 0) {\n\t    cursor ++;\n\t    return true;\n\t}\n\treturn false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram#out_grouping(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram#out_grouping(char[],int,int).mjava","sourceNew":"    protected boolean out_grouping(char [] s, int min, int max)\n    {\n      if (cursor >= limit) return false;\n      char ch = current[cursor];\n      if (ch > max || ch < min) {\n          cursor++;\n          return true;\n      }\n      ch -= min;\n      if ((s[ch >> 3] & (0X1 << (ch & 0X7))) == 0) {\n          cursor ++;\n          return true;\n      }\n      return false;\n    }\n\n","sourceOld":"    protected boolean out_grouping(char [] s, int min, int max)\n    {\n\tif (cursor >= limit) return false;\n\tchar ch = current[cursor];\n\tif (ch > max || ch < min) {\n\t    cursor++;\n\t    return true;\n\t}\n\tch -= min;\n\tif ((s[ch >> 3] & (0X1 << (ch & 0X7))) == 0) {\n\t    cursor ++;\n\t    return true;\n\t}\n\treturn false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09479cd2de06c67a115b7346a8e5de8af4d62e81","date":1581961081,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram#out_grouping(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram#out_grouping(char[],int,int).mjava","sourceNew":"  protected boolean out_grouping(char [] s, int min, int max)\n  {\n    if (cursor >= limit) return false;\n    char ch = current[cursor];\n    if (ch > max || ch < min) {\n      cursor++;\n      return true;\n    }\n    ch -= min;\n    if ((s[ch >> 3] & (0X1 << (ch & 0X7))) == 0) {\n      cursor++;\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"    protected boolean out_grouping(char [] s, int min, int max)\n    {\n      if (cursor >= limit) return false;\n      char ch = current[cursor];\n      if (ch > max || ch < min) {\n          cursor++;\n          return true;\n      }\n      ch -= min;\n      if ((s[ch >> 3] & (0X1 << (ch & 0X7))) == 0) {\n          cursor ++;\n          return true;\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09479cd2de06c67a115b7346a8e5de8af4d62e81":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09479cd2de06c67a115b7346a8e5de8af4d62e81"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"09479cd2de06c67a115b7346a8e5de8af4d62e81":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["09479cd2de06c67a115b7346a8e5de8af4d62e81"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}