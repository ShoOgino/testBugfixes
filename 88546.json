{"path":"solr/core/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object,float).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.document.Fieldable} instances\n   * @param field the {@link org.apache.solr.schema.SchemaField}\n   * @param value The value to add to the field\n   * @param boost The boost to apply\n   * @return An array of {@link org.apache.lucene.document.Fieldable}\n   *\n   * @see #createField(SchemaField, Object, float)\n   * @see #isPolyField()\n   */\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    Fieldable f = createField( field, value, boost);\n    return f==null ? new Fieldable[]{} : new Fieldable[]{f};\n  }\n\n","sourceOld":"  /**\n   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.document.Fieldable} instances\n   * @param field the {@link org.apache.solr.schema.SchemaField}\n   * @param value The value to add to the field\n   * @param boost The boost to apply\n   * @return An array of {@link org.apache.lucene.document.Fieldable}\n   *\n   * @see #createField(SchemaField, Object, float)\n   * @see #isPolyField()\n   */\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    Fieldable f = createField( field, value, boost);\n    return f==null ? new Fieldable[]{} : new Fieldable[]{f};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.document.Fieldable} instances\n   * @param field the {@link org.apache.solr.schema.SchemaField}\n   * @param value The value to add to the field\n   * @param boost The boost to apply\n   * @return An array of {@link org.apache.lucene.document.Fieldable}\n   *\n   * @see #createField(SchemaField, Object, float)\n   * @see #isPolyField()\n   */\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    Fieldable f = createField( field, value, boost);\n    return f==null ? new Fieldable[]{} : new Fieldable[]{f};\n  }\n\n","sourceOld":"  /**\n   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.document.Fieldable} instances\n   * @param field the {@link org.apache.solr.schema.SchemaField}\n   * @param value The value to add to the field\n   * @param boost The boost to apply\n   * @return An array of {@link org.apache.lucene.document.Fieldable}\n   *\n   * @see #createField(SchemaField, Object, float)\n   * @see #isPolyField()\n   */\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    Fieldable f = createField( field, value, boost);\n    return f==null ? new Fieldable[]{} : new Fieldable[]{f};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.document.Fieldable} instances\n   * @param field the {@link org.apache.solr.schema.SchemaField}\n   * @param value The value to add to the field\n   * @param boost The boost to apply\n   * @return An array of {@link org.apache.lucene.document.Fieldable}\n   *\n   * @see #createField(SchemaField, Object, float)\n   * @see #isPolyField()\n   */\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    Fieldable f = createField( field, value, boost);\n    return f==null ? new Fieldable[]{} : new Fieldable[]{f};\n  }\n\n","sourceOld":"  /**\n   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.document.Fieldable} instances\n   * @param field the {@link org.apache.solr.schema.SchemaField}\n   * @param value The value to add to the field\n   * @param boost The boost to apply\n   * @return An array of {@link org.apache.lucene.document.Fieldable}\n   *\n   * @see #createField(SchemaField, Object, float)\n   * @see #isPolyField()\n   */\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    Fieldable f = createField( field, value, boost);\n    return f==null ? new Fieldable[]{} : new Fieldable[]{f};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.index.IndexableField} instances\n   * @param field the {@link org.apache.solr.schema.SchemaField}\n   * @param value The value to add to the field\n   * @param boost The boost to apply\n   * @return An array of {@link org.apache.lucene.index.IndexableField}\n   *\n   * @see #createField(SchemaField, Object, float)\n   * @see #isPolyField()\n   */\n  public IndexableField[] createFields(SchemaField field, Object value, float boost) {\n    IndexableField f = createField( field, value, boost);\n    return f==null ? new IndexableField[]{} : new IndexableField[]{f};\n  }\n\n","sourceOld":"  /**\n   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.document.Fieldable} instances\n   * @param field the {@link org.apache.solr.schema.SchemaField}\n   * @param value The value to add to the field\n   * @param boost The boost to apply\n   * @return An array of {@link org.apache.lucene.document.Fieldable}\n   *\n   * @see #createField(SchemaField, Object, float)\n   * @see #isPolyField()\n   */\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    Fieldable f = createField( field, value, boost);\n    return f==null ? new Fieldable[]{} : new Fieldable[]{f};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.index.IndexableField} instances\n   * @param field the {@link org.apache.solr.schema.SchemaField}\n   * @param value The value to add to the field\n   * @param boost The boost to apply\n   * @return An array of {@link org.apache.lucene.index.IndexableField}\n   *\n   * @see #createField(SchemaField, Object, float)\n   * @see #isPolyField()\n   */\n  public StorableField[] createFields(SchemaField field, Object value, float boost) {\n    StorableField f = createField( field, value, boost);\n    return f==null ? new StorableField[]{} : new StorableField[]{f};\n  }\n\n","sourceOld":"  /**\n   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.index.IndexableField} instances\n   * @param field the {@link org.apache.solr.schema.SchemaField}\n   * @param value The value to add to the field\n   * @param boost The boost to apply\n   * @return An array of {@link org.apache.lucene.index.IndexableField}\n   *\n   * @see #createField(SchemaField, Object, float)\n   * @see #isPolyField()\n   */\n  public IndexableField[] createFields(SchemaField field, Object value, float boost) {\n    IndexableField f = createField( field, value, boost);\n    return f==null ? new IndexableField[]{} : new IndexableField[]{f};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.index.IndexableField} instances\n   * @param field the {@link org.apache.solr.schema.SchemaField}\n   * @param value The value to add to the field\n   * @param boost The boost to apply\n   * @return An array of {@link org.apache.lucene.index.IndexableField}\n   *\n   * @see #createField(SchemaField, Object, float)\n   * @see #isPolyField()\n   */\n  public StorableField[] createFields(SchemaField field, Object value, float boost) {\n    StorableField f = createField( field, value, boost);\n    return f==null ? new StorableField[]{} : new StorableField[]{f};\n  }\n\n","sourceOld":"  /**\n   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.index.IndexableField} instances\n   * @param field the {@link org.apache.solr.schema.SchemaField}\n   * @param value The value to add to the field\n   * @param boost The boost to apply\n   * @return An array of {@link org.apache.lucene.index.IndexableField}\n   *\n   * @see #createField(SchemaField, Object, float)\n   * @see #isPolyField()\n   */\n  public IndexableField[] createFields(SchemaField field, Object value, float boost) {\n    IndexableField f = createField( field, value, boost);\n    return f==null ? new IndexableField[]{} : new IndexableField[]{f};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.index.IndexableField} instances\n   * @param field the {@link org.apache.solr.schema.SchemaField}\n   * @param value The value to add to the field\n   * @param boost The boost to apply\n   * @return An array of {@link org.apache.lucene.index.IndexableField}\n   *\n   * @see #createField(SchemaField, Object, float)\n   * @see #isPolyField()\n   */\n  public List<StorableField> createFields(SchemaField field, Object value, float boost) {\n    StorableField f = createField( field, value, boost);\n    if (field.hasDocValues() && f.fieldType().docValueType() == null) {\n      // field types that support doc values should either override createField\n      // to return a field with doc values or extend createFields if this can't\n      // be done in a single field instance (see StrField for example)\n      throw new UnsupportedOperationException(\"This field type does not support doc values: \" + this);\n    }\n    return f==null ? Collections.<StorableField>emptyList() : Collections.singletonList(f);\n  }\n\n","sourceOld":"  /**\n   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.index.IndexableField} instances\n   * @param field the {@link org.apache.solr.schema.SchemaField}\n   * @param value The value to add to the field\n   * @param boost The boost to apply\n   * @return An array of {@link org.apache.lucene.index.IndexableField}\n   *\n   * @see #createField(SchemaField, Object, float)\n   * @see #isPolyField()\n   */\n  public StorableField[] createFields(SchemaField field, Object value, float boost) {\n    StorableField f = createField( field, value, boost);\n    return f==null ? new StorableField[]{} : new StorableField[]{f};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.index.IndexableField} instances\n   * @param field the {@link org.apache.solr.schema.SchemaField}\n   * @param value The value to add to the field\n   * @param boost The boost to apply\n   * @return An array of {@link org.apache.lucene.index.IndexableField}\n   *\n   * @see #createField(SchemaField, Object, float)\n   * @see #isPolyField()\n   */\n  public List<StorableField> createFields(SchemaField field, Object value, float boost) {\n    StorableField f = createField( field, value, boost);\n    if (field.hasDocValues() && f.fieldType().docValueType() == null) {\n      // field types that support doc values should either override createField\n      // to return a field with doc values or extend createFields if this can't\n      // be done in a single field instance (see StrField for example)\n      throw new UnsupportedOperationException(\"This field type does not support doc values: \" + this);\n    }\n    return f==null ? Collections.<StorableField>emptyList() : Collections.singletonList(f);\n  }\n\n","sourceOld":"  /**\n   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.index.IndexableField} instances\n   * @param field the {@link org.apache.solr.schema.SchemaField}\n   * @param value The value to add to the field\n   * @param boost The boost to apply\n   * @return An array of {@link org.apache.lucene.index.IndexableField}\n   *\n   * @see #createField(SchemaField, Object, float)\n   * @see #isPolyField()\n   */\n  public StorableField[] createFields(SchemaField field, Object value, float boost) {\n    StorableField f = createField( field, value, boost);\n    return f==null ? new StorableField[]{} : new StorableField[]{f};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e","date":1415435053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.index.IndexableField} instances\n   * @param field the {@link org.apache.solr.schema.SchemaField}\n   * @param value The value to add to the field\n   * @param boost The boost to apply\n   * @return An array of {@link org.apache.lucene.index.IndexableField}\n   *\n   * @see #createField(SchemaField, Object, float)\n   * @see #isPolyField()\n   */\n  public List<StorableField> createFields(SchemaField field, Object value, float boost) {\n    StorableField f = createField( field, value, boost);\n    if (field.hasDocValues() && f.fieldType().docValuesType() == null) {\n      // field types that support doc values should either override createField\n      // to return a field with doc values or extend createFields if this can't\n      // be done in a single field instance (see StrField for example)\n      throw new UnsupportedOperationException(\"This field type does not support doc values: \" + this);\n    }\n    return f==null ? Collections.<StorableField>emptyList() : Collections.singletonList(f);\n  }\n\n","sourceOld":"  /**\n   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.index.IndexableField} instances\n   * @param field the {@link org.apache.solr.schema.SchemaField}\n   * @param value The value to add to the field\n   * @param boost The boost to apply\n   * @return An array of {@link org.apache.lucene.index.IndexableField}\n   *\n   * @see #createField(SchemaField, Object, float)\n   * @see #isPolyField()\n   */\n  public List<StorableField> createFields(SchemaField field, Object value, float boost) {\n    StorableField f = createField( field, value, boost);\n    if (field.hasDocValues() && f.fieldType().docValueType() == null) {\n      // field types that support doc values should either override createField\n      // to return a field with doc values or extend createFields if this can't\n      // be done in a single field instance (see StrField for example)\n      throw new UnsupportedOperationException(\"This field type does not support doc values: \" + this);\n    }\n    return f==null ? Collections.<StorableField>emptyList() : Collections.singletonList(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.index.IndexableField} instances\n   * @param field the {@link org.apache.solr.schema.SchemaField}\n   * @param value The value to add to the field\n   * @param boost The boost to apply\n   * @return An array of {@link org.apache.lucene.index.IndexableField}\n   *\n   * @see #createField(SchemaField, Object, float)\n   * @see #isPolyField()\n   */\n  public List<IndexableField> createFields(SchemaField field, Object value, float boost) {\n    IndexableField f = createField( field, value, boost);\n    if (field.hasDocValues() && f.fieldType().docValuesType() == null) {\n      // field types that support doc values should either override createField\n      // to return a field with doc values or extend createFields if this can't\n      // be done in a single field instance (see StrField for example)\n      throw new UnsupportedOperationException(\"This field type does not support doc values: \" + this);\n    }\n    return f==null ? Collections.<IndexableField>emptyList() : Collections.singletonList(f);\n  }\n\n","sourceOld":"  /**\n   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.index.IndexableField} instances\n   * @param field the {@link org.apache.solr.schema.SchemaField}\n   * @param value The value to add to the field\n   * @param boost The boost to apply\n   * @return An array of {@link org.apache.lucene.index.IndexableField}\n   *\n   * @see #createField(SchemaField, Object, float)\n   * @see #isPolyField()\n   */\n  public List<StorableField> createFields(SchemaField field, Object value, float boost) {\n    StorableField f = createField( field, value, boost);\n    if (field.hasDocValues() && f.fieldType().docValuesType() == null) {\n      // field types that support doc values should either override createField\n      // to return a field with doc values or extend createFields if this can't\n      // be done in a single field instance (see StrField for example)\n      throw new UnsupportedOperationException(\"This field type does not support doc values: \" + this);\n    }\n    return f==null ? Collections.<StorableField>emptyList() : Collections.singletonList(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createFields(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.index.IndexableField} instances\n   * @param field the {@link org.apache.solr.schema.SchemaField}\n   * @param value The value to add to the field\n   * @return An array of {@link org.apache.lucene.index.IndexableField}\n   *\n   * @see #createField(SchemaField, Object)\n   * @see #isPolyField()\n   */\n  public List<IndexableField> createFields(SchemaField field, Object value) {\n    IndexableField f = createField( field, value);\n    if (field.hasDocValues() && f.fieldType().docValuesType() == null) {\n      // field types that support doc values should either override createField\n      // to return a field with doc values or extend createFields if this can't\n      // be done in a single field instance (see StrField for example)\n      throw new UnsupportedOperationException(\"This field type does not support doc values: \" + this);\n    }\n    return f==null ? Collections.<IndexableField>emptyList() : Collections.singletonList(f);\n  }\n\n","sourceOld":"  /**\n   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.index.IndexableField} instances\n   * @param field the {@link org.apache.solr.schema.SchemaField}\n   * @param value The value to add to the field\n   * @param boost The boost to apply\n   * @return An array of {@link org.apache.lucene.index.IndexableField}\n   *\n   * @see #createField(SchemaField, Object, float)\n   * @see #isPolyField()\n   */\n  public List<IndexableField> createFields(SchemaField field, Object value, float boost) {\n    IndexableField f = createField( field, value, boost);\n    if (field.hasDocValues() && f.fieldType().docValuesType() == null) {\n      // field types that support doc values should either override createField\n      // to return a field with doc values or extend createFields if this can't\n      // be done in a single field instance (see StrField for example)\n      throw new UnsupportedOperationException(\"This field type does not support doc values: \" + this);\n    }\n    return f==null ? Collections.<IndexableField>emptyList() : Collections.singletonList(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409324b31a1419d7c05a38211168cf317e39be77":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"1d028314cced5858683a1bb4741423d0f934257b":["1509f151d7692d84fae414b2b799ac06ba60fcb4","409324b31a1419d7c05a38211168cf317e39be77"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["1d028314cced5858683a1bb4741423d0f934257b","73bb5a57dc75b54a39494f99986599cae7dff417"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e":["73bb5a57dc75b54a39494f99986599cae7dff417"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["c26f00b574427b55127e869b935845554afde1fa"],"acd9883560fd89e6448b2b447302fe543040cd4f":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["eac6ccb51c439bec7f67cb0e299d3cb77b62b87e"],"73bb5a57dc75b54a39494f99986599cae7dff417":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"409324b31a1419d7c05a38211168cf317e39be77":["1d028314cced5858683a1bb4741423d0f934257b"],"c26f00b574427b55127e869b935845554afde1fa":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1d028314cced5858683a1bb4741423d0f934257b":["95303ff3749680c743b9425f9cf99e6e4065e8a8","73bb5a57dc75b54a39494f99986599cae7dff417"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["409324b31a1419d7c05a38211168cf317e39be77","1d028314cced5858683a1bb4741423d0f934257b"],"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"73bb5a57dc75b54a39494f99986599cae7dff417":["95303ff3749680c743b9425f9cf99e6e4065e8a8","eac6ccb51c439bec7f67cb0e299d3cb77b62b87e"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["acd9883560fd89e6448b2b447302fe543040cd4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["95303ff3749680c743b9425f9cf99e6e4065e8a8","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}