{"path":"solr/contrib/velocity/src/java/org/apache/solr/response/SolrParamResourceLoader#SolrParamResourceLoader(SolrQueryRequest).mjava","commits":[{"id":"71946974c05b5dc4d3201f8abf4ecd2609bba400","date":1319655558,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/SolrParamResourceLoader#SolrParamResourceLoader(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SolrParamResourceLoader#SolrParamResourceLoader(SolrQueryRequest).mjava","sourceNew":"  public SolrParamResourceLoader(SolrQueryRequest request) {\n    super();\n\n    // TODO: Consider using content streams, but need a template name associated with each stream\n    // for now, a custom param convention of template.<name>=<template body> is a nice example\n    // of per-request overrides of templates\n\n    org.apache.solr.common.params.SolrParams params = request.getParams();\n    Iterator<String> names = params.getParameterNamesIterator();\n    while (names.hasNext()) {\n      String name = names.next();\n      \n      if (name.startsWith(\"v.template.\")) {\n        templates.put(name.substring(11) + \".vm\",params.get(name));\n      }\n    }\n  }\n\n","sourceOld":"  public SolrParamResourceLoader(SolrQueryRequest request) {\n    super();\n\n    // TODO: Consider using content streams, but need a template name associated with each stream\n    // for now, a custom param convention of template.<name>=<template body> is a nice example\n    // of per-request overrides of templates\n\n    org.apache.solr.common.params.SolrParams params = request.getParams();\n    Iterator<String> names = params.getParameterNamesIterator();\n    while (names.hasNext()) {\n      String name = names.next();\n      \n      if (name.startsWith(\"v.template.\")) {\n        templates.put(name.substring(11) + \".vm\",params.get(name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1936b95f78af7bc57e67df5b0de3f21a54df10af","date":1420842770,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/SolrParamResourceLoader#SolrParamResourceLoader(SolrQueryRequest).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/SolrParamResourceLoader#SolrParamResourceLoader(SolrQueryRequest).mjava","sourceNew":"  public SolrParamResourceLoader(SolrQueryRequest request) {\n    super();\n\n    // TODO: Consider using content streams, but need a template name associated with each stream\n    // for now, a custom param convention of template.<name>=<template body> is a nice example\n    // of per-request overrides of templates\n\n    org.apache.solr.common.params.SolrParams params = request.getParams();\n    Iterator<String> names = params.getParameterNamesIterator();\n    while (names.hasNext()) {\n      String name = names.next();\n      \n      if (name.startsWith(TEMPLATE_PARAM_PREFIX)) {\n        templates.put(name.substring(TEMPLATE_PARAM_PREFIX.length()) + VelocityResponseWriter.TEMPLATE_EXTENSION,params.get(name));\n      }\n    }\n  }\n\n","sourceOld":"  public SolrParamResourceLoader(SolrQueryRequest request) {\n    super();\n\n    // TODO: Consider using content streams, but need a template name associated with each stream\n    // for now, a custom param convention of template.<name>=<template body> is a nice example\n    // of per-request overrides of templates\n\n    org.apache.solr.common.params.SolrParams params = request.getParams();\n    Iterator<String> names = params.getParameterNamesIterator();\n    while (names.hasNext()) {\n      String name = names.next();\n      \n      if (name.startsWith(\"v.template.\")) {\n        templates.put(name.substring(11) + \".vm\",params.get(name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada1d1c1521680f2ede5f2a7e78c69f077b6caa6","date":1553522324,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/SolrParamResourceLoader#SolrParamResourceLoader(SolrQueryRequest).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/SolrParamResourceLoader#SolrParamResourceLoader(SolrQueryRequest).mjava","sourceNew":"  public SolrParamResourceLoader(SolrQueryRequest request) {\n    super();\n\n    // TODO: Consider using content streams, but need a template name associated with each stream\n    // for now, a custom param convention of template.<name>=<template body> is a nice example\n    // of per-request overrides of templates\n\n    SolrParams params = request.getParams();\n    Iterator<String> names = params.getParameterNamesIterator();\n    while (names.hasNext()) {\n      String name = names.next();\n      \n      if (name.startsWith(TEMPLATE_PARAM_PREFIX)) {\n        templates.put(name.substring(TEMPLATE_PARAM_PREFIX.length()) + VelocityResponseWriter.TEMPLATE_EXTENSION,params.get(name));\n      }\n    }\n  }\n\n","sourceOld":"  public SolrParamResourceLoader(SolrQueryRequest request) {\n    super();\n\n    // TODO: Consider using content streams, but need a template name associated with each stream\n    // for now, a custom param convention of template.<name>=<template body> is a nice example\n    // of per-request overrides of templates\n\n    org.apache.solr.common.params.SolrParams params = request.getParams();\n    Iterator<String> names = params.getParameterNamesIterator();\n    while (names.hasNext()) {\n      String name = names.next();\n      \n      if (name.startsWith(TEMPLATE_PARAM_PREFIX)) {\n        templates.put(name.substring(TEMPLATE_PARAM_PREFIX.length()) + VelocityResponseWriter.TEMPLATE_EXTENSION,params.get(name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d94deac68514af4c985eabd56d9bb95ce27467b9","date":1576085774,"type":4,"author":"Erik Hatcher","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/SolrParamResourceLoader#SolrParamResourceLoader(SolrQueryRequest).mjava","sourceNew":null,"sourceOld":"  public SolrParamResourceLoader(SolrQueryRequest request) {\n    super();\n\n    // TODO: Consider using content streams, but need a template name associated with each stream\n    // for now, a custom param convention of template.<name>=<template body> is a nice example\n    // of per-request overrides of templates\n\n    SolrParams params = request.getParams();\n    Iterator<String> names = params.getParameterNamesIterator();\n    while (names.hasNext()) {\n      String name = names.next();\n      \n      if (name.startsWith(TEMPLATE_PARAM_PREFIX)) {\n        templates.put(name.substring(TEMPLATE_PARAM_PREFIX.length()) + VelocityResponseWriter.TEMPLATE_EXTENSION,params.get(name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/SolrParamResourceLoader#SolrParamResourceLoader(SolrQueryRequest).mjava","sourceNew":null,"sourceOld":"  public SolrParamResourceLoader(SolrQueryRequest request) {\n    super();\n\n    // TODO: Consider using content streams, but need a template name associated with each stream\n    // for now, a custom param convention of template.<name>=<template body> is a nice example\n    // of per-request overrides of templates\n\n    SolrParams params = request.getParams();\n    Iterator<String> names = params.getParameterNamesIterator();\n    while (names.hasNext()) {\n      String name = names.next();\n      \n      if (name.startsWith(TEMPLATE_PARAM_PREFIX)) {\n        templates.put(name.substring(TEMPLATE_PARAM_PREFIX.length()) + VelocityResponseWriter.TEMPLATE_EXTENSION,params.get(name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1936b95f78af7bc57e67df5b0de3f21a54df10af":["71946974c05b5dc4d3201f8abf4ecd2609bba400"],"df724d84dab24a0cc54bec95a8680867adc7f171":["ada1d1c1521680f2ede5f2a7e78c69f077b6caa6","d94deac68514af4c985eabd56d9bb95ce27467b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d94deac68514af4c985eabd56d9bb95ce27467b9":["ada1d1c1521680f2ede5f2a7e78c69f077b6caa6"],"ada1d1c1521680f2ede5f2a7e78c69f077b6caa6":["1936b95f78af7bc57e67df5b0de3f21a54df10af"],"71946974c05b5dc4d3201f8abf4ecd2609bba400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d94deac68514af4c985eabd56d9bb95ce27467b9"]},"commit2Childs":{"1936b95f78af7bc57e67df5b0de3f21a54df10af":["ada1d1c1521680f2ede5f2a7e78c69f077b6caa6"],"df724d84dab24a0cc54bec95a8680867adc7f171":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71946974c05b5dc4d3201f8abf4ecd2609bba400"],"d94deac68514af4c985eabd56d9bb95ce27467b9":["df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ada1d1c1521680f2ede5f2a7e78c69f077b6caa6":["df724d84dab24a0cc54bec95a8680867adc7f171","d94deac68514af4c985eabd56d9bb95ce27467b9"],"71946974c05b5dc4d3201f8abf4ecd2609bba400":["1936b95f78af7bc57e67df5b0de3f21a54df10af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}