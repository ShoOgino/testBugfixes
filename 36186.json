{"path":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","commits":[{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#seek(BytesRef,TermState).mjava","sourceNew":"      @Override\n      public void seekExact(BytesRef target, TermState otherState) throws IOException {\n        //System.out.println(\"BTR.seek termState target=\" + target.utf8ToString() + \" \" + target + \" this=\" + this);\n        assert otherState != null && otherState instanceof BlockTermState;\n        assert !doOrd || ((BlockTermState) otherState).ord < numTerms;\n        state.copyFrom(otherState);\n        seekPending = true;\n        indexIsCurrent = false;\n        term.copy(target);\n      }\n\n","sourceOld":"      @Override\n      public void seek(BytesRef target, TermState otherState) throws IOException {\n        //System.out.println(\"BTR.seek termState target=\" + target.utf8ToString() + \" \" + target + \" this=\" + this);\n        assert otherState != null && otherState instanceof BlockTermState;\n        assert !doOrd || ((BlockTermState) otherState).ord < numTerms;\n        state.copyFrom(otherState);\n        seekPending = true;\n        indexIsCurrent = false;\n        term.copy(target);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#seek(BytesRef,TermState).mjava","sourceNew":"      @Override\n      public void seekExact(BytesRef target, TermState otherState) throws IOException {\n        //System.out.println(\"BTR.seek termState target=\" + target.utf8ToString() + \" \" + target + \" this=\" + this);\n        assert otherState != null && otherState instanceof BlockTermState;\n        assert !doOrd || ((BlockTermState) otherState).ord < numTerms;\n        state.copyFrom(otherState);\n        seekPending = true;\n        indexIsCurrent = false;\n        term.copy(target);\n      }\n\n","sourceOld":"      @Override\n      public void seek(BytesRef target, TermState otherState) throws IOException {\n        //System.out.println(\"BTR.seek termState target=\" + target.utf8ToString() + \" \" + target + \" this=\" + this);\n        assert otherState != null && otherState instanceof BlockTermState;\n        assert !doOrd || ((BlockTermState) otherState).ord < numTerms;\n        state.copyFrom(otherState);\n        seekPending = true;\n        indexIsCurrent = false;\n        term.copy(target);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public void seekExact(BytesRef target, TermState otherState) throws IOException {\n        //System.out.println(\"BTR.seek termState target=\" + target.utf8ToString() + \" \" + target + \" this=\" + this);\n        assert otherState != null && otherState instanceof BlockTermState;\n        assert !doOrd || ((BlockTermState) otherState).ord < numTerms;\n        state.copyFrom(otherState);\n        seekPending = true;\n        indexIsCurrent = false;\n        term.copy(target);\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","sourceNew":"      @Override\n      public void seekExact(BytesRef target, TermState otherState) throws IOException {\n        //System.out.println(\"BTR.seekExact termState target=\" + target.utf8ToString() + \" \" + target + \" this=\" + this);\n        assert otherState != null && otherState instanceof BlockTermState;\n        assert !doOrd || ((BlockTermState) otherState).ord < numTerms;\n        state.copyFrom(otherState);\n        seekPending = true;\n        indexIsCurrent = false;\n        term.copy(target);\n      }\n\n","sourceOld":"      @Override\n      public void seekExact(BytesRef target, TermState otherState) throws IOException {\n        //System.out.println(\"BTR.seek termState target=\" + target.utf8ToString() + \" \" + target + \" this=\" + this);\n        assert otherState != null && otherState instanceof BlockTermState;\n        assert !doOrd || ((BlockTermState) otherState).ord < numTerms;\n        state.copyFrom(otherState);\n        seekPending = true;\n        indexIsCurrent = false;\n        term.copy(target);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","sourceNew":"      @Override\n      public void seekExact(BytesRef target, TermState otherState) throws IOException {\n        //System.out.println(\"BTR.seekExact termState target=\" + target.utf8ToString() + \" \" + target + \" this=\" + this);\n        assert otherState != null && otherState instanceof BlockTermState;\n        assert !doOrd || ((BlockTermState) otherState).ord < numTerms;\n        state.copyFrom(otherState);\n        seekPending = true;\n        indexIsCurrent = false;\n        term.copyBytes(target);\n      }\n\n","sourceOld":"      @Override\n      public void seekExact(BytesRef target, TermState otherState) throws IOException {\n        //System.out.println(\"BTR.seekExact termState target=\" + target.utf8ToString() + \" \" + target + \" this=\" + this);\n        assert otherState != null && otherState instanceof BlockTermState;\n        assert !doOrd || ((BlockTermState) otherState).ord < numTerms;\n        state.copyFrom(otherState);\n        seekPending = true;\n        indexIsCurrent = false;\n        term.copy(target);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader.FieldReader.SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","sourceNew":"      @Override\n      public void seekExact(BytesRef target, TermState otherState) throws IOException {\n        //System.out.println(\"BTR.seekExact termState target=\" + target.utf8ToString() + \" \" + target + \" this=\" + this);\n        assert otherState != null && otherState instanceof BlockTermState;\n        assert !doOrd || ((BlockTermState) otherState).ord < numTerms;\n        state.copyFrom(otherState);\n        seekPending = true;\n        indexIsCurrent = false;\n        term.copyBytes(target);\n      }\n\n","sourceOld":"      @Override\n      public void seekExact(BytesRef target, TermState otherState) throws IOException {\n        //System.out.println(\"BTR.seekExact termState target=\" + target.utf8ToString() + \" \" + target + \" this=\" + this);\n        assert otherState != null && otherState instanceof BlockTermState;\n        assert !doOrd || ((BlockTermState) otherState).ord < numTerms;\n        state.copyFrom(otherState);\n        seekPending = true;\n        indexIsCurrent = false;\n        term.copyBytes(target);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9cc9d77712aba3662f24632df7539ab75e3667"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["e6e919043fa85ee891123768dd655a98edbbf63c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9cc9d77712aba3662f24632df7539ab75e3667"],"e6e919043fa85ee891123768dd655a98edbbf63c":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["e6e919043fa85ee891123768dd655a98edbbf63c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2553b00f699380c64959ccb27991289aae87be2e","fd9cc9d77712aba3662f24632df7539ab75e3667","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":[],"fd9cc9d77712aba3662f24632df7539ab75e3667":["60ba444201d2570214b6fcf1d15600dc1a01f548","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"e6e919043fa85ee891123768dd655a98edbbf63c":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}