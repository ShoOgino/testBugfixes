{"path":"lucene/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeInterval(int,int,int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeInterval(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a new automaton that accepts strings representing decimal\n   * non-negative integers in the given interval.\n   * \n   * @param min minimal value of interval\n   * @param max maximal value of interval (both end points are included in the\n   *          interval)\n   * @param digits if >0, use fixed number of digits (strings must be prefixed\n   *          by 0's to obtain the right length) - otherwise, the number of\n   *          digits is not fixed\n   * @exception IllegalArgumentException if min>max or if numbers in the\n   *              interval cannot be expressed with the given fixed number of\n   *              digits\n   */\n  public static Automaton makeInterval(int min, int max, int digits)\n      throws IllegalArgumentException {\n    Automaton a = new Automaton();\n    String x = Integer.toString(min);\n    String y = Integer.toString(max);\n    if (min > max || (digits > 0 && y.length() > digits)) throw new IllegalArgumentException();\n    int d;\n    if (digits > 0) d = digits;\n    else d = y.length();\n    StringBuilder bx = new StringBuilder();\n    for (int i = x.length(); i < d; i++)\n      bx.append('0');\n    bx.append(x);\n    x = bx.toString();\n    StringBuilder by = new StringBuilder();\n    for (int i = y.length(); i < d; i++)\n      by.append('0');\n    by.append(y);\n    y = by.toString();\n    Collection<State> initials = new ArrayList<State>();\n    a.initial = between(x, y, 0, initials, digits <= 0);\n    if (digits <= 0) {\n      ArrayList<StatePair> pairs = new ArrayList<StatePair>();\n      for (State p : initials)\n        if (a.initial != p) pairs.add(new StatePair(a.initial, p));\n      BasicOperations.addEpsilons(a, pairs);\n      a.initial.addTransition(new Transition('0', a.initial));\n      a.deterministic = false;\n    } else a.deterministic = true;\n    a.checkMinimizeAlways();\n    return a;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeInterval(int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeInterval(int,int,int).mjava","sourceNew":"  /**\n   * Returns a new automaton that accepts strings representing decimal\n   * non-negative integers in the given interval.\n   * \n   * @param min minimal value of interval\n   * @param max maximal value of interval (both end points are included in the\n   *          interval)\n   * @param digits if >0, use fixed number of digits (strings must be prefixed\n   *          by 0's to obtain the right length) - otherwise, the number of\n   *          digits is not fixed\n   * @exception IllegalArgumentException if min>max or if numbers in the\n   *              interval cannot be expressed with the given fixed number of\n   *              digits\n   */\n  public static Automaton makeInterval(int min, int max, int digits)\n      throws IllegalArgumentException {\n    Automaton a = new Automaton();\n    String x = Integer.toString(min);\n    String y = Integer.toString(max);\n    if (min > max || (digits > 0 && y.length() > digits)) throw new IllegalArgumentException();\n    int d;\n    if (digits > 0) d = digits;\n    else d = y.length();\n    StringBuilder bx = new StringBuilder();\n    for (int i = x.length(); i < d; i++)\n      bx.append('0');\n    bx.append(x);\n    x = bx.toString();\n    StringBuilder by = new StringBuilder();\n    for (int i = y.length(); i < d; i++)\n      by.append('0');\n    by.append(y);\n    y = by.toString();\n    Collection<State> initials = new ArrayList<State>();\n    a.initial = between(x, y, 0, initials, digits <= 0);\n    if (digits <= 0) {\n      ArrayList<StatePair> pairs = new ArrayList<StatePair>();\n      for (State p : initials)\n        if (a.initial != p) pairs.add(new StatePair(a.initial, p));\n      BasicOperations.addEpsilons(a, pairs);\n      a.initial.addTransition(new Transition('0', a.initial));\n      a.deterministic = false;\n    } else a.deterministic = true;\n    a.checkMinimizeAlways();\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Returns a new automaton that accepts strings representing decimal\n   * non-negative integers in the given interval.\n   * \n   * @param min minimal value of interval\n   * @param max maximal value of interval (both end points are included in the\n   *          interval)\n   * @param digits if >0, use fixed number of digits (strings must be prefixed\n   *          by 0's to obtain the right length) - otherwise, the number of\n   *          digits is not fixed\n   * @exception IllegalArgumentException if min>max or if numbers in the\n   *              interval cannot be expressed with the given fixed number of\n   *              digits\n   */\n  public static Automaton makeInterval(int min, int max, int digits)\n      throws IllegalArgumentException {\n    Automaton a = new Automaton();\n    String x = Integer.toString(min);\n    String y = Integer.toString(max);\n    if (min > max || (digits > 0 && y.length() > digits)) throw new IllegalArgumentException();\n    int d;\n    if (digits > 0) d = digits;\n    else d = y.length();\n    StringBuilder bx = new StringBuilder();\n    for (int i = x.length(); i < d; i++)\n      bx.append('0');\n    bx.append(x);\n    x = bx.toString();\n    StringBuilder by = new StringBuilder();\n    for (int i = y.length(); i < d; i++)\n      by.append('0');\n    by.append(y);\n    y = by.toString();\n    Collection<State> initials = new ArrayList<State>();\n    a.initial = between(x, y, 0, initials, digits <= 0);\n    if (digits <= 0) {\n      ArrayList<StatePair> pairs = new ArrayList<StatePair>();\n      for (State p : initials)\n        if (a.initial != p) pairs.add(new StatePair(a.initial, p));\n      BasicOperations.addEpsilons(a, pairs);\n      a.initial.addTransition(new Transition('0', a.initial));\n      a.deterministic = false;\n    } else a.deterministic = true;\n    a.checkMinimizeAlways();\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}