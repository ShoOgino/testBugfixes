{"path":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testPlainTextSpecifyingResourceName().mjava","commits":[{"id":"868e0ed16bb29556f95c00e989da33ab5c9dfe56","date":1228568666,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testPlainTextSpecifyingResourceName().mjava","pathOld":"/dev/null","sourceNew":"  public void testPlainTextSpecifyingResourceName() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    // Load plain text specifying filename\n    loadLocal(\"version_control.txt\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.map.language\", \"extractedLanguage\",\n            \"ext.def.fl\", \"extractedContent\",\n\t    ExtractingParams.RESOURCE_NAME, \"version_control.txt\"\n    );\n    assertQ(req(\"extractedContent:Apache\"),\"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:Apache\"),\"//*[@numFound='1']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a75028b56df82c87510ec21c236855cc806a39a1","date":1229226462,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testPlainTextSpecifyingResourceName().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testPlainTextSpecifyingResourceName().mjava","sourceNew":"  public void testPlainTextSpecifyingResourceName() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    // Load plain text specifying filename\n    loadLocal(\"version_control.txt\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.map.language\", \"extractedLanguage\",\n            \"ext.def.fl\", \"extractedContent\",\n            ExtractingParams.RESOURCE_NAME, \"version_control.txt\"\n    );\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  public void testPlainTextSpecifyingResourceName() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    // Load plain text specifying filename\n    loadLocal(\"version_control.txt\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.map.language\", \"extractedLanguage\",\n            \"ext.def.fl\", \"extractedContent\",\n\t    ExtractingParams.RESOURCE_NAME, \"version_control.txt\"\n    );\n    assertQ(req(\"extractedContent:Apache\"),\"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:Apache\"),\"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a34495372f0709e1ee7051e94886274dc993443","date":1234022561,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testPlainTextSpecifyingResourceName().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testPlainTextSpecifyingResourceName().mjava","sourceNew":"  public void testPlainTextSpecifyingResourceName() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    // Load plain text specifying filename\n    loadLocal(\"version_control.txt\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.literal.id\", \"one\",\n            \"ext.map.language\", \"extractedLanguage\",\n            \"ext.def.fl\", \"extractedContent\",\n            ExtractingParams.RESOURCE_NAME, \"version_control.txt\"\n    );\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  public void testPlainTextSpecifyingResourceName() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    // Load plain text specifying filename\n    loadLocal(\"version_control.txt\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.map.language\", \"extractedLanguage\",\n            \"ext.def.fl\", \"extractedContent\",\n            ExtractingParams.RESOURCE_NAME, \"version_control.txt\"\n    );\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eecdad1988b0b00f74f945528b689ef1eebf763d","date":1247586785,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testPlainTextSpecifyingResourceName().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testPlainTextSpecifyingResourceName().mjava","sourceNew":"  public void testPlainTextSpecifyingResourceName() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    // Load plain text specifying filename\n    loadLocal(\"version_control.txt\", \"map.created\", \"extractedDate\", \"map.producer\", \"extractedProducer\",\n            \"map.creator\", \"extractedCreator\", \"map.Keywords\", \"extractedKeywords\",\n            \"map.Author\", \"extractedAuthor\",\n            \"literal.id\", \"one\",\n            \"map.language\", \"extractedLanguage\",\n            \"map.content\", \"extractedContent\",\n            ExtractingParams.RESOURCE_NAME, \"version_control.txt\"\n    );\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  public void testPlainTextSpecifyingResourceName() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    // Load plain text specifying filename\n    loadLocal(\"version_control.txt\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.literal.id\", \"one\",\n            \"ext.map.language\", \"extractedLanguage\",\n            \"ext.def.fl\", \"extractedContent\",\n            ExtractingParams.RESOURCE_NAME, \"version_control.txt\"\n    );\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c156fce3696e4675bc1974f81364deb8b87858e1","date":1253114156,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testPlainTextSpecifyingResourceName().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testPlainTextSpecifyingResourceName().mjava","sourceNew":"  public void testPlainTextSpecifyingResourceName() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    // Load plain text specifying filename\n    loadLocal(\"version_control.txt\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.content\", \"extractedContent\",\n            ExtractingParams.RESOURCE_NAME, \"version_control.txt\"\n    );\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  public void testPlainTextSpecifyingResourceName() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    // Load plain text specifying filename\n    loadLocal(\"version_control.txt\", \"map.created\", \"extractedDate\", \"map.producer\", \"extractedProducer\",\n            \"map.creator\", \"extractedCreator\", \"map.Keywords\", \"extractedKeywords\",\n            \"map.Author\", \"extractedAuthor\",\n            \"literal.id\", \"one\",\n            \"map.language\", \"extractedLanguage\",\n            \"map.content\", \"extractedContent\",\n            ExtractingParams.RESOURCE_NAME, \"version_control.txt\"\n    );\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testPlainTextSpecifyingResourceName().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testPlainTextSpecifyingResourceName().mjava","sourceNew":"  public void testPlainTextSpecifyingResourceName() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    // Load plain text specifying filename\n    loadLocal(\"version_control.txt\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.content\", \"extractedContent\",\n            ExtractingParams.RESOURCE_NAME, \"version_control.txt\"\n    );\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  public void testPlainTextSpecifyingResourceName() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    // Load plain text specifying filename\n    loadLocal(\"version_control.txt\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.content\", \"extractedContent\",\n            ExtractingParams.RESOURCE_NAME, \"version_control.txt\"\n    );\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a75028b56df82c87510ec21c236855cc806a39a1":["868e0ed16bb29556f95c00e989da33ab5c9dfe56"],"eecdad1988b0b00f74f945528b689ef1eebf763d":["3a34495372f0709e1ee7051e94886274dc993443"],"3a34495372f0709e1ee7051e94886274dc993443":["a75028b56df82c87510ec21c236855cc806a39a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"868e0ed16bb29556f95c00e989da33ab5c9dfe56":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["c156fce3696e4675bc1974f81364deb8b87858e1"],"c156fce3696e4675bc1974f81364deb8b87858e1":["eecdad1988b0b00f74f945528b689ef1eebf763d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a75028b56df82c87510ec21c236855cc806a39a1":["3a34495372f0709e1ee7051e94886274dc993443"],"eecdad1988b0b00f74f945528b689ef1eebf763d":["c156fce3696e4675bc1974f81364deb8b87858e1"],"3a34495372f0709e1ee7051e94886274dc993443":["eecdad1988b0b00f74f945528b689ef1eebf763d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["868e0ed16bb29556f95c00e989da33ab5c9dfe56"],"868e0ed16bb29556f95c00e989da33ab5c9dfe56":["a75028b56df82c87510ec21c236855cc806a39a1"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c156fce3696e4675bc1974f81364deb8b87858e1":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}