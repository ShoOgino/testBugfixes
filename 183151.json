{"path":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/hack/MiniMRYarnCluster.JobHistoryServerWrapper#serviceStart().mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/hack/MiniMRYarnCluster.JobHistoryServerWrapper#serviceStart().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public synchronized void serviceStart() throws Exception {\n      try {\n        if (!getConfig().getBoolean(\n            JHAdminConfig.MR_HISTORY_MINICLUSTER_FIXED_PORTS,\n            JHAdminConfig.DEFAULT_MR_HISTORY_MINICLUSTER_FIXED_PORTS)) {\n          // pick free random ports.\n          getConfig().set(JHAdminConfig.MR_HISTORY_ADDRESS,\n              MiniYARNCluster.getHostname() + \":0\");\n          getConfig().set(JHAdminConfig.MR_HISTORY_WEBAPP_ADDRESS,\n              MiniYARNCluster.getHostname() + \":0\");\n        }\n        historyServer = new JobHistoryServer();\n        historyServer.init(getConfig());\n        new Thread() {\n          public void run() {\n            historyServer.start();\n          };\n        }.start();\n        while (historyServer.getServiceState() == STATE.INITED) {\n          LOG.info(\"Waiting for HistoryServer to start...\");\n          Thread.sleep(1500);\n        }\n        //TODO Add a timeout. State.STOPPED check ?\n        if (historyServer.getServiceState() != STATE.STARTED) {\n          throw new IOException(\"HistoryServer failed to start\");\n        }\n        super.serviceStart();\n      } catch (Throwable t) {\n        throw new YarnRuntimeException(t);\n      }\n      //need to do this because historyServer.init creates a new Configuration\n      getConfig().set(JHAdminConfig.MR_HISTORY_ADDRESS,\n                      historyServer.getConfig().get(JHAdminConfig.MR_HISTORY_ADDRESS));\n      getConfig().set(JHAdminConfig.MR_HISTORY_WEBAPP_ADDRESS,\n                      historyServer.getConfig().get(JHAdminConfig.MR_HISTORY_WEBAPP_ADDRESS));\n\n      LOG.info(\"MiniMRYARN ResourceManager address: \" +\n               getConfig().get(YarnConfiguration.RM_ADDRESS));\n      LOG.info(\"MiniMRYARN ResourceManager web address: \" +\n               getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS));\n      LOG.info(\"MiniMRYARN HistoryServer address: \" +\n               getConfig().get(JHAdminConfig.MR_HISTORY_ADDRESS));\n      LOG.info(\"MiniMRYARN HistoryServer web address: \" +\n               getConfig().get(JHAdminConfig.MR_HISTORY_WEBAPP_ADDRESS));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/hack/MiniMRYarnCluster.JobHistoryServerWrapper#serviceStart().mjava","pathOld":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/hack/MiniMRYarnCluster.JobHistoryServerWrapper#serviceStart().mjava","sourceNew":"    @Override\n    public synchronized void serviceStart() throws Exception {\n      try {\n        if (!getConfig().getBoolean(\n            JHAdminConfig.MR_HISTORY_MINICLUSTER_FIXED_PORTS,\n            JHAdminConfig.DEFAULT_MR_HISTORY_MINICLUSTER_FIXED_PORTS)) {\n          // pick free random ports.\n          getConfig().set(JHAdminConfig.MR_HISTORY_ADDRESS,\n              MiniYARNCluster.getHostname() + \":0\");\n          getConfig().set(JHAdminConfig.MR_HISTORY_WEBAPP_ADDRESS,\n              MiniYARNCluster.getHostname() + \":0\");\n        }\n        historyServer = new JobHistoryServer();\n        historyServer.init(getConfig());\n        new Thread() {\n          public void run() {\n            historyServer.start();\n          };\n        }.start();\n        while (historyServer.getServiceState() == STATE.INITED) {\n          LOG.info(\"Waiting for HistoryServer to start...\");\n          Thread.sleep(1500);\n        }\n        //TODO Add a timeout. State.STOPPED check ?\n        if (historyServer.getServiceState() != STATE.STARTED) {\n          throw new IOException(\"HistoryServer failed to start\");\n        }\n        super.serviceStart();\n      } catch (Throwable t) {\n        throw new YarnRuntimeException(t);\n      }\n      //need to do this because historyServer.init creates a new Configuration\n      getConfig().set(JHAdminConfig.MR_HISTORY_ADDRESS,\n                      historyServer.getConfig().get(JHAdminConfig.MR_HISTORY_ADDRESS));\n      getConfig().set(JHAdminConfig.MR_HISTORY_WEBAPP_ADDRESS,\n                      historyServer.getConfig().get(JHAdminConfig.MR_HISTORY_WEBAPP_ADDRESS));\n\n      LOG.info(\"MiniMRYARN ResourceManager address: \" +\n               getConfig().get(YarnConfiguration.RM_ADDRESS));\n      LOG.info(\"MiniMRYARN ResourceManager web address: \" +\n               getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS));\n      LOG.info(\"MiniMRYARN HistoryServer address: \" +\n               getConfig().get(JHAdminConfig.MR_HISTORY_ADDRESS));\n      LOG.info(\"MiniMRYARN HistoryServer web address: \" +\n               getConfig().get(JHAdminConfig.MR_HISTORY_WEBAPP_ADDRESS));\n    }\n\n","sourceOld":"    @Override\n    public synchronized void serviceStart() throws Exception {\n      try {\n        if (!getConfig().getBoolean(\n            JHAdminConfig.MR_HISTORY_MINICLUSTER_FIXED_PORTS,\n            JHAdminConfig.DEFAULT_MR_HISTORY_MINICLUSTER_FIXED_PORTS)) {\n          // pick free random ports.\n          getConfig().set(JHAdminConfig.MR_HISTORY_ADDRESS,\n              MiniYARNCluster.getHostname() + \":0\");\n          getConfig().set(JHAdminConfig.MR_HISTORY_WEBAPP_ADDRESS,\n              MiniYARNCluster.getHostname() + \":0\");\n        }\n        historyServer = new JobHistoryServer();\n        historyServer.init(getConfig());\n        new Thread() {\n          public void run() {\n            historyServer.start();\n          };\n        }.start();\n        while (historyServer.getServiceState() == STATE.INITED) {\n          LOG.info(\"Waiting for HistoryServer to start...\");\n          Thread.sleep(1500);\n        }\n        //TODO Add a timeout. State.STOPPED check ?\n        if (historyServer.getServiceState() != STATE.STARTED) {\n          throw new IOException(\"HistoryServer failed to start\");\n        }\n        super.serviceStart();\n      } catch (Throwable t) {\n        throw new YarnRuntimeException(t);\n      }\n      //need to do this because historyServer.init creates a new Configuration\n      getConfig().set(JHAdminConfig.MR_HISTORY_ADDRESS,\n                      historyServer.getConfig().get(JHAdminConfig.MR_HISTORY_ADDRESS));\n      getConfig().set(JHAdminConfig.MR_HISTORY_WEBAPP_ADDRESS,\n                      historyServer.getConfig().get(JHAdminConfig.MR_HISTORY_WEBAPP_ADDRESS));\n\n      LOG.info(\"MiniMRYARN ResourceManager address: \" +\n               getConfig().get(YarnConfiguration.RM_ADDRESS));\n      LOG.info(\"MiniMRYARN ResourceManager web address: \" +\n               getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS));\n      LOG.info(\"MiniMRYARN HistoryServer address: \" +\n               getConfig().get(JHAdminConfig.MR_HISTORY_ADDRESS));\n      LOG.info(\"MiniMRYARN HistoryServer web address: \" +\n               getConfig().get(JHAdminConfig.MR_HISTORY_WEBAPP_ADDRESS));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}