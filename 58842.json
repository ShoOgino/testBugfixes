{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#addPhraseFieldQueries(BooleanQuery.Builder,List[Clause],ExtendedDismaxConfiguration).mjava","commits":[{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#addPhraseFieldQueries(BooleanQuery.Builder,List[Clause],ExtendedDismaxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#addPhraseFieldQueries(BooleanQuery,List[Clause],ExtendedDismaxConfiguration).mjava","sourceNew":"  /**\n   * Adds shingled phrase queries to all the fields specified in the pf, pf2 anf pf3 parameters\n   * \n   */\n  protected void addPhraseFieldQueries(BooleanQuery.Builder query, List<Clause> clauses,\n      ExtendedDismaxConfiguration config) throws SyntaxError {\n\n    // sloppy phrase queries for proximity\n    List<FieldParams> allPhraseFields = config.getAllPhraseFields();\n    \n    if (allPhraseFields.size() > 0) {\n      // find non-field clauses\n      List<Clause> normalClauses = new ArrayList<>(clauses.size());\n      for (Clause clause : clauses) {\n        if (clause.field != null || clause.isPhrase) continue;\n        // check for keywords \"AND,OR,TO\"\n        if (clause.isBareWord()) {\n          String s = clause.val;\n          // avoid putting explicit operators in the phrase query\n          if (\"OR\".equals(s) || \"AND\".equals(s) || \"NOT\".equals(s) || \"TO\".equals(s)) continue;\n        }\n        normalClauses.add(clause);\n      }\n\n      // create a map of {wordGram, [phraseField]}\n      Multimap<Integer, FieldParams> phraseFieldsByWordGram = Multimaps.index(allPhraseFields, WORD_GRAM_EXTRACTOR);\n\n      // for each {wordGram, [phraseField]} entry, create and add shingled field queries to the main user query\n      for (Map.Entry<Integer, Collection<FieldParams>> phraseFieldsByWordGramEntry : phraseFieldsByWordGram.asMap().entrySet()) {\n\n        // group the fields within this wordGram collection by their associated slop (it's possible that the same\n        // field appears multiple times for the same wordGram count but with different slop values. In this case, we\n        // should take the *sum* of those phrase queries, rather than the max across them).\n        Multimap<Integer, FieldParams> phraseFieldsBySlop = Multimaps.index(phraseFieldsByWordGramEntry.getValue(), PHRASE_SLOP_EXTRACTOR);\n        for (Map.Entry<Integer, Collection<FieldParams>> phraseFieldsBySlopEntry : phraseFieldsBySlop.asMap().entrySet()) {\n          addShingledPhraseQueries(query, normalClauses, phraseFieldsBySlopEntry.getValue(),\n              phraseFieldsByWordGramEntry.getKey(), config.tiebreaker, phraseFieldsBySlopEntry.getKey());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds shingled phrase queries to all the fields specified in the pf, pf2 anf pf3 parameters\n   * \n   */\n  protected void addPhraseFieldQueries(BooleanQuery query, List<Clause> clauses,\n      ExtendedDismaxConfiguration config) throws SyntaxError {\n\n    // sloppy phrase queries for proximity\n    List<FieldParams> allPhraseFields = config.getAllPhraseFields();\n    \n    if (allPhraseFields.size() > 0) {\n      // find non-field clauses\n      List<Clause> normalClauses = new ArrayList<>(clauses.size());\n      for (Clause clause : clauses) {\n        if (clause.field != null || clause.isPhrase) continue;\n        // check for keywords \"AND,OR,TO\"\n        if (clause.isBareWord()) {\n          String s = clause.val;\n          // avoid putting explicit operators in the phrase query\n          if (\"OR\".equals(s) || \"AND\".equals(s) || \"NOT\".equals(s) || \"TO\".equals(s)) continue;\n        }\n        normalClauses.add(clause);\n      }\n\n      // create a map of {wordGram, [phraseField]}\n      Multimap<Integer, FieldParams> phraseFieldsByWordGram = Multimaps.index(allPhraseFields, WORD_GRAM_EXTRACTOR);\n\n      // for each {wordGram, [phraseField]} entry, create and add shingled field queries to the main user query\n      for (Map.Entry<Integer, Collection<FieldParams>> phraseFieldsByWordGramEntry : phraseFieldsByWordGram.asMap().entrySet()) {\n\n        // group the fields within this wordGram collection by their associated slop (it's possible that the same\n        // field appears multiple times for the same wordGram count but with different slop values. In this case, we\n        // should take the *sum* of those phrase queries, rather than the max across them).\n        Multimap<Integer, FieldParams> phraseFieldsBySlop = Multimaps.index(phraseFieldsByWordGramEntry.getValue(), PHRASE_SLOP_EXTRACTOR);\n        for (Map.Entry<Integer, Collection<FieldParams>> phraseFieldsBySlopEntry : phraseFieldsBySlop.asMap().entrySet()) {\n          addShingledPhraseQueries(query, normalClauses, phraseFieldsBySlopEntry.getValue(),\n              phraseFieldsByWordGramEntry.getKey(), config.tiebreaker, phraseFieldsBySlopEntry.getKey());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","date":1477689538,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#addPhraseFieldQueries(BooleanQuery.Builder,List[Clause],ExtendedDismaxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#addPhraseFieldQueries(BooleanQuery.Builder,List[Clause],ExtendedDismaxConfiguration).mjava","sourceNew":"  /**\n   * Adds shingled phrase queries to all the fields specified in the pf, pf2 anf pf3 parameters\n   * \n   */\n  protected void addPhraseFieldQueries(BooleanQuery.Builder query, List<Clause> clauses,\n      ExtendedDismaxConfiguration config) throws SyntaxError {\n\n    // sloppy phrase queries for proximity\n    List<FieldParams> allPhraseFields = config.getAllPhraseFields();\n    \n    if (allPhraseFields.size() > 0) {\n      // find non-field clauses\n      List<Clause> normalClauses = new ArrayList<>(clauses.size());\n      for (Clause clause : clauses) {\n        if (clause.field != null || clause.isPhrase) continue;\n        // check for keywords \"AND,OR,TO\"\n        if (clause.isBareWord()) {\n          String s = clause.val;\n          // avoid putting explicit operators in the phrase query\n          if (\"OR\".equals(s) || \"AND\".equals(s) || \"NOT\".equals(s) || \"TO\".equals(s)) continue;\n        }\n        normalClauses.add(clause);\n      }\n\n      // create a map of {wordGram, [phraseField]}\n      Multimap<Integer, FieldParams> phraseFieldsByWordGram = Multimaps.index(allPhraseFields, FieldParams::getWordGrams);\n\n      // for each {wordGram, [phraseField]} entry, create and add shingled field queries to the main user query\n      for (Map.Entry<Integer, Collection<FieldParams>> phraseFieldsByWordGramEntry : phraseFieldsByWordGram.asMap().entrySet()) {\n\n        // group the fields within this wordGram collection by their associated slop (it's possible that the same\n        // field appears multiple times for the same wordGram count but with different slop values. In this case, we\n        // should take the *sum* of those phrase queries, rather than the max across them).\n        Multimap<Integer, FieldParams> phraseFieldsBySlop = Multimaps.index(phraseFieldsByWordGramEntry.getValue(), FieldParams::getSlop);\n        for (Map.Entry<Integer, Collection<FieldParams>> phraseFieldsBySlopEntry : phraseFieldsBySlop.asMap().entrySet()) {\n          addShingledPhraseQueries(query, normalClauses, phraseFieldsBySlopEntry.getValue(),\n              phraseFieldsByWordGramEntry.getKey(), config.tiebreaker, phraseFieldsBySlopEntry.getKey());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds shingled phrase queries to all the fields specified in the pf, pf2 anf pf3 parameters\n   * \n   */\n  protected void addPhraseFieldQueries(BooleanQuery.Builder query, List<Clause> clauses,\n      ExtendedDismaxConfiguration config) throws SyntaxError {\n\n    // sloppy phrase queries for proximity\n    List<FieldParams> allPhraseFields = config.getAllPhraseFields();\n    \n    if (allPhraseFields.size() > 0) {\n      // find non-field clauses\n      List<Clause> normalClauses = new ArrayList<>(clauses.size());\n      for (Clause clause : clauses) {\n        if (clause.field != null || clause.isPhrase) continue;\n        // check for keywords \"AND,OR,TO\"\n        if (clause.isBareWord()) {\n          String s = clause.val;\n          // avoid putting explicit operators in the phrase query\n          if (\"OR\".equals(s) || \"AND\".equals(s) || \"NOT\".equals(s) || \"TO\".equals(s)) continue;\n        }\n        normalClauses.add(clause);\n      }\n\n      // create a map of {wordGram, [phraseField]}\n      Multimap<Integer, FieldParams> phraseFieldsByWordGram = Multimaps.index(allPhraseFields, WORD_GRAM_EXTRACTOR);\n\n      // for each {wordGram, [phraseField]} entry, create and add shingled field queries to the main user query\n      for (Map.Entry<Integer, Collection<FieldParams>> phraseFieldsByWordGramEntry : phraseFieldsByWordGram.asMap().entrySet()) {\n\n        // group the fields within this wordGram collection by their associated slop (it's possible that the same\n        // field appears multiple times for the same wordGram count but with different slop values. In this case, we\n        // should take the *sum* of those phrase queries, rather than the max across them).\n        Multimap<Integer, FieldParams> phraseFieldsBySlop = Multimaps.index(phraseFieldsByWordGramEntry.getValue(), PHRASE_SLOP_EXTRACTOR);\n        for (Map.Entry<Integer, Collection<FieldParams>> phraseFieldsBySlopEntry : phraseFieldsBySlop.asMap().entrySet()) {\n          addShingledPhraseQueries(query, normalClauses, phraseFieldsBySlopEntry.getValue(),\n              phraseFieldsByWordGramEntry.getKey(), config.tiebreaker, phraseFieldsBySlopEntry.getKey());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#addPhraseFieldQueries(BooleanQuery.Builder,List[Clause],ExtendedDismaxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#addPhraseFieldQueries(BooleanQuery.Builder,List[Clause],ExtendedDismaxConfiguration).mjava","sourceNew":"  /**\n   * Adds shingled phrase queries to all the fields specified in the pf, pf2 anf pf3 parameters\n   * \n   */\n  protected void addPhraseFieldQueries(BooleanQuery.Builder query, List<Clause> clauses,\n      ExtendedDismaxConfiguration config) throws SyntaxError {\n\n    // sloppy phrase queries for proximity\n    List<FieldParams> allPhraseFields = config.getAllPhraseFields();\n    \n    if (allPhraseFields.size() > 0) {\n      // find non-field clauses\n      List<Clause> normalClauses = new ArrayList<>(clauses.size());\n      for (Clause clause : clauses) {\n        if (clause.field != null || clause.isPhrase) continue;\n        // check for keywords \"AND,OR,TO\"\n        if (clause.isBareWord()) {\n          String s = clause.val;\n          // avoid putting explicit operators in the phrase query\n          if (\"OR\".equals(s) || \"AND\".equals(s) || \"NOT\".equals(s) || \"TO\".equals(s)) continue;\n        }\n        normalClauses.add(clause);\n      }\n\n      // create a map of {wordGram, [phraseField]}\n      Multimap<Integer, FieldParams> phraseFieldsByWordGram = Multimaps.index(allPhraseFields, FieldParams::getWordGrams);\n\n      // for each {wordGram, [phraseField]} entry, create and add shingled field queries to the main user query\n      for (Map.Entry<Integer, Collection<FieldParams>> phraseFieldsByWordGramEntry : phraseFieldsByWordGram.asMap().entrySet()) {\n\n        // group the fields within this wordGram collection by their associated slop (it's possible that the same\n        // field appears multiple times for the same wordGram count but with different slop values. In this case, we\n        // should take the *sum* of those phrase queries, rather than the max across them).\n        Multimap<Integer, FieldParams> phraseFieldsBySlop = Multimaps.index(phraseFieldsByWordGramEntry.getValue(), FieldParams::getSlop);\n        for (Map.Entry<Integer, Collection<FieldParams>> phraseFieldsBySlopEntry : phraseFieldsBySlop.asMap().entrySet()) {\n          addShingledPhraseQueries(query, normalClauses, phraseFieldsBySlopEntry.getValue(),\n              phraseFieldsByWordGramEntry.getKey(), config.tiebreaker, phraseFieldsBySlopEntry.getKey());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds shingled phrase queries to all the fields specified in the pf, pf2 anf pf3 parameters\n   * \n   */\n  protected void addPhraseFieldQueries(BooleanQuery.Builder query, List<Clause> clauses,\n      ExtendedDismaxConfiguration config) throws SyntaxError {\n\n    // sloppy phrase queries for proximity\n    List<FieldParams> allPhraseFields = config.getAllPhraseFields();\n    \n    if (allPhraseFields.size() > 0) {\n      // find non-field clauses\n      List<Clause> normalClauses = new ArrayList<>(clauses.size());\n      for (Clause clause : clauses) {\n        if (clause.field != null || clause.isPhrase) continue;\n        // check for keywords \"AND,OR,TO\"\n        if (clause.isBareWord()) {\n          String s = clause.val;\n          // avoid putting explicit operators in the phrase query\n          if (\"OR\".equals(s) || \"AND\".equals(s) || \"NOT\".equals(s) || \"TO\".equals(s)) continue;\n        }\n        normalClauses.add(clause);\n      }\n\n      // create a map of {wordGram, [phraseField]}\n      Multimap<Integer, FieldParams> phraseFieldsByWordGram = Multimaps.index(allPhraseFields, WORD_GRAM_EXTRACTOR);\n\n      // for each {wordGram, [phraseField]} entry, create and add shingled field queries to the main user query\n      for (Map.Entry<Integer, Collection<FieldParams>> phraseFieldsByWordGramEntry : phraseFieldsByWordGram.asMap().entrySet()) {\n\n        // group the fields within this wordGram collection by their associated slop (it's possible that the same\n        // field appears multiple times for the same wordGram count but with different slop values. In this case, we\n        // should take the *sum* of those phrase queries, rather than the max across them).\n        Multimap<Integer, FieldParams> phraseFieldsBySlop = Multimaps.index(phraseFieldsByWordGramEntry.getValue(), PHRASE_SLOP_EXTRACTOR);\n        for (Map.Entry<Integer, Collection<FieldParams>> phraseFieldsBySlopEntry : phraseFieldsBySlop.asMap().entrySet()) {\n          addShingledPhraseQueries(query, normalClauses, phraseFieldsBySlopEntry.getValue(),\n              phraseFieldsByWordGramEntry.getKey(), config.tiebreaker, phraseFieldsBySlopEntry.getKey());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"320888923ec13b91f53082558f01f4c9960dd226":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","320888923ec13b91f53082558f01f4c9960dd226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"320888923ec13b91f53082558f01f4c9960dd226":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}