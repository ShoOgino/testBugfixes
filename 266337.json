{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#doTest().mjava","commits":[{"id":"9f45f67a018421da088ea39274f23ad5d339b97d","date":1395559348,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminResponse response = createCollection(collectionName, 1, 1, 1);\n    NamedList<Object> resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(OverseerCollectionProcessor.CREATECOLLECTION);\n    assertEquals(\"No stats for createcollection in OverseerCollectionProcessor\", 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(\"createcollection\");\n    assertEquals(\"No stats for createcollection in Overseer\", 1, createcollection.get(\"requests\"));\n\n    invokeCollectionApi(\"action\", CollectionParams.CollectionAction.RELOAD.toLower(), \"name\", collectionName);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(OverseerCollectionProcessor.RELOADCOLLECTION);\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    try {\n      invokeCollectionApi(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toLower(),\n          \"collection\", \"non_existent_collection\",\n          \"shard\", \"non_existent_shard\");\n    } catch (Exception e) {\n      // expected because we did not correctly specify required params for split\n    }\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(OverseerCollectionProcessor.SPLITSHARD);\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    waitForThingsToLevelOut(15);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n    NamedList<Object> resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    if (resp != null) {\n      NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n      if (collection_operations != null)  {\n        SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(OverseerCollectionProcessor.CREATECOLLECTION);\n        if (createcollection != null && createcollection.get(\"requests\") != null) {\n          numCollectionCreates = (Integer) createcollection.get(\"requests\");\n        }\n        NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n        if (overseer_operations != null)  {\n          createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(\"createcollection\");\n          if (createcollection != null && createcollection.get(\"requests\") != null) {\n            numOverseerCreates = (Integer) createcollection.get(\"requests\");\n          }\n        }\n      }\n    }\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminResponse response = createCollection(collectionName, 1, 1, 1);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(OverseerCollectionProcessor.CREATECOLLECTION);\n    assertEquals(\"No stats for createcollection in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(\"createcollection\");\n    assertEquals(\"No stats for createcollection in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    invokeCollectionApi(\"action\", CollectionParams.CollectionAction.RELOAD.toLower(), \"name\", collectionName);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(OverseerCollectionProcessor.RELOADCOLLECTION);\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    try {\n      invokeCollectionApi(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toLower(),\n          \"collection\", \"non_existent_collection\",\n          \"shard\", \"non_existent_shard\");\n    } catch (Exception e) {\n      // expected because we did not correctly specify required params for split\n    }\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(OverseerCollectionProcessor.SPLITSHARD);\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    waitForThingsToLevelOut(15);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminResponse response = createCollection(collectionName, 1, 1, 1);\n    NamedList<Object> resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(OverseerCollectionProcessor.CREATECOLLECTION);\n    assertEquals(\"No stats for createcollection in OverseerCollectionProcessor\", 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(\"createcollection\");\n    assertEquals(\"No stats for createcollection in Overseer\", 1, createcollection.get(\"requests\"));\n\n    invokeCollectionApi(\"action\", CollectionParams.CollectionAction.RELOAD.toLower(), \"name\", collectionName);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(OverseerCollectionProcessor.RELOADCOLLECTION);\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    try {\n      invokeCollectionApi(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toLower(),\n          \"collection\", \"non_existent_collection\",\n          \"shard\", \"non_existent_shard\");\n    } catch (Exception e) {\n      // expected because we did not correctly specify required params for split\n    }\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(OverseerCollectionProcessor.SPLITSHARD);\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    waitForThingsToLevelOut(15);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"337db0c9a917807fab1c4c08462fecb15b3cc409","date":1403794484,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n    NamedList<Object> resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    if (resp != null) {\n      NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n      if (collection_operations != null)  {\n        SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(OverseerCollectionProcessor.CREATECOLLECTION);\n        if (createcollection != null && createcollection.get(\"requests\") != null) {\n          numCollectionCreates = (Integer) createcollection.get(\"requests\");\n        }\n        NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n        if (overseer_operations != null)  {\n          createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(\"createcollection\");\n          if (createcollection != null && createcollection.get(\"requests\") != null) {\n            numOverseerCreates = (Integer) createcollection.get(\"requests\");\n          }\n        }\n      }\n    }\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminResponse response = createCollection(collectionName, 1, 1, 1);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(OverseerCollectionProcessor.CREATECOLLECTION);\n    assertEquals(\"No stats for createcollection in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(\"createcollection\");\n    assertEquals(\"No stats for createcollection in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    invokeCollectionApi(\"action\", CollectionParams.CollectionAction.RELOAD.toLower(), \"name\", collectionName);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(OverseerCollectionProcessor.RELOADCOLLECTION);\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    try {\n      invokeCollectionApi(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toLower(),\n          \"collection\", \"non_existent_collection\",\n          \"shard\", \"non_existent_shard\");\n    } catch (Exception e) {\n      // expected because we did not correctly specify required params for split\n    }\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(OverseerCollectionProcessor.SPLITSHARD);\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n    waitForThingsToLevelOut(15);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n    NamedList<Object> resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    if (resp != null) {\n      NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n      if (collection_operations != null)  {\n        SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(OverseerCollectionProcessor.CREATECOLLECTION);\n        if (createcollection != null && createcollection.get(\"requests\") != null) {\n          numCollectionCreates = (Integer) createcollection.get(\"requests\");\n        }\n        NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n        if (overseer_operations != null)  {\n          createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(\"createcollection\");\n          if (createcollection != null && createcollection.get(\"requests\") != null) {\n            numOverseerCreates = (Integer) createcollection.get(\"requests\");\n          }\n        }\n      }\n    }\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminResponse response = createCollection(collectionName, 1, 1, 1);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(OverseerCollectionProcessor.CREATECOLLECTION);\n    assertEquals(\"No stats for createcollection in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(\"createcollection\");\n    assertEquals(\"No stats for createcollection in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    invokeCollectionApi(\"action\", CollectionParams.CollectionAction.RELOAD.toLower(), \"name\", collectionName);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(OverseerCollectionProcessor.RELOADCOLLECTION);\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    try {\n      invokeCollectionApi(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toLower(),\n          \"collection\", \"non_existent_collection\",\n          \"shard\", \"non_existent_shard\");\n    } catch (Exception e) {\n      // expected because we did not correctly specify required params for split\n    }\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(OverseerCollectionProcessor.SPLITSHARD);\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    waitForThingsToLevelOut(15);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c688f7052130cef7bd419c85e3c5be214f7b9e","date":1411018984,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n    NamedList<Object> resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    if (resp != null) {\n      NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n      if (collection_operations != null)  {\n        SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n        if (createcollection != null && createcollection.get(\"requests\") != null) {\n          numCollectionCreates = (Integer) createcollection.get(\"requests\");\n        }\n        NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n        if (overseer_operations != null)  {\n          createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n          if (createcollection != null && createcollection.get(\"requests\") != null) {\n            numOverseerCreates = (Integer) createcollection.get(\"requests\");\n          }\n        }\n      }\n    }\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminResponse response = createCollection(collectionName, 1, 1, 1);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    invokeCollectionApi(\"action\", CollectionParams.CollectionAction.RELOAD.toLower(), \"name\", collectionName);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.RELOAD.toLower());\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    try {\n      invokeCollectionApi(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toLower(),\n          \"collection\", \"non_existent_collection\",\n          \"shard\", \"non_existent_shard\");\n    } catch (Exception e) {\n      // expected because we did not correctly specify required params for split\n    }\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.SPLITSHARD.toLower());\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n    waitForThingsToLevelOut(15);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n    NamedList<Object> resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    if (resp != null) {\n      NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n      if (collection_operations != null)  {\n        SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(OverseerCollectionProcessor.CREATECOLLECTION);\n        if (createcollection != null && createcollection.get(\"requests\") != null) {\n          numCollectionCreates = (Integer) createcollection.get(\"requests\");\n        }\n        NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n        if (overseer_operations != null)  {\n          createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(\"createcollection\");\n          if (createcollection != null && createcollection.get(\"requests\") != null) {\n            numOverseerCreates = (Integer) createcollection.get(\"requests\");\n          }\n        }\n      }\n    }\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminResponse response = createCollection(collectionName, 1, 1, 1);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(OverseerCollectionProcessor.CREATECOLLECTION);\n    assertEquals(\"No stats for createcollection in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(\"createcollection\");\n    assertEquals(\"No stats for createcollection in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    invokeCollectionApi(\"action\", CollectionParams.CollectionAction.RELOAD.toLower(), \"name\", collectionName);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(OverseerCollectionProcessor.RELOADCOLLECTION);\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    try {\n      invokeCollectionApi(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toLower(),\n          \"collection\", \"non_existent_collection\",\n          \"shard\", \"non_existent_shard\");\n    } catch (Exception e) {\n      // expected because we did not correctly specify required params for split\n    }\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(OverseerCollectionProcessor.SPLITSHARD);\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n    waitForThingsToLevelOut(15);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerStatusTest#doTest().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n    NamedList<Object> resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    if (resp != null) {\n      NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n      if (collection_operations != null)  {\n        SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n        if (createcollection != null && createcollection.get(\"requests\") != null) {\n          numCollectionCreates = (Integer) createcollection.get(\"requests\");\n        }\n        NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n        if (overseer_operations != null)  {\n          createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n          if (createcollection != null && createcollection.get(\"requests\") != null) {\n            numOverseerCreates = (Integer) createcollection.get(\"requests\");\n          }\n        }\n      }\n    }\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminResponse response = createCollection(collectionName, 1, 1, 1);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    invokeCollectionApi(\"action\", CollectionParams.CollectionAction.RELOAD.toLower(), \"name\", collectionName);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.RELOAD.toLower());\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    try {\n      invokeCollectionApi(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toLower(),\n          \"collection\", \"non_existent_collection\",\n          \"shard\", \"non_existent_shard\");\n    } catch (Exception e) {\n      // expected because we did not correctly specify required params for split\n    }\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.SPLITSHARD.toLower());\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n    waitForThingsToLevelOut(15);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    // find existing command counts because collection may be created by base test class too\n    int numCollectionCreates = 0, numOverseerCreates = 0;\n    NamedList<Object> resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    if (resp != null) {\n      NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n      if (collection_operations != null)  {\n        SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n        if (createcollection != null && createcollection.get(\"requests\") != null) {\n          numCollectionCreates = (Integer) createcollection.get(\"requests\");\n        }\n        NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n        if (overseer_operations != null)  {\n          createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n          if (createcollection != null && createcollection.get(\"requests\") != null) {\n            numOverseerCreates = (Integer) createcollection.get(\"requests\");\n          }\n        }\n      }\n    }\n\n    String collectionName = \"overseer_status_test\";\n    CollectionAdminResponse response = createCollection(collectionName, 1, 1, 1);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    NamedList<Object> collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    NamedList<Object> overseer_operations = (NamedList<Object>) resp.get(\"overseer_operations\");\n    SimpleOrderedMap<Object> createcollection = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in OverseerCollectionProcessor\", numCollectionCreates + 1, createcollection.get(\"requests\"));\n    createcollection = (SimpleOrderedMap<Object>) overseer_operations.get(CollectionParams.CollectionAction.CREATE.toLower());\n    assertEquals(\"No stats for create in Overseer\", numOverseerCreates + 1, createcollection.get(\"requests\"));\n\n    invokeCollectionApi(\"action\", CollectionParams.CollectionAction.RELOAD.toLower(), \"name\", collectionName);\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> reload = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.RELOAD.toLower());\n    assertEquals(\"No stats for reload in OverseerCollectionProcessor\", 1, reload.get(\"requests\"));\n\n    try {\n      invokeCollectionApi(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toLower(),\n          \"collection\", \"non_existent_collection\",\n          \"shard\", \"non_existent_shard\");\n    } catch (Exception e) {\n      // expected because we did not correctly specify required params for split\n    }\n    resp = invokeCollectionApi(\"action\",\n        CollectionParams.CollectionAction.OVERSEERSTATUS.toLower());\n    collection_operations = (NamedList<Object>) resp.get(\"collection_operations\");\n    SimpleOrderedMap<Object> split = (SimpleOrderedMap<Object>) collection_operations.get(CollectionParams.CollectionAction.SPLITSHARD.toLower());\n    assertEquals(\"No stats for split in OverseerCollectionProcessor\", 1, split.get(\"errors\"));\n    assertNotNull(split.get(\"recent_failures\"));\n\n    SimpleOrderedMap<Object> amIleader = (SimpleOrderedMap<Object>) collection_operations.get(\"am_i_leader\");\n    assertNotNull(\"OverseerCollectionProcessor amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    amIleader = (SimpleOrderedMap<Object>) overseer_operations.get(\"am_i_leader\");\n    assertNotNull(\"Overseer amILeader stats should not be null\", amIleader);\n    assertNotNull(amIleader.get(\"requests\"));\n    assertTrue(Integer.parseInt(amIleader.get(\"requests\").toString()) > 0);\n    assertNotNull(amIleader.get(\"errors\"));\n    assertNotNull(amIleader.get(\"avgTimePerRequest\"));\n\n    SimpleOrderedMap<Object> updateState = (SimpleOrderedMap<Object>) overseer_operations.get(\"update_state\");\n    assertNotNull(\"Overseer update_state stats should not be null\", updateState);\n    assertNotNull(updateState.get(\"requests\"));\n    assertTrue(Integer.parseInt(updateState.get(\"requests\").toString()) > 0);\n    assertNotNull(updateState.get(\"errors\"));\n    assertNotNull(updateState.get(\"avgTimePerRequest\"));\n\n    waitForThingsToLevelOut(15);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abb23fcc2461782ab204e61213240feb77d355aa":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"337db0c9a917807fab1c4c08462fecb15b3cc409":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9f45f67a018421da088ea39274f23ad5d339b97d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["337db0c9a917807fab1c4c08462fecb15b3cc409"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["9f45f67a018421da088ea39274f23ad5d339b97d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"]},"commit2Childs":{"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"337db0c9a917807fab1c4c08462fecb15b3cc409":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9f45f67a018421da088ea39274f23ad5d339b97d"],"9f45f67a018421da088ea39274f23ad5d339b97d":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["abb23fcc2461782ab204e61213240feb77d355aa"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["337db0c9a917807fab1c4c08462fecb15b3cc409"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}