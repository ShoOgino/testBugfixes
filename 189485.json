{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n      ((LogMergePolicy) w.getMergePolicy()).setUseCompoundFile(true);\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory(random);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n      ((LogMergePolicy) w.getMergePolicy()).setUseCompoundFile(true);\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n      ((LogMergePolicy) w.getMergePolicy()).setUseCompoundFile(true);\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n      ((LogMergePolicy) w.getMergePolicy()).setUseCompoundFile(true);\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory(random);\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n      ((LogMergePolicy) w.getMergePolicy()).setUseCompoundFile(true);\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n      ((LogMergePolicy) w.getMergePolicy()).setUseCompoundFile(true);\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n      ((LogMergePolicy) w.getMergePolicy()).setUseCompoundFile(true);\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56","date":1290598569,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n      ((LogMergePolicy) w.getMergePolicy()).setUseCompoundFile(true);\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n      ((LogMergePolicy) w.getMergePolicy()).setUseCompoundFile(true);\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMergePolicy(newLogMergePolicy(true))\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n      ((LogMergePolicy) w.getMergePolicy()).setUseCompoundFile(true);\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38a62612cfa4e104080d89d7751a8f1a258ac335","date":1291442315,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMergePolicy(newLogMergePolicy(true))\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMergePolicy(newLogMergePolicy(true))\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n      ((LogMergePolicy) w.getMergePolicy()).setUseCompoundFile(true);\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","date":1291833341,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMergePolicy(newLogMergePolicy(true))\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d68609ca1ff415bcebe4153a4eda28700211023","date":1308080584,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // optimized away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // optimized away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // optimized away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // optimized away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // optimized away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = r.reopen();\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // optimized away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.optimize();\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // optimized away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // optimize created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2929ce110b8f9e8a7d82c45d6b6bc119fea035d2","date":1327858167,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n      IndexReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["3bb13258feba31ab676502787ab2e1779f129b7a"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","38a62612cfa4e104080d89d7751a8f1a258ac335"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["a3776dccca01c11e7046323cfad46a3b4a471233","6d68609ca1ff415bcebe4153a4eda28700211023"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["38a62612cfa4e104080d89d7751a8f1a258ac335"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6d68609ca1ff415bcebe4153a4eda28700211023"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"2929ce110b8f9e8a7d82c45d6b6bc119fea035d2":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"38a62612cfa4e104080d89d7751a8f1a258ac335":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","2929ce110b8f9e8a7d82c45d6b6bc119fea035d2"],"6d68609ca1ff415bcebe4153a4eda28700211023":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a3776dccca01c11e7046323cfad46a3b4a471233":["38a62612cfa4e104080d89d7751a8f1a258ac335","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["2929ce110b8f9e8a7d82c45d6b6bc119fea035d2","5cab9a86bd67202d20b6adc463008c8e982b070a"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56","3bb13258feba31ab676502787ab2e1779f129b7a"],"5390d5f5bc8bf5d65eff4c1d596cf9547ead0c56":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":[],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","6d68609ca1ff415bcebe4153a4eda28700211023","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"2929ce110b8f9e8a7d82c45d6b6bc119fea035d2":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"38a62612cfa4e104080d89d7751a8f1a258ac335":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6d68609ca1ff415bcebe4153a4eda28700211023":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b"],"3bb13258feba31ab676502787ab2e1779f129b7a":["4a69e5860d014751cc9329dfeb441a6d8fd1ed8e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["38a62612cfa4e104080d89d7751a8f1a258ac335","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}