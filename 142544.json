{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/BitVector#getAndClear(int).mjava","commits":[{"id":"b11b097f011a298f1a54676482032c2b261e26f3","date":1411698138,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/BitVector#getAndClear(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#getAndClear(int).mjava","sourceNew":"  public final boolean getAndClear(int bit) {\n    if (bit >= size) {\n      throw new ArrayIndexOutOfBoundsException(bit);\n    }\n    final int pos = bit >> 3;\n    final int v = bits[pos];\n    final int flag = 1 << (bit & 7);\n    if ((flag & v) == 0) {\n      return false;\n    } else {\n      bits[pos] &= ~flag;\n      if (count != -1) {\n        count--;\n        assert count >= 0;\n      }\n      return true;\n    }\n  }\n\n","sourceOld":"  public final boolean getAndClear(int bit) {\n    if (bit >= size) {\n      throw new ArrayIndexOutOfBoundsException(bit);\n    }\n    final int pos = bit >> 3;\n    final int v = bits[pos];\n    final int flag = 1 << (bit & 7);\n    if ((flag & v) == 0) {\n      return false;\n    } else {\n      bits[pos] &= ~flag;\n      if (count != -1) {\n        count--;\n        assert count >= 0;\n      }\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/BitVector#getAndClear(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#getAndClear(int).mjava","sourceNew":"  public final boolean getAndClear(int bit) {\n    if (bit >= size) {\n      throw new ArrayIndexOutOfBoundsException(bit);\n    }\n    final int pos = bit >> 3;\n    final int v = bits[pos];\n    final int flag = 1 << (bit & 7);\n    if ((flag & v) == 0) {\n      return false;\n    } else {\n      bits[pos] &= ~flag;\n      if (count != -1) {\n        count--;\n        assert count >= 0;\n      }\n      return true;\n    }\n  }\n\n","sourceOld":"  public final boolean getAndClear(int bit) {\n    if (bit >= size) {\n      throw new ArrayIndexOutOfBoundsException(bit);\n    }\n    final int pos = bit >> 3;\n    final int v = bits[pos];\n    final int flag = 1 << (bit & 7);\n    if ((flag & v) == 0) {\n      return false;\n    } else {\n      bits[pos] &= ~flag;\n      if (count != -1) {\n        count--;\n        assert count >= 0;\n      }\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ac4bff3307e88928bf48cd1a283ff7da1f82464","date":1411914960,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/BitVector#getAndClear(int).mjava","sourceNew":null,"sourceOld":"  public final boolean getAndClear(int bit) {\n    if (bit >= size) {\n      throw new ArrayIndexOutOfBoundsException(bit);\n    }\n    final int pos = bit >> 3;\n    final int v = bits[pos];\n    final int flag = 1 << (bit & 7);\n    if ((flag & v) == 0) {\n      return false;\n    } else {\n      bits[pos] &= ~flag;\n      if (count != -1) {\n        count--;\n        assert count >= 0;\n      }\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/BitVector#getAndClear(int).mjava","sourceNew":null,"sourceOld":"  public final boolean getAndClear(int bit) {\n    if (bit >= size) {\n      throw new ArrayIndexOutOfBoundsException(bit);\n    }\n    final int pos = bit >> 3;\n    final int v = bits[pos];\n    final int flag = 1 << (bit & 7);\n    if ((flag & v) == 0) {\n      return false;\n    } else {\n      bits[pos] &= ~flag;\n      if (count != -1) {\n        count--;\n        assert count >= 0;\n      }\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9bb9a29a5e71a90295f175df8919802993142c9a":["5f6bd27530a2846413fe2d00030493c0e2d3a072","6ac4bff3307e88928bf48cd1a283ff7da1f82464"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b11b097f011a298f1a54676482032c2b261e26f3"],"b11b097f011a298f1a54676482032c2b261e26f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6ac4bff3307e88928bf48cd1a283ff7da1f82464":["b11b097f011a298f1a54676482032c2b261e26f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["9bb9a29a5e71a90295f175df8919802993142c9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f6bd27530a2846413fe2d00030493c0e2d3a072","b11b097f011a298f1a54676482032c2b261e26f3"],"6ac4bff3307e88928bf48cd1a283ff7da1f82464":["9bb9a29a5e71a90295f175df8919802993142c9a"],"b11b097f011a298f1a54676482032c2b261e26f3":["5f6bd27530a2846413fe2d00030493c0e2d3a072","6ac4bff3307e88928bf48cd1a283ff7da1f82464"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}