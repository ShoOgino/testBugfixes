{"path":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","commits":[{"id":"6e2944372726ed00fc05229687367002194c6c81","date":1300969333,"type":1,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,boolean,String,Class[#-extends-LineParser],int,String).mjava","sourceNew":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n  }\n\n","sourceOld":"  private void doIndexAndSearchTestWithRepeats(File file, boolean setBZCompress,\n      String bz2CompressVal, Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (setBZCompress) {\n      props.setProperty(\"bzip.compression\", bz2CompressVal);\n    }\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","pathOld":"/dev/null","sourceNew":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","pathOld":"/dev/null","sourceNew":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd0491419a55db5050f375ec779df63ce76d9db5","date":1302545750,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","sourceNew":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n  }\n\n","sourceOld":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":["11d282c3fddbb2c824673a792a8b72f6340cb300"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","sourceNew":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n  }\n\n","sourceOld":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","sourceNew":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n  }\n\n","sourceOld":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","sourceNew":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n  }\n\n","sourceOld":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","sourceNew":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexReader reader = IndexReader.open(runData.getDirectory());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n    reader.close();\n  }\n\n","sourceOld":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":["11d282c3fddbb2c824673a792a8b72f6340cb300"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9464a85239294d71b913f2b669c5e097db2e9e51","date":1321943575,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","sourceNew":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    tasks.close();\n    \n    IndexReader reader = IndexReader.open(runData.getDirectory());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n    reader.close();\n  }\n\n","sourceOld":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexReader reader = IndexReader.open(runData.getDirectory());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":["11d282c3fddbb2c824673a792a8b72f6340cb300"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51bd6dd33be0167ec08e8aa8e8e27dced55d06ed","date":1321949690,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","sourceNew":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    tasks.close();\n    \n    IndexReader reader = IndexReader.open(runData.getDirectory());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n    reader.close();\n    runData.close();\n  }\n\n","sourceOld":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    tasks.close();\n    \n    IndexReader reader = IndexReader.open(runData.getDirectory());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":["11d282c3fddbb2c824673a792a8b72f6340cb300"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11d282c3fddbb2c824673a792a8b72f6340cb300","date":1321951291,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","sourceNew":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n    \n    IndexReader reader = null;\n    IndexSearcher searcher = null;\n    PerfRunData runData = null;\n    try {\n      Properties props = new Properties();\n      \n      // LineDocSource specific settings.\n      props.setProperty(\"docs.file\", file.getAbsolutePath());\n      if (lineParserClass != null) {\n        props.setProperty(\"line.parser\", lineParserClass.getName());\n      }\n      \n      // Indexing configuration.\n      props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n      props.setProperty(\"content.source\", LineDocSource.class.getName());\n      props.setProperty(\"directory\", \"RAMDirectory\");\n      props.setProperty(\"doc.stored\", \"true\");\n      props.setProperty(\"doc.index.props\", \"true\");\n      \n      // Create PerfRunData\n      Config config = new Config(props);\n      runData = new PerfRunData(config);\n\n      TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n      tasks.addTask(new CreateIndexTask(runData));\n      for (int i=0; i<numAdds; i++) {\n        tasks.addTask(new AddDocTask(runData));\n      }\n      tasks.addTask(new CloseIndexTask(runData));\n      try {\n        tasks.doLogic();\n      } finally {\n        tasks.close(); \n      }\n      \n      reader = IndexReader.open(runData.getDirectory());\n      searcher = new IndexSearcher(reader);\n      TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n      assertEquals(numAdds, td.totalHits);\n      assertNotNull(td.scoreDocs[0]);\n      \n      if (storedField==null) {\n        storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n      }\n      assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n    } finally {\n      IOUtils.close(searcher, reader, runData);\n    }\n\n  }\n\n","sourceOld":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    tasks.close();\n    \n    IndexReader reader = IndexReader.open(runData.getDirectory());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n    reader.close();\n    runData.close();\n  }\n\n","bugFix":["fd0491419a55db5050f375ec779df63ce76d9db5","7d8d7a81c29a594c8d28e66f3a9029ed7458af42","9464a85239294d71b913f2b669c5e097db2e9e51","a3a0403b45dfe384fae4a1b6e96c3265d000c498","51bd6dd33be0167ec08e8aa8e8e27dced55d06ed"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","sourceNew":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n    \n    IndexReader reader = null;\n    IndexSearcher searcher = null;\n    PerfRunData runData = null;\n    try {\n      Properties props = new Properties();\n      \n      // LineDocSource specific settings.\n      props.setProperty(\"docs.file\", file.getAbsolutePath());\n      if (lineParserClass != null) {\n        props.setProperty(\"line.parser\", lineParserClass.getName());\n      }\n      \n      // Indexing configuration.\n      props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n      props.setProperty(\"content.source\", LineDocSource.class.getName());\n      props.setProperty(\"directory\", \"RAMDirectory\");\n      props.setProperty(\"doc.stored\", \"true\");\n      props.setProperty(\"doc.index.props\", \"true\");\n      \n      // Create PerfRunData\n      Config config = new Config(props);\n      runData = new PerfRunData(config);\n\n      TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n      tasks.addTask(new CreateIndexTask(runData));\n      for (int i=0; i<numAdds; i++) {\n        tasks.addTask(new AddDocTask(runData));\n      }\n      tasks.addTask(new CloseIndexTask(runData));\n      try {\n        tasks.doLogic();\n      } finally {\n        tasks.close(); \n      }\n      \n      reader = IndexReader.open(runData.getDirectory());\n      searcher = new IndexSearcher(reader);\n      TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n      assertEquals(numAdds, td.totalHits);\n      assertNotNull(td.scoreDocs[0]);\n      \n      if (storedField==null) {\n        storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n      }\n      assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n    } finally {\n      IOUtils.close(reader, runData);\n    }\n\n  }\n\n","sourceOld":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n    \n    IndexReader reader = null;\n    IndexSearcher searcher = null;\n    PerfRunData runData = null;\n    try {\n      Properties props = new Properties();\n      \n      // LineDocSource specific settings.\n      props.setProperty(\"docs.file\", file.getAbsolutePath());\n      if (lineParserClass != null) {\n        props.setProperty(\"line.parser\", lineParserClass.getName());\n      }\n      \n      // Indexing configuration.\n      props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n      props.setProperty(\"content.source\", LineDocSource.class.getName());\n      props.setProperty(\"directory\", \"RAMDirectory\");\n      props.setProperty(\"doc.stored\", \"true\");\n      props.setProperty(\"doc.index.props\", \"true\");\n      \n      // Create PerfRunData\n      Config config = new Config(props);\n      runData = new PerfRunData(config);\n\n      TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n      tasks.addTask(new CreateIndexTask(runData));\n      for (int i=0; i<numAdds; i++) {\n        tasks.addTask(new AddDocTask(runData));\n      }\n      tasks.addTask(new CloseIndexTask(runData));\n      try {\n        tasks.doLogic();\n      } finally {\n        tasks.close(); \n      }\n      \n      reader = IndexReader.open(runData.getDirectory());\n      searcher = new IndexSearcher(reader);\n      TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n      assertEquals(numAdds, td.totalHits);\n      assertNotNull(td.scoreDocs[0]);\n      \n      if (storedField==null) {\n        storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n      }\n      assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n    } finally {\n      IOUtils.close(searcher, reader, runData);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","sourceNew":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n    \n    IndexReader reader = null;\n    IndexSearcher searcher = null;\n    PerfRunData runData = null;\n    try {\n      Properties props = new Properties();\n      \n      // LineDocSource specific settings.\n      props.setProperty(\"docs.file\", file.getAbsolutePath());\n      if (lineParserClass != null) {\n        props.setProperty(\"line.parser\", lineParserClass.getName());\n      }\n      \n      // Indexing configuration.\n      props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n      props.setProperty(\"content.source\", LineDocSource.class.getName());\n      props.setProperty(\"directory\", \"RAMDirectory\");\n      props.setProperty(\"doc.stored\", \"true\");\n      props.setProperty(\"doc.index.props\", \"true\");\n      \n      // Create PerfRunData\n      Config config = new Config(props);\n      runData = new PerfRunData(config);\n\n      TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n      tasks.addTask(new CreateIndexTask(runData));\n      for (int i=0; i<numAdds; i++) {\n        tasks.addTask(new AddDocTask(runData));\n      }\n      tasks.addTask(new CloseIndexTask(runData));\n      try {\n        tasks.doLogic();\n      } finally {\n        tasks.close(); \n      }\n      \n      reader = IndexReader.open(runData.getDirectory());\n      searcher = new IndexSearcher(reader);\n      TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n      assertEquals(numAdds, td.totalHits);\n      assertNotNull(td.scoreDocs[0]);\n      \n      if (storedField==null) {\n        storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n      }\n      assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n    } finally {\n      IOUtils.close(reader, runData);\n    }\n\n  }\n\n","sourceOld":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n    \n    IndexReader reader = null;\n    IndexSearcher searcher = null;\n    PerfRunData runData = null;\n    try {\n      Properties props = new Properties();\n      \n      // LineDocSource specific settings.\n      props.setProperty(\"docs.file\", file.getAbsolutePath());\n      if (lineParserClass != null) {\n        props.setProperty(\"line.parser\", lineParserClass.getName());\n      }\n      \n      // Indexing configuration.\n      props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n      props.setProperty(\"content.source\", LineDocSource.class.getName());\n      props.setProperty(\"directory\", \"RAMDirectory\");\n      props.setProperty(\"doc.stored\", \"true\");\n      props.setProperty(\"doc.index.props\", \"true\");\n      \n      // Create PerfRunData\n      Config config = new Config(props);\n      runData = new PerfRunData(config);\n\n      TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n      tasks.addTask(new CreateIndexTask(runData));\n      for (int i=0; i<numAdds; i++) {\n        tasks.addTask(new AddDocTask(runData));\n      }\n      tasks.addTask(new CloseIndexTask(runData));\n      try {\n        tasks.doLogic();\n      } finally {\n        tasks.close(); \n      }\n      \n      reader = IndexReader.open(runData.getDirectory());\n      searcher = new IndexSearcher(reader);\n      TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n      assertEquals(numAdds, td.totalHits);\n      assertNotNull(td.scoreDocs[0]);\n      \n      if (storedField==null) {\n        storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n      }\n      assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n    } finally {\n      IOUtils.close(searcher, reader, runData);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,Class[#-extends-LineParser],int,String).mjava","sourceNew":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n    \n    IndexReader reader = null;\n    IndexSearcher searcher = null;\n    PerfRunData runData = null;\n    try {\n      Properties props = new Properties();\n      \n      // LineDocSource specific settings.\n      props.setProperty(\"docs.file\", file.getAbsolutePath());\n      if (lineParserClass != null) {\n        props.setProperty(\"line.parser\", lineParserClass.getName());\n      }\n      \n      // Indexing configuration.\n      props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n      props.setProperty(\"content.source\", LineDocSource.class.getName());\n      props.setProperty(\"directory\", \"RAMDirectory\");\n      props.setProperty(\"doc.stored\", \"true\");\n      props.setProperty(\"doc.index.props\", \"true\");\n      \n      // Create PerfRunData\n      Config config = new Config(props);\n      runData = new PerfRunData(config);\n\n      TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n      tasks.addTask(new CreateIndexTask(runData));\n      for (int i=0; i<numAdds; i++) {\n        tasks.addTask(new AddDocTask(runData));\n      }\n      tasks.addTask(new CloseIndexTask(runData));\n      try {\n        tasks.doLogic();\n      } finally {\n        tasks.close(); \n      }\n      \n      reader = IndexReader.open(runData.getDirectory());\n      searcher = new IndexSearcher(reader);\n      TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n      assertEquals(numAdds, td.totalHits);\n      assertNotNull(td.scoreDocs[0]);\n      \n      if (storedField==null) {\n        storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n      }\n      assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n    } finally {\n      IOUtils.close(reader, runData);\n    }\n\n  }\n\n","sourceOld":"  private void doIndexAndSearchTestWithRepeats(File file, \n      Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n    \n    IndexReader reader = null;\n    IndexSearcher searcher = null;\n    PerfRunData runData = null;\n    try {\n      Properties props = new Properties();\n      \n      // LineDocSource specific settings.\n      props.setProperty(\"docs.file\", file.getAbsolutePath());\n      if (lineParserClass != null) {\n        props.setProperty(\"line.parser\", lineParserClass.getName());\n      }\n      \n      // Indexing configuration.\n      props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n      props.setProperty(\"content.source\", LineDocSource.class.getName());\n      props.setProperty(\"directory\", \"RAMDirectory\");\n      props.setProperty(\"doc.stored\", \"true\");\n      props.setProperty(\"doc.index.props\", \"true\");\n      \n      // Create PerfRunData\n      Config config = new Config(props);\n      runData = new PerfRunData(config);\n\n      TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n      tasks.addTask(new CreateIndexTask(runData));\n      for (int i=0; i<numAdds; i++) {\n        tasks.addTask(new AddDocTask(runData));\n      }\n      tasks.addTask(new CloseIndexTask(runData));\n      try {\n        tasks.doLogic();\n      } finally {\n        tasks.close(); \n      }\n      \n      reader = IndexReader.open(runData.getDirectory());\n      searcher = new IndexSearcher(reader);\n      TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n      assertEquals(numAdds, td.totalHits);\n      assertNotNull(td.scoreDocs[0]);\n      \n      if (storedField==null) {\n        storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n      }\n      assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n    } finally {\n      IOUtils.close(reader, runData);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["11d282c3fddbb2c824673a792a8b72f6340cb300","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"11d282c3fddbb2c824673a792a8b72f6340cb300":["51bd6dd33be0167ec08e8aa8e8e27dced55d06ed"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","fd0491419a55db5050f375ec779df63ce76d9db5"],"fd0491419a55db5050f375ec779df63ce76d9db5":["6e2944372726ed00fc05229687367002194c6c81"],"51bd6dd33be0167ec08e8aa8e8e27dced55d06ed":["9464a85239294d71b913f2b669c5e097db2e9e51"],"9464a85239294d71b913f2b669c5e097db2e9e51":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"962d04139994fce5193143ef35615499a9a96d78":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","fd0491419a55db5050f375ec779df63ce76d9db5"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e2944372726ed00fc05229687367002194c6c81"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["11d282c3fddbb2c824673a792a8b72f6340cb300"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e2944372726ed00fc05229687367002194c6c81"],"a3776dccca01c11e7046323cfad46a3b4a471233":["6e2944372726ed00fc05229687367002194c6c81","fd0491419a55db5050f375ec779df63ce76d9db5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["fd0491419a55db5050f375ec779df63ce76d9db5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6e2944372726ed00fc05229687367002194c6c81":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"11d282c3fddbb2c824673a792a8b72f6340cb300":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"fd0491419a55db5050f375ec779df63ce76d9db5":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"51bd6dd33be0167ec08e8aa8e8e27dced55d06ed":["11d282c3fddbb2c824673a792a8b72f6340cb300"],"9464a85239294d71b913f2b669c5e097db2e9e51":["51bd6dd33be0167ec08e8aa8e8e27dced55d06ed"],"962d04139994fce5193143ef35615499a9a96d78":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["962d04139994fce5193143ef35615499a9a96d78"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","6e2944372726ed00fc05229687367002194c6c81"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["9464a85239294d71b913f2b669c5e097db2e9e51"],"6e2944372726ed00fc05229687367002194c6c81":["fd0491419a55db5050f375ec779df63ce76d9db5","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}