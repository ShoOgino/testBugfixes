{"path":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(CacheEntry[K,V]).mjava","commits":[{"id":"fbd02ee70d00f41133d28f0c1f8e9f68168c50d3","date":1294448351,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(CacheEntry[K,V]).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(Object).mjava","sourceNew":"    // necessary because maxSize is private in base class\n    public CacheEntry<K,V> myInsertWithOverflow(CacheEntry<K,V> element) {\n      if (size() < myMaxSize) {\n        add(element);\n        return null;\n      } else if (size() > 0 && !lessThan(element, heap[1])) {\n        CacheEntry<K,V> ret = heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","sourceOld":"    // necessary because maxSize is private in base class\n    public Object myInsertWithOverflow(Object element) {\n      if (size() < myMaxSize) {\n        add(element);\n        return null;\n      } else if (size() > 0 && !lessThan(element, heap[1])) {\n        Object ret = heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(CacheEntry[K,V]).mjava","pathOld":"/dev/null","sourceNew":"    // necessary because maxSize is private in base class\n    public CacheEntry<K,V> myInsertWithOverflow(CacheEntry<K,V> element) {\n      if (size() < myMaxSize) {\n        add(element);\n        return null;\n      } else if (size() > 0 && !lessThan(element, heap[1])) {\n        CacheEntry<K,V> ret = heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(CacheEntry[K,V]).mjava","pathOld":"/dev/null","sourceNew":"    // necessary because maxSize is private in base class\n    public CacheEntry<K,V> myInsertWithOverflow(CacheEntry<K,V> element) {\n      if (size() < myMaxSize) {\n        add(element);\n        return null;\n      } else if (size() > 0 && !lessThan(element, heap[1])) {\n        CacheEntry<K,V> ret = heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1da2c39cf47fc10dc839d8c37890a2b009081e76","date":1299662336,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(CacheEntry[K,V]).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(CacheEntry[K,V]).mjava","sourceNew":"    // necessary because maxSize is private in base class\n    @SuppressWarnings(\"unchecked\")\n    public CacheEntry<K,V> myInsertWithOverflow(CacheEntry<K,V> element) {\n      if (size() < myMaxSize) {\n        add(element);\n        return null;\n      } else if (size() > 0 && !lessThan(element, (CacheEntry<K,V>) heap[1])) {\n        CacheEntry<K,V> ret = (CacheEntry<K,V>) heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","sourceOld":"    // necessary because maxSize is private in base class\n    public CacheEntry<K,V> myInsertWithOverflow(CacheEntry<K,V> element) {\n      if (size() < myMaxSize) {\n        add(element);\n        return null;\n      } else if (size() > 0 && !lessThan(element, heap[1])) {\n        CacheEntry<K,V> ret = heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","bugFix":["fbd02ee70d00f41133d28f0c1f8e9f68168c50d3","516bcb3c0d409157f56056e1ecd5e5361ca4ae0b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(CacheEntry[K,V]).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(CacheEntry[K,V]).mjava","sourceNew":"    // necessary because maxSize is private in base class\n    @SuppressWarnings(\"unchecked\")\n    public CacheEntry<K,V> myInsertWithOverflow(CacheEntry<K,V> element) {\n      if (size() < myMaxSize) {\n        add(element);\n        return null;\n      } else if (size() > 0 && !lessThan(element, (CacheEntry<K,V>) heap[1])) {\n        CacheEntry<K,V> ret = (CacheEntry<K,V>) heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","sourceOld":"    // necessary because maxSize is private in base class\n    public CacheEntry<K,V> myInsertWithOverflow(CacheEntry<K,V> element) {\n      if (size() < myMaxSize) {\n        add(element);\n        return null;\n      } else if (size() > 0 && !lessThan(element, heap[1])) {\n        CacheEntry<K,V> ret = heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(CacheEntry[K,V]).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(CacheEntry[K,V]).mjava","sourceNew":"    // necessary because maxSize is private in base class\n    @SuppressWarnings(\"unchecked\")\n    public CacheEntry<K,V> myInsertWithOverflow(CacheEntry<K,V> element) {\n      if (size() < myMaxSize) {\n        add(element);\n        return null;\n      } else if (size() > 0 && !lessThan(element, (CacheEntry<K,V>) heap[1])) {\n        CacheEntry<K,V> ret = (CacheEntry<K,V>) heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","sourceOld":"    // necessary because maxSize is private in base class\n    public CacheEntry<K,V> myInsertWithOverflow(CacheEntry<K,V> element) {\n      if (size() < myMaxSize) {\n        add(element);\n        return null;\n      } else if (size() > 0 && !lessThan(element, heap[1])) {\n        CacheEntry<K,V> ret = heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(CacheEntry[K,V]).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(CacheEntry[K,V]).mjava","sourceNew":"    // necessary because maxSize is private in base class\n    @SuppressWarnings(\"unchecked\")\n    public CacheEntry<K,V> myInsertWithOverflow(CacheEntry<K,V> element) {\n      if (size() < myMaxSize) {\n        add(element);\n        return null;\n      } else if (size() > 0 && !lessThan(element, (CacheEntry<K,V>) heap[1])) {\n        CacheEntry<K,V> ret = (CacheEntry<K,V>) heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","sourceOld":"    // necessary because maxSize is private in base class\n    @SuppressWarnings(\"unchecked\")\n    public CacheEntry<K,V> myInsertWithOverflow(CacheEntry<K,V> element) {\n      if (size() < myMaxSize) {\n        add(element);\n        return null;\n      } else if (size() > 0 && !lessThan(element, (CacheEntry<K,V>) heap[1])) {\n        CacheEntry<K,V> ret = (CacheEntry<K,V>) heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(CacheEntry[K,V]).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(CacheEntry[K,V]).mjava","sourceNew":"    // necessary because maxSize is private in base class\n    @SuppressWarnings(\"unchecked\")\n    public CacheEntry<K,V> myInsertWithOverflow(CacheEntry<K,V> element) {\n      if (size() < myMaxSize) {\n        add(element);\n        return null;\n      } else if (size() > 0 && !lessThan(element, (CacheEntry<K,V>) heap[1])) {\n        CacheEntry<K,V> ret = (CacheEntry<K,V>) heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","sourceOld":"    // necessary because maxSize is private in base class\n    @SuppressWarnings(\"unchecked\")\n    public CacheEntry<K,V> myInsertWithOverflow(CacheEntry<K,V> element) {\n      if (size() < myMaxSize) {\n        add(element);\n        return null;\n      } else if (size() > 0 && !lessThan(element, (CacheEntry<K,V>) heap[1])) {\n        CacheEntry<K,V> ret = (CacheEntry<K,V>) heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(CacheEntry[K,V]).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.PQueue#myInsertWithOverflow(CacheEntry[K,V]).mjava","sourceNew":"    // necessary because maxSize is private in base class\n    @SuppressWarnings(\"unchecked\")\n    public CacheEntry<K,V> myInsertWithOverflow(CacheEntry<K,V> element) {\n      if (size() < myMaxSize) {\n        add(element);\n        return null;\n      } else if (size() > 0 && !lessThan(element, (CacheEntry<K,V>) heap[1])) {\n        CacheEntry<K,V> ret = (CacheEntry<K,V>) heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","sourceOld":"    // necessary because maxSize is private in base class\n    @SuppressWarnings(\"unchecked\")\n    public CacheEntry<K,V> myInsertWithOverflow(CacheEntry<K,V> element) {\n      if (size() < myMaxSize) {\n        add(element);\n        return null;\n      } else if (size() > 0 && !lessThan(element, (CacheEntry<K,V>) heap[1])) {\n        CacheEntry<K,V> ret = (CacheEntry<K,V>) heap[1];\n        heap[1] = element;\n        updateTop();\n        return ret;\n      } else {\n        return element;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da2c39cf47fc10dc839d8c37890a2b009081e76":["fbd02ee70d00f41133d28f0c1f8e9f68168c50d3"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["868da859b43505d9d2a023bfeae6dd0c795f5295","1da2c39cf47fc10dc839d8c37890a2b009081e76"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da2c39cf47fc10dc839d8c37890a2b009081e76"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","1da2c39cf47fc10dc839d8c37890a2b009081e76"],"c26f00b574427b55127e869b935845554afde1fa":["1da2c39cf47fc10dc839d8c37890a2b009081e76","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fbd02ee70d00f41133d28f0c1f8e9f68168c50d3"],"fbd02ee70d00f41133d28f0c1f8e9f68168c50d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da2c39cf47fc10dc839d8c37890a2b009081e76"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fbd02ee70d00f41133d28f0c1f8e9f68168c50d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da2c39cf47fc10dc839d8c37890a2b009081e76":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fbd02ee70d00f41133d28f0c1f8e9f68168c50d3":["1da2c39cf47fc10dc839d8c37890a2b009081e76","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","fbd02ee70d00f41133d28f0c1f8e9f68168c50d3","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}