{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#amILeader().mjava","commits":[{"id":"33d0ed80b7b47e34ad3ff033a77544563aba3085","date":1341244632,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#amILeader().mjava","pathOld":"/dev/null","sourceNew":"  private boolean amILeader() {\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.get(\"id\"))) {\n        return true;\n      }\n    } catch (KeeperException e) {\n      log.warn(\"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#amILeader().mjava","pathOld":"/dev/null","sourceNew":"  private boolean amILeader() {\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.get(\"id\"))) {\n        return true;\n      }\n    } catch (KeeperException e) {\n      log.warn(\"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#amILeader().mjava","sourceNew":"  private boolean amILeader() {\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return true;\n      }\n    } catch (KeeperException e) {\n      log.warn(\"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return false;\n  }\n\n","sourceOld":"  private boolean amILeader() {\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.get(\"id\"))) {\n        return true;\n      }\n    } catch (KeeperException e) {\n      log.warn(\"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0a4eeff354e8081247783f424a8e5a0fe106633","date":1355250757,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#amILeader().mjava","sourceNew":"  protected boolean amILeader() {\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return true;\n      }\n    } catch (KeeperException e) {\n      log.warn(\"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return false;\n  }\n\n","sourceOld":"  private boolean amILeader() {\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return true;\n      }\n    } catch (KeeperException e) {\n      log.warn(\"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#amILeader().mjava","sourceNew":"  protected boolean amILeader() {\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return true;\n      }\n    } catch (KeeperException e) {\n      log.warn(\"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return false;\n  }\n\n","sourceOld":"  private boolean amILeader() {\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return true;\n      }\n    } catch (KeeperException e) {\n      log.warn(\"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"270612d8e1a51cded91704d7af12f8979de0f584","date":1381502089,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#amILeader().mjava","sourceNew":"  protected LeaderStatus amILeader() {\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n        log.info(\"\", e);\n      } else {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","sourceOld":"  protected boolean amILeader() {\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return true;\n      }\n    } catch (KeeperException e) {\n      log.warn(\"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"337db0c9a917807fab1c4c08462fecb15b3cc409","date":1403794484,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#amILeader().mjava","sourceNew":"  protected LeaderStatus amILeader() {\n    TimerContext timerContext = stats.time(\"collection_am_i_leader\");\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n        log.info(\"\", e);\n      } else {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(\"collection_am_i_leader\");\n      } else  {\n        stats.error(\"collection_am_i_leader\");\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","sourceOld":"  protected LeaderStatus amILeader() {\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n        log.info(\"\", e);\n      } else {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerProcessor#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#amILeader().mjava","sourceNew":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n        log.info(\"\", e);\n      } else {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","sourceOld":"  protected LeaderStatus amILeader() {\n    TimerContext timerContext = stats.time(\"collection_am_i_leader\");\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n        log.info(\"\", e);\n      } else {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(\"collection_am_i_leader\");\n      } else  {\n        stats.error(\"collection_am_i_leader\");\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"270612d8e1a51cded91704d7af12f8979de0f584":["f0a4eeff354e8081247783f424a8e5a0fe106633"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["fa64435b5902ce266c23755a4a00691a3285dab8","f0a4eeff354e8081247783f424a8e5a0fe106633"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["337db0c9a917807fab1c4c08462fecb15b3cc409"],"f0a4eeff354e8081247783f424a8e5a0fe106633":["fa64435b5902ce266c23755a4a00691a3285dab8"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"337db0c9a917807fab1c4c08462fecb15b3cc409":["270612d8e1a51cded91704d7af12f8979de0f584"],"fa64435b5902ce266c23755a4a00691a3285dab8":["33d0ed80b7b47e34ad3ff033a77544563aba3085"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33d0ed80b7b47e34ad3ff033a77544563aba3085"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"]},"commit2Childs":{"270612d8e1a51cded91704d7af12f8979de0f584":["337db0c9a917807fab1c4c08462fecb15b3cc409"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"f0a4eeff354e8081247783f424a8e5a0fe106633":["270612d8e1a51cded91704d7af12f8979de0f584","d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["fa64435b5902ce266c23755a4a00691a3285dab8","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"337db0c9a917807fab1c4c08462fecb15b3cc409":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"fa64435b5902ce266c23755a4a00691a3285dab8":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f0a4eeff354e8081247783f424a8e5a0fe106633"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33d0ed80b7b47e34ad3ff033a77544563aba3085","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}