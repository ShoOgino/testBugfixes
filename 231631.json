{"path":"lucene/backwards/src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","sourceNew":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n            IndexWriter writer = new IndexWriter(index.index, new SimpleAnalyzer(), T, \n                                                 IndexWriter.MaxFieldLength.LIMITED);\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","sourceOld":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n            IndexWriter writer = new IndexWriter(index.index, new SimpleAnalyzer(), T, \n                                                 IndexWriter.MaxFieldLength.LIMITED);\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","sourceNew":null,"sourceOld":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n            IndexWriter writer = new IndexWriter(index.index, new SimpleAnalyzer(), T, \n                                                 IndexWriter.MaxFieldLength.LIMITED);\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}