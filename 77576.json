{"path":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm#checkPosition(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm#checkPosition(int).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm#checkPosition(int).mjava","sourceNew":"  /**\n   * Checks to see if this term is valid at <code>position</code>.\n   *\n   * @param position\n   *            to check against valid term positions\n   * @return true iff this term is a hit at this position\n   */\n  public boolean checkPosition(int position) {\n    // There would probably be a slight speed improvement if PositionSpans\n    // where kept in some sort of priority queue - that way this method\n    // could\n    // bail early without checking each PositionSpan.\n    Iterator<PositionSpan> positionSpanIt = positionSpans.iterator();\n\n    while (positionSpanIt.hasNext()) {\n      PositionSpan posSpan = positionSpanIt.next();\n\n      if (((position >= posSpan.start) && (position <= posSpan.end))) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Checks to see if this term is valid at <code>position</code>.\n   *\n   * @param position\n   *            to check against valid term positions\n   * @return true iff this term is a hit at this position\n   */\n  public boolean checkPosition(int position) {\n    // There would probably be a slight speed improvement if PositionSpans\n    // where kept in some sort of priority queue - that way this method\n    // could\n    // bail early without checking each PositionSpan.\n    Iterator<PositionSpan> positionSpanIt = positionSpans.iterator();\n\n    while (positionSpanIt.hasNext()) {\n      PositionSpan posSpan = positionSpanIt.next();\n\n      if (((position >= posSpan.start) && (position <= posSpan.end))) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm#checkPosition(int).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm#checkPosition(int).mjava","sourceNew":"  /**\n   * Checks to see if this term is valid at <code>position</code>.\n   *\n   * @param position\n   *            to check against valid term positions\n   * @return true iff this term is a hit at this position\n   */\n  public boolean checkPosition(int position) {\n    // There would probably be a slight speed improvement if PositionSpans\n    // where kept in some sort of priority queue - that way this method\n    // could\n    // bail early without checking each PositionSpan.\n    Iterator<PositionSpan> positionSpanIt = positionSpans.iterator();\n\n    while (positionSpanIt.hasNext()) {\n      PositionSpan posSpan = positionSpanIt.next();\n\n      if (((position >= posSpan.start) && (position <= posSpan.end))) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Checks to see if this term is valid at <code>position</code>.\n   *\n   * @param position\n   *            to check against valid term positions\n   * @return true iff this term is a hit at this position\n   */\n  public boolean checkPosition(int position) {\n    // There would probably be a slight speed improvement if PositionSpans\n    // where kept in some sort of priority queue - that way this method\n    // could\n    // bail early without checking each PositionSpan.\n    Iterator<PositionSpan> positionSpanIt = positionSpans.iterator();\n\n    while (positionSpanIt.hasNext()) {\n      PositionSpan posSpan = positionSpanIt.next();\n\n      if (((position >= posSpan.start) && (position <= posSpan.end))) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}