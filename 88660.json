{"path":"src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","commits":[{"id":"9e98927024757b7944e3ab5bf88134d5f7f30600","date":1097059223,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","pathOld":"/dev/null","sourceNew":"\tpublic void test() {\n  \t\n\t  IndexReader reader = null;\n\t  \n\t  try {\n\t    reader = IndexReader.open(directory);\n\t    for(int i = 1; i <= numThreads; i++)\n\t      testTermPositionVectors(reader, i);\n\t  \t\n\t  \t\n  \t}\n\t\tcatch (IOException ioe) {\n\t\t\tfail(ioe.getMessage());\n\t\t}\n\t\tfinally {\n\t\t  if (reader != null) {\n\t\t    try {\n\t\t      /** close the opened reader */\n\t\t      reader.close();\n\t\t    } catch (IOException ioe) {\n\t\t      ioe.printStackTrace();\n\t\t    }\n\t\t  }\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde91cb86cf36b45603c6dfa1c27379a591a17e7","date":1166314240,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","sourceNew":"  public void test() {\n    \n    IndexReader reader = null;\n    \n    try {\n      reader = IndexReader.open(directory);\n      for(int i = 1; i <= numThreads; i++)\n        testTermPositionVectors(reader, i);\n      \n      \n    }\n    catch (IOException ioe) {\n      fail(ioe.getMessage());\n    }\n    finally {\n      if (reader != null) {\n        try {\n          /** close the opened reader */\n          reader.close();\n        } catch (IOException ioe) {\n          ioe.printStackTrace();\n        }\n      }\n    }\n  }\n\n","sourceOld":"\tpublic void test() {\n  \t\n\t  IndexReader reader = null;\n\t  \n\t  try {\n\t    reader = IndexReader.open(directory);\n\t    for(int i = 1; i <= numThreads; i++)\n\t      testTermPositionVectors(reader, i);\n\t  \t\n\t  \t\n  \t}\n\t\tcatch (IOException ioe) {\n\t\t\tfail(ioe.getMessage());\n\t\t}\n\t\tfinally {\n\t\t  if (reader != null) {\n\t\t    try {\n\t\t      /** close the opened reader */\n\t\t      reader.close();\n\t\t    } catch (IOException ioe) {\n\t\t      ioe.printStackTrace();\n\t\t    }\n\t\t  }\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","sourceNew":"  public void test() throws Exception {\n    \n    IndexReader reader = null;\n    \n    try {\n      reader = IndexReader.open(directory);\n      for(int i = 1; i <= numThreads; i++)\n        testTermPositionVectors(reader, i);\n      \n      \n    }\n    catch (IOException ioe) {\n      fail(ioe.getMessage());\n    }\n    finally {\n      if (reader != null) {\n        try {\n          /** close the opened reader */\n          reader.close();\n        } catch (IOException ioe) {\n          ioe.printStackTrace();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() {\n    \n    IndexReader reader = null;\n    \n    try {\n      reader = IndexReader.open(directory);\n      for(int i = 1; i <= numThreads; i++)\n        testTermPositionVectors(reader, i);\n      \n      \n    }\n    catch (IOException ioe) {\n      fail(ioe.getMessage());\n    }\n    finally {\n      if (reader != null) {\n        try {\n          /** close the opened reader */\n          reader.close();\n        } catch (IOException ioe) {\n          ioe.printStackTrace();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","sourceNew":"  public void test() throws Exception {\n    \n    IndexReader reader = null;\n    \n    try {\n      reader = IndexReader.open(directory, true);\n      for(int i = 1; i <= numThreads; i++)\n        testTermPositionVectors(reader, i);\n      \n      \n    }\n    catch (IOException ioe) {\n      fail(ioe.getMessage());\n    }\n    finally {\n      if (reader != null) {\n        try {\n          /** close the opened reader */\n          reader.close();\n        } catch (IOException ioe) {\n          ioe.printStackTrace();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    \n    IndexReader reader = null;\n    \n    try {\n      reader = IndexReader.open(directory);\n      for(int i = 1; i <= numThreads; i++)\n        testTermPositionVectors(reader, i);\n      \n      \n    }\n    catch (IOException ioe) {\n      fail(ioe.getMessage());\n    }\n    finally {\n      if (reader != null) {\n        try {\n          /** close the opened reader */\n          reader.close();\n        } catch (IOException ioe) {\n          ioe.printStackTrace();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","sourceNew":"  public void test() throws Exception {\n    \n    IndexReader reader = null;\n    \n    try {\n      reader = IndexReader.open(directory, true);\n      for(int i = 1; i <= numThreads; i++)\n        testTermPositionVectors(reader, i);\n      \n      \n    }\n    catch (IOException ioe) {\n      fail(ioe.getMessage());\n    }\n    finally {\n      if (reader != null) {\n        try {\n          /** close the opened reader */\n          reader.close();\n        } catch (IOException ioe) {\n          ioe.printStackTrace();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    \n    IndexReader reader = null;\n    \n    try {\n      reader = IndexReader.open(directory);\n      for(int i = 1; i <= numThreads; i++)\n        testTermPositionVectors(reader, i);\n      \n      \n    }\n    catch (IOException ioe) {\n      fail(ioe.getMessage());\n    }\n    finally {\n      if (reader != null) {\n        try {\n          /** close the opened reader */\n          reader.close();\n        } catch (IOException ioe) {\n          ioe.printStackTrace();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","sourceNew":"  public void test() throws Exception {\n    \n    IndexReader reader = null;\n    \n    try {\n      reader = IndexReader.open(directory, true);\n      for(int i = 1; i <= numThreads; i++)\n        testTermPositionVectors(reader, i);\n      \n      \n    }\n    catch (IOException ioe) {\n      fail(ioe.getMessage());\n    }\n    finally {\n      if (reader != null) {\n        try {\n          /** close the opened reader */\n          reader.close();\n        } catch (IOException ioe) {\n          ioe.printStackTrace();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    \n    IndexReader reader = null;\n    \n    try {\n      reader = IndexReader.open(directory, true);\n      for(int i = 1; i <= numThreads; i++)\n        testTermPositionVectors(reader, i);\n      \n      \n    }\n    catch (IOException ioe) {\n      fail(ioe.getMessage());\n    }\n    finally {\n      if (reader != null) {\n        try {\n          /** close the opened reader */\n          reader.close();\n        } catch (IOException ioe) {\n          ioe.printStackTrace();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bde91cb86cf36b45603c6dfa1c27379a591a17e7":["9e98927024757b7944e3ab5bf88134d5f7f30600"],"9e98927024757b7944e3ab5bf88134d5f7f30600":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["bde91cb86cf36b45603c6dfa1c27379a591a17e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"bde91cb86cf36b45603c6dfa1c27379a591a17e7":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"9e98927024757b7944e3ab5bf88134d5f7f30600":["bde91cb86cf36b45603c6dfa1c27379a591a17e7"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e98927024757b7944e3ab5bf88134d5f7f30600"],"0a046c0c310bc77931fc8441bd920053b607dd14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}