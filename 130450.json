{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testDeleteNamedBackup(String[]).mjava","commits":[{"id":"4dbfe3d3dc9ac9bda8ee276ce539e571f3125052","date":1401862284,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testDeleteNamedBackup(String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void testDeleteNamedBackup(String backupNames[]) throws InterruptedException {\n    for (int i = 0; i < 2; i++) {\n      BackupThread deleteBackupThread = new BackupThread(backupNames[i], ReplicationHandler.CMD_DELETE_BACKUP);\n      deleteBackupThread.start();\n      int waitCnt = 0;\n      CheckDeleteBackupStatus checkDeleteBackupStatus = new CheckDeleteBackupStatus();\n      while (true) {\n        checkDeleteBackupStatus.fetchStatus();\n        if (checkDeleteBackupStatus.fail != null) {\n          fail(checkDeleteBackupStatus.fail);\n        }\n        if (checkDeleteBackupStatus.success) {\n          break;\n        }\n        Thread.sleep(200);\n        if (waitCnt == 20) {\n          fail(\"Delete Backup success not detected:\" + checkDeleteBackupStatus.response);\n        }\n        waitCnt++;\n      }\n\n      if (deleteBackupThread.fail != null) {\n        fail(deleteBackupThread.fail);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5b847bb03f0ad90d50073e48e452f3346df87482"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"34d359645acebeba5edce0f1186d99aa81bbe546","date":1402921077,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testDeleteNamedBackup(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testDeleteNamedBackup(String[]).mjava","sourceNew":"  private void testDeleteNamedBackup(String backupNames[]) throws InterruptedException, IOException {\n    for (int i = 0; i < 2; i++) {\n      BackupThread deleteBackupThread = new BackupThread(backupNames[i], ReplicationHandler.CMD_DELETE_BACKUP);\n      deleteBackupThread.start();\n      CheckDeleteBackupStatus checkDeleteBackupStatus = new CheckDeleteBackupStatus(backupNames[i]);\n      while (true) {\n        boolean success = checkDeleteBackupStatus.fetchStatus();\n        if (success) {\n          break;\n        }\n        Thread.sleep(200);\n      }\n\n      if (deleteBackupThread.fail != null) {\n        fail(deleteBackupThread.fail);\n      }\n    }\n  }\n\n","sourceOld":"  private void testDeleteNamedBackup(String backupNames[]) throws InterruptedException {\n    for (int i = 0; i < 2; i++) {\n      BackupThread deleteBackupThread = new BackupThread(backupNames[i], ReplicationHandler.CMD_DELETE_BACKUP);\n      deleteBackupThread.start();\n      int waitCnt = 0;\n      CheckDeleteBackupStatus checkDeleteBackupStatus = new CheckDeleteBackupStatus();\n      while (true) {\n        checkDeleteBackupStatus.fetchStatus();\n        if (checkDeleteBackupStatus.fail != null) {\n          fail(checkDeleteBackupStatus.fail);\n        }\n        if (checkDeleteBackupStatus.success) {\n          break;\n        }\n        Thread.sleep(200);\n        if (waitCnt == 20) {\n          fail(\"Delete Backup success not detected:\" + checkDeleteBackupStatus.response);\n        }\n        waitCnt++;\n      }\n\n      if (deleteBackupThread.fail != null) {\n        fail(deleteBackupThread.fail);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["5b847bb03f0ad90d50073e48e452f3346df87482"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testDeleteNamedBackup(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testDeleteNamedBackup(String[]).mjava","sourceNew":"  private void testDeleteNamedBackup(String backupNames[]) throws InterruptedException, IOException {\n    for (int i = 0; i < 2; i++) {\n      BackupThread deleteBackupThread = new BackupThread(backupNames[i], ReplicationHandler.CMD_DELETE_BACKUP);\n      deleteBackupThread.start();\n      CheckDeleteBackupStatus checkDeleteBackupStatus = new CheckDeleteBackupStatus(backupNames[i]);\n      while (true) {\n        boolean success = checkDeleteBackupStatus.fetchStatus();\n        if (success) {\n          break;\n        }\n        Thread.sleep(200);\n      }\n\n      if (deleteBackupThread.fail != null) {\n        fail(deleteBackupThread.fail);\n      }\n    }\n  }\n\n","sourceOld":"  private void testDeleteNamedBackup(String backupNames[]) throws InterruptedException {\n    for (int i = 0; i < 2; i++) {\n      BackupThread deleteBackupThread = new BackupThread(backupNames[i], ReplicationHandler.CMD_DELETE_BACKUP);\n      deleteBackupThread.start();\n      int waitCnt = 0;\n      CheckDeleteBackupStatus checkDeleteBackupStatus = new CheckDeleteBackupStatus();\n      while (true) {\n        checkDeleteBackupStatus.fetchStatus();\n        if (checkDeleteBackupStatus.fail != null) {\n          fail(checkDeleteBackupStatus.fail);\n        }\n        if (checkDeleteBackupStatus.success) {\n          break;\n        }\n        Thread.sleep(200);\n        if (waitCnt == 20) {\n          fail(\"Delete Backup success not detected:\" + checkDeleteBackupStatus.response);\n        }\n        waitCnt++;\n      }\n\n      if (deleteBackupThread.fail != null) {\n        fail(deleteBackupThread.fail);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b847bb03f0ad90d50073e48e452f3346df87482","date":1413504427,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testDeleteNamedBackup(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testDeleteNamedBackup(String[]).mjava","sourceNew":"  private void testDeleteNamedBackup(String backupNames[]) throws InterruptedException, IOException {\n    String lastTimestamp = null;\n    for (int i = 0; i < 2; i++) {\n      BackupCommand deleteBackupCommand = new BackupCommand(backupNames[i], ReplicationHandler.CMD_DELETE_BACKUP);\n      deleteBackupCommand.runCommand();\n      CheckDeleteBackupStatus checkDeleteBackupStatus = new CheckDeleteBackupStatus(backupNames[i], lastTimestamp);\n      while (true) {\n        boolean success = checkDeleteBackupStatus.fetchStatus();\n        if (success) {\n          lastTimestamp = checkDeleteBackupStatus.lastTimestamp;\n          if (i == 0) {\n            Thread.sleep(1000); //make the timestamp change\n          }\n          break;\n        }\n        Thread.sleep(200);\n      }\n\n      if (deleteBackupCommand.fail != null) {\n        fail(deleteBackupCommand.fail);\n      }\n    }\n  }\n\n","sourceOld":"  private void testDeleteNamedBackup(String backupNames[]) throws InterruptedException, IOException {\n    for (int i = 0; i < 2; i++) {\n      BackupThread deleteBackupThread = new BackupThread(backupNames[i], ReplicationHandler.CMD_DELETE_BACKUP);\n      deleteBackupThread.start();\n      CheckDeleteBackupStatus checkDeleteBackupStatus = new CheckDeleteBackupStatus(backupNames[i]);\n      while (true) {\n        boolean success = checkDeleteBackupStatus.fetchStatus();\n        if (success) {\n          break;\n        }\n        Thread.sleep(200);\n      }\n\n      if (deleteBackupThread.fail != null) {\n        fail(deleteBackupThread.fail);\n      }\n    }\n  }\n\n","bugFix":["34d359645acebeba5edce0f1186d99aa81bbe546","4dbfe3d3dc9ac9bda8ee276ce539e571f3125052"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testDeleteNamedBackup(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testDeleteNamedBackup(String[]).mjava","sourceNew":"  private void testDeleteNamedBackup(String backupNames[]) throws InterruptedException, IOException {\n    String lastTimestamp = null;\n    for (int i = 0; i < 2; i++) {\n      BackupCommand deleteBackupCommand = new BackupCommand(backupNames[i], ReplicationHandler.CMD_DELETE_BACKUP);\n      deleteBackupCommand.runCommand();\n      CheckDeleteBackupStatus checkDeleteBackupStatus = new CheckDeleteBackupStatus(backupNames[i], lastTimestamp);\n      while (true) {\n        boolean success = checkDeleteBackupStatus.fetchStatus();\n        if (success) {\n          lastTimestamp = checkDeleteBackupStatus.lastTimestamp;\n          if (i == 0) {\n            Thread.sleep(1000); //make the timestamp change\n          }\n          break;\n        }\n        Thread.sleep(200);\n      }\n\n      if (deleteBackupCommand.fail != null) {\n        fail(deleteBackupCommand.fail);\n      }\n    }\n  }\n\n","sourceOld":"  private void testDeleteNamedBackup(String backupNames[]) throws InterruptedException, IOException {\n    for (int i = 0; i < 2; i++) {\n      BackupThread deleteBackupThread = new BackupThread(backupNames[i], ReplicationHandler.CMD_DELETE_BACKUP);\n      deleteBackupThread.start();\n      CheckDeleteBackupStatus checkDeleteBackupStatus = new CheckDeleteBackupStatus(backupNames[i]);\n      while (true) {\n        boolean success = checkDeleteBackupStatus.fetchStatus();\n        if (success) {\n          break;\n        }\n        Thread.sleep(200);\n      }\n\n      if (deleteBackupThread.fail != null) {\n        fail(deleteBackupThread.fail);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b13106276bb5ea342253dbf6aae7b675adb38d3","date":1428054414,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testDeleteNamedBackup(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testDeleteNamedBackup(String[]).mjava","sourceNew":"  private void testDeleteNamedBackup(String backupNames[]) throws InterruptedException, IOException {\n    String lastTimestamp = null;\n    for (int i = 0; i < 2; i++) {\n      runBackupCommand(masterJetty, ReplicationHandler.CMD_DELETE_BACKUP, \"&name=\" +backupNames[i]);\n      CheckDeleteBackupStatus checkDeleteBackupStatus = new CheckDeleteBackupStatus(backupNames[i], lastTimestamp);\n      while (true) {\n        boolean success = checkDeleteBackupStatus.fetchStatus();\n        if (success) {\n          lastTimestamp = checkDeleteBackupStatus.lastTimestamp;\n          if (i == 0) {\n            Thread.sleep(1000); //make the timestamp change\n          }\n          break;\n        }\n        Thread.sleep(200);\n      }\n    }\n  }\n\n","sourceOld":"  private void testDeleteNamedBackup(String backupNames[]) throws InterruptedException, IOException {\n    String lastTimestamp = null;\n    for (int i = 0; i < 2; i++) {\n      BackupCommand deleteBackupCommand = new BackupCommand(backupNames[i], ReplicationHandler.CMD_DELETE_BACKUP);\n      deleteBackupCommand.runCommand();\n      CheckDeleteBackupStatus checkDeleteBackupStatus = new CheckDeleteBackupStatus(backupNames[i], lastTimestamp);\n      while (true) {\n        boolean success = checkDeleteBackupStatus.fetchStatus();\n        if (success) {\n          lastTimestamp = checkDeleteBackupStatus.lastTimestamp;\n          if (i == 0) {\n            Thread.sleep(1000); //make the timestamp change\n          }\n          break;\n        }\n        Thread.sleep(200);\n      }\n\n      if (deleteBackupCommand.fail != null) {\n        fail(deleteBackupCommand.fail);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testDeleteNamedBackup(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testDeleteNamedBackup(String[]).mjava","sourceNew":"  private void testDeleteNamedBackup(String backupNames[]) throws InterruptedException, IOException {\n    String lastTimestamp = null;\n    for (int i = 0; i < 2; i++) {\n      runBackupCommand(masterJetty, ReplicationHandler.CMD_DELETE_BACKUP, \"&name=\" +backupNames[i]);\n      CheckDeleteBackupStatus checkDeleteBackupStatus = new CheckDeleteBackupStatus(backupNames[i], lastTimestamp);\n      while (true) {\n        boolean success = checkDeleteBackupStatus.fetchStatus();\n        if (success) {\n          lastTimestamp = checkDeleteBackupStatus.lastTimestamp;\n          if (i == 0) {\n            Thread.sleep(1000); //make the timestamp change\n          }\n          break;\n        }\n        Thread.sleep(200);\n      }\n    }\n  }\n\n","sourceOld":"  private void testDeleteNamedBackup(String backupNames[]) throws InterruptedException, IOException {\n    String lastTimestamp = null;\n    for (int i = 0; i < 2; i++) {\n      BackupCommand deleteBackupCommand = new BackupCommand(backupNames[i], ReplicationHandler.CMD_DELETE_BACKUP);\n      deleteBackupCommand.runCommand();\n      CheckDeleteBackupStatus checkDeleteBackupStatus = new CheckDeleteBackupStatus(backupNames[i], lastTimestamp);\n      while (true) {\n        boolean success = checkDeleteBackupStatus.fetchStatus();\n        if (success) {\n          lastTimestamp = checkDeleteBackupStatus.lastTimestamp;\n          if (i == 0) {\n            Thread.sleep(1000); //make the timestamp change\n          }\n          break;\n        }\n        Thread.sleep(200);\n      }\n\n      if (deleteBackupCommand.fail != null) {\n        fail(deleteBackupCommand.fail);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec54bd926c45854b5a1599685b0f7d2bfbfe177f","date":1573838246,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testDeleteNamedBackup(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testDeleteNamedBackup(String[]).mjava","sourceNew":"  private void testDeleteNamedBackup(String backupNames[]) throws Exception {\n    final BackupStatusChecker backupStatus\n      = new BackupStatusChecker(masterClient, \"/\" + DEFAULT_TEST_CORENAME + \"/replication\");\n    for (int i = 0; i < 2; i++) {\n      final Path p = Paths.get(master.getDataDir(), \"snapshot.\" + backupNames[i]);\n      assertTrue(\"WTF: Backup doesn't exist: \" + p.toString(),\n                 Files.exists(p));\n      runBackupCommand(masterJetty, ReplicationHandler.CMD_DELETE_BACKUP, \"&name=\" +backupNames[i]);\n      backupStatus.waitForBackupDeletionSuccess(backupNames[i], 30);\n      assertFalse(\"backup still exists after deletion: \" + p.toString(),\n                  Files.exists(p));\n    }\n    \n  }\n\n","sourceOld":"  private void testDeleteNamedBackup(String backupNames[]) throws InterruptedException, IOException {\n    String lastTimestamp = null;\n    for (int i = 0; i < 2; i++) {\n      runBackupCommand(masterJetty, ReplicationHandler.CMD_DELETE_BACKUP, \"&name=\" +backupNames[i]);\n      CheckDeleteBackupStatus checkDeleteBackupStatus = new CheckDeleteBackupStatus(backupNames[i], lastTimestamp);\n      while (true) {\n        boolean success = checkDeleteBackupStatus.fetchStatus();\n        if (success) {\n          lastTimestamp = checkDeleteBackupStatus.lastTimestamp;\n          if (i == 0) {\n            Thread.sleep(1000); //make the timestamp change\n          }\n          break;\n        }\n        Thread.sleep(200);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testDeleteNamedBackup(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup#testDeleteNamedBackup(String[]).mjava","sourceNew":"  private void testDeleteNamedBackup(String backupNames[]) throws Exception {\n    final BackupStatusChecker backupStatus\n      = new BackupStatusChecker(leaderClient, \"/\" + DEFAULT_TEST_CORENAME + \"/replication\");\n    for (int i = 0; i < 2; i++) {\n      final Path p = Paths.get(leader.getDataDir(), \"snapshot.\" + backupNames[i]);\n      assertTrue(\"WTF: Backup doesn't exist: \" + p.toString(),\n                 Files.exists(p));\n      runBackupCommand(leaderJetty, ReplicationHandler.CMD_DELETE_BACKUP, \"&name=\" +backupNames[i]);\n      backupStatus.waitForBackupDeletionSuccess(backupNames[i], 30);\n      assertFalse(\"backup still exists after deletion: \" + p.toString(),\n                  Files.exists(p));\n    }\n    \n  }\n\n","sourceOld":"  private void testDeleteNamedBackup(String backupNames[]) throws Exception {\n    final BackupStatusChecker backupStatus\n      = new BackupStatusChecker(masterClient, \"/\" + DEFAULT_TEST_CORENAME + \"/replication\");\n    for (int i = 0; i < 2; i++) {\n      final Path p = Paths.get(master.getDataDir(), \"snapshot.\" + backupNames[i]);\n      assertTrue(\"WTF: Backup doesn't exist: \" + p.toString(),\n                 Files.exists(p));\n      runBackupCommand(masterJetty, ReplicationHandler.CMD_DELETE_BACKUP, \"&name=\" +backupNames[i]);\n      backupStatus.waitForBackupDeletionSuccess(backupNames[i], 30);\n      assertFalse(\"backup still exists after deletion: \" + p.toString(),\n                  Files.exists(p));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["34d359645acebeba5edce0f1186d99aa81bbe546","5b847bb03f0ad90d50073e48e452f3346df87482"],"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["7b13106276bb5ea342253dbf6aae7b675adb38d3"],"4dbfe3d3dc9ac9bda8ee276ce539e571f3125052":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["5b847bb03f0ad90d50073e48e452f3346df87482","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"34d359645acebeba5edce0f1186d99aa81bbe546":["4dbfe3d3dc9ac9bda8ee276ce539e571f3125052"],"5b847bb03f0ad90d50073e48e452f3346df87482":["34d359645acebeba5edce0f1186d99aa81bbe546"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["4dbfe3d3dc9ac9bda8ee276ce539e571f3125052","34d359645acebeba5edce0f1186d99aa81bbe546"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["5b847bb03f0ad90d50073e48e452f3346df87482"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"]},"commit2Childs":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"4dbfe3d3dc9ac9bda8ee276ce539e571f3125052":["34d359645acebeba5edce0f1186d99aa81bbe546","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4dbfe3d3dc9ac9bda8ee276ce539e571f3125052"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"34d359645acebeba5edce0f1186d99aa81bbe546":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","5b847bb03f0ad90d50073e48e452f3346df87482","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"5b847bb03f0ad90d50073e48e452f3346df87482":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}