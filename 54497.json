{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testIntervalRandom().mjava","commits":[{"id":"0c8cfaac638acc80d26d08288440ede37e6539e9","date":1402678000,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testIntervalRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testIntervalRandom() throws Exception {\n    int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      int min = TestUtil.nextInt(random(), 0, 100000);\n      int max = TestUtil.nextInt(random(), min, min+100000);\n      int digits;\n      if (random().nextBoolean()) {\n        digits = 0;\n      } else {\n        String s = Integer.toString(max);\n        digits = TestUtil.nextInt(random(), s.length(), 2*s.length());\n      }\n      StringBuilder b = new StringBuilder();\n      for(int i=0;i<digits;i++) {\n        b.append('0');\n      }\n      String prefix = b.toString();\n\n      LightAutomaton a = BasicOperations.determinize(BasicAutomata.makeIntervalLight(min, max, digits   ));\n      if (random().nextBoolean()) {\n        a = MinimizationOperationsLight.minimize(a);\n      }\n      String mins = Integer.toString(min);\n      String maxs = Integer.toString(max);\n      if (digits > 0) {\n        mins = prefix.substring(mins.length()) + mins;\n        maxs = prefix.substring(maxs.length()) + maxs;\n      }\n      assertTrue(BasicOperations.run(a, mins));\n      assertTrue(BasicOperations.run(a, maxs));\n\n      for(int iter2=0;iter2<100;iter2++) {\n        int x = random().nextInt(2*max);\n        boolean expected = x >= min && x <= max;\n        String sx = Integer.toString(x);\n        if (digits > 0 && sx.length() < digits) {\n          // Left-fill with 0s\n          sx = b.substring(sx.length()) + sx;\n        }\n        assertEquals(expected, BasicOperations.run(a, sx));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testIntervalRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testIntervalRandom().mjava","sourceNew":"  public void testIntervalRandom() throws Exception {\n    int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      int min = TestUtil.nextInt(random(), 0, 100000);\n      int max = TestUtil.nextInt(random(), min, min+100000);\n      int digits;\n      if (random().nextBoolean()) {\n        digits = 0;\n      } else {\n        String s = Integer.toString(max);\n        digits = TestUtil.nextInt(random(), s.length(), 2*s.length());\n      }\n      StringBuilder b = new StringBuilder();\n      for(int i=0;i<digits;i++) {\n        b.append('0');\n      }\n      String prefix = b.toString();\n\n      LightAutomaton a = BasicOperations.determinize(BasicAutomata.makeIntervalLight(min, max, digits));\n      if (random().nextBoolean()) {\n        a = MinimizationOperationsLight.minimize(a);\n      }\n      String mins = Integer.toString(min);\n      String maxs = Integer.toString(max);\n      if (digits > 0) {\n        mins = prefix.substring(mins.length()) + mins;\n        maxs = prefix.substring(maxs.length()) + maxs;\n      }\n      assertTrue(BasicOperations.run(a, mins));\n      assertTrue(BasicOperations.run(a, maxs));\n\n      for(int iter2=0;iter2<100;iter2++) {\n        int x = random().nextInt(2*max);\n        boolean expected = x >= min && x <= max;\n        String sx = Integer.toString(x);\n        if (sx.length() < digits) {\n          // Left-fill with 0s\n          sx = b.substring(sx.length()) + sx;\n        } else if (digits == 0) {\n          // Left-fill with random number of 0s:\n          int numZeros = random().nextInt(10);\n          StringBuilder sb = new StringBuilder();\n          for(int i=0;i<numZeros;i++) {\n            sb.append('0');\n          }\n          sb.append(sx);\n          sx = sb.toString();\n        }\n        assertEquals(expected, BasicOperations.run(a, sx));\n      }\n    }\n  }\n\n","sourceOld":"  public void testIntervalRandom() throws Exception {\n    int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      int min = TestUtil.nextInt(random(), 0, 100000);\n      int max = TestUtil.nextInt(random(), min, min+100000);\n      int digits;\n      if (random().nextBoolean()) {\n        digits = 0;\n      } else {\n        String s = Integer.toString(max);\n        digits = TestUtil.nextInt(random(), s.length(), 2*s.length());\n      }\n      StringBuilder b = new StringBuilder();\n      for(int i=0;i<digits;i++) {\n        b.append('0');\n      }\n      String prefix = b.toString();\n\n      LightAutomaton a = BasicOperations.determinize(BasicAutomata.makeIntervalLight(min, max, digits   ));\n      if (random().nextBoolean()) {\n        a = MinimizationOperationsLight.minimize(a);\n      }\n      String mins = Integer.toString(min);\n      String maxs = Integer.toString(max);\n      if (digits > 0) {\n        mins = prefix.substring(mins.length()) + mins;\n        maxs = prefix.substring(maxs.length()) + maxs;\n      }\n      assertTrue(BasicOperations.run(a, mins));\n      assertTrue(BasicOperations.run(a, maxs));\n\n      for(int iter2=0;iter2<100;iter2++) {\n        int x = random().nextInt(2*max);\n        boolean expected = x >= min && x <= max;\n        String sx = Integer.toString(x);\n        if (digits > 0 && sx.length() < digits) {\n          // Left-fill with 0s\n          sx = b.substring(sx.length()) + sx;\n        }\n        assertEquals(expected, BasicOperations.run(a, sx));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testIntervalRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testIntervalRandom().mjava","sourceNew":"  public void testIntervalRandom() throws Exception {\n    int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      int min = TestUtil.nextInt(random(), 0, 100000);\n      int max = TestUtil.nextInt(random(), min, min+100000);\n      int digits;\n      if (random().nextBoolean()) {\n        digits = 0;\n      } else {\n        String s = Integer.toString(max);\n        digits = TestUtil.nextInt(random(), s.length(), 2*s.length());\n      }\n      StringBuilder b = new StringBuilder();\n      for(int i=0;i<digits;i++) {\n        b.append('0');\n      }\n      String prefix = b.toString();\n\n      Automaton a = Operations.determinize(Automata.makeInterval(min, max, digits));\n      if (random().nextBoolean()) {\n        a = MinimizationOperations.minimize(a);\n      }\n      String mins = Integer.toString(min);\n      String maxs = Integer.toString(max);\n      if (digits > 0) {\n        mins = prefix.substring(mins.length()) + mins;\n        maxs = prefix.substring(maxs.length()) + maxs;\n      }\n      assertTrue(Operations.run(a, mins));\n      assertTrue(Operations.run(a, maxs));\n\n      for(int iter2=0;iter2<100;iter2++) {\n        int x = random().nextInt(2*max);\n        boolean expected = x >= min && x <= max;\n        String sx = Integer.toString(x);\n        if (sx.length() < digits) {\n          // Left-fill with 0s\n          sx = b.substring(sx.length()) + sx;\n        } else if (digits == 0) {\n          // Left-fill with random number of 0s:\n          int numZeros = random().nextInt(10);\n          StringBuilder sb = new StringBuilder();\n          for(int i=0;i<numZeros;i++) {\n            sb.append('0');\n          }\n          sb.append(sx);\n          sx = sb.toString();\n        }\n        assertEquals(expected, Operations.run(a, sx));\n      }\n    }\n  }\n\n","sourceOld":"  public void testIntervalRandom() throws Exception {\n    int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      int min = TestUtil.nextInt(random(), 0, 100000);\n      int max = TestUtil.nextInt(random(), min, min+100000);\n      int digits;\n      if (random().nextBoolean()) {\n        digits = 0;\n      } else {\n        String s = Integer.toString(max);\n        digits = TestUtil.nextInt(random(), s.length(), 2*s.length());\n      }\n      StringBuilder b = new StringBuilder();\n      for(int i=0;i<digits;i++) {\n        b.append('0');\n      }\n      String prefix = b.toString();\n\n      LightAutomaton a = BasicOperations.determinize(BasicAutomata.makeIntervalLight(min, max, digits));\n      if (random().nextBoolean()) {\n        a = MinimizationOperationsLight.minimize(a);\n      }\n      String mins = Integer.toString(min);\n      String maxs = Integer.toString(max);\n      if (digits > 0) {\n        mins = prefix.substring(mins.length()) + mins;\n        maxs = prefix.substring(maxs.length()) + maxs;\n      }\n      assertTrue(BasicOperations.run(a, mins));\n      assertTrue(BasicOperations.run(a, maxs));\n\n      for(int iter2=0;iter2<100;iter2++) {\n        int x = random().nextInt(2*max);\n        boolean expected = x >= min && x <= max;\n        String sx = Integer.toString(x);\n        if (sx.length() < digits) {\n          // Left-fill with 0s\n          sx = b.substring(sx.length()) + sx;\n        } else if (digits == 0) {\n          // Left-fill with random number of 0s:\n          int numZeros = random().nextInt(10);\n          StringBuilder sb = new StringBuilder();\n          for(int i=0;i<numZeros;i++) {\n            sb.append('0');\n          }\n          sb.append(sx);\n          sx = sb.toString();\n        }\n        assertEquals(expected, BasicOperations.run(a, sx));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0c8cfaac638acc80d26d08288440ede37e6539e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"0c8cfaac638acc80d26d08288440ede37e6539e9":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}