{"path":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeDirectory(CacheValue).mjava","commits":[{"id":"aaab905067d767cfe84d5d589c540723680f236e","date":1355885775,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeDirectory(CacheValue).mjava","pathOld":"/dev/null","sourceNew":"  private void closeDirectory(CacheValue cacheValue) {\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        listener.preClose();\n      }\n    }\n    try {\n      log.info(\"Closing directory:\" + cacheValue.path);\n      cacheValue.directory.close();\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error closing directory\", t);\n    }\n    \n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        listener.postClose();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cab31d869ae741ad9e0dcd49b07ef6ce51107a7c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa419b45716f9ae7d885562c4f38a014be0d2c1a","date":1355933977,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeDirectory(CacheValue).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeDirectory(CacheValue).mjava","sourceNew":"  private void closeDirectory(CacheValue cacheValue) {\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing preClose for directory\", t);\n        }\n      }\n    }\n    try {\n      log.info(\"Closing directory:\" + cacheValue.path);\n      cacheValue.directory.close();\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error closing directory\", t);\n    }\n    \n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing postClose for directory\", t);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeDirectory(CacheValue cacheValue) {\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        listener.preClose();\n      }\n    }\n    try {\n      log.info(\"Closing directory:\" + cacheValue.path);\n      cacheValue.directory.close();\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error closing directory\", t);\n    }\n    \n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        listener.postClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeDirectory(CacheValue).mjava","pathOld":"/dev/null","sourceNew":"  private void closeDirectory(CacheValue cacheValue) {\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing preClose for directory\", t);\n        }\n      }\n    }\n    try {\n      log.info(\"Closing directory:\" + cacheValue.path);\n      cacheValue.directory.close();\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error closing directory\", t);\n    }\n    \n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing postClose for directory\", t);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab31d869ae741ad9e0dcd49b07ef6ce51107a7c","date":1362604055,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeDirectory(CacheValue).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeDirectory(CacheValue).mjava","sourceNew":"  private void closeDirectory(CacheValue cacheValue) {\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing preClose for directory\", t);\n        }\n      }\n    }\n    try {\n      log.info(\"Closing directory: \" + cacheValue.path);\n      cacheValue.directory.close();\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error closing directory\", t);\n    }\n    \n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing postClose for directory\", t);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeDirectory(CacheValue cacheValue) {\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing preClose for directory\", t);\n        }\n      }\n    }\n    try {\n      log.info(\"Closing directory:\" + cacheValue.path);\n      cacheValue.directory.close();\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error closing directory\", t);\n    }\n    \n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing postClose for directory\", t);\n        }\n      }\n    }\n  }\n\n","bugFix":["aaab905067d767cfe84d5d589c540723680f236e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4dcfb92697fbd03e488cf9e5155514e3270d0fc3","date":1363541819,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeDirectory(CacheValue).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeDirectory(CacheValue).mjava","sourceNew":"  private void closeDirectory(CacheValue cacheValue) {\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing preClose for directory\", t);\n        }\n      }\n    }\n    try {\n      log.info(\"Closing directory: \" + cacheValue.path);\n      cacheValue.directory.close();\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error closing directory\", t);\n    }\n    \n    if (cacheValue.deleteOnClose) {\n      try {\n        log.info(\"Removing directory: \" + cacheValue.path);\n        removeDirectory(cacheValue);\n      } catch (Throwable t) {\n        SolrException.log(log, \"Error closing directory\", t);\n      }\n    }\n    \n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing postClose for directory\", t);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeDirectory(CacheValue cacheValue) {\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing preClose for directory\", t);\n        }\n      }\n    }\n    try {\n      log.info(\"Closing directory: \" + cacheValue.path);\n      cacheValue.directory.close();\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error closing directory\", t);\n    }\n    \n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing postClose for directory\", t);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2295e2775c39b05b81f566701b1e7e9475128f2","date":1363552877,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeDirectory(CacheValue).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeDirectory(CacheValue).mjava","sourceNew":"  private void closeDirectory(CacheValue cacheValue) {\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing preClose for directory\", t);\n        }\n      }\n    }\n    \n    cacheValue.closeDirectoryCalled = true;\n    \n    if (cacheValue.deleteOnClose) {\n      \n      // see if we are a subpath\n      Collection<CacheValue> values = byPathCache.values();\n      \n      Collection<CacheValue> cacheValues = new ArrayList<CacheValue>();\n      cacheValues.addAll(values);\n      cacheValues.remove(cacheValue);\n      for (CacheValue otherCacheValue : cacheValues) {\n        // if we are a parent path and all our sub children are not already closed,\n        // get a sub path to close us later\n        if (otherCacheValue.path.startsWith(cacheValue.path) && !otherCacheValue.closeDirectoryCalled) {\n          // we let the sub dir remove and close us\n          otherCacheValue.removeEntries.addAll(cacheValue.removeEntries);\n          otherCacheValue.closeEntries.addAll(cacheValue.closeEntries);\n          cacheValue.closeEntries.clear();\n          break;\n        }\n      }\n    }\n    \n    for (CacheValue val : cacheValue.removeEntries) {\n      try {\n        log.info(\"Removing directory: \" + val.path);\n        removeDirectory(val);\n        \n      } catch (Throwable t) {\n        SolrException.log(log, \"Error removing directory\", t);\n      }\n    }\n    \n    for (CacheValue val : cacheValue.closeEntries) {\n      try {\n        log.info(\"Closing directory: \" + val.path);\n        val.directory.close();\n      } catch (Throwable t) {\n        SolrException.log(log, \"Error closing directory\", t);\n      }\n      \n    }\n\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing postClose for directory\", t);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeDirectory(CacheValue cacheValue) {\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing preClose for directory\", t);\n        }\n      }\n    }\n    try {\n      log.info(\"Closing directory: \" + cacheValue.path);\n      cacheValue.directory.close();\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error closing directory\", t);\n    }\n    \n    if (cacheValue.deleteOnClose) {\n      try {\n        log.info(\"Removing directory: \" + cacheValue.path);\n        removeDirectory(cacheValue);\n      } catch (Throwable t) {\n        SolrException.log(log, \"Error closing directory\", t);\n      }\n    }\n    \n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing postClose for directory\", t);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a4780bc0c0c5d86e6998d8e9ae0928ec3016205","date":1363621000,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeDirectory(CacheValue).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeDirectory(CacheValue).mjava","sourceNew":"  private void closeDirectory(CacheValue cacheValue) {\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing preClose for directory\", t);\n        }\n      }\n    }\n    \n    cacheValue.closeDirectoryCalled = true;\n    \n    if (cacheValue.deleteOnClose) {\n      \n      // see if we are a subpath\n      Collection<CacheValue> values = byPathCache.values();\n      \n      Collection<CacheValue> cacheValues = new ArrayList<CacheValue>();\n      cacheValues.addAll(values);\n      cacheValues.remove(cacheValue);\n      for (CacheValue otherCacheValue : cacheValues) {\n        // if we are a parent path and all our sub children are not already closed,\n        // get a sub path to close us later\n        if (otherCacheValue.path.startsWith(cacheValue.path) && !otherCacheValue.closeDirectoryCalled) {\n          // we let the sub dir remove and close us\n          if (!otherCacheValue.deleteAfterCoreClose && cacheValue.deleteAfterCoreClose) {\n            otherCacheValue.deleteAfterCoreClose = true;\n          }\n          otherCacheValue.removeEntries.addAll(cacheValue.removeEntries);\n          otherCacheValue.closeEntries.addAll(cacheValue.closeEntries);\n          cacheValue.closeEntries.clear();\n          break;\n        }\n      }\n    }\n    \n    for (CacheValue val : cacheValue.removeEntries) {\n      if (!val.deleteAfterCoreClose) {\n        try {\n          log.info(\"Removing directory: \" + val.path);\n          removeDirectory(val);\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error removing directory\", t);\n        }\n      } else {\n        removeEntries.add(val);\n      }\n    }\n    \n    for (CacheValue val : cacheValue.closeEntries) {\n      try {\n        log.info(\"Closing directory: \" + val.path);\n        val.directory.close();\n      } catch (Throwable t) {\n        SolrException.log(log, \"Error closing directory\", t);\n      }\n      \n    }\n\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing postClose for directory\", t);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeDirectory(CacheValue cacheValue) {\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing preClose for directory\", t);\n        }\n      }\n    }\n    \n    cacheValue.closeDirectoryCalled = true;\n    \n    if (cacheValue.deleteOnClose) {\n      \n      // see if we are a subpath\n      Collection<CacheValue> values = byPathCache.values();\n      \n      Collection<CacheValue> cacheValues = new ArrayList<CacheValue>();\n      cacheValues.addAll(values);\n      cacheValues.remove(cacheValue);\n      for (CacheValue otherCacheValue : cacheValues) {\n        // if we are a parent path and all our sub children are not already closed,\n        // get a sub path to close us later\n        if (otherCacheValue.path.startsWith(cacheValue.path) && !otherCacheValue.closeDirectoryCalled) {\n          // we let the sub dir remove and close us\n          otherCacheValue.removeEntries.addAll(cacheValue.removeEntries);\n          otherCacheValue.closeEntries.addAll(cacheValue.closeEntries);\n          cacheValue.closeEntries.clear();\n          break;\n        }\n      }\n    }\n    \n    for (CacheValue val : cacheValue.removeEntries) {\n      try {\n        log.info(\"Removing directory: \" + val.path);\n        removeDirectory(val);\n        \n      } catch (Throwable t) {\n        SolrException.log(log, \"Error removing directory\", t);\n      }\n    }\n    \n    for (CacheValue val : cacheValue.closeEntries) {\n      try {\n        log.info(\"Closing directory: \" + val.path);\n        val.directory.close();\n      } catch (Throwable t) {\n        SolrException.log(log, \"Error closing directory\", t);\n      }\n      \n    }\n\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing postClose for directory\", t);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"058801f8673d53a5abac8088204860ec29a40f0d","date":1364178882,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeCacheValue(CacheValue).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeDirectory(CacheValue).mjava","sourceNew":"  // be sure this is called with the this sync lock\n  // returns true if we closed the cacheValue, false if it will be closed later\n  private boolean closeCacheValue(CacheValue cacheValue) {\n    log.info(\"looking to close \" + cacheValue.path + \" \" + cacheValue.closeEntries.toString());\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing preClose for directory\", t);\n        }\n      }\n    }\n    cacheValue.closeCacheValueCalled = true;\n    if (cacheValue.deleteOnClose) {\n      // see if we are a subpath\n      Collection<CacheValue> values = byPathCache.values();\n      \n      Collection<CacheValue> cacheValues = new ArrayList<CacheValue>(values);\n      cacheValues.remove(cacheValue);\n      for (CacheValue otherCacheValue : cacheValues) {\n        // if we are a parent path and a sub path is not already closed, get a sub path to close us later\n        if (isSubPath(cacheValue, otherCacheValue) && !otherCacheValue.closeCacheValueCalled) {\n          // we let the sub dir remove and close us\n          if (!otherCacheValue.deleteAfterCoreClose && cacheValue.deleteAfterCoreClose) {\n            otherCacheValue.deleteAfterCoreClose = true;\n          }\n          otherCacheValue.removeEntries.addAll(cacheValue.removeEntries);\n          otherCacheValue.closeEntries.addAll(cacheValue.closeEntries);\n          cacheValue.closeEntries.clear();\n          cacheValue.removeEntries.clear();\n          return false;\n        }\n      }\n    }\n\n    boolean cl = false;\n    for (CacheValue val : cacheValue.closeEntries) {\n      close(val);\n      if (val == cacheValue) {\n        cl = true;\n      }\n    }\n\n    for (CacheValue val : cacheValue.removeEntries) {\n      if (!val.deleteAfterCoreClose) {\n        log.info(\"Removing directory before core close: \" + val.path);\n        try {\n          removeDirectory(val);\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error removing directory\", t);\n        }\n      } else {\n        removeEntries.add(val);\n      }\n    }\n    \n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing postClose for directory\", t);\n        }\n      }\n    }\n    return cl;\n  }\n\n","sourceOld":"  private void closeDirectory(CacheValue cacheValue) {\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing preClose for directory\", t);\n        }\n      }\n    }\n    \n    cacheValue.closeDirectoryCalled = true;\n    \n    if (cacheValue.deleteOnClose) {\n      \n      // see if we are a subpath\n      Collection<CacheValue> values = byPathCache.values();\n      \n      Collection<CacheValue> cacheValues = new ArrayList<CacheValue>();\n      cacheValues.addAll(values);\n      cacheValues.remove(cacheValue);\n      for (CacheValue otherCacheValue : cacheValues) {\n        // if we are a parent path and all our sub children are not already closed,\n        // get a sub path to close us later\n        if (otherCacheValue.path.startsWith(cacheValue.path) && !otherCacheValue.closeDirectoryCalled) {\n          // we let the sub dir remove and close us\n          if (!otherCacheValue.deleteAfterCoreClose && cacheValue.deleteAfterCoreClose) {\n            otherCacheValue.deleteAfterCoreClose = true;\n          }\n          otherCacheValue.removeEntries.addAll(cacheValue.removeEntries);\n          otherCacheValue.closeEntries.addAll(cacheValue.closeEntries);\n          cacheValue.closeEntries.clear();\n          break;\n        }\n      }\n    }\n    \n    for (CacheValue val : cacheValue.removeEntries) {\n      if (!val.deleteAfterCoreClose) {\n        try {\n          log.info(\"Removing directory: \" + val.path);\n          removeDirectory(val);\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error removing directory\", t);\n        }\n      } else {\n        removeEntries.add(val);\n      }\n    }\n    \n    for (CacheValue val : cacheValue.closeEntries) {\n      try {\n        log.info(\"Closing directory: \" + val.path);\n        val.directory.close();\n      } catch (Throwable t) {\n        SolrException.log(log, \"Error closing directory\", t);\n      }\n      \n    }\n\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing postClose for directory\", t);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fa419b45716f9ae7d885562c4f38a014be0d2c1a"],"aaab905067d767cfe84d5d589c540723680f236e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"058801f8673d53a5abac8088204860ec29a40f0d":["3a4780bc0c0c5d86e6998d8e9ae0928ec3016205"],"3a4780bc0c0c5d86e6998d8e9ae0928ec3016205":["e2295e2775c39b05b81f566701b1e7e9475128f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2295e2775c39b05b81f566701b1e7e9475128f2":["4dcfb92697fbd03e488cf9e5155514e3270d0fc3"],"cab31d869ae741ad9e0dcd49b07ef6ce51107a7c":["fa419b45716f9ae7d885562c4f38a014be0d2c1a"],"4dcfb92697fbd03e488cf9e5155514e3270d0fc3":["cab31d869ae741ad9e0dcd49b07ef6ce51107a7c"],"fa419b45716f9ae7d885562c4f38a014be0d2c1a":["aaab905067d767cfe84d5d589c540723680f236e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["058801f8673d53a5abac8088204860ec29a40f0d"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"aaab905067d767cfe84d5d589c540723680f236e":["fa419b45716f9ae7d885562c4f38a014be0d2c1a"],"058801f8673d53a5abac8088204860ec29a40f0d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a4780bc0c0c5d86e6998d8e9ae0928ec3016205":["058801f8673d53a5abac8088204860ec29a40f0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aaab905067d767cfe84d5d589c540723680f236e"],"e2295e2775c39b05b81f566701b1e7e9475128f2":["3a4780bc0c0c5d86e6998d8e9ae0928ec3016205"],"cab31d869ae741ad9e0dcd49b07ef6ce51107a7c":["4dcfb92697fbd03e488cf9e5155514e3270d0fc3"],"4dcfb92697fbd03e488cf9e5155514e3270d0fc3":["e2295e2775c39b05b81f566701b1e7e9475128f2"],"fa419b45716f9ae7d885562c4f38a014be0d2c1a":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cab31d869ae741ad9e0dcd49b07ef6ce51107a7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}