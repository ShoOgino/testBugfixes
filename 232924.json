{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicLetterTokenizer#isTokenChar(int).mjava","commits":[{"id":"966b079690131e434b39530d82cc413f5aff4cd5","date":1264751025,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicLetterTokenizer#isTokenChar(int).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicLetterTokenizer#isTokenChar(char).mjava","sourceNew":"  /** \n   * Allows for Letter category or NonspacingMark category\n   * @see org.apache.lucene.analysis.LetterTokenizer#isTokenChar(int)\n   */\n  @Override\n  protected boolean isTokenChar(int c) {\n    return super.isTokenChar(c) || Character.getType(c) == Character.NON_SPACING_MARK;\n  }\n\n","sourceOld":"  /** \n   * Allows for Letter category or NonspacingMark category\n   * @see org.apache.lucene.analysis.LetterTokenizer#isTokenChar(char)\n   */\n  @Override\n  protected boolean isTokenChar(char c) {\n    return super.isTokenChar(c) || Character.getType(c) == Character.NON_SPACING_MARK;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicLetterTokenizer#isTokenChar(int).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ar/ArabicLetterTokenizer#isTokenChar(int).mjava","sourceNew":"  /** \n   * Allows for Letter category or NonspacingMark category\n   * @see org.apache.lucene.analysis.LetterTokenizer#isTokenChar(int)\n   */\n  @Override\n  protected boolean isTokenChar(int c) {\n    return super.isTokenChar(c) || Character.getType(c) == Character.NON_SPACING_MARK;\n  }\n\n","sourceOld":"  /** \n   * Allows for Letter category or NonspacingMark category\n   * @see org.apache.lucene.analysis.LetterTokenizer#isTokenChar(int)\n   */\n  @Override\n  protected boolean isTokenChar(int c) {\n    return super.isTokenChar(c) || Character.getType(c) == Character.NON_SPACING_MARK;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"966b079690131e434b39530d82cc413f5aff4cd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["966b079690131e434b39530d82cc413f5aff4cd5"]},"commit2Childs":{"966b079690131e434b39530d82cc413f5aff4cd5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["966b079690131e434b39530d82cc413f5aff4cd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}