{"path":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#eliminateHoles(List[Node],Map[Node,#],Node).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#eliminateHoles(List[Node],Map[Node,#],Node).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#eliminateHoles(List[Node],Map[Node,#],Node).mjava","sourceNew":"  private static final Node eliminateHoles(List<Node> holeList, final Map<Node, ?> holeListPolygons, Node outerNode) {\n    // Sort the hole vertices by x coordinate\n    holeList.sort((Node pNodeA, Node pNodeB) ->\n    {\n      double diff = pNodeA.getX() - pNodeB.getX();\n      if (diff == 0) {\n        diff = pNodeA.getY() - pNodeB.getY();\n        if (diff == 0) {\n          //same hole node\n          double a = Math.min(pNodeA.previous.getY(), pNodeA.next.getY());\n          double b = Math.min(pNodeB.previous.getY(), pNodeB.next.getY());\n          diff = a - b;\n        }\n      }\n      return diff < 0 ? -1 : diff > 0 ? 1 : 0;\n    });\n\n    // Process holes from left to right.\n    for(int i = 0; i < holeList.size(); ++i) {\n      // Eliminate hole triangles from the result set\n      final Node holeNode = holeList.get(i);\n      double holeMinX, holeMaxX, holeMinY, holeMaxY;\n      Object h = holeListPolygons.get(holeNode);\n      if (h instanceof Polygon) {\n        Polygon holePoly = (Polygon)h;\n        holeMinX = holePoly.minLon;\n        holeMaxX = holePoly.maxLon;\n        holeMinY = holePoly.minLat;\n        holeMaxY = holePoly.maxLat;\n      } else {\n        XYPolygon holePoly = (XYPolygon)h;\n        holeMinX = holePoly.minX;\n        holeMaxX = holePoly.maxX;\n        holeMinY = holePoly.minY;\n        holeMaxY = holePoly.maxY;\n      }\n      eliminateHole(holeNode, outerNode, holeMinX, holeMaxX, holeMinY, holeMaxY);\n      // Filter the new polygon.\n      outerNode = filterPoints(outerNode, outerNode.next);\n    }\n    // Return a pointer to the list.\n    return outerNode;\n  }\n\n","sourceOld":"  private static final Node eliminateHoles(List<Node> holeList, final Map<Node, ?> holeListPolygons, Node outerNode) {\n    // Sort the hole vertices by x coordinate\n    holeList.sort((Node pNodeA, Node pNodeB) ->\n    {\n      double diff = pNodeA.getX() - pNodeB.getX();\n      if (diff == 0) {\n        diff = pNodeA.getY() - pNodeB.getY();\n        if (diff == 0) {\n          //same hole node\n          double a = Math.min(pNodeA.previous.getY(), pNodeA.next.getY());\n          double b = Math.min(pNodeB.previous.getY(), pNodeB.next.getY());\n          diff = a - b;\n        }\n      }\n      return diff < 0 ? -1 : diff > 0 ? 1 : 0;\n    });\n\n    // Process holes from left to right.\n    for(int i = 0; i < holeList.size(); ++i) {\n      // Eliminate hole triangles from the result set\n      final Node holeNode = holeList.get(i);\n      double holeMinX, holeMaxX, holeMinY, holeMaxY;\n      Object h = holeListPolygons.get(holeNode);\n      if (h instanceof Polygon) {\n        Polygon holePoly = (Polygon)h;\n        holeMinX = holePoly.minLon;\n        holeMaxX = holePoly.maxLon;\n        holeMinY = holePoly.minLat;\n        holeMaxY = holePoly.maxLat;\n      } else {\n        XYPolygon holePoly = (XYPolygon)h;\n        holeMinX = holePoly.minX;\n        holeMaxX = holePoly.maxX;\n        holeMinY = holePoly.minY;\n        holeMaxY = holePoly.maxY;\n      }\n      eliminateHole(holeNode, outerNode, holeMinX, holeMaxX, holeMinY, holeMaxY);\n      // Filter the new polygon.\n      outerNode = filterPoints(outerNode, outerNode.next);\n    }\n    // Return a pointer to the list.\n    return outerNode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}