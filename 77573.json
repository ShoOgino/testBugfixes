{"path":"src/java/org/apache/lucene/index/ByteSliceReader#readByte().mjava","commits":[{"id":"5a0af3a442be522899177e5e11384a45a6784a3f","date":1205348952,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ByteSliceReader#readByte().mjava","pathOld":"/dev/null","sourceNew":"  public byte readByte() {\n    // Assert that we are not @ EOF\n    assert upto + bufferOffset < endIndex;\n    if (upto == limit)\n      nextSlice();\n    return buffer[upto++];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ByteSliceReader#readByte().mjava","pathOld":"src/java/org/apache/lucene/index/ByteSliceReader#readByte().mjava","sourceNew":"  public byte readByte() {\n    assert !eof();\n    assert upto <= limit;\n    if (upto == limit)\n      nextSlice();\n    return buffer[upto++];\n  }\n\n","sourceOld":"  public byte readByte() {\n    // Assert that we are not @ EOF\n    assert upto + bufferOffset < endIndex;\n    if (upto == limit)\n      nextSlice();\n    return buffer[upto++];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ByteSliceReader#readByte().mjava","pathOld":"src/java/org/apache/lucene/index/ByteSliceReader#readByte().mjava","sourceNew":"  @Override\n  public byte readByte() {\n    assert !eof();\n    assert upto <= limit;\n    if (upto == limit)\n      nextSlice();\n    return buffer[upto++];\n  }\n\n","sourceOld":"  public byte readByte() {\n    assert !eof();\n    assert upto <= limit;\n    if (upto == limit)\n      nextSlice();\n    return buffer[upto++];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ByteSliceReader#readByte().mjava","pathOld":"src/java/org/apache/lucene/index/ByteSliceReader#readByte().mjava","sourceNew":"  @Override\n  public byte readByte() {\n    assert !eof();\n    assert upto <= limit;\n    if (upto == limit)\n      nextSlice();\n    return buffer[upto++];\n  }\n\n","sourceOld":"  @Override\n  public byte readByte() {\n    assert !eof();\n    assert upto <= limit;\n    if (upto == limit)\n      nextSlice();\n    return buffer[upto++];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a9e385641d717e641408d8fbbc62be8fc766357":["5350389bf83287111f7760b9e3db3af8e3648474"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a0af3a442be522899177e5e11384a45a6784a3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5350389bf83287111f7760b9e3db3af8e3648474":["5a0af3a442be522899177e5e11384a45a6784a3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a0af3a442be522899177e5e11384a45a6784a3f"],"5a0af3a442be522899177e5e11384a45a6784a3f":["5350389bf83287111f7760b9e3db3af8e3648474"],"5350389bf83287111f7760b9e3db3af8e3648474":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}