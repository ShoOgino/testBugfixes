{"path":"contrib/spatial/src/java/org/apache/lucene/spatial/geometry/LatLng#arcDistance(LatLng,DistanceUnits).mjava","commits":[{"id":"04a4a94db1eb59c8583adb166acfe686a031bedc","date":1230622637,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/geometry/LatLng#arcDistance(LatLng,DistanceUnits).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calculates the distance between two lat/lng's in miles or meters.\n   * Imported from mq java client.  Variable references changed to match.\n   * \n   * @param ll2\n   *            Second lat,lng position to calculate distance to.\n   * @param lUnits\n   *            Units to calculate distace, defaults to miles\n   * \n   * @return Returns the distance in meters or miles.\n   */\n  public double arcDistance(LatLng ll2, DistanceUnits lUnits) {\n    LatLng ll1 = normalize();\n    ll2 = ll2.normalize();\n\n    double lat1 = ll1.getLat(), lng1 = ll1.getLng();\n    double lat2 = ll2.getLat(), lng2 = ll2.getLng();\n\n    // Check for same position\n    if (lat1 == lat2 && lng1 == lng2)\n      return 0.0;\n\n    // Get the m_dLongitude diffeernce. Don't need to worry about\n    // crossing 180 since cos(x) = cos(-x)\n    double dLon = lng2 - lng1;\n\n    double a = radians(90.0 - lat1);\n    double c = radians(90.0 - lat2);\n    double cosB = (Math.cos(a) * Math.cos(c))\n        + (Math.sin(a) * Math.sin(c) * Math.cos(radians(dLon)));\n\n    double radius = (lUnits == DistanceUnits.MILES) ? 3963.205/* MILERADIUSOFEARTH */\n    : 6378.160187/* KMRADIUSOFEARTH */;\n\n    // Find angle subtended (with some bounds checking) in radians and\n    // multiply by earth radius to find the arc distance\n    if (cosB < -1.0)\n      return 3.14159265358979323846/* PI */* radius;\n    else if (cosB >= 1.0)\n      return 0;\n    else\n      return Math.acos(cosB) * radius;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/geometry/LatLng#arcDistance(LatLng,DistanceUnits).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/geometry/LatLng#arcDistance(LatLng,DistanceUnits).mjava","sourceNew":"  /**\n   * Calculates the distance between two lat/lng's in miles or meters.\n   * Imported from mq java client.  Variable references changed to match.\n   * \n   * @param ll2\n   *            Second lat,lng position to calculate distance to.\n   * @param lUnits\n   *            Units to calculate distance, defaults to miles\n   * \n   * @return Returns the distance in meters or miles.\n   */\n  public double arcDistance(LatLng ll2, DistanceUnits lUnits) {\n    LatLng ll1 = normalize();\n    ll2 = ll2.normalize();\n\n    double lat1 = ll1.getLat(), lng1 = ll1.getLng();\n    double lat2 = ll2.getLat(), lng2 = ll2.getLng();\n\n    // Check for same position\n    if (lat1 == lat2 && lng1 == lng2)\n      return 0.0;\n\n    // Get the m_dLongitude difference. Don't need to worry about\n    // crossing 180 since cos(x) = cos(-x)\n    double dLon = lng2 - lng1;\n\n    double a = radians(90.0 - lat1);\n    double c = radians(90.0 - lat2);\n    double cosB = (Math.cos(a) * Math.cos(c))\n        + (Math.sin(a) * Math.sin(c) * Math.cos(radians(dLon)));\n\n    double radius = (lUnits == DistanceUnits.MILES) ? 3963.205/* MILERADIUSOFEARTH */\n    : 6378.160187/* KMRADIUSOFEARTH */;\n\n    // Find angle subtended (with some bounds checking) in radians and\n    // multiply by earth radius to find the arc distance\n    if (cosB < -1.0)\n      return 3.14159265358979323846/* PI */* radius;\n    else if (cosB >= 1.0)\n      return 0;\n    else\n      return Math.acos(cosB) * radius;\n  }\n\n","sourceOld":"  /**\n   * Calculates the distance between two lat/lng's in miles or meters.\n   * Imported from mq java client.  Variable references changed to match.\n   * \n   * @param ll2\n   *            Second lat,lng position to calculate distance to.\n   * @param lUnits\n   *            Units to calculate distace, defaults to miles\n   * \n   * @return Returns the distance in meters or miles.\n   */\n  public double arcDistance(LatLng ll2, DistanceUnits lUnits) {\n    LatLng ll1 = normalize();\n    ll2 = ll2.normalize();\n\n    double lat1 = ll1.getLat(), lng1 = ll1.getLng();\n    double lat2 = ll2.getLat(), lng2 = ll2.getLng();\n\n    // Check for same position\n    if (lat1 == lat2 && lng1 == lng2)\n      return 0.0;\n\n    // Get the m_dLongitude diffeernce. Don't need to worry about\n    // crossing 180 since cos(x) = cos(-x)\n    double dLon = lng2 - lng1;\n\n    double a = radians(90.0 - lat1);\n    double c = radians(90.0 - lat2);\n    double cosB = (Math.cos(a) * Math.cos(c))\n        + (Math.sin(a) * Math.sin(c) * Math.cos(radians(dLon)));\n\n    double radius = (lUnits == DistanceUnits.MILES) ? 3963.205/* MILERADIUSOFEARTH */\n    : 6378.160187/* KMRADIUSOFEARTH */;\n\n    // Find angle subtended (with some bounds checking) in radians and\n    // multiply by earth radius to find the arc distance\n    if (cosB < -1.0)\n      return 3.14159265358979323846/* PI */* radius;\n    else if (cosB >= 1.0)\n      return 0;\n    else\n      return Math.acos(cosB) * radius;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/LatLng#arcDistance(LatLng,DistanceUnits).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/geometry/LatLng#arcDistance(LatLng,DistanceUnits).mjava","sourceNew":"  /**\n   * Calculates the distance between two lat/lng's in miles or meters.\n   * Imported from mq java client.  Variable references changed to match.\n   * \n   * @param ll2\n   *            Second lat,lng position to calculate distance to.\n   * @param lUnits\n   *            Units to calculate distance, defaults to miles\n   * \n   * @return Returns the distance in meters or miles.\n   */\n  public double arcDistance(LatLng ll2, DistanceUnits lUnits) {\n    LatLng ll1 = normalize();\n    ll2 = ll2.normalize();\n\n    double lat1 = ll1.getLat(), lng1 = ll1.getLng();\n    double lat2 = ll2.getLat(), lng2 = ll2.getLng();\n\n    // Check for same position\n    if (lat1 == lat2 && lng1 == lng2)\n      return 0.0;\n\n    // Get the m_dLongitude difference. Don't need to worry about\n    // crossing 180 since cos(x) = cos(-x)\n    double dLon = lng2 - lng1;\n\n    double a = radians(90.0 - lat1);\n    double c = radians(90.0 - lat2);\n    double cosB = (Math.cos(a) * Math.cos(c))\n        + (Math.sin(a) * Math.sin(c) * Math.cos(radians(dLon)));\n\n    double radius = (lUnits == DistanceUnits.MILES) ? 3963.205/* MILERADIUSOFEARTH */\n    : 6378.160187/* KMRADIUSOFEARTH */;\n\n    // Find angle subtended (with some bounds checking) in radians and\n    // multiply by earth radius to find the arc distance\n    if (cosB < -1.0)\n      return 3.14159265358979323846/* PI */* radius;\n    else if (cosB >= 1.0)\n      return 0;\n    else\n      return Math.acos(cosB) * radius;\n  }\n\n","sourceOld":"  /**\n   * Calculates the distance between two lat/lng's in miles or meters.\n   * Imported from mq java client.  Variable references changed to match.\n   * \n   * @param ll2\n   *            Second lat,lng position to calculate distance to.\n   * @param lUnits\n   *            Units to calculate distance, defaults to miles\n   * \n   * @return Returns the distance in meters or miles.\n   */\n  public double arcDistance(LatLng ll2, DistanceUnits lUnits) {\n    LatLng ll1 = normalize();\n    ll2 = ll2.normalize();\n\n    double lat1 = ll1.getLat(), lng1 = ll1.getLng();\n    double lat2 = ll2.getLat(), lng2 = ll2.getLng();\n\n    // Check for same position\n    if (lat1 == lat2 && lng1 == lng2)\n      return 0.0;\n\n    // Get the m_dLongitude difference. Don't need to worry about\n    // crossing 180 since cos(x) = cos(-x)\n    double dLon = lng2 - lng1;\n\n    double a = radians(90.0 - lat1);\n    double c = radians(90.0 - lat2);\n    double cosB = (Math.cos(a) * Math.cos(c))\n        + (Math.sin(a) * Math.sin(c) * Math.cos(radians(dLon)));\n\n    double radius = (lUnits == DistanceUnits.MILES) ? 3963.205/* MILERADIUSOFEARTH */\n    : 6378.160187/* KMRADIUSOFEARTH */;\n\n    // Find angle subtended (with some bounds checking) in radians and\n    // multiply by earth radius to find the arc distance\n    if (cosB < -1.0)\n      return 3.14159265358979323846/* PI */* radius;\n    else if (cosB >= 1.0)\n      return 0;\n    else\n      return Math.acos(cosB) * radius;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04a4a94db1eb59c8583adb166acfe686a031bedc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["04a4a94db1eb59c8583adb166acfe686a031bedc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["add7d922e63099fbce8f0a1b31216df7ef5067f1"]},"commit2Childs":{"04a4a94db1eb59c8583adb166acfe686a031bedc":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04a4a94db1eb59c8583adb166acfe686a031bedc"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}