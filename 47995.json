{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#incrementToken().mjava","sourceNew":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n        return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If its empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n        return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If its empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#incrementToken().mjava","sourceNew":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n        return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If it's empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n        return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If its empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"22f56bf98bcc4bbd169ab6c3d65b65d9f84d8e57","date":1491925651,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#incrementToken().mjava","sourceNew":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n      return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If it's empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n        return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If it's empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","bugFix":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#incrementToken().mjava","sourceNew":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n      return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If it's empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n        return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If it's empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22f56bf98bcc4bbd169ab6c3d65b65d9f84d8e57":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22f56bf98bcc4bbd169ab6c3d65b65d9f84d8e57"]},"commit2Childs":{"22f56bf98bcc4bbd169ab6c3d65b65d9f84d8e57":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["22f56bf98bcc4bbd169ab6c3d65b65d9f84d8e57","54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}