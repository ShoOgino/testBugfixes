{"path":"lucene/codecs/src/test/org/apache/lucene/codecs/uniformsplit/TestFSTDictionary#testCommonPrefixes().mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/uniformsplit/TestFSTDictionary#testCommonPrefixes().mjava","pathOld":"/dev/null","sourceNew":"  public void testCommonPrefixes() {\n    List<String> vocab = new ArrayList<>();\n    vocab.add(\"aswoon\");\n    vocab.add(\"asyl\");\n    vocab.add(\"asyla\");\n    vocab.add(\"asyllabic\");\n    vocab.add(\"asylum\");\n    vocab.add(\"asylums\");\n    vocab.add(\"asymmetric\");\n    vocab.add(\"asymmetrical\");\n    vocab.add(\"asymmetrically\");\n    vocab.add(\"asymmetries\");\n    vocab.add(\"asymmetry\");\n    vocab.add(\"asymptomatic\");\n    vocab.add(\"asymptomatically\");\n    vocab.add(\"asymptote\");\n    vocab.add(\"asymptotes\");\n    vocab.add(\"asymptotic\");\n    vocab.add(\"asymptotical\");\n    vocab.add(\"asymptotically\");\n    vocab.add(\"asynapses\");\n    vocab.add(\"asynapsis\");\n\n    int[] blockFPs = new int[vocab.size()];\n    for (int i = 0; i < blockFPs.length; i++) {\n      blockFPs[i] = i;\n    }\n    List<BytesRef> blockKeys = vocab.stream().map(BytesRef::new).collect(Collectors.toList());\n    FSTDictionary indexDictionary = createFSTDictionary(blockKeys, blockFPs);\n    IndexDictionary.Browser browser = indexDictionary.browser();\n    for (int i = 0; i < vocab.size(); i++) {\n      assertEquals(blockFPs[i], browser.seekBlock(blockKeys.get(i)));\n    }\n    assertEquals(blockFPs[vocab.size() - 1], browser.seekBlock(new BytesRef(\"zoo\")));\n    assertEquals(-1, browser.seekBlock(new BytesRef(\"A\")));\n    assertEquals(blockFPs[9], browser.seekBlock(new BytesRef(\"asymmetriesz\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f6185d883389450f593fb00103d2e89a0b8336","date":1577705030,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/uniformsplit/TestFSTDictionary#testCommonPrefixes().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/uniformsplit/TestFSTDictionary#testCommonPrefixes().mjava","sourceNew":"  public void testCommonPrefixes() throws Exception {\n    List<String> vocab = new ArrayList<>();\n    vocab.add(\"aswoon\");\n    vocab.add(\"asyl\");\n    vocab.add(\"asyla\");\n    vocab.add(\"asyllabic\");\n    vocab.add(\"asylum\");\n    vocab.add(\"asylums\");\n    vocab.add(\"asymmetric\");\n    vocab.add(\"asymmetrical\");\n    vocab.add(\"asymmetrically\");\n    vocab.add(\"asymmetries\");\n    vocab.add(\"asymmetry\");\n    vocab.add(\"asymptomatic\");\n    vocab.add(\"asymptomatically\");\n    vocab.add(\"asymptote\");\n    vocab.add(\"asymptotes\");\n    vocab.add(\"asymptotic\");\n    vocab.add(\"asymptotical\");\n    vocab.add(\"asymptotically\");\n    vocab.add(\"asynapses\");\n    vocab.add(\"asynapsis\");\n\n    int[] blockFPs = new int[vocab.size()];\n    for (int i = 0; i < blockFPs.length; i++) {\n      blockFPs[i] = i;\n    }\n    List<BytesRef> blockKeys = vocab.stream().map(BytesRef::new).collect(Collectors.toList());\n    FSTDictionary indexDictionary = createFSTDictionary(blockKeys, blockFPs);\n    IndexDictionary.Browser browser = indexDictionary.browser();\n    for (int i = 0; i < vocab.size(); i++) {\n      assertEquals(blockFPs[i], browser.seekBlock(blockKeys.get(i)));\n    }\n    assertEquals(blockFPs[vocab.size() - 1], browser.seekBlock(new BytesRef(\"zoo\")));\n    assertEquals(-1, browser.seekBlock(new BytesRef(\"A\")));\n    assertEquals(blockFPs[9], browser.seekBlock(new BytesRef(\"asymmetriesz\")));\n  }\n\n","sourceOld":"  public void testCommonPrefixes() {\n    List<String> vocab = new ArrayList<>();\n    vocab.add(\"aswoon\");\n    vocab.add(\"asyl\");\n    vocab.add(\"asyla\");\n    vocab.add(\"asyllabic\");\n    vocab.add(\"asylum\");\n    vocab.add(\"asylums\");\n    vocab.add(\"asymmetric\");\n    vocab.add(\"asymmetrical\");\n    vocab.add(\"asymmetrically\");\n    vocab.add(\"asymmetries\");\n    vocab.add(\"asymmetry\");\n    vocab.add(\"asymptomatic\");\n    vocab.add(\"asymptomatically\");\n    vocab.add(\"asymptote\");\n    vocab.add(\"asymptotes\");\n    vocab.add(\"asymptotic\");\n    vocab.add(\"asymptotical\");\n    vocab.add(\"asymptotically\");\n    vocab.add(\"asynapses\");\n    vocab.add(\"asynapsis\");\n\n    int[] blockFPs = new int[vocab.size()];\n    for (int i = 0; i < blockFPs.length; i++) {\n      blockFPs[i] = i;\n    }\n    List<BytesRef> blockKeys = vocab.stream().map(BytesRef::new).collect(Collectors.toList());\n    FSTDictionary indexDictionary = createFSTDictionary(blockKeys, blockFPs);\n    IndexDictionary.Browser browser = indexDictionary.browser();\n    for (int i = 0; i < vocab.size(); i++) {\n      assertEquals(blockFPs[i], browser.seekBlock(blockKeys.get(i)));\n    }\n    assertEquals(blockFPs[vocab.size() - 1], browser.seekBlock(new BytesRef(\"zoo\")));\n    assertEquals(-1, browser.seekBlock(new BytesRef(\"A\")));\n    assertEquals(blockFPs[9], browser.seekBlock(new BytesRef(\"asymmetriesz\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e478fa10594a2ef9d1ddf7d195020300453c4e","date":1577783287,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/uniformsplit/TestFSTDictionary#testCommonPrefixes().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/uniformsplit/TestFSTDictionary#testCommonPrefixes().mjava","sourceNew":"  public void testCommonPrefixes() throws Exception {\n    List<String> vocab = new ArrayList<>();\n    vocab.add(\"aswoon\");\n    vocab.add(\"asyl\");\n    vocab.add(\"asyla\");\n    vocab.add(\"asyllabic\");\n    vocab.add(\"asylum\");\n    vocab.add(\"asylums\");\n    vocab.add(\"asymmetric\");\n    vocab.add(\"asymmetrical\");\n    vocab.add(\"asymmetrically\");\n    vocab.add(\"asymmetries\");\n    vocab.add(\"asymmetry\");\n    vocab.add(\"asymptomatic\");\n    vocab.add(\"asymptomatically\");\n    vocab.add(\"asymptote\");\n    vocab.add(\"asymptotes\");\n    vocab.add(\"asymptotic\");\n    vocab.add(\"asymptotical\");\n    vocab.add(\"asymptotically\");\n    vocab.add(\"asynapses\");\n    vocab.add(\"asynapsis\");\n\n    int[] blockFPs = new int[vocab.size()];\n    for (int i = 0; i < blockFPs.length; i++) {\n      blockFPs[i] = i;\n    }\n    List<BytesRef> blockKeys = vocab.stream().map(BytesRef::new).collect(Collectors.toList());\n    FSTDictionary indexDictionary = createFSTDictionary(blockKeys, blockFPs);\n    IndexDictionary.Browser browser = indexDictionary.browser();\n    for (int i = 0; i < vocab.size(); i++) {\n      assertEquals(blockFPs[i], browser.seekBlock(blockKeys.get(i)));\n    }\n    assertEquals(blockFPs[vocab.size() - 1], browser.seekBlock(new BytesRef(\"zoo\")));\n    assertEquals(-1, browser.seekBlock(new BytesRef(\"A\")));\n    assertEquals(blockFPs[9], browser.seekBlock(new BytesRef(\"asymmetriesz\")));\n  }\n\n","sourceOld":"  public void testCommonPrefixes() {\n    List<String> vocab = new ArrayList<>();\n    vocab.add(\"aswoon\");\n    vocab.add(\"asyl\");\n    vocab.add(\"asyla\");\n    vocab.add(\"asyllabic\");\n    vocab.add(\"asylum\");\n    vocab.add(\"asylums\");\n    vocab.add(\"asymmetric\");\n    vocab.add(\"asymmetrical\");\n    vocab.add(\"asymmetrically\");\n    vocab.add(\"asymmetries\");\n    vocab.add(\"asymmetry\");\n    vocab.add(\"asymptomatic\");\n    vocab.add(\"asymptomatically\");\n    vocab.add(\"asymptote\");\n    vocab.add(\"asymptotes\");\n    vocab.add(\"asymptotic\");\n    vocab.add(\"asymptotical\");\n    vocab.add(\"asymptotically\");\n    vocab.add(\"asynapses\");\n    vocab.add(\"asynapsis\");\n\n    int[] blockFPs = new int[vocab.size()];\n    for (int i = 0; i < blockFPs.length; i++) {\n      blockFPs[i] = i;\n    }\n    List<BytesRef> blockKeys = vocab.stream().map(BytesRef::new).collect(Collectors.toList());\n    FSTDictionary indexDictionary = createFSTDictionary(blockKeys, blockFPs);\n    IndexDictionary.Browser browser = indexDictionary.browser();\n    for (int i = 0; i < vocab.size(); i++) {\n      assertEquals(blockFPs[i], browser.seekBlock(blockKeys.get(i)));\n    }\n    assertEquals(blockFPs[vocab.size() - 1], browser.seekBlock(new BytesRef(\"zoo\")));\n    assertEquals(-1, browser.seekBlock(new BytesRef(\"A\")));\n    assertEquals(blockFPs[9], browser.seekBlock(new BytesRef(\"asymmetriesz\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42f6185d883389450f593fb00103d2e89a0b8336":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62e478fa10594a2ef9d1ddf7d195020300453c4e":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","42f6185d883389450f593fb00103d2e89a0b8336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42f6185d883389450f593fb00103d2e89a0b8336"]},"commit2Childs":{"42f6185d883389450f593fb00103d2e89a0b8336":["62e478fa10594a2ef9d1ddf7d195020300453c4e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["42f6185d883389450f593fb00103d2e89a0b8336","62e478fa10594a2ef9d1ddf7d195020300453c4e"],"62e478fa10594a2ef9d1ddf7d195020300453c4e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e478fa10594a2ef9d1ddf7d195020300453c4e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}