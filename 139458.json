{"path":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField]).mjava","commits":[{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ManagedIndexSchema addFields(Collection<SchemaField> newFields) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      while ( ! success) { // optimistic concurrency\n        // even though fields is volatile, we need to synchronize to avoid two addFields\n        // happening concurrently (and ending up missing one of them)\n        synchronized (getSchemaUpdateLock()) {\n          newSchema = shallowCopy(true);\n          \n          for (SchemaField newField : newFields) {\n            if (null != newSchema.getFieldOrNull(newField.getName())) {\n              String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n              throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n            }\n            newSchema.fields.put(newField.getName(), newField);\n\n            if (null != newField.getDefaultValue()) {\n              log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n              newSchema.fieldsWithDefaultValue.add(newField);\n            }\n            if (newField.isRequired()) {\n              log.debug(\"{} is required in this schema\", newField.getName());\n              newSchema.requiredFields.add(newField);\n            }\n          }\n          // Run the callbacks on SchemaAware now that everything else is done\n          for (SchemaAware aware : newSchema.schemaAware) {\n            aware.inform(newSchema);\n          }\n          newSchema.refreshAnalyzers();\n          success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n          if (success) {\n            log.debug(\"Added field(s): {}\", newFields);\n          }\n        }\n        // release the lock between tries to allow the schema reader to update the schema & schemaZkVersion\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3edda347939cc6859dbf4287e84f3e8e4bb939","date":1372696449,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema addFields(Collection<SchemaField> newFields) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      while ( ! success) { // optimistic concurrency\n        // even though fields is volatile, we need to synchronize to avoid two addFields\n        // happening concurrently (and ending up missing one of them)\n        synchronized (getSchemaUpdateLock()) {\n          newSchema = shallowCopy(true);\n          \n          for (SchemaField newField : newFields) {\n            if (null != newSchema.getFieldOrNull(newField.getName())) {\n              String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n              throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n            }\n            newSchema.fields.put(newField.getName(), newField);\n\n            if (null != newField.getDefaultValue()) {\n              log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n              newSchema.fieldsWithDefaultValue.add(newField);\n            }\n            if (newField.isRequired()) {\n              log.debug(\"{} is required in this schema\", newField.getName());\n              newSchema.requiredFields.add(newField);\n            }\n          }\n          // Run the callbacks on SchemaAware now that everything else is done\n          for (SchemaAware aware : newSchema.schemaAware) {\n            aware.inform(newSchema);\n          }\n          newSchema.refreshAnalyzers();\n          success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n          if (success) {\n            log.debug(\"Added field(s): {}\", newFields);\n          }\n        }\n        // release the lock between tries to allow the schema reader to update the schema & schemaZkVersion\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema addFields(Collection<SchemaField> newFields) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      while ( ! success) { // optimistic concurrency\n        // even though fields is volatile, we need to synchronize to avoid two addFields\n        // happening concurrently (and ending up missing one of them)\n        synchronized (getSchemaUpdateLock()) {\n          newSchema = shallowCopy(true);\n          \n          for (SchemaField newField : newFields) {\n            if (null != newSchema.getFieldOrNull(newField.getName())) {\n              String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n              throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n            }\n            newSchema.fields.put(newField.getName(), newField);\n\n            if (null != newField.getDefaultValue()) {\n              log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n              newSchema.fieldsWithDefaultValue.add(newField);\n            }\n            if (newField.isRequired()) {\n              log.debug(\"{} is required in this schema\", newField.getName());\n              newSchema.requiredFields.add(newField);\n            }\n          }\n          // Run the callbacks on SchemaAware now that everything else is done\n          for (SchemaAware aware : newSchema.schemaAware) {\n            aware.inform(newSchema);\n          }\n          newSchema.refreshAnalyzers();\n          success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n          if (success) {\n            log.debug(\"Added field(s): {}\", newFields);\n          }\n        }\n        // release the lock between tries to allow the schema reader to update the schema & schemaZkVersion\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"577e41641d2fc8a834d2709dc76cc424b2936e19","date":1373292023,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField]).mjava","sourceNew":"  @Override\n  public IndexSchema addFields(Collection<SchemaField> newFields) {\n    return addFields(newFields, Collections.<String, Collection<String>>emptyMap());\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema addFields(Collection<SchemaField> newFields) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      while ( ! success) { // optimistic concurrency\n        // even though fields is volatile, we need to synchronize to avoid two addFields\n        // happening concurrently (and ending up missing one of them)\n        synchronized (getSchemaUpdateLock()) {\n          newSchema = shallowCopy(true);\n          \n          for (SchemaField newField : newFields) {\n            if (null != newSchema.getFieldOrNull(newField.getName())) {\n              String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n              throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n            }\n            newSchema.fields.put(newField.getName(), newField);\n\n            if (null != newField.getDefaultValue()) {\n              log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n              newSchema.fieldsWithDefaultValue.add(newField);\n            }\n            if (newField.isRequired()) {\n              log.debug(\"{} is required in this schema\", newField.getName());\n              newSchema.requiredFields.add(newField);\n            }\n          }\n          // Run the callbacks on SchemaAware now that everything else is done\n          for (SchemaAware aware : newSchema.schemaAware) {\n            aware.inform(newSchema);\n          }\n          newSchema.refreshAnalyzers();\n          success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n          if (success) {\n            log.debug(\"Added field(s): {}\", newFields);\n          }\n        }\n        // release the lock between tries to allow the schema reader to update the schema & schemaZkVersion\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01257aab3074127b72c3b53a508f396bb968019c","date":1373336679,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema addFields(Collection<SchemaField> newFields) {\n    return addFields(newFields, Collections.<String, Collection<String>>emptyMap());\n  }\n\n","sourceOld":"  @Override\n  public IndexSchema addFields(Collection<SchemaField> newFields) {\n    return addFields(newFields, Collections.<String, Collection<String>>emptyMap());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema addFields(Collection<SchemaField> newFields) {\n    return addFields(newFields, Collections.<String, Collection<String>>emptyMap());\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema addFields(Collection<SchemaField> newFields) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      while ( ! success) { // optimistic concurrency\n        // even though fields is volatile, we need to synchronize to avoid two addFields\n        // happening concurrently (and ending up missing one of them)\n        synchronized (getSchemaUpdateLock()) {\n          newSchema = shallowCopy(true);\n          \n          for (SchemaField newField : newFields) {\n            if (null != newSchema.getFieldOrNull(newField.getName())) {\n              String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n              throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n            }\n            newSchema.fields.put(newField.getName(), newField);\n\n            if (null != newField.getDefaultValue()) {\n              log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n              newSchema.fieldsWithDefaultValue.add(newField);\n            }\n            if (newField.isRequired()) {\n              log.debug(\"{} is required in this schema\", newField.getName());\n              newSchema.requiredFields.add(newField);\n            }\n          }\n          // Run the callbacks on SchemaAware now that everything else is done\n          for (SchemaAware aware : newSchema.schemaAware) {\n            aware.inform(newSchema);\n          }\n          newSchema.refreshAnalyzers();\n          success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n          if (success) {\n            log.debug(\"Added field(s): {}\", newFields);\n          }\n        }\n        // release the lock between tries to allow the schema reader to update the schema & schemaZkVersion\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a54d9ede1b7f2f026639186eb07f3f314d87d9a","date":1412176848,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public ManagedIndexSchema addFields(Collection<SchemaField> newFields) {\n    return addFields(newFields, Collections.<String, Collection<String>>emptyMap());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addFields(Collection[SchemaField]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public ManagedIndexSchema addFields(Collection<SchemaField> newFields) {\n    return addFields(newFields, Collections.<String, Collection<String>>emptyMap());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"577e41641d2fc8a834d2709dc76cc424b2936e19":["fe3edda347939cc6859dbf4287e84f3e8e4bb939"],"01257aab3074127b72c3b53a508f396bb968019c":["577e41641d2fc8a834d2709dc76cc424b2936e19"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["08970e5b8411182a29412c177eff67ec1110095b","01257aab3074127b72c3b53a508f396bb968019c"],"fe3edda347939cc6859dbf4287e84f3e8e4bb939":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["01257aab3074127b72c3b53a508f396bb968019c"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["01257aab3074127b72c3b53a508f396bb968019c","4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"08970e5b8411182a29412c177eff67ec1110095b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"577e41641d2fc8a834d2709dc76cc424b2936e19":["01257aab3074127b72c3b53a508f396bb968019c"],"01257aab3074127b72c3b53a508f396bb968019c":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4a54d9ede1b7f2f026639186eb07f3f314d87d9a","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"fe3edda347939cc6859dbf4287e84f3e8e4bb939":["577e41641d2fc8a834d2709dc76cc424b2936e19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08970e5b8411182a29412c177eff67ec1110095b"],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"08970e5b8411182a29412c177eff67ec1110095b":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fe3edda347939cc6859dbf4287e84f3e8e4bb939"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}