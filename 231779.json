{"path":"src/java/org/apache/lucene/search/FieldValueHitQueue.MultiComparatorsFieldValueHitQueue#lessThan(Entry,Entry).mjava","commits":[{"id":"20ff1ff2aa6f91149e9cd75f65a56fbdda5266ce","date":1255993146,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldValueHitQueue.MultiComparatorsFieldValueHitQueue#lessThan(Entry,Entry).mjava","pathOld":"src/java/org/apache/lucene/search/FieldValueHitQueue.MultiComparatorsFieldValueHitQueue#lessThan(Object,Object).mjava","sourceNew":"    protected boolean lessThan(final Entry hitA, final Entry hitB) {\n\n      assert hitA != hitB;\n      assert hitA.slot != hitB.slot;\n\n      int numComparators = comparators.length;\n      for (int i = 0; i < numComparators; ++i) {\n        final int c = reverseMul[i] * comparators[i].compare(hitA.slot, hitB.slot);\n        if (c != 0) {\n          // Short circuit\n          return c > 0;\n        }\n      }\n\n      // avoid random sort order that could lead to duplicates (bug #31241):\n      return hitA.docID > hitB.docID;\n    }\n\n","sourceOld":"    protected boolean lessThan(final Object a, final Object b) {\n      final Entry hitA = (Entry) a;\n      final Entry hitB = (Entry) b;\n\n      assert hitA != hitB;\n      assert hitA.slot != hitB.slot;\n\n      int numComparators = comparators.length;\n      for (int i = 0; i < numComparators; ++i) {\n        final int c = reverseMul[i] * comparators[i].compare(hitA.slot, hitB.slot);\n        if (c != 0) {\n          // Short circuit\n          return c > 0;\n        }\n      }\n\n      // avoid random sort order that could lead to duplicates (bug #31241):\n      return hitA.docID > hitB.docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldValueHitQueue.MultiComparatorsFieldValueHitQueue#lessThan(Entry,Entry).mjava","pathOld":"src/java/org/apache/lucene/search/FieldValueHitQueue.MultiComparatorsFieldValueHitQueue#lessThan(Entry,Entry).mjava","sourceNew":"    @Override\n    protected boolean lessThan(final Entry hitA, final Entry hitB) {\n\n      assert hitA != hitB;\n      assert hitA.slot != hitB.slot;\n\n      int numComparators = comparators.length;\n      for (int i = 0; i < numComparators; ++i) {\n        final int c = reverseMul[i] * comparators[i].compare(hitA.slot, hitB.slot);\n        if (c != 0) {\n          // Short circuit\n          return c > 0;\n        }\n      }\n\n      // avoid random sort order that could lead to duplicates (bug #31241):\n      return hitA.docID > hitB.docID;\n    }\n\n","sourceOld":"    protected boolean lessThan(final Entry hitA, final Entry hitB) {\n\n      assert hitA != hitB;\n      assert hitA.slot != hitB.slot;\n\n      int numComparators = comparators.length;\n      for (int i = 0; i < numComparators; ++i) {\n        final int c = reverseMul[i] * comparators[i].compare(hitA.slot, hitB.slot);\n        if (c != 0) {\n          // Short circuit\n          return c > 0;\n        }\n      }\n\n      // avoid random sort order that could lead to duplicates (bug #31241):\n      return hitA.docID > hitB.docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c8ed50c3dc8a2400a303593e8ce6616be9d8429","date":1257976685,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldValueHitQueue.MultiComparatorsFieldValueHitQueue#lessThan(Entry,Entry).mjava","pathOld":"src/java/org/apache/lucene/search/FieldValueHitQueue.MultiComparatorsFieldValueHitQueue#lessThan(Entry,Entry).mjava","sourceNew":"    @Override\n    protected boolean lessThan(final Entry hitA, final Entry hitB) {\n\n      assert hitA != hitB;\n      assert hitA.slot != hitB.slot;\n\n      int numComparators = comparators.length;\n      for (int i = 0; i < numComparators; ++i) {\n        final int c = reverseMul[i] * comparators[i].compare(hitA.slot, hitB.slot);\n        if (c != 0) {\n          // Short circuit\n          return c > 0;\n        }\n      }\n\n      // avoid random sort order that could lead to duplicates (bug #31241):\n      return hitA.doc > hitB.doc;\n    }\n\n","sourceOld":"    @Override\n    protected boolean lessThan(final Entry hitA, final Entry hitB) {\n\n      assert hitA != hitB;\n      assert hitA.slot != hitB.slot;\n\n      int numComparators = comparators.length;\n      for (int i = 0; i < numComparators; ++i) {\n        final int c = reverseMul[i] * comparators[i].compare(hitA.slot, hitB.slot);\n        if (c != 0) {\n          // Short circuit\n          return c > 0;\n        }\n      }\n\n      // avoid random sort order that could lead to duplicates (bug #31241):\n      return hitA.docID > hitB.docID;\n    }\n\n","bugFix":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldValueHitQueue.MultiComparatorsFieldValueHitQueue#lessThan(Entry,Entry).mjava","pathOld":"src/java/org/apache/lucene/search/FieldValueHitQueue.MultiComparatorsFieldValueHitQueue#lessThan(Entry,Entry).mjava","sourceNew":"    @Override\n    protected boolean lessThan(final Entry hitA, final Entry hitB) {\n\n      assert hitA != hitB;\n      assert hitA.slot != hitB.slot;\n\n      int numComparators = comparators.length;\n      for (int i = 0; i < numComparators; ++i) {\n        final int c = reverseMul[i] * comparators[i].compare(hitA.slot, hitB.slot);\n        if (c != 0) {\n          // Short circuit\n          return c > 0;\n        }\n      }\n\n      // avoid random sort order that could lead to duplicates (bug #31241):\n      return hitA.doc > hitB.doc;\n    }\n\n","sourceOld":"    @Override\n    protected boolean lessThan(final Entry hitA, final Entry hitB) {\n\n      assert hitA != hitB;\n      assert hitA.slot != hitB.slot;\n\n      int numComparators = comparators.length;\n      for (int i = 0; i < numComparators; ++i) {\n        final int c = reverseMul[i] * comparators[i].compare(hitA.slot, hitB.slot);\n        if (c != 0) {\n          // Short circuit\n          return c > 0;\n        }\n      }\n\n      // avoid random sort order that could lead to duplicates (bug #31241):\n      return hitA.doc > hitB.doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c8ed50c3dc8a2400a303593e8ce6616be9d8429":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["20ff1ff2aa6f91149e9cd75f65a56fbdda5266ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20ff1ff2aa6f91149e9cd75f65a56fbdda5266ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1c8ed50c3dc8a2400a303593e8ce6616be9d8429"]},"commit2Childs":{"1c8ed50c3dc8a2400a303593e8ce6616be9d8429":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8a9e385641d717e641408d8fbbc62be8fc766357":["1c8ed50c3dc8a2400a303593e8ce6616be9d8429"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20ff1ff2aa6f91149e9cd75f65a56fbdda5266ce"],"20ff1ff2aa6f91149e9cd75f65a56fbdda5266ce":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}