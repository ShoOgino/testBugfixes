{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#init(int).mjava","commits":[{"id":"d960f1bec0365fa24a5d945b09511e4448ff2c6c","date":1340258737,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#init(int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/BaseRecursivePrefixTreeStrategyTestCase#setUp().mjava","sourceNew":"  //Tests should call this first.\n  private void init(int maxLength) {\n    this.maxLength = maxLength;\n    this.ctx = SimpleSpatialContext.GEO_KM;\n    this.strategy = new RecursivePrefixTreeStrategy(new GeohashPrefixTree(\n        ctx, maxLength ));\n    this.fieldInfo = new SimpleSpatialFieldInfo( getClass().getSimpleName() );\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    maxLength = GeohashPrefixTree.getMaxLevelsPossible();\n    // SimpleIO\n    this.ctx = getSpatialContext();\n    this.strategy = new RecursivePrefixTreeStrategy(new GeohashPrefixTree(\n        ctx, maxLength ));\n    this.fieldInfo = new SimpleSpatialFieldInfo( getClass().getSimpleName() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0415a016b37e58a017fed0a91234f733ab359971","date":1341458183,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#init(int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#init(int).mjava","sourceNew":"  //Tests should call this first.\n  private void init(int maxLength) {\n    this.maxLength = maxLength;\n    this.ctx = SimpleSpatialContext.GEO_KM;\n    GeohashPrefixTree grid = new GeohashPrefixTree(ctx, maxLength);\n    this.strategy = new RecursivePrefixTreeStrategy(grid, getClass().getSimpleName());\n  }\n\n","sourceOld":"  //Tests should call this first.\n  private void init(int maxLength) {\n    this.maxLength = maxLength;\n    this.ctx = SimpleSpatialContext.GEO_KM;\n    this.strategy = new RecursivePrefixTreeStrategy(new GeohashPrefixTree(\n        ctx, maxLength ));\n    this.fieldInfo = new SimpleSpatialFieldInfo( getClass().getSimpleName() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#init(int).mjava","pathOld":"/dev/null","sourceNew":"  //Tests should call this first.\n  private void init(int maxLength) {\n    this.maxLength = maxLength;\n    this.ctx = SimpleSpatialContext.GEO_KM;\n    GeohashPrefixTree grid = new GeohashPrefixTree(ctx, maxLength);\n    this.strategy = new RecursivePrefixTreeStrategy(grid, getClass().getSimpleName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da956410d7a790f567af4e7e94584fb0930212f2","date":1346859431,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#init(int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#init(int).mjava","sourceNew":"  //Tests should call this first.\n  private void init(int maxLength) {\n    this.maxLength = maxLength;\n    this.ctx = SpatialContext.GEO;\n    GeohashPrefixTree grid = new GeohashPrefixTree(ctx, maxLength);\n    this.strategy = new RecursivePrefixTreeStrategy(grid, getClass().getSimpleName());\n  }\n\n","sourceOld":"  //Tests should call this first.\n  private void init(int maxLength) {\n    this.maxLength = maxLength;\n    this.ctx = SimpleSpatialContext.GEO_KM;\n    GeohashPrefixTree grid = new GeohashPrefixTree(ctx, maxLength);\n    this.strategy = new RecursivePrefixTreeStrategy(grid, getClass().getSimpleName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#init(int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#init(int).mjava","sourceNew":"  //Tests should call this first.\n  private void init(int maxLength) {\n    this.maxLength = maxLength;\n    this.ctx = SpatialContext.GEO;\n    GeohashPrefixTree grid = new GeohashPrefixTree(ctx, maxLength);\n    this.strategy = new RecursivePrefixTreeStrategy(grid, getClass().getSimpleName());\n  }\n\n","sourceOld":"  //Tests should call this first.\n  private void init(int maxLength) {\n    this.maxLength = maxLength;\n    this.ctx = SpatialContext.GEO;\n    GeohashPrefixTree grid = new GeohashPrefixTree(ctx, maxLength);\n    this.strategy = new RecursivePrefixTreeStrategy(grid, getClass().getSimpleName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#init(int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#init(int).mjava","sourceNew":"  //Tests should call this first.\n  private void init(int maxLength) {\n    this.maxLength = maxLength;\n    this.ctx = SpatialContext.GEO;\n    GeohashPrefixTree grid = new GeohashPrefixTree(ctx, maxLength);\n    this.strategy = new RecursivePrefixTreeStrategy(grid, getClass().getSimpleName());\n  }\n\n","sourceOld":"  //Tests should call this first.\n  private void init(int maxLength) {\n    this.maxLength = maxLength;\n    this.ctx = SpatialContext.GEO;\n    GeohashPrefixTree grid = new GeohashPrefixTree(ctx, maxLength);\n    this.strategy = new RecursivePrefixTreeStrategy(grid, getClass().getSimpleName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0415a016b37e58a017fed0a91234f733ab359971":["d960f1bec0365fa24a5d945b09511e4448ff2c6c"],"af2638813028b254a88b418ebeafb541afb49653":["da956410d7a790f567af4e7e94584fb0930212f2","112d77ac8d3e10a362516ad834c9a11d35c94234"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0415a016b37e58a017fed0a91234f733ab359971"],"da956410d7a790f567af4e7e94584fb0930212f2":["0415a016b37e58a017fed0a91234f733ab359971"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["da956410d7a790f567af4e7e94584fb0930212f2"],"d960f1bec0365fa24a5d945b09511e4448ff2c6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"0415a016b37e58a017fed0a91234f733ab359971":["fe33227f6805edab2036cbb80645cc4e2d1fa424","da956410d7a790f567af4e7e94584fb0930212f2"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"da956410d7a790f567af4e7e94584fb0930212f2":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe33227f6805edab2036cbb80645cc4e2d1fa424","d960f1bec0365fa24a5d945b09511e4448ff2c6c"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"d960f1bec0365fa24a5d945b09511e4448ff2c6c":["0415a016b37e58a017fed0a91234f733ab359971"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}