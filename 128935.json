{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":"  @Override\n  public TopFieldDocs search(Weight weight, Filter filter,\n      final int nDocs, Sort sort) throws IOException {\n    return search(weight, filter, nDocs, sort, true);\n  }\n\n","sourceOld":"  @Override\n  public TopFieldDocs search(Weight weight, Filter filter,\n      final int nDocs, Sort sort) throws IOException {\n    return search(weight, filter, nDocs, sort, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":"  /** Expert: Low-level search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   *\n   * <p>Applications should usually call {@link\n   * Searcher#search(Query,Filter,int,Sort)} instead.\n   * \n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter,\n      final int nDocs, Sort sort) throws IOException {\n    return search(weight, filter, nDocs, sort, true);\n  }\n\n","sourceOld":"  @Override\n  public TopFieldDocs search(Weight weight, Filter filter,\n      final int nDocs, Sort sort) throws IOException {\n    return search(weight, filter, nDocs, sort, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a1aa37d6135cf6c605c23e4ff9becf07f6049c7","date":1294253125,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":"  /** Expert: Low-level search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   *\n   * <p>Applications should usually call {@link\n   * IndexSearcher#search(Query,Filter,int,Sort)} instead.\n   * \n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter,\n      final int nDocs, Sort sort) throws IOException {\n    return search(weight, filter, nDocs, sort, true);\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   *\n   * <p>Applications should usually call {@link\n   * Searcher#search(Query,Filter,int,Sort)} instead.\n   * \n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter,\n      final int nDocs, Sort sort) throws IOException {\n    return search(weight, filter, nDocs, sort, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":"  /** Expert: Low-level search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   *\n   * <p>Applications should usually call {@link\n   * Searcher#search(Query,Filter,int,Sort)} instead.\n   * \n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter,\n      final int nDocs, Sort sort) throws IOException {\n    return search(weight, filter, nDocs, sort, true);\n  }\n\n","sourceOld":"  @Override\n  public TopFieldDocs search(Weight weight, Filter filter,\n      final int nDocs, Sort sort) throws IOException {\n    return search(weight, filter, nDocs, sort, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":"  /** Expert: Low-level search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   *\n   * <p>Applications should usually call {@link\n   * IndexSearcher#search(Query,Filter,int,Sort)} instead.\n   * \n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter,\n      final int nDocs, Sort sort) throws IOException {\n    return search(weight, filter, nDocs, sort, true);\n  }\n\n","sourceOld":"  @Override\n  public TopFieldDocs search(Weight weight, Filter filter,\n      final int nDocs, Sort sort) throws IOException {\n    return search(weight, filter, nDocs, sort, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":"  /** Expert: Low-level search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   *\n   * <p>Applications should usually call {@link\n   * IndexSearcher#search(Query,Filter,int,Sort)} instead.\n   * \n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter,\n      final int nDocs, Sort sort) throws IOException {\n    return search(weight, filter, nDocs, sort, true);\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   *\n   * <p>Applications should usually call {@link\n   * Searcher#search(Query,Filter,int,Sort)} instead.\n   * \n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter,\n      final int nDocs, Sort sort) throws IOException {\n    return search(weight, filter, nDocs, sort, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,int,Sort).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":"  /** Expert: Low-level search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code> and sorting the hits\n   * by the criteria in <code>sort</code>.\n   *\n   * <p>Applications should usually call {@link\n   * IndexSearcher#search(Query,Filter,int,Sort)} instead.\n   * \n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopFieldDocs search(Weight weight,\n      final int nDocs, Sort sort) throws IOException {\n    return search(weight, nDocs, sort, true);\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.\n   *\n   * <p>Applications should usually call {@link\n   * IndexSearcher#search(Query,Filter,int,Sort)} instead.\n   * \n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopFieldDocs search(Weight weight, Filter filter,\n      final int nDocs, Sort sort) throws IOException {\n    return search(weight, filter, nDocs, sort, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"6620df8541b174097b1133a4fc370adb2e570524":["8a1aa37d6135cf6c605c23e4ff9becf07f6049c7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","8a1aa37d6135cf6c605c23e4ff9becf07f6049c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a1aa37d6135cf6c605c23e4ff9becf07f6049c7":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","8a1aa37d6135cf6c605c23e4ff9becf07f6049c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6620df8541b174097b1133a4fc370adb2e570524"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"6620df8541b174097b1133a4fc370adb2e570524":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","8a1aa37d6135cf6c605c23e4ff9becf07f6049c7"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8a1aa37d6135cf6c605c23e4ff9becf07f6049c7":["6620df8541b174097b1133a4fc370adb2e570524","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}