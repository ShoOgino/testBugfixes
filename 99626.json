{"path":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectors().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"seventy\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(100, hits.length);\n      \n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(\"doc=\" + hits[i].doc + \" tv=\" + vectors, 1, vectors.getUniqueFieldCount());\n    }\n    Terms vector;\n    vector = searcher.reader.getTermVectors(hits[0].doc).terms(\"noTV\");\n    assertNull(vector);\n  }\n\n","sourceOld":"  public void testTermVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"seventy\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(100, hits.length);\n      \n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(\"doc=\" + hits[i].doc + \" tv=\" + vectors, 1, vectors.getUniqueFieldCount());\n    }\n    Terms vector;\n    vector = searcher.reader.getTermVectors(hits[0].doc).terms(\"noTV\");\n    assertNull(vector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"seventy\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(100, hits.length);\n      \n    for (int i = 0; i < hits.length; i++) {\n      InvertedFields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(\"doc=\" + hits[i].doc + \" tv=\" + vectors, 1, vectors.getUniqueFieldCount());\n    }\n    Terms vector;\n    vector = searcher.reader.getTermVectors(hits[0].doc).terms(\"noTV\");\n    assertNull(vector);\n  }\n\n","sourceOld":"  public void testTermVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"seventy\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(100, hits.length);\n      \n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(\"doc=\" + hits[i].doc + \" tv=\" + vectors, 1, vectors.getUniqueFieldCount());\n    }\n    Terms vector;\n    vector = searcher.reader.getTermVectors(hits[0].doc).terms(\"noTV\");\n    assertNull(vector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"seventy\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(100, hits.length);\n      \n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(\"doc=\" + hits[i].doc + \" tv=\" + vectors, 1, vectors.getUniqueFieldCount());\n    }\n    Terms vector;\n    vector = searcher.reader.getTermVectors(hits[0].doc).terms(\"noTV\");\n    assertNull(vector);\n  }\n\n","sourceOld":"  public void testTermVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"seventy\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(100, hits.length);\n      \n    for (int i = 0; i < hits.length; i++) {\n      InvertedFields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(\"doc=\" + hits[i].doc + \" tv=\" + vectors, 1, vectors.getUniqueFieldCount());\n    }\n    Terms vector;\n    vector = searcher.reader.getTermVectors(hits[0].doc).terms(\"noTV\");\n    assertNull(vector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdb5e42b0cecd8dfb27767a02ada71899bf17917","date":1334100099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"seventy\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(100, hits.length);\n      \n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(\"doc=\" + hits[i].doc + \" tv=\" + vectors, 1, vectors.size());\n    }\n    Terms vector;\n    vector = searcher.reader.getTermVectors(hits[0].doc).terms(\"noTV\");\n    assertNull(vector);\n  }\n\n","sourceOld":"  public void testTermVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"seventy\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(100, hits.length);\n      \n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(\"doc=\" + hits[i].doc + \" tv=\" + vectors, 1, vectors.getUniqueFieldCount());\n    }\n    Terms vector;\n    vector = searcher.reader.getTermVectors(hits[0].doc).terms(\"noTV\");\n    assertNull(vector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"seventy\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(100, hits.length);\n      \n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(\"doc=\" + hits[i].doc + \" tv=\" + vectors, 1, vectors.size());\n    }\n    Terms vector;\n    vector = searcher.reader.getTermVectors(hits[0].doc).terms(\"noTV\");\n    assertNull(vector);\n  }\n\n","sourceOld":"  public void testTermVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"seventy\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(100, hits.length);\n      \n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(\"doc=\" + hits[i].doc + \" tv=\" + vectors, 1, vectors.getUniqueFieldCount());\n    }\n    Terms vector;\n    vector = searcher.reader.getTermVectors(hits[0].doc).terms(\"noTV\");\n    assertNull(vector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f21ce13f410ee015e1ba14687ab4b8518ac52a11","date":1359713213,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectors().mjava","sourceNew":null,"sourceOld":"  public void testTermVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"seventy\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(100, hits.length);\n      \n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(\"doc=\" + hits[i].doc + \" tv=\" + vectors, 1, vectors.size());\n    }\n    Terms vector;\n    vector = searcher.reader.getTermVectors(hits[0].doc).terms(\"noTV\");\n    assertNull(vector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fa6955ed1b1007ded1349ab72cea4555640432f","date":1359721908,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermVectors().mjava","sourceNew":null,"sourceOld":"  public void testTermVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"seventy\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(100, hits.length);\n      \n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(\"doc=\" + hits[i].doc + \" tv=\" + vectors, 1, vectors.size());\n    }\n    Terms vector;\n    vector = searcher.reader.getTermVectors(hits[0].doc).terms(\"noTV\");\n    assertNull(vector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0fa6955ed1b1007ded1349ab72cea4555640432f":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","f21ce13f410ee015e1ba14687ab4b8518ac52a11"],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"5a238fc456663f685a9db1ed8d680e348bb45171":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"f21ce13f410ee015e1ba14687ab4b8518ac52a11":["bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f21ce13f410ee015e1ba14687ab4b8518ac52a11"]},"commit2Childs":{"0fa6955ed1b1007ded1349ab72cea4555640432f":[],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["0fa6955ed1b1007ded1349ab72cea4555640432f","5a238fc456663f685a9db1ed8d680e348bb45171","f21ce13f410ee015e1ba14687ab4b8518ac52a11"],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","5a238fc456663f685a9db1ed8d680e348bb45171"],"f21ce13f410ee015e1ba14687ab4b8518ac52a11":["0fa6955ed1b1007ded1349ab72cea4555640432f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0fa6955ed1b1007ded1349ab72cea4555640432f","5a238fc456663f685a9db1ed8d680e348bb45171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}