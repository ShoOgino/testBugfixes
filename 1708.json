{"path":"lucene/src/java/org/apache/lucene/search/BooleanScorer#BooleanScorer(Weight,boolean,Similarity,int,List[Scorer],List[Scorer],int).mjava","commits":[{"id":"3e00f80591de714c6975f454e33e0fa5218b5902","date":1294514405,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer#BooleanScorer(Weight,boolean,Similarity,int,List[Scorer],List[Scorer],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer#BooleanScorer(Weight,Similarity,int,List[Scorer],List[Scorer],int).mjava","sourceNew":"  BooleanScorer(Weight weight, boolean disableCoord, Similarity similarity, int minNrShouldMatch,\n      List<Scorer> optionalScorers, List<Scorer> prohibitedScorers, int maxCoord) throws IOException {\n    super(null, weight);   // Similarity not used\n    this.minNrShouldMatch = minNrShouldMatch;\n\n    if (optionalScorers != null && optionalScorers.size() > 0) {\n      for (Scorer scorer : optionalScorers) {\n        if (scorer.nextDoc() != NO_MORE_DOCS) {\n          scorers = new SubScorer(scorer, false, false, bucketTable.newCollector(0), scorers);\n        }\n      }\n    }\n    \n    if (prohibitedScorers != null && prohibitedScorers.size() > 0) {\n      for (Scorer scorer : prohibitedScorers) {\n        int mask = nextMask;\n        nextMask = nextMask << 1;\n        prohibitedMask |= mask;                     // update prohibited mask\n        if (scorer.nextDoc() != NO_MORE_DOCS) {\n          scorers = new SubScorer(scorer, false, true, bucketTable.newCollector(mask), scorers);\n        }\n      }\n    }\n\n    coordFactors = new float[optionalScorers.size() + 1];\n    for (int i = 0; i < coordFactors.length; i++) {\n      coordFactors[i] = disableCoord ? 1.0f : similarity.coord(i, maxCoord); \n    }\n  }\n\n","sourceOld":"  BooleanScorer(Weight weight, Similarity similarity, int minNrShouldMatch,\n      List<Scorer> optionalScorers, List<Scorer> prohibitedScorers, int maxCoord) throws IOException {\n    super(similarity, weight);\n    this.minNrShouldMatch = minNrShouldMatch;\n\n    if (optionalScorers != null && optionalScorers.size() > 0) {\n      for (Scorer scorer : optionalScorers) {\n        if (scorer.nextDoc() != NO_MORE_DOCS) {\n          scorers = new SubScorer(scorer, false, false, bucketTable.newCollector(0), scorers);\n        }\n      }\n    }\n    \n    if (prohibitedScorers != null && prohibitedScorers.size() > 0) {\n      for (Scorer scorer : prohibitedScorers) {\n        int mask = nextMask;\n        nextMask = nextMask << 1;\n        prohibitedMask |= mask;                     // update prohibited mask\n        if (scorer.nextDoc() != NO_MORE_DOCS) {\n          scorers = new SubScorer(scorer, false, true, bucketTable.newCollector(mask), scorers);\n        }\n      }\n    }\n\n    coordFactors = new float[optionalScorers.size() + 1];\n    Similarity sim = getSimilarity();\n    for (int i = 0; i < coordFactors.length; i++) {\n      coordFactors[i] = sim.coord(i, maxCoord); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer#BooleanScorer(Weight,boolean,Similarity,int,List[Scorer],List[Scorer],int).mjava","pathOld":"/dev/null","sourceNew":"  BooleanScorer(Weight weight, boolean disableCoord, Similarity similarity, int minNrShouldMatch,\n      List<Scorer> optionalScorers, List<Scorer> prohibitedScorers, int maxCoord) throws IOException {\n    super(null, weight);   // Similarity not used\n    this.minNrShouldMatch = minNrShouldMatch;\n\n    if (optionalScorers != null && optionalScorers.size() > 0) {\n      for (Scorer scorer : optionalScorers) {\n        if (scorer.nextDoc() != NO_MORE_DOCS) {\n          scorers = new SubScorer(scorer, false, false, bucketTable.newCollector(0), scorers);\n        }\n      }\n    }\n    \n    if (prohibitedScorers != null && prohibitedScorers.size() > 0) {\n      for (Scorer scorer : prohibitedScorers) {\n        int mask = nextMask;\n        nextMask = nextMask << 1;\n        prohibitedMask |= mask;                     // update prohibited mask\n        if (scorer.nextDoc() != NO_MORE_DOCS) {\n          scorers = new SubScorer(scorer, false, true, bucketTable.newCollector(mask), scorers);\n        }\n      }\n    }\n\n    coordFactors = new float[optionalScorers.size() + 1];\n    for (int i = 0; i < coordFactors.length; i++) {\n      coordFactors[i] = disableCoord ? 1.0f : similarity.coord(i, maxCoord); \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4","date":1295478199,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer#BooleanScorer(BooleanWeight,boolean,int,List[Scorer],List[Scorer],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer#BooleanScorer(Weight,boolean,Similarity,int,List[Scorer],List[Scorer],int).mjava","sourceNew":"  BooleanScorer(BooleanWeight weight, boolean disableCoord, int minNrShouldMatch,\n      List<Scorer> optionalScorers, List<Scorer> prohibitedScorers, int maxCoord) throws IOException {\n    super(null, weight);   // Similarity not used\n    this.minNrShouldMatch = minNrShouldMatch;\n\n    if (optionalScorers != null && optionalScorers.size() > 0) {\n      for (Scorer scorer : optionalScorers) {\n        if (scorer.nextDoc() != NO_MORE_DOCS) {\n          scorers = new SubScorer(scorer, false, false, bucketTable.newCollector(0), scorers);\n        }\n      }\n    }\n    \n    if (prohibitedScorers != null && prohibitedScorers.size() > 0) {\n      for (Scorer scorer : prohibitedScorers) {\n        int mask = nextMask;\n        nextMask = nextMask << 1;\n        prohibitedMask |= mask;                     // update prohibited mask\n        if (scorer.nextDoc() != NO_MORE_DOCS) {\n          scorers = new SubScorer(scorer, false, true, bucketTable.newCollector(mask), scorers);\n        }\n      }\n    }\n\n    coordFactors = new float[optionalScorers.size() + 1];\n    for (int i = 0; i < coordFactors.length; i++) {\n      coordFactors[i] = disableCoord ? 1.0f : weight.coord(i, maxCoord); \n    }\n  }\n\n","sourceOld":"  BooleanScorer(Weight weight, boolean disableCoord, Similarity similarity, int minNrShouldMatch,\n      List<Scorer> optionalScorers, List<Scorer> prohibitedScorers, int maxCoord) throws IOException {\n    super(null, weight);   // Similarity not used\n    this.minNrShouldMatch = minNrShouldMatch;\n\n    if (optionalScorers != null && optionalScorers.size() > 0) {\n      for (Scorer scorer : optionalScorers) {\n        if (scorer.nextDoc() != NO_MORE_DOCS) {\n          scorers = new SubScorer(scorer, false, false, bucketTable.newCollector(0), scorers);\n        }\n      }\n    }\n    \n    if (prohibitedScorers != null && prohibitedScorers.size() > 0) {\n      for (Scorer scorer : prohibitedScorers) {\n        int mask = nextMask;\n        nextMask = nextMask << 1;\n        prohibitedMask |= mask;                     // update prohibited mask\n        if (scorer.nextDoc() != NO_MORE_DOCS) {\n          scorers = new SubScorer(scorer, false, true, bucketTable.newCollector(mask), scorers);\n        }\n      }\n    }\n\n    coordFactors = new float[optionalScorers.size() + 1];\n    for (int i = 0; i < coordFactors.length; i++) {\n      coordFactors[i] = disableCoord ? 1.0f : similarity.coord(i, maxCoord); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer#BooleanScorer(BooleanWeight,boolean,int,List[Scorer],List[Scorer],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer#BooleanScorer(Weight,boolean,Similarity,int,List[Scorer],List[Scorer],int).mjava","sourceNew":"  BooleanScorer(BooleanWeight weight, boolean disableCoord, int minNrShouldMatch,\n      List<Scorer> optionalScorers, List<Scorer> prohibitedScorers, int maxCoord) throws IOException {\n    super(weight);\n    this.minNrShouldMatch = minNrShouldMatch;\n\n    if (optionalScorers != null && optionalScorers.size() > 0) {\n      for (Scorer scorer : optionalScorers) {\n        if (scorer.nextDoc() != NO_MORE_DOCS) {\n          scorers = new SubScorer(scorer, false, false, bucketTable.newCollector(0), scorers);\n        }\n      }\n    }\n    \n    if (prohibitedScorers != null && prohibitedScorers.size() > 0) {\n      for (Scorer scorer : prohibitedScorers) {\n        int mask = nextMask;\n        nextMask = nextMask << 1;\n        prohibitedMask |= mask;                     // update prohibited mask\n        if (scorer.nextDoc() != NO_MORE_DOCS) {\n          scorers = new SubScorer(scorer, false, true, bucketTable.newCollector(mask), scorers);\n        }\n      }\n    }\n\n    coordFactors = new float[optionalScorers.size() + 1];\n    for (int i = 0; i < coordFactors.length; i++) {\n      coordFactors[i] = disableCoord ? 1.0f : weight.coord(i, maxCoord); \n    }\n  }\n\n","sourceOld":"  BooleanScorer(Weight weight, boolean disableCoord, Similarity similarity, int minNrShouldMatch,\n      List<Scorer> optionalScorers, List<Scorer> prohibitedScorers, int maxCoord) throws IOException {\n    super(null, weight);   // Similarity not used\n    this.minNrShouldMatch = minNrShouldMatch;\n\n    if (optionalScorers != null && optionalScorers.size() > 0) {\n      for (Scorer scorer : optionalScorers) {\n        if (scorer.nextDoc() != NO_MORE_DOCS) {\n          scorers = new SubScorer(scorer, false, false, bucketTable.newCollector(0), scorers);\n        }\n      }\n    }\n    \n    if (prohibitedScorers != null && prohibitedScorers.size() > 0) {\n      for (Scorer scorer : prohibitedScorers) {\n        int mask = nextMask;\n        nextMask = nextMask << 1;\n        prohibitedMask |= mask;                     // update prohibited mask\n        if (scorer.nextDoc() != NO_MORE_DOCS) {\n          scorers = new SubScorer(scorer, false, true, bucketTable.newCollector(mask), scorers);\n        }\n      }\n    }\n\n    coordFactors = new float[optionalScorers.size() + 1];\n    for (int i = 0; i < coordFactors.length; i++) {\n      coordFactors[i] = disableCoord ? 1.0f : similarity.coord(i, maxCoord); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e00f80591de714c6975f454e33e0fa5218b5902":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4":["3e00f80591de714c6975f454e33e0fa5218b5902"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e00f80591de714c6975f454e33e0fa5218b5902"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4"]},"commit2Childs":{"3e00f80591de714c6975f454e33e0fa5218b5902":["03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e00f80591de714c6975f454e33e0fa5218b5902","868da859b43505d9d2a023bfeae6dd0c795f5295"],"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4":["e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}