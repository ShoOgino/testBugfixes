{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#next().mjava","commits":[{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#next().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.TermWeightPayloadIterator#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      while (currentDocId < docCount) {\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        StoredDocument doc = reader.document(currentDocId, relevantFields);\n        \n        if (hasPayloads) {\n          StorableField payload = doc.getField(payloadField);\n          if (payload == null) {\n            throw new IllegalArgumentException(payloadField + \" does not exist\");\n          } else if (payload.binaryValue() == null) {\n            throw new IllegalArgumentException(payloadField + \" does not have binary value\");\n          }\n          currentPayload = payload.binaryValue();\n        }\n        \n        StorableField weight = doc.getField(weightField);\n        if (weight == null) {\n          throw new IllegalArgumentException(weightField + \" does not exist\");\n        } else if (weight.numericValue() == null) {\n          throw new IllegalArgumentException(weightField + \" does not have numeric value\");\n        }\n        currentWeight = weight.numericValue().longValue();\n        \n        StorableField fieldVal = doc.getField(field);\n        if (fieldVal == null) {\n          throw new IllegalArgumentException(field + \" does not exist\");\n        } else if(fieldVal.stringValue() == null) {\n          throw new IllegalArgumentException(field + \" does not have string value\");\n        }\n        \n        return new BytesRef(fieldVal.stringValue());\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      while (currentDocId < docCount) {\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        StoredDocument doc = reader.document(currentDocId, relevantFields);\n        \n        if (hasPayloads) {\n          StorableField payload = doc.getField(payloadField);\n          if (payload == null) {\n            throw new IllegalArgumentException(payloadField + \" does not exist\");\n          } else if (payload.binaryValue() == null) {\n            throw new IllegalArgumentException(payloadField + \" does not have binary value\");\n          }\n          currentPayload = payload.binaryValue();\n        }\n        \n        StorableField weight = doc.getField(weightField);\n        if (weight == null) {\n          throw new IllegalArgumentException(weightField + \" does not exist\");\n        } else if (weight.numericValue() == null) {\n          throw new IllegalArgumentException(weightField + \" does not have numeric value\");\n        }\n        currentWeight = weight.numericValue().longValue();\n        \n        StorableField fieldVal = doc.getField(field);\n        if (fieldVal == null) {\n          throw new IllegalArgumentException(field + \" does not exist\");\n        } else if(fieldVal.stringValue() == null) {\n          throw new IllegalArgumentException(field + \" does not have string value\");\n        }\n        \n        return new BytesRef(fieldVal.stringValue());\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6ff8992b4de8c3e2f3e4e363868e5f87eb19039","date":1382209267,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#next().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      while (currentDocId < docCount) {\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        doc = reader.document(currentDocId, relevantFields);\n        \n        if (hasPayloads) {\n          StorableField payload = doc.getField(payloadField);\n          if (payload == null) {\n            throw new IllegalArgumentException(payloadField + \" does not exist\");\n          } else if (payload.binaryValue() == null) {\n            throw new IllegalArgumentException(payloadField + \" does not have binary value\");\n          }\n          currentPayload = payload.binaryValue();\n        }\n        \n        currentWeight = getWeight(currentDocId);\n        \n        StorableField fieldVal = doc.getField(field);\n        if (fieldVal == null) {\n          throw new IllegalArgumentException(field + \" does not exist\");\n        } else if(fieldVal.stringValue() == null) {\n          throw new IllegalArgumentException(field + \" does not have string value\");\n        }\n        \n        return new BytesRef(fieldVal.stringValue());\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      while (currentDocId < docCount) {\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        StoredDocument doc = reader.document(currentDocId, relevantFields);\n        \n        if (hasPayloads) {\n          StorableField payload = doc.getField(payloadField);\n          if (payload == null) {\n            throw new IllegalArgumentException(payloadField + \" does not exist\");\n          } else if (payload.binaryValue() == null) {\n            throw new IllegalArgumentException(payloadField + \" does not have binary value\");\n          }\n          currentPayload = payload.binaryValue();\n        }\n        \n        StorableField weight = doc.getField(weightField);\n        if (weight == null) {\n          throw new IllegalArgumentException(weightField + \" does not exist\");\n        } else if (weight.numericValue() == null) {\n          throw new IllegalArgumentException(weightField + \" does not have numeric value\");\n        }\n        currentWeight = weight.numericValue().longValue();\n        \n        StorableField fieldVal = doc.getField(field);\n        if (fieldVal == null) {\n          throw new IllegalArgumentException(field + \" does not exist\");\n        } else if(fieldVal.stringValue() == null) {\n          throw new IllegalArgumentException(field + \" does not have string value\");\n        }\n        \n        return new BytesRef(fieldVal.stringValue());\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"24730daba4a74cb3bd673ccacc4ddaee5963af02","date":1385133691,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#next().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      while (currentDocId < docCount) {\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        StoredDocument doc = reader.document(currentDocId, relevantFields);\n        \n        BytesRef tempPayload = null;\n        BytesRef tempTerm = null;\n        \n        if (hasPayloads) {\n          StorableField payload = doc.getField(payloadField);\n          if (payload == null || (payload.binaryValue() == null && payload.stringValue() == null)) {\n            continue;\n          }\n          tempPayload = (payload.binaryValue() != null) ? payload.binaryValue() : new BytesRef(payload.stringValue());\n        }\n        \n        StorableField fieldVal = doc.getField(field);\n        if (fieldVal == null || (fieldVal.binaryValue() == null && fieldVal.stringValue() == null)) {\n          continue;\n        }\n        tempTerm = (fieldVal.stringValue() != null) ? new BytesRef(fieldVal.stringValue()) : fieldVal.binaryValue();\n        \n        currentPayload = tempPayload;\n        currentWeight = getWeight(doc, currentDocId);\n\n        return tempTerm;\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      while (currentDocId < docCount) {\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        doc = reader.document(currentDocId, relevantFields);\n        \n        if (hasPayloads) {\n          StorableField payload = doc.getField(payloadField);\n          if (payload == null) {\n            throw new IllegalArgumentException(payloadField + \" does not exist\");\n          } else if (payload.binaryValue() == null) {\n            throw new IllegalArgumentException(payloadField + \" does not have binary value\");\n          }\n          currentPayload = payload.binaryValue();\n        }\n        \n        currentWeight = getWeight(currentDocId);\n        \n        StorableField fieldVal = doc.getField(field);\n        if (fieldVal == null) {\n          throw new IllegalArgumentException(field + \" does not exist\");\n        } else if(fieldVal.stringValue() == null) {\n          throw new IllegalArgumentException(field + \" does not have string value\");\n        }\n        \n        return new BytesRef(fieldVal.stringValue());\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":["8509b01f6a6e91741fdd2d1cc7a3c11d6bbe0f56","ee590759ca28a3f2599ba7608ea0a50be4f540f6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#next().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      while (currentDocId < docCount) {\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        StoredDocument doc = reader.document(currentDocId, relevantFields);\n        \n        BytesRef tempPayload = null;\n        BytesRef tempTerm = null;\n        \n        if (hasPayloads) {\n          StorableField payload = doc.getField(payloadField);\n          if (payload == null || (payload.binaryValue() == null && payload.stringValue() == null)) {\n            continue;\n          }\n          tempPayload = (payload.binaryValue() != null) ? payload.binaryValue() : new BytesRef(payload.stringValue());\n        }\n        \n        StorableField fieldVal = doc.getField(field);\n        if (fieldVal == null || (fieldVal.binaryValue() == null && fieldVal.stringValue() == null)) {\n          continue;\n        }\n        tempTerm = (fieldVal.stringValue() != null) ? new BytesRef(fieldVal.stringValue()) : fieldVal.binaryValue();\n        \n        currentPayload = tempPayload;\n        currentWeight = getWeight(doc, currentDocId);\n\n        return tempTerm;\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      while (currentDocId < docCount) {\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        doc = reader.document(currentDocId, relevantFields);\n        \n        if (hasPayloads) {\n          StorableField payload = doc.getField(payloadField);\n          if (payload == null) {\n            throw new IllegalArgumentException(payloadField + \" does not exist\");\n          } else if (payload.binaryValue() == null) {\n            throw new IllegalArgumentException(payloadField + \" does not have binary value\");\n          }\n          currentPayload = payload.binaryValue();\n        }\n        \n        currentWeight = getWeight(currentDocId);\n        \n        StorableField fieldVal = doc.getField(field);\n        if (fieldVal == null) {\n          throw new IllegalArgumentException(field + \" does not exist\");\n        } else if(fieldVal.stringValue() == null) {\n          throw new IllegalArgumentException(field + \" does not have string value\");\n        }\n        \n        return new BytesRef(fieldVal.stringValue());\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a645276cbaf5dc96a42fd473b9019bde352996c8","date":1391806699,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#next().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      while (currentDocId < docCount) {\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        StoredDocument doc = reader.document(currentDocId, relevantFields);\n        \n        BytesRef tempPayload = null;\n        BytesRef tempTerm = null;\n        \n        if (hasPayloads) {\n          StorableField payload = doc.getField(payloadField);\n          if (payload == null || (payload.binaryValue() == null && payload.stringValue() == null)) {\n            continue;\n          }\n          tempPayload = (payload.binaryValue() != null) ? payload.binaryValue() : new BytesRef(payload.stringValue());\n        }\n        \n        StorableField fieldVal = doc.getField(field);\n        if (fieldVal == null || (fieldVal.binaryValue() == null && fieldVal.stringValue() == null)) {\n          continue;\n        }\n        tempTerm = (fieldVal.stringValue() != null) ? new BytesRef(fieldVal.stringValue()) : fieldVal.binaryValue();\n        \n        currentPayload = tempPayload;\n        currentWeight = getWeight(doc, currentDocId);\n        \n        return tempTerm;\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      while (currentDocId < docCount) {\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        StoredDocument doc = reader.document(currentDocId, relevantFields);\n        \n        BytesRef tempPayload = null;\n        BytesRef tempTerm = null;\n        \n        if (hasPayloads) {\n          StorableField payload = doc.getField(payloadField);\n          if (payload == null || (payload.binaryValue() == null && payload.stringValue() == null)) {\n            continue;\n          }\n          tempPayload = (payload.binaryValue() != null) ? payload.binaryValue() : new BytesRef(payload.stringValue());\n        }\n        \n        StorableField fieldVal = doc.getField(field);\n        if (fieldVal == null || (fieldVal.binaryValue() == null && fieldVal.stringValue() == null)) {\n          continue;\n        }\n        tempTerm = (fieldVal.stringValue() != null) ? new BytesRef(fieldVal.stringValue()) : fieldVal.binaryValue();\n        \n        currentPayload = tempPayload;\n        currentWeight = getWeight(doc, currentDocId);\n\n        return tempTerm;\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","date":1395588343,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#next().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      while (currentDocId < docCount) {\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        StoredDocument doc = reader.document(currentDocId, relevantFields);\n\n        BytesRef tempPayload = null;\n        BytesRef tempTerm = null;\n        Set<BytesRef> tempContexts = new HashSet<>();\n\n        if (hasPayloads) {\n          StorableField payload = doc.getField(payloadField);\n          if (payload == null || (payload.binaryValue() == null && payload.stringValue() == null)) {\n            continue;\n          }\n          tempPayload = (payload.binaryValue() != null) ? payload.binaryValue() : new BytesRef(payload.stringValue());\n        }\n\n        if (hasContexts) {\n          final StorableField[] contextFields = doc.getFields(contextsField);\n          for (StorableField contextField : contextFields) {\n            if (contextField.binaryValue() == null && contextField.stringValue() == null) {\n              continue;\n            } else {\n              tempContexts.add((contextField.binaryValue() != null) ? contextField.binaryValue() : new BytesRef(contextField.stringValue()));\n            }\n          }\n        }\n\n        StorableField fieldVal = doc.getField(field);\n        if (fieldVal == null || (fieldVal.binaryValue() == null && fieldVal.stringValue() == null)) {\n          continue;\n        }\n        tempTerm = (fieldVal.stringValue() != null) ? new BytesRef(fieldVal.stringValue()) : fieldVal.binaryValue();\n\n        currentPayload = tempPayload;\n        currentContexts = tempContexts;\n        currentWeight = getWeight(doc, currentDocId);\n\n        return tempTerm;\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      while (currentDocId < docCount) {\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        StoredDocument doc = reader.document(currentDocId, relevantFields);\n        \n        BytesRef tempPayload = null;\n        BytesRef tempTerm = null;\n        \n        if (hasPayloads) {\n          StorableField payload = doc.getField(payloadField);\n          if (payload == null || (payload.binaryValue() == null && payload.stringValue() == null)) {\n            continue;\n          }\n          tempPayload = (payload.binaryValue() != null) ? payload.binaryValue() : new BytesRef(payload.stringValue());\n        }\n        \n        StorableField fieldVal = doc.getField(field);\n        if (fieldVal == null || (fieldVal.binaryValue() == null && fieldVal.stringValue() == null)) {\n          continue;\n        }\n        tempTerm = (fieldVal.stringValue() != null) ? new BytesRef(fieldVal.stringValue()) : fieldVal.binaryValue();\n        \n        currentPayload = tempPayload;\n        currentWeight = getWeight(doc, currentDocId);\n        \n        return tempTerm;\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":["8509b01f6a6e91741fdd2d1cc7a3c11d6bbe0f56","ee590759ca28a3f2599ba7608ea0a50be4f540f6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8509b01f6a6e91741fdd2d1cc7a3c11d6bbe0f56","date":1416564641,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#next().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      while (true) {\n        if (nextFieldsPosition < currentDocFields.length) {\n          // Still values left from the document\n          StorableField fieldValue =  currentDocFields[nextFieldsPosition++];\n          if (fieldValue.binaryValue() != null) {\n            return fieldValue.binaryValue();\n          } else if (fieldValue.stringValue() != null) {\n            return new BytesRef(fieldValue.stringValue());\n          } else {\n            continue;\n          }\n        }\n\n        if (currentDocId == docCount) {\n          // Iterated over all the documents.\n          break;\n        }\n\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        StoredDocument doc = reader.document(currentDocId, relevantFields);\n\n        Set<BytesRef> tempContexts = new HashSet<>();\n\n        BytesRef tempPayload;\n        if (hasPayloads) {\n          StorableField payload = doc.getField(payloadField);\n          if (payload == null) {\n            continue;\n          } else if (payload.binaryValue() != null) {\n            tempPayload =  payload.binaryValue();\n          } else if (payload.stringValue() != null) {\n            tempPayload = new BytesRef(payload.stringValue());\n          } else {\n            continue;\n          }\n        } else {\n          tempPayload = null;\n        }\n\n        if (hasContexts) {\n          final StorableField[] contextFields = doc.getFields(contextsField);\n          for (StorableField contextField : contextFields) {\n            if (contextField.binaryValue() != null) {\n              tempContexts.add(contextField.binaryValue());\n            } else if (contextField.stringValue() != null) {\n              tempContexts.add(new BytesRef(contextField.stringValue()));\n            } else {\n              continue;\n            }\n          }\n        }\n\n        currentDocFields = doc.getFields(field);\n        nextFieldsPosition = 0;\n        if (currentDocFields.length == 0) { // no values in this document\n          continue;\n        }\n        StorableField fieldValue = currentDocFields[nextFieldsPosition++];\n        BytesRef tempTerm;\n        if (fieldValue.binaryValue() != null) {\n          tempTerm = fieldValue.binaryValue();\n        } else if (fieldValue.stringValue() != null) {\n          tempTerm = new BytesRef(fieldValue.stringValue());\n        } else {\n          continue;\n        }\n\n        currentPayload = tempPayload;\n        currentContexts = tempContexts;\n        currentWeight = getWeight(doc, currentDocId);\n\n        return tempTerm;\n      }\n\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      while (currentDocId < docCount) {\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        StoredDocument doc = reader.document(currentDocId, relevantFields);\n\n        BytesRef tempPayload = null;\n        BytesRef tempTerm = null;\n        Set<BytesRef> tempContexts = new HashSet<>();\n\n        if (hasPayloads) {\n          StorableField payload = doc.getField(payloadField);\n          if (payload == null || (payload.binaryValue() == null && payload.stringValue() == null)) {\n            continue;\n          }\n          tempPayload = (payload.binaryValue() != null) ? payload.binaryValue() : new BytesRef(payload.stringValue());\n        }\n\n        if (hasContexts) {\n          final StorableField[] contextFields = doc.getFields(contextsField);\n          for (StorableField contextField : contextFields) {\n            if (contextField.binaryValue() == null && contextField.stringValue() == null) {\n              continue;\n            } else {\n              tempContexts.add((contextField.binaryValue() != null) ? contextField.binaryValue() : new BytesRef(contextField.stringValue()));\n            }\n          }\n        }\n\n        StorableField fieldVal = doc.getField(field);\n        if (fieldVal == null || (fieldVal.binaryValue() == null && fieldVal.stringValue() == null)) {\n          continue;\n        }\n        tempTerm = (fieldVal.stringValue() != null) ? new BytesRef(fieldVal.stringValue()) : fieldVal.binaryValue();\n\n        currentPayload = tempPayload;\n        currentContexts = tempContexts;\n        currentWeight = getWeight(doc, currentDocId);\n\n        return tempTerm;\n      }\n      return null;\n    }\n\n","bugFix":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","ef06b0d1cc722b335e220aac1145914fe6362875","24730daba4a74cb3bd673ccacc4ddaee5963af02"],"bugIntro":["ee590759ca28a3f2599ba7608ea0a50be4f540f6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee590759ca28a3f2599ba7608ea0a50be4f540f6","date":1432142966,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#next().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      while (true) {\n        if (nextFieldsPosition < currentDocFields.length) {\n          // Still values left from the document\n          StorableField fieldValue =  currentDocFields[nextFieldsPosition++];\n          if (fieldValue.binaryValue() != null) {\n            return fieldValue.binaryValue();\n          } else if (fieldValue.stringValue() != null) {\n            return new BytesRef(fieldValue.stringValue());\n          } else {\n            continue;\n          }\n        }\n\n        if (currentDocId == docCount) {\n          // Iterated over all the documents.\n          break;\n        }\n\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        StoredDocument doc = reader.document(currentDocId, relevantFields);\n\n        BytesRef tempPayload = null;\n        if (hasPayloads) {\n          StorableField payload = doc.getField(payloadField);\n          if (payload != null) {\n            if (payload.binaryValue() != null) {\n              tempPayload =  payload.binaryValue();\n            } else if (payload.stringValue() != null) {\n              tempPayload = new BytesRef(payload.stringValue());\n            }\n          }\n          // in case that the iterator has payloads configured, use empty values\n          // instead of null for payload\n          if (tempPayload == null) {\n            tempPayload = new BytesRef();\n          }\n        }\n\n        Set<BytesRef> tempContexts;\n        if (hasContexts) {\n          tempContexts = new HashSet<>();\n          final StorableField[] contextFields = doc.getFields(contextsField);\n          for (StorableField contextField : contextFields) {\n            if (contextField.binaryValue() != null) {\n              tempContexts.add(contextField.binaryValue());\n            } else if (contextField.stringValue() != null) {\n              tempContexts.add(new BytesRef(contextField.stringValue()));\n            } else {\n              continue;\n            }\n          }\n        } else {\n          tempContexts = Collections.emptySet();\n        }\n\n        currentDocFields = doc.getFields(field);\n        nextFieldsPosition = 0;\n        if (currentDocFields.length == 0) { // no values in this document\n          continue;\n        }\n        StorableField fieldValue = currentDocFields[nextFieldsPosition++];\n        BytesRef tempTerm;\n        if (fieldValue.binaryValue() != null) {\n          tempTerm = fieldValue.binaryValue();\n        } else if (fieldValue.stringValue() != null) {\n          tempTerm = new BytesRef(fieldValue.stringValue());\n        } else {\n          continue;\n        }\n\n        currentPayload = tempPayload;\n        currentContexts = tempContexts;\n        currentWeight = getWeight(doc, currentDocId);\n\n        return tempTerm;\n      }\n\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      while (true) {\n        if (nextFieldsPosition < currentDocFields.length) {\n          // Still values left from the document\n          StorableField fieldValue =  currentDocFields[nextFieldsPosition++];\n          if (fieldValue.binaryValue() != null) {\n            return fieldValue.binaryValue();\n          } else if (fieldValue.stringValue() != null) {\n            return new BytesRef(fieldValue.stringValue());\n          } else {\n            continue;\n          }\n        }\n\n        if (currentDocId == docCount) {\n          // Iterated over all the documents.\n          break;\n        }\n\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        StoredDocument doc = reader.document(currentDocId, relevantFields);\n\n        Set<BytesRef> tempContexts = new HashSet<>();\n\n        BytesRef tempPayload;\n        if (hasPayloads) {\n          StorableField payload = doc.getField(payloadField);\n          if (payload == null) {\n            continue;\n          } else if (payload.binaryValue() != null) {\n            tempPayload =  payload.binaryValue();\n          } else if (payload.stringValue() != null) {\n            tempPayload = new BytesRef(payload.stringValue());\n          } else {\n            continue;\n          }\n        } else {\n          tempPayload = null;\n        }\n\n        if (hasContexts) {\n          final StorableField[] contextFields = doc.getFields(contextsField);\n          for (StorableField contextField : contextFields) {\n            if (contextField.binaryValue() != null) {\n              tempContexts.add(contextField.binaryValue());\n            } else if (contextField.stringValue() != null) {\n              tempContexts.add(new BytesRef(contextField.stringValue()));\n            } else {\n              continue;\n            }\n          }\n        }\n\n        currentDocFields = doc.getFields(field);\n        nextFieldsPosition = 0;\n        if (currentDocFields.length == 0) { // no values in this document\n          continue;\n        }\n        StorableField fieldValue = currentDocFields[nextFieldsPosition++];\n        BytesRef tempTerm;\n        if (fieldValue.binaryValue() != null) {\n          tempTerm = fieldValue.binaryValue();\n        } else if (fieldValue.stringValue() != null) {\n          tempTerm = new BytesRef(fieldValue.stringValue());\n        } else {\n          continue;\n        }\n\n        currentPayload = tempPayload;\n        currentContexts = tempContexts;\n        currentWeight = getWeight(doc, currentDocId);\n\n        return tempTerm;\n      }\n\n      return null;\n    }\n\n","bugFix":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","24730daba4a74cb3bd673ccacc4ddaee5963af02","8509b01f6a6e91741fdd2d1cc7a3c11d6bbe0f56"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#next().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      while (true) {\n        if (nextFieldsPosition < currentDocFields.length) {\n          // Still values left from the document\n          IndexableField fieldValue = currentDocFields[nextFieldsPosition++];\n          if (fieldValue.binaryValue() != null) {\n            return fieldValue.binaryValue();\n          } else if (fieldValue.stringValue() != null) {\n            return new BytesRef(fieldValue.stringValue());\n          } else {\n            continue;\n          }\n        }\n\n        if (currentDocId == docCount) {\n          // Iterated over all the documents.\n          break;\n        }\n\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        Document doc = reader.document(currentDocId, relevantFields);\n\n        BytesRef tempPayload = null;\n        if (hasPayloads) {\n          IndexableField payload = doc.getField(payloadField);\n          if (payload != null) {\n            if (payload.binaryValue() != null) {\n              tempPayload =  payload.binaryValue();\n            } else if (payload.stringValue() != null) {\n              tempPayload = new BytesRef(payload.stringValue());\n            }\n          }\n          // in case that the iterator has payloads configured, use empty values\n          // instead of null for payload\n          if (tempPayload == null) {\n            tempPayload = new BytesRef();\n          }\n        }\n\n        Set<BytesRef> tempContexts;\n        if (hasContexts) {\n          tempContexts = new HashSet<>();\n          final IndexableField[] contextFields = doc.getFields(contextsField);\n          for (IndexableField contextField : contextFields) {\n            if (contextField.binaryValue() != null) {\n              tempContexts.add(contextField.binaryValue());\n            } else if (contextField.stringValue() != null) {\n              tempContexts.add(new BytesRef(contextField.stringValue()));\n            } else {\n              continue;\n            }\n          }\n        } else {\n          tempContexts = Collections.emptySet();\n        }\n\n        currentDocFields = doc.getFields(field);\n        nextFieldsPosition = 0;\n        if (currentDocFields.length == 0) { // no values in this document\n          continue;\n        }\n        IndexableField fieldValue = currentDocFields[nextFieldsPosition++];\n        BytesRef tempTerm;\n        if (fieldValue.binaryValue() != null) {\n          tempTerm = fieldValue.binaryValue();\n        } else if (fieldValue.stringValue() != null) {\n          tempTerm = new BytesRef(fieldValue.stringValue());\n        } else {\n          continue;\n        }\n\n        currentPayload = tempPayload;\n        currentContexts = tempContexts;\n        currentWeight = getWeight(doc, currentDocId);\n\n        return tempTerm;\n      }\n\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      while (true) {\n        if (nextFieldsPosition < currentDocFields.length) {\n          // Still values left from the document\n          StorableField fieldValue =  currentDocFields[nextFieldsPosition++];\n          if (fieldValue.binaryValue() != null) {\n            return fieldValue.binaryValue();\n          } else if (fieldValue.stringValue() != null) {\n            return new BytesRef(fieldValue.stringValue());\n          } else {\n            continue;\n          }\n        }\n\n        if (currentDocId == docCount) {\n          // Iterated over all the documents.\n          break;\n        }\n\n        currentDocId++;\n        if (liveDocs != null && !liveDocs.get(currentDocId)) { \n          continue;\n        }\n\n        StoredDocument doc = reader.document(currentDocId, relevantFields);\n\n        BytesRef tempPayload = null;\n        if (hasPayloads) {\n          StorableField payload = doc.getField(payloadField);\n          if (payload != null) {\n            if (payload.binaryValue() != null) {\n              tempPayload =  payload.binaryValue();\n            } else if (payload.stringValue() != null) {\n              tempPayload = new BytesRef(payload.stringValue());\n            }\n          }\n          // in case that the iterator has payloads configured, use empty values\n          // instead of null for payload\n          if (tempPayload == null) {\n            tempPayload = new BytesRef();\n          }\n        }\n\n        Set<BytesRef> tempContexts;\n        if (hasContexts) {\n          tempContexts = new HashSet<>();\n          final StorableField[] contextFields = doc.getFields(contextsField);\n          for (StorableField contextField : contextFields) {\n            if (contextField.binaryValue() != null) {\n              tempContexts.add(contextField.binaryValue());\n            } else if (contextField.stringValue() != null) {\n              tempContexts.add(new BytesRef(contextField.stringValue()));\n            } else {\n              continue;\n            }\n          }\n        } else {\n          tempContexts = Collections.emptySet();\n        }\n\n        currentDocFields = doc.getFields(field);\n        nextFieldsPosition = 0;\n        if (currentDocFields.length == 0) { // no values in this document\n          continue;\n        }\n        StorableField fieldValue = currentDocFields[nextFieldsPosition++];\n        BytesRef tempTerm;\n        if (fieldValue.binaryValue() != null) {\n          tempTerm = fieldValue.binaryValue();\n        } else if (fieldValue.stringValue() != null) {\n          tempTerm = new BytesRef(fieldValue.stringValue());\n        } else {\n          continue;\n        }\n\n        currentPayload = tempPayload;\n        currentContexts = tempContexts;\n        currentWeight = getWeight(doc, currentDocId);\n\n        return tempTerm;\n      }\n\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24730daba4a74cb3bd673ccacc4ddaee5963af02":["f6ff8992b4de8c3e2f3e4e363868e5f87eb19039"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["a645276cbaf5dc96a42fd473b9019bde352996c8"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8509b01f6a6e91741fdd2d1cc7a3c11d6bbe0f56":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"f6ff8992b4de8c3e2f3e4e363868e5f87eb19039":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee590759ca28a3f2599ba7608ea0a50be4f540f6":["8509b01f6a6e91741fdd2d1cc7a3c11d6bbe0f56"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["f6ff8992b4de8c3e2f3e4e363868e5f87eb19039","24730daba4a74cb3bd673ccacc4ddaee5963af02"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["24730daba4a74cb3bd673ccacc4ddaee5963af02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["ee590759ca28a3f2599ba7608ea0a50be4f540f6"]},"commit2Childs":{"24730daba4a74cb3bd673ccacc4ddaee5963af02":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","a645276cbaf5dc96a42fd473b9019bde352996c8"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["8509b01f6a6e91741fdd2d1cc7a3c11d6bbe0f56"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["f6ff8992b4de8c3e2f3e4e363868e5f87eb19039"],"f6ff8992b4de8c3e2f3e4e363868e5f87eb19039":["24730daba4a74cb3bd673ccacc4ddaee5963af02","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"8509b01f6a6e91741fdd2d1cc7a3c11d6bbe0f56":["ee590759ca28a3f2599ba7608ea0a50be4f540f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"ee590759ca28a3f2599ba7608ea0a50be4f540f6":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a645276cbaf5dc96a42fd473b9019bde352996c8":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}