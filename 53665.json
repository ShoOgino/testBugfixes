{"path":"lucene/core/src/test/org/apache/lucene/document/TestLatLonMultiLineShapeQueries.MultiLineValidator#testBBoxQuery(double,double,double,double,Object).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonMultiLineShapeQueries.MultiLineValidator#testBBoxQuery(double,double,double,double,Object).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonMultiLineShapeQueries.MultiLineValidator#testBBoxQuery(double,double,double,double,Object).mjava","sourceNew":"    @Override\n    public boolean testBBoxQuery(double minLat, double maxLat, double minLon, double maxLon, Object shape) {\n      Line[] lines = (Line[])shape;\n      for (Line l : lines) {\n        boolean b = LINEVALIDATOR.testBBoxQuery(minLat, maxLat, minLon, maxLon, l);\n        if (b == true && queryRelation == QueryRelation.INTERSECTS) {\n          return true;\n        } else if (b == true && queryRelation == QueryRelation.CONTAINS) {\n          return true;\n        } else if (b == false && queryRelation == QueryRelation.DISJOINT) {\n          return false;\n        } else if (b == false && queryRelation == QueryRelation.WITHIN) {\n          return false;\n        }\n      }\n      return queryRelation != QueryRelation.INTERSECTS && queryRelation != QueryRelation.CONTAINS;\n    }\n\n","sourceOld":"    @Override\n    public boolean testBBoxQuery(double minLat, double maxLat, double minLon, double maxLon, Object shape) {\n      Line[] lines = (Line[])shape;\n      for (Line l : lines) {\n        boolean b = LINEVALIDATOR.testBBoxQuery(minLat, maxLat, minLon, maxLon, l);\n        if (b == true && queryRelation == QueryRelation.INTERSECTS) {\n          return true;\n        } else if (b == true && queryRelation == QueryRelation.CONTAINS) {\n          return true;\n        } else if (b == false && queryRelation == QueryRelation.DISJOINT) {\n          return false;\n        } else if (b == false && queryRelation == QueryRelation.WITHIN) {\n          return false;\n        }\n      }\n      return queryRelation != QueryRelation.INTERSECTS && queryRelation != QueryRelation.CONTAINS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}