{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testAddFieldTypeAccuracy().mjava","commits":[{"id":"c6ff97491f7791aa98e90d71c4c7fee58688c37b","date":1434817448,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testAddFieldTypeAccuracy().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAddFieldTypeAccuracy() throws Exception {\n    SchemaRequest.FieldTypes fieldTypesRequest = new SchemaRequest.FieldTypes();\n    SchemaResponse.FieldTypesResponse initialFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldTypesResponse);\n    List<FieldTypeRepresentation> initialFieldTypes = initialFieldTypesResponse.getFieldTypes();\n\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"accuracyTextField\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n    fieldTypeAttributes.put(\"positionIncrementGap\", \"100\");\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n\n    AnalyzerDefinition analyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> charFilterAttributes = new LinkedHashMap<>();\n    charFilterAttributes.put(\"class\", \"solr.PatternReplaceCharFilterFactory\");\n    charFilterAttributes.put(\"replacement\", \"$1$1\");\n    charFilterAttributes.put(\"pattern\", \"([a-zA-Z])\\\\\\\\1+\");\n    analyzerDefinition.setCharFilters(Collections.singletonList(charFilterAttributes));\n    Map<String, Object> tokenizerAttributes = new LinkedHashMap<>();\n    tokenizerAttributes.put(\"class\", \"solr.WhitespaceTokenizerFactory\");\n    analyzerDefinition.setTokenizer(tokenizerAttributes);\n    Map<String, Object> filterAttributes = new LinkedHashMap<>();\n    filterAttributes.put(\"class\", \"solr.WordDelimiterFilterFactory\");\n    filterAttributes.put(\"preserveOriginal\", \"0\");\n    analyzerDefinition.setFilters(Collections.singletonList(filterAttributes));\n    fieldTypeDefinition.setAnalyzer(analyzerDefinition);\n\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaResponse.FieldTypesResponse currentFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertEquals(0, currentFieldTypesResponse.getStatus());\n    List<FieldTypeRepresentation> currentFieldTypes = currentFieldTypesResponse.getFieldTypes();\n    assertEquals(initialFieldTypes.size() + 1, currentFieldTypes.size());\n\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    String fieldName = \"accuracyField\";\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddField addFieldRequest =\n        new SchemaRequest.AddField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    Map<String, Object> dynamicFieldAttributes = new LinkedHashMap<>();\n    String dynamicFieldName = \"*_accuracy\";\n    dynamicFieldAttributes.put(\"name\", dynamicFieldName);\n    dynamicFieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddDynamicField addDynamicFieldRequest =\n        new SchemaRequest.AddDynamicField(dynamicFieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addDynamicFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation newFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"name\"))));\n    assertThat(\"solr.TextField\", is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"class\"))));\n    assertThat(analyzerDefinition.getTokenizer().get(\"class\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getTokenizer().get(\"class\"))));\n    assertTrue(newFieldTypeRepresentation.getFields().size() == 1);\n    assertTrue(newFieldTypeRepresentation.getFields().contains(fieldName));\n    assertTrue(newFieldTypeRepresentation.getDynamicFields().size() == 1);\n    assertTrue(newFieldTypeRepresentation.getDynamicFields().contains(dynamicFieldName));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f494bc636a1302995e4930fdccd371eeda452f87","date":1457370876,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testAddFieldTypeAccuracy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testAddFieldTypeAccuracy().mjava","sourceNew":"  @Test\n  public void testAddFieldTypeAccuracy() throws Exception {\n    SchemaRequest.FieldTypes fieldTypesRequest = new SchemaRequest.FieldTypes();\n    SchemaResponse.FieldTypesResponse initialFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldTypesResponse);\n    List<FieldTypeRepresentation> initialFieldTypes = initialFieldTypesResponse.getFieldTypes();\n\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"accuracyTextField\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n    fieldTypeAttributes.put(\"positionIncrementGap\", \"100\");\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n\n    AnalyzerDefinition analyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> charFilterAttributes = new LinkedHashMap<>();\n    charFilterAttributes.put(\"class\", \"solr.PatternReplaceCharFilterFactory\");\n    charFilterAttributes.put(\"replacement\", \"$1$1\");\n    charFilterAttributes.put(\"pattern\", \"([a-zA-Z])\\\\\\\\1+\");\n    analyzerDefinition.setCharFilters(Collections.singletonList(charFilterAttributes));\n    Map<String, Object> tokenizerAttributes = new LinkedHashMap<>();\n    tokenizerAttributes.put(\"class\", \"solr.WhitespaceTokenizerFactory\");\n    analyzerDefinition.setTokenizer(tokenizerAttributes);\n    Map<String, Object> filterAttributes = new LinkedHashMap<>();\n    filterAttributes.put(\"class\", \"solr.WordDelimiterFilterFactory\");\n    filterAttributes.put(\"preserveOriginal\", \"0\");\n    analyzerDefinition.setFilters(Collections.singletonList(filterAttributes));\n    fieldTypeDefinition.setAnalyzer(analyzerDefinition);\n\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaResponse.FieldTypesResponse currentFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertEquals(0, currentFieldTypesResponse.getStatus());\n    List<FieldTypeRepresentation> currentFieldTypes = currentFieldTypesResponse.getFieldTypes();\n    assertEquals(initialFieldTypes.size() + 1, currentFieldTypes.size());\n\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    String fieldName = \"accuracyField\";\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddField addFieldRequest =\n        new SchemaRequest.AddField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    Map<String, Object> dynamicFieldAttributes = new LinkedHashMap<>();\n    String dynamicFieldName = \"*_accuracy\";\n    dynamicFieldAttributes.put(\"name\", dynamicFieldName);\n    dynamicFieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddDynamicField addDynamicFieldRequest =\n        new SchemaRequest.AddDynamicField(dynamicFieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addDynamicFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation newFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"name\"))));\n    assertThat(\"solr.TextField\", is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"class\"))));\n    assertThat(analyzerDefinition.getTokenizer().get(\"class\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getTokenizer().get(\"class\"))));\n  }\n\n","sourceOld":"  @Test\n  public void testAddFieldTypeAccuracy() throws Exception {\n    SchemaRequest.FieldTypes fieldTypesRequest = new SchemaRequest.FieldTypes();\n    SchemaResponse.FieldTypesResponse initialFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldTypesResponse);\n    List<FieldTypeRepresentation> initialFieldTypes = initialFieldTypesResponse.getFieldTypes();\n\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"accuracyTextField\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n    fieldTypeAttributes.put(\"positionIncrementGap\", \"100\");\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n\n    AnalyzerDefinition analyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> charFilterAttributes = new LinkedHashMap<>();\n    charFilterAttributes.put(\"class\", \"solr.PatternReplaceCharFilterFactory\");\n    charFilterAttributes.put(\"replacement\", \"$1$1\");\n    charFilterAttributes.put(\"pattern\", \"([a-zA-Z])\\\\\\\\1+\");\n    analyzerDefinition.setCharFilters(Collections.singletonList(charFilterAttributes));\n    Map<String, Object> tokenizerAttributes = new LinkedHashMap<>();\n    tokenizerAttributes.put(\"class\", \"solr.WhitespaceTokenizerFactory\");\n    analyzerDefinition.setTokenizer(tokenizerAttributes);\n    Map<String, Object> filterAttributes = new LinkedHashMap<>();\n    filterAttributes.put(\"class\", \"solr.WordDelimiterFilterFactory\");\n    filterAttributes.put(\"preserveOriginal\", \"0\");\n    analyzerDefinition.setFilters(Collections.singletonList(filterAttributes));\n    fieldTypeDefinition.setAnalyzer(analyzerDefinition);\n\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaResponse.FieldTypesResponse currentFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertEquals(0, currentFieldTypesResponse.getStatus());\n    List<FieldTypeRepresentation> currentFieldTypes = currentFieldTypesResponse.getFieldTypes();\n    assertEquals(initialFieldTypes.size() + 1, currentFieldTypes.size());\n\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    String fieldName = \"accuracyField\";\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddField addFieldRequest =\n        new SchemaRequest.AddField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    Map<String, Object> dynamicFieldAttributes = new LinkedHashMap<>();\n    String dynamicFieldName = \"*_accuracy\";\n    dynamicFieldAttributes.put(\"name\", dynamicFieldName);\n    dynamicFieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddDynamicField addDynamicFieldRequest =\n        new SchemaRequest.AddDynamicField(dynamicFieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addDynamicFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation newFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"name\"))));\n    assertThat(\"solr.TextField\", is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"class\"))));\n    assertThat(analyzerDefinition.getTokenizer().get(\"class\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getTokenizer().get(\"class\"))));\n    assertTrue(newFieldTypeRepresentation.getFields().size() == 1);\n    assertTrue(newFieldTypeRepresentation.getFields().contains(fieldName));\n    assertTrue(newFieldTypeRepresentation.getDynamicFields().size() == 1);\n    assertTrue(newFieldTypeRepresentation.getDynamicFields().contains(dynamicFieldName));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9354b2a0148657f4393d2a4acb438fde7f1d1dad","date":1490673235,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testAddFieldTypeAccuracy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testAddFieldTypeAccuracy().mjava","sourceNew":"  @Test\n  public void testAddFieldTypeAccuracy() throws Exception {\n    SchemaRequest.FieldTypes fieldTypesRequest = new SchemaRequest.FieldTypes();\n    SchemaResponse.FieldTypesResponse initialFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldTypesResponse);\n    List<FieldTypeRepresentation> initialFieldTypes = initialFieldTypesResponse.getFieldTypes();\n\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"accuracyTextField\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n    fieldTypeAttributes.put(\"positionIncrementGap\", \"100\");\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n\n    AnalyzerDefinition analyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> charFilterAttributes = new LinkedHashMap<>();\n    charFilterAttributes.put(\"class\", \"solr.PatternReplaceCharFilterFactory\");\n    charFilterAttributes.put(\"replacement\", \"$1$1\");\n    charFilterAttributes.put(\"pattern\", \"([a-zA-Z])\\\\\\\\1+\");\n    analyzerDefinition.setCharFilters(Collections.singletonList(charFilterAttributes));\n    Map<String, Object> tokenizerAttributes = new LinkedHashMap<>();\n    tokenizerAttributes.put(\"class\", \"solr.WhitespaceTokenizerFactory\");\n    analyzerDefinition.setTokenizer(tokenizerAttributes);\n    Map<String, Object> filterAttributes = new LinkedHashMap<>();\n    filterAttributes.put(\"class\", \"solr.WordDelimiterGraphFilterFactory\");\n    filterAttributes.put(\"preserveOriginal\", \"0\");\n    analyzerDefinition.setFilters(Collections.singletonList(filterAttributes));\n    fieldTypeDefinition.setAnalyzer(analyzerDefinition);\n\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaResponse.FieldTypesResponse currentFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertEquals(0, currentFieldTypesResponse.getStatus());\n    List<FieldTypeRepresentation> currentFieldTypes = currentFieldTypesResponse.getFieldTypes();\n    assertEquals(initialFieldTypes.size() + 1, currentFieldTypes.size());\n\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    String fieldName = \"accuracyField\";\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddField addFieldRequest =\n        new SchemaRequest.AddField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    Map<String, Object> dynamicFieldAttributes = new LinkedHashMap<>();\n    String dynamicFieldName = \"*_accuracy\";\n    dynamicFieldAttributes.put(\"name\", dynamicFieldName);\n    dynamicFieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddDynamicField addDynamicFieldRequest =\n        new SchemaRequest.AddDynamicField(dynamicFieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addDynamicFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation newFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"name\"))));\n    assertThat(\"solr.TextField\", is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"class\"))));\n    assertThat(analyzerDefinition.getTokenizer().get(\"class\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getTokenizer().get(\"class\"))));\n  }\n\n","sourceOld":"  @Test\n  public void testAddFieldTypeAccuracy() throws Exception {\n    SchemaRequest.FieldTypes fieldTypesRequest = new SchemaRequest.FieldTypes();\n    SchemaResponse.FieldTypesResponse initialFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldTypesResponse);\n    List<FieldTypeRepresentation> initialFieldTypes = initialFieldTypesResponse.getFieldTypes();\n\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"accuracyTextField\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n    fieldTypeAttributes.put(\"positionIncrementGap\", \"100\");\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n\n    AnalyzerDefinition analyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> charFilterAttributes = new LinkedHashMap<>();\n    charFilterAttributes.put(\"class\", \"solr.PatternReplaceCharFilterFactory\");\n    charFilterAttributes.put(\"replacement\", \"$1$1\");\n    charFilterAttributes.put(\"pattern\", \"([a-zA-Z])\\\\\\\\1+\");\n    analyzerDefinition.setCharFilters(Collections.singletonList(charFilterAttributes));\n    Map<String, Object> tokenizerAttributes = new LinkedHashMap<>();\n    tokenizerAttributes.put(\"class\", \"solr.WhitespaceTokenizerFactory\");\n    analyzerDefinition.setTokenizer(tokenizerAttributes);\n    Map<String, Object> filterAttributes = new LinkedHashMap<>();\n    filterAttributes.put(\"class\", \"solr.WordDelimiterFilterFactory\");\n    filterAttributes.put(\"preserveOriginal\", \"0\");\n    analyzerDefinition.setFilters(Collections.singletonList(filterAttributes));\n    fieldTypeDefinition.setAnalyzer(analyzerDefinition);\n\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaResponse.FieldTypesResponse currentFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertEquals(0, currentFieldTypesResponse.getStatus());\n    List<FieldTypeRepresentation> currentFieldTypes = currentFieldTypesResponse.getFieldTypes();\n    assertEquals(initialFieldTypes.size() + 1, currentFieldTypes.size());\n\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    String fieldName = \"accuracyField\";\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddField addFieldRequest =\n        new SchemaRequest.AddField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    Map<String, Object> dynamicFieldAttributes = new LinkedHashMap<>();\n    String dynamicFieldName = \"*_accuracy\";\n    dynamicFieldAttributes.put(\"name\", dynamicFieldName);\n    dynamicFieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddDynamicField addDynamicFieldRequest =\n        new SchemaRequest.AddDynamicField(dynamicFieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addDynamicFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation newFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"name\"))));\n    assertThat(\"solr.TextField\", is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"class\"))));\n    assertThat(analyzerDefinition.getTokenizer().get(\"class\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getTokenizer().get(\"class\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79073f40991d761d73bb67bb490d1f562da07e53","date":1490873944,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testAddFieldTypeAccuracy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testAddFieldTypeAccuracy().mjava","sourceNew":"  @Test\n  public void testAddFieldTypeAccuracy() throws Exception {\n    SchemaRequest.FieldTypes fieldTypesRequest = new SchemaRequest.FieldTypes();\n    SchemaResponse.FieldTypesResponse initialFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldTypesResponse);\n    List<FieldTypeRepresentation> initialFieldTypes = initialFieldTypesResponse.getFieldTypes();\n\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"accuracyTextField\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n    fieldTypeAttributes.put(\"positionIncrementGap\", \"100\");\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n\n    AnalyzerDefinition analyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> charFilterAttributes = new LinkedHashMap<>();\n    charFilterAttributes.put(\"class\", \"solr.PatternReplaceCharFilterFactory\");\n    charFilterAttributes.put(\"replacement\", \"$1$1\");\n    charFilterAttributes.put(\"pattern\", \"([a-zA-Z])\\\\\\\\1+\");\n    analyzerDefinition.setCharFilters(Collections.singletonList(charFilterAttributes));\n    Map<String, Object> tokenizerAttributes = new LinkedHashMap<>();\n    tokenizerAttributes.put(\"class\", \"solr.WhitespaceTokenizerFactory\");\n    analyzerDefinition.setTokenizer(tokenizerAttributes);\n    Map<String, Object> filterAttributes = new LinkedHashMap<>();\n    filterAttributes.put(\"class\", \"solr.WordDelimiterGraphFilterFactory\");\n    filterAttributes.put(\"preserveOriginal\", \"0\");\n    analyzerDefinition.setFilters(Collections.singletonList(filterAttributes));\n    fieldTypeDefinition.setAnalyzer(analyzerDefinition);\n\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaResponse.FieldTypesResponse currentFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertEquals(0, currentFieldTypesResponse.getStatus());\n    List<FieldTypeRepresentation> currentFieldTypes = currentFieldTypesResponse.getFieldTypes();\n    assertEquals(initialFieldTypes.size() + 1, currentFieldTypes.size());\n\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    String fieldName = \"accuracyField\";\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddField addFieldRequest =\n        new SchemaRequest.AddField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    Map<String, Object> dynamicFieldAttributes = new LinkedHashMap<>();\n    String dynamicFieldName = \"*_accuracy\";\n    dynamicFieldAttributes.put(\"name\", dynamicFieldName);\n    dynamicFieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddDynamicField addDynamicFieldRequest =\n        new SchemaRequest.AddDynamicField(dynamicFieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addDynamicFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation newFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"name\"))));\n    assertThat(\"solr.TextField\", is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"class\"))));\n    assertThat(analyzerDefinition.getTokenizer().get(\"class\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getTokenizer().get(\"class\"))));\n  }\n\n","sourceOld":"  @Test\n  public void testAddFieldTypeAccuracy() throws Exception {\n    SchemaRequest.FieldTypes fieldTypesRequest = new SchemaRequest.FieldTypes();\n    SchemaResponse.FieldTypesResponse initialFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldTypesResponse);\n    List<FieldTypeRepresentation> initialFieldTypes = initialFieldTypesResponse.getFieldTypes();\n\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"accuracyTextField\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n    fieldTypeAttributes.put(\"positionIncrementGap\", \"100\");\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n\n    AnalyzerDefinition analyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> charFilterAttributes = new LinkedHashMap<>();\n    charFilterAttributes.put(\"class\", \"solr.PatternReplaceCharFilterFactory\");\n    charFilterAttributes.put(\"replacement\", \"$1$1\");\n    charFilterAttributes.put(\"pattern\", \"([a-zA-Z])\\\\\\\\1+\");\n    analyzerDefinition.setCharFilters(Collections.singletonList(charFilterAttributes));\n    Map<String, Object> tokenizerAttributes = new LinkedHashMap<>();\n    tokenizerAttributes.put(\"class\", \"solr.WhitespaceTokenizerFactory\");\n    analyzerDefinition.setTokenizer(tokenizerAttributes);\n    Map<String, Object> filterAttributes = new LinkedHashMap<>();\n    filterAttributes.put(\"class\", \"solr.WordDelimiterFilterFactory\");\n    filterAttributes.put(\"preserveOriginal\", \"0\");\n    analyzerDefinition.setFilters(Collections.singletonList(filterAttributes));\n    fieldTypeDefinition.setAnalyzer(analyzerDefinition);\n\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaResponse.FieldTypesResponse currentFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertEquals(0, currentFieldTypesResponse.getStatus());\n    List<FieldTypeRepresentation> currentFieldTypes = currentFieldTypesResponse.getFieldTypes();\n    assertEquals(initialFieldTypes.size() + 1, currentFieldTypes.size());\n\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    String fieldName = \"accuracyField\";\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddField addFieldRequest =\n        new SchemaRequest.AddField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    Map<String, Object> dynamicFieldAttributes = new LinkedHashMap<>();\n    String dynamicFieldName = \"*_accuracy\";\n    dynamicFieldAttributes.put(\"name\", dynamicFieldName);\n    dynamicFieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddDynamicField addDynamicFieldRequest =\n        new SchemaRequest.AddDynamicField(dynamicFieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addDynamicFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation newFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"name\"))));\n    assertThat(\"solr.TextField\", is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"class\"))));\n    assertThat(analyzerDefinition.getTokenizer().get(\"class\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getTokenizer().get(\"class\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"79073f40991d761d73bb67bb490d1f562da07e53":["f494bc636a1302995e4930fdccd371eeda452f87"],"9354b2a0148657f4393d2a4acb438fde7f1d1dad":["f494bc636a1302995e4930fdccd371eeda452f87"],"f494bc636a1302995e4930fdccd371eeda452f87":["c6ff97491f7791aa98e90d71c4c7fee58688c37b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c6ff97491f7791aa98e90d71c4c7fee58688c37b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9354b2a0148657f4393d2a4acb438fde7f1d1dad"]},"commit2Childs":{"79073f40991d761d73bb67bb490d1f562da07e53":[],"9354b2a0148657f4393d2a4acb438fde7f1d1dad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f494bc636a1302995e4930fdccd371eeda452f87":["79073f40991d761d73bb67bb490d1f562da07e53","9354b2a0148657f4393d2a4acb438fde7f1d1dad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6ff97491f7791aa98e90d71c4c7fee58688c37b"],"c6ff97491f7791aa98e90d71c4c7fee58688c37b":["f494bc636a1302995e4930fdccd371eeda452f87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79073f40991d761d73bb67bb490d1f562da07e53","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}