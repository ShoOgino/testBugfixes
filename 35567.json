{"path":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","commits":[{"id":"e3fd53e9969a60409c90fe264ff605778ba323f6","date":1168218319,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    // tmp dir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null) {\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    }\n    \n    // test with a single index: index1\n    File indexDir1 = new File(tempDir, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.getDirectory(indexDir1, true);\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList norms1 = norms;\n    ArrayList modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n    numDocNorms = 0;\n    \n    File indexDir2 = new File(tempDir, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.getDirectory(indexDir2, true);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(tempDir, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.getDirectory(indexDir3, true);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3,anlzr,false);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexes(new Directory[]{dir1,dir2});\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3,anlzr,false);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","pathOld":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    // tmp dir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null) {\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    }\n    \n    // test with a single index: index1\n    File indexDir1 = new File(tempDir, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.getDirectory(indexDir1);\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList norms1 = norms;\n    ArrayList modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n    numDocNorms = 0;\n    \n    File indexDir2 = new File(tempDir, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.getDirectory(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(tempDir, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.getDirectory(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3,anlzr,false);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexes(new Directory[]{dir1,dir2});\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3,anlzr,false);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    // tmp dir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null) {\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    }\n    \n    // test with a single index: index1\n    File indexDir1 = new File(tempDir, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.getDirectory(indexDir1, true);\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList norms1 = norms;\n    ArrayList modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n    numDocNorms = 0;\n    \n    File indexDir2 = new File(tempDir, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.getDirectory(indexDir2, true);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(tempDir, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.getDirectory(indexDir3, true);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3,anlzr,false);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexes(new Directory[]{dir1,dir2});\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3,anlzr,false);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b583d3621fe173e7296abcf62f82fb707c901234","date":1194717060,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","pathOld":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    // tmp dir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null) {\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    }\n    \n    // test with a single index: index1\n    File indexDir1 = new File(tempDir, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.getDirectory(indexDir1, null, false);\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList norms1 = norms;\n    ArrayList modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n    numDocNorms = 0;\n    \n    File indexDir2 = new File(tempDir, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.getDirectory(indexDir2, null, false);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(tempDir, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.getDirectory(indexDir3, null, false);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3,anlzr,false);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexes(new Directory[]{dir1,dir2});\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3,anlzr,false);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    // tmp dir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null) {\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    }\n    \n    // test with a single index: index1\n    File indexDir1 = new File(tempDir, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.getDirectory(indexDir1);\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList norms1 = norms;\n    ArrayList modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n    numDocNorms = 0;\n    \n    File indexDir2 = new File(tempDir, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.getDirectory(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(tempDir, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.getDirectory(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3,anlzr,false);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexes(new Directory[]{dir1,dir2});\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3,anlzr,false);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a015c55424dd37249054283bedc90388bd45358f","date":1197049353,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","pathOld":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    // tmp dir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null) {\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    }\n    \n    // test with a single index: index1\n    File indexDir1 = new File(tempDir, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.getDirectory(indexDir1);\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList norms1 = norms;\n    ArrayList modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n    numDocNorms = 0;\n    \n    File indexDir2 = new File(tempDir, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.getDirectory(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(tempDir, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.getDirectory(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3,anlzr,false);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexes(new Directory[]{dir1,dir2});\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3,anlzr,false);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    // tmp dir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null) {\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    }\n    \n    // test with a single index: index1\n    File indexDir1 = new File(tempDir, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.getDirectory(indexDir1, null, false);\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList norms1 = norms;\n    ArrayList modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n    numDocNorms = 0;\n    \n    File indexDir2 = new File(tempDir, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.getDirectory(indexDir2, null, false);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(tempDir, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.getDirectory(indexDir3, null, false);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3,anlzr,false);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexes(new Directory[]{dir1,dir2});\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3,anlzr,false);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","pathOld":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    // tmp dir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null) {\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    }\n    \n    // test with a single index: index1\n    File indexDir1 = new File(tempDir, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.getDirectory(indexDir1);\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList norms1 = norms;\n    ArrayList modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n    numDocNorms = 0;\n    \n    File indexDir2 = new File(tempDir, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.getDirectory(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(tempDir, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.getDirectory(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexes(new Directory[]{dir1,dir2});\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    // tmp dir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null) {\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    }\n    \n    // test with a single index: index1\n    File indexDir1 = new File(tempDir, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.getDirectory(indexDir1);\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList norms1 = norms;\n    ArrayList modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n    numDocNorms = 0;\n    \n    File indexDir2 = new File(tempDir, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.getDirectory(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(tempDir, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.getDirectory(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3,anlzr,false);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexes(new Directory[]{dir1,dir2});\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3,anlzr,false);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02","date":1243677645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","pathOld":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    // tmp dir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null) {\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    }\n    \n    // test with a single index: index1\n    File indexDir1 = new File(tempDir, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList norms1 = norms;\n    ArrayList modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n    numDocNorms = 0;\n    \n    File indexDir2 = new File(tempDir, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(tempDir, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexes(new Directory[]{dir1,dir2});\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    // tmp dir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null) {\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    }\n    \n    // test with a single index: index1\n    File indexDir1 = new File(tempDir, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.getDirectory(indexDir1);\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList norms1 = norms;\n    ArrayList modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n    numDocNorms = 0;\n    \n    File indexDir2 = new File(tempDir, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.getDirectory(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(tempDir, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.getDirectory(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexes(new Directory[]{dir1,dir2});\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7","date":1255555265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","pathOld":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    // tmp dir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null) {\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    }\n    \n    // test with a single index: index1\n    File indexDir1 = new File(tempDir, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList norms1 = norms;\n    ArrayList modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n    numDocNorms = 0;\n    \n    File indexDir2 = new File(tempDir, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(tempDir, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[]{dir1,dir2});\n    iw.optimize();\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    // tmp dir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null) {\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    }\n    \n    // test with a single index: index1\n    File indexDir1 = new File(tempDir, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList norms1 = norms;\n    ArrayList modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n    numDocNorms = 0;\n    \n    File indexDir2 = new File(tempDir, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(tempDir, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexes(new Directory[]{dir1,dir2});\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","pathOld":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    // tmp dir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null) {\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    }\n    \n    // test with a single index: index1\n    File indexDir1 = new File(tempDir, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n    \n    File indexDir2 = new File(tempDir, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(tempDir, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[]{dir1,dir2});\n    iw.optimize();\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    // tmp dir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null) {\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    }\n    \n    // test with a single index: index1\n    File indexDir1 = new File(tempDir, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList norms1 = norms;\n    ArrayList modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList();\n    modifiedNorms = new ArrayList();\n    numDocNorms = 0;\n    \n    File indexDir2 = new File(tempDir, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(tempDir, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[]{dir1,dir2});\n    iw.optimize();\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9922be491497088f6d585cb14772066614646756","date":1266748857,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","pathOld":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    Directory dir1 = new RAMDirectory();\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n    \n    Directory dir2 = new RAMDirectory();\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = new RAMDirectory();\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[]{dir1,dir2});\n    iw.optimize();\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    // tmp dir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null) {\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    }\n    \n    // test with a single index: index1\n    File indexDir1 = new File(tempDir, \"lucenetestindex1\");\n    Directory dir1 = FSDirectory.open(indexDir1);\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n    \n    File indexDir2 = new File(tempDir, \"lucenetestindex2\");\n    Directory dir2 = FSDirectory.open(indexDir2);\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    File indexDir3 = new File(tempDir, \"lucenetestindex3\");\n    Directory dir3 = FSDirectory.open(indexDir3);\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[]{dir1,dir2});\n    iw.optimize();\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","pathOld":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    Directory dir1 = new RAMDirectory();\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n    \n    Directory dir2 = new RAMDirectory();\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = new RAMDirectory();\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(anlzr).setOpenMode(OpenMode.APPEND)\n        .setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getMergePolicy()).setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[]{dir1,dir2});\n    iw.optimize();\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3, new IndexWriterConfig(TEST_VERSION_CURRENT)\n        .setOpenMode(OpenMode.APPEND).setAnalyzer(anlzr).setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getMergePolicy()).setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    Directory dir1 = new RAMDirectory();\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n    \n    Directory dir2 = new RAMDirectory();\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = new RAMDirectory();\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[]{dir1,dir2});\n    iw.optimize();\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","pathOld":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    Directory dir1 = new RAMDirectory();\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n    \n    Directory dir2 = new RAMDirectory();\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = new RAMDirectory();\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[]{dir1,dir2});\n    iw.optimize();\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    Directory dir1 = new RAMDirectory();\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n    \n    Directory dir2 = new RAMDirectory();\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = new RAMDirectory();\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(anlzr).setOpenMode(OpenMode.APPEND)\n        .setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getMergePolicy()).setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[]{dir1,dir2});\n    iw.optimize();\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3, new IndexWriterConfig(TEST_VERSION_CURRENT)\n        .setOpenMode(OpenMode.APPEND).setAnalyzer(anlzr).setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getMergePolicy()).setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","pathOld":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    Directory dir1 = new RAMDirectory();\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n    \n    Directory dir2 = new RAMDirectory();\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = new RAMDirectory();\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, anlzr).setOpenMode(OpenMode.APPEND)\n        .setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getMergePolicy()).setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[]{dir1,dir2});\n    iw.optimize();\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        anlzr).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getMergePolicy()).setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    Directory dir1 = new RAMDirectory();\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n    \n    Directory dir2 = new RAMDirectory();\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = new RAMDirectory();\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[]{dir1,dir2});\n    iw.optimize();\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3,anlzr,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(5);\n    iw.setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","pathOld":"src/test/org/apache/lucene/index/TestNorms#testNorms().mjava","sourceNew":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    Directory dir1 = new RAMDirectory();\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n    \n    Directory dir2 = new RAMDirectory();\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = new RAMDirectory();\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, anlzr).setOpenMode(OpenMode.APPEND)\n        .setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getMergePolicy()).setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[]{dir1,dir2});\n    iw.optimize();\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        anlzr).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getMergePolicy()).setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  /**\n   * Test that norms values are preserved as the index is maintained.\n   * Including separate norms.\n   * Including merging indexes with seprate norms. \n   * Including optimize. \n   */\n  public void testNorms() throws IOException {\n    Directory dir1 = new RAMDirectory();\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n\n    createIndex(dir1);\n    doTestNorms(dir1);\n\n    // test with a single index: index2\n    ArrayList<Float> norms1 = norms;\n    ArrayList<Float> modifiedNorms1 = modifiedNorms;\n    int numDocNorms1 = numDocNorms;\n\n    norms = new ArrayList<Float>();\n    modifiedNorms = new ArrayList<Float>();\n    numDocNorms = 0;\n    \n    Directory dir2 = new RAMDirectory();\n\n    createIndex(dir2);\n    doTestNorms(dir2);\n\n    // add index1 and index2 to a third index: index3\n    Directory dir3 = new RAMDirectory();\n\n    createIndex(dir3);\n    IndexWriter iw = new IndexWriter(dir3, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, anlzr).setOpenMode(OpenMode.APPEND)\n        .setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getMergePolicy()).setMergeFactor(3);\n    iw.addIndexesNoOptimize(new Directory[]{dir1,dir2});\n    iw.optimize();\n    iw.close();\n    \n    norms1.addAll(norms);\n    norms = norms1;\n    modifiedNorms1.addAll(modifiedNorms);\n    modifiedNorms = modifiedNorms1;\n    numDocNorms += numDocNorms1;\n\n    // test with index3\n    verifyIndex(dir3);\n    doTestNorms(dir3);\n    \n    // now with optimize\n    iw = new IndexWriter(dir3, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        anlzr).setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(5));\n    ((LogMergePolicy) iw.getMergePolicy()).setMergeFactor(3);\n    iw.optimize();\n    iw.close();\n    verifyIndex(dir3);\n    \n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1cedb00d2dd44640194401179358a2e3ba6051bf":["9922be491497088f6d585cb14772066614646756"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["a015c55424dd37249054283bedc90388bd45358f"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"b583d3621fe173e7296abcf62f82fb707c901234":["66b12ba4967665216eeb706b58d424c51fb3641a"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"9922be491497088f6d585cb14772066614646756":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"66b12ba4967665216eeb706b58d424c51fb3641a":["e3fd53e9969a60409c90fe264ff605778ba323f6"],"a015c55424dd37249054283bedc90388bd45358f":["b583d3621fe173e7296abcf62f82fb707c901234"],"e3fd53e9969a60409c90fe264ff605778ba323f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9922be491497088f6d585cb14772066614646756"],"b583d3621fe173e7296abcf62f82fb707c901234":["a015c55424dd37249054283bedc90388bd45358f"],"9922be491497088f6d585cb14772066614646756":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"66b12ba4967665216eeb706b58d424c51fb3641a":["b583d3621fe173e7296abcf62f82fb707c901234"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a015c55424dd37249054283bedc90388bd45358f":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"e3fd53e9969a60409c90fe264ff605778ba323f6":["66b12ba4967665216eeb706b58d424c51fb3641a"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3fd53e9969a60409c90fe264ff605778ba323f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}