{"path":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34c293e9c1585a07c0532058631196bcd9a6cbfe","date":1341849837,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ROOT));\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ROOT));\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ROOT));\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e15d8080fa57709d0f0aa96ec3799997350137f6","date":1353373992,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n\n    final String javaVersion = System.getProperty(\"java.specification.version\", \"unknown\"); \n    final String javaVendor = System.getProperty(\"java.specification.vendor\", \"unknown\"); \n    final String javaName = System.getProperty(\"java.specification.name\", \"unknown\"); \n    final String jreVersion = System.getProperty(\"java.version\", \"unknown\");\n    final String jreVendor = System.getProperty(\"java.vendor\", \"unknown\");\n    final String vmVersion = System.getProperty(\"java.vm.version\", \"unknown\"); \n    final String vmVendor = System.getProperty(\"java.vm.vendor\", \"unknown\"); \n    final String vmName = System.getProperty(\"java.vm.name\", \"unknown\"); \n\n    // Summary Info\n    jvm.add( \"version\", jreVersion + \" \" + vmVersion);\n    jvm.add( \"name\", jreVendor + \" \" + vmName );\n    \n    // details\n    SimpleOrderedMap<Object> java = new SimpleOrderedMap<Object>();\n    java.add( \"vendor\", javaVendor );\n    java.add( \"name\", javaName );\n    java.add( \"version\", javaVersion );\n    jvm.add( \"spec\", java );\n    SimpleOrderedMap<Object> jre = new SimpleOrderedMap<Object>();\n    jre.add( \"vendor\", jreVendor );\n    jre.add( \"version\", jreVersion );\n    jvm.add( \"jre\", jre );\n    SimpleOrderedMap<Object> vm = new SimpleOrderedMap<Object>();\n    vm.add( \"vendor\", vmVendor );\n    vm.add( \"name\", vmName );\n    vm.add( \"version\", vmVersion );\n    jvm.add( \"vm\", vm );\n           \n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ROOT));\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ROOT));\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n\n    final String javaVersion = System.getProperty(\"java.specification.version\", \"unknown\"); \n    final String javaVendor = System.getProperty(\"java.specification.vendor\", \"unknown\"); \n    final String javaName = System.getProperty(\"java.specification.name\", \"unknown\"); \n    final String jreVersion = System.getProperty(\"java.version\", \"unknown\");\n    final String jreVendor = System.getProperty(\"java.vendor\", \"unknown\");\n    final String vmVersion = System.getProperty(\"java.vm.version\", \"unknown\"); \n    final String vmVendor = System.getProperty(\"java.vm.vendor\", \"unknown\"); \n    final String vmName = System.getProperty(\"java.vm.name\", \"unknown\"); \n\n    // Summary Info\n    jvm.add( \"version\", jreVersion + \" \" + vmVersion);\n    jvm.add( \"name\", jreVendor + \" \" + vmName );\n    \n    // details\n    SimpleOrderedMap<Object> java = new SimpleOrderedMap<Object>();\n    java.add( \"vendor\", javaVendor );\n    java.add( \"name\", javaName );\n    java.add( \"version\", javaVersion );\n    jvm.add( \"spec\", java );\n    SimpleOrderedMap<Object> jre = new SimpleOrderedMap<Object>();\n    jre.add( \"vendor\", jreVendor );\n    jre.add( \"version\", jreVersion );\n    jvm.add( \"jre\", jre );\n    SimpleOrderedMap<Object> vm = new SimpleOrderedMap<Object>();\n    vm.add( \"vendor\", vmVendor );\n    vm.add( \"name\", vmName );\n    vm.add( \"version\", vmVersion );\n    jvm.add( \"vm\", vm );\n           \n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ROOT));\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n    jvm.add( \"version\", System.getProperty(\"java.vm.version\") );\n    jvm.add( \"name\", System.getProperty(\"java.vm.name\") );\n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ROOT));\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<>();\n\n    final String javaVersion = System.getProperty(\"java.specification.version\", \"unknown\"); \n    final String javaVendor = System.getProperty(\"java.specification.vendor\", \"unknown\"); \n    final String javaName = System.getProperty(\"java.specification.name\", \"unknown\"); \n    final String jreVersion = System.getProperty(\"java.version\", \"unknown\");\n    final String jreVendor = System.getProperty(\"java.vendor\", \"unknown\");\n    final String vmVersion = System.getProperty(\"java.vm.version\", \"unknown\"); \n    final String vmVendor = System.getProperty(\"java.vm.vendor\", \"unknown\"); \n    final String vmName = System.getProperty(\"java.vm.name\", \"unknown\"); \n\n    // Summary Info\n    jvm.add( \"version\", jreVersion + \" \" + vmVersion);\n    jvm.add( \"name\", jreVendor + \" \" + vmName );\n    \n    // details\n    SimpleOrderedMap<Object> java = new SimpleOrderedMap<>();\n    java.add( \"vendor\", javaVendor );\n    java.add( \"name\", javaName );\n    java.add( \"version\", javaVersion );\n    jvm.add( \"spec\", java );\n    SimpleOrderedMap<Object> jre = new SimpleOrderedMap<>();\n    jre.add( \"vendor\", jreVendor );\n    jre.add( \"version\", jreVersion );\n    jvm.add( \"jre\", jre );\n    SimpleOrderedMap<Object> vm = new SimpleOrderedMap<>();\n    vm.add( \"vendor\", vmVendor );\n    vm.add( \"name\", vmName );\n    vm.add( \"version\", vmVersion );\n    jvm.add( \"vm\", vm );\n           \n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ROOT));\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<Object>();\n\n    final String javaVersion = System.getProperty(\"java.specification.version\", \"unknown\"); \n    final String javaVendor = System.getProperty(\"java.specification.vendor\", \"unknown\"); \n    final String javaName = System.getProperty(\"java.specification.name\", \"unknown\"); \n    final String jreVersion = System.getProperty(\"java.version\", \"unknown\");\n    final String jreVendor = System.getProperty(\"java.vendor\", \"unknown\");\n    final String vmVersion = System.getProperty(\"java.vm.version\", \"unknown\"); \n    final String vmVendor = System.getProperty(\"java.vm.vendor\", \"unknown\"); \n    final String vmName = System.getProperty(\"java.vm.name\", \"unknown\"); \n\n    // Summary Info\n    jvm.add( \"version\", jreVersion + \" \" + vmVersion);\n    jvm.add( \"name\", jreVendor + \" \" + vmName );\n    \n    // details\n    SimpleOrderedMap<Object> java = new SimpleOrderedMap<Object>();\n    java.add( \"vendor\", javaVendor );\n    java.add( \"name\", javaName );\n    java.add( \"version\", javaVersion );\n    jvm.add( \"spec\", java );\n    SimpleOrderedMap<Object> jre = new SimpleOrderedMap<Object>();\n    jre.add( \"vendor\", jreVendor );\n    jre.add( \"version\", jreVersion );\n    jvm.add( \"jre\", jre );\n    SimpleOrderedMap<Object> vm = new SimpleOrderedMap<Object>();\n    vm.add( \"vendor\", vmVendor );\n    vm.add( \"name\", vmName );\n    vm.add( \"version\", vmVersion );\n    jvm.add( \"vm\", vm );\n           \n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ROOT));\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<Object>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<Object>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<Object>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<>();\n\n    final String javaVersion = System.getProperty(\"java.specification.version\", \"unknown\"); \n    final String javaVendor = System.getProperty(\"java.specification.vendor\", \"unknown\"); \n    final String javaName = System.getProperty(\"java.specification.name\", \"unknown\"); \n    final String jreVersion = System.getProperty(\"java.version\", \"unknown\");\n    final String jreVendor = System.getProperty(\"java.vendor\", \"unknown\");\n    final String vmVersion = System.getProperty(\"java.vm.version\", \"unknown\"); \n    final String vmVendor = System.getProperty(\"java.vm.vendor\", \"unknown\"); \n    final String vmName = System.getProperty(\"java.vm.name\", \"unknown\"); \n\n    // Summary Info\n    jvm.add( \"version\", jreVersion + \" \" + vmVersion);\n    jvm.add(NAME, jreVendor + \" \" + vmName);\n    \n    // details\n    SimpleOrderedMap<Object> java = new SimpleOrderedMap<>();\n    java.add( \"vendor\", javaVendor );\n    java.add(NAME, javaName);\n    java.add( \"version\", javaVersion );\n    jvm.add( \"spec\", java );\n    SimpleOrderedMap<Object> jre = new SimpleOrderedMap<>();\n    jre.add( \"vendor\", jreVendor );\n    jre.add( \"version\", jreVersion );\n    jvm.add( \"jre\", jre );\n    SimpleOrderedMap<Object> vm = new SimpleOrderedMap<>();\n    vm.add( \"vendor\", vmVendor );\n    vm.add(NAME, vmName);\n    vm.add( \"version\", vmVersion );\n    jvm.add( \"vm\", vm );\n           \n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ROOT));\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<>();\n\n    final String javaVersion = System.getProperty(\"java.specification.version\", \"unknown\"); \n    final String javaVendor = System.getProperty(\"java.specification.vendor\", \"unknown\"); \n    final String javaName = System.getProperty(\"java.specification.name\", \"unknown\"); \n    final String jreVersion = System.getProperty(\"java.version\", \"unknown\");\n    final String jreVendor = System.getProperty(\"java.vendor\", \"unknown\");\n    final String vmVersion = System.getProperty(\"java.vm.version\", \"unknown\"); \n    final String vmVendor = System.getProperty(\"java.vm.vendor\", \"unknown\"); \n    final String vmName = System.getProperty(\"java.vm.name\", \"unknown\"); \n\n    // Summary Info\n    jvm.add( \"version\", jreVersion + \" \" + vmVersion);\n    jvm.add( \"name\", jreVendor + \" \" + vmName );\n    \n    // details\n    SimpleOrderedMap<Object> java = new SimpleOrderedMap<>();\n    java.add( \"vendor\", javaVendor );\n    java.add( \"name\", javaName );\n    java.add( \"version\", javaVersion );\n    jvm.add( \"spec\", java );\n    SimpleOrderedMap<Object> jre = new SimpleOrderedMap<>();\n    jre.add( \"vendor\", jreVendor );\n    jre.add( \"version\", jreVersion );\n    jvm.add( \"jre\", jre );\n    SimpleOrderedMap<Object> vm = new SimpleOrderedMap<>();\n    vm.add( \"vendor\", vmVendor );\n    vm.add( \"name\", vmName );\n    vm.add( \"version\", vmVersion );\n    jvm.add( \"vm\", vm );\n           \n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ROOT));\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<>();\n\n    final String javaVersion = System.getProperty(\"java.specification.version\", \"unknown\"); \n    final String javaVendor = System.getProperty(\"java.specification.vendor\", \"unknown\"); \n    final String javaName = System.getProperty(\"java.specification.name\", \"unknown\"); \n    final String jreVersion = System.getProperty(\"java.version\", \"unknown\");\n    final String jreVendor = System.getProperty(\"java.vendor\", \"unknown\");\n    final String vmVersion = System.getProperty(\"java.vm.version\", \"unknown\"); \n    final String vmVendor = System.getProperty(\"java.vm.vendor\", \"unknown\"); \n    final String vmName = System.getProperty(\"java.vm.name\", \"unknown\"); \n\n    // Summary Info\n    jvm.add( \"version\", jreVersion + \" \" + vmVersion);\n    jvm.add(NAME, jreVendor + \" \" + vmName);\n    \n    // details\n    SimpleOrderedMap<Object> java = new SimpleOrderedMap<>();\n    java.add( \"vendor\", javaVendor );\n    java.add(NAME, javaName);\n    java.add( \"version\", javaVersion );\n    jvm.add( \"spec\", java );\n    SimpleOrderedMap<Object> jre = new SimpleOrderedMap<>();\n    jre.add( \"vendor\", jreVendor );\n    jre.add( \"version\", jreVersion );\n    jvm.add( \"jre\", jre );\n    SimpleOrderedMap<Object> vm = new SimpleOrderedMap<>();\n    vm.add( \"vendor\", vmVendor );\n    vm.add(NAME, vmName);\n    vm.add( \"version\", vmVersion );\n    jvm.add( \"vm\", vm );\n           \n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ROOT));\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<>();\n\n    final String javaVersion = System.getProperty(\"java.specification.version\", \"unknown\"); \n    final String javaVendor = System.getProperty(\"java.specification.vendor\", \"unknown\"); \n    final String javaName = System.getProperty(\"java.specification.name\", \"unknown\"); \n    final String jreVersion = System.getProperty(\"java.version\", \"unknown\");\n    final String jreVendor = System.getProperty(\"java.vendor\", \"unknown\");\n    final String vmVersion = System.getProperty(\"java.vm.version\", \"unknown\"); \n    final String vmVendor = System.getProperty(\"java.vm.vendor\", \"unknown\"); \n    final String vmName = System.getProperty(\"java.vm.name\", \"unknown\"); \n\n    // Summary Info\n    jvm.add( \"version\", jreVersion + \" \" + vmVersion);\n    jvm.add( \"name\", jreVendor + \" \" + vmName );\n    \n    // details\n    SimpleOrderedMap<Object> java = new SimpleOrderedMap<>();\n    java.add( \"vendor\", javaVendor );\n    java.add( \"name\", javaName );\n    java.add( \"version\", javaVersion );\n    jvm.add( \"spec\", java );\n    SimpleOrderedMap<Object> jre = new SimpleOrderedMap<>();\n    jre.add( \"vendor\", jreVendor );\n    jre.add( \"version\", jreVersion );\n    jvm.add( \"jre\", jre );\n    SimpleOrderedMap<Object> vm = new SimpleOrderedMap<>();\n    vm.add( \"vendor\", vmVendor );\n    vm.add( \"name\", vmName );\n    vm.add( \"version\", vmVersion );\n    jvm.add( \"vm\", vm );\n           \n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ROOT));\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c20612f60b4b835c6e149e308e54b7677328dc18","date":1442062343,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<>();\n\n    final String javaVersion = System.getProperty(\"java.specification.version\", \"unknown\"); \n    final String javaVendor = System.getProperty(\"java.specification.vendor\", \"unknown\"); \n    final String javaName = System.getProperty(\"java.specification.name\", \"unknown\"); \n    final String jreVersion = System.getProperty(\"java.version\", \"unknown\");\n    final String jreVendor = System.getProperty(\"java.vendor\", \"unknown\");\n    final String vmVersion = System.getProperty(\"java.vm.version\", \"unknown\"); \n    final String vmVendor = System.getProperty(\"java.vm.vendor\", \"unknown\"); \n    final String vmName = System.getProperty(\"java.vm.name\", \"unknown\"); \n\n    // Summary Info\n    jvm.add( \"version\", jreVersion + \" \" + vmVersion);\n    jvm.add(NAME, jreVendor + \" \" + vmName);\n    \n    // details\n    SimpleOrderedMap<Object> java = new SimpleOrderedMap<>();\n    java.add( \"vendor\", javaVendor );\n    java.add(NAME, javaName);\n    java.add( \"version\", javaVersion );\n    jvm.add( \"spec\", java );\n    SimpleOrderedMap<Object> jre = new SimpleOrderedMap<>();\n    jre.add( \"vendor\", jreVendor );\n    jre.add( \"version\", jreVersion );\n    jvm.add( \"jre\", jre );\n    SimpleOrderedMap<Object> vm = new SimpleOrderedMap<>();\n    vm.add( \"vendor\", vmVendor );\n    vm.add(NAME, vmName);\n    vm.add( \"version\", vmVersion );\n    jvm.add( \"vm\", vm );\n           \n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ROOT));\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      if (mx.isBootClassPathSupported()) {\n        jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      }\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<>();\n\n    final String javaVersion = System.getProperty(\"java.specification.version\", \"unknown\"); \n    final String javaVendor = System.getProperty(\"java.specification.vendor\", \"unknown\"); \n    final String javaName = System.getProperty(\"java.specification.name\", \"unknown\"); \n    final String jreVersion = System.getProperty(\"java.version\", \"unknown\");\n    final String jreVendor = System.getProperty(\"java.vendor\", \"unknown\");\n    final String vmVersion = System.getProperty(\"java.vm.version\", \"unknown\"); \n    final String vmVendor = System.getProperty(\"java.vm.vendor\", \"unknown\"); \n    final String vmName = System.getProperty(\"java.vm.name\", \"unknown\"); \n\n    // Summary Info\n    jvm.add( \"version\", jreVersion + \" \" + vmVersion);\n    jvm.add(NAME, jreVendor + \" \" + vmName);\n    \n    // details\n    SimpleOrderedMap<Object> java = new SimpleOrderedMap<>();\n    java.add( \"vendor\", javaVendor );\n    java.add(NAME, javaName);\n    java.add( \"version\", javaVersion );\n    jvm.add( \"spec\", java );\n    SimpleOrderedMap<Object> jre = new SimpleOrderedMap<>();\n    jre.add( \"vendor\", jreVendor );\n    jre.add( \"version\", jreVersion );\n    jvm.add( \"jre\", jre );\n    SimpleOrderedMap<Object> vm = new SimpleOrderedMap<>();\n    vm.add( \"vendor\", vmVendor );\n    vm.add(NAME, vmName);\n    vm.add( \"version\", vmVersion );\n    jvm.add( \"vm\", vm );\n           \n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ROOT));\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24afe17ee9b62806cc187a12e64464b32d6d40f5","date":1489486414,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<>();\n\n    final String javaVersion = System.getProperty(\"java.specification.version\", \"unknown\"); \n    final String javaVendor = System.getProperty(\"java.specification.vendor\", \"unknown\"); \n    final String javaName = System.getProperty(\"java.specification.name\", \"unknown\"); \n    final String jreVersion = System.getProperty(\"java.version\", \"unknown\");\n    final String jreVendor = System.getProperty(\"java.vendor\", \"unknown\");\n    final String vmVersion = System.getProperty(\"java.vm.version\", \"unknown\"); \n    final String vmVendor = System.getProperty(\"java.vm.vendor\", \"unknown\"); \n    final String vmName = System.getProperty(\"java.vm.name\", \"unknown\"); \n\n    // Summary Info\n    jvm.add( \"version\", jreVersion + \" \" + vmVersion);\n    jvm.add(NAME, jreVendor + \" \" + vmName);\n    \n    // details\n    SimpleOrderedMap<Object> java = new SimpleOrderedMap<>();\n    java.add( \"vendor\", javaVendor );\n    java.add(NAME, javaName);\n    java.add( \"version\", javaVersion );\n    jvm.add( \"spec\", java );\n    SimpleOrderedMap<Object> jre = new SimpleOrderedMap<>();\n    jre.add( \"vendor\", jreVendor );\n    jre.add( \"version\", jreVersion );\n    jvm.add( \"jre\", jre );\n    SimpleOrderedMap<Object> vm = new SimpleOrderedMap<>();\n    vm.add( \"vendor\", vmVendor );\n    vm.add(NAME, vmName);\n    vm.add( \"version\", vmVersion );\n    jvm.add( \"vm\", vm );\n           \n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ROOT));\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      if (mx.isBootClassPathSupported()) {\n        jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      }\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", getInputArgumentsRedacted(mx));\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<>();\n\n    final String javaVersion = System.getProperty(\"java.specification.version\", \"unknown\"); \n    final String javaVendor = System.getProperty(\"java.specification.vendor\", \"unknown\"); \n    final String javaName = System.getProperty(\"java.specification.name\", \"unknown\"); \n    final String jreVersion = System.getProperty(\"java.version\", \"unknown\");\n    final String jreVendor = System.getProperty(\"java.vendor\", \"unknown\");\n    final String vmVersion = System.getProperty(\"java.vm.version\", \"unknown\"); \n    final String vmVendor = System.getProperty(\"java.vm.vendor\", \"unknown\"); \n    final String vmName = System.getProperty(\"java.vm.name\", \"unknown\"); \n\n    // Summary Info\n    jvm.add( \"version\", jreVersion + \" \" + vmVersion);\n    jvm.add(NAME, jreVendor + \" \" + vmName);\n    \n    // details\n    SimpleOrderedMap<Object> java = new SimpleOrderedMap<>();\n    java.add( \"vendor\", javaVendor );\n    java.add(NAME, javaName);\n    java.add( \"version\", javaVersion );\n    jvm.add( \"spec\", java );\n    SimpleOrderedMap<Object> jre = new SimpleOrderedMap<>();\n    jre.add( \"vendor\", jreVendor );\n    jre.add( \"version\", jreVersion );\n    jvm.add( \"jre\", jre );\n    SimpleOrderedMap<Object> vm = new SimpleOrderedMap<>();\n    vm.add( \"vendor\", vmVendor );\n    vm.add(NAME, vmName);\n    vm.add( \"version\", vmVersion );\n    jvm.add( \"vm\", vm );\n           \n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ROOT));\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      if (mx.isBootClassPathSupported()) {\n        jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      }\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84c8c7a47fe3b0d8d374144fbcbb1088fd191148","date":1489651910,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<>();\n\n    final String javaVersion = System.getProperty(\"java.specification.version\", \"unknown\"); \n    final String javaVendor = System.getProperty(\"java.specification.vendor\", \"unknown\"); \n    final String javaName = System.getProperty(\"java.specification.name\", \"unknown\"); \n    final String jreVersion = System.getProperty(\"java.version\", \"unknown\");\n    final String jreVendor = System.getProperty(\"java.vendor\", \"unknown\");\n    final String vmVersion = System.getProperty(\"java.vm.version\", \"unknown\"); \n    final String vmVendor = System.getProperty(\"java.vm.vendor\", \"unknown\"); \n    final String vmName = System.getProperty(\"java.vm.name\", \"unknown\"); \n\n    // Summary Info\n    jvm.add( \"version\", jreVersion + \" \" + vmVersion);\n    jvm.add(NAME, jreVendor + \" \" + vmName);\n    \n    // details\n    SimpleOrderedMap<Object> java = new SimpleOrderedMap<>();\n    java.add( \"vendor\", javaVendor );\n    java.add(NAME, javaName);\n    java.add( \"version\", javaVersion );\n    jvm.add( \"spec\", java );\n    SimpleOrderedMap<Object> jre = new SimpleOrderedMap<>();\n    jre.add( \"vendor\", jreVendor );\n    jre.add( \"version\", jreVersion );\n    jvm.add( \"jre\", jre );\n    SimpleOrderedMap<Object> vm = new SimpleOrderedMap<>();\n    vm.add( \"vendor\", vmVendor );\n    vm.add(NAME, vmName);\n    vm.add( \"version\", vmVersion );\n    jvm.add( \"vm\", vm );\n           \n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ROOT));\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      if (mx.isBootClassPathSupported()) {\n        jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      }\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", getInputArgumentsRedacted(mx));\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<>();\n\n    final String javaVersion = System.getProperty(\"java.specification.version\", \"unknown\"); \n    final String javaVendor = System.getProperty(\"java.specification.vendor\", \"unknown\"); \n    final String javaName = System.getProperty(\"java.specification.name\", \"unknown\"); \n    final String jreVersion = System.getProperty(\"java.version\", \"unknown\");\n    final String jreVendor = System.getProperty(\"java.vendor\", \"unknown\");\n    final String vmVersion = System.getProperty(\"java.vm.version\", \"unknown\"); \n    final String vmVendor = System.getProperty(\"java.vm.vendor\", \"unknown\"); \n    final String vmName = System.getProperty(\"java.vm.name\", \"unknown\"); \n\n    // Summary Info\n    jvm.add( \"version\", jreVersion + \" \" + vmVersion);\n    jvm.add(NAME, jreVendor + \" \" + vmName);\n    \n    // details\n    SimpleOrderedMap<Object> java = new SimpleOrderedMap<>();\n    java.add( \"vendor\", javaVendor );\n    java.add(NAME, javaName);\n    java.add( \"version\", javaVersion );\n    jvm.add( \"spec\", java );\n    SimpleOrderedMap<Object> jre = new SimpleOrderedMap<>();\n    jre.add( \"vendor\", jreVendor );\n    jre.add( \"version\", jreVersion );\n    jvm.add( \"jre\", jre );\n    SimpleOrderedMap<Object> vm = new SimpleOrderedMap<>();\n    vm.add( \"vendor\", vmVendor );\n    vm.add(NAME, vmName);\n    vm.add( \"version\", vmVersion );\n    jvm.add( \"vm\", vm );\n           \n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ROOT));\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      if (mx.isBootClassPathSupported()) {\n        jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      }\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SystemInfoHandler#getJvmInfo().mjava","sourceNew":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<>();\n\n    final String javaVersion = System.getProperty(\"java.specification.version\", \"unknown\"); \n    final String javaVendor = System.getProperty(\"java.specification.vendor\", \"unknown\"); \n    final String javaName = System.getProperty(\"java.specification.name\", \"unknown\"); \n    final String jreVersion = System.getProperty(\"java.version\", \"unknown\");\n    final String jreVendor = System.getProperty(\"java.vendor\", \"unknown\");\n    final String vmVersion = System.getProperty(\"java.vm.version\", \"unknown\"); \n    final String vmVendor = System.getProperty(\"java.vm.vendor\", \"unknown\"); \n    final String vmName = System.getProperty(\"java.vm.name\", \"unknown\"); \n\n    // Summary Info\n    jvm.add( \"version\", jreVersion + \" \" + vmVersion);\n    jvm.add(NAME, jreVendor + \" \" + vmName);\n    \n    // details\n    SimpleOrderedMap<Object> java = new SimpleOrderedMap<>();\n    java.add( \"vendor\", javaVendor );\n    java.add(NAME, javaName);\n    java.add( \"version\", javaVersion );\n    jvm.add( \"spec\", java );\n    SimpleOrderedMap<Object> jre = new SimpleOrderedMap<>();\n    jre.add( \"vendor\", jreVendor );\n    jre.add( \"version\", jreVersion );\n    jvm.add( \"jre\", jre );\n    SimpleOrderedMap<Object> vm = new SimpleOrderedMap<>();\n    vm.add( \"vendor\", vmVendor );\n    vm.add(NAME, vmName);\n    vm.add( \"version\", vmVersion );\n    jvm.add( \"vm\", vm );\n           \n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ROOT));\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      if (mx.isBootClassPathSupported()) {\n        jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      }\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", getInputArgumentsRedacted(mx));\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","sourceOld":"  /**\n   * Get JVM Info - including memory info\n   */\n  public static SimpleOrderedMap<Object> getJvmInfo()\n  {\n    SimpleOrderedMap<Object> jvm = new SimpleOrderedMap<>();\n\n    final String javaVersion = System.getProperty(\"java.specification.version\", \"unknown\"); \n    final String javaVendor = System.getProperty(\"java.specification.vendor\", \"unknown\"); \n    final String javaName = System.getProperty(\"java.specification.name\", \"unknown\"); \n    final String jreVersion = System.getProperty(\"java.version\", \"unknown\");\n    final String jreVendor = System.getProperty(\"java.vendor\", \"unknown\");\n    final String vmVersion = System.getProperty(\"java.vm.version\", \"unknown\"); \n    final String vmVendor = System.getProperty(\"java.vm.vendor\", \"unknown\"); \n    final String vmName = System.getProperty(\"java.vm.name\", \"unknown\"); \n\n    // Summary Info\n    jvm.add( \"version\", jreVersion + \" \" + vmVersion);\n    jvm.add(NAME, jreVendor + \" \" + vmName);\n    \n    // details\n    SimpleOrderedMap<Object> java = new SimpleOrderedMap<>();\n    java.add( \"vendor\", javaVendor );\n    java.add(NAME, javaName);\n    java.add( \"version\", javaVersion );\n    jvm.add( \"spec\", java );\n    SimpleOrderedMap<Object> jre = new SimpleOrderedMap<>();\n    jre.add( \"vendor\", jreVendor );\n    jre.add( \"version\", jreVersion );\n    jvm.add( \"jre\", jre );\n    SimpleOrderedMap<Object> vm = new SimpleOrderedMap<>();\n    vm.add( \"vendor\", vmVendor );\n    vm.add(NAME, vmName);\n    vm.add( \"version\", vmVersion );\n    jvm.add( \"vm\", vm );\n           \n    \n    Runtime runtime = Runtime.getRuntime();\n    jvm.add( \"processors\", runtime.availableProcessors() );\n    \n    // not thread safe, but could be thread local\n    DecimalFormat df = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ROOT));\n\n    SimpleOrderedMap<Object> mem = new SimpleOrderedMap<>();\n    SimpleOrderedMap<Object> raw = new SimpleOrderedMap<>();\n    long free = runtime.freeMemory();\n    long max = runtime.maxMemory();\n    long total = runtime.totalMemory();\n    long used = total - free;\n    double percentUsed = ((double)(used)/(double)max)*100;\n    raw.add(\"free\",  free );\n    mem.add(\"free\",  humanReadableUnits(free, df));\n    raw.add(\"total\", total );\n    mem.add(\"total\", humanReadableUnits(total, df));\n    raw.add(\"max\",   max );\n    mem.add(\"max\",   humanReadableUnits(max, df));\n    raw.add(\"used\",  used );\n    mem.add(\"used\",  humanReadableUnits(used, df) + \n            \" (%\" + df.format(percentUsed) + \")\");\n    raw.add(\"used%\", percentUsed);\n\n    mem.add(\"raw\", raw);\n    jvm.add(\"memory\", mem);\n\n    // JMX properties -- probably should be moved to a different handler\n    SimpleOrderedMap<Object> jmx = new SimpleOrderedMap<>();\n    try{\n      RuntimeMXBean mx = ManagementFactory.getRuntimeMXBean();\n      if (mx.isBootClassPathSupported()) {\n        jmx.add( \"bootclasspath\", mx.getBootClassPath());\n      }\n      jmx.add( \"classpath\", mx.getClassPath() );\n\n      // the input arguments passed to the Java virtual machine\n      // which does not include the arguments to the main method.\n      jmx.add( \"commandLineArgs\", mx.getInputArguments());\n\n      jmx.add( \"startTime\", new Date(mx.getStartTime()));\n      jmx.add( \"upTimeMS\",  mx.getUptime() );\n\n    }\n    catch (Exception e) {\n      log.warn(\"Error getting JMX properties\", e);\n    }\n    jvm.add( \"jmx\", jmx );\n    return jvm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e15d8080fa57709d0f0aa96ec3799997350137f6"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"407687e67faf6e1f02a211ca078d8e3eed631027":["34c293e9c1585a07c0532058631196bcd9a6cbfe","e15d8080fa57709d0f0aa96ec3799997350137f6"],"24afe17ee9b62806cc187a12e64464b32d6d40f5":["c20612f60b4b835c6e149e308e54b7677328dc18"],"e15d8080fa57709d0f0aa96ec3799997350137f6":["34c293e9c1585a07c0532058631196bcd9a6cbfe"],"46d8ada1fff8d18cb197c38c7983225162599948":["c26f00b574427b55127e869b935845554afde1fa","34c293e9c1585a07c0532058631196bcd9a6cbfe"],"c20612f60b4b835c6e149e308e54b7677328dc18":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84c8c7a47fe3b0d8d374144fbcbb1088fd191148":["c20612f60b4b835c6e149e308e54b7677328dc18"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"34c293e9c1585a07c0532058631196bcd9a6cbfe":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","34c293e9c1585a07c0532058631196bcd9a6cbfe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","1390137e395d2f07f9ba5b8c43d293befe84d563"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab68488225b6a6c357dda72ed11dedca9914a192":["c20612f60b4b835c6e149e308e54b7677328dc18","84c8c7a47fe3b0d8d374144fbcbb1088fd191148"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24afe17ee9b62806cc187a12e64464b32d6d40f5"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"c26f00b574427b55127e869b935845554afde1fa":["46d8ada1fff8d18cb197c38c7983225162599948","34c293e9c1585a07c0532058631196bcd9a6cbfe","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"24afe17ee9b62806cc187a12e64464b32d6d40f5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e15d8080fa57709d0f0aa96ec3799997350137f6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"c20612f60b4b835c6e149e308e54b7677328dc18":["24afe17ee9b62806cc187a12e64464b32d6d40f5","84c8c7a47fe3b0d8d374144fbcbb1088fd191148","ab68488225b6a6c357dda72ed11dedca9914a192"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"84c8c7a47fe3b0d8d374144fbcbb1088fd191148":["ab68488225b6a6c357dda72ed11dedca9914a192"],"34c293e9c1585a07c0532058631196bcd9a6cbfe":["407687e67faf6e1f02a211ca078d8e3eed631027","e15d8080fa57709d0f0aa96ec3799997350137f6","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["c20612f60b4b835c6e149e308e54b7677328dc18","d2638f781be724518ff6c2263d14a48cf6e68017"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","d2638f781be724518ff6c2263d14a48cf6e68017","a258fbb26824fd104ed795e5d9033d2d040049ee","ab68488225b6a6c357dda72ed11dedca9914a192","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}