{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","commits":[{"id":"ecaea79e307d83311c31273b0ea89b9fdb0c5a32","date":1287584790,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This test differs from the original QueryParser, showing how the precedence\n   * issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\", \"field\");\n    query2 = parser.parse(\"A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\", \"field\");\n    query2 = parser.parse(\"A (-B +C)\", \"field\");\n    assertEquals(query1, query2);\n    \n    parser.setDefaultOperator(Operator.AND);\n    query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B OR C\", \"field\");\n    query2 = parser.parse(\"(+A -B) OR C\", \"field\");\n    assertEquals(query1, query2);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8017ab6544f30f93b106e419e7298173bad77f69","date":1287608126,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This test differs from the original QueryParser, showing how the precedence\n   * issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\", \"field\");\n    query2 = parser.parse(\"A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\", \"field\");\n    query2 = parser.parse(\"A (-B +C)\", \"field\");\n    assertEquals(query1, query2);\n    \n    parser.setDefaultOperator(Operator.AND);\n    query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B OR C\", \"field\");\n    query2 = parser.parse(\"(+A -B) OR C\", \"field\");\n    assertEquals(query1, query2);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This test differs from the original QueryParser, showing how the precedence\n   * issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\", \"field\");\n    query2 = parser.parse(\"A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\", \"field\");\n    query2 = parser.parse(\"A (-B +C)\", \"field\");\n    assertEquals(query1, query2);\n    \n    parser.setDefaultOperator(Operator.AND);\n    query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B OR C\", \"field\");\n    query2 = parser.parse(\"(+A -B) OR C\", \"field\");\n    assertEquals(query1, query2);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","sourceNew":"  /**\n   * This test differs from the original QueryParser, showing how the precedence\n   * issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\", \"field\");\n    query2 = parser.parse(\"A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\", \"field\");\n    query2 = parser.parse(\"A (-B +C)\", \"field\");\n    assertEquals(query1, query2);\n    \n    parser.setDefaultOperator(Operator.AND);\n    query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B OR C\", \"field\");\n    query2 = parser.parse(\"(+A -B) OR C\", \"field\");\n    assertEquals(query1, query2);\n    \n  }\n\n","sourceOld":"  /**\n   * This test differs from the original QueryParser, showing how the precedence\n   * issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\", \"field\");\n    query2 = parser.parse(\"A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\", \"field\");\n    query2 = parser.parse(\"A (-B +C)\", \"field\");\n    assertEquals(query1, query2);\n    \n    parser.setDefaultOperator(Operator.AND);\n    query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B OR C\", \"field\");\n    query2 = parser.parse(\"(+A -B) OR C\", \"field\");\n    assertEquals(query1, query2);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","sourceNew":"  /**\n   * This test differs from the original QueryParser, showing how the precedence\n   * issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\", \"field\");\n    query2 = parser.parse(\"A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\", \"field\");\n    query2 = parser.parse(\"A (-B +C)\", \"field\");\n    assertEquals(query1, query2);\n    \n    parser.setDefaultOperator(Operator.AND);\n    query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B OR C\", \"field\");\n    query2 = parser.parse(\"(+A -B) OR C\", \"field\");\n    assertEquals(query1, query2);\n    \n  }\n\n","sourceOld":"  /**\n   * This test differs from the original QueryParser, showing how the precedence\n   * issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\", \"field\");\n    query2 = parser.parse(\"A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\", \"field\");\n    query2 = parser.parse(\"A (-B +C)\", \"field\");\n    assertEquals(query1, query2);\n    \n    parser.setDefaultOperator(Operator.AND);\n    query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B OR C\", \"field\");\n    query2 = parser.parse(\"(+A -B) OR C\", \"field\");\n    assertEquals(query1, query2);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","sourceNew":"  /**\n   * This test differs from the original QueryParser, showing how the precedence\n   * issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\", \"field\");\n    query2 = parser.parse(\"A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\", \"field\");\n    query2 = parser.parse(\"A (-B +C)\", \"field\");\n    assertEquals(query1, query2);\n    \n    parser.setDefaultOperator(Operator.AND);\n    query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B OR C\", \"field\");\n    query2 = parser.parse(\"(+A -B) OR C\", \"field\");\n    assertEquals(query1, query2);\n    \n  }\n\n","sourceOld":"  /**\n   * This test differs from the original QueryParser, showing how the precedence\n   * issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\", \"field\");\n    query2 = parser.parse(\"A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\", \"field\");\n    query2 = parser.parse(\"A (-B +C)\", \"field\");\n    assertEquals(query1, query2);\n    \n    parser.setDefaultOperator(Operator.AND);\n    query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B OR C\", \"field\");\n    query2 = parser.parse(\"(+A -B) OR C\", \"field\");\n    assertEquals(query1, query2);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","sourceNew":"  /**\n   * This test differs from the original QueryParser, showing how the precedence\n   * issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\", \"field\");\n    query2 = parser.parse(\"A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\", \"field\");\n    query2 = parser.parse(\"A (-B +C)\", \"field\");\n    assertEquals(query1, query2);\n    \n    parser.setDefaultOperator(Operator.AND);\n    query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B OR C\", \"field\");\n    query2 = parser.parse(\"(+A -B) OR C\", \"field\");\n    assertEquals(query1, query2);\n    \n  }\n\n","sourceOld":"  /**\n   * This test differs from the original QueryParser, showing how the precedence\n   * issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\", \"field\");\n    query2 = parser.parse(\"A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\", \"field\");\n    query2 = parser.parse(\"A (-B +C)\", \"field\");\n    assertEquals(query1, query2);\n    \n    parser.setDefaultOperator(Operator.AND);\n    query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B OR C\", \"field\");\n    query2 = parser.parse(\"(+A -B) OR C\", \"field\");\n    assertEquals(query1, query2);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c1fe1aedb70da4139fd9f2f7e92e572017fd083","date":1309827452,"type":3,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","sourceNew":"  /**\n   * This test differs from the original QueryParser, showing how the precedence\n   * issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\", \"field\");\n    query2 = parser.parse(\"A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\", \"field\");\n    query2 = parser.parse(\"A (-B +C)\", \"field\");\n    assertEquals(query1, query2);\n    \n    parser.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B OR C\", \"field\");\n    query2 = parser.parse(\"(+A -B) OR C\", \"field\");\n    assertEquals(query1, query2);\n    \n  }\n\n","sourceOld":"  /**\n   * This test differs from the original QueryParser, showing how the precedence\n   * issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\", \"field\");\n    query2 = parser.parse(\"A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\", \"field\");\n    query2 = parser.parse(\"A (-B +C)\", \"field\");\n    assertEquals(query1, query2);\n    \n    parser.setDefaultOperator(Operator.AND);\n    query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B OR C\", \"field\");\n    query2 = parser.parse(\"(+A -B) OR C\", \"field\");\n    assertEquals(query1, query2);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","sourceNew":"  /**\n   * This test differs from the original QueryParser, showing how the precedence\n   * issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\", \"field\");\n    query2 = parser.parse(\"A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\", \"field\");\n    query2 = parser.parse(\"A (-B +C)\", \"field\");\n    assertEquals(query1, query2);\n    \n    parser.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B OR C\", \"field\");\n    query2 = parser.parse(\"(+A -B) OR C\", \"field\");\n    assertEquals(query1, query2);\n    \n  }\n\n","sourceOld":"  /**\n   * This test differs from the original QueryParser, showing how the precedence\n   * issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\", \"field\");\n    query2 = parser.parse(\"A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\", \"field\");\n    query2 = parser.parse(\"A (-B +C)\", \"field\");\n    assertEquals(query1, query2);\n    \n    parser.setDefaultOperator(Operator.AND);\n    query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B OR C\", \"field\");\n    query2 = parser.parse(\"(+A -B) OR C\", \"field\");\n    assertEquals(query1, query2);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","sourceNew":"  /**\n   * This test differs from the original QueryParser, showing how the precedence\n   * issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\", \"field\");\n    query2 = parser.parse(\"A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\", \"field\");\n    query2 = parser.parse(\"A (-B +C)\", \"field\");\n    assertEquals(query1, query2);\n    \n    parser.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B OR C\", \"field\");\n    query2 = parser.parse(\"(+A -B) OR C\", \"field\");\n    assertEquals(query1, query2);\n    \n  }\n\n","sourceOld":"  /**\n   * This test differs from the original QueryParser, showing how the precedence\n   * issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\", \"field\");\n    query2 = parser.parse(\"A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\", \"field\");\n    query2 = parser.parse(\"A (-B +C)\", \"field\");\n    assertEquals(query1, query2);\n    \n    parser.setDefaultOperator(Operator.AND);\n    query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B OR C\", \"field\");\n    query2 = parser.parse(\"(+A -B) OR C\", \"field\");\n    assertEquals(query1, query2);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedence().mjava","sourceNew":"  /**\n   * This test differs from the original QueryParser, showing how the precedence\n   * issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\", \"field\");\n    query2 = parser.parse(\"A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\", \"field\");\n    query2 = parser.parse(\"A (-B +C)\", \"field\");\n    assertEquals(query1, query2);\n    \n    parser.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B OR C\", \"field\");\n    query2 = parser.parse(\"(+A -B) OR C\", \"field\");\n    assertEquals(query1, query2);\n    \n  }\n\n","sourceOld":"  /**\n   * This test differs from the original QueryParser, showing how the precedence\n   * issue has been corrected.\n   */\n  public void testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\", \"field\");\n    query2 = parser.parse(\"A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\", \"field\");\n    query2 = parser.parse(\"A (-B +C)\", \"field\");\n    assertEquals(query1, query2);\n    \n    parser.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    query1 = parser.parse(\"A AND B OR C AND D\", \"field\");\n    query2 = parser.parse(\"(A AND B) OR (C AND D)\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(A B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\", \"field\");\n    query2 = parser.parse(\"(+A +B) C\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\", \"field\");\n    query2 = parser.parse(\"+A -B\", \"field\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B OR C\", \"field\");\n    query2 = parser.parse(\"(+A -B) OR C\", \"field\");\n    assertEquals(query1, query2);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["8017ab6544f30f93b106e419e7298173bad77f69","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f2c5f0cb44df114db4228c8f77861714b5cabaea","2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"2c1fe1aedb70da4139fd9f2f7e92e572017fd083":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"a3776dccca01c11e7046323cfad46a3b4a471233":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8017ab6544f30f93b106e419e7298173bad77f69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"2c1fe1aedb70da4139fd9f2f7e92e572017fd083":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","8017ab6544f30f93b106e419e7298173bad77f69"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","2c1fe1aedb70da4139fd9f2f7e92e572017fd083","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ecaea79e307d83311c31273b0ea89b9fdb0c5a32","8017ab6544f30f93b106e419e7298173bad77f69"],"8017ab6544f30f93b106e419e7298173bad77f69":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}