{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#advanceShallow(int).mjava","commits":[{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#advanceShallow(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int advanceShallow(int target) throws IOException {\n      if (target > nextSkipDoc) {\n        // always plus one to fix the result, since skip position in Lucene50SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n  \n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();             // actually, this is just lastSkipEntry\n          seekTo = skipper.getDocPointer();       // delay the seek\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      assert nextSkipDoc >= target;\n      return nextSkipDoc;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a692be6c8e120ef6dbfcd5dde3de42815813cd2","date":1525265372,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#advanceShallow(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#advanceShallow(int).mjava","sourceNew":"    @Override\n    public void advanceShallow(int target) throws IOException {\n      if (target > nextSkipDoc) {\n        // always plus one to fix the result, since skip position in Lucene50SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n  \n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();             // actually, this is just lastSkipEntry\n          seekTo = skipper.getDocPointer();       // delay the seek\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      assert nextSkipDoc >= target;\n    }\n\n","sourceOld":"    @Override\n    public int advanceShallow(int target) throws IOException {\n      if (target > nextSkipDoc) {\n        // always plus one to fix the result, since skip position in Lucene50SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n  \n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();             // actually, this is just lastSkipEntry\n          seekTo = skipper.getDocPointer();       // delay the seek\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      assert nextSkipDoc >= target;\n      return nextSkipDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9089237f2fb93105f12a1135e60257f4cf8ed41","date":1562086738,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#advanceShallow(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#advanceShallow(int).mjava","sourceNew":"    @Override\n    public void advanceShallow(int target) throws IOException {\n      if (target > nextSkipDoc) {\n        // always plus one to fix the result, since skip position in Lucene50SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n  \n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n          posDocUpTo = docUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();             // actually, this is just lastSkipEntry\n          seekTo = skipper.getDocPointer();       // delay the seek\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      assert nextSkipDoc >= target;\n    }\n\n","sourceOld":"    @Override\n    public void advanceShallow(int target) throws IOException {\n      if (target > nextSkipDoc) {\n        // always plus one to fix the result, since skip position in Lucene50SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n  \n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();             // actually, this is just lastSkipEntry\n          seekTo = skipper.getDocPointer();       // delay the seek\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      assert nextSkipDoc >= target;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#advanceShallow(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#advanceShallow(int).mjava","sourceNew":"    @Override\n    public void advanceShallow(int target) throws IOException {\n      if (target > nextSkipDoc) {\n        // always plus one to fix the result, since skip position in Lucene50SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n  \n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n          posDocUpTo = docUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();             // actually, this is just lastSkipEntry\n          seekTo = skipper.getDocPointer();       // delay the seek\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      assert nextSkipDoc >= target;\n    }\n\n","sourceOld":"    @Override\n    public void advanceShallow(int target) throws IOException {\n      if (target > nextSkipDoc) {\n        // always plus one to fix the result, since skip position in Lucene50SkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n  \n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n          posDocUpTo = docUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();\n          posPendingFP = skipper.getPosPointer();\n          payPendingFP = skipper.getPayPointer();\n          posPendingCount = skipper.getPosBufferUpto();\n          lastStartOffset = 0; // new document\n          payloadByteUpto = skipper.getPayloadByteUpto();             // actually, this is just lastSkipEntry\n          seekTo = skipper.getDocPointer();       // delay the seek\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      assert nextSkipDoc >= target;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a9089237f2fb93105f12a1135e60257f4cf8ed41"],"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["622a708571e534680618b3c5e0c28ac539a47776"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9089237f2fb93105f12a1135e60257f4cf8ed41":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["a9089237f2fb93105f12a1135e60257f4cf8ed41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["622a708571e534680618b3c5e0c28ac539a47776"],"622a708571e534680618b3c5e0c28ac539a47776":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"a9089237f2fb93105f12a1135e60257f4cf8ed41":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}