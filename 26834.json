{"path":"lucene/core/src/test/org/apache/lucene/document/BaseShapeTestCase.Validator#testComponentQuery(Component2D,Field[]).mjava","commits":[{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/BaseShapeTestCase.Validator#testComponentQuery(Component2D,Field[]).mjava","pathOld":"/dev/null","sourceNew":"    public boolean testComponentQuery(Component2D query, Field[] fields) {\n      ShapeField.DecodedTriangle decodedTriangle = new ShapeField.DecodedTriangle();\n      for (Field field : fields) {\n        boolean intersects;\n        boolean contains;\n        ShapeField.decodeTriangle(field.binaryValue().bytes, decodedTriangle);\n        switch (decodedTriangle.type) {\n          case POINT: {\n            double y = encoder.decodeY(decodedTriangle.aY);\n            double x = encoder.decodeX(decodedTriangle.aX);\n            intersects = query.contains(x, y);\n            contains = intersects;\n            break;\n          }\n          case LINE: {\n            double aY = encoder.decodeY(decodedTriangle.aY);\n            double aX = encoder.decodeX(decodedTriangle.aX);\n            double bY = encoder.decodeY(decodedTriangle.bY);\n            double bX = encoder.decodeX(decodedTriangle.bX);\n            intersects = query.intersectsLine(aX, aY, bX, bY);\n            contains = query.containsLine(aX, aY, bX, bY);\n            break;\n          }\n          case TRIANGLE: {\n            double aY = encoder.decodeY(decodedTriangle.aY);\n            double aX = encoder.decodeX(decodedTriangle.aX);\n            double bY = encoder.decodeY(decodedTriangle.bY);\n            double bX = encoder.decodeX(decodedTriangle.bX);\n            double cY = encoder.decodeY(decodedTriangle.cY);\n            double cX = encoder.decodeX(decodedTriangle.cX);\n            intersects = query.intersectsTriangle(aX, aY, bX, bY, cX, cY);\n            contains = query.containsTriangle(aX, aY, bX, bY, cX, cY);\n            break;\n          }\n          default:\n            throw new IllegalArgumentException(\"Unsupported triangle type :[\" + decodedTriangle.type + \"]\");\n        }\n        assertTrue((contains == intersects) || (contains == false && intersects == true));\n        if (queryRelation == QueryRelation.DISJOINT && intersects) {\n          return false;\n        } else if (queryRelation == QueryRelation.WITHIN && contains == false) {\n          return false;\n        } else if (queryRelation == QueryRelation.INTERSECTS && intersects) {\n          return true;\n        }\n      }\n      return queryRelation == QueryRelation.INTERSECTS ? false : true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c568a1e2a5125c2245150eebb030a81baa158b31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"]},"commit2Childs":{"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c568a1e2a5125c2245150eebb030a81baa158b31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}