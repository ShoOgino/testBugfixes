{"path":"backwards/src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens=(getBoost() != 1.0) || (getMinimumNumberShouldMatch()>0) ;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      if (c.isProhibited())\n        buffer.append(\"-\");\n      else if (c.isRequired())\n        buffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery != null) {\n        if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n          buffer.append(\"(\");\n          buffer.append(subQuery.toString(field));\n          buffer.append(\")\");\n        } else {\n          buffer.append(subQuery.toString(field));\n        }\n      } else {\n        buffer.append(\"null\");\n      }\n\n      if (i != clauses.size()-1)\n        buffer.append(\" \");\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f)\n    {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/BooleanQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens=(getBoost() != 1.0) || (getMinimumNumberShouldMatch()>0) ;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      if (c.isProhibited())\n        buffer.append(\"-\");\n      else if (c.isRequired())\n        buffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery != null) {\n        if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n          buffer.append(\"(\");\n          buffer.append(subQuery.toString(field));\n          buffer.append(\")\");\n        } else {\n          buffer.append(subQuery.toString(field));\n        }\n      } else {\n        buffer.append(\"null\");\n      }\n\n      if (i != clauses.size()-1)\n        buffer.append(\" \");\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f)\n    {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens=(getBoost() != 1.0) || (getMinimumNumberShouldMatch()>0) ;\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      if (c.isProhibited())\n        buffer.append(\"-\");\n      else if (c.isRequired())\n        buffer.append(\"+\");\n\n      Query subQuery = c.getQuery();\n      if (subQuery != null) {\n        if (subQuery instanceof BooleanQuery) {\t  // wrap sub-bools in parens\n          buffer.append(\"(\");\n          buffer.append(subQuery.toString(field));\n          buffer.append(\")\");\n        } else {\n          buffer.append(subQuery.toString(field));\n        }\n      } else {\n        buffer.append(\"null\");\n      }\n\n      if (i != clauses.size()-1)\n        buffer.append(\" \");\n    }\n\n    if (needParens) {\n      buffer.append(\")\");\n    }\n\n    if (getMinimumNumberShouldMatch()>0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n\n    if (getBoost() != 1.0f)\n    {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}