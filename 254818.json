{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource#asDoubleValuesSource().mjava","commits":[{"id":"9cf250cb8fdff62f4b753866d44e5bf59bfd1616","date":1483789944,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource#asDoubleValuesSource().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expose this ValueSource as a DoubleValuesSource\n   */\n  public DoubleValuesSource asDoubleValuesSource() {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        Map context = new HashMap<>();\n        FakeScorer scorer = new FakeScorer();\n        context.put(\"scorer\", scorer);\n        FunctionValues fv = ValueSource.this.getValues(context, ctx);\n        return new DoubleValues() {\n\n          @Override\n          public double doubleValue() throws IOException {\n            return fv.doubleVal(scorer.current);\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            scorer.current = doc;\n            if (scores != null && scores.advanceExact(doc)) {\n              scorer.score = (float) scores.doubleValue();\n            }\n            else\n              scorer.score = 0;\n            return fv.exists(doc);\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;  // be on the safe side\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource#asDoubleValuesSource().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expose this ValueSource as a DoubleValuesSource\n   */\n  public DoubleValuesSource asDoubleValuesSource() {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        Map context = new HashMap<>();\n        FakeScorer scorer = new FakeScorer();\n        context.put(\"scorer\", scorer);\n        FunctionValues fv = ValueSource.this.getValues(context, ctx);\n        return new DoubleValues() {\n\n          @Override\n          public double doubleValue() throws IOException {\n            return fv.doubleVal(scorer.current);\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            scorer.current = doc;\n            if (scores != null && scores.advanceExact(doc)) {\n              scorer.score = (float) scores.doubleValue();\n            }\n            else\n              scorer.score = 0;\n            return fv.exists(doc);\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;  // be on the safe side\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"501fdb8d708778ae5368dd5c44879e1d46487e43","date":1494401395,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource#asDoubleValuesSource().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource#asDoubleValuesSource().mjava","sourceNew":"  /**\n   * Expose this ValueSource as a DoubleValuesSource\n   */\n  public DoubleValuesSource asDoubleValuesSource() {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        Map context = new HashMap<>();\n        FakeScorer scorer = new FakeScorer();\n        context.put(\"scorer\", scorer);\n        FunctionValues fv = ValueSource.this.getValues(context, ctx);\n        return new DoubleValues() {\n\n          @Override\n          public double doubleValue() throws IOException {\n            return fv.doubleVal(scorer.current);\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            scorer.current = doc;\n            if (scores != null && scores.advanceExact(doc)) {\n              scorer.score = (float) scores.doubleValue();\n            }\n            else\n              scorer.score = 0;\n            return fv.exists(doc);\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;  // be on the safe side\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n        Map context = new HashMap<>();\n        FakeScorer scorer = new FakeScorer();\n        scorer.score = scoreExplanation.getValue();\n        context.put(\"scorer\", scorer);\n        FunctionValues fv = ValueSource.this.getValues(context, ctx);\n        return fv.explain(docId);\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Expose this ValueSource as a DoubleValuesSource\n   */\n  public DoubleValuesSource asDoubleValuesSource() {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        Map context = new HashMap<>();\n        FakeScorer scorer = new FakeScorer();\n        context.put(\"scorer\", scorer);\n        FunctionValues fv = ValueSource.this.getValues(context, ctx);\n        return new DoubleValues() {\n\n          @Override\n          public double doubleValue() throws IOException {\n            return fv.doubleVal(scorer.current);\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            scorer.current = doc;\n            if (scores != null && scores.advanceExact(doc)) {\n              scorer.score = (float) scores.doubleValue();\n            }\n            else\n              scorer.score = 0;\n            return fv.exists(doc);\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;  // be on the safe side\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource#asDoubleValuesSource().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource#asDoubleValuesSource().mjava","sourceNew":"  /**\n   * Expose this ValueSource as a DoubleValuesSource\n   */\n  public DoubleValuesSource asDoubleValuesSource() {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        Map context = new HashMap<>();\n        FakeScorer scorer = new FakeScorer();\n        context.put(\"scorer\", scorer);\n        FunctionValues fv = ValueSource.this.getValues(context, ctx);\n        return new DoubleValues() {\n\n          @Override\n          public double doubleValue() throws IOException {\n            return fv.doubleVal(scorer.current);\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            scorer.current = doc;\n            if (scores != null && scores.advanceExact(doc)) {\n              scorer.score = (float) scores.doubleValue();\n            }\n            else\n              scorer.score = 0;\n            return fv.exists(doc);\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;  // be on the safe side\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n        Map context = new HashMap<>();\n        FakeScorer scorer = new FakeScorer();\n        scorer.score = scoreExplanation.getValue();\n        context.put(\"scorer\", scorer);\n        FunctionValues fv = ValueSource.this.getValues(context, ctx);\n        return fv.explain(docId);\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Expose this ValueSource as a DoubleValuesSource\n   */\n  public DoubleValuesSource asDoubleValuesSource() {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        Map context = new HashMap<>();\n        FakeScorer scorer = new FakeScorer();\n        context.put(\"scorer\", scorer);\n        FunctionValues fv = ValueSource.this.getValues(context, ctx);\n        return new DoubleValues() {\n\n          @Override\n          public double doubleValue() throws IOException {\n            return fv.doubleVal(scorer.current);\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            scorer.current = doc;\n            if (scores != null && scores.advanceExact(doc)) {\n              scorer.score = (float) scores.doubleValue();\n            }\n            else\n              scorer.score = 0;\n            return fv.exists(doc);\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;  // be on the safe side\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ea72350b903b90cb4fda2a5adbce31aa00c074","date":1498575219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource#asDoubleValuesSource().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource#asDoubleValuesSource().mjava","sourceNew":"  /**\n   * Expose this ValueSource as a DoubleValuesSource\n   */\n  public DoubleValuesSource asDoubleValuesSource() {\n    return new WrappedDoubleValuesSource(this);\n  }\n\n","sourceOld":"  /**\n   * Expose this ValueSource as a DoubleValuesSource\n   */\n  public DoubleValuesSource asDoubleValuesSource() {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        Map context = new HashMap<>();\n        FakeScorer scorer = new FakeScorer();\n        context.put(\"scorer\", scorer);\n        FunctionValues fv = ValueSource.this.getValues(context, ctx);\n        return new DoubleValues() {\n\n          @Override\n          public double doubleValue() throws IOException {\n            return fv.doubleVal(scorer.current);\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            scorer.current = doc;\n            if (scores != null && scores.advanceExact(doc)) {\n              scorer.score = (float) scores.doubleValue();\n            }\n            else\n              scorer.score = 0;\n            return fv.exists(doc);\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;  // be on the safe side\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n        Map context = new HashMap<>();\n        FakeScorer scorer = new FakeScorer();\n        scorer.score = scoreExplanation.getValue();\n        context.put(\"scorer\", scorer);\n        FunctionValues fv = ValueSource.this.getValues(context, ctx);\n        return fv.explain(docId);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource#asDoubleValuesSource().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource#asDoubleValuesSource().mjava","sourceNew":"  /**\n   * Expose this ValueSource as a DoubleValuesSource\n   */\n  public DoubleValuesSource asDoubleValuesSource() {\n    return new WrappedDoubleValuesSource(this);\n  }\n\n","sourceOld":"  /**\n   * Expose this ValueSource as a DoubleValuesSource\n   */\n  public DoubleValuesSource asDoubleValuesSource() {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        Map context = new HashMap<>();\n        FakeScorer scorer = new FakeScorer();\n        context.put(\"scorer\", scorer);\n        FunctionValues fv = ValueSource.this.getValues(context, ctx);\n        return new DoubleValues() {\n\n          @Override\n          public double doubleValue() throws IOException {\n            return fv.doubleVal(scorer.current);\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            scorer.current = doc;\n            if (scores != null && scores.advanceExact(doc)) {\n              scorer.score = (float) scores.doubleValue();\n            }\n            else\n              scorer.score = 0;\n            return fv.exists(doc);\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;  // be on the safe side\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n        Map context = new HashMap<>();\n        FakeScorer scorer = new FakeScorer();\n        scorer.score = scoreExplanation.getValue();\n        context.put(\"scorer\", scorer);\n        FunctionValues fv = ValueSource.this.getValues(context, ctx);\n        return fv.explain(docId);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource#asDoubleValuesSource().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource#asDoubleValuesSource().mjava","sourceNew":"  /**\n   * Expose this ValueSource as a DoubleValuesSource\n   */\n  public DoubleValuesSource asDoubleValuesSource() {\n    return new WrappedDoubleValuesSource(this);\n  }\n\n","sourceOld":"  /**\n   * Expose this ValueSource as a DoubleValuesSource\n   */\n  public DoubleValuesSource asDoubleValuesSource() {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        Map context = new HashMap<>();\n        FakeScorer scorer = new FakeScorer();\n        context.put(\"scorer\", scorer);\n        FunctionValues fv = ValueSource.this.getValues(context, ctx);\n        return new DoubleValues() {\n\n          @Override\n          public double doubleValue() throws IOException {\n            return fv.doubleVal(scorer.current);\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            scorer.current = doc;\n            if (scores != null && scores.advanceExact(doc)) {\n              scorer.score = (float) scores.doubleValue();\n            }\n            else\n              scorer.score = 0;\n            return fv.exists(doc);\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;  // be on the safe side\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n        Map context = new HashMap<>();\n        FakeScorer scorer = new FakeScorer();\n        scorer.score = scoreExplanation.getValue();\n        context.put(\"scorer\", scorer);\n        FunctionValues fv = ValueSource.this.getValues(context, ctx);\n        return fv.explain(docId);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ddb4f32bdf08eb4c1ff5e170783be99dcc007f4","date":1552558632,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource#asDoubleValuesSource().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource#asDoubleValuesSource().mjava","sourceNew":"  /**\n   * Expose this ValueSource as a DoubleValuesSource\n   */\n  public DoubleValuesSource asDoubleValuesSource() {\n    return new WrappedDoubleValuesSource(this, null);\n  }\n\n","sourceOld":"  /**\n   * Expose this ValueSource as a DoubleValuesSource\n   */\n  public DoubleValuesSource asDoubleValuesSource() {\n    return new WrappedDoubleValuesSource(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"41ea72350b903b90cb4fda2a5adbce31aa00c074":["501fdb8d708778ae5368dd5c44879e1d46487e43"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["9cf250cb8fdff62f4b753866d44e5bf59bfd1616","501fdb8d708778ae5368dd5c44879e1d46487e43"],"501fdb8d708778ae5368dd5c44879e1d46487e43":["9cf250cb8fdff62f4b753866d44e5bf59bfd1616"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ddb4f32bdf08eb4c1ff5e170783be99dcc007f4":["28288370235ed02234a64753cdbf0c6ec096304a"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9cf250cb8fdff62f4b753866d44e5bf59bfd1616"],"9cf250cb8fdff62f4b753866d44e5bf59bfd1616":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["501fdb8d708778ae5368dd5c44879e1d46487e43","41ea72350b903b90cb4fda2a5adbce31aa00c074"],"98f11c416d30e556e0004a9a84960702d12d35b1":["e9017cf144952056066919f1ebc7897ff9bd71b1","41ea72350b903b90cb4fda2a5adbce31aa00c074"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ddb4f32bdf08eb4c1ff5e170783be99dcc007f4"]},"commit2Childs":{"41ea72350b903b90cb4fda2a5adbce31aa00c074":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["98f11c416d30e556e0004a9a84960702d12d35b1"],"501fdb8d708778ae5368dd5c44879e1d46487e43":["41ea72350b903b90cb4fda2a5adbce31aa00c074","e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","9cf250cb8fdff62f4b753866d44e5bf59bfd1616"],"2ddb4f32bdf08eb4c1ff5e170783be99dcc007f4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"9cf250cb8fdff62f4b753866d44e5bf59bfd1616":["e9017cf144952056066919f1ebc7897ff9bd71b1","501fdb8d708778ae5368dd5c44879e1d46487e43","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"28288370235ed02234a64753cdbf0c6ec096304a":["2ddb4f32bdf08eb4c1ff5e170783be99dcc007f4"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}