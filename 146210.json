{"path":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","commits":[{"id":"7e0127a0bf2a1895ba6109cbbd451359b9c0653d","date":1326981970,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n    // pre-4.0 indexes write a byte if there is a single norms file\n    output.writeByte((byte) 1);\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    output.writeByte((byte) (si.getHasProxInternal()));\n    output.writeStringStringMap(si.getDiagnostics());\n    output.writeByte((byte) (si.getHasVectorsInternal()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b44c43b92bd128f4fd1936a8dd55016011b6bb3","date":1327691411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","sourceNew":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    // we are about to write this SI in 3.x format, dropping all codec information, etc.\n    // so it had better be a 3.x segment or you will get very confusing errors later.\n    assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n    // pre-4.0 indexes write a byte if there is a single norms file\n    output.writeByte((byte) 1);\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    output.writeByte((byte) (si.getHasProxInternal()));\n    output.writeStringStringMap(si.getDiagnostics());\n    output.writeByte((byte) (si.getHasVectorsInternal()));\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n    // pre-4.0 indexes write a byte if there is a single norms file\n    output.writeByte((byte) 1);\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    output.writeByte((byte) (si.getHasProxInternal()));\n    output.writeStringStringMap(si.getDiagnostics());\n    output.writeByte((byte) (si.getHasVectorsInternal()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7","date":1327763052,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","sourceNew":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    // we are about to write this SI in 3.x format, dropping all codec information, etc.\n    // so it had better be a 3.x segment or you will get very confusing errors later.\n    assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n    // pre-4.0 indexes write a byte if there is a single norms file\n    output.writeByte((byte) 1);\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    output.writeByte((byte) (si.getHasProxInternal()));\n    output.writeStringStringMap(si.getDiagnostics());\n    output.writeByte((byte) (si.getHasVectorsInternal()));\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n    // pre-4.0 indexes write a byte if there is a single norms file\n    output.writeByte((byte) 1);\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    output.writeByte((byte) (si.getHasProxInternal()));\n    output.writeStringStringMap(si.getDiagnostics());\n    output.writeByte((byte) (si.getHasVectorsInternal()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","sourceNew":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    // we are about to write this SI in 3.x format, dropping all codec information, etc.\n    // so it had better be a 3.x segment or you will get very confusing errors later.\n    assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n    // pre-4.0 indexes write a byte if there is a single norms file\n    output.writeByte((byte) 1);\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    output.writeByte((byte) (si.getHasProxInternal()));\n    output.writeStringStringMap(si.getDiagnostics());\n    output.writeByte((byte) (si.getHasVectorsInternal()));\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n    // pre-4.0 indexes write a byte if there is a single norms file\n    output.writeByte((byte) 1);\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    output.writeByte((byte) (si.getHasProxInternal()));\n    output.writeStringStringMap(si.getDiagnostics());\n    output.writeByte((byte) (si.getHasVectorsInternal()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e92a321a2612261e1010a4038c8586e30b081552","date":1328456689,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","sourceNew":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    // we are about to write this SI in 3.x format, dropping all codec information, etc.\n    // so it had better be a 3.x segment or you will get very confusing errors later.\n    assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n    // pre-4.0 indexes write a byte if there is a single norms file\n    output.writeByte((byte) 1);\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    output.writeByte((byte) (si.getHasProxInternal()));\n    output.writeStringStringMap(si.getDiagnostics());\n    output.writeByte((byte) (si.getHasVectorsInternal()));\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    // we are about to write this SI in 3.x format, dropping all codec information, etc.\n    // so it had better be a 3.x segment or you will get very confusing errors later.\n    assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n    // pre-4.0 indexes write a byte if there is a single norms file\n    output.writeByte((byte) 1);\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    output.writeByte((byte) (si.getHasProxInternal()));\n    output.writeStringStringMap(si.getDiagnostics());\n    output.writeByte((byte) (si.getHasVectorsInternal()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["7e0127a0bf2a1895ba6109cbbd451359b9c0653d","0b44c43b92bd128f4fd1936a8dd55016011b6bb3"],"0b44c43b92bd128f4fd1936a8dd55016011b6bb3":["7e0127a0bf2a1895ba6109cbbd451359b9c0653d"],"e92a321a2612261e1010a4038c8586e30b081552":["0b44c43b92bd128f4fd1936a8dd55016011b6bb3"],"7e0127a0bf2a1895ba6109cbbd451359b9c0653d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e92a321a2612261e1010a4038c8586e30b081552"],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":["7e0127a0bf2a1895ba6109cbbd451359b9c0653d","0b44c43b92bd128f4fd1936a8dd55016011b6bb3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e0127a0bf2a1895ba6109cbbd451359b9c0653d"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"0b44c43b92bd128f4fd1936a8dd55016011b6bb3":["fd92b8bcc88e969302510acf77bd6970da3994c4","e92a321a2612261e1010a4038c8586e30b081552","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"7e0127a0bf2a1895ba6109cbbd451359b9c0653d":["fd92b8bcc88e969302510acf77bd6970da3994c4","0b44c43b92bd128f4fd1936a8dd55016011b6bb3","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"e92a321a2612261e1010a4038c8586e30b081552":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}