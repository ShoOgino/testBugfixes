{"path":"src/java/org/apache/solr/request/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","commits":[{"id":"b94eb480792512e506a8eceb3d907fa9523d67e3","date":1186837269,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    ArrayList<Fieldable> single = new ArrayList<Fieldable>();\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        single.add(ff);\n      }\n    }\n\n    // obtain number of fields in doc\n    writeArrayOpener(single.size() + multi.size() + ((pseudoFields!=null) ? pseudoFields.size() : 0));\n\n    // output single value fields\n    for(Fieldable ff : single) {\n      SchemaField sf = schema.getField(ff.name());\n      writeKey(ff.name(),true);\n      sf.write(this, ff.name(), ff);\n    }\n    \n    // output multi value fields\n    for(MultiValueField mvf : multi.values()) {\n      writeKey(mvf.sfield.getName(), true);\n      writeArrayOpener(mvf.fields.size());\n      int i = 0;\n      for (Fieldable ff : mvf.fields) {\n        writeKey(i++, false);\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n    }\n\n    // output pseudo fields\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,false);\n    }\n    writeArrayCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9f1bb14a86a1d53b30fdfc242827ac38ef18d184"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","pathOld":"src/java/org/apache/solr/request/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","sourceNew":"  @Override\n  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    ArrayList<Fieldable> single = new ArrayList<Fieldable>();\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        single.add(ff);\n      }\n    }\n\n    // obtain number of fields in doc\n    writeArrayOpener(single.size() + multi.size() + ((pseudoFields!=null) ? pseudoFields.size() : 0));\n\n    // output single value fields\n    for(Fieldable ff : single) {\n      SchemaField sf = schema.getField(ff.name());\n      writeKey(ff.name(),true);\n      sf.write(this, ff.name(), ff);\n    }\n    \n    // output multi value fields\n    for(MultiValueField mvf : multi.values()) {\n      writeKey(mvf.sfield.getName(), true);\n      writeArrayOpener(mvf.fields.size());\n      int i = 0;\n      for (Fieldable ff : mvf.fields) {\n        writeKey(i++, false);\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n    }\n\n    // output pseudo fields\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,false);\n    }\n    writeArrayCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    ArrayList<Fieldable> single = new ArrayList<Fieldable>();\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        single.add(ff);\n      }\n    }\n\n    // obtain number of fields in doc\n    writeArrayOpener(single.size() + multi.size() + ((pseudoFields!=null) ? pseudoFields.size() : 0));\n\n    // output single value fields\n    for(Fieldable ff : single) {\n      SchemaField sf = schema.getField(ff.name());\n      writeKey(ff.name(),true);\n      sf.write(this, ff.name(), ff);\n    }\n    \n    // output multi value fields\n    for(MultiValueField mvf : multi.values()) {\n      writeKey(mvf.sfield.getName(), true);\n      writeArrayOpener(mvf.fields.size());\n      int i = 0;\n      for (Fieldable ff : mvf.fields) {\n        writeKey(i++, false);\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n    }\n\n    // output pseudo fields\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,false);\n    }\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["b94eb480792512e506a8eceb3d907fa9523d67e3"],"b94eb480792512e506a8eceb3d907fa9523d67e3":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["b94eb480792512e506a8eceb3d907fa9523d67e3"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":[],"b94eb480792512e506a8eceb3d907fa9523d67e3":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["10b17ff7ad534c3b34a34944d80a87d217011d9c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}