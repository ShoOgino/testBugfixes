{"path":"src/java/org/apache/solr/core/MultiCore#load(String,File).mjava","commits":[{"id":"048361614025800e582bfc7a7b0329dc6fd6a95e","date":1196999392,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/MultiCore#load(String,File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Load a config file listing the available solr cores\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    Config cfg = new Config( new SolrResourceLoader(dir), \n        null, new FileInputStream( configFile ), null );\n    \n    persistent = cfg.getBool( \"multicore/@persistent\", false );\n    adminPath  = cfg.get(     \"multicore/@adminPath\", null );\n    libDir     = cfg.get(     \"multicore/@sharedLib\", null);\n    if (libDir != null) {\n      // relative dir to conf\n      File f = new File(dir, libDir);\n      libDir = f.getPath(); \n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n    \n    if( adminPath != null ) {\n      multiCoreHandler = new MultiCoreHandler();\n    }\n    \n    boolean hasDefault = false;\n    NodeList nodes = (NodeList)cfg.evaluate(\"multicore/core\", XPathConstants.NODESET);\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      \n      try {\n        String name         = DOMUtil.getAttr(node,\"name\", \"Core needs a name\" );\n        String instanceDir  = DOMUtil.getAttr(node,\"instanceDir\", \"Missing required 'instanceDir'\" );\n        String defaultStr   = DOMUtil.getAttr(node,\"default\", null );\n        \n        // Make the instanceDir relative to the core config\n        File idir = new File( dir, instanceDir );\n        instanceDir = idir.getPath();\n        \n        // Initialize the solr config\n        SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader);\n        SolrConfig solrConfig = new SolrConfig( solrLoader, SolrConfig.DEFAULT_CONF_FILE, null );\n        IndexSchema schema = new IndexSchema(solrConfig, instanceDir+\"/conf/schema.xml\");\n        SolrCore core = new SolrCore( name, null, solrConfig, schema );\n        \n        // Register the new core\n        SolrCore old = this.register( core );\n        if( old != null ) {\n          throw new RuntimeException( cfg.getName() +\n                  \" registers multiple cores to the same name: \"+name );\n        }\n        \n        if( \"true\".equalsIgnoreCase( defaultStr ) ) {\n          if( hasDefault ) {\n            throw new RuntimeException( \n                \"multicore.xml defines multiple default cores. \"+\n                getDefaultCore().getName() + \" and \" + core.getName() );\n          }\n          this.setDefaultCore( core );\n          hasDefault = true;\n        }\n      } \n      catch( Throwable ex ) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if( !hasDefault ) {\n      throw new RuntimeException( \n          \"multicore.xml must define at least one default core\" );\n    }\n    enabled = true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1a45fbd60083428b1b13884c5c8c2e33e7e71ee7","c28792ff7d1774c306e16afbd44ded91a417049b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a96ca1a228f46c01d5a1731e6a2479e105c419a7","date":1197008463,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/MultiCore#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    Config cfg = new Config( new SolrResourceLoader(dir), \n        null, new FileInputStream( configFile ), null );\n    \n    persistent = cfg.getBool( \"multicore/@persistent\", false );\n    adminPath  = cfg.get(     \"multicore/@adminPath\", null );\n    libDir     = cfg.get(     \"multicore/@sharedLib\", null);\n    if (libDir != null) {\n      // relative dir to conf\n      File f = new File(dir, libDir);\n      libDir = f.getPath(); \n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n    \n    if( adminPath != null ) {\n      multiCoreHandler = new MultiCoreHandler();\n    }\n    \n    boolean hasDefault = false;\n    NodeList nodes = (NodeList)cfg.evaluate(\"multicore/core\", XPathConstants.NODESET);\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      \n      try {\n        String name         = DOMUtil.getAttr(node,\"name\", \"Core needs a name\" );\n        String instanceDir  = DOMUtil.getAttr(node,\"instanceDir\", \"Missing required 'instanceDir'\" );\n        String dataDir      = DOMUtil.getAttr(node,\"dataDir\", null );\n        String defaultStr   = DOMUtil.getAttr(node,\"default\", null );\n        \n        // Make the instanceDir relative to the core config\n        File idir = new File( dir, instanceDir );\n        instanceDir = idir.getPath();\n        \n        // Initialize the solr config\n        SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader);\n        SolrConfig solrConfig = new SolrConfig( solrLoader, SolrConfig.DEFAULT_CONF_FILE, null );\n        IndexSchema schema = new IndexSchema(solrConfig, instanceDir+\"/conf/schema.xml\");\n        SolrCore core = new SolrCore( name, dataDir, solrConfig, schema );\n        \n        // Register the new core\n        SolrCore old = this.register( core );\n        if( old != null ) {\n          throw new RuntimeException( cfg.getName() +\n                  \" registers multiple cores to the same name: \"+name );\n        }\n        \n        if( \"true\".equalsIgnoreCase( defaultStr ) ) {\n          if( hasDefault ) {\n            throw new RuntimeException( \n                \"multicore.xml defines multiple default cores. \"+\n                getDefaultCore().getName() + \" and \" + core.getName() );\n          }\n          this.setDefaultCore( core );\n          hasDefault = true;\n        }\n      } \n      catch( Throwable ex ) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if( !hasDefault ) {\n      throw new RuntimeException( \n          \"multicore.xml must define at least one default core\" );\n    }\n    enabled = true;\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    Config cfg = new Config( new SolrResourceLoader(dir), \n        null, new FileInputStream( configFile ), null );\n    \n    persistent = cfg.getBool( \"multicore/@persistent\", false );\n    adminPath  = cfg.get(     \"multicore/@adminPath\", null );\n    libDir     = cfg.get(     \"multicore/@sharedLib\", null);\n    if (libDir != null) {\n      // relative dir to conf\n      File f = new File(dir, libDir);\n      libDir = f.getPath(); \n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n    \n    if( adminPath != null ) {\n      multiCoreHandler = new MultiCoreHandler();\n    }\n    \n    boolean hasDefault = false;\n    NodeList nodes = (NodeList)cfg.evaluate(\"multicore/core\", XPathConstants.NODESET);\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      \n      try {\n        String name         = DOMUtil.getAttr(node,\"name\", \"Core needs a name\" );\n        String instanceDir  = DOMUtil.getAttr(node,\"instanceDir\", \"Missing required 'instanceDir'\" );\n        String defaultStr   = DOMUtil.getAttr(node,\"default\", null );\n        \n        // Make the instanceDir relative to the core config\n        File idir = new File( dir, instanceDir );\n        instanceDir = idir.getPath();\n        \n        // Initialize the solr config\n        SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader);\n        SolrConfig solrConfig = new SolrConfig( solrLoader, SolrConfig.DEFAULT_CONF_FILE, null );\n        IndexSchema schema = new IndexSchema(solrConfig, instanceDir+\"/conf/schema.xml\");\n        SolrCore core = new SolrCore( name, null, solrConfig, schema );\n        \n        // Register the new core\n        SolrCore old = this.register( core );\n        if( old != null ) {\n          throw new RuntimeException( cfg.getName() +\n                  \" registers multiple cores to the same name: \"+name );\n        }\n        \n        if( \"true\".equalsIgnoreCase( defaultStr ) ) {\n          if( hasDefault ) {\n            throw new RuntimeException( \n                \"multicore.xml defines multiple default cores. \"+\n                getDefaultCore().getName() + \" and \" + core.getName() );\n          }\n          this.setDefaultCore( core );\n          hasDefault = true;\n        }\n      } \n      catch( Throwable ex ) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if( !hasDefault ) {\n      throw new RuntimeException( \n          \"multicore.xml must define at least one default core\" );\n    }\n    enabled = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a45fbd60083428b1b13884c5c8c2e33e7e71ee7","date":1198275819,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/MultiCore#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    Config cfg = new Config( new SolrResourceLoader(dir), \n        null, new FileInputStream( configFile ), null );\n    \n    persistent = cfg.getBool( \"multicore/@persistent\", false );\n    adminPath  = cfg.get(     \"multicore/@adminPath\", null );\n    libDir     = cfg.get(     \"multicore/@sharedLib\", null);\n    if (libDir != null) {\n      // relative dir to conf\n      File f = new File(dir, libDir);\n      libDir = f.getPath(); \n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n    \n    if( adminPath != null ) {\n      multiCoreHandler = new MultiCoreHandler();\n    }\n    \n    boolean hasDefault = false;\n    NodeList nodes = (NodeList)cfg.evaluate(\"multicore/core\", XPathConstants.NODESET);\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      \n      try {\n        String name         = DOMUtil.getAttr(node,\"name\", \"Core needs a name\" );\n        String instanceDir  = DOMUtil.getAttr(node,\"instanceDir\", \"Missing required 'instanceDir'\" );\n        String dataDir      = DOMUtil.getAttr(node,\"dataDir\", null );\n        String defaultStr   = DOMUtil.getAttr(node,\"default\", null );\n        \n        // Make the instanceDir relative to the core config\n        File idir = new File( dir, instanceDir );\n        instanceDir = idir.getPath();\n        \n        // Initialize the solr config\n        SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader);\n        SolrConfig solrConfig = new SolrConfig( solrLoader, SolrConfig.DEFAULT_CONF_FILE, null );\n        IndexSchema schema = new IndexSchema(solrConfig, instanceDir+\"/conf/schema.xml\");\n        SolrCore core = new SolrCore( name, dataDir, solrConfig, schema );\n        \n        // Register the new core\n        SolrCore old = this.register( core );\n        if( old != null ) {\n          throw new RuntimeException( cfg.getName() +\n                  \" registers multiple cores to the same name: \"+name );\n        }\n        \n        if( \"true\".equalsIgnoreCase( defaultStr ) ) {\n          if( hasDefault ) {\n            throw new RuntimeException( \n                \"multicore.xml defines multiple default cores. \"+\n                getDefaultCore().getName() + \" and \" + core.getName() );\n          }\n          defaultCore = core;\n          hasDefault = true;\n        }\n      } \n      catch( Throwable ex ) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if( !hasDefault ) {\n      throw new RuntimeException( \n          \"multicore.xml must define at least one default core\" );\n    }\n    enabled = true;\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    Config cfg = new Config( new SolrResourceLoader(dir), \n        null, new FileInputStream( configFile ), null );\n    \n    persistent = cfg.getBool( \"multicore/@persistent\", false );\n    adminPath  = cfg.get(     \"multicore/@adminPath\", null );\n    libDir     = cfg.get(     \"multicore/@sharedLib\", null);\n    if (libDir != null) {\n      // relative dir to conf\n      File f = new File(dir, libDir);\n      libDir = f.getPath(); \n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n    \n    if( adminPath != null ) {\n      multiCoreHandler = new MultiCoreHandler();\n    }\n    \n    boolean hasDefault = false;\n    NodeList nodes = (NodeList)cfg.evaluate(\"multicore/core\", XPathConstants.NODESET);\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      \n      try {\n        String name         = DOMUtil.getAttr(node,\"name\", \"Core needs a name\" );\n        String instanceDir  = DOMUtil.getAttr(node,\"instanceDir\", \"Missing required 'instanceDir'\" );\n        String dataDir      = DOMUtil.getAttr(node,\"dataDir\", null );\n        String defaultStr   = DOMUtil.getAttr(node,\"default\", null );\n        \n        // Make the instanceDir relative to the core config\n        File idir = new File( dir, instanceDir );\n        instanceDir = idir.getPath();\n        \n        // Initialize the solr config\n        SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader);\n        SolrConfig solrConfig = new SolrConfig( solrLoader, SolrConfig.DEFAULT_CONF_FILE, null );\n        IndexSchema schema = new IndexSchema(solrConfig, instanceDir+\"/conf/schema.xml\");\n        SolrCore core = new SolrCore( name, dataDir, solrConfig, schema );\n        \n        // Register the new core\n        SolrCore old = this.register( core );\n        if( old != null ) {\n          throw new RuntimeException( cfg.getName() +\n                  \" registers multiple cores to the same name: \"+name );\n        }\n        \n        if( \"true\".equalsIgnoreCase( defaultStr ) ) {\n          if( hasDefault ) {\n            throw new RuntimeException( \n                \"multicore.xml defines multiple default cores. \"+\n                getDefaultCore().getName() + \" and \" + core.getName() );\n          }\n          this.setDefaultCore( core );\n          hasDefault = true;\n        }\n      } \n      catch( Throwable ex ) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if( !hasDefault ) {\n      throw new RuntimeException( \n          \"multicore.xml must define at least one default core\" );\n    }\n    enabled = true;\n  }\n\n","bugFix":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6dc6ab6902f8f70ae43365947ccf44c25986906d","date":1204603577,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/MultiCore#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n    \n      persistent = cfg.getBool( \"multicore/@persistent\", false );\n      adminPath  = cfg.get(     \"multicore/@adminPath\", null );\n      libDir     = cfg.get(     \"multicore/@sharedLib\", null);\n      \n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath(); \n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n      \n      if( adminPath != null ) {\n        multiCoreHandler = new MultiCoreHandler();\n      }\n      \n      NodeList nodes = (NodeList)cfg.evaluate(\"multicore/core\", XPathConstants.NODESET);\n      synchronized (cores) {\n        for (int i=0; i<nodes.getLength(); i++) {\n          Node node = nodes.item(i);\n          try {\n            CoreDescriptor p = new CoreDescriptor();\n            p.init(DOMUtil.getAttr(node, \"name\", null), DOMUtil.getAttr(node, \"instanceDir\", null));\n            // deal with optional settings\n            String opt = DOMUtil.getAttr(node, \"config\", null);\n            if (opt != null) {\n              p.setConfigName(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"schema\", null);\n            if (opt != null) {\n              p.setSchemaName(opt);\n            }\n            CoreDescriptor old = cores.get(p.getName());\n            if (old != null && old.getName() != null && old.getName().equals(p.getName())) {\n              throw new RuntimeException( cfg.getName() +\n                \" registers multiple cores to the same name: \" + p.name);\n            }\n            p.setCore(create(p));\n          }\n          catch (Throwable ex) {\n            SolrConfig.severeErrors.add( ex );\n            SolrException.logOnce(log,null,ex);\n          }\n        }\n      }\n    }\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n    enabled = true;\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    Config cfg = new Config( new SolrResourceLoader(dir), \n        null, new FileInputStream( configFile ), null );\n    \n    persistent = cfg.getBool( \"multicore/@persistent\", false );\n    adminPath  = cfg.get(     \"multicore/@adminPath\", null );\n    libDir     = cfg.get(     \"multicore/@sharedLib\", null);\n    if (libDir != null) {\n      // relative dir to conf\n      File f = new File(dir, libDir);\n      libDir = f.getPath(); \n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n    \n    if( adminPath != null ) {\n      multiCoreHandler = new MultiCoreHandler();\n    }\n    \n    boolean hasDefault = false;\n    NodeList nodes = (NodeList)cfg.evaluate(\"multicore/core\", XPathConstants.NODESET);\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      \n      try {\n        String name         = DOMUtil.getAttr(node,\"name\", \"Core needs a name\" );\n        String instanceDir  = DOMUtil.getAttr(node,\"instanceDir\", \"Missing required 'instanceDir'\" );\n        String dataDir      = DOMUtil.getAttr(node,\"dataDir\", null );\n        String defaultStr   = DOMUtil.getAttr(node,\"default\", null );\n        \n        // Make the instanceDir relative to the core config\n        File idir = new File( dir, instanceDir );\n        instanceDir = idir.getPath();\n        \n        // Initialize the solr config\n        SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader);\n        SolrConfig solrConfig = new SolrConfig( solrLoader, SolrConfig.DEFAULT_CONF_FILE, null );\n        IndexSchema schema = new IndexSchema(solrConfig, instanceDir+\"/conf/schema.xml\");\n        SolrCore core = new SolrCore( name, dataDir, solrConfig, schema );\n        \n        // Register the new core\n        SolrCore old = this.register( core );\n        if( old != null ) {\n          throw new RuntimeException( cfg.getName() +\n                  \" registers multiple cores to the same name: \"+name );\n        }\n        \n        if( \"true\".equalsIgnoreCase( defaultStr ) ) {\n          if( hasDefault ) {\n            throw new RuntimeException( \n                \"multicore.xml defines multiple default cores. \"+\n                getDefaultCore().getName() + \" and \" + core.getName() );\n          }\n          defaultCore = core;\n          hasDefault = true;\n        }\n      } \n      catch( Throwable ex ) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if( !hasDefault ) {\n      throw new RuntimeException( \n          \"multicore.xml must define at least one default core\" );\n    }\n    enabled = true;\n  }\n\n","bugFix":null,"bugIntro":["c28792ff7d1774c306e16afbd44ded91a417049b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58b41d4093a9662306bdc051e4b46643deff70de","date":1205090944,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/MultiCore#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n    \n      persistent = cfg.getBool( \"multicore/@persistent\", false );\n      adminPath  = cfg.get(     \"multicore/@adminPath\", null );\n      libDir     = cfg.get(     \"multicore/@sharedLib\", null);\n      \n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath(); \n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n      \n      if( adminPath != null ) {\n        multiCoreHandler = this.createMultiCoreHandler();\n      }\n      \n      NodeList nodes = (NodeList)cfg.evaluate(\"multicore/core\", XPathConstants.NODESET);\n      synchronized (cores) {\n        for (int i=0; i<nodes.getLength(); i++) {\n          Node node = nodes.item(i);\n          try {\n            CoreDescriptor p = new CoreDescriptor();\n            p.init(DOMUtil.getAttr(node, \"name\", null), DOMUtil.getAttr(node, \"instanceDir\", null));\n            // deal with optional settings\n            String opt = DOMUtil.getAttr(node, \"config\", null);\n            if (opt != null) {\n              p.setConfigName(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"schema\", null);\n            if (opt != null) {\n              p.setSchemaName(opt);\n            }\n            CoreDescriptor old = cores.get(p.getName());\n            if (old != null && old.getName() != null && old.getName().equals(p.getName())) {\n              throw new RuntimeException( cfg.getName() +\n                \" registers multiple cores to the same name: \" + p.name);\n            }\n            p.setCore(create(p));\n          }\n          catch (Throwable ex) {\n            SolrConfig.severeErrors.add( ex );\n            SolrException.logOnce(log,null,ex);\n          }\n        }\n      }\n    }\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n    enabled = true;\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n    \n      persistent = cfg.getBool( \"multicore/@persistent\", false );\n      adminPath  = cfg.get(     \"multicore/@adminPath\", null );\n      libDir     = cfg.get(     \"multicore/@sharedLib\", null);\n      \n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath(); \n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n      \n      if( adminPath != null ) {\n        multiCoreHandler = new MultiCoreHandler();\n      }\n      \n      NodeList nodes = (NodeList)cfg.evaluate(\"multicore/core\", XPathConstants.NODESET);\n      synchronized (cores) {\n        for (int i=0; i<nodes.getLength(); i++) {\n          Node node = nodes.item(i);\n          try {\n            CoreDescriptor p = new CoreDescriptor();\n            p.init(DOMUtil.getAttr(node, \"name\", null), DOMUtil.getAttr(node, \"instanceDir\", null));\n            // deal with optional settings\n            String opt = DOMUtil.getAttr(node, \"config\", null);\n            if (opt != null) {\n              p.setConfigName(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"schema\", null);\n            if (opt != null) {\n              p.setSchemaName(opt);\n            }\n            CoreDescriptor old = cores.get(p.getName());\n            if (old != null && old.getName() != null && old.getName().equals(p.getName())) {\n              throw new RuntimeException( cfg.getName() +\n                \" registers multiple cores to the same name: \" + p.name);\n            }\n            p.setCore(create(p));\n          }\n          catch (Throwable ex) {\n            SolrConfig.severeErrors.add( ex );\n            SolrException.logOnce(log,null,ex);\n          }\n        }\n      }\n    }\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n    enabled = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0323fcfcacbfb8242fbf70eb58498551b2018c67","date":1206721690,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/MultiCore#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n    \n      persistent = cfg.getBool( \"multicore/@persistent\", false );\n      adminPath  = cfg.get(     \"multicore/@adminPath\", null );\n      libDir     = cfg.get(     \"multicore/@sharedLib\", null);\n      \n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath(); \n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n      \n      if( adminPath != null ) {\n        multiCoreHandler = this.createMultiCoreHandler();\n      }\n      \n      NodeList nodes = (NodeList)cfg.evaluate(\"multicore/core\", XPathConstants.NODESET);\n      synchronized (cores) {\n        for (int i=0; i<nodes.getLength(); i++) {\n          Node node = nodes.item(i);\n          try {\n            CoreDescriptor p = new CoreDescriptor();\n            p.init(DOMUtil.getAttr(node, \"name\", null), DOMUtil.getAttr(node, \"instanceDir\", null));\n            // deal with optional settings\n            String opt = DOMUtil.getAttr(node, \"config\", null);\n            if (opt != null) {\n              p.setConfigName(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"schema\", null);\n            if (opt != null) {\n              p.setSchemaName(opt);\n            }\n            CoreDescriptor old = cores.get(p.getName());\n            if (old != null && old.getName() != null && old.getName().equals(p.getName())) {\n              throw new RuntimeException( cfg.getName() +\n                \" registers multiple cores to the same name: \" + p.name);\n            }\n            p.setCore(create(p));\n          }\n          catch (Throwable ex) {\n            SolrConfig.severeErrors.add( ex );\n            SolrException.logOnce(log,null,ex);\n          }\n        }\n      }\n    }\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n\n    setEnabled(true);\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n    \n      persistent = cfg.getBool( \"multicore/@persistent\", false );\n      adminPath  = cfg.get(     \"multicore/@adminPath\", null );\n      libDir     = cfg.get(     \"multicore/@sharedLib\", null);\n      \n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath(); \n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n      \n      if( adminPath != null ) {\n        multiCoreHandler = this.createMultiCoreHandler();\n      }\n      \n      NodeList nodes = (NodeList)cfg.evaluate(\"multicore/core\", XPathConstants.NODESET);\n      synchronized (cores) {\n        for (int i=0; i<nodes.getLength(); i++) {\n          Node node = nodes.item(i);\n          try {\n            CoreDescriptor p = new CoreDescriptor();\n            p.init(DOMUtil.getAttr(node, \"name\", null), DOMUtil.getAttr(node, \"instanceDir\", null));\n            // deal with optional settings\n            String opt = DOMUtil.getAttr(node, \"config\", null);\n            if (opt != null) {\n              p.setConfigName(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"schema\", null);\n            if (opt != null) {\n              p.setSchemaName(opt);\n            }\n            CoreDescriptor old = cores.get(p.getName());\n            if (old != null && old.getName() != null && old.getName().equals(p.getName())) {\n              throw new RuntimeException( cfg.getName() +\n                \" registers multiple cores to the same name: \" + p.name);\n            }\n            p.setCore(create(p));\n          }\n          catch (Throwable ex) {\n            SolrConfig.severeErrors.add( ex );\n            SolrException.logOnce(log,null,ex);\n          }\n        }\n      }\n    }\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n    enabled = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d5151046764fb8d9662e02d6c5381b2adb69f96d","date":1216394962,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/MultiCore#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n    \n      persistent = cfg.getBool( \"multicore/@persistent\", false );\n      adminPath  = cfg.get(     \"multicore/@adminPath\", null );\n      libDir     = cfg.get(     \"multicore/@sharedLib\", null);\n      \n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath(); \n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n      \n      if( adminPath != null ) {\n        multiCoreHandler = this.createMultiCoreHandler();\n      }\n      \n      NodeList nodes = (NodeList)cfg.evaluate(\"multicore/core\", XPathConstants.NODESET);\n      synchronized (cores) {\n        for (int i=0; i<nodes.getLength(); i++) {\n          Node node = nodes.item(i);\n          try {\n            CoreDescriptor p = new CoreDescriptor(this);\n            p.init(DOMUtil.getAttr(node, \"name\", null), DOMUtil.getAttr(node, \"instanceDir\", null));\n            // deal with optional settings\n            String opt = DOMUtil.getAttr(node, \"config\", null);\n            if (opt != null) {\n              p.setConfigName(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"schema\", null);\n            if (opt != null) {\n              p.setSchemaName(opt);\n            }\n            CoreDescriptor old = cores.get(p.getName());\n            if (old != null && old.getName() != null && old.getName().equals(p.getName())) {\n              throw new RuntimeException( cfg.getName() +\n                \" registers multiple cores to the same name: \" + p.name);\n            }\n            p.setCore(create(p));\n          }\n          catch (Throwable ex) {\n            SolrConfig.severeErrors.add( ex );\n            SolrException.logOnce(log,null,ex);\n          }\n        }\n      }\n    }\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n\n    setEnabled(true);\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n    \n      persistent = cfg.getBool( \"multicore/@persistent\", false );\n      adminPath  = cfg.get(     \"multicore/@adminPath\", null );\n      libDir     = cfg.get(     \"multicore/@sharedLib\", null);\n      \n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath(); \n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n      \n      if( adminPath != null ) {\n        multiCoreHandler = this.createMultiCoreHandler();\n      }\n      \n      NodeList nodes = (NodeList)cfg.evaluate(\"multicore/core\", XPathConstants.NODESET);\n      synchronized (cores) {\n        for (int i=0; i<nodes.getLength(); i++) {\n          Node node = nodes.item(i);\n          try {\n            CoreDescriptor p = new CoreDescriptor();\n            p.init(DOMUtil.getAttr(node, \"name\", null), DOMUtil.getAttr(node, \"instanceDir\", null));\n            // deal with optional settings\n            String opt = DOMUtil.getAttr(node, \"config\", null);\n            if (opt != null) {\n              p.setConfigName(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"schema\", null);\n            if (opt != null) {\n              p.setSchemaName(opt);\n            }\n            CoreDescriptor old = cores.get(p.getName());\n            if (old != null && old.getName() != null && old.getName().equals(p.getName())) {\n              throw new RuntimeException( cfg.getName() +\n                \" registers multiple cores to the same name: \" + p.name);\n            }\n            p.setCore(create(p));\n          }\n          catch (Throwable ex) {\n            SolrConfig.severeErrors.add( ex );\n            SolrException.logOnce(log,null,ex);\n          }\n        }\n      }\n    }\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n\n    setEnabled(true);\n  }\n\n","bugFix":null,"bugIntro":["c28792ff7d1774c306e16afbd44ded91a417049b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d262ab35a1389f4ad912bfa8b61a202c61cc475a","date":1218563685,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/core/MultiCore#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n    \n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      \n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      \n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath(); \n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n      \n      if( adminPath != null ) {\n        multiCoreHandler = this.createMultiCoreHandler();\n      }\n      \n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      synchronized (cores) {\n        for (int i=0; i<nodes.getLength(); i++) {\n          Node node = nodes.item(i);\n          try {\n            CoreDescriptor p = new CoreDescriptor(this);\n            p.init(DOMUtil.getAttr(node, \"name\", null), DOMUtil.getAttr(node, \"instanceDir\", null));\n            // deal with optional settings\n            String opt = DOMUtil.getAttr(node, \"config\", null);\n            if (opt != null) {\n              p.setConfigName(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"schema\", null);\n            if (opt != null) {\n              p.setSchemaName(opt);\n            }\n            CoreDescriptor old = cores.get(p.getName());\n            if (old != null && old.getName() != null && old.getName().equals(p.getName())) {\n              throw new RuntimeException( cfg.getName() +\n                \" registers multiple cores to the same name: \" + p.name);\n            }\n            p.setCore(create(p));\n          }\n          catch (Throwable ex) {\n            SolrConfig.severeErrors.add( ex );\n            SolrException.logOnce(log,null,ex);\n          }\n        }\n      }\n    }\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n\n    setEnabled(true);\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n    \n      persistent = cfg.getBool( \"multicore/@persistent\", false );\n      adminPath  = cfg.get(     \"multicore/@adminPath\", null );\n      libDir     = cfg.get(     \"multicore/@sharedLib\", null);\n      \n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath(); \n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n      \n      if( adminPath != null ) {\n        multiCoreHandler = this.createMultiCoreHandler();\n      }\n      \n      NodeList nodes = (NodeList)cfg.evaluate(\"multicore/core\", XPathConstants.NODESET);\n      synchronized (cores) {\n        for (int i=0; i<nodes.getLength(); i++) {\n          Node node = nodes.item(i);\n          try {\n            CoreDescriptor p = new CoreDescriptor(this);\n            p.init(DOMUtil.getAttr(node, \"name\", null), DOMUtil.getAttr(node, \"instanceDir\", null));\n            // deal with optional settings\n            String opt = DOMUtil.getAttr(node, \"config\", null);\n            if (opt != null) {\n              p.setConfigName(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"schema\", null);\n            if (opt != null) {\n              p.setSchemaName(opt);\n            }\n            CoreDescriptor old = cores.get(p.getName());\n            if (old != null && old.getName() != null && old.getName().equals(p.getName())) {\n              throw new RuntimeException( cfg.getName() +\n                \" registers multiple cores to the same name: \" + p.name);\n            }\n            p.setCore(create(p));\n          }\n          catch (Throwable ex) {\n            SolrConfig.severeErrors.add( ex );\n            SolrException.logOnce(log,null,ex);\n          }\n        }\n      }\n    }\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n\n    setEnabled(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5","date":1218639440,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#load(String,File).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#load(String,File).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n    \n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      \n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      \n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath(); \n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n      \n      if( adminPath != null ) {\n        coreAdminHandler = this.createMultiCoreHandler();\n      }\n      \n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      synchronized (cores) {\n        for (int i=0; i<nodes.getLength(); i++) {\n          Node node = nodes.item(i);\n          try {\n            CoreDescriptor p = new CoreDescriptor(this);\n            p.init(DOMUtil.getAttr(node, \"name\", null), DOMUtil.getAttr(node, \"instanceDir\", null));\n            // deal with optional settings\n            String opt = DOMUtil.getAttr(node, \"config\", null);\n            if (opt != null) {\n              p.setConfigName(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"schema\", null);\n            if (opt != null) {\n              p.setSchemaName(opt);\n            }\n            CoreDescriptor old = cores.get(p.getName());\n            if (old != null && old.getName() != null && old.getName().equals(p.getName())) {\n              throw new RuntimeException( cfg.getName() +\n                \" registers multiple cores to the same name: \" + p.name);\n            }\n            p.setCore(create(p));\n          }\n          catch (Throwable ex) {\n            SolrConfig.severeErrors.add( ex );\n            SolrException.logOnce(log,null,ex);\n          }\n        }\n      }\n    }\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n\n    setEnabled(true);\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * @param dir the home directory of all resources.\n   * @param configFile the configuration file\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {\n    this.configFile = configFile;\n    this.loader = new SolrResourceLoader(dir);\n    FileInputStream cfgis = new FileInputStream(configFile);\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n    \n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      \n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      \n      if (libDir != null) {\n        // relative dir to conf\n        File f = new File(dir, libDir);\n        libDir = f.getPath(); \n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n      \n      if( adminPath != null ) {\n        multiCoreHandler = this.createMultiCoreHandler();\n      }\n      \n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      synchronized (cores) {\n        for (int i=0; i<nodes.getLength(); i++) {\n          Node node = nodes.item(i);\n          try {\n            CoreDescriptor p = new CoreDescriptor(this);\n            p.init(DOMUtil.getAttr(node, \"name\", null), DOMUtil.getAttr(node, \"instanceDir\", null));\n            // deal with optional settings\n            String opt = DOMUtil.getAttr(node, \"config\", null);\n            if (opt != null) {\n              p.setConfigName(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"schema\", null);\n            if (opt != null) {\n              p.setSchemaName(opt);\n            }\n            CoreDescriptor old = cores.get(p.getName());\n            if (old != null && old.getName() != null && old.getName().equals(p.getName())) {\n              throw new RuntimeException( cfg.getName() +\n                \" registers multiple cores to the same name: \" + p.name);\n            }\n            p.setCore(create(p));\n          }\n          catch (Throwable ex) {\n            SolrConfig.severeErrors.add( ex );\n            SolrException.logOnce(log,null,ex);\n          }\n        }\n      }\n    }\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n\n    setEnabled(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d5151046764fb8d9662e02d6c5381b2adb69f96d":["0323fcfcacbfb8242fbf70eb58498551b2018c67"],"d262ab35a1389f4ad912bfa8b61a202c61cc475a":["d5151046764fb8d9662e02d6c5381b2adb69f96d"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dc6ab6902f8f70ae43365947ccf44c25986906d":["1a45fbd60083428b1b13884c5c8c2e33e7e71ee7"],"a96ca1a228f46c01d5a1731e6a2479e105c419a7":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"58b41d4093a9662306bdc051e4b46643deff70de":["6dc6ab6902f8f70ae43365947ccf44c25986906d"],"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5":["d262ab35a1389f4ad912bfa8b61a202c61cc475a"],"1a45fbd60083428b1b13884c5c8c2e33e7e71ee7":["a96ca1a228f46c01d5a1731e6a2479e105c419a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0323fcfcacbfb8242fbf70eb58498551b2018c67":["58b41d4093a9662306bdc051e4b46643deff70de"]},"commit2Childs":{"d5151046764fb8d9662e02d6c5381b2adb69f96d":["d262ab35a1389f4ad912bfa8b61a202c61cc475a"],"d262ab35a1389f4ad912bfa8b61a202c61cc475a":["9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["a96ca1a228f46c01d5a1731e6a2479e105c419a7"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6dc6ab6902f8f70ae43365947ccf44c25986906d":["58b41d4093a9662306bdc051e4b46643deff70de"],"a96ca1a228f46c01d5a1731e6a2479e105c419a7":["1a45fbd60083428b1b13884c5c8c2e33e7e71ee7"],"58b41d4093a9662306bdc051e4b46643deff70de":["0323fcfcacbfb8242fbf70eb58498551b2018c67"],"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5":[],"1a45fbd60083428b1b13884c5c8c2e33e7e71ee7":["6dc6ab6902f8f70ae43365947ccf44c25986906d"],"0323fcfcacbfb8242fbf70eb58498551b2018c67":["d5151046764fb8d9662e02d6c5381b2adb69f96d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}