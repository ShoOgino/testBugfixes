{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Set[String],Map[String,DocCollection]).mjava","commits":[{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Set[String],Map[String,DocCollection]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Set[String],Map[String,Map[String,Slice]]).mjava","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for publication.\n   * \n   * hashCode and equals will only depend on liveNodes and not clusterStateVersion.\n   */\n  public ClusterState(Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this(null, liveNodes, collectionStates);\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for publication.\n   * \n   * hashCode and equals will only depend on liveNodes and not clusterStateVersion.\n   */\n  public ClusterState(Set<String> liveNodes,\n      Map<String, Map<String,Slice>> collectionStates) {\n    this(null, liveNodes, collectionStates);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Set[String],Map[String,DocCollection]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for publication.\n   * \n   * hashCode and equals will only depend on liveNodes and not clusterStateVersion.\n   */\n  public ClusterState(Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this(null, liveNodes, collectionStates);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","date":1386334715,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Set[String],Map[String,DocCollection]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Set[String],Map[String,DocCollection]).mjava","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for publication.\n   * \n   * hashCode and equals will only depend on liveNodes and not clusterStateVersion.\n   */\n  public ClusterState(Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this(null, liveNodes, collectionStates, null);\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for publication.\n   * \n   * hashCode and equals will only depend on liveNodes and not clusterStateVersion.\n   */\n  public ClusterState(Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this(null, liveNodes, collectionStates);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Set[String],Map[String,DocCollection]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Set[String],Map[String,DocCollection]).mjava","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for publication.\n   * \n   * hashCode and equals will only depend on liveNodes and not clusterStateVersion.\n   */\n  public ClusterState(Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this(null, liveNodes, collectionStates, null);\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for publication.\n   * \n   * hashCode and equals will only depend on liveNodes and not clusterStateVersion.\n   */\n  public ClusterState(Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this(null, liveNodes, collectionStates);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Set[String],Map[String,DocCollection]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Set[String],Map[String,DocCollection]).mjava","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for publication.\n   * \n   * hashCode and equals will only depend on liveNodes and not clusterStateVersion.\n   */\n  @Deprecated\n  public ClusterState(Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this(null, liveNodes, collectionStates, null);\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for publication.\n   * \n   * hashCode and equals will only depend on liveNodes and not clusterStateVersion.\n   */\n  public ClusterState(Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this(null, liveNodes, collectionStates, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Set[String],Map[String,DocCollection]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Set[String],Map[String,DocCollection]).mjava","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for publication.\n   * \n   * hashCode and equals will only depend on liveNodes and not clusterStateVersion.\n   */\n  @Deprecated\n  public ClusterState(Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this(null, liveNodes, collectionStates);\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for publication.\n   * \n   * hashCode and equals will only depend on liveNodes and not clusterStateVersion.\n   */\n  @Deprecated\n  public ClusterState(Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this(null, liveNodes, collectionStates, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Set[String],Map[String,DocCollection]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Use this constr when ClusterState is meant for publication.\n   * \n   * hashCode and equals will only depend on liveNodes and not clusterStateVersion.\n   */\n  @Deprecated\n  public ClusterState(Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this(null, liveNodes, collectionStates);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Set[String],Map[String,DocCollection]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for publication.\n   * \n   * hashCode and equals will only depend on liveNodes and not clusterStateVersion.\n   */\n  @Deprecated\n  public ClusterState(Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this(null, liveNodes, collectionStates);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fc9f4a33c8fefeb1260aea04273a36b0d32378e","date":1421852764,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Set[String],Map[String,DocCollection]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Use this constr when ClusterState is meant for publication.\n   * \n   * hashCode and equals will only depend on liveNodes and not clusterStateVersion.\n   */\n  @Deprecated\n  public ClusterState(Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this(null, liveNodes, collectionStates);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":1,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Set[String],Map[String,DocCollection]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Set<String> liveNodes, Map<String, DocCollection> collectionStates) {\n    this(getRefMap(collectionStates), liveNodes);\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer znodeVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this(liveNodes, getRefMap(collectionStates),znodeVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["c5a558d54519c651068ddb202f03befefb1514a7"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"c5a558d54519c651068ddb202f03befefb1514a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5a558d54519c651068ddb202f03befefb1514a7"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["c5a558d54519c651068ddb202f03befefb1514a7","ce7cfca1a733d2ed1f7089b339faf006bdcc7b70"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"],"c5a558d54519c651068ddb202f03befefb1514a7":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","407687e67faf6e1f02a211ca078d8e3eed631027","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5a558d54519c651068ddb202f03befefb1514a7","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}