{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.VisitorTemplate#findSubCellsToVisit(Cell).mjava","commits":[{"id":"8259c159da2de2e8528524fb76b244b46cbded59","date":1364478249,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.VisitorTemplate#findSubCellsToVisit(Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.VisitorTemplate#findSubCellsToVisit(Node).mjava","sourceNew":"    /**\n     * Called when doing a divide & conquer to find the next intersecting cells\n     * of the query shape that are beneath {@code cell}. {@code cell} is\n     * guaranteed to have an intersection and thus this must return some number\n     * of nodes.\n     */\n    protected Iterator<Cell> findSubCellsToVisit(Cell cell) {\n      return cell.getSubCells(queryShape).iterator();\n    }\n\n","sourceOld":"    /**\n     * Called when doing a divide & conquer to find the next intersecting cells\n     * of the query shape that are beneath {@code cell}. {@code cell} is\n     * guaranteed to have an intersection and thus this must return some number\n     * of nodes.\n     */\n    protected Iterator<Node> findSubCellsToVisit(Node cell) {\n      return cell.getSubCells(queryShape).iterator();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","date":1397789149,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.VisitorTemplate#findSubCellsToVisit(Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.VisitorTemplate#findSubCellsToVisit(Cell).mjava","sourceNew":"    /**\n     * Called when doing a divide & conquer to find the next intersecting cells\n     * of the query shape that are beneath {@code cell}. {@code cell} is\n     * guaranteed to have an intersection and thus this must return some number\n     * of nodes.\n     */\n    protected CellIterator findSubCellsToVisit(Cell cell) {\n      return cell.getNextLevelCells(queryShape);\n    }\n\n","sourceOld":"    /**\n     * Called when doing a divide & conquer to find the next intersecting cells\n     * of the query shape that are beneath {@code cell}. {@code cell} is\n     * guaranteed to have an intersection and thus this must return some number\n     * of nodes.\n     */\n    protected Iterator<Cell> findSubCellsToVisit(Cell cell) {\n      return cell.getSubCells(queryShape).iterator();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.VisitorTemplate#findSubCellsToVisit(Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.VisitorTemplate#findSubCellsToVisit(Cell).mjava","sourceNew":"    /**\n     * Called when doing a divide and conquer to find the next intersecting cells\n     * of the query shape that are beneath {@code cell}. {@code cell} is\n     * guaranteed to have an intersection and thus this must return some number\n     * of nodes.\n     */\n    protected CellIterator findSubCellsToVisit(Cell cell) {\n      return cell.getNextLevelCells(queryShape);\n    }\n\n","sourceOld":"    /**\n     * Called when doing a divide & conquer to find the next intersecting cells\n     * of the query shape that are beneath {@code cell}. {@code cell} is\n     * guaranteed to have an intersection and thus this must return some number\n     * of nodes.\n     */\n    protected CellIterator findSubCellsToVisit(Cell cell) {\n      return cell.getNextLevelCells(queryShape);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeQuery.VisitorTemplate#findSubCellsToVisit(Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.VisitorTemplate#findSubCellsToVisit(Cell).mjava","sourceNew":"    /**\n     * Called when doing a divide and conquer to find the next intersecting cells\n     * of the query shape that are beneath {@code cell}. {@code cell} is\n     * guaranteed to have an intersection and thus this must return some number\n     * of nodes.\n     */\n    protected CellIterator findSubCellsToVisit(Cell cell) {\n      return cell.getNextLevelCells(queryShape);\n    }\n\n","sourceOld":"    /**\n     * Called when doing a divide and conquer to find the next intersecting cells\n     * of the query shape that are beneath {@code cell}. {@code cell} is\n     * guaranteed to have an intersection and thus this must return some number\n     * of nodes.\n     */\n    protected CellIterator findSubCellsToVisit(Cell cell) {\n      return cell.getNextLevelCells(queryShape);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"672b198fc3dce868916c727917cae58c2906763d":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["8259c159da2de2e8528524fb76b244b46cbded59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["672b198fc3dce868916c727917cae58c2906763d"],"8259c159da2de2e8528524fb76b244b46cbded59":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["672b198fc3dce868916c727917cae58c2906763d"],"672b198fc3dce868916c727917cae58c2906763d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8259c159da2de2e8528524fb76b244b46cbded59"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"8259c159da2de2e8528524fb76b244b46cbded59":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}