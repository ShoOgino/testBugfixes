{"path":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#finishTerm(TermStats).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    if (DEBUG) System.out.println(\"PW   finishTerm docCount=\" + stats.docFreq + \" pendingCount=\" + pendingCount + \" pendingTerms.size()=\" + pendingTerms.size());\n\n    assert pendingCount > 0 || pendingCount == -1;\n\n    if (pendingCount == -1) {\n      wrappedPostingsWriter.finishTerm(stats);\n      // Must add null entry to record terms that our\n      // wrapped postings impl added\n      pendingTerms.add(null);\n    } else {\n\n      // There were few enough total occurrences for this\n      // term, so we fully inline our postings data into\n      // terms dict, now:\n\n      // TODO: it'd be better to share this encoding logic\n      // in some inner codec that knows how to write a\n      // single doc / single position, etc.  This way if a\n      // given codec wants to store other interesting\n      // stuff, it could use this pulsing codec to do so\n\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        int lastDocID = 0;\n        int pendingIDX = 0;\n        int lastPayloadLength = -1;\n        while(pendingIDX < pendingCount) {\n          final Position doc = pending[pendingIDX];\n\n          final int delta = doc.docID - lastDocID;\n          lastDocID = doc.docID;\n\n          if (DEBUG) System.out.println(\"  write doc=\" + doc.docID + \" freq=\" + doc.termFreq);\n\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n\n          int lastPos = 0;\n          for(int posIDX=0;posIDX<doc.termFreq;posIDX++) {\n            final Position pos = pending[pendingIDX++];\n            assert pos.docID == doc.docID;\n            final int posDelta = pos.pos - lastPos;\n            lastPos = pos.pos;\n            if (DEBUG) System.out.println(\"    write pos=\" + pos.pos);\n            if (storePayloads) {\n              final int payloadLength = pos.payload == null ? 0 : pos.payload.length;\n              if (payloadLength != lastPayloadLength) {\n                buffer.writeVInt((posDelta << 1)|1);\n                buffer.writeVInt(payloadLength);\n                lastPayloadLength = payloadLength;\n              } else {\n                buffer.writeVInt(posDelta << 1);\n              }\n              if (payloadLength > 0) {\n                buffer.writeBytes(pos.payload.bytes, 0, pos.payload.length);\n              }\n            } else {\n              buffer.writeVInt(posDelta);\n            }\n          }\n        }\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          final int delta = doc.docID - lastDocID;\n          assert doc.termFreq != 0;\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n          lastDocID = doc.docID;\n        }\n      } else if (indexOptions == IndexOptions.DOCS_ONLY) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          buffer.writeVInt(doc.docID - lastDocID);\n          lastDocID = doc.docID;\n        }\n      }\n\n      final byte[] bytes = new byte[(int) buffer.getFilePointer()];\n      buffer.writeTo(bytes, 0);\n      pendingTerms.add(new PendingTerm(bytes));\n      buffer.reset();\n    }\n\n    pendingCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    if (DEBUG) System.out.println(\"PW   finishTerm docCount=\" + stats.docFreq + \" pendingCount=\" + pendingCount + \" pendingTerms.size()=\" + pendingTerms.size());\n\n    assert pendingCount > 0 || pendingCount == -1;\n\n    if (pendingCount == -1) {\n      wrappedPostingsWriter.finishTerm(stats);\n      // Must add null entry to record terms that our\n      // wrapped postings impl added\n      pendingTerms.add(null);\n    } else {\n\n      // There were few enough total occurrences for this\n      // term, so we fully inline our postings data into\n      // terms dict, now:\n\n      // TODO: it'd be better to share this encoding logic\n      // in some inner codec that knows how to write a\n      // single doc / single position, etc.  This way if a\n      // given codec wants to store other interesting\n      // stuff, it could use this pulsing codec to do so\n\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        int lastDocID = 0;\n        int pendingIDX = 0;\n        int lastPayloadLength = -1;\n        while(pendingIDX < pendingCount) {\n          final Position doc = pending[pendingIDX];\n\n          final int delta = doc.docID - lastDocID;\n          lastDocID = doc.docID;\n\n          if (DEBUG) System.out.println(\"  write doc=\" + doc.docID + \" freq=\" + doc.termFreq);\n\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n\n          int lastPos = 0;\n          for(int posIDX=0;posIDX<doc.termFreq;posIDX++) {\n            final Position pos = pending[pendingIDX++];\n            assert pos.docID == doc.docID;\n            final int posDelta = pos.pos - lastPos;\n            lastPos = pos.pos;\n            if (DEBUG) System.out.println(\"    write pos=\" + pos.pos);\n            if (storePayloads) {\n              final int payloadLength = pos.payload == null ? 0 : pos.payload.length;\n              if (payloadLength != lastPayloadLength) {\n                buffer.writeVInt((posDelta << 1)|1);\n                buffer.writeVInt(payloadLength);\n                lastPayloadLength = payloadLength;\n              } else {\n                buffer.writeVInt(posDelta << 1);\n              }\n              if (payloadLength > 0) {\n                buffer.writeBytes(pos.payload.bytes, 0, pos.payload.length);\n              }\n            } else {\n              buffer.writeVInt(posDelta);\n            }\n          }\n        }\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          final int delta = doc.docID - lastDocID;\n          assert doc.termFreq != 0;\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n          lastDocID = doc.docID;\n        }\n      } else if (indexOptions == IndexOptions.DOCS_ONLY) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          buffer.writeVInt(doc.docID - lastDocID);\n          lastDocID = doc.docID;\n        }\n      }\n\n      final byte[] bytes = new byte[(int) buffer.getFilePointer()];\n      buffer.writeTo(bytes, 0);\n      pendingTerms.add(new PendingTerm(bytes));\n      buffer.reset();\n    }\n\n    pendingCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7424161ac990ef8f959f09ee516148e4d12c48bc","date":1336236796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    if (DEBUG) System.out.println(\"PW   finishTerm docCount=\" + stats.docFreq + \" pendingCount=\" + pendingCount + \" pendingTerms.size()=\" + pendingTerms.size());\n\n    assert pendingCount > 0 || pendingCount == -1;\n\n    if (pendingCount == -1) {\n      wrappedPostingsWriter.finishTerm(stats);\n      // Must add null entry to record terms that our\n      // wrapped postings impl added\n      pendingTerms.add(null);\n    } else {\n\n      // There were few enough total occurrences for this\n      // term, so we fully inline our postings data into\n      // terms dict, now:\n\n      // TODO: it'd be better to share this encoding logic\n      // in some inner codec that knows how to write a\n      // single doc / single position, etc.  This way if a\n      // given codec wants to store other interesting\n      // stuff, it could use this pulsing codec to do so\n\n      if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n        int lastDocID = 0;\n        int pendingIDX = 0;\n        int lastPayloadLength = -1;\n        int lastOffsetLength = -1;\n        while(pendingIDX < pendingCount) {\n          final Position doc = pending[pendingIDX];\n\n          final int delta = doc.docID - lastDocID;\n          lastDocID = doc.docID;\n\n          if (DEBUG) System.out.println(\"  write doc=\" + doc.docID + \" freq=\" + doc.termFreq);\n\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n\n          int lastPos = 0;\n          int lastOffset = 0;\n          for(int posIDX=0;posIDX<doc.termFreq;posIDX++) {\n            final Position pos = pending[pendingIDX++];\n            assert pos.docID == doc.docID;\n            final int posDelta = pos.pos - lastPos;\n            lastPos = pos.pos;\n            if (DEBUG) System.out.println(\"    write pos=\" + pos.pos);\n            final int payloadLength = pos.payload == null ? 0 : pos.payload.length;\n            if (storePayloads) {\n              if (payloadLength != lastPayloadLength) {\n                buffer.writeVInt((posDelta << 1)|1);\n                buffer.writeVInt(payloadLength);\n                lastPayloadLength = payloadLength;\n              } else {\n                buffer.writeVInt(posDelta << 1);\n              }\n            } else {\n              buffer.writeVInt(posDelta);\n            }\n            \n            if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n              //System.out.println(\"write=\" + pos.startOffset + \",\" + pos.endOffset);\n              int offsetDelta = pos.startOffset - lastOffset;\n              int offsetLength = pos.endOffset - pos.startOffset;\n              if (offsetLength != lastOffsetLength) {\n                buffer.writeVInt(offsetDelta << 1 | 1);\n                buffer.writeVInt(offsetLength);\n              } else {\n                buffer.writeVInt(offsetDelta << 1);\n              }\n              lastOffset = pos.startOffset;\n              lastOffsetLength = offsetLength;             \n            }\n            \n            if (payloadLength > 0) {\n              assert storePayloads;\n              buffer.writeBytes(pos.payload.bytes, 0, pos.payload.length);\n            }\n          }\n        }\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          final int delta = doc.docID - lastDocID;\n          assert doc.termFreq != 0;\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n          lastDocID = doc.docID;\n        }\n      } else if (indexOptions == IndexOptions.DOCS_ONLY) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          buffer.writeVInt(doc.docID - lastDocID);\n          lastDocID = doc.docID;\n        }\n      }\n\n      final byte[] bytes = new byte[(int) buffer.getFilePointer()];\n      buffer.writeTo(bytes, 0);\n      pendingTerms.add(new PendingTerm(bytes));\n      buffer.reset();\n    }\n\n    pendingCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    if (DEBUG) System.out.println(\"PW   finishTerm docCount=\" + stats.docFreq + \" pendingCount=\" + pendingCount + \" pendingTerms.size()=\" + pendingTerms.size());\n\n    assert pendingCount > 0 || pendingCount == -1;\n\n    if (pendingCount == -1) {\n      wrappedPostingsWriter.finishTerm(stats);\n      // Must add null entry to record terms that our\n      // wrapped postings impl added\n      pendingTerms.add(null);\n    } else {\n\n      // There were few enough total occurrences for this\n      // term, so we fully inline our postings data into\n      // terms dict, now:\n\n      // TODO: it'd be better to share this encoding logic\n      // in some inner codec that knows how to write a\n      // single doc / single position, etc.  This way if a\n      // given codec wants to store other interesting\n      // stuff, it could use this pulsing codec to do so\n\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        int lastDocID = 0;\n        int pendingIDX = 0;\n        int lastPayloadLength = -1;\n        while(pendingIDX < pendingCount) {\n          final Position doc = pending[pendingIDX];\n\n          final int delta = doc.docID - lastDocID;\n          lastDocID = doc.docID;\n\n          if (DEBUG) System.out.println(\"  write doc=\" + doc.docID + \" freq=\" + doc.termFreq);\n\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n\n          int lastPos = 0;\n          for(int posIDX=0;posIDX<doc.termFreq;posIDX++) {\n            final Position pos = pending[pendingIDX++];\n            assert pos.docID == doc.docID;\n            final int posDelta = pos.pos - lastPos;\n            lastPos = pos.pos;\n            if (DEBUG) System.out.println(\"    write pos=\" + pos.pos);\n            if (storePayloads) {\n              final int payloadLength = pos.payload == null ? 0 : pos.payload.length;\n              if (payloadLength != lastPayloadLength) {\n                buffer.writeVInt((posDelta << 1)|1);\n                buffer.writeVInt(payloadLength);\n                lastPayloadLength = payloadLength;\n              } else {\n                buffer.writeVInt(posDelta << 1);\n              }\n              if (payloadLength > 0) {\n                buffer.writeBytes(pos.payload.bytes, 0, pos.payload.length);\n              }\n            } else {\n              buffer.writeVInt(posDelta);\n            }\n          }\n        }\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          final int delta = doc.docID - lastDocID;\n          assert doc.termFreq != 0;\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n          lastDocID = doc.docID;\n        }\n      } else if (indexOptions == IndexOptions.DOCS_ONLY) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          buffer.writeVInt(doc.docID - lastDocID);\n          lastDocID = doc.docID;\n        }\n      }\n\n      final byte[] bytes = new byte[(int) buffer.getFilePointer()];\n      buffer.writeTo(bytes, 0);\n      pendingTerms.add(new PendingTerm(bytes));\n      buffer.reset();\n    }\n\n    pendingCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","date":1342021960,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    // if (DEBUG) System.out.println(\"PW   finishTerm docCount=\" + stats.docFreq + \" pendingCount=\" + pendingCount + \" pendingTerms.size()=\" + pendingTerms.size());\n\n    assert pendingCount > 0 || pendingCount == -1;\n\n    if (pendingCount == -1) {\n      wrappedPostingsWriter.finishTerm(stats);\n      // Must add null entry to record terms that our\n      // wrapped postings impl added\n      pendingTerms.add(null);\n    } else {\n\n      // There were few enough total occurrences for this\n      // term, so we fully inline our postings data into\n      // terms dict, now:\n\n      // TODO: it'd be better to share this encoding logic\n      // in some inner codec that knows how to write a\n      // single doc / single position, etc.  This way if a\n      // given codec wants to store other interesting\n      // stuff, it could use this pulsing codec to do so\n\n      if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n        int lastDocID = 0;\n        int pendingIDX = 0;\n        int lastPayloadLength = -1;\n        int lastOffsetLength = -1;\n        while(pendingIDX < pendingCount) {\n          final Position doc = pending[pendingIDX];\n\n          final int delta = doc.docID - lastDocID;\n          lastDocID = doc.docID;\n\n          // if (DEBUG) System.out.println(\"  write doc=\" + doc.docID + \" freq=\" + doc.termFreq);\n\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n\n          int lastPos = 0;\n          int lastOffset = 0;\n          for(int posIDX=0;posIDX<doc.termFreq;posIDX++) {\n            final Position pos = pending[pendingIDX++];\n            assert pos.docID == doc.docID;\n            final int posDelta = pos.pos - lastPos;\n            lastPos = pos.pos;\n            // if (DEBUG) System.out.println(\"    write pos=\" + pos.pos);\n            final int payloadLength = pos.payload == null ? 0 : pos.payload.length;\n            if (storePayloads) {\n              if (payloadLength != lastPayloadLength) {\n                buffer.writeVInt((posDelta << 1)|1);\n                buffer.writeVInt(payloadLength);\n                lastPayloadLength = payloadLength;\n              } else {\n                buffer.writeVInt(posDelta << 1);\n              }\n            } else {\n              buffer.writeVInt(posDelta);\n            }\n            \n            if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n              //System.out.println(\"write=\" + pos.startOffset + \",\" + pos.endOffset);\n              int offsetDelta = pos.startOffset - lastOffset;\n              int offsetLength = pos.endOffset - pos.startOffset;\n              if (offsetLength != lastOffsetLength) {\n                buffer.writeVInt(offsetDelta << 1 | 1);\n                buffer.writeVInt(offsetLength);\n              } else {\n                buffer.writeVInt(offsetDelta << 1);\n              }\n              lastOffset = pos.startOffset;\n              lastOffsetLength = offsetLength;             \n            }\n            \n            if (payloadLength > 0) {\n              assert storePayloads;\n              buffer.writeBytes(pos.payload.bytes, 0, pos.payload.length);\n            }\n          }\n        }\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          final int delta = doc.docID - lastDocID;\n          assert doc.termFreq != 0;\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n          lastDocID = doc.docID;\n        }\n      } else if (indexOptions == IndexOptions.DOCS_ONLY) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          buffer.writeVInt(doc.docID - lastDocID);\n          lastDocID = doc.docID;\n        }\n      }\n\n      final byte[] bytes = new byte[(int) buffer.getFilePointer()];\n      buffer.writeTo(bytes, 0);\n      pendingTerms.add(new PendingTerm(bytes));\n      buffer.reset();\n    }\n\n    pendingCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    if (DEBUG) System.out.println(\"PW   finishTerm docCount=\" + stats.docFreq + \" pendingCount=\" + pendingCount + \" pendingTerms.size()=\" + pendingTerms.size());\n\n    assert pendingCount > 0 || pendingCount == -1;\n\n    if (pendingCount == -1) {\n      wrappedPostingsWriter.finishTerm(stats);\n      // Must add null entry to record terms that our\n      // wrapped postings impl added\n      pendingTerms.add(null);\n    } else {\n\n      // There were few enough total occurrences for this\n      // term, so we fully inline our postings data into\n      // terms dict, now:\n\n      // TODO: it'd be better to share this encoding logic\n      // in some inner codec that knows how to write a\n      // single doc / single position, etc.  This way if a\n      // given codec wants to store other interesting\n      // stuff, it could use this pulsing codec to do so\n\n      if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n        int lastDocID = 0;\n        int pendingIDX = 0;\n        int lastPayloadLength = -1;\n        int lastOffsetLength = -1;\n        while(pendingIDX < pendingCount) {\n          final Position doc = pending[pendingIDX];\n\n          final int delta = doc.docID - lastDocID;\n          lastDocID = doc.docID;\n\n          if (DEBUG) System.out.println(\"  write doc=\" + doc.docID + \" freq=\" + doc.termFreq);\n\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n\n          int lastPos = 0;\n          int lastOffset = 0;\n          for(int posIDX=0;posIDX<doc.termFreq;posIDX++) {\n            final Position pos = pending[pendingIDX++];\n            assert pos.docID == doc.docID;\n            final int posDelta = pos.pos - lastPos;\n            lastPos = pos.pos;\n            if (DEBUG) System.out.println(\"    write pos=\" + pos.pos);\n            final int payloadLength = pos.payload == null ? 0 : pos.payload.length;\n            if (storePayloads) {\n              if (payloadLength != lastPayloadLength) {\n                buffer.writeVInt((posDelta << 1)|1);\n                buffer.writeVInt(payloadLength);\n                lastPayloadLength = payloadLength;\n              } else {\n                buffer.writeVInt(posDelta << 1);\n              }\n            } else {\n              buffer.writeVInt(posDelta);\n            }\n            \n            if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n              //System.out.println(\"write=\" + pos.startOffset + \",\" + pos.endOffset);\n              int offsetDelta = pos.startOffset - lastOffset;\n              int offsetLength = pos.endOffset - pos.startOffset;\n              if (offsetLength != lastOffsetLength) {\n                buffer.writeVInt(offsetDelta << 1 | 1);\n                buffer.writeVInt(offsetLength);\n              } else {\n                buffer.writeVInt(offsetDelta << 1);\n              }\n              lastOffset = pos.startOffset;\n              lastOffsetLength = offsetLength;             \n            }\n            \n            if (payloadLength > 0) {\n              assert storePayloads;\n              buffer.writeBytes(pos.payload.bytes, 0, pos.payload.length);\n            }\n          }\n        }\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          final int delta = doc.docID - lastDocID;\n          assert doc.termFreq != 0;\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n          lastDocID = doc.docID;\n        }\n      } else if (indexOptions == IndexOptions.DOCS_ONLY) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          buffer.writeVInt(doc.docID - lastDocID);\n          lastDocID = doc.docID;\n        }\n      }\n\n      final byte[] bytes = new byte[(int) buffer.getFilePointer()];\n      buffer.writeTo(bytes, 0);\n      pendingTerms.add(new PendingTerm(bytes));\n      buffer.reset();\n    }\n\n    pendingCount = 0;\n  }\n\n","bugFix":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    // if (DEBUG) System.out.println(\"PW   finishTerm docCount=\" + stats.docFreq + \" pendingCount=\" + pendingCount + \" pendingTerms.size()=\" + pendingTerms.size());\n\n    assert pendingCount > 0 || pendingCount == -1;\n\n    if (pendingCount == -1) {\n      wrappedPostingsWriter.finishTerm(stats);\n      // Must add null entry to record terms that our\n      // wrapped postings impl added\n      pendingTerms.add(null);\n    } else {\n\n      // There were few enough total occurrences for this\n      // term, so we fully inline our postings data into\n      // terms dict, now:\n\n      // TODO: it'd be better to share this encoding logic\n      // in some inner codec that knows how to write a\n      // single doc / single position, etc.  This way if a\n      // given codec wants to store other interesting\n      // stuff, it could use this pulsing codec to do so\n\n      if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n        int lastDocID = 0;\n        int pendingIDX = 0;\n        int lastPayloadLength = -1;\n        int lastOffsetLength = -1;\n        while(pendingIDX < pendingCount) {\n          final Position doc = pending[pendingIDX];\n\n          final int delta = doc.docID - lastDocID;\n          lastDocID = doc.docID;\n\n          // if (DEBUG) System.out.println(\"  write doc=\" + doc.docID + \" freq=\" + doc.termFreq);\n\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n\n          int lastPos = 0;\n          int lastOffset = 0;\n          for(int posIDX=0;posIDX<doc.termFreq;posIDX++) {\n            final Position pos = pending[pendingIDX++];\n            assert pos.docID == doc.docID;\n            final int posDelta = pos.pos - lastPos;\n            lastPos = pos.pos;\n            // if (DEBUG) System.out.println(\"    write pos=\" + pos.pos);\n            final int payloadLength = pos.payload == null ? 0 : pos.payload.length;\n            if (storePayloads) {\n              if (payloadLength != lastPayloadLength) {\n                buffer.writeVInt((posDelta << 1)|1);\n                buffer.writeVInt(payloadLength);\n                lastPayloadLength = payloadLength;\n              } else {\n                buffer.writeVInt(posDelta << 1);\n              }\n            } else {\n              buffer.writeVInt(posDelta);\n            }\n            \n            if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n              //System.out.println(\"write=\" + pos.startOffset + \",\" + pos.endOffset);\n              int offsetDelta = pos.startOffset - lastOffset;\n              int offsetLength = pos.endOffset - pos.startOffset;\n              if (offsetLength != lastOffsetLength) {\n                buffer.writeVInt(offsetDelta << 1 | 1);\n                buffer.writeVInt(offsetLength);\n              } else {\n                buffer.writeVInt(offsetDelta << 1);\n              }\n              lastOffset = pos.startOffset;\n              lastOffsetLength = offsetLength;             \n            }\n            \n            if (payloadLength > 0) {\n              assert storePayloads;\n              buffer.writeBytes(pos.payload.bytes, 0, pos.payload.length);\n            }\n          }\n        }\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          final int delta = doc.docID - lastDocID;\n          assert doc.termFreq != 0;\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n          lastDocID = doc.docID;\n        }\n      } else if (indexOptions == IndexOptions.DOCS_ONLY) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          buffer.writeVInt(doc.docID - lastDocID);\n          lastDocID = doc.docID;\n        }\n      }\n\n      final byte[] bytes = new byte[(int) buffer.getFilePointer()];\n      buffer.writeTo(bytes, 0);\n      pendingTerms.add(new PendingTerm(bytes));\n      buffer.reset();\n    }\n\n    pendingCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    if (DEBUG) System.out.println(\"PW   finishTerm docCount=\" + stats.docFreq + \" pendingCount=\" + pendingCount + \" pendingTerms.size()=\" + pendingTerms.size());\n\n    assert pendingCount > 0 || pendingCount == -1;\n\n    if (pendingCount == -1) {\n      wrappedPostingsWriter.finishTerm(stats);\n      // Must add null entry to record terms that our\n      // wrapped postings impl added\n      pendingTerms.add(null);\n    } else {\n\n      // There were few enough total occurrences for this\n      // term, so we fully inline our postings data into\n      // terms dict, now:\n\n      // TODO: it'd be better to share this encoding logic\n      // in some inner codec that knows how to write a\n      // single doc / single position, etc.  This way if a\n      // given codec wants to store other interesting\n      // stuff, it could use this pulsing codec to do so\n\n      if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n        int lastDocID = 0;\n        int pendingIDX = 0;\n        int lastPayloadLength = -1;\n        int lastOffsetLength = -1;\n        while(pendingIDX < pendingCount) {\n          final Position doc = pending[pendingIDX];\n\n          final int delta = doc.docID - lastDocID;\n          lastDocID = doc.docID;\n\n          if (DEBUG) System.out.println(\"  write doc=\" + doc.docID + \" freq=\" + doc.termFreq);\n\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n\n          int lastPos = 0;\n          int lastOffset = 0;\n          for(int posIDX=0;posIDX<doc.termFreq;posIDX++) {\n            final Position pos = pending[pendingIDX++];\n            assert pos.docID == doc.docID;\n            final int posDelta = pos.pos - lastPos;\n            lastPos = pos.pos;\n            if (DEBUG) System.out.println(\"    write pos=\" + pos.pos);\n            final int payloadLength = pos.payload == null ? 0 : pos.payload.length;\n            if (storePayloads) {\n              if (payloadLength != lastPayloadLength) {\n                buffer.writeVInt((posDelta << 1)|1);\n                buffer.writeVInt(payloadLength);\n                lastPayloadLength = payloadLength;\n              } else {\n                buffer.writeVInt(posDelta << 1);\n              }\n            } else {\n              buffer.writeVInt(posDelta);\n            }\n            \n            if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n              //System.out.println(\"write=\" + pos.startOffset + \",\" + pos.endOffset);\n              int offsetDelta = pos.startOffset - lastOffset;\n              int offsetLength = pos.endOffset - pos.startOffset;\n              if (offsetLength != lastOffsetLength) {\n                buffer.writeVInt(offsetDelta << 1 | 1);\n                buffer.writeVInt(offsetLength);\n              } else {\n                buffer.writeVInt(offsetDelta << 1);\n              }\n              lastOffset = pos.startOffset;\n              lastOffsetLength = offsetLength;             \n            }\n            \n            if (payloadLength > 0) {\n              assert storePayloads;\n              buffer.writeBytes(pos.payload.bytes, 0, pos.payload.length);\n            }\n          }\n        }\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          final int delta = doc.docID - lastDocID;\n          assert doc.termFreq != 0;\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n          lastDocID = doc.docID;\n        }\n      } else if (indexOptions == IndexOptions.DOCS_ONLY) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          buffer.writeVInt(doc.docID - lastDocID);\n          lastDocID = doc.docID;\n        }\n      }\n\n      final byte[] bytes = new byte[(int) buffer.getFilePointer()];\n      buffer.writeTo(bytes, 0);\n      pendingTerms.add(new PendingTerm(bytes));\n      buffer.reset();\n    }\n\n    pendingCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    // if (DEBUG) System.out.println(\"PW   finishTerm docCount=\" + stats.docFreq + \" pendingCount=\" + pendingCount + \" pendingTerms.size()=\" + pendingTerms.size());\n\n    assert pendingCount > 0 || pendingCount == -1;\n\n    if (pendingCount == -1) {\n      wrappedPostingsWriter.finishTerm(stats);\n      // Must add null entry to record terms that our\n      // wrapped postings impl added\n      pendingTerms.add(null);\n    } else {\n\n      // There were few enough total occurrences for this\n      // term, so we fully inline our postings data into\n      // terms dict, now:\n\n      // TODO: it'd be better to share this encoding logic\n      // in some inner codec that knows how to write a\n      // single doc / single position, etc.  This way if a\n      // given codec wants to store other interesting\n      // stuff, it could use this pulsing codec to do so\n\n      if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n        int lastDocID = 0;\n        int pendingIDX = 0;\n        int lastPayloadLength = -1;\n        int lastOffsetLength = -1;\n        while(pendingIDX < pendingCount) {\n          final Position doc = pending[pendingIDX];\n\n          final int delta = doc.docID - lastDocID;\n          lastDocID = doc.docID;\n\n          // if (DEBUG) System.out.println(\"  write doc=\" + doc.docID + \" freq=\" + doc.termFreq);\n\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n\n          int lastPos = 0;\n          int lastOffset = 0;\n          for(int posIDX=0;posIDX<doc.termFreq;posIDX++) {\n            final Position pos = pending[pendingIDX++];\n            assert pos.docID == doc.docID;\n            final int posDelta = pos.pos - lastPos;\n            lastPos = pos.pos;\n            // if (DEBUG) System.out.println(\"    write pos=\" + pos.pos);\n            final int payloadLength = pos.payload == null ? 0 : pos.payload.length;\n            if (storePayloads) {\n              if (payloadLength != lastPayloadLength) {\n                buffer.writeVInt((posDelta << 1)|1);\n                buffer.writeVInt(payloadLength);\n                lastPayloadLength = payloadLength;\n              } else {\n                buffer.writeVInt(posDelta << 1);\n              }\n            } else {\n              buffer.writeVInt(posDelta);\n            }\n            \n            if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n              //System.out.println(\"write=\" + pos.startOffset + \",\" + pos.endOffset);\n              int offsetDelta = pos.startOffset - lastOffset;\n              int offsetLength = pos.endOffset - pos.startOffset;\n              if (offsetLength != lastOffsetLength) {\n                buffer.writeVInt(offsetDelta << 1 | 1);\n                buffer.writeVInt(offsetLength);\n              } else {\n                buffer.writeVInt(offsetDelta << 1);\n              }\n              lastOffset = pos.startOffset;\n              lastOffsetLength = offsetLength;             \n            }\n            \n            if (payloadLength > 0) {\n              assert storePayloads;\n              buffer.writeBytes(pos.payload.bytes, 0, pos.payload.length);\n            }\n          }\n        }\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          final int delta = doc.docID - lastDocID;\n          assert doc.termFreq != 0;\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n          lastDocID = doc.docID;\n        }\n      } else if (indexOptions == IndexOptions.DOCS_ONLY) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          buffer.writeVInt(doc.docID - lastDocID);\n          lastDocID = doc.docID;\n        }\n      }\n\n      final byte[] bytes = new byte[(int) buffer.getFilePointer()];\n      buffer.writeTo(bytes, 0);\n      pendingTerms.add(new PendingTerm(bytes));\n      buffer.reset();\n    }\n\n    pendingCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    if (DEBUG) System.out.println(\"PW   finishTerm docCount=\" + stats.docFreq + \" pendingCount=\" + pendingCount + \" pendingTerms.size()=\" + pendingTerms.size());\n\n    assert pendingCount > 0 || pendingCount == -1;\n\n    if (pendingCount == -1) {\n      wrappedPostingsWriter.finishTerm(stats);\n      // Must add null entry to record terms that our\n      // wrapped postings impl added\n      pendingTerms.add(null);\n    } else {\n\n      // There were few enough total occurrences for this\n      // term, so we fully inline our postings data into\n      // terms dict, now:\n\n      // TODO: it'd be better to share this encoding logic\n      // in some inner codec that knows how to write a\n      // single doc / single position, etc.  This way if a\n      // given codec wants to store other interesting\n      // stuff, it could use this pulsing codec to do so\n\n      if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n        int lastDocID = 0;\n        int pendingIDX = 0;\n        int lastPayloadLength = -1;\n        int lastOffsetLength = -1;\n        while(pendingIDX < pendingCount) {\n          final Position doc = pending[pendingIDX];\n\n          final int delta = doc.docID - lastDocID;\n          lastDocID = doc.docID;\n\n          if (DEBUG) System.out.println(\"  write doc=\" + doc.docID + \" freq=\" + doc.termFreq);\n\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n\n          int lastPos = 0;\n          int lastOffset = 0;\n          for(int posIDX=0;posIDX<doc.termFreq;posIDX++) {\n            final Position pos = pending[pendingIDX++];\n            assert pos.docID == doc.docID;\n            final int posDelta = pos.pos - lastPos;\n            lastPos = pos.pos;\n            if (DEBUG) System.out.println(\"    write pos=\" + pos.pos);\n            final int payloadLength = pos.payload == null ? 0 : pos.payload.length;\n            if (storePayloads) {\n              if (payloadLength != lastPayloadLength) {\n                buffer.writeVInt((posDelta << 1)|1);\n                buffer.writeVInt(payloadLength);\n                lastPayloadLength = payloadLength;\n              } else {\n                buffer.writeVInt(posDelta << 1);\n              }\n            } else {\n              buffer.writeVInt(posDelta);\n            }\n            \n            if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n              //System.out.println(\"write=\" + pos.startOffset + \",\" + pos.endOffset);\n              int offsetDelta = pos.startOffset - lastOffset;\n              int offsetLength = pos.endOffset - pos.startOffset;\n              if (offsetLength != lastOffsetLength) {\n                buffer.writeVInt(offsetDelta << 1 | 1);\n                buffer.writeVInt(offsetLength);\n              } else {\n                buffer.writeVInt(offsetDelta << 1);\n              }\n              lastOffset = pos.startOffset;\n              lastOffsetLength = offsetLength;             \n            }\n            \n            if (payloadLength > 0) {\n              assert storePayloads;\n              buffer.writeBytes(pos.payload.bytes, 0, pos.payload.length);\n            }\n          }\n        }\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          final int delta = doc.docID - lastDocID;\n          assert doc.termFreq != 0;\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n          lastDocID = doc.docID;\n        }\n      } else if (indexOptions == IndexOptions.DOCS_ONLY) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          buffer.writeVInt(doc.docID - lastDocID);\n          lastDocID = doc.docID;\n        }\n      }\n\n      final byte[] bytes = new byte[(int) buffer.getFilePointer()];\n      buffer.writeTo(bytes, 0);\n      pendingTerms.add(new PendingTerm(bytes));\n      buffer.reset();\n    }\n\n    pendingCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    // if (DEBUG) System.out.println(\"PW   finishTerm docCount=\" + stats.docFreq + \" pendingCount=\" + pendingCount + \" pendingTerms.size()=\" + pendingTerms.size());\n\n    assert pendingCount > 0 || pendingCount == -1;\n\n    if (pendingCount == -1) {\n      wrappedPostingsWriter.finishTerm(stats);\n      // Must add null entry to record terms that our\n      // wrapped postings impl added\n      pendingTerms.add(null);\n    } else {\n\n      // There were few enough total occurrences for this\n      // term, so we fully inline our postings data into\n      // terms dict, now:\n\n      // TODO: it'd be better to share this encoding logic\n      // in some inner codec that knows how to write a\n      // single doc / single position, etc.  This way if a\n      // given codec wants to store other interesting\n      // stuff, it could use this pulsing codec to do so\n\n      if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n        int lastDocID = 0;\n        int pendingIDX = 0;\n        int lastPayloadLength = -1;\n        int lastOffsetLength = -1;\n        while(pendingIDX < pendingCount) {\n          final Position doc = pending[pendingIDX];\n\n          final int delta = doc.docID - lastDocID;\n          lastDocID = doc.docID;\n\n          // if (DEBUG) System.out.println(\"  write doc=\" + doc.docID + \" freq=\" + doc.termFreq);\n\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n\n          int lastPos = 0;\n          int lastOffset = 0;\n          for(int posIDX=0;posIDX<doc.termFreq;posIDX++) {\n            final Position pos = pending[pendingIDX++];\n            assert pos.docID == doc.docID;\n            final int posDelta = pos.pos - lastPos;\n            lastPos = pos.pos;\n            // if (DEBUG) System.out.println(\"    write pos=\" + pos.pos);\n            final int payloadLength = pos.payload == null ? 0 : pos.payload.length;\n            if (storePayloads) {\n              if (payloadLength != lastPayloadLength) {\n                buffer.writeVInt((posDelta << 1)|1);\n                buffer.writeVInt(payloadLength);\n                lastPayloadLength = payloadLength;\n              } else {\n                buffer.writeVInt(posDelta << 1);\n              }\n            } else {\n              buffer.writeVInt(posDelta);\n            }\n            \n            if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n              //System.out.println(\"write=\" + pos.startOffset + \",\" + pos.endOffset);\n              int offsetDelta = pos.startOffset - lastOffset;\n              int offsetLength = pos.endOffset - pos.startOffset;\n              if (offsetLength != lastOffsetLength) {\n                buffer.writeVInt(offsetDelta << 1 | 1);\n                buffer.writeVInt(offsetLength);\n              } else {\n                buffer.writeVInt(offsetDelta << 1);\n              }\n              lastOffset = pos.startOffset;\n              lastOffsetLength = offsetLength;             \n            }\n            \n            if (payloadLength > 0) {\n              assert storePayloads;\n              buffer.writeBytes(pos.payload.bytes, 0, pos.payload.length);\n            }\n          }\n        }\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          final int delta = doc.docID - lastDocID;\n          assert doc.termFreq != 0;\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n          lastDocID = doc.docID;\n        }\n      } else if (indexOptions == IndexOptions.DOCS_ONLY) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          buffer.writeVInt(doc.docID - lastDocID);\n          lastDocID = doc.docID;\n        }\n      }\n\n      final byte[] bytes = new byte[(int) buffer.getFilePointer()];\n      buffer.writeTo(bytes, 0);\n      pendingTerms.add(new PendingTerm(bytes));\n      buffer.reset();\n    }\n\n    pendingCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    // if (DEBUG) System.out.println(\"PW   finishTerm docCount=\" + stats.docFreq + \" pendingCount=\" + pendingCount + \" pendingTerms.size()=\" + pendingTerms.size());\n\n    assert pendingCount > 0 || pendingCount == -1;\n\n    if (pendingCount == -1) {\n      wrappedPostingsWriter.finishTerm(stats);\n      // Must add null entry to record terms that our\n      // wrapped postings impl added\n      pendingTerms.add(null);\n    } else {\n\n      // There were few enough total occurrences for this\n      // term, so we fully inline our postings data into\n      // terms dict, now:\n\n      // TODO: it'd be better to share this encoding logic\n      // in some inner codec that knows how to write a\n      // single doc / single position, etc.  This way if a\n      // given codec wants to store other interesting\n      // stuff, it could use this pulsing codec to do so\n\n      if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n        int lastDocID = 0;\n        int pendingIDX = 0;\n        int lastPayloadLength = -1;\n        int lastOffsetLength = -1;\n        while(pendingIDX < pendingCount) {\n          final Position doc = pending[pendingIDX];\n\n          final int delta = doc.docID - lastDocID;\n          lastDocID = doc.docID;\n\n          // if (DEBUG) System.out.println(\"  write doc=\" + doc.docID + \" freq=\" + doc.termFreq);\n\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n\n          int lastPos = 0;\n          int lastOffset = 0;\n          for(int posIDX=0;posIDX<doc.termFreq;posIDX++) {\n            final Position pos = pending[pendingIDX++];\n            assert pos.docID == doc.docID;\n            final int posDelta = pos.pos - lastPos;\n            lastPos = pos.pos;\n            // if (DEBUG) System.out.println(\"    write pos=\" + pos.pos);\n            final int payloadLength = pos.payload == null ? 0 : pos.payload.length;\n            if (storePayloads) {\n              if (payloadLength != lastPayloadLength) {\n                buffer.writeVInt((posDelta << 1)|1);\n                buffer.writeVInt(payloadLength);\n                lastPayloadLength = payloadLength;\n              } else {\n                buffer.writeVInt(posDelta << 1);\n              }\n            } else {\n              buffer.writeVInt(posDelta);\n            }\n            \n            if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n              //System.out.println(\"write=\" + pos.startOffset + \",\" + pos.endOffset);\n              int offsetDelta = pos.startOffset - lastOffset;\n              int offsetLength = pos.endOffset - pos.startOffset;\n              if (offsetLength != lastOffsetLength) {\n                buffer.writeVInt(offsetDelta << 1 | 1);\n                buffer.writeVInt(offsetLength);\n              } else {\n                buffer.writeVInt(offsetDelta << 1);\n              }\n              lastOffset = pos.startOffset;\n              lastOffsetLength = offsetLength;             \n            }\n            \n            if (payloadLength > 0) {\n              assert storePayloads;\n              buffer.writeBytes(pos.payload.bytes, 0, pos.payload.length);\n            }\n          }\n        }\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          final int delta = doc.docID - lastDocID;\n          assert doc.termFreq != 0;\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n          lastDocID = doc.docID;\n        }\n      } else if (indexOptions == IndexOptions.DOCS_ONLY) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          buffer.writeVInt(doc.docID - lastDocID);\n          lastDocID = doc.docID;\n        }\n      }\n\n      final byte[] bytes = new byte[(int) buffer.getFilePointer()];\n      buffer.writeTo(bytes, 0);\n      pendingTerms.add(new PendingTerm(bytes));\n      buffer.reset();\n    }\n\n    pendingCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a":["7424161ac990ef8f959f09ee516148e4d12c48bc"],"aba371508186796cc6151d8223a5b4e16d02e26e":["7424161ac990ef8f959f09ee516148e4d12c48bc","2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["7424161ac990ef8f959f09ee516148e4d12c48bc","2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"7424161ac990ef8f959f09ee516148e4d12c48bc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a":["aba371508186796cc6151d8223a5b4e16d02e26e","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7424161ac990ef8f959f09ee516148e4d12c48bc"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"7424161ac990ef8f959f09ee516148e4d12c48bc":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}