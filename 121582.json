{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#getListener(SolrCore,ZkSolrResourceLoader).mjava","commits":[{"id":"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9","date":1420028708,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  private static Runnable getListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return new Runnable() {\n      @Override\n      public void run() {\n        log.info(\"config update listener called for core {}\", coreName);\n        SolrZkClient zkClient = cc.getZkController().getZkClient();\n        int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n        SolrConfig cfg = null;\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          cfg = core.getSolrConfig();\n          solrConfigversion = core.getSolrConfig().getOverlay().getZnodeVersion();\n          overlayVersion = core.getSolrConfig().getZnodeVersion();\n          if (managedSchmaResourcePath != null) {\n            managedSchemaVersion = ((ManagedIndexSchema) core.getLatestSchema()).getSchemaZkVersion();\n          }\n\n        }\n        if (cfg != null) {\n          cfg.refreshRequestParams() ;\n        }\n        if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n            checkStale(zkClient, solrConfigPath, overlayVersion) ||\n            checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n          log.info(\"core reload {}\", coreName);\n          cc.reload(coreName);\n          return;\n        }\n        //some files in conf directoy has changed other than schema.xml,\n        // solrconfig.xml. so fire event listeners\n\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          for (Runnable listener : core.confListeners) {\n            try {\n              listener.run();\n            } catch (Exception e) {\n              log.error(\"Error in listener \", e);\n            }\n          }\n        }\n\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe289aecdaeb2c4bd0886f7ba8ba52c00e4b6fad","date":1423651273,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  private static Runnable getListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return new Runnable() {\n      @Override\n      public void run() {\n        log.info(\"config update listener called for core {}\", coreName);\n        SolrZkClient zkClient = cc.getZkController().getZkClient();\n        int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n        SolrConfig cfg = null;\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          cfg = core.getSolrConfig();\n          solrConfigversion = core.getSolrConfig().getOverlay().getZnodeVersion();\n          overlayVersion = core.getSolrConfig().getZnodeVersion();\n          if (managedSchmaResourcePath != null) {\n            managedSchemaVersion = ((ManagedIndexSchema) core.getLatestSchema()).getSchemaZkVersion();\n          }\n\n        }\n        if (cfg != null) {\n          cfg.refreshRequestParams();\n        }\n        if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n            checkStale(zkClient, solrConfigPath, overlayVersion) ||\n            checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n          log.info(\"core reload {}\", coreName);\n          cc.reload(coreName);\n          return;\n        }\n        //some files in conf directoy has changed other than schema.xml,\n        // solrconfig.xml. so fire event listeners\n\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          for (Runnable listener : core.confListeners) {\n            try {\n              listener.run();\n            } catch (Exception e) {\n              log.error(\"Error in listener \", e);\n            }\n          }\n        }\n\n      }\n    };\n  }\n\n","sourceOld":"  private static Runnable getListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return new Runnable() {\n      @Override\n      public void run() {\n        log.info(\"config update listener called for core {}\", coreName);\n        SolrZkClient zkClient = cc.getZkController().getZkClient();\n        int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n        SolrConfig cfg = null;\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          cfg = core.getSolrConfig();\n          solrConfigversion = core.getSolrConfig().getOverlay().getZnodeVersion();\n          overlayVersion = core.getSolrConfig().getZnodeVersion();\n          if (managedSchmaResourcePath != null) {\n            managedSchemaVersion = ((ManagedIndexSchema) core.getLatestSchema()).getSchemaZkVersion();\n          }\n\n        }\n        if (cfg != null) {\n          cfg.refreshRequestParams() ;\n        }\n        if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n            checkStale(zkClient, solrConfigPath, overlayVersion) ||\n            checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n          log.info(\"core reload {}\", coreName);\n          cc.reload(coreName);\n          return;\n        }\n        //some files in conf directoy has changed other than schema.xml,\n        // solrconfig.xml. so fire event listeners\n\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          for (Runnable listener : core.confListeners) {\n            try {\n              listener.run();\n            } catch (Exception e) {\n              log.error(\"Error in listener \", e);\n            }\n          }\n        }\n\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"389d072b64597cdcf75c2d536aaec3e8afe3393f","date":1427818698,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return new Runnable() {\n      @Override\n      public void run() {\n        log.info(\"config update listener called for core {}\", coreName);\n        SolrZkClient zkClient = cc.getZkController().getZkClient();\n        int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n        SolrConfig cfg = null;\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          cfg = core.getSolrConfig();\n          solrConfigversion = core.getSolrConfig().getOverlay().getZnodeVersion();\n          overlayVersion = core.getSolrConfig().getZnodeVersion();\n          if (managedSchmaResourcePath != null) {\n            managedSchemaVersion = ((ManagedIndexSchema) core.getLatestSchema()).getSchemaZkVersion();\n          }\n\n        }\n        if (cfg != null) {\n          cfg.refreshRequestParams();\n        }\n        if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n            checkStale(zkClient, solrConfigPath, overlayVersion) ||\n            checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n          log.info(\"core reload {}\", coreName);\n          cc.reload(coreName);\n          return;\n        }\n        //some files in conf directory may have  other than managedschema, overlay, params\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          for (Runnable listener : core.confListeners) {\n            try {\n              listener.run();\n            } catch (Exception e) {\n              log.error(\"Error in listener \", e);\n            }\n          }\n        }\n\n      }\n    };\n  }\n\n","sourceOld":"  private static Runnable getListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return new Runnable() {\n      @Override\n      public void run() {\n        log.info(\"config update listener called for core {}\", coreName);\n        SolrZkClient zkClient = cc.getZkController().getZkClient();\n        int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n        SolrConfig cfg = null;\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          cfg = core.getSolrConfig();\n          solrConfigversion = core.getSolrConfig().getOverlay().getZnodeVersion();\n          overlayVersion = core.getSolrConfig().getZnodeVersion();\n          if (managedSchmaResourcePath != null) {\n            managedSchemaVersion = ((ManagedIndexSchema) core.getLatestSchema()).getSchemaZkVersion();\n          }\n\n        }\n        if (cfg != null) {\n          cfg.refreshRequestParams();\n        }\n        if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n            checkStale(zkClient, solrConfigPath, overlayVersion) ||\n            checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n          log.info(\"core reload {}\", coreName);\n          cc.reload(coreName);\n          return;\n        }\n        //some files in conf directoy has changed other than schema.xml,\n        // solrconfig.xml. so fire event listeners\n\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          for (Runnable listener : core.confListeners) {\n            try {\n              listener.run();\n            } catch (Exception e) {\n              log.error(\"Error in listener \", e);\n            }\n          }\n        }\n\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getConfListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  public static Runnable getConfListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return new Runnable() {\n      @Override\n      public void run() {\n        log.info(\"config update listener called for core {}\", coreName);\n        SolrZkClient zkClient = cc.getZkController().getZkClient();\n        int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n        SolrConfig cfg = null;\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          cfg = core.getSolrConfig();\n          solrConfigversion = core.getSolrConfig().getOverlay().getZnodeVersion();\n          overlayVersion = core.getSolrConfig().getZnodeVersion();\n          if (managedSchmaResourcePath != null) {\n            managedSchemaVersion = ((ManagedIndexSchema) core.getLatestSchema()).getSchemaZkVersion();\n          }\n\n        }\n        if (cfg != null) {\n          cfg.refreshRequestParams();\n        }\n        if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n            checkStale(zkClient, solrConfigPath, overlayVersion) ||\n            checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n          log.info(\"core reload {}\", coreName);\n          cc.reload(coreName);\n          return;\n        }\n        //some files in conf directory may have  other than managedschema, overlay, params\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          for (Runnable listener : core.confListeners) {\n            try {\n              listener.run();\n            } catch (Exception e) {\n              log.error(\"Error in listener \", e);\n            }\n          }\n        }\n\n      }\n    };\n  }\n\n","sourceOld":"  private static Runnable getListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if (core.getLatestSchema().isMutable() && core.getLatestSchema() instanceof ManagedIndexSchema) {\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes == null ? null : zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return new Runnable() {\n      @Override\n      public void run() {\n        log.info(\"config update listener called for core {}\", coreName);\n        SolrZkClient zkClient = cc.getZkController().getZkClient();\n        int solrConfigversion, overlayVersion, managedSchemaVersion = 0;\n        SolrConfig cfg = null;\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          cfg = core.getSolrConfig();\n          solrConfigversion = core.getSolrConfig().getOverlay().getZnodeVersion();\n          overlayVersion = core.getSolrConfig().getZnodeVersion();\n          if (managedSchmaResourcePath != null) {\n            managedSchemaVersion = ((ManagedIndexSchema) core.getLatestSchema()).getSchemaZkVersion();\n          }\n\n        }\n        if (cfg != null) {\n          cfg.refreshRequestParams();\n        }\n        if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n            checkStale(zkClient, solrConfigPath, overlayVersion) ||\n            checkStale(zkClient, managedSchmaResourcePath, managedSchemaVersion)) {\n          log.info(\"core reload {}\", coreName);\n          cc.reload(coreName);\n          return;\n        }\n        //some files in conf directoy has changed other than schema.xml,\n        // solrconfig.xml. so fire event listeners\n\n        try (SolrCore core = cc.solrCores.getCoreFromAnyList(coreName, true)) {\n          if (core == null || core.isClosed()) return;\n          for (Runnable listener : core.confListeners) {\n            try {\n              listener.run();\n            } catch (Exception e) {\n              log.error(\"Error in listener \", e);\n            }\n          }\n        }\n\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"389d072b64597cdcf75c2d536aaec3e8afe3393f":["fe289aecdaeb2c4bd0886f7ba8ba52c00e4b6fad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fab172655716b96f7e42376116235017a922de3a":["fe289aecdaeb2c4bd0886f7ba8ba52c00e4b6fad","389d072b64597cdcf75c2d536aaec3e8afe3393f"],"fe289aecdaeb2c4bd0886f7ba8ba52c00e4b6fad":["b5a70f7ff0756e3668447bffbbf8bce8e7c361b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["389d072b64597cdcf75c2d536aaec3e8afe3393f"]},"commit2Childs":{"389d072b64597cdcf75c2d536aaec3e8afe3393f":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5a70f7ff0756e3668447bffbbf8bce8e7c361b9"],"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9":["fe289aecdaeb2c4bd0886f7ba8ba52c00e4b6fad"],"fab172655716b96f7e42376116235017a922de3a":[],"fe289aecdaeb2c4bd0886f7ba8ba52c00e4b6fad":["389d072b64597cdcf75c2d536aaec3e8afe3393f","fab172655716b96f7e42376116235017a922de3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}