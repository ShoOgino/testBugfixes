{"path":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#populatePerformanceIndex(Analyzer).mjava","commits":[{"id":"45ae8f6354b0826d27014deff71fe330604a9783","date":1378195819,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#populatePerformanceIndex(Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  private void populatePerformanceIndex(Analyzer analyzer) throws IOException {\n    indexWriter.deleteAll();\n    indexWriter.commit();\n\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    int docs = 1000;\n    Random random = random();\n    for (int i = 0; i < docs; i++) {\n      boolean b = random.nextBoolean();\n      Document doc = new Document();\n      doc.add(new Field(textFieldName, createRandomString(random), ft));\n      doc.add(new Field(categoryFieldName, b ? \"technology\" : \"politics\", ft));\n      doc.add(new Field(booleanFieldName, String.valueOf(b), ft));\n      indexWriter.addDocument(doc, analyzer);\n    }\n    indexWriter.commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0","date":1422781929,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#populatePerformanceIndex(Analyzer).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#populatePerformanceIndex(Analyzer).mjava","sourceNew":"  private void populatePerformanceIndex(Analyzer analyzer) throws IOException {\n    indexWriter.close();\n    indexWriter = new RandomIndexWriter(random(), dir, newIndexWriterConfig(analyzer).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    indexWriter.commit();\n\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    int docs = 1000;\n    Random random = random();\n    for (int i = 0; i < docs; i++) {\n      boolean b = random.nextBoolean();\n      Document doc = new Document();\n      doc.add(new Field(textFieldName, createRandomString(random), ft));\n      doc.add(new Field(categoryFieldName, b ? \"technology\" : \"politics\", ft));\n      doc.add(new Field(booleanFieldName, String.valueOf(b), ft));\n      indexWriter.addDocument(doc);\n    }\n    indexWriter.commit();\n  }\n\n","sourceOld":"  private void populatePerformanceIndex(Analyzer analyzer) throws IOException {\n    indexWriter.deleteAll();\n    indexWriter.commit();\n\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    int docs = 1000;\n    Random random = random();\n    for (int i = 0; i < docs; i++) {\n      boolean b = random.nextBoolean();\n      Document doc = new Document();\n      doc.add(new Field(textFieldName, createRandomString(random), ft));\n      doc.add(new Field(categoryFieldName, b ? \"technology\" : \"politics\", ft));\n      doc.add(new Field(booleanFieldName, String.valueOf(b), ft));\n      indexWriter.addDocument(doc, analyzer);\n    }\n    indexWriter.commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba9b7b122d927a15ff4837e3d72876c609fef1b","date":1441232513,"type":5,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#getRandomIndex(Analyzer,int).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#populatePerformanceIndex(Analyzer).mjava","sourceNew":"  protected LeafReader getRandomIndex(Analyzer analyzer, int size) throws IOException {\n    indexWriter.close();\n    indexWriter = new RandomIndexWriter(random(), dir, newIndexWriterConfig(analyzer).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    indexWriter.deleteAll();\n    indexWriter.commit();\n\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Random random = random();\n    for (int i = 0; i < size; i++) {\n      boolean b = random.nextBoolean();\n      Document doc = new Document();\n      doc.add(new Field(textFieldName, createRandomString(random), ft));\n      doc.add(new Field(categoryFieldName, String.valueOf(random.nextInt(1000)), ft));\n      doc.add(new Field(booleanFieldName, String.valueOf(b), ft));\n      indexWriter.addDocument(doc);\n    }\n    indexWriter.commit();\n    return SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n  }\n\n","sourceOld":"  private void populatePerformanceIndex(Analyzer analyzer) throws IOException {\n    indexWriter.close();\n    indexWriter = new RandomIndexWriter(random(), dir, newIndexWriterConfig(analyzer).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    indexWriter.commit();\n\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    int docs = 1000;\n    Random random = random();\n    for (int i = 0; i < docs; i++) {\n      boolean b = random.nextBoolean();\n      Document doc = new Document();\n      doc.add(new Field(textFieldName, createRandomString(random), ft));\n      doc.add(new Field(categoryFieldName, b ? \"technology\" : \"politics\", ft));\n      doc.add(new Field(booleanFieldName, String.valueOf(b), ft));\n      indexWriter.addDocument(doc);\n    }\n    indexWriter.commit();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["45ae8f6354b0826d27014deff71fe330604a9783"],"45ae8f6354b0826d27014deff71fe330604a9783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45ae8f6354b0826d27014deff71fe330604a9783"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"45ae8f6354b0826d27014deff71fe330604a9783":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}