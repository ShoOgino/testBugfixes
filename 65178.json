{"path":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,List[String]).mjava","commits":[{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#getObjectByPath(Map,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      String s = hierarchy.get(i);\n      if (i < hierarchy.size() - 1) {\n        if (!(obj.get(s) instanceof Map)) return null;\n        obj = (Map) obj.get(s);\n        if (obj == null) return null;\n      } else {\n        Object val = obj.get(s);\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      String s = hierarchy.get(i);\n      if (i < hierarchy.size() - 1) {\n        if (!(obj.get(s) instanceof Map)) return null;\n        obj = (Map) obj.get(s);\n        if (obj == null) return null;\n      } else {\n        Object val = obj.get(s);\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c609b959cb2dad7c9d9b3237fa2b806629e9206d","date":1439303330,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = obj.get(s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!(o instanceof Map)) return null;\n        obj = (Map) o;\n      } else {\n        Object val = obj.get(s);\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      String s = hierarchy.get(i);\n      if (i < hierarchy.size() - 1) {\n        if (!(obj.get(s) instanceof Map)) return null;\n        obj = (Map) obj.get(s);\n        if (obj == null) return null;\n      } else {\n        Object val = obj.get(s);\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = obj.get(s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!(o instanceof Map)) return null;\n        obj = (Map) o;\n      } else {\n        Object val = obj.get(s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = obj.get(s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!(o instanceof Map)) return null;\n        obj = (Map) o;\n      } else {\n        Object val = obj.get(s);\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = obj.get(s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!(o instanceof Map)) return null;\n        obj = (Map) o;\n      } else {\n        Object val = obj.get(s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = obj.get(s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!(o instanceof Map)) return null;\n        obj = (Map) o;\n      } else {\n        Object val = obj.get(s);\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e12a337a9a98e388c3a5bca9c8256d21c13781f9","date":1492093671,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = obj.get(s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!(o instanceof Map)) return null;\n        obj = (Map) o;\n      } else {\n        Object val = obj.get(s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = obj.get(s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!(o instanceof Map)) return null;\n        obj = (Map) o;\n      } else {\n        Object val = obj.get(s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = obj.get(s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!(o instanceof Map)) return null;\n        obj = (Map) o;\n      } else {\n        Object val = obj.get(s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = obj.get(s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!(o instanceof Map)) return null;\n        obj = (Map) o;\n      } else {\n        Object val = obj.get(s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = obj.get(s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!(o instanceof Map)) return null;\n        obj = (Map) o;\n      } else {\n        Object val = obj.get(s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = obj.get(s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!(o instanceof Map)) return null;\n        obj = (Map) o;\n      } else {\n        Object val = obj.get(s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4a9a892a743a560d17851cd4ce6cb0aaa2d8712","date":1498109521,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    if(!isMapLike(root)) throw new RuntimeException(\"must be a Map or NamedList\");\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = obj.get(s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!(o instanceof Map)) return null;\n        obj = (Map) o;\n      } else {\n        Object val = obj.get(s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,List[String]).mjava","sourceNew":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    if(!isMapLike(root)) throw new RuntimeException(\"must be a Map or NamedList\");\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return null;\n        obj = o;\n      } else {\n        Object val = getVal(obj, s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && isMapLike(val)) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    if(root == null) return null;\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = obj.get(s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!(o instanceof Map)) return null;\n        obj = (Map) o;\n      } else {\n        Object val = obj.get(s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,List[String]).mjava","sourceNew":null,"sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, List<String> hierarchy) {\n    Map obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -1;\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = obj.get(s);\n        if (o == null) return null;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!(o instanceof Map)) return null;\n        obj = (Map) o;\n      } else {\n        Object val = obj.get(s);\n        if (val == null) return null;\n        if (idx > -1) {\n          List l = (List) val;\n          val = idx < l.size() ? l.get(idx) : null;\n        }\n        if (onlyPrimitive && val instanceof Map) {\n          return null;\n        }\n        return val;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4a9a892a743a560d17851cd4ce6cb0aaa2d8712":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","a513b6a92751e54c76fb5447948c9e7d437163a7"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["c609b959cb2dad7c9d9b3237fa2b806629e9206d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["c609b959cb2dad7c9d9b3237fa2b806629e9206d","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"c609b959cb2dad7c9d9b3237fa2b806629e9206d":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e12a337a9a98e388c3a5bca9c8256d21c13781f9":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["e12a337a9a98e388c3a5bca9c8256d21c13781f9","d4a9a892a743a560d17851cd4ce6cb0aaa2d8712"],"28288370235ed02234a64753cdbf0c6ec096304a":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","d4a9a892a743a560d17851cd4ce6cb0aaa2d8712"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"d4a9a892a743a560d17851cd4ce6cb0aaa2d8712":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["d4a9a892a743a560d17851cd4ce6cb0aaa2d8712"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","e12a337a9a98e388c3a5bca9c8256d21c13781f9","28288370235ed02234a64753cdbf0c6ec096304a"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"c609b959cb2dad7c9d9b3237fa2b806629e9206d":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["c609b959cb2dad7c9d9b3237fa2b806629e9206d"],"e12a337a9a98e388c3a5bca9c8256d21c13781f9":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}