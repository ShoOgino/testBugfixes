{"path":"solr/core/src/test/org/apache/solr/rest/TestManagedResource#testCustomStorageFormat().mjava","commits":[{"id":"afb6bf9ce227ab6aac5068547e286ecc958b8b9d","date":1394661169,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/TestManagedResource#testCustomStorageFormat().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The ManagedResource storage framework allows the end developer to use a different\n   * storage format other than JSON, as demonstrated by this test. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  @Test\n  public void testCustomStorageFormat() throws Exception {\n    String resourceId = \"/schema/test/foo\";\n    String storedResourceId = \"_schema_test_foo.bin\";\n    \n    MockAnalysisComponent observer = new MockAnalysisComponent();\n    List<ManagedResourceObserver> observers = \n        Arrays.asList((ManagedResourceObserver)observer);\n    \n    // put some data in the storage impl so that we can test \n    // initialization of managed data from storage\n    Map<String,Object> storedData = new HashMap<>();\n    Map<String,Object> initArgs = new HashMap<>();\n\n    // {'initArgs':{'someArg':'someVal', 'arg2':true, 'arg3':['one','two','three'],\n    //              'arg4':18, 'arg5':0.9, 'arg6':{ 'uno':1, 'dos':2 }},'\"\n    initArgs.put(\"someArg\", \"someVal\");\n    initArgs.put(\"arg2\", Boolean.TRUE);\n    List<String> arg3list = Arrays.asList(\"one\", \"two\", \"three\");\n    initArgs.put(\"arg3\", arg3list);\n    initArgs.put(\"arg4\", 18L);\n    initArgs.put(\"arg5\", 0.9);\n    Map<String,Long> arg6map = new HashMap<>();\n    arg6map.put(\"uno\", 1L);\n    arg6map.put(\"dos\", 2L);\n    initArgs.put(\"arg6\", arg6map);\n\n    storedData.put(\"initArgs\", initArgs);\n    List<String> managedList = new ArrayList<>();\n    managedList.add(\"1\");\n    managedList.add(\"2\");\n    managedList.add(\"3\");\n    storedData.put(ManagedResource.MANAGED_JSON_LIST_FIELD, managedList);\n    ManagedResourceStorage.InMemoryStorageIO storageIO = \n        new ManagedResourceStorage.InMemoryStorageIO();\n    storageIO.storage.put(storedResourceId, ser2bytes((Serializable)storedData));\n    \n    CustomStorageFormatResource res = \n        new CustomStorageFormatResource(resourceId, new SolrResourceLoader(\"./\"), storageIO);\n    res.loadManagedDataAndNotify(observers);\n    \n    assertTrue(\"Observer was not notified by ManagedResource!\", observer.wasNotified);\n\n    // now store some data (as if it came from the REST API)\n    List<String> updatedData = new ArrayList<>();\n    updatedData.add(\"1\");\n    updatedData.add(\"2\");\n    updatedData.add(\"3\");\n    updatedData.add(\"4\");    \n    res.storeManagedData(updatedData);\n    \n    Object stored = res.storage.load(resourceId);\n    assertNotNull(stored);\n    assertTrue(stored instanceof Map);\n    Map storedMap = (Map)stored;\n    assertNotNull(storedMap.get(\"initArgs\"));\n    List storedList = (List)storedMap.get(ManagedResource.MANAGED_JSON_LIST_FIELD);\n    assertTrue(storedList.contains(\"4\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/TestManagedResource#testCustomStorageFormat().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/TestManagedResource#testCustomStorageFormat().mjava","sourceNew":"  /**\n   * The ManagedResource storage framework allows the end developer to use a different\n   * storage format other than JSON, as demonstrated by this test. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  @Test\n  public void testCustomStorageFormat() throws Exception {\n    String resourceId = \"/schema/test/foo\";\n    String storedResourceId = \"_schema_test_foo.bin\";\n    \n    MockAnalysisComponent observer = new MockAnalysisComponent();\n    List<ManagedResourceObserver> observers = \n        Arrays.asList((ManagedResourceObserver)observer);\n    \n    // put some data in the storage impl so that we can test \n    // initialization of managed data from storage\n    Map<String,Object> storedData = new HashMap<>();\n    Map<String,Object> initArgs = new HashMap<>();\n\n    // {'initArgs':{'someArg':'someVal', 'arg2':true, 'arg3':['one','two','three'],\n    //              'arg4':18, 'arg5':0.9, 'arg6':{ 'uno':1, 'dos':2 }},'\"\n    initArgs.put(\"someArg\", \"someVal\");\n    initArgs.put(\"arg2\", Boolean.TRUE);\n    List<String> arg3list = Arrays.asList(\"one\", \"two\", \"three\");\n    initArgs.put(\"arg3\", arg3list);\n    initArgs.put(\"arg4\", 18L);\n    initArgs.put(\"arg5\", 0.9);\n    Map<String,Long> arg6map = new HashMap<>();\n    arg6map.put(\"uno\", 1L);\n    arg6map.put(\"dos\", 2L);\n    initArgs.put(\"arg6\", arg6map);\n\n    storedData.put(\"initArgs\", initArgs);\n    List<String> managedList = new ArrayList<>();\n    managedList.add(\"1\");\n    managedList.add(\"2\");\n    managedList.add(\"3\");\n    storedData.put(ManagedResource.MANAGED_JSON_LIST_FIELD, managedList);\n    ManagedResourceStorage.InMemoryStorageIO storageIO = \n        new ManagedResourceStorage.InMemoryStorageIO();\n    storageIO.storage.put(storedResourceId, ser2bytes((Serializable)storedData));\n    \n    CustomStorageFormatResource res = \n        new CustomStorageFormatResource(resourceId, new SolrResourceLoader(Paths.get(\"./\")), storageIO);\n    res.loadManagedDataAndNotify(observers);\n    \n    assertTrue(\"Observer was not notified by ManagedResource!\", observer.wasNotified);\n\n    // now store some data (as if it came from the REST API)\n    List<String> updatedData = new ArrayList<>();\n    updatedData.add(\"1\");\n    updatedData.add(\"2\");\n    updatedData.add(\"3\");\n    updatedData.add(\"4\");    \n    res.storeManagedData(updatedData);\n    \n    Object stored = res.storage.load(resourceId);\n    assertNotNull(stored);\n    assertTrue(stored instanceof Map);\n    Map storedMap = (Map)stored;\n    assertNotNull(storedMap.get(\"initArgs\"));\n    List storedList = (List)storedMap.get(ManagedResource.MANAGED_JSON_LIST_FIELD);\n    assertTrue(storedList.contains(\"4\"));\n  }\n\n","sourceOld":"  /**\n   * The ManagedResource storage framework allows the end developer to use a different\n   * storage format other than JSON, as demonstrated by this test. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  @Test\n  public void testCustomStorageFormat() throws Exception {\n    String resourceId = \"/schema/test/foo\";\n    String storedResourceId = \"_schema_test_foo.bin\";\n    \n    MockAnalysisComponent observer = new MockAnalysisComponent();\n    List<ManagedResourceObserver> observers = \n        Arrays.asList((ManagedResourceObserver)observer);\n    \n    // put some data in the storage impl so that we can test \n    // initialization of managed data from storage\n    Map<String,Object> storedData = new HashMap<>();\n    Map<String,Object> initArgs = new HashMap<>();\n\n    // {'initArgs':{'someArg':'someVal', 'arg2':true, 'arg3':['one','two','three'],\n    //              'arg4':18, 'arg5':0.9, 'arg6':{ 'uno':1, 'dos':2 }},'\"\n    initArgs.put(\"someArg\", \"someVal\");\n    initArgs.put(\"arg2\", Boolean.TRUE);\n    List<String> arg3list = Arrays.asList(\"one\", \"two\", \"three\");\n    initArgs.put(\"arg3\", arg3list);\n    initArgs.put(\"arg4\", 18L);\n    initArgs.put(\"arg5\", 0.9);\n    Map<String,Long> arg6map = new HashMap<>();\n    arg6map.put(\"uno\", 1L);\n    arg6map.put(\"dos\", 2L);\n    initArgs.put(\"arg6\", arg6map);\n\n    storedData.put(\"initArgs\", initArgs);\n    List<String> managedList = new ArrayList<>();\n    managedList.add(\"1\");\n    managedList.add(\"2\");\n    managedList.add(\"3\");\n    storedData.put(ManagedResource.MANAGED_JSON_LIST_FIELD, managedList);\n    ManagedResourceStorage.InMemoryStorageIO storageIO = \n        new ManagedResourceStorage.InMemoryStorageIO();\n    storageIO.storage.put(storedResourceId, ser2bytes((Serializable)storedData));\n    \n    CustomStorageFormatResource res = \n        new CustomStorageFormatResource(resourceId, new SolrResourceLoader(\"./\"), storageIO);\n    res.loadManagedDataAndNotify(observers);\n    \n    assertTrue(\"Observer was not notified by ManagedResource!\", observer.wasNotified);\n\n    // now store some data (as if it came from the REST API)\n    List<String> updatedData = new ArrayList<>();\n    updatedData.add(\"1\");\n    updatedData.add(\"2\");\n    updatedData.add(\"3\");\n    updatedData.add(\"4\");    \n    res.storeManagedData(updatedData);\n    \n    Object stored = res.storage.load(resourceId);\n    assertNotNull(stored);\n    assertTrue(stored instanceof Map);\n    Map storedMap = (Map)stored;\n    assertNotNull(storedMap.get(\"initArgs\"));\n    List storedList = (List)storedMap.get(ManagedResource.MANAGED_JSON_LIST_FIELD);\n    assertTrue(storedList.contains(\"4\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a626ec4d1c92e59fe390724d6220081047b03ce7":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a626ec4d1c92e59fe390724d6220081047b03ce7"]},"commit2Childs":{"a626ec4d1c92e59fe390724d6220081047b03ce7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}