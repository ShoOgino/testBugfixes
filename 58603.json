{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapePolygonQuery#queryMatches(byte[],int[],QueryRelation).mjava","commits":[{"id":"5e8251ad51618827e557dd369f16921a666914b5","date":1548082828,"type":1,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapePolygonQuery#queryMatches(byte[],int[],QueryRelation).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapePolygonQuery#queryMatches(byte[],int[]).mjava","sourceNew":"  @Override\n  protected boolean queryMatches(byte[] t, int[] scratchTriangle, QueryRelation queryRelation) {\n    LatLonShape.decodeTriangle(t, scratchTriangle);\n\n    double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle[0]);\n    double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle[1]);\n    double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle[2]);\n    double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle[3]);\n    double clat = GeoEncodingUtils.decodeLatitude(scratchTriangle[4]);\n    double clon = GeoEncodingUtils.decodeLongitude(scratchTriangle[5]);\n\n    if (queryRelation == QueryRelation.WITHIN) {\n      return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_INSIDE_QUERY;\n    }\n    // INTERSECTS\n    return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) != Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  @Override\n  protected boolean queryMatches(byte[] t, int[] scratchTriangle) {\n    LatLonShape.decodeTriangle(t, scratchTriangle);\n\n    double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle[0]);\n    double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle[1]);\n    double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle[2]);\n    double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle[3]);\n    double clat = GeoEncodingUtils.decodeLatitude(scratchTriangle[4]);\n    double clon = GeoEncodingUtils.decodeLongitude(scratchTriangle[5]);\n\n    if (queryRelation == QueryRelation.WITHIN) {\n      return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_INSIDE_QUERY;\n    }\n    // INTERSECTS\n    return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) != Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":1,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapePolygonQuery#queryMatches(byte[],int[],QueryRelation).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapePolygonQuery#queryMatches(byte[],int[]).mjava","sourceNew":"  @Override\n  protected boolean queryMatches(byte[] t, int[] scratchTriangle, QueryRelation queryRelation) {\n    LatLonShape.decodeTriangle(t, scratchTriangle);\n\n    double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle[0]);\n    double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle[1]);\n    double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle[2]);\n    double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle[3]);\n    double clat = GeoEncodingUtils.decodeLatitude(scratchTriangle[4]);\n    double clon = GeoEncodingUtils.decodeLongitude(scratchTriangle[5]);\n\n    if (queryRelation == QueryRelation.WITHIN) {\n      return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_INSIDE_QUERY;\n    }\n    // INTERSECTS\n    return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) != Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  @Override\n  protected boolean queryMatches(byte[] t, int[] scratchTriangle) {\n    LatLonShape.decodeTriangle(t, scratchTriangle);\n\n    double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle[0]);\n    double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle[1]);\n    double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle[2]);\n    double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle[3]);\n    double clat = GeoEncodingUtils.decodeLatitude(scratchTriangle[4]);\n    double clon = GeoEncodingUtils.decodeLongitude(scratchTriangle[5]);\n\n    if (queryRelation == QueryRelation.WITHIN) {\n      return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_INSIDE_QUERY;\n    }\n    // INTERSECTS\n    return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) != Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapePolygonQuery#queryMatches(byte[],int[],QueryRelation).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapePolygonQuery#queryMatches(byte[],int[],QueryRelation).mjava","sourceNew":"  @Override\n  protected boolean queryMatches(byte[] t, int[] scratchTriangle, QueryRelation queryRelation) {\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle[0]);\n    double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle[1]);\n    double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle[2]);\n    double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle[3]);\n    double clat = GeoEncodingUtils.decodeLatitude(scratchTriangle[4]);\n    double clon = GeoEncodingUtils.decodeLongitude(scratchTriangle[5]);\n\n    if (queryRelation == QueryRelation.WITHIN) {\n      return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_INSIDE_QUERY;\n    }\n    // INTERSECTS\n    return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) != Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  @Override\n  protected boolean queryMatches(byte[] t, int[] scratchTriangle, QueryRelation queryRelation) {\n    LatLonShape.decodeTriangle(t, scratchTriangle);\n\n    double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle[0]);\n    double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle[1]);\n    double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle[2]);\n    double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle[3]);\n    double clat = GeoEncodingUtils.decodeLatitude(scratchTriangle[4]);\n    double clon = GeoEncodingUtils.decodeLongitude(scratchTriangle[5]);\n\n    if (queryRelation == QueryRelation.WITHIN) {\n      return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_INSIDE_QUERY;\n    }\n    // INTERSECTS\n    return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) != Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ed90f8ba7e7be13d155f954862178b23a324125","date":1568020603,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapePolygonQuery#queryMatches(byte[],ShapeField.DecodedTriangle,QueryRelation).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapePolygonQuery#queryMatches(byte[],int[],QueryRelation).mjava","sourceNew":"  @Override\n  protected boolean queryMatches(byte[] t, ShapeField.DecodedTriangle scratchTriangle, QueryRelation queryRelation) {\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle.aY);\n    double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle.aX);\n    double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle.bY);\n    double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle.bX);\n    double clat = GeoEncodingUtils.decodeLatitude(scratchTriangle.cY);\n    double clon = GeoEncodingUtils.decodeLongitude(scratchTriangle.cX);\n\n    if (queryRelation == QueryRelation.WITHIN) {\n      return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_INSIDE_QUERY;\n    }\n    // INTERSECTS\n    return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) != Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  @Override\n  protected boolean queryMatches(byte[] t, int[] scratchTriangle, QueryRelation queryRelation) {\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle[0]);\n    double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle[1]);\n    double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle[2]);\n    double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle[3]);\n    double clat = GeoEncodingUtils.decodeLatitude(scratchTriangle[4]);\n    double clon = GeoEncodingUtils.decodeLongitude(scratchTriangle[5]);\n\n    if (queryRelation == QueryRelation.WITHIN) {\n      return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_INSIDE_QUERY;\n    }\n    // INTERSECTS\n    return poly2D.relateTriangle(alon, alat, blon, blat, clon, clat) != Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c286b0d8c507a88b289407e2fe161effa275c6b0":["5e8251ad51618827e557dd369f16921a666914b5"],"5ed90f8ba7e7be13d155f954862178b23a324125":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"5e8251ad51618827e557dd369f16921a666914b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ed90f8ba7e7be13d155f954862178b23a324125"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e8251ad51618827e557dd369f16921a666914b5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e8251ad51618827e557dd369f16921a666914b5","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["5ed90f8ba7e7be13d155f954862178b23a324125"],"5e8251ad51618827e557dd369f16921a666914b5":["c286b0d8c507a88b289407e2fe161effa275c6b0","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"5ed90f8ba7e7be13d155f954862178b23a324125":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}