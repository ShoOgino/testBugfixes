{"path":"src/common/org/apache/solr/common/util/NamedListCodec#writeKnownType(Object).mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/NamedListCodec#writeKnownType(Object).mjava","pathOld":"src/java/org/apache/solr/common/util/NamedListCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof List) {\n      writeArray((List) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if(resolver == null){\n        writeSolrDocument((SolrDocument) val);\n      }else {\n        Object retVal = resolver.resolve(val, this);\n        if(retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable)val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof List) {\n      writeArray((List) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if(resolver == null){\n        writeSolrDocument((SolrDocument) val);\n      }else {\n        Object retVal = resolver.resolve(val, this);\n        if(retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable)val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18a1b51b47d1035bf90ecfc7d16c739fe983647a","date":1229928361,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"src/common/org/apache/solr/common/util/NamedListCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof List) {\n      writeArray((List) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof List) {\n      writeArray((List) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if(resolver == null){\n        writeSolrDocument((SolrDocument) val);\n      }else {\n        Object retVal = resolver.resolve(val, this);\n        if(retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable)val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"18a1b51b47d1035bf90ecfc7d16c739fe983647a":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["18a1b51b47d1035bf90ecfc7d16c739fe983647a"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"18a1b51b47d1035bf90ecfc7d16c739fe983647a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["18a1b51b47d1035bf90ecfc7d16c739fe983647a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}