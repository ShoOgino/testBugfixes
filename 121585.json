{"path":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/MorphlineReducerTest#testReducer().mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/MorphlineReducerTest#testReducer().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReducer() throws Exception {\n    MySolrReducer myReducer = new MySolrReducer();\n    ReduceDriver<Text, SolrInputDocumentWritable, Text, SolrInputDocumentWritable> reduceDriver = ReduceDriver.newReduceDriver(myReducer);\n\n    Configuration config = reduceDriver.getConfiguration();\n    setupHadoopConfig(config);\n\n    List<SolrInputDocumentWritable> values = new ArrayList<SolrInputDocumentWritable>();\n    SolrInputDocument sid = new SolrInputDocument();\n    String id = \"myid1\";\n    sid.addField(\"id\", id);\n    sid.addField(\"text\", \"some unique text\");\n    SolrInputDocumentWritable sidw = new SolrInputDocumentWritable(sid);\n    values.add(sidw);\n    reduceDriver.withInput(new Text(id), values);\n\n    reduceDriver.withCacheArchive(solrHomeZip.getAbsolutePath());\n    \n    reduceDriver.withOutputFormat(SolrOutputFormat.class, NullInputFormat.class);\n\n    reduceDriver.run();\n\n    assertEquals(\"Expected 1 counter increment\", 1, reduceDriver.getCounters()\n        .findCounter(SolrCounters.class.getName(), SolrCounters.DOCUMENTS_WRITTEN.toString()).getValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineReducerTest#testReducer().mjava","pathOld":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/MorphlineReducerTest#testReducer().mjava","sourceNew":"  @Test\n  public void testReducer() throws Exception {\n    MySolrReducer myReducer = new MySolrReducer();\n    ReduceDriver<Text, SolrInputDocumentWritable, Text, SolrInputDocumentWritable> reduceDriver = ReduceDriver.newReduceDriver(myReducer);\n\n    Configuration config = reduceDriver.getConfiguration();\n    setupHadoopConfig(config);\n\n    List<SolrInputDocumentWritable> values = new ArrayList<SolrInputDocumentWritable>();\n    SolrInputDocument sid = new SolrInputDocument();\n    String id = \"myid1\";\n    sid.addField(\"id\", id);\n    sid.addField(\"text\", \"some unique text\");\n    SolrInputDocumentWritable sidw = new SolrInputDocumentWritable(sid);\n    values.add(sidw);\n    reduceDriver.withInput(new Text(id), values);\n\n    reduceDriver.withCacheArchive(solrHomeZip.getAbsolutePath());\n    \n    reduceDriver.withOutputFormat(SolrOutputFormat.class, NullInputFormat.class);\n\n    reduceDriver.run();\n\n    assertEquals(\"Expected 1 counter increment\", 1, reduceDriver.getCounters()\n        .findCounter(SolrCounters.class.getName(), SolrCounters.DOCUMENTS_WRITTEN.toString()).getValue());\n  }\n\n","sourceOld":"  @Test\n  public void testReducer() throws Exception {\n    MySolrReducer myReducer = new MySolrReducer();\n    ReduceDriver<Text, SolrInputDocumentWritable, Text, SolrInputDocumentWritable> reduceDriver = ReduceDriver.newReduceDriver(myReducer);\n\n    Configuration config = reduceDriver.getConfiguration();\n    setupHadoopConfig(config);\n\n    List<SolrInputDocumentWritable> values = new ArrayList<SolrInputDocumentWritable>();\n    SolrInputDocument sid = new SolrInputDocument();\n    String id = \"myid1\";\n    sid.addField(\"id\", id);\n    sid.addField(\"text\", \"some unique text\");\n    SolrInputDocumentWritable sidw = new SolrInputDocumentWritable(sid);\n    values.add(sidw);\n    reduceDriver.withInput(new Text(id), values);\n\n    reduceDriver.withCacheArchive(solrHomeZip.getAbsolutePath());\n    \n    reduceDriver.withOutputFormat(SolrOutputFormat.class, NullInputFormat.class);\n\n    reduceDriver.run();\n\n    assertEquals(\"Expected 1 counter increment\", 1, reduceDriver.getCounters()\n        .findCounter(SolrCounters.class.getName(), SolrCounters.DOCUMENTS_WRITTEN.toString()).getValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}