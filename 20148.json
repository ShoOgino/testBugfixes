{"path":"modules/queries/src/java/org/apache/lucene/queries/ChainedFilter#doChain(OpenBitSetDISI,int,DocIdSet).mjava","commits":[{"id":"1f9f2355d68aab1348539f7a1603279405e566a4","date":1313634992,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/ChainedFilter#doChain(OpenBitSetDISI,int,DocIdSet).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/ChainedFilter#doChain(OpenBitSetDISI,int,DocIdSet).mjava","sourceNew":"  private void doChain(OpenBitSetDISI result, int logic, DocIdSet dis)\n      throws IOException {\n\n    if (dis instanceof OpenBitSet) {\n      // optimized case for OpenBitSets\n      switch (logic) {\n        case OR:\n          result.or((OpenBitSet) dis);\n          break;\n        case AND:\n          result.and((OpenBitSet) dis);\n          break;\n        case ANDNOT:\n          result.andNot((OpenBitSet) dis);\n          break;\n        case XOR:\n          result.xor((OpenBitSet) dis);\n          break;\n        default:\n          doChain(result, DEFAULT, dis);\n          break;\n      }\n    } else {\n      DocIdSetIterator disi;\n      if (dis == null) {\n        disi = DocIdSet.EMPTY_DOCIDSET.iterator();\n      } else {\n        disi = dis.iterator();\n        if (disi == null) {\n          disi = DocIdSet.EMPTY_DOCIDSET.iterator();\n        }\n      }\n\n      switch (logic) {\n        case OR:\n          result.inPlaceOr(disi);\n          break;\n        case AND:\n          result.inPlaceAnd(disi);\n          break;\n        case ANDNOT:\n          result.inPlaceNot(disi);\n          break;\n        case XOR:\n          result.inPlaceXor(disi);\n          break;\n        default:\n          doChain(result, DEFAULT, dis);\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  private void doChain(OpenBitSetDISI result, int logic, DocIdSet dis)\n      throws IOException {\n\n    if (dis instanceof OpenBitSet) {\n      // optimized case for OpenBitSets\n      switch (logic) {\n        case OR:\n          result.or((OpenBitSet) dis);\n          break;\n        case AND:\n          result.and((OpenBitSet) dis);\n          break;\n        case ANDNOT:\n          result.andNot((OpenBitSet) dis);\n          break;\n        case XOR:\n          result.xor((OpenBitSet) dis);\n          break;\n        default:\n          doChain(result, DEFAULT, dis);\n          break;\n      }\n    } else {\n      DocIdSetIterator disi;\n      if (dis == null) {\n        disi = DocIdSet.EMPTY_DOCIDSET.iterator();\n      } else {\n        disi = dis.iterator();\n        if (disi == null) {\n          disi = DocIdSet.EMPTY_DOCIDSET.iterator();\n        }\n      }\n\n      switch (logic) {\n        case OR:\n          result.inPlaceOr(disi);\n          break;\n        case AND:\n          result.inPlaceAnd(disi);\n          break;\n        case ANDNOT:\n          result.inPlaceNot(disi);\n          break;\n        case XOR:\n          result.inPlaceXor(disi);\n          break;\n        default:\n          doChain(result, DEFAULT, dis);\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/ChainedFilter#doChain(OpenBitSetDISI,int,DocIdSet).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/ChainedFilter#doChain(OpenBitSetDISI,int,DocIdSet).mjava","sourceNew":"  private void doChain(OpenBitSetDISI result, int logic, DocIdSet dis)\n      throws IOException {\n\n    if (dis instanceof OpenBitSet) {\n      // optimized case for OpenBitSets\n      switch (logic) {\n        case OR:\n          result.or((OpenBitSet) dis);\n          break;\n        case AND:\n          result.and((OpenBitSet) dis);\n          break;\n        case ANDNOT:\n          result.andNot((OpenBitSet) dis);\n          break;\n        case XOR:\n          result.xor((OpenBitSet) dis);\n          break;\n        default:\n          doChain(result, DEFAULT, dis);\n          break;\n      }\n    } else {\n      DocIdSetIterator disi;\n      if (dis == null) {\n        disi = DocIdSet.EMPTY_DOCIDSET.iterator();\n      } else {\n        disi = dis.iterator();\n        if (disi == null) {\n          disi = DocIdSet.EMPTY_DOCIDSET.iterator();\n        }\n      }\n\n      switch (logic) {\n        case OR:\n          result.inPlaceOr(disi);\n          break;\n        case AND:\n          result.inPlaceAnd(disi);\n          break;\n        case ANDNOT:\n          result.inPlaceNot(disi);\n          break;\n        case XOR:\n          result.inPlaceXor(disi);\n          break;\n        default:\n          doChain(result, DEFAULT, dis);\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  private void doChain(OpenBitSetDISI result, int logic, DocIdSet dis)\n      throws IOException {\n\n    if (dis instanceof OpenBitSet) {\n      // optimized case for OpenBitSets\n      switch (logic) {\n        case OR:\n          result.or((OpenBitSet) dis);\n          break;\n        case AND:\n          result.and((OpenBitSet) dis);\n          break;\n        case ANDNOT:\n          result.andNot((OpenBitSet) dis);\n          break;\n        case XOR:\n          result.xor((OpenBitSet) dis);\n          break;\n        default:\n          doChain(result, DEFAULT, dis);\n          break;\n      }\n    } else {\n      DocIdSetIterator disi;\n      if (dis == null) {\n        disi = DocIdSet.EMPTY_DOCIDSET.iterator();\n      } else {\n        disi = dis.iterator();\n        if (disi == null) {\n          disi = DocIdSet.EMPTY_DOCIDSET.iterator();\n        }\n      }\n\n      switch (logic) {\n        case OR:\n          result.inPlaceOr(disi);\n          break;\n        case AND:\n          result.inPlaceAnd(disi);\n          break;\n        case ANDNOT:\n          result.inPlaceNot(disi);\n          break;\n        case XOR:\n          result.inPlaceXor(disi);\n          break;\n        default:\n          doChain(result, DEFAULT, dis);\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1f9f2355d68aab1348539f7a1603279405e566a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1f9f2355d68aab1348539f7a1603279405e566a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f9f2355d68aab1348539f7a1603279405e566a4"],"1f9f2355d68aab1348539f7a1603279405e566a4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}