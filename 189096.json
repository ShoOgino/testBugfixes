{"path":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#beforeClass().mjava","commits":[{"id":"8c12c43c449a172df0f2b122918f0f5fc0e9a470","date":1438415333,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() {\n    if (random().nextBoolean()) {\n      valueMid = random().nextLong();\n      if (random().nextBoolean()) {\n        // Wide range\n        valueRange = TestUtil.nextInt(random(), 1, Integer.MAX_VALUE);\n      } else {\n        // Narrow range\n        valueRange = TestUtil.nextInt(random(), 1, 100000);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: will generate long values \" + valueMid + \" +/- \" + valueRange);\n      }\n    } else {\n      // All longs\n      valueRange = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: will generate all long values\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#beforeClass().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() {\n    if (random().nextBoolean()) {\n      valueMid = random().nextLong();\n      if (random().nextBoolean()) {\n        // Wide range\n        valueRange = TestUtil.nextInt(random(), 1, Integer.MAX_VALUE);\n      } else {\n        // Narrow range\n        valueRange = TestUtil.nextInt(random(), 1, 100000);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: will generate long values \" + valueMid + \" +/- \" + valueRange);\n      }\n    } else {\n      // All longs\n      valueRange = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: will generate all long values\");\n      }\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() {\n    if (random().nextBoolean()) {\n      valueMid = random().nextLong();\n      if (random().nextBoolean()) {\n        // Wide range\n        valueRange = TestUtil.nextInt(random(), 1, Integer.MAX_VALUE);\n      } else {\n        // Narrow range\n        valueRange = TestUtil.nextInt(random(), 1, 100000);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: will generate long values \" + valueMid + \" +/- \" + valueRange);\n      }\n    } else {\n      // All longs\n      valueRange = 0;\n      if (VERBOSE) {\n        System.out.println(\"TEST: will generate all long values\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"]},"commit2Childs":{"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}