{"path":"lucene/facet/src/test/org/apache/lucene/facet/TestSameRequestAccumulation#testTwoSameRequests().mjava","commits":[{"id":"487b6150786f5145006f5d0d38a5f514b4472319","date":1355684762,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestSameRequestAccumulation#testTwoSameRequests().mjava","pathOld":"/dev/null","sourceNew":"  // Following LUCENE-4461 - ensure requesting the (exact) same request more\n  // than once does not alter the results\n  public void testTwoSameRequests() throws Exception {\n    final CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    final String expected = fc.getFacetResults().get(0).toString();\n\n    // now add the same facet request with duplicates (same instance and same one)\n    fsp = new FacetSearchParams(facetRequest, facetRequest, new CountFacetRequest(new CategoryPath(\"root\"), 10));\n\n    // make sure the search params holds 3 requests now\n    assertEquals(3, fsp.getFacetRequests().size());\n    \n    fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> actual = fc.getFacetResults();\n\n    // all 3 results should have the same toString()\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(0).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(1).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(2).toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestSameRequestAccumulation#testTwoSameRequests().mjava","pathOld":"/dev/null","sourceNew":"  // Following LUCENE-4461 - ensure requesting the (exact) same request more\n  // than once does not alter the results\n  public void testTwoSameRequests() throws Exception {\n    final CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    final String expected = fc.getFacetResults().get(0).toString();\n\n    // now add the same facet request with duplicates (same instance and same one)\n    fsp = new FacetSearchParams(facetRequest, facetRequest, new CountFacetRequest(new CategoryPath(\"root\"), 10));\n\n    // make sure the search params holds 3 requests now\n    assertEquals(3, fsp.getFacetRequests().size());\n    \n    fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> actual = fc.getFacetResults();\n\n    // all 3 results should have the same toString()\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(0).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(1).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(2).toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519c3af92c13c12d3423d514eddc7688469bb70f","date":1358345593,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSameRequestAccumulation#testTwoSameRequests().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestSameRequestAccumulation#testTwoSameRequests().mjava","sourceNew":"  // Following LUCENE-4461 - ensure requesting the (exact) same request more\n  // than once does not alter the results\n  public void testTwoSameRequests() throws Exception {\n    final CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    final String expected = fc.getFacetResults().get(0).toString();\n\n    // now add the same facet request with duplicates (same instance and same one)\n    fsp = new FacetSearchParams(facetRequest, facetRequest, new CountFacetRequest(new CategoryPath(\"root\"), 10));\n\n    // make sure the search params holds 3 requests now\n    assertEquals(3, fsp.getFacetRequests().size());\n    \n    fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> actual = fc.getFacetResults();\n\n    // all 3 results should have the same toString()\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(0).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(1).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(2).toString());\n  }\n\n","sourceOld":"  // Following LUCENE-4461 - ensure requesting the (exact) same request more\n  // than once does not alter the results\n  public void testTwoSameRequests() throws Exception {\n    final CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    final String expected = fc.getFacetResults().get(0).toString();\n\n    // now add the same facet request with duplicates (same instance and same one)\n    fsp = new FacetSearchParams(facetRequest, facetRequest, new CountFacetRequest(new CategoryPath(\"root\"), 10));\n\n    // make sure the search params holds 3 requests now\n    assertEquals(3, fsp.getFacetRequests().size());\n    \n    fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> actual = fc.getFacetResults();\n\n    // all 3 results should have the same toString()\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(0).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(1).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(2).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSameRequestAccumulation#testTwoSameRequests().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestSameRequestAccumulation#testTwoSameRequests().mjava","sourceNew":"  // Following LUCENE-4461 - ensure requesting the (exact) same request more\n  // than once does not alter the results\n  public void testTwoSameRequests() throws Exception {\n    final CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    final String expected = fc.getFacetResults().get(0).toString();\n\n    // now add the same facet request with duplicates (same instance and same one)\n    fsp = new FacetSearchParams(facetRequest, facetRequest, new CountFacetRequest(new CategoryPath(\"root\"), 10));\n\n    // make sure the search params holds 3 requests now\n    assertEquals(3, fsp.getFacetRequests().size());\n    \n    fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> actual = fc.getFacetResults();\n\n    // all 3 results should have the same toString()\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(0).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(1).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(2).toString());\n  }\n\n","sourceOld":"  // Following LUCENE-4461 - ensure requesting the (exact) same request more\n  // than once does not alter the results\n  public void testTwoSameRequests() throws Exception {\n    final CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    FacetSearchParams fsp = new FacetSearchParams(facetRequest);\n    \n    FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    final String expected = fc.getFacetResults().get(0).toString();\n\n    // now add the same facet request with duplicates (same instance and same one)\n    fsp = new FacetSearchParams(facetRequest, facetRequest, new CountFacetRequest(new CategoryPath(\"root\"), 10));\n\n    // make sure the search params holds 3 requests now\n    assertEquals(3, fsp.getFacetRequests().size());\n    \n    fc = new FacetsCollector(fsp, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> actual = fc.getFacetResults();\n\n    // all 3 results should have the same toString()\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(0).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(1).toString());\n    assertEquals(\"same FacetRequest but different result?\", expected, actual.get(2).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","487b6150786f5145006f5d0d38a5f514b4472319"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","519c3af92c13c12d3423d514eddc7688469bb70f"],"519c3af92c13c12d3423d514eddc7688469bb70f":["487b6150786f5145006f5d0d38a5f514b4472319"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["519c3af92c13c12d3423d514eddc7688469bb70f"],"487b6150786f5145006f5d0d38a5f514b4472319":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"519c3af92c13c12d3423d514eddc7688469bb70f":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","487b6150786f5145006f5d0d38a5f514b4472319"],"487b6150786f5145006f5d0d38a5f514b4472319":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","519c3af92c13c12d3423d514eddc7688469bb70f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}