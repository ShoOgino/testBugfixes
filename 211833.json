{"path":"solr/core/src/java/org/apache/solr/search/DocSetBuilder#build(FixedBitSet).mjava","commits":[{"id":"16b25963ad38ed289ebf0f7af31269fa1ce80a11","date":1442083896,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBuilder#build(FixedBitSet).mjava","pathOld":"/dev/null","sourceNew":"  public DocSet build(FixedBitSet filter) {\n    if (bitSet != null) {\n      if (filter != null) {\n        bitSet.and(filter);\n      }\n      return new BitDocSet(bitSet);\n      // TODO - if this set will be cached, should we make it smaller if it's below DocSetUtil.smallSetSize?\n    } else {\n      LSBRadixSorter sorter = new LSBRadixSorter();\n      sorter.sort(buffer, 0, pos);\n      final int l = dedup(buffer, pos, filter);\n      assert l <= pos;\n      return new SortedIntDocSet(buffer, l);  // TODO: have option to not shrink in the future if it will be a temporary set\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f8ac9e4a1f2a93ec9acbeb9da9bae9bc5d582c6","date":1461860441,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBuilder#build(FixedBitSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBuilder#build(FixedBitSet).mjava","sourceNew":"  public DocSet build(FixedBitSet filter) {\n    if (bitSet != null) {\n      if (filter != null) {\n        bitSet.and(filter);\n      }\n      return new BitDocSet(bitSet);\n      // TODO - if this set will be cached, should we make it smaller if it's below DocSetUtil.smallSetSize?\n    } else {\n      LSBRadixSorter sorter = new LSBRadixSorter();\n      sorter.sort(PackedInts.bitsRequired(maxDoc - 1), buffer, pos);\n      final int l = dedup(buffer, pos, filter);\n      assert l <= pos;\n      return new SortedIntDocSet(buffer, l);  // TODO: have option to not shrink in the future if it will be a temporary set\n    }\n  }\n\n","sourceOld":"  public DocSet build(FixedBitSet filter) {\n    if (bitSet != null) {\n      if (filter != null) {\n        bitSet.and(filter);\n      }\n      return new BitDocSet(bitSet);\n      // TODO - if this set will be cached, should we make it smaller if it's below DocSetUtil.smallSetSize?\n    } else {\n      LSBRadixSorter sorter = new LSBRadixSorter();\n      sorter.sort(buffer, 0, pos);\n      final int l = dedup(buffer, pos, filter);\n      assert l <= pos;\n      return new SortedIntDocSet(buffer, l);  // TODO: have option to not shrink in the future if it will be a temporary set\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBuilder#build(FixedBitSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBuilder#build(FixedBitSet).mjava","sourceNew":"  public DocSet build(FixedBitSet filter) {\n    if (bitSet != null) {\n      if (filter != null) {\n        bitSet.and(filter);\n      }\n      return new BitDocSet(bitSet);\n      // TODO - if this set will be cached, should we make it smaller if it's below DocSetUtil.smallSetSize?\n    } else {\n      LSBRadixSorter sorter = new LSBRadixSorter();\n      sorter.sort(PackedInts.bitsRequired(maxDoc - 1), buffer, pos);\n      final int l = dedup(buffer, pos, filter);\n      assert l <= pos;\n      return new SortedIntDocSet(buffer, l);  // TODO: have option to not shrink in the future if it will be a temporary set\n    }\n  }\n\n","sourceOld":"  public DocSet build(FixedBitSet filter) {\n    if (bitSet != null) {\n      if (filter != null) {\n        bitSet.and(filter);\n      }\n      return new BitDocSet(bitSet);\n      // TODO - if this set will be cached, should we make it smaller if it's below DocSetUtil.smallSetSize?\n    } else {\n      LSBRadixSorter sorter = new LSBRadixSorter();\n      sorter.sort(buffer, 0, pos);\n      final int l = dedup(buffer, pos, filter);\n      assert l <= pos;\n      return new SortedIntDocSet(buffer, l);  // TODO: have option to not shrink in the future if it will be a temporary set\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"16b25963ad38ed289ebf0f7af31269fa1ce80a11":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f8ac9e4a1f2a93ec9acbeb9da9bae9bc5d582c6":["16b25963ad38ed289ebf0f7af31269fa1ce80a11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f8ac9e4a1f2a93ec9acbeb9da9bae9bc5d582c6"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["16b25963ad38ed289ebf0f7af31269fa1ce80a11","5f8ac9e4a1f2a93ec9acbeb9da9bae9bc5d582c6"]},"commit2Childs":{"16b25963ad38ed289ebf0f7af31269fa1ce80a11":["5f8ac9e4a1f2a93ec9acbeb9da9bae9bc5d582c6","55b50463286869f584cf849d1587a0fcd54d1dfa"],"5f8ac9e4a1f2a93ec9acbeb9da9bae9bc5d582c6":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16b25963ad38ed289ebf0f7af31269fa1ce80a11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}