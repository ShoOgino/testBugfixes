{"path":"lucene/join/src/java/org/apache/lucene/search/join/FixedBitSetCachingWrapperFilter#docIdSetToCache(DocIdSet,LeafReader).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/FixedBitSetCachingWrapperFilter#docIdSetToCache(DocIdSet,LeafReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, LeafReader reader)\n      throws IOException {\n    if (docIdSet == null) {\n      return EMPTY;\n    } else if (docIdSet instanceof FixedBitSet) {\n      // this is different from CachingWrapperFilter: even when the DocIdSet is\n      // cacheable, we convert it to a FixedBitSet since we require all the\n      // cached filters to be FixedBitSets\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      if (it == null) {\n        return EMPTY;\n      } else {\n        final FixedBitSet copy = new FixedBitSet(reader.maxDoc());\n        copy.or(it);\n        return copy;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/FixedBitSetCachingWrapperFilter#docIdSetToCache(DocIdSet,LeafReader).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/FixedBitSetCachingWrapperFilter#docIdSetToCache(DocIdSet,LeafReader).mjava","sourceNew":"  @Override\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, LeafReader reader)\n      throws IOException {\n    if (docIdSet == null) {\n      return EMPTY;\n    } else if (docIdSet instanceof FixedBitDocIdSet) {\n      // this is different from CachingWrapperFilter: even when the DocIdSet is\n      // cacheable, we convert it to a FixedBitSet since we require all the\n      // cached filters to be FixedBitSets\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      if (it == null) {\n        return EMPTY;\n      } else {\n        final FixedBitSet copy = new FixedBitSet(reader.maxDoc());\n        copy.or(it);\n        return new FixedBitDocIdSet(copy);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, LeafReader reader)\n      throws IOException {\n    if (docIdSet == null) {\n      return EMPTY;\n    } else if (docIdSet instanceof FixedBitSet) {\n      // this is different from CachingWrapperFilter: even when the DocIdSet is\n      // cacheable, we convert it to a FixedBitSet since we require all the\n      // cached filters to be FixedBitSets\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      if (it == null) {\n        return EMPTY;\n      } else {\n        final FixedBitSet copy = new FixedBitSet(reader.maxDoc());\n        copy.or(it);\n        return copy;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/FixedBitSetCachingWrapperFilter#docIdSetToCache(DocIdSet,LeafReader).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/FixedBitSetCachingWrapperFilter#docIdSetToCache(DocIdSet,LeafReader).mjava","sourceNew":"  @Override\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, LeafReader reader)\n      throws IOException {\n    if (docIdSet == null) {\n      return EMPTY;\n    } else if (docIdSet instanceof BitDocIdSet) {\n      // this is different from CachingWrapperFilter: even when the DocIdSet is\n      // cacheable, we convert it to a FixedBitSet since we require all the\n      // cached filters to be FixedBitSets\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      if (it == null) {\n        return EMPTY;\n      } else {\n        final FixedBitSet copy = new FixedBitSet(reader.maxDoc());\n        copy.or(it);\n        return new BitDocIdSet(copy);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, LeafReader reader)\n      throws IOException {\n    if (docIdSet == null) {\n      return EMPTY;\n    } else if (docIdSet instanceof FixedBitDocIdSet) {\n      // this is different from CachingWrapperFilter: even when the DocIdSet is\n      // cacheable, we convert it to a FixedBitSet since we require all the\n      // cached filters to be FixedBitSets\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      if (it == null) {\n        return EMPTY;\n      } else {\n        final FixedBitSet copy = new FixedBitSet(reader.maxDoc());\n        copy.or(it);\n        return new FixedBitDocIdSet(copy);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b012914a8110b2ff1d075ed1ef72aa57084d4897","date":1414685177,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/FixedBitSetCachingWrapperFilter#docIdSetToCache(DocIdSet,LeafReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected DocIdSet docIdSetToCache(DocIdSet docIdSet, LeafReader reader)\n      throws IOException {\n    if (docIdSet == null) {\n      return EMPTY;\n    } else if (docIdSet instanceof BitDocIdSet) {\n      // this is different from CachingWrapperFilter: even when the DocIdSet is\n      // cacheable, we convert it to a FixedBitSet since we require all the\n      // cached filters to be FixedBitSets\n      return docIdSet;\n    } else {\n      final DocIdSetIterator it = docIdSet.iterator();\n      if (it == null) {\n        return EMPTY;\n      } else {\n        final FixedBitSet copy = new FixedBitSet(reader.maxDoc());\n        copy.or(it);\n        return new BitDocIdSet(copy);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b012914a8110b2ff1d075ed1ef72aa57084d4897":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80c55596a764e2d397e982828e75fcac5ce430a0":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b012914a8110b2ff1d075ed1ef72aa57084d4897"]},"commit2Childs":{"b012914a8110b2ff1d075ed1ef72aa57084d4897":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"80c55596a764e2d397e982828e75fcac5ce430a0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["80c55596a764e2d397e982828e75fcac5ce430a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}