{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest#getNumRequests(String,String).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    HttpSolrClient client = new HttpSolrClient(baseUrl + \"/\"+ collectionName);\n    client.setConnectionTimeout(15000);\n    client.setSoTimeout(60000);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/admin/mbeans\");\n    params.set(\"stats\", \"true\");\n    params.set(\"key\", \"standard\");\n    params.set(\"cat\", \"QUERYHANDLER\");\n    // use generic request to avoid extra processing of queries\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = client.request(req);\n    return (Long) resp.findRecursive(\"solr-mbeans\", \"QUERYHANDLER\",\n        \"standard\", \"stats\", \"requests\");\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    HttpSolrServer server = new HttpSolrServer(baseUrl + \"/\"+ collectionName);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/admin/mbeans\");\n    params.set(\"stats\", \"true\");\n    params.set(\"key\", \"standard\");\n    params.set(\"cat\", \"QUERYHANDLER\");\n    // use generic request to avoid extra processing of queries\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = server.request(req);\n    return (Long) resp.findRecursive(\"solr-mbeans\", \"QUERYHANDLER\",\n        \"standard\", \"stats\", \"requests\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    HttpSolrClient client = new HttpSolrClient(baseUrl + \"/\"+ collectionName);\n    NamedList<Object> resp;\n    try {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", \"standard\");\n      params.set(\"cat\", \"QUERYHANDLER\");\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    } finally {\n      client.shutdown();\n    }\n    return (Long) resp.findRecursive(\"solr-mbeans\", \"QUERYHANDLER\",\n        \"standard\", \"stats\", \"requests\");\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    HttpSolrClient client = new HttpSolrClient(baseUrl + \"/\"+ collectionName);\n    client.setConnectionTimeout(15000);\n    client.setSoTimeout(60000);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/admin/mbeans\");\n    params.set(\"stats\", \"true\");\n    params.set(\"key\", \"standard\");\n    params.set(\"cat\", \"QUERYHANDLER\");\n    // use generic request to avoid extra processing of queries\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = client.request(req);\n    return (Long) resp.findRecursive(\"solr-mbeans\", \"QUERYHANDLER\",\n        \"standard\", \"stats\", \"requests\");\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = new HttpSolrClient(baseUrl + \"/\"+ collectionName)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", \"standard\");\n      params.set(\"cat\", \"QUERYHANDLER\");\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    return (Long) resp.findRecursive(\"solr-mbeans\", \"QUERYHANDLER\",\n        \"standard\", \"stats\", \"requests\");\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    HttpSolrClient client = new HttpSolrClient(baseUrl + \"/\"+ collectionName);\n    NamedList<Object> resp;\n    try {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", \"standard\");\n      params.set(\"cat\", \"QUERYHANDLER\");\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    } finally {\n      client.shutdown();\n    }\n    return (Long) resp.findRecursive(\"solr-mbeans\", \"QUERYHANDLER\",\n        \"standard\", \"stats\", \"requests\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", \"standard\");\n      params.set(\"cat\", \"QUERYHANDLER\");\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    return (Long) resp.findRecursive(\"solr-mbeans\", \"QUERYHANDLER\",\n        \"standard\", \"stats\", \"requests\");\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = new HttpSolrClient(baseUrl + \"/\"+ collectionName)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", \"standard\");\n      params.set(\"cat\", \"QUERYHANDLER\");\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    return (Long) resp.findRecursive(\"solr-mbeans\", \"QUERYHANDLER\",\n        \"standard\", \"stats\", \"requests\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", \"standard\");\n      params.set(\"cat\", \"QUERYHANDLER\");\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    return (Long) resp.findRecursive(\"solr-mbeans\", \"QUERYHANDLER\",\n        \"standard\", \"stats\", \"requests\");\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = new HttpSolrClient(baseUrl + \"/\"+ collectionName)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", \"standard\");\n      params.set(\"cat\", \"QUERYHANDLER\");\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    return (Long) resp.findRecursive(\"solr-mbeans\", \"QUERYHANDLER\",\n        \"standard\", \"stats\", \"requests\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5687aaac49dac0091f9d42a734eb5ec955377aad","date":1472269082,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    return getNumRequests(baseUrl, collectionName, \"QUERYHANDLER\", \"standard\", false);\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", \"standard\");\n      params.set(\"cat\", \"QUERYHANDLER\");\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    return (Long) resp.findRecursive(\"solr-mbeans\", \"QUERYHANDLER\",\n        \"standard\", \"stats\", \"requests\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    return getNumRequests(baseUrl, collectionName, \"QUERYHANDLER\", \"standard\", false);\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", \"standard\");\n      params.set(\"cat\", \"QUERYHANDLER\");\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    return (Long) resp.findRecursive(\"solr-mbeans\", \"QUERYHANDLER\",\n        \"standard\", \"stats\", \"requests\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    return getNumRequests(baseUrl, collectionName, \"QUERYHANDLER\", \"standard\", false);\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", \"standard\");\n      params.set(\"cat\", \"QUERYHANDLER\");\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    return (Long) resp.findRecursive(\"solr-mbeans\", \"QUERYHANDLER\",\n        \"standard\", \"stats\", \"requests\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b10b88c8af8835e23b0d566418ef8397a7bb8ed","date":1484223252,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    return getNumRequests(baseUrl, collectionName, \"QUERY\", \"standard\", false);\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    return getNumRequests(baseUrl, collectionName, \"QUERYHANDLER\", \"standard\", false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    return getNumRequests(baseUrl, collectionName, \"QUERY\", \"standard\", false);\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    return getNumRequests(baseUrl, collectionName, \"QUERYHANDLER\", \"standard\", false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    return getNumRequests(baseUrl, collectionName, \"QUERY\", \"standard\", null, false);\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    return getNumRequests(baseUrl, collectionName, \"QUERY\", \"standard\", false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    return getNumRequests(baseUrl, collectionName, \"QUERY\", \"standard\", null, false);\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    return getNumRequests(baseUrl, collectionName, \"QUERY\", \"standard\", false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    return getNumRequests(baseUrl, collectionName, \"QUERY\", \"/select\", null, false);\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    return getNumRequests(baseUrl, collectionName, \"QUERY\", \"standard\", null, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    return getNumRequests(baseUrl, collectionName, \"QUERY\", \"/select\", null, false);\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    return getNumRequests(baseUrl, collectionName, \"QUERY\", \"standard\", null, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    return getNumRequests(baseUrl, collectionName, \"QUERY\", \"/select\", null, false);\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    return getNumRequests(baseUrl, collectionName, \"QUERY\", \"standard\", null, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"30c8e5574b55d57947e989443dfde611646530ee":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","28288370235ed02234a64753cdbf0c6ec096304a"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"816521ebaad5add9cb96bb88c577394e2938c40b":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"28288370235ed02234a64753cdbf0c6ec096304a":["816521ebaad5add9cb96bb88c577394e2938c40b","5ff704ef91e9ae30ca59babb23ece85720701b60"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","5687aaac49dac0091f9d42a734eb5ec955377aad"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cc3b13b430571c2e169f98fe38e1e7666f88522d","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"5687aaac49dac0091f9d42a734eb5ec955377aad":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["30c8e5574b55d57947e989443dfde611646530ee"],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","816521ebaad5add9cb96bb88c577394e2938c40b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"30c8e5574b55d57947e989443dfde611646530ee":[],"bafca15d8e408346a67f4282ad1143b88023893b":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"816521ebaad5add9cb96bb88c577394e2938c40b":["28288370235ed02234a64753cdbf0c6ec096304a","5ff704ef91e9ae30ca59babb23ece85720701b60"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","5687aaac49dac0091f9d42a734eb5ec955377aad"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"5687aaac49dac0091f9d42a734eb5ec955377aad":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}