{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesProducer#loadBinary(FieldInfo).mjava","commits":[{"id":"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f","date":1358522034,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#loadBinary(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    assert entry.numBytes < Integer.MAX_VALUE; // nocommit\n    final byte[] bytes = new byte[(int)entry.numBytes];\n    data.readBytes(bytes, 0, bytes.length);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          result.bytes = bytes;\n          result.offset = docID * fixedLength;\n          result.length = fixedLength;\n        }\n      };\n    } else {\n      final NumericDocValues addresses = getNumeric(field);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          int startAddress = docID == 0 ? 0 : (int) addresses.get(docID-1);\n          int endAddress = (int)addresses.get(docID); \n          result.bytes = bytes;\n          result.offset = startAddress;\n          result.length = endAddress - startAddress;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    assert entry.numBytes < Integer.MAX_VALUE; // nocommit\n    final byte[] bytes = new byte[(int)entry.numBytes];\n    data.readBytes(bytes, 0, bytes.length);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          result.bytes = bytes;\n          result.offset = docID * fixedLength;\n          result.length = fixedLength;\n        }\n      };\n    } else {\n      final NumericDocValues addresses = getNumeric(field);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          int startAddress = docID == 0 ? 0 : (int) addresses.get(docID-1);\n          int endAddress = (int)addresses.get(docID); \n          result.bytes = bytes;\n          result.offset = startAddress;\n          result.length = endAddress - startAddress;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","date":1358793943,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesProducer#loadBinary(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    assert entry.numBytes < Integer.MAX_VALUE; // nocommit\n    final byte[] bytes = new byte[(int)entry.numBytes];\n    data.readBytes(bytes, 0, bytes.length);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          result.bytes = bytes;\n          result.offset = docID * fixedLength;\n          result.length = fixedLength;\n        }\n      };\n    } else {\n      final NumericDocValues addresses = getNumeric(field);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          int startAddress = docID == 0 ? 0 : (int) addresses.get(docID-1);\n          int endAddress = (int)addresses.get(docID); \n          result.bytes = bytes;\n          result.offset = startAddress;\n          result.length = endAddress - startAddress;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    assert entry.numBytes < Integer.MAX_VALUE; // nocommit\n    final byte[] bytes = new byte[(int)entry.numBytes];\n    data.readBytes(bytes, 0, bytes.length);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          result.bytes = bytes;\n          result.offset = docID * fixedLength;\n          result.length = fixedLength;\n        }\n      };\n    } else {\n      final NumericDocValues addresses = getNumeric(field);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          int startAddress = docID == 0 ? 0 : (int) addresses.get(docID-1);\n          int endAddress = (int)addresses.get(docID); \n          result.bytes = bytes;\n          result.offset = startAddress;\n          result.length = endAddress - startAddress;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["d7bf953a8ab9ae7d92835bdf9cbe5a268448868f"],"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":[],"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f":["3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d7bf953a8ab9ae7d92835bdf9cbe5a268448868f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}