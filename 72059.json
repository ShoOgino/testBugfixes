{"path":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#setRequireContiguousMerge(boolean).mjava","commits":[{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#setRequireContiguousMerge(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** If true, merges must be in-order slice of the\n   *  segments.  If false, then the merge policy is free to\n   *  pick any segments.  The default is false, which is\n   *  in general more efficient than true since it gives the\n   *  merge policy more freedom to pick closely sized\n   *  segments. */\n  public void setRequireContiguousMerge(boolean v) {\n    requireContiguousMerge = v;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#setRequireContiguousMerge(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** If true, merges must be in-order slice of the\n   *  segments.  If false, then the merge policy is free to\n   *  pick any segments.  The default is false, which is\n   *  in general more efficient than true since it gives the\n   *  merge policy more freedom to pick closely sized\n   *  segments. */\n  public void setRequireContiguousMerge(boolean v) {\n    requireContiguousMerge = v;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#setRequireContiguousMerge(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** If true, merges must be in-order slice of the\n   *  segments.  If false, then the merge policy is free to\n   *  pick any segments.  The default is false, which is\n   *  in general more efficient than true since it gives the\n   *  merge policy more freedom to pick closely sized\n   *  segments. */\n  public void setRequireContiguousMerge(boolean v) {\n    requireContiguousMerge = v;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#setRequireContiguousMerge(boolean).mjava","sourceNew":null,"sourceOld":"  /** If true, merges must be in-order slice of the\n   *  segments.  If false, then the merge policy is free to\n   *  pick any segments.  The default is false, which is\n   *  in general more efficient than true since it gives the\n   *  merge policy more freedom to pick closely sized\n   *  segments. */\n  public void setRequireContiguousMerge(boolean v) {\n    requireContiguousMerge = v;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#setRequireContiguousMerge(boolean).mjava","sourceNew":null,"sourceOld":"  /** If true, merges must be in-order slice of the\n   *  segments.  If false, then the merge policy is free to\n   *  pick any segments.  The default is false, which is\n   *  in general more efficient than true since it gives the\n   *  merge policy more freedom to pick closely sized\n   *  segments. */\n  public void setRequireContiguousMerge(boolean v) {\n    requireContiguousMerge = v;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#setRequireContiguousMerge(boolean).mjava","sourceNew":null,"sourceOld":"  /** If true, merges must be in-order slice of the\n   *  segments.  If false, then the merge policy is free to\n   *  pick any segments.  The default is false, which is\n   *  in general more efficient than true since it gives the\n   *  merge policy more freedom to pick closely sized\n   *  segments. */\n  public void setRequireContiguousMerge(boolean v) {\n    requireContiguousMerge = v;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#setRequireContiguousMerge(boolean).mjava","sourceNew":null,"sourceOld":"  /** If true, merges must be in-order slice of the\n   *  segments.  If false, then the merge policy is free to\n   *  pick any segments.  The default is false, which is\n   *  in general more efficient than true since it gives the\n   *  merge policy more freedom to pick closely sized\n   *  segments. */\n  public void setRequireContiguousMerge(boolean v) {\n    requireContiguousMerge = v;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"01e5948db9a07144112d2f08f28ca2e3cd880348":["c19f985e36a65cc969e8e564fe337a0d41512075"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","01e5948db9a07144112d2f08f28ca2e3cd880348"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","01e5948db9a07144112d2f08f28ca2e3cd880348"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"c19f985e36a65cc969e8e564fe337a0d41512075":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c19f985e36a65cc969e8e564fe337a0d41512075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["01e5948db9a07144112d2f08f28ca2e3cd880348"]},"commit2Childs":{"01e5948db9a07144112d2f08f28ca2e3cd880348":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","c19f985e36a65cc969e8e564fe337a0d41512075","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"45669a651c970812a680841b97a77cce06af559f":[],"c19f985e36a65cc969e8e564fe337a0d41512075":["01e5948db9a07144112d2f08f28ca2e3cd880348","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}