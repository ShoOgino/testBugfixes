{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocsCollector#collect(int,CharSequence,long).mjava","commits":[{"id":"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a","date":1427495869,"type":0,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocsCollector#collect(int,CharSequence,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Called for every matched completion,\n   * similar to {@link org.apache.lucene.search.LeafCollector#collect(int)}\n   * but for completions.\n   *\n   * NOTE: collection at the leaf level is guaranteed to be in\n   * descending order of score\n   */\n  public void collect(int docID, CharSequence key, long score) throws IOException {\n    SuggestScoreDoc current = new SuggestScoreDoc(docBase + docID, key, score);\n    if (current == priorityQueue.insertWithOverflow(current)) {\n      // if the current SuggestScoreDoc has overflown from pq,\n      // we can assume all of the successive collections from\n      // this leaf will be overflown as well\n      // TODO: reuse the overflow instance?\n      throw new CollectionTerminatedException();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocsCollector#collect(int,CharSequence,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Called for every matched completion,\n   * similar to {@link org.apache.lucene.search.LeafCollector#collect(int)}\n   * but for completions.\n   *\n   * NOTE: collection at the leaf level is guaranteed to be in\n   * descending order of score\n   */\n  public void collect(int docID, CharSequence key, long score) throws IOException {\n    SuggestScoreDoc current = new SuggestScoreDoc(docBase + docID, key, score);\n    if (current == priorityQueue.insertWithOverflow(current)) {\n      // if the current SuggestScoreDoc has overflown from pq,\n      // we can assume all of the successive collections from\n      // this leaf will be overflown as well\n      // TODO: reuse the overflow instance?\n      throw new CollectionTerminatedException();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c33f6677a2078739058f81eca1df69d12cd62b0","date":1432799589,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocsCollector#collect(int,CharSequence,CharSequence,float).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/TopSuggestDocsCollector#collect(int,CharSequence,long).mjava","sourceNew":"  /**\n   * Called for every matched completion,\n   * similar to {@link org.apache.lucene.search.LeafCollector#collect(int)}\n   * but for completions.\n   *\n   * NOTE: collection at the leaf level is guaranteed to be in\n   * descending order of score\n   */\n  public void collect(int docID, CharSequence key, CharSequence context, float score) throws IOException {\n    SuggestScoreDoc current = new SuggestScoreDoc(docBase + docID, key, context, score);\n    if (current == priorityQueue.insertWithOverflow(current)) {\n      // if the current SuggestScoreDoc has overflown from pq,\n      // we can assume all of the successive collections from\n      // this leaf will be overflown as well\n      // TODO: reuse the overflow instance?\n      throw new CollectionTerminatedException();\n    }\n  }\n\n","sourceOld":"  /**\n   * Called for every matched completion,\n   * similar to {@link org.apache.lucene.search.LeafCollector#collect(int)}\n   * but for completions.\n   *\n   * NOTE: collection at the leaf level is guaranteed to be in\n   * descending order of score\n   */\n  public void collect(int docID, CharSequence key, long score) throws IOException {\n    SuggestScoreDoc current = new SuggestScoreDoc(docBase + docID, key, score);\n    if (current == priorityQueue.insertWithOverflow(current)) {\n      // if the current SuggestScoreDoc has overflown from pq,\n      // we can assume all of the successive collections from\n      // this leaf will be overflown as well\n      // TODO: reuse the overflow instance?\n      throw new CollectionTerminatedException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c33f6677a2078739058f81eca1df69d12cd62b0":["07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c33f6677a2078739058f81eca1df69d12cd62b0"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8c33f6677a2078739058f81eca1df69d12cd62b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}