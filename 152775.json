{"path":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (!timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n\n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      ocmh.addPropertyParams(message, params);\n\n      ocmh.sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n\n    ocmh.processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  private boolean createShard(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n    \n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    List<ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, overseer.getZkController().getCoreContainer());\n        \n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n      \n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n          \n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      addPropertyParams(message, params);\n\n      sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n    \n    processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n    \n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (!timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n\n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      ocmh.addPropertyParams(message, params);\n\n      ocmh.sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n\n    ocmh.processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  private boolean createShard(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n    \n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    List<ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, overseer.getZkController().getCoreContainer());\n        \n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n      \n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n          \n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      addPropertyParams(message, params);\n\n      sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n    \n    processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n    \n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (!timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n\n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      ocmh.addPropertyParams(message, params);\n\n      ocmh.sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n\n    ocmh.processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (!timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n\n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      ocmh.addPropertyParams(message, params);\n\n      ocmh.sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n\n    ocmh.processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (!timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n\n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      ocmh.addPropertyParams(message, params);\n\n      ocmh.sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n\n    ocmh.processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (!timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n\n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      ocmh.addPropertyParams(message, params);\n\n      ocmh.sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n\n    ocmh.processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (!timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n\n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      ocmh.addPropertyParams(message, params);\n\n      ocmh.sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n\n    ocmh.processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n//    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (!timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n\n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(totalReplicas, 1.0f);\n    }\n    \n    int createdNrtReplicas = 0, createdTlogReplicas = 0, createdPullReplicas = 0;\n\n    for (int j = 1; j <= totalReplicas; j++) {\n      int coreNameNumber;\n      Replica.Type typeToCreate;\n      if (createdNrtReplicas < numNrtReplicas) {\n        createdNrtReplicas++;\n        coreNameNumber = createdNrtReplicas;\n        typeToCreate = Replica.Type.NRT;\n      } else if (createdTlogReplicas < numTlogReplicas) {\n        createdTlogReplicas++;\n        coreNameNumber = createdTlogReplicas;\n        typeToCreate = Replica.Type.TLOG;\n      } else {\n        createdPullReplicas++;\n        coreNameNumber = createdPullReplicas;\n        typeToCreate = Replica.Type.PULL;\n      }\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String coreName = Assign.buildCoreName(collectionName, sliceName, typeToCreate, coreNameNumber);\n//      String coreName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, coreName);\n      params.set(CoreAdminParams.REPLICA_TYPE, typeToCreate.name());\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      ocmh.addPropertyParams(message, params);\n\n      ocmh.sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n\n    ocmh.processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (!timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n\n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      ocmh.addPropertyParams(message, params);\n\n      ocmh.sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n\n    ocmh.processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n//    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (!timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n\n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(totalReplicas, 1.0f);\n    }\n    \n    int createdNrtReplicas = 0, createdTlogReplicas = 0, createdPullReplicas = 0;\n\n    for (int j = 1; j <= totalReplicas; j++) {\n      int coreNameNumber;\n      Replica.Type typeToCreate;\n      if (createdNrtReplicas < numNrtReplicas) {\n        createdNrtReplicas++;\n        coreNameNumber = createdNrtReplicas;\n        typeToCreate = Replica.Type.NRT;\n      } else if (createdTlogReplicas < numTlogReplicas) {\n        createdTlogReplicas++;\n        coreNameNumber = createdTlogReplicas;\n        typeToCreate = Replica.Type.TLOG;\n      } else {\n        createdPullReplicas++;\n        coreNameNumber = createdPullReplicas;\n        typeToCreate = Replica.Type.PULL;\n      }\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String coreName = Assign.buildCoreName(collectionName, sliceName, typeToCreate, coreNameNumber);\n//      String coreName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, coreName);\n      params.set(CoreAdminParams.REPLICA_TYPE, typeToCreate.name());\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      ocmh.addPropertyParams(message, params);\n\n      ocmh.sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n\n    ocmh.processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (!timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n\n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      ocmh.addPropertyParams(message, params);\n\n      ocmh.sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n\n    ocmh.processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    \n    int createdNrtReplicas = 0, createdTlogReplicas = 0, createdPullReplicas = 0;\n    CountDownLatch countDownLatch = new CountDownLatch(totalReplicas);\n    for (int j = 1; j <= totalReplicas; j++) {\n      int coreNameNumber;\n      Replica.Type typeToCreate;\n      if (createdNrtReplicas < numNrtReplicas) {\n        createdNrtReplicas++;\n        coreNameNumber = createdNrtReplicas;\n        typeToCreate = Replica.Type.NRT;\n      } else if (createdTlogReplicas < numTlogReplicas) {\n        createdTlogReplicas++;\n        coreNameNumber = createdTlogReplicas;\n        typeToCreate = Replica.Type.TLOG;\n      } else {\n        createdPullReplicas++;\n        coreNameNumber = createdPullReplicas;\n        typeToCreate = Replica.Type.PULL;\n      }\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String coreName = Assign.buildCoreName(collectionName, sliceName, typeToCreate, coreNameNumber);\n//      String coreName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          CoreAdminParams.REPLICA_TYPE, typeToCreate.name(),\n          CoreAdminParams.NODE, nodeName,\n          CoreAdminParams.NAME, coreName);\n      Map<String, Object> propertyParams = new HashMap<>();\n      ocmh.addPropertyParams(message, propertyParams);;\n      addReplicasProps = addReplicasProps.plus(propertyParams);\n      if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n      final NamedList addResult = new NamedList();\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, ()-> {\n        countDownLatch.countDown();\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n//    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (!timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n\n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(totalReplicas, 1.0f);\n    }\n    \n    int createdNrtReplicas = 0, createdTlogReplicas = 0, createdPullReplicas = 0;\n\n    for (int j = 1; j <= totalReplicas; j++) {\n      int coreNameNumber;\n      Replica.Type typeToCreate;\n      if (createdNrtReplicas < numNrtReplicas) {\n        createdNrtReplicas++;\n        coreNameNumber = createdNrtReplicas;\n        typeToCreate = Replica.Type.NRT;\n      } else if (createdTlogReplicas < numTlogReplicas) {\n        createdTlogReplicas++;\n        coreNameNumber = createdTlogReplicas;\n        typeToCreate = Replica.Type.TLOG;\n      } else {\n        createdPullReplicas++;\n        coreNameNumber = createdPullReplicas;\n        typeToCreate = Replica.Type.PULL;\n      }\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String coreName = Assign.buildCoreName(collectionName, sliceName, typeToCreate, coreNameNumber);\n//      String coreName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, coreName);\n      params.set(CoreAdminParams.REPLICA_TYPE, typeToCreate.name());\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      ocmh.addPropertyParams(message, params);\n\n      ocmh.sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n\n    ocmh.processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    \n    int createdNrtReplicas = 0, createdTlogReplicas = 0, createdPullReplicas = 0;\n    CountDownLatch countDownLatch = new CountDownLatch(totalReplicas);\n    for (int j = 1; j <= totalReplicas; j++) {\n      int coreNameNumber;\n      Replica.Type typeToCreate;\n      if (createdNrtReplicas < numNrtReplicas) {\n        createdNrtReplicas++;\n        coreNameNumber = createdNrtReplicas;\n        typeToCreate = Replica.Type.NRT;\n      } else if (createdTlogReplicas < numTlogReplicas) {\n        createdTlogReplicas++;\n        coreNameNumber = createdTlogReplicas;\n        typeToCreate = Replica.Type.TLOG;\n      } else {\n        createdPullReplicas++;\n        coreNameNumber = createdPullReplicas;\n        typeToCreate = Replica.Type.PULL;\n      }\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String coreName = Assign.buildCoreName(collectionName, sliceName, typeToCreate, coreNameNumber);\n//      String coreName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          CoreAdminParams.REPLICA_TYPE, typeToCreate.name(),\n          CoreAdminParams.NODE, nodeName,\n          CoreAdminParams.NAME, coreName);\n      Map<String, Object> propertyParams = new HashMap<>();\n      ocmh.addPropertyParams(message, propertyParams);;\n      addReplicasProps = addReplicasProps.plus(propertyParams);\n      if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n      final NamedList addResult = new NamedList();\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, ()-> {\n        countDownLatch.countDown();\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n//    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (!timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n\n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(totalReplicas, 1.0f);\n    }\n    \n    int createdNrtReplicas = 0, createdTlogReplicas = 0, createdPullReplicas = 0;\n\n    for (int j = 1; j <= totalReplicas; j++) {\n      int coreNameNumber;\n      Replica.Type typeToCreate;\n      if (createdNrtReplicas < numNrtReplicas) {\n        createdNrtReplicas++;\n        coreNameNumber = createdNrtReplicas;\n        typeToCreate = Replica.Type.NRT;\n      } else if (createdTlogReplicas < numTlogReplicas) {\n        createdTlogReplicas++;\n        coreNameNumber = createdTlogReplicas;\n        typeToCreate = Replica.Type.TLOG;\n      } else {\n        createdPullReplicas++;\n        coreNameNumber = createdPullReplicas;\n        typeToCreate = Replica.Type.PULL;\n      }\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String coreName = Assign.buildCoreName(collectionName, sliceName, typeToCreate, coreNameNumber);\n//      String coreName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, coreName);\n      params.set(CoreAdminParams.REPLICA_TYPE, typeToCreate.name());\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      ocmh.addPropertyParams(message, params);\n\n      ocmh.sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n\n    ocmh.processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    \n    int createdNrtReplicas = 0, createdTlogReplicas = 0, createdPullReplicas = 0;\n    CountDownLatch countDownLatch = new CountDownLatch(totalReplicas);\n    for (int j = 1; j <= totalReplicas; j++) {\n      int coreNameNumber;\n      Replica.Type typeToCreate;\n      if (createdNrtReplicas < numNrtReplicas) {\n        createdNrtReplicas++;\n        coreNameNumber = createdNrtReplicas;\n        typeToCreate = Replica.Type.NRT;\n      } else if (createdTlogReplicas < numTlogReplicas) {\n        createdTlogReplicas++;\n        coreNameNumber = createdTlogReplicas;\n        typeToCreate = Replica.Type.TLOG;\n      } else {\n        createdPullReplicas++;\n        coreNameNumber = createdPullReplicas;\n        typeToCreate = Replica.Type.PULL;\n      }\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String coreName = Assign.buildCoreName(collectionName, sliceName, typeToCreate, coreNameNumber);\n//      String coreName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          CoreAdminParams.REPLICA_TYPE, typeToCreate.name(),\n          CoreAdminParams.NODE, nodeName,\n          CoreAdminParams.NAME, coreName);\n      Map<String, Object> propertyParams = new HashMap<>();\n      ocmh.addPropertyParams(message, propertyParams);;\n      addReplicasProps = addReplicasProps.plus(propertyParams);\n      if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n      final NamedList addResult = new NamedList();\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, ()-> {\n        countDownLatch.countDown();\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n//    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (!timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n\n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(totalReplicas, 1.0f);\n    }\n    \n    int createdNrtReplicas = 0, createdTlogReplicas = 0, createdPullReplicas = 0;\n\n    for (int j = 1; j <= totalReplicas; j++) {\n      int coreNameNumber;\n      Replica.Type typeToCreate;\n      if (createdNrtReplicas < numNrtReplicas) {\n        createdNrtReplicas++;\n        coreNameNumber = createdNrtReplicas;\n        typeToCreate = Replica.Type.NRT;\n      } else if (createdTlogReplicas < numTlogReplicas) {\n        createdTlogReplicas++;\n        coreNameNumber = createdTlogReplicas;\n        typeToCreate = Replica.Type.TLOG;\n      } else {\n        createdPullReplicas++;\n        coreNameNumber = createdPullReplicas;\n        typeToCreate = Replica.Type.PULL;\n      }\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String coreName = Assign.buildCoreName(collectionName, sliceName, typeToCreate, coreNameNumber);\n//      String coreName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, coreName);\n      params.set(CoreAdminParams.REPLICA_TYPE, typeToCreate.name());\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      ocmh.addPropertyParams(message, params);\n\n      ocmh.sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n\n    ocmh.processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0806aac02ecbbdc6b5d9705ae15da193219c7af4","date":1499930856,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    if (usePolicyFramework) {\n      if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n      positions = Assign.identifyNodes(() -> ocmh.overseer.getZkController().getCoreContainer(),\n          zkStateReader,\n          clusterState,\n          Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n          collectionName,\n          message,\n          Collections.singletonList(sliceName),\n          numNrtReplicas,\n          numTlogReplicas,\n          numPullReplicas);\n    } else {\n      List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n          createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n      int i = 0;\n      positions = new ArrayList<>();\n      for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n          Replica.Type.TLOG, numTlogReplicas,\n          Replica.Type.PULL, numPullReplicas\n      ).entrySet()) {\n        for (int j = 0; j < e.getValue(); j++) {\n          positions.add(new ReplicaPosition(sliceName, j+1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n          i++;\n        }\n      }\n    }\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    CountDownLatch countDownLatch = new CountDownLatch(totalReplicas);\n    for (ReplicaPosition position : positions) {\n      String nodeName = position.node;\n      String coreName = Assign.buildCoreName(collectionName, sliceName, position.type, position.index);\n      log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          ZkStateReader.REPLICA_TYPE, position.type.name(),\n          CoreAdminParams.NODE, nodeName,\n          CoreAdminParams.NAME, coreName);\n      Map<String, Object> propertyParams = new HashMap<>();\n      ocmh.addPropertyParams(message, propertyParams);\n      addReplicasProps = addReplicasProps.plus(propertyParams);\n      if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n      final NamedList addResult = new NamedList();\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n        countDownLatch.countDown();\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    \n    int createdNrtReplicas = 0, createdTlogReplicas = 0, createdPullReplicas = 0;\n    CountDownLatch countDownLatch = new CountDownLatch(totalReplicas);\n    for (int j = 1; j <= totalReplicas; j++) {\n      int coreNameNumber;\n      Replica.Type typeToCreate;\n      if (createdNrtReplicas < numNrtReplicas) {\n        createdNrtReplicas++;\n        coreNameNumber = createdNrtReplicas;\n        typeToCreate = Replica.Type.NRT;\n      } else if (createdTlogReplicas < numTlogReplicas) {\n        createdTlogReplicas++;\n        coreNameNumber = createdTlogReplicas;\n        typeToCreate = Replica.Type.TLOG;\n      } else {\n        createdPullReplicas++;\n        coreNameNumber = createdPullReplicas;\n        typeToCreate = Replica.Type.PULL;\n      }\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String coreName = Assign.buildCoreName(collectionName, sliceName, typeToCreate, coreNameNumber);\n//      String coreName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          CoreAdminParams.REPLICA_TYPE, typeToCreate.name(),\n          CoreAdminParams.NODE, nodeName,\n          CoreAdminParams.NAME, coreName);\n      Map<String, Object> propertyParams = new HashMap<>();\n      ocmh.addPropertyParams(message, propertyParams);;\n      addReplicasProps = addReplicasProps.plus(propertyParams);\n      if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n      final NamedList addResult = new NamedList();\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, ()-> {\n        countDownLatch.countDown();\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651c3ddf5bc1266d9de0a972ec05e59d77099a4c","date":1500969855,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    \n    int createdNrtReplicas = 0, createdTlogReplicas = 0, createdPullReplicas = 0;\n    CountDownLatch countDownLatch = new CountDownLatch(totalReplicas);\n    for (int j = 1; j <= totalReplicas; j++) {\n      Replica.Type typeToCreate;\n      if (createdNrtReplicas < numNrtReplicas) {\n        createdNrtReplicas++;\n        typeToCreate = Replica.Type.NRT;\n      } else if (createdTlogReplicas < numTlogReplicas) {\n        createdTlogReplicas++;\n        typeToCreate = Replica.Type.TLOG;\n      } else {\n        createdPullReplicas++;\n        typeToCreate = Replica.Type.PULL;\n      }\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), collection, sliceName, typeToCreate);\n//      String coreName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          CoreAdminParams.REPLICA_TYPE, typeToCreate.name(),\n          CoreAdminParams.NODE, nodeName,\n          CoreAdminParams.NAME, coreName);\n      Map<String, Object> propertyParams = new HashMap<>();\n      ocmh.addPropertyParams(message, propertyParams);;\n      addReplicasProps = addReplicasProps.plus(propertyParams);\n      if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n      final NamedList addResult = new NamedList();\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, ()-> {\n        countDownLatch.countDown();\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    \n    int createdNrtReplicas = 0, createdTlogReplicas = 0, createdPullReplicas = 0;\n    CountDownLatch countDownLatch = new CountDownLatch(totalReplicas);\n    for (int j = 1; j <= totalReplicas; j++) {\n      int coreNameNumber;\n      Replica.Type typeToCreate;\n      if (createdNrtReplicas < numNrtReplicas) {\n        createdNrtReplicas++;\n        coreNameNumber = createdNrtReplicas;\n        typeToCreate = Replica.Type.NRT;\n      } else if (createdTlogReplicas < numTlogReplicas) {\n        createdTlogReplicas++;\n        coreNameNumber = createdTlogReplicas;\n        typeToCreate = Replica.Type.TLOG;\n      } else {\n        createdPullReplicas++;\n        coreNameNumber = createdPullReplicas;\n        typeToCreate = Replica.Type.PULL;\n      }\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String coreName = Assign.buildCoreName(collectionName, sliceName, typeToCreate, coreNameNumber);\n//      String coreName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          CoreAdminParams.REPLICA_TYPE, typeToCreate.name(),\n          CoreAdminParams.NODE, nodeName,\n          CoreAdminParams.NAME, coreName);\n      Map<String, Object> propertyParams = new HashMap<>();\n      ocmh.addPropertyParams(message, propertyParams);;\n      addReplicasProps = addReplicasProps.plus(propertyParams);\n      if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n      final NamedList addResult = new NamedList();\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, ()-> {\n        countDownLatch.countDown();\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    if (usePolicyFramework) {\n      if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n      positions = Assign.identifyNodes(() -> ocmh.overseer.getZkController().getCoreContainer(),\n          zkStateReader,\n          clusterState,\n          Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n          collectionName,\n          message,\n          Collections.singletonList(sliceName),\n          numNrtReplicas,\n          numTlogReplicas,\n          numPullReplicas);\n    } else {\n      List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n          createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n      int i = 0;\n      positions = new ArrayList<>();\n      for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n          Replica.Type.TLOG, numTlogReplicas,\n          Replica.Type.PULL, numPullReplicas\n      ).entrySet()) {\n        for (int j = 0; j < e.getValue(); j++) {\n          positions.add(new ReplicaPosition(sliceName, j+1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n          i++;\n        }\n      }\n    }\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    CountDownLatch countDownLatch = new CountDownLatch(totalReplicas);\n    for (ReplicaPosition position : positions) {\n      String nodeName = position.node;\n      String coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), collection, sliceName, position.type);\n      log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          ZkStateReader.REPLICA_TYPE, position.type.name(),\n          CoreAdminParams.NODE, nodeName,\n          CoreAdminParams.NAME, coreName);\n      Map<String, Object> propertyParams = new HashMap<>();\n      ocmh.addPropertyParams(message, propertyParams);\n      addReplicasProps = addReplicasProps.plus(propertyParams);\n      if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n      final NamedList addResult = new NamedList();\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n        countDownLatch.countDown();\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    if (usePolicyFramework) {\n      if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n      positions = Assign.identifyNodes(() -> ocmh.overseer.getZkController().getCoreContainer(),\n          zkStateReader,\n          clusterState,\n          Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n          collectionName,\n          message,\n          Collections.singletonList(sliceName),\n          numNrtReplicas,\n          numTlogReplicas,\n          numPullReplicas);\n    } else {\n      List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n          createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n      int i = 0;\n      positions = new ArrayList<>();\n      for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n          Replica.Type.TLOG, numTlogReplicas,\n          Replica.Type.PULL, numPullReplicas\n      ).entrySet()) {\n        for (int j = 0; j < e.getValue(); j++) {\n          positions.add(new ReplicaPosition(sliceName, j+1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n          i++;\n        }\n      }\n    }\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    CountDownLatch countDownLatch = new CountDownLatch(totalReplicas);\n    for (ReplicaPosition position : positions) {\n      String nodeName = position.node;\n      String coreName = Assign.buildCoreName(collectionName, sliceName, position.type, position.index);\n      log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          ZkStateReader.REPLICA_TYPE, position.type.name(),\n          CoreAdminParams.NODE, nodeName,\n          CoreAdminParams.NAME, coreName);\n      Map<String, Object> propertyParams = new HashMap<>();\n      ocmh.addPropertyParams(message, propertyParams);\n      addReplicasProps = addReplicasProps.plus(propertyParams);\n      if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n      final NamedList addResult = new NamedList();\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n        countDownLatch.countDown();\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    \n    int createdNrtReplicas = 0, createdTlogReplicas = 0, createdPullReplicas = 0;\n    CountDownLatch countDownLatch = new CountDownLatch(totalReplicas);\n    for (int j = 1; j <= totalReplicas; j++) {\n      Replica.Type typeToCreate;\n      if (createdNrtReplicas < numNrtReplicas) {\n        createdNrtReplicas++;\n        typeToCreate = Replica.Type.NRT;\n      } else if (createdTlogReplicas < numTlogReplicas) {\n        createdTlogReplicas++;\n        typeToCreate = Replica.Type.TLOG;\n      } else {\n        createdPullReplicas++;\n        typeToCreate = Replica.Type.PULL;\n      }\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), collection, sliceName, typeToCreate);\n//      String coreName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          CoreAdminParams.REPLICA_TYPE, typeToCreate.name(),\n          CoreAdminParams.NODE, nodeName,\n          CoreAdminParams.NAME, coreName);\n      Map<String, Object> propertyParams = new HashMap<>();\n      ocmh.addPropertyParams(message, propertyParams);;\n      addReplicasProps = addReplicasProps.plus(propertyParams);\n      if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n      final NamedList addResult = new NamedList();\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, ()-> {\n        countDownLatch.countDown();\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    \n    int createdNrtReplicas = 0, createdTlogReplicas = 0, createdPullReplicas = 0;\n    CountDownLatch countDownLatch = new CountDownLatch(totalReplicas);\n    for (int j = 1; j <= totalReplicas; j++) {\n      int coreNameNumber;\n      Replica.Type typeToCreate;\n      if (createdNrtReplicas < numNrtReplicas) {\n        createdNrtReplicas++;\n        coreNameNumber = createdNrtReplicas;\n        typeToCreate = Replica.Type.NRT;\n      } else if (createdTlogReplicas < numTlogReplicas) {\n        createdTlogReplicas++;\n        coreNameNumber = createdTlogReplicas;\n        typeToCreate = Replica.Type.TLOG;\n      } else {\n        createdPullReplicas++;\n        coreNameNumber = createdPullReplicas;\n        typeToCreate = Replica.Type.PULL;\n      }\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String coreName = Assign.buildCoreName(collectionName, sliceName, typeToCreate, coreNameNumber);\n//      String coreName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          CoreAdminParams.REPLICA_TYPE, typeToCreate.name(),\n          CoreAdminParams.NODE, nodeName,\n          CoreAdminParams.NAME, coreName);\n      Map<String, Object> propertyParams = new HashMap<>();\n      ocmh.addPropertyParams(message, propertyParams);;\n      addReplicasProps = addReplicasProps.plus(propertyParams);\n      if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n      final NamedList addResult = new NamedList();\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, ()-> {\n        countDownLatch.countDown();\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bccf7971a36bd151490117582a0a1a695081ead3","date":1502778995,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    CountDownLatch countDownLatch;\n    try {\n      if (usePolicyFramework) {\n        if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n        positions = Assign.identifyNodes(ocmh,\n            clusterState,\n            Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n            collectionName,\n            message,\n            Collections.singletonList(sliceName),\n            numNrtReplicas,\n            numTlogReplicas,\n            numPullReplicas);\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n            createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new CountDownLatch(totalReplicas);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName);\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      PolicyHelper.clearFlagAndDecref(ocmh.policySessionRef);\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    if (usePolicyFramework) {\n      if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n      positions = Assign.identifyNodes(() -> ocmh.overseer.getZkController().getCoreContainer(),\n          zkStateReader,\n          clusterState,\n          Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n          collectionName,\n          message,\n          Collections.singletonList(sliceName),\n          numNrtReplicas,\n          numTlogReplicas,\n          numPullReplicas);\n    } else {\n      List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n          createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n      int i = 0;\n      positions = new ArrayList<>();\n      for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n          Replica.Type.TLOG, numTlogReplicas,\n          Replica.Type.PULL, numPullReplicas\n      ).entrySet()) {\n        for (int j = 0; j < e.getValue(); j++) {\n          positions.add(new ReplicaPosition(sliceName, j+1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n          i++;\n        }\n      }\n    }\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    CountDownLatch countDownLatch = new CountDownLatch(totalReplicas);\n    for (ReplicaPosition position : positions) {\n      String nodeName = position.node;\n      String coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), collection, sliceName, position.type);\n      log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          ZkStateReader.REPLICA_TYPE, position.type.name(),\n          CoreAdminParams.NODE, nodeName,\n          CoreAdminParams.NAME, coreName);\n      Map<String, Object> propertyParams = new HashMap<>();\n      ocmh.addPropertyParams(message, propertyParams);\n      addReplicasProps = addReplicasProps.plus(propertyParams);\n      if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n      final NamedList addResult = new NamedList();\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n        countDownLatch.countDown();\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    CountDownLatch countDownLatch;\n    try {\n      if (usePolicyFramework) {\n        if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n        positions = Assign.identifyNodes(ocmh,\n            clusterState,\n            Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n            collectionName,\n            message,\n            Collections.singletonList(sliceName),\n            numNrtReplicas,\n            numTlogReplicas,\n            numPullReplicas);\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n            createNodeSetStr, ocmh.overseer.getClusterDataProvider(), ocmh.overseer.getCoreContainer());\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new CountDownLatch(totalReplicas);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName);\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      PolicyHelper.clearFlagAndDecref(ocmh.policySessionRef);\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    CountDownLatch countDownLatch;\n    try {\n      if (usePolicyFramework) {\n        if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n        positions = Assign.identifyNodes(ocmh,\n            clusterState,\n            Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n            collectionName,\n            message,\n            Collections.singletonList(sliceName),\n            numNrtReplicas,\n            numTlogReplicas,\n            numPullReplicas);\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n            createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new CountDownLatch(totalReplicas);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName);\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      PolicyHelper.clearFlagAndDecref(ocmh.policySessionRef);\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    CountDownLatch countDownLatch;\n    try {\n      if (usePolicyFramework) {\n        if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n        positions = Assign.identifyNodes(ocmh,\n            clusterState,\n            Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n            collectionName,\n            message,\n            Collections.singletonList(sliceName),\n            numNrtReplicas,\n            numTlogReplicas,\n            numPullReplicas);\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n            createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new CountDownLatch(totalReplicas);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName);\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      PolicyHelper.clearFlagAndDecref(ocmh.policySessionRef);\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    CountDownLatch countDownLatch;\n    try {\n      if (usePolicyFramework) {\n        if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n        positions = Assign.identifyNodes(ocmh,\n            clusterState,\n            Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n            collectionName,\n            message,\n            Collections.singletonList(sliceName),\n            numNrtReplicas,\n            numTlogReplicas,\n            numPullReplicas);\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n            createNodeSetStr, ocmh.overseer.getClusterDataProvider(), ocmh.overseer.getCoreContainer());\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new CountDownLatch(totalReplicas);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName);\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      PolicyHelper.clearFlagAndDecref(ocmh.policySessionRef);\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    CountDownLatch countDownLatch;\n    try {\n      if (usePolicyFramework) {\n        if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n        positions = Assign.identifyNodes(ocmh,\n            clusterState,\n            Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n            collectionName,\n            message,\n            Collections.singletonList(sliceName),\n            numNrtReplicas,\n            numTlogReplicas,\n            numPullReplicas);\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n            createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new CountDownLatch(totalReplicas);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName);\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      PolicyHelper.clearFlagAndDecref(ocmh.policySessionRef);\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    \n    int createdNrtReplicas = 0, createdTlogReplicas = 0, createdPullReplicas = 0;\n    CountDownLatch countDownLatch = new CountDownLatch(totalReplicas);\n    for (int j = 1; j <= totalReplicas; j++) {\n      Replica.Type typeToCreate;\n      if (createdNrtReplicas < numNrtReplicas) {\n        createdNrtReplicas++;\n        typeToCreate = Replica.Type.NRT;\n      } else if (createdTlogReplicas < numTlogReplicas) {\n        createdTlogReplicas++;\n        typeToCreate = Replica.Type.TLOG;\n      } else {\n        createdPullReplicas++;\n        typeToCreate = Replica.Type.PULL;\n      }\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), collection, sliceName, typeToCreate);\n//      String coreName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          CoreAdminParams.REPLICA_TYPE, typeToCreate.name(),\n          CoreAdminParams.NODE, nodeName,\n          CoreAdminParams.NAME, coreName);\n      Map<String, Object> propertyParams = new HashMap<>();\n      ocmh.addPropertyParams(message, propertyParams);;\n      addReplicasProps = addReplicasProps.plus(propertyParams);\n      if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n      final NamedList addResult = new NamedList();\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, ()-> {\n        countDownLatch.countDown();\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    CountDownLatch countDownLatch;\n    try {\n      if (usePolicyFramework) {\n        if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n        positions = Assign.identifyNodes(ocmh,\n            clusterState,\n            Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n            collectionName,\n            message,\n            Collections.singletonList(sliceName),\n            numNrtReplicas,\n            numTlogReplicas,\n            numPullReplicas);\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n            createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new CountDownLatch(totalReplicas);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName);\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      PolicyHelper.clearFlagAndDecref(ocmh.policySessionRef);\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    \n    int createdNrtReplicas = 0, createdTlogReplicas = 0, createdPullReplicas = 0;\n    CountDownLatch countDownLatch = new CountDownLatch(totalReplicas);\n    for (int j = 1; j <= totalReplicas; j++) {\n      Replica.Type typeToCreate;\n      if (createdNrtReplicas < numNrtReplicas) {\n        createdNrtReplicas++;\n        typeToCreate = Replica.Type.NRT;\n      } else if (createdTlogReplicas < numTlogReplicas) {\n        createdTlogReplicas++;\n        typeToCreate = Replica.Type.TLOG;\n      } else {\n        createdPullReplicas++;\n        typeToCreate = Replica.Type.PULL;\n      }\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), collection, sliceName, typeToCreate);\n//      String coreName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          CoreAdminParams.REPLICA_TYPE, typeToCreate.name(),\n          CoreAdminParams.NODE, nodeName,\n          CoreAdminParams.NAME, coreName);\n      Map<String, Object> propertyParams = new HashMap<>();\n      ocmh.addPropertyParams(message, propertyParams);;\n      addReplicasProps = addReplicasProps.plus(propertyParams);\n      if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n      final NamedList addResult = new NamedList();\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, ()-> {\n        countDownLatch.countDown();\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    CountDownLatch countDownLatch;\n    try {\n      if (usePolicyFramework) {\n        if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n        positions = Assign.identifyNodes(ocmh,\n            clusterState,\n            Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n            collectionName,\n            message,\n            Collections.singletonList(sliceName),\n            numNrtReplicas,\n            numTlogReplicas,\n            numPullReplicas);\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n            createNodeSetStr, ocmh.overseer.getSolrCloudManager(), ocmh.overseer.getCoreContainer());\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new CountDownLatch(totalReplicas);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName);\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      PolicyHelper.clearFlagAndDecref(ocmh.policySessionRef);\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    CountDownLatch countDownLatch;\n    try {\n      if (usePolicyFramework) {\n        if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n        positions = Assign.identifyNodes(ocmh,\n            clusterState,\n            Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n            collectionName,\n            message,\n            Collections.singletonList(sliceName),\n            numNrtReplicas,\n            numTlogReplicas,\n            numPullReplicas);\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n            createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new CountDownLatch(totalReplicas);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName);\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      PolicyHelper.clearFlagAndDecref(ocmh.policySessionRef);\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2bcfee499548996a6e5448bbf93b8f276d010270","date":1508336936,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    CountDownLatch countDownLatch;\n    try {\n      if (usePolicyFramework) {\n        if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n        positions = Assign.identifyNodes(ocmh,\n            clusterState,\n            Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n            collectionName,\n            message,\n            Collections.singletonList(sliceName),\n            numNrtReplicas,\n            numTlogReplicas,\n            numPullReplicas);\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n            createNodeSetStr, ocmh.overseer.getSolrCloudManager(), ocmh.overseer.getCoreContainer());\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new CountDownLatch(totalReplicas);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      PolicyHelper.clearFlagAndDecref(ocmh.policySessionRef);\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    CountDownLatch countDownLatch;\n    try {\n      if (usePolicyFramework) {\n        if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n        positions = Assign.identifyNodes(ocmh,\n            clusterState,\n            Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n            collectionName,\n            message,\n            Collections.singletonList(sliceName),\n            numNrtReplicas,\n            numTlogReplicas,\n            numPullReplicas);\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n            createNodeSetStr, ocmh.overseer.getSolrCloudManager(), ocmh.overseer.getCoreContainer());\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new CountDownLatch(totalReplicas);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName);\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      PolicyHelper.clearFlagAndDecref(ocmh.policySessionRef);\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"67e503ef0f418bc92404ff5d55694087c23d48eb","date":1509025368,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    SolrCloseableLatch countDownLatch;\n    try {\n      if (usePolicyFramework) {\n        if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n        positions = Assign.identifyNodes(ocmh,\n            clusterState,\n            Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n            collectionName,\n            message,\n            Collections.singletonList(sliceName),\n            numNrtReplicas,\n            numTlogReplicas,\n            numPullReplicas);\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n            createNodeSetStr, ocmh.overseer.getSolrCloudManager(), ocmh.overseer.getCoreContainer());\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new SolrCloseableLatch(totalReplicas, ocmh);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      PolicyHelper.clearFlagAndDecref(ocmh.policySessionRef);\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    CountDownLatch countDownLatch;\n    try {\n      if (usePolicyFramework) {\n        if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n        positions = Assign.identifyNodes(ocmh,\n            clusterState,\n            Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n            collectionName,\n            message,\n            Collections.singletonList(sliceName),\n            numNrtReplicas,\n            numTlogReplicas,\n            numPullReplicas);\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n            createNodeSetStr, ocmh.overseer.getSolrCloudManager(), ocmh.overseer.getCoreContainer());\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new CountDownLatch(totalReplicas);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      PolicyHelper.clearFlagAndDecref(ocmh.policySessionRef);\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6397103f7076f0b5ee4edf5b3a63c750a072ff65","date":1510231708,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    SolrCloseableLatch countDownLatch;\n    try {\n      if (usePolicyFramework) {\n        if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n        positions = Assign.identifyNodes(ocmh,\n            clusterState,\n            Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n            collectionName,\n            message,\n            Collections.singletonList(sliceName),\n            numNrtReplicas,\n            numTlogReplicas,\n            numPullReplicas);\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n            createNodeSetStr, ocmh.overseer.getSolrCloudManager());\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new SolrCloseableLatch(totalReplicas, ocmh);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      PolicyHelper.clearFlagAndDecref(ocmh.policySessionRef);\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    SolrCloseableLatch countDownLatch;\n    try {\n      if (usePolicyFramework) {\n        if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n        positions = Assign.identifyNodes(ocmh,\n            clusterState,\n            Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n            collectionName,\n            message,\n            Collections.singletonList(sliceName),\n            numNrtReplicas,\n            numTlogReplicas,\n            numPullReplicas);\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n            createNodeSetStr, ocmh.overseer.getSolrCloudManager(), ocmh.overseer.getCoreContainer());\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new SolrCloseableLatch(totalReplicas, ocmh);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      PolicyHelper.clearFlagAndDecref(ocmh.policySessionRef);\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427295870ac138112ed6ab0973a2dbe42e0a1a2d","date":1510742913,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    SolrCloseableLatch countDownLatch;\n    try {\n      if (usePolicyFramework) {\n        if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n        positions = Assign.identifyNodes(ocmh,\n            clusterState,\n            Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n            collectionName,\n            message,\n            Collections.singletonList(sliceName),\n            numNrtReplicas,\n            numTlogReplicas,\n            numPullReplicas);\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n            createNodeSetStr, ocmh.overseer.getSolrCloudManager());\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new SolrCloseableLatch(totalReplicas, ocmh);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      PolicyHelper.clearFlagAndDecref(PolicyHelper.getPolicySessionRef(ocmh.overseer.getSolrCloudManager()));\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    SolrCloseableLatch countDownLatch;\n    try {\n      if (usePolicyFramework) {\n        if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n        positions = Assign.identifyNodes(ocmh,\n            clusterState,\n            Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n            collectionName,\n            message,\n            Collections.singletonList(sliceName),\n            numNrtReplicas,\n            numTlogReplicas,\n            numPullReplicas);\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n            createNodeSetStr, ocmh.overseer.getSolrCloudManager());\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new SolrCloseableLatch(totalReplicas, ocmh);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      PolicyHelper.clearFlagAndDecref(ocmh.policySessionRef);\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d907c28c7fe6305eaec1756d51365f5149e1e41d","date":1512533044,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    SolrCloseableLatch countDownLatch;\n    try {\n      if (usePolicyFramework) {\n        if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n        positions = Assign.identifyNodes(ocmh,\n            clusterState,\n            Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n            collectionName,\n            message,\n            Collections.singletonList(sliceName),\n            numNrtReplicas,\n            numTlogReplicas,\n            numPullReplicas);\n        sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n            createNodeSetStr, ocmh.overseer.getSolrCloudManager());\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new SolrCloseableLatch(totalReplicas, ocmh);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      if(sessionWrapper != null) sessionWrapper.release();\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    SolrCloseableLatch countDownLatch;\n    try {\n      if (usePolicyFramework) {\n        if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n        positions = Assign.identifyNodes(ocmh,\n            clusterState,\n            Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n            collectionName,\n            message,\n            Collections.singletonList(sliceName),\n            numNrtReplicas,\n            numTlogReplicas,\n            numPullReplicas);\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n            createNodeSetStr, ocmh.overseer.getSolrCloudManager());\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new SolrCloseableLatch(totalReplicas, ocmh);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      PolicyHelper.clearFlagAndDecref(PolicyHelper.getPolicySessionRef(ocmh.overseer.getSolrCloudManager()));\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    SolrCloseableLatch countDownLatch;\n    try {\n      List<ReplicaPosition> positions = buildReplicaPositions(ocmh.cloudManager, clusterState, collectionName, message, sessionWrapper);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new SolrCloseableLatch(positions.size(), ocmh);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildSolrCoreName(ocmh.cloudManager.getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      if (sessionWrapper.get() != null) sessionWrapper.get().release();\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n    \n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n    \n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    PolicyHelper.SessionWrapper sessionWrapper = null;\n    boolean usePolicyFramework = usePolicyFramework(collection,ocmh);\n    List<ReplicaPosition> positions = null;\n    SolrCloseableLatch countDownLatch;\n    try {\n      if (usePolicyFramework) {\n        if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());\n        positions = Assign.identifyNodes(ocmh,\n            clusterState,\n            Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM),\n            collectionName,\n            message,\n            Collections.singletonList(sliceName),\n            numNrtReplicas,\n            numTlogReplicas,\n            numPullReplicas);\n        sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n      } else {\n        List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, totalReplicas,\n            createNodeSetStr, ocmh.overseer.getSolrCloudManager());\n        int i = 0;\n        positions = new ArrayList<>();\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));\n            i++;\n          }\n        }\n      }\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new SolrCloseableLatch(totalReplicas, ocmh);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      if(sessionWrapper != null) sessionWrapper.release();\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    SolrCloseableLatch countDownLatch;\n    try {\n      List<ReplicaPosition> positions = buildReplicaPositions(ocmh.cloudManager, clusterState, collectionName, message, sessionWrapper);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new SolrCloseableLatch(positions.size(), ocmh);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildSolrCoreName(ocmh.cloudManager.getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      if (sessionWrapper.get() != null) sessionWrapper.get().release();\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    SolrCloseableLatch countDownLatch;\n    try {\n      List<ReplicaPosition> positions = buildReplicaPositions(ocmh.cloudManager, clusterState, collectionName, message, sessionWrapper);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new SolrCloseableLatch(positions.size(), ocmh);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildSolrCoreName(ocmh.cloudManager.getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      if (sessionWrapper.get() != null) sessionWrapper.get().release();\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    SolrCloseableLatch countDownLatch;\n    try {\n      List<ReplicaPosition> positions = buildReplicaPositions(ocmh.cloudManager, clusterState, collectionName, message, sessionWrapper);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new SolrCloseableLatch(positions.size(), ocmh);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildSolrCoreName(ocmh.cloudManager.getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      if (sessionWrapper.get() != null) sessionWrapper.get().release();\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    SolrCloseableLatch countDownLatch;\n    try {\n      List<ReplicaPosition> positions = buildReplicaPositions(ocmh.cloudManager, clusterState, collectionName, message, sessionWrapper);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new SolrCloseableLatch(positions.size(), ocmh);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildSolrCoreName(ocmh.cloudManager.getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      if (sessionWrapper.get() != null) sessionWrapper.get().release();\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"2bcfee499548996a6e5448bbf93b8f276d010270":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a52341299179de5479672f7cf518bf4b173f34b3","b869898f50ca80263bac2e3ae0949f7700e5c977"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","61c45e99cf6676da48f19d7511c73712ad39402b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["d907c28c7fe6305eaec1756d51365f5149e1e41d"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a52341299179de5479672f7cf518bf4b173f34b3","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["28288370235ed02234a64753cdbf0c6ec096304a"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"61c45e99cf6676da48f19d7511c73712ad39402b":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["61c45e99cf6676da48f19d7511c73712ad39402b"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["bccf7971a36bd151490117582a0a1a695081ead3"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"bccf7971a36bd151490117582a0a1a695081ead3":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["0806aac02ecbbdc6b5d9705ae15da193219c7af4","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["e9017cf144952056066919f1ebc7897ff9bd71b1","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["61c45e99cf6676da48f19d7511c73712ad39402b","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"a52341299179de5479672f7cf518bf4b173f34b3":["28288370235ed02234a64753cdbf0c6ec096304a","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"427295870ac138112ed6ab0973a2dbe42e0a1a2d":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["2bcfee499548996a6e5448bbf93b8f276d010270"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"d907c28c7fe6305eaec1756d51365f5149e1e41d":["427295870ac138112ed6ab0973a2dbe42e0a1a2d"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2bcfee499548996a6e5448bbf93b8f276d010270":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["427295870ac138112ed6ab0973a2dbe42e0a1a2d"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","403d05f7f8d69b65659157eff1bc1d2717f04c66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","a9b4296bd51ca61b482138791478afdd0f7d3a3d","28288370235ed02234a64753cdbf0c6ec096304a"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"bccf7971a36bd151490117582a0a1a695081ead3":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["2bcfee499548996a6e5448bbf93b8f276d010270"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["bccf7971a36bd151490117582a0a1a695081ead3"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["0806aac02ecbbdc6b5d9705ae15da193219c7af4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"28288370235ed02234a64753cdbf0c6ec096304a":["651c3ddf5bc1266d9de0a972ec05e59d77099a4c","a52341299179de5479672f7cf518bf4b173f34b3"],"a52341299179de5479672f7cf518bf4b173f34b3":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"427295870ac138112ed6ab0973a2dbe42e0a1a2d":["d907c28c7fe6305eaec1756d51365f5149e1e41d"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"d907c28c7fe6305eaec1756d51365f5149e1e41d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}