{"path":"src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#testNormalization().mjava","commits":[{"id":"2fd023a662cc25ae7e0ad0f33d71c476a16d0579","date":1261403630,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#testNormalization().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Test usage of the decomposition option for unicode normalization.\n   */\n  public void testNormalization() throws IOException {\n    String turkishUpperCase = \"I W\\u0049\\u0307LL USE TURKİSH CASING\";\n    String turkishLowerCase = \"ı will use turkish casıng\";\n    CollationKeyFilterFactory factory = new CollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"language\", \"tr\");\n    args.put(\"strength\", \"primary\");\n    args.put(\"decomposition\", \"canonical\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"\"));\n    TokenStream tsUpper = factory.create(\n        new KeywordTokenizer(new StringReader(turkishUpperCase)));\n    TokenStream tsLower = factory.create(\n        new KeywordTokenizer(new StringReader(turkishLowerCase)));\n    assertCollatesToSame(tsUpper, tsLower);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#testNormalization().mjava","pathOld":"src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#testNormalization().mjava","sourceNew":"  /*\n   * Test usage of the decomposition option for unicode normalization.\n   */\n  public void testNormalization() throws IOException {\n    String turkishUpperCase = \"I W\\u0049\\u0307LL USE TURKİSH CASING\";\n    String turkishLowerCase = \"ı will use turkish casıng\";\n    CollationKeyFilterFactory factory = new CollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"language\", \"tr\");\n    args.put(\"strength\", \"primary\");\n    args.put(\"decomposition\", \"canonical\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"\"));\n    TokenStream tsUpper = factory.create(\n        new KeywordTokenizer(new StringReader(turkishUpperCase)));\n    TokenStream tsLower = factory.create(\n        new KeywordTokenizer(new StringReader(turkishLowerCase)));\n    assertCollatesToSame(tsUpper, tsLower);\n  }\n\n","sourceOld":"  /*\n   * Test usage of the decomposition option for unicode normalization.\n   */\n  public void testNormalization() throws IOException {\n    String turkishUpperCase = \"I W\\u0049\\u0307LL USE TURKİSH CASING\";\n    String turkishLowerCase = \"ı will use turkish casıng\";\n    CollationKeyFilterFactory factory = new CollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"language\", \"tr\");\n    args.put(\"strength\", \"primary\");\n    args.put(\"decomposition\", \"canonical\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"\"));\n    TokenStream tsUpper = factory.create(\n        new KeywordTokenizer(new StringReader(turkishUpperCase)));\n    TokenStream tsLower = factory.create(\n        new KeywordTokenizer(new StringReader(turkishLowerCase)));\n    assertCollatesToSame(tsUpper, tsLower);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}