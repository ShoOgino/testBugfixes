{"path":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#start(String,int,double,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#start(String,int,double,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/ShardSearchingTestBase#start(String,int,double,int).mjava","sourceNew":"  protected void start(String baseDirName, int numNodes, double runTimeSec, int maxSearcherAgeSeconds) throws IOException {\n\n    endTimeNanos = System.nanoTime() + (long) (runTimeSec*1000000000);\n    this.maxSearcherAgeSeconds = maxSearcherAgeSeconds;\n\n    nodes = new NodeState[numNodes];\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      nodes[nodeID] = new NodeState(random, baseDirName, nodeID, numNodes);\n    }\n\n    long[] nodeVersions = new long[nodes.length];\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      final IndexSearcher s = nodes[nodeID].mgr.acquire();\n      try {\n        nodeVersions[nodeID] = nodes[nodeID].searchers.record(s);\n      } finally {\n        nodes[nodeID].mgr.release(s);\n      }\n    }\n\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      final IndexSearcher s = nodes[nodeID].mgr.acquire();\n      assert nodeVersions[nodeID] == nodes[nodeID].searchers.record(s);\n      assert s != null;\n      try {\n        broadcastNodeReopen(nodeID, nodeVersions[nodeID], s);\n      } finally {\n        nodes[nodeID].mgr.release(s);\n      }\n    }\n\n    changeIndicesThread = new ChangeIndices();\n    changeIndicesThread.start();\n  }\n\n","sourceOld":"  protected void start(String baseDirName, int numNodes, double runTimeSec, int maxSearcherAgeSeconds) throws IOException {\n\n    endTimeNanos = System.nanoTime() + (long) (runTimeSec*1000000000);\n    this.maxSearcherAgeSeconds = maxSearcherAgeSeconds;\n\n    nodes = new NodeState[numNodes];\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      nodes[nodeID] = new NodeState(random, baseDirName, nodeID, numNodes);\n    }\n\n    long[] nodeVersions = new long[nodes.length];\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      final IndexSearcher s = nodes[nodeID].mgr.acquire();\n      try {\n        nodeVersions[nodeID] = nodes[nodeID].searchers.record(s);\n      } finally {\n        nodes[nodeID].mgr.release(s);\n      }\n    }\n\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      final IndexSearcher s = nodes[nodeID].mgr.acquire();\n      assert nodeVersions[nodeID] == nodes[nodeID].searchers.record(s);\n      assert s != null;\n      try {\n        broadcastNodeReopen(nodeID, nodeVersions[nodeID], s);\n      } finally {\n        nodes[nodeID].mgr.release(s);\n      }\n    }\n\n    changeIndicesThread = new ChangeIndices();\n    changeIndicesThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#start(String,int,double,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#start(String,int,double,int).mjava","sourceNew":"  protected void start(String baseDirName, int numNodes, double runTimeSec, int maxSearcherAgeSeconds) throws IOException {\n\n    endTimeNanos = System.nanoTime() + (long) (runTimeSec*1000000000);\n    this.maxSearcherAgeSeconds = maxSearcherAgeSeconds;\n\n    nodes = new NodeState[numNodes];\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      nodes[nodeID] = new NodeState(random(), baseDirName, nodeID, numNodes);\n    }\n\n    long[] nodeVersions = new long[nodes.length];\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      final IndexSearcher s = nodes[nodeID].mgr.acquire();\n      try {\n        nodeVersions[nodeID] = nodes[nodeID].searchers.record(s);\n      } finally {\n        nodes[nodeID].mgr.release(s);\n      }\n    }\n\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      final IndexSearcher s = nodes[nodeID].mgr.acquire();\n      assert nodeVersions[nodeID] == nodes[nodeID].searchers.record(s);\n      assert s != null;\n      try {\n        broadcastNodeReopen(nodeID, nodeVersions[nodeID], s);\n      } finally {\n        nodes[nodeID].mgr.release(s);\n      }\n    }\n\n    changeIndicesThread = new ChangeIndices();\n    changeIndicesThread.start();\n  }\n\n","sourceOld":"  protected void start(String baseDirName, int numNodes, double runTimeSec, int maxSearcherAgeSeconds) throws IOException {\n\n    endTimeNanos = System.nanoTime() + (long) (runTimeSec*1000000000);\n    this.maxSearcherAgeSeconds = maxSearcherAgeSeconds;\n\n    nodes = new NodeState[numNodes];\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      nodes[nodeID] = new NodeState(random, baseDirName, nodeID, numNodes);\n    }\n\n    long[] nodeVersions = new long[nodes.length];\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      final IndexSearcher s = nodes[nodeID].mgr.acquire();\n      try {\n        nodeVersions[nodeID] = nodes[nodeID].searchers.record(s);\n      } finally {\n        nodes[nodeID].mgr.release(s);\n      }\n    }\n\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      final IndexSearcher s = nodes[nodeID].mgr.acquire();\n      assert nodeVersions[nodeID] == nodes[nodeID].searchers.record(s);\n      assert s != null;\n      try {\n        broadcastNodeReopen(nodeID, nodeVersions[nodeID], s);\n      } finally {\n        nodes[nodeID].mgr.release(s);\n      }\n    }\n\n    changeIndicesThread = new ChangeIndices();\n    changeIndicesThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea8db162694636ac3d19d83debf895a9e089f96a","date":1343856398,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#start(int,double,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#start(String,int,double,int).mjava","sourceNew":"  protected void start(int numNodes, double runTimeSec, int maxSearcherAgeSeconds) throws IOException {\n\n    endTimeNanos = System.nanoTime() + (long) (runTimeSec*1000000000);\n    this.maxSearcherAgeSeconds = maxSearcherAgeSeconds;\n\n    nodes = new NodeState[numNodes];\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      nodes[nodeID] = new NodeState(random(), nodeID, numNodes);\n    }\n\n    long[] nodeVersions = new long[nodes.length];\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      final IndexSearcher s = nodes[nodeID].mgr.acquire();\n      try {\n        nodeVersions[nodeID] = nodes[nodeID].searchers.record(s);\n      } finally {\n        nodes[nodeID].mgr.release(s);\n      }\n    }\n\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      final IndexSearcher s = nodes[nodeID].mgr.acquire();\n      assert nodeVersions[nodeID] == nodes[nodeID].searchers.record(s);\n      assert s != null;\n      try {\n        broadcastNodeReopen(nodeID, nodeVersions[nodeID], s);\n      } finally {\n        nodes[nodeID].mgr.release(s);\n      }\n    }\n\n    changeIndicesThread = new ChangeIndices();\n    changeIndicesThread.start();\n  }\n\n","sourceOld":"  protected void start(String baseDirName, int numNodes, double runTimeSec, int maxSearcherAgeSeconds) throws IOException {\n\n    endTimeNanos = System.nanoTime() + (long) (runTimeSec*1000000000);\n    this.maxSearcherAgeSeconds = maxSearcherAgeSeconds;\n\n    nodes = new NodeState[numNodes];\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      nodes[nodeID] = new NodeState(random(), baseDirName, nodeID, numNodes);\n    }\n\n    long[] nodeVersions = new long[nodes.length];\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      final IndexSearcher s = nodes[nodeID].mgr.acquire();\n      try {\n        nodeVersions[nodeID] = nodes[nodeID].searchers.record(s);\n      } finally {\n        nodes[nodeID].mgr.release(s);\n      }\n    }\n\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      final IndexSearcher s = nodes[nodeID].mgr.acquire();\n      assert nodeVersions[nodeID] == nodes[nodeID].searchers.record(s);\n      assert s != null;\n      try {\n        broadcastNodeReopen(nodeID, nodeVersions[nodeID], s);\n      } finally {\n        nodes[nodeID].mgr.release(s);\n      }\n    }\n\n    changeIndicesThread = new ChangeIndices();\n    changeIndicesThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#start(int,double,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#start(String,int,double,int).mjava","sourceNew":"  protected void start(int numNodes, double runTimeSec, int maxSearcherAgeSeconds) throws IOException {\n\n    endTimeNanos = System.nanoTime() + (long) (runTimeSec*1000000000);\n    this.maxSearcherAgeSeconds = maxSearcherAgeSeconds;\n\n    nodes = new NodeState[numNodes];\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      nodes[nodeID] = new NodeState(random(), nodeID, numNodes);\n    }\n\n    long[] nodeVersions = new long[nodes.length];\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      final IndexSearcher s = nodes[nodeID].mgr.acquire();\n      try {\n        nodeVersions[nodeID] = nodes[nodeID].searchers.record(s);\n      } finally {\n        nodes[nodeID].mgr.release(s);\n      }\n    }\n\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      final IndexSearcher s = nodes[nodeID].mgr.acquire();\n      assert nodeVersions[nodeID] == nodes[nodeID].searchers.record(s);\n      assert s != null;\n      try {\n        broadcastNodeReopen(nodeID, nodeVersions[nodeID], s);\n      } finally {\n        nodes[nodeID].mgr.release(s);\n      }\n    }\n\n    changeIndicesThread = new ChangeIndices();\n    changeIndicesThread.start();\n  }\n\n","sourceOld":"  protected void start(String baseDirName, int numNodes, double runTimeSec, int maxSearcherAgeSeconds) throws IOException {\n\n    endTimeNanos = System.nanoTime() + (long) (runTimeSec*1000000000);\n    this.maxSearcherAgeSeconds = maxSearcherAgeSeconds;\n\n    nodes = new NodeState[numNodes];\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      nodes[nodeID] = new NodeState(random(), baseDirName, nodeID, numNodes);\n    }\n\n    long[] nodeVersions = new long[nodes.length];\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      final IndexSearcher s = nodes[nodeID].mgr.acquire();\n      try {\n        nodeVersions[nodeID] = nodes[nodeID].searchers.record(s);\n      } finally {\n        nodes[nodeID].mgr.release(s);\n      }\n    }\n\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      final IndexSearcher s = nodes[nodeID].mgr.acquire();\n      assert nodeVersions[nodeID] == nodes[nodeID].searchers.record(s);\n      assert s != null;\n      try {\n        broadcastNodeReopen(nodeID, nodeVersions[nodeID], s);\n      } finally {\n        nodes[nodeID].mgr.release(s);\n      }\n    }\n\n    changeIndicesThread = new ChangeIndices();\n    changeIndicesThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#start(String,int,double,int).mjava","sourceNew":null,"sourceOld":"  protected void start(String baseDirName, int numNodes, double runTimeSec, int maxSearcherAgeSeconds) throws IOException {\n\n    endTimeNanos = System.nanoTime() + (long) (runTimeSec*1000000000);\n    this.maxSearcherAgeSeconds = maxSearcherAgeSeconds;\n\n    nodes = new NodeState[numNodes];\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      nodes[nodeID] = new NodeState(random(), baseDirName, nodeID, numNodes);\n    }\n\n    long[] nodeVersions = new long[nodes.length];\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      final IndexSearcher s = nodes[nodeID].mgr.acquire();\n      try {\n        nodeVersions[nodeID] = nodes[nodeID].searchers.record(s);\n      } finally {\n        nodes[nodeID].mgr.release(s);\n      }\n    }\n\n    for(int nodeID=0;nodeID<numNodes;nodeID++) {\n      final IndexSearcher s = nodes[nodeID].mgr.acquire();\n      assert nodeVersions[nodeID] == nodes[nodeID].searchers.record(s);\n      assert s != null;\n      try {\n        broadcastNodeReopen(nodeID, nodeVersions[nodeID], s);\n      } finally {\n        nodes[nodeID].mgr.release(s);\n      }\n    }\n\n    changeIndicesThread = new ChangeIndices();\n    changeIndicesThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","ea8db162694636ac3d19d83debf895a9e089f96a"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","ea8db162694636ac3d19d83debf895a9e089f96a"],"ea8db162694636ac3d19d83debf895a9e089f96a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea8db162694636ac3d19d83debf895a9e089f96a"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","ea8db162694636ac3d19d83debf895a9e089f96a"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"ea8db162694636ac3d19d83debf895a9e089f96a":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}