{"path":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestUnloadCreate(String).mjava","commits":[{"id":"dc6e48afbb50ae0a22fa76e226f04fd585532938","date":1371429211,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestUnloadCreate(String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestUnloadCreate(String which) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.UNLOAD.toString(),\n              CoreAdminParams.CORE, which),\n              resp);\n      assertNull(\"Exception on unload\", resp.getException());\n\n      origMatchesPersist(cc, new File(solrHomeDirectory, \"unloadcreate1.solr.xml\"));\n\n      String instPath = new File(solrHomeDirectory, which).getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath,\n              CoreAdminParams.CONFIG, \"solrconfig-minimal.xml\",\n              CoreAdminParams.SCHEMA, \"schema-tiny.xml\",\n              CoreAdminParams.NAME, which),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      File persistXml = new File(solrHomeDirectory, \"rename.solr.xml\");\n      File origXml = new File(solrHomeDirectory, \"solr.xml\");\n\n      cc.persistFile(persistXml);\n      String[] persistList = getAllNodes(persistXml);\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String name = \"@name='\" + which + \"'\";\n\n        if (persistList[idx].contains(name)) {\n          if (persistList[idx].contains(\"@schema='schema-tiny.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"schema-tiny.xml\", \"${schema:schema-tiny.xml}\");\n          } else if (persistList[idx].contains(\"@config='solrconfig-minimal.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"solrconfig-minimal.xml\", \"${solrconfig:solrconfig-minimal.xml}\");\n          } else if (persistList[idx].contains(\"@instanceDir=\")) {\n            expressions[idx] = persistList[idx].replaceFirst(\"instanceDir\\\\='.*?'\", \"instanceDir='\" + which + \"'\");\n          } else {\n            expressions[idx] = persistList[idx];\n          }\n        } else {\n          expressions[idx] = persistList[idx];\n        }\n      }\n\n      assertXmlFile(origXml, expressions);\n\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["96a802acd838449b6936d34e464baeeb82f9ef54"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96a802acd838449b6936d34e464baeeb82f9ef54","date":1371519049,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestUnloadCreate(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestUnloadCreate(String).mjava","sourceNew":"  private void doTestUnloadCreate(String which) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.UNLOAD.toString(),\n              CoreAdminParams.CORE, which),\n              resp);\n      assertNull(\"Exception on unload\", resp.getException());\n\n      origMatchesPersist(cc, new File(solrHomeDirectory, \"unloadcreate1.solr.xml\"));\n\n      String instPath = new File(solrHomeDirectory, which).getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath,\n              CoreAdminParams.NAME, which),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      File persistXml = new File(solrHomeDirectory, \"rename.solr.xml\");\n      File origXml = new File(solrHomeDirectory, \"solr.xml\");\n\n      cc.persistFile(persistXml);\n      String[] persistList = getAllNodes(persistXml);\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String name = \"@name='\" + which + \"'\";\n\n        if (persistList[idx].contains(name)) {\n          if (persistList[idx].contains(\"@schema='schema.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"schema.xml\", \"${schema:schema.xml}\");\n          } else if (persistList[idx].contains(\"@config='solrconfig.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"solrconfig.xml\", \"${solrconfig:solrconfig.xml}\");\n          } else if (persistList[idx].contains(\"@instanceDir=\")) {\n            expressions[idx] = persistList[idx].replaceFirst(\"instanceDir\\\\='.*?'\", \"instanceDir='\" + which + \"'\");\n          } else {\n            expressions[idx] = persistList[idx];\n          }\n        } else {\n          expressions[idx] = persistList[idx];\n        }\n      }\n\n      assertXmlFile(origXml, expressions);\n\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestUnloadCreate(String which) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.UNLOAD.toString(),\n              CoreAdminParams.CORE, which),\n              resp);\n      assertNull(\"Exception on unload\", resp.getException());\n\n      origMatchesPersist(cc, new File(solrHomeDirectory, \"unloadcreate1.solr.xml\"));\n\n      String instPath = new File(solrHomeDirectory, which).getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath,\n              CoreAdminParams.CONFIG, \"solrconfig-minimal.xml\",\n              CoreAdminParams.SCHEMA, \"schema-tiny.xml\",\n              CoreAdminParams.NAME, which),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      File persistXml = new File(solrHomeDirectory, \"rename.solr.xml\");\n      File origXml = new File(solrHomeDirectory, \"solr.xml\");\n\n      cc.persistFile(persistXml);\n      String[] persistList = getAllNodes(persistXml);\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String name = \"@name='\" + which + \"'\";\n\n        if (persistList[idx].contains(name)) {\n          if (persistList[idx].contains(\"@schema='schema-tiny.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"schema-tiny.xml\", \"${schema:schema-tiny.xml}\");\n          } else if (persistList[idx].contains(\"@config='solrconfig-minimal.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"solrconfig-minimal.xml\", \"${solrconfig:solrconfig-minimal.xml}\");\n          } else if (persistList[idx].contains(\"@instanceDir=\")) {\n            expressions[idx] = persistList[idx].replaceFirst(\"instanceDir\\\\='.*?'\", \"instanceDir='\" + which + \"'\");\n          } else {\n            expressions[idx] = persistList[idx];\n          }\n        } else {\n          expressions[idx] = persistList[idx];\n        }\n      }\n\n      assertXmlFile(origXml, expressions);\n\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","bugFix":["dc6e48afbb50ae0a22fa76e226f04fd585532938"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2eea68c999cd25f09e15e71eb2fd57b17f5eca59","date":1371837918,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestUnloadCreate(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestUnloadCreate(String).mjava","sourceNew":"  private void doTestUnloadCreate(String which) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.UNLOAD.toString(),\n              CoreAdminParams.CORE, which),\n              resp);\n      assertNull(\"Exception on unload\", resp.getException());\n\n      persistContainedInOrig(cc, new File(solrHomeDirectory, \"unloadcreate1.solr.xml\"));\n\n      String instPath = new File(solrHomeDirectory, which).getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath,\n              CoreAdminParams.NAME, which),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      File persistXml = new File(solrHomeDirectory, \"rename.solr.xml\");\n      File origXml = new File(solrHomeDirectory, \"solr.xml\");\n\n      cc.persistFile(persistXml);\n      String[] persistList = getAllNodes(persistXml);\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String name = \"@name='\" + which + \"'\";\n\n        if (persistList[idx].contains(name)) {\n          if (persistList[idx].contains(\"@schema='schema.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"schema.xml\", \"${schema:schema.xml}\");\n          } else if (persistList[idx].contains(\"@config='solrconfig.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"solrconfig.xml\", \"${solrconfig:solrconfig.xml}\");\n          } else if (persistList[idx].contains(\"@instanceDir=\")) {\n            expressions[idx] = persistList[idx].replaceFirst(\"instanceDir\\\\='.*?'\", \"instanceDir='\" + which + \"'\");\n          } else {\n            expressions[idx] = persistList[idx];\n          }\n        } else {\n          expressions[idx] = persistList[idx];\n        }\n      }\n\n      assertXmlFile(origXml, expressions);\n\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestUnloadCreate(String which) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.UNLOAD.toString(),\n              CoreAdminParams.CORE, which),\n              resp);\n      assertNull(\"Exception on unload\", resp.getException());\n\n      origMatchesPersist(cc, new File(solrHomeDirectory, \"unloadcreate1.solr.xml\"));\n\n      String instPath = new File(solrHomeDirectory, which).getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath,\n              CoreAdminParams.NAME, which),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      File persistXml = new File(solrHomeDirectory, \"rename.solr.xml\");\n      File origXml = new File(solrHomeDirectory, \"solr.xml\");\n\n      cc.persistFile(persistXml);\n      String[] persistList = getAllNodes(persistXml);\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String name = \"@name='\" + which + \"'\";\n\n        if (persistList[idx].contains(name)) {\n          if (persistList[idx].contains(\"@schema='schema.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"schema.xml\", \"${schema:schema.xml}\");\n          } else if (persistList[idx].contains(\"@config='solrconfig.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"solrconfig.xml\", \"${solrconfig:solrconfig.xml}\");\n          } else if (persistList[idx].contains(\"@instanceDir=\")) {\n            expressions[idx] = persistList[idx].replaceFirst(\"instanceDir\\\\='.*?'\", \"instanceDir='\" + which + \"'\");\n          } else {\n            expressions[idx] = persistList[idx];\n          }\n        } else {\n          expressions[idx] = persistList[idx];\n        }\n      }\n\n      assertXmlFile(origXml, expressions);\n\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestUnloadCreate(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestUnloadCreate(String).mjava","sourceNew":"  private void doTestUnloadCreate(String which) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.UNLOAD.toString(),\n              CoreAdminParams.CORE, which),\n              resp);\n      assertNull(\"Exception on unload\", resp.getException());\n\n      persistContainedInOrig(cc, new File(solrHomeDirectory, \"unloadcreate1.solr.xml\"));\n\n      String instPath = new File(solrHomeDirectory, which).getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath,\n              CoreAdminParams.NAME, which),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      File persistXml = new File(solrHomeDirectory, \"rename.solr.xml\");\n      File origXml = new File(solrHomeDirectory, \"solr.xml\");\n\n      cc.persistFile(persistXml);\n      String[] persistList = getAllNodes(persistXml);\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String name = \"@name='\" + which + \"'\";\n\n        if (persistList[idx].contains(name)) {\n          if (persistList[idx].contains(\"@schema='schema.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"schema.xml\", \"${schema:schema.xml}\");\n          } else if (persistList[idx].contains(\"@config='solrconfig.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"solrconfig.xml\", \"${solrconfig:solrconfig.xml}\");\n          } else if (persistList[idx].contains(\"@instanceDir=\")) {\n            expressions[idx] = persistList[idx].replaceFirst(\"instanceDir\\\\='.*?'\", \"instanceDir='\" + which + \"/'\");\n          } else {\n            expressions[idx] = persistList[idx];\n          }\n        } else {\n          expressions[idx] = persistList[idx];\n        }\n      }\n\n      assertXmlFile(origXml, expressions);\n\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestUnloadCreate(String which) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.UNLOAD.toString(),\n              CoreAdminParams.CORE, which),\n              resp);\n      assertNull(\"Exception on unload\", resp.getException());\n\n      persistContainedInOrig(cc, new File(solrHomeDirectory, \"unloadcreate1.solr.xml\"));\n\n      String instPath = new File(solrHomeDirectory, which).getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath,\n              CoreAdminParams.NAME, which),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      File persistXml = new File(solrHomeDirectory, \"rename.solr.xml\");\n      File origXml = new File(solrHomeDirectory, \"solr.xml\");\n\n      cc.persistFile(persistXml);\n      String[] persistList = getAllNodes(persistXml);\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String name = \"@name='\" + which + \"'\";\n\n        if (persistList[idx].contains(name)) {\n          if (persistList[idx].contains(\"@schema='schema.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"schema.xml\", \"${schema:schema.xml}\");\n          } else if (persistList[idx].contains(\"@config='solrconfig.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"solrconfig.xml\", \"${solrconfig:solrconfig.xml}\");\n          } else if (persistList[idx].contains(\"@instanceDir=\")) {\n            expressions[idx] = persistList[idx].replaceFirst(\"instanceDir\\\\='.*?'\", \"instanceDir='\" + which + \"'\");\n          } else {\n            expressions[idx] = persistList[idx];\n          }\n        } else {\n          expressions[idx] = persistList[idx];\n        }\n      }\n\n      assertXmlFile(origXml, expressions);\n\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestUnloadCreate(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestUnloadCreate(String).mjava","sourceNew":"  private void doTestUnloadCreate(String which) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.UNLOAD.toString(),\n              CoreAdminParams.CORE, which),\n              resp);\n      assertNull(\"Exception on unload\", resp.getException());\n\n      persistContainedInOrig(cc, new File(solrHomeDirectory, \"unloadcreate1.solr.xml\"));\n\n      String instPath = new File(solrHomeDirectory, which).getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath,\n              CoreAdminParams.NAME, which),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      File persistXml = new File(solrHomeDirectory, \"rename.solr.xml\");\n      File origXml = new File(solrHomeDirectory, \"solr.xml\");\n\n      cc.persistFile(persistXml);\n      String[] persistList = getAllNodes(persistXml);\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String name = \"@name='\" + which + \"'\";\n\n        if (persistList[idx].contains(name)) {\n          if (persistList[idx].contains(\"@schema='schema.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"schema.xml\", \"${schema:schema.xml}\");\n          } else if (persistList[idx].contains(\"@config='solrconfig.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"solrconfig.xml\", \"${solrconfig:solrconfig.xml}\");\n          } else if (persistList[idx].contains(\"@instanceDir=\")) {\n            expressions[idx] = persistList[idx].replaceFirst(\"instanceDir\\\\='.*?'\", \"instanceDir='\" + which + \"'\");\n          } else {\n            expressions[idx] = persistList[idx];\n          }\n        } else {\n          expressions[idx] = persistList[idx];\n        }\n      }\n\n      assertXmlFile(origXml, expressions);\n\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestUnloadCreate(String which) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.UNLOAD.toString(),\n              CoreAdminParams.CORE, which),\n              resp);\n      assertNull(\"Exception on unload\", resp.getException());\n\n      persistContainedInOrig(cc, new File(solrHomeDirectory, \"unloadcreate1.solr.xml\"));\n\n      String instPath = new File(solrHomeDirectory, which).getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath,\n              CoreAdminParams.NAME, which),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      File persistXml = new File(solrHomeDirectory, \"rename.solr.xml\");\n      File origXml = new File(solrHomeDirectory, \"solr.xml\");\n\n      cc.persistFile(persistXml);\n      String[] persistList = getAllNodes(persistXml);\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String name = \"@name='\" + which + \"'\";\n\n        if (persistList[idx].contains(name)) {\n          if (persistList[idx].contains(\"@schema='schema.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"schema.xml\", \"${schema:schema.xml}\");\n          } else if (persistList[idx].contains(\"@config='solrconfig.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"solrconfig.xml\", \"${solrconfig:solrconfig.xml}\");\n          } else if (persistList[idx].contains(\"@instanceDir=\")) {\n            expressions[idx] = persistList[idx].replaceFirst(\"instanceDir\\\\='.*?'\", \"instanceDir='\" + which + \"/'\");\n          } else {\n            expressions[idx] = persistList[idx];\n          }\n        } else {\n          expressions[idx] = persistList[idx];\n        }\n      }\n\n      assertXmlFile(origXml, expressions);\n\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestUnloadCreate(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestUnloadCreate(String).mjava","sourceNew":"  private void doTestUnloadCreate(String which) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.UNLOAD.toString(),\n              CoreAdminParams.CORE, which),\n              resp);\n      assertNull(\"Exception on unload\", resp.getException());\n\n      persistContainedInOrig(cc, new File(solrHomeDirectory, \"unloadcreate1.solr.xml\"));\n\n      String instPath = new File(solrHomeDirectory, which).getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath,\n              CoreAdminParams.NAME, which),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      File persistXml = new File(solrHomeDirectory, \"rename.solr.xml\");\n      File origXml = new File(solrHomeDirectory, \"solr.xml\");\n\n      cc.persistFile(persistXml);\n      String[] persistList = getAllNodes(persistXml);\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String name = \"@name='\" + which + \"'\";\n\n        if (persistList[idx].contains(name)) {\n          if (persistList[idx].contains(\"@schema='schema.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"schema.xml\", \"${schema:schema.xml}\");\n          } else if (persistList[idx].contains(\"@config='solrconfig.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"solrconfig.xml\", \"${solrconfig:solrconfig.xml}\");\n          } else if (persistList[idx].contains(\"@instanceDir=\")) {\n            expressions[idx] = persistList[idx].replaceFirst(\"instanceDir\\\\='.*?'\", \"instanceDir='\" + which + \"/'\");\n          } else {\n            expressions[idx] = persistList[idx];\n          }\n        } else {\n          expressions[idx] = persistList[idx];\n        }\n      }\n\n      assertXmlFile(origXml, expressions);\n\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestUnloadCreate(String which) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.UNLOAD.toString(),\n              CoreAdminParams.CORE, which),\n              resp);\n      assertNull(\"Exception on unload\", resp.getException());\n\n      persistContainedInOrig(cc, new File(solrHomeDirectory, \"unloadcreate1.solr.xml\"));\n\n      String instPath = new File(solrHomeDirectory, which).getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath,\n              CoreAdminParams.NAME, which),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      File persistXml = new File(solrHomeDirectory, \"rename.solr.xml\");\n      File origXml = new File(solrHomeDirectory, \"solr.xml\");\n\n      cc.persistFile(persistXml);\n      String[] persistList = getAllNodes(persistXml);\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String name = \"@name='\" + which + \"'\";\n\n        if (persistList[idx].contains(name)) {\n          if (persistList[idx].contains(\"@schema='schema.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"schema.xml\", \"${schema:schema.xml}\");\n          } else if (persistList[idx].contains(\"@config='solrconfig.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"solrconfig.xml\", \"${solrconfig:solrconfig.xml}\");\n          } else if (persistList[idx].contains(\"@instanceDir=\")) {\n            expressions[idx] = persistList[idx].replaceFirst(\"instanceDir\\\\='.*?'\", \"instanceDir='\" + which + \"'\");\n          } else {\n            expressions[idx] = persistList[idx];\n          }\n        } else {\n          expressions[idx] = persistList[idx];\n        }\n      }\n\n      assertXmlFile(origXml, expressions);\n\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestUnloadCreate(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestUnloadCreate(String).mjava","sourceNew":"  private void doTestUnloadCreate(String which) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.UNLOAD.toString(),\n              CoreAdminParams.CORE, which),\n              resp);\n      assertNull(\"Exception on unload\", resp.getException());\n\n      //origMatchesPersist(cc, new File(solrHomeDirectory, \"unloadcreate1.solr.xml\"));\n\n      String instPath = new File(solrHomeDirectory, which).getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath,\n              CoreAdminParams.NAME, which),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      String[] persistList = getAllNodes();\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String name = \"@name='\" + which + \"'\";\n\n        if (persistList[idx].contains(name)) {\n          if (persistList[idx].contains(\"@schema='schema.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"schema.xml\", \"${schema:schema.xml}\");\n          } else if (persistList[idx].contains(\"@config='solrconfig.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"solrconfig.xml\", \"${solrconfig:solrconfig.xml}\");\n          } else if (persistList[idx].contains(\"@instanceDir=\")) {\n            expressions[idx] = persistList[idx].replaceFirst(\"instanceDir\\\\='.*?'\", \"instanceDir='\" + which + \"/'\");\n          } else {\n            expressions[idx] = persistList[idx];\n          }\n        } else {\n          expressions[idx] = persistList[idx];\n        }\n      }\n\n      //assertXmlFile(origXml, expressions);\n      TestHarness.validateXPath(SOLR_XML_LOTS_SYSVARS, expressions);\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestUnloadCreate(String which) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.UNLOAD.toString(),\n              CoreAdminParams.CORE, which),\n              resp);\n      assertNull(\"Exception on unload\", resp.getException());\n\n      persistContainedInOrig(cc, new File(solrHomeDirectory, \"unloadcreate1.solr.xml\"));\n\n      String instPath = new File(solrHomeDirectory, which).getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath,\n              CoreAdminParams.NAME, which),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      File persistXml = new File(solrHomeDirectory, \"rename.solr.xml\");\n      File origXml = new File(solrHomeDirectory, \"solr.xml\");\n\n      cc.persistFile(persistXml);\n      String[] persistList = getAllNodes(persistXml);\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String name = \"@name='\" + which + \"'\";\n\n        if (persistList[idx].contains(name)) {\n          if (persistList[idx].contains(\"@schema='schema.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"schema.xml\", \"${schema:schema.xml}\");\n          } else if (persistList[idx].contains(\"@config='solrconfig.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"solrconfig.xml\", \"${solrconfig:solrconfig.xml}\");\n          } else if (persistList[idx].contains(\"@instanceDir=\")) {\n            expressions[idx] = persistList[idx].replaceFirst(\"instanceDir\\\\='.*?'\", \"instanceDir='\" + which + \"/'\");\n          } else {\n            expressions[idx] = persistList[idx];\n          }\n        } else {\n          expressions[idx] = persistList[idx];\n        }\n      }\n\n      assertXmlFile(origXml, expressions);\n\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestUnloadCreate(String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestUnloadCreate(String which) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.UNLOAD.toString(),\n              CoreAdminParams.CORE, which),\n              resp);\n      assertNull(\"Exception on unload\", resp.getException());\n\n      //origMatchesPersist(cc, new File(solrHomeDirectory, \"unloadcreate1.solr.xml\"));\n\n      String instPath = new File(solrHomeDirectory, which).getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath,\n              CoreAdminParams.NAME, which),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      String[] persistList = getAllNodes();\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String name = \"@name='\" + which + \"'\";\n\n        if (persistList[idx].contains(name)) {\n          if (persistList[idx].contains(\"@schema='schema.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"schema.xml\", \"${schema:schema.xml}\");\n          } else if (persistList[idx].contains(\"@config='solrconfig.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"solrconfig.xml\", \"${solrconfig:solrconfig.xml}\");\n          } else if (persistList[idx].contains(\"@instanceDir=\")) {\n            expressions[idx] = persistList[idx].replaceFirst(\"instanceDir\\\\='.*?'\", \"instanceDir='\" + which + \"/'\");\n          } else {\n            expressions[idx] = persistList[idx];\n          }\n        } else {\n          expressions[idx] = persistList[idx];\n        }\n      }\n\n      //assertXmlFile(origXml, expressions);\n      TestHarness.validateXPath(SOLR_XML_LOTS_SYSVARS, expressions);\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doTestUnloadCreate(String).mjava","sourceNew":null,"sourceOld":"  private void doTestUnloadCreate(String which) throws Exception {\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.UNLOAD.toString(),\n              CoreAdminParams.CORE, which),\n              resp);\n      assertNull(\"Exception on unload\", resp.getException());\n\n      //origMatchesPersist(cc, new File(solrHomeDirectory, \"unloadcreate1.solr.xml\"));\n\n      String instPath = new File(solrHomeDirectory, which).getAbsolutePath();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.CREATE.toString(),\n              CoreAdminParams.INSTANCE_DIR, instPath,\n              CoreAdminParams.NAME, which),\n              resp);\n      assertNull(\"Exception on create\", resp.getException());\n\n      String[] persistList = getAllNodes();\n      String[] expressions = new String[persistList.length];\n\n      // Now manually change the names back and it should match exactly to the original XML.\n      for (int idx = 0; idx < persistList.length; ++idx) {\n        String name = \"@name='\" + which + \"'\";\n\n        if (persistList[idx].contains(name)) {\n          if (persistList[idx].contains(\"@schema='schema.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"schema.xml\", \"${schema:schema.xml}\");\n          } else if (persistList[idx].contains(\"@config='solrconfig.xml'\")) {\n            expressions[idx] = persistList[idx].replace(\"solrconfig.xml\", \"${solrconfig:solrconfig.xml}\");\n          } else if (persistList[idx].contains(\"@instanceDir=\")) {\n            expressions[idx] = persistList[idx].replaceFirst(\"instanceDir\\\\='.*?'\", \"instanceDir='\" + which + \"/'\");\n          } else {\n            expressions[idx] = persistList[idx];\n          }\n        } else {\n          expressions[idx] = persistList[idx];\n        }\n      }\n\n      //assertXmlFile(origXml, expressions);\n      TestHarness.validateXPath(SOLR_XML_LOTS_SYSVARS, expressions);\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7116474e2e390259937401cf928323e0cbc75e60":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"dc6e48afbb50ae0a22fa76e226f04fd585532938":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["7116474e2e390259937401cf928323e0cbc75e60"],"d264f386d864b5751209060e8886ca9845f70469":["2eea68c999cd25f09e15e71eb2fd57b17f5eca59"],"2eea68c999cd25f09e15e71eb2fd57b17f5eca59":["96a802acd838449b6936d34e464baeeb82f9ef54"],"96a802acd838449b6936d34e464baeeb82f9ef54":["dc6e48afbb50ae0a22fa76e226f04fd585532938"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"]},"commit2Childs":{"7116474e2e390259937401cf928323e0cbc75e60":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"dc6e48afbb50ae0a22fa76e226f04fd585532938":["96a802acd838449b6936d34e464baeeb82f9ef54"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dc6e48afbb50ae0a22fa76e226f04fd585532938","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["7116474e2e390259937401cf928323e0cbc75e60"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"2eea68c999cd25f09e15e71eb2fd57b17f5eca59":["d264f386d864b5751209060e8886ca9845f70469"],"96a802acd838449b6936d34e464baeeb82f9ef54":["2eea68c999cd25f09e15e71eb2fd57b17f5eca59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}