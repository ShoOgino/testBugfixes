{"path":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#setLinear(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#setLinear(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum#setLinear(int).mjava","sourceNew":"  /**\n   * Sets the enum to operate in linear fashion, as we have found\n   * a looping transition at position: we set an upper bound and \n   * act like a TermRangeQuery for this portion of the term space.\n   */\n  private void setLinear(int position) {\n    assert linear == false;\n    \n    int state = runAutomaton.getInitialState();\n    int maxInterval = 0xff;\n    for (int i = 0; i < position; i++) {\n      state = runAutomaton.step(state, seekBytesRef.bytes[i] & 0xff);\n      assert state >= 0: \"state=\" + state;\n    }\n    for (int i = 0; i < allTransitions[state].length; i++) {\n      Transition t = allTransitions[state][i];\n      if (t.getMin() <= (seekBytesRef.bytes[position] & 0xff) && \n          (seekBytesRef.bytes[position] & 0xff) <= t.getMax()) {\n        maxInterval = t.getMax();\n        break;\n      }\n    }\n    // 0xff terms don't get the optimization... not worth the trouble.\n    if (maxInterval != 0xff)\n      maxInterval++;\n    int length = position + 1; /* position + maxTransition */\n    if (linearUpperBound.bytes.length < length)\n      linearUpperBound.bytes = new byte[length];\n    System.arraycopy(seekBytesRef.bytes, 0, linearUpperBound.bytes, 0, position);\n    linearUpperBound.bytes[position] = (byte) maxInterval;\n    linearUpperBound.length = length;\n    \n    linear = true;\n  }\n\n","sourceOld":"  /**\n   * Sets the enum to operate in linear fashion, as we have found\n   * a looping transition at position: we set an upper bound and \n   * act like a TermRangeQuery for this portion of the term space.\n   */\n  private void setLinear(int position) {\n    assert linear == false;\n    \n    int state = runAutomaton.getInitialState();\n    int maxInterval = 0xff;\n    for (int i = 0; i < position; i++) {\n      state = runAutomaton.step(state, seekBytesRef.bytes[i] & 0xff);\n      assert state >= 0: \"state=\" + state;\n    }\n    for (int i = 0; i < allTransitions[state].length; i++) {\n      Transition t = allTransitions[state][i];\n      if (t.getMin() <= (seekBytesRef.bytes[position] & 0xff) && \n          (seekBytesRef.bytes[position] & 0xff) <= t.getMax()) {\n        maxInterval = t.getMax();\n        break;\n      }\n    }\n    // 0xff terms don't get the optimization... not worth the trouble.\n    if (maxInterval != 0xff)\n      maxInterval++;\n    int length = position + 1; /* position + maxTransition */\n    if (linearUpperBound.bytes.length < length)\n      linearUpperBound.bytes = new byte[length];\n    System.arraycopy(seekBytesRef.bytes, 0, linearUpperBound.bytes, 0, position);\n    linearUpperBound.bytes[position] = (byte) maxInterval;\n    linearUpperBound.length = length;\n    \n    linear = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#setLinear(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#setLinear(int).mjava","sourceNew":"  /**\n   * Sets the enum to operate in linear fashion, as we have found\n   * a looping transition at position: we set an upper bound and \n   * act like a TermRangeQuery for this portion of the term space.\n   */\n  private void setLinear(int position) {\n    assert linear == false;\n    \n    int state = runAutomaton.getInitialState();\n    assert state == 0;\n    int maxInterval = 0xff;\n    //System.out.println(\"setLinear pos=\" + position + \" seekbytesRef=\" + seekBytesRef);\n    for (int i = 0; i < position; i++) {\n      state = runAutomaton.step(state, seekBytesRef.bytes[i] & 0xff);\n      assert state >= 0: \"state=\" + state;\n    }\n    final int numTransitions = lightAutomaton.getNumTransitions(state);\n    lightAutomaton.initTransition(state, transition);\n    for (int i = 0; i < numTransitions; i++) {\n      lightAutomaton.getNextTransition(transition);\n      if (transition.min <= (seekBytesRef.bytes[position] & 0xff) && \n          (seekBytesRef.bytes[position] & 0xff) <= transition.max) {\n        maxInterval = transition.max;\n        break;\n      }\n    }\n    // 0xff terms don't get the optimization... not worth the trouble.\n    if (maxInterval != 0xff)\n      maxInterval++;\n    int length = position + 1; /* position + maxTransition */\n    if (linearUpperBound.bytes.length < length)\n      linearUpperBound.bytes = new byte[length];\n    System.arraycopy(seekBytesRef.bytes, 0, linearUpperBound.bytes, 0, position);\n    linearUpperBound.bytes[position] = (byte) maxInterval;\n    linearUpperBound.length = length;\n    \n    linear = true;\n  }\n\n","sourceOld":"  /**\n   * Sets the enum to operate in linear fashion, as we have found\n   * a looping transition at position: we set an upper bound and \n   * act like a TermRangeQuery for this portion of the term space.\n   */\n  private void setLinear(int position) {\n    assert linear == false;\n    \n    int state = runAutomaton.getInitialState();\n    int maxInterval = 0xff;\n    for (int i = 0; i < position; i++) {\n      state = runAutomaton.step(state, seekBytesRef.bytes[i] & 0xff);\n      assert state >= 0: \"state=\" + state;\n    }\n    for (int i = 0; i < allTransitions[state].length; i++) {\n      Transition t = allTransitions[state][i];\n      if (t.getMin() <= (seekBytesRef.bytes[position] & 0xff) && \n          (seekBytesRef.bytes[position] & 0xff) <= t.getMax()) {\n        maxInterval = t.getMax();\n        break;\n      }\n    }\n    // 0xff terms don't get the optimization... not worth the trouble.\n    if (maxInterval != 0xff)\n      maxInterval++;\n    int length = position + 1; /* position + maxTransition */\n    if (linearUpperBound.bytes.length < length)\n      linearUpperBound.bytes = new byte[length];\n    System.arraycopy(seekBytesRef.bytes, 0, linearUpperBound.bytes, 0, position);\n    linearUpperBound.bytes[position] = (byte) maxInterval;\n    linearUpperBound.length = length;\n    \n    linear = true;\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#setLinear(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#setLinear(int).mjava","sourceNew":"  /**\n   * Sets the enum to operate in linear fashion, as we have found\n   * a looping transition at position: we set an upper bound and \n   * act like a TermRangeQuery for this portion of the term space.\n   */\n  private void setLinear(int position) {\n    assert linear == false;\n    \n    int state = runAutomaton.getInitialState();\n    assert state == 0;\n    int maxInterval = 0xff;\n    //System.out.println(\"setLinear pos=\" + position + \" seekbytesRef=\" + seekBytesRef);\n    for (int i = 0; i < position; i++) {\n      state = runAutomaton.step(state, seekBytesRef.bytes[i] & 0xff);\n      assert state >= 0: \"state=\" + state;\n    }\n    final int numTransitions = automaton.getNumTransitions(state);\n    automaton.initTransition(state, transition);\n    for (int i = 0; i < numTransitions; i++) {\n      automaton.getNextTransition(transition);\n      if (transition.min <= (seekBytesRef.bytes[position] & 0xff) && \n          (seekBytesRef.bytes[position] & 0xff) <= transition.max) {\n        maxInterval = transition.max;\n        break;\n      }\n    }\n    // 0xff terms don't get the optimization... not worth the trouble.\n    if (maxInterval != 0xff)\n      maxInterval++;\n    int length = position + 1; /* position + maxTransition */\n    if (linearUpperBound.bytes.length < length)\n      linearUpperBound.bytes = new byte[length];\n    System.arraycopy(seekBytesRef.bytes, 0, linearUpperBound.bytes, 0, position);\n    linearUpperBound.bytes[position] = (byte) maxInterval;\n    linearUpperBound.length = length;\n    \n    linear = true;\n  }\n\n","sourceOld":"  /**\n   * Sets the enum to operate in linear fashion, as we have found\n   * a looping transition at position: we set an upper bound and \n   * act like a TermRangeQuery for this portion of the term space.\n   */\n  private void setLinear(int position) {\n    assert linear == false;\n    \n    int state = runAutomaton.getInitialState();\n    assert state == 0;\n    int maxInterval = 0xff;\n    //System.out.println(\"setLinear pos=\" + position + \" seekbytesRef=\" + seekBytesRef);\n    for (int i = 0; i < position; i++) {\n      state = runAutomaton.step(state, seekBytesRef.bytes[i] & 0xff);\n      assert state >= 0: \"state=\" + state;\n    }\n    final int numTransitions = lightAutomaton.getNumTransitions(state);\n    lightAutomaton.initTransition(state, transition);\n    for (int i = 0; i < numTransitions; i++) {\n      lightAutomaton.getNextTransition(transition);\n      if (transition.min <= (seekBytesRef.bytes[position] & 0xff) && \n          (seekBytesRef.bytes[position] & 0xff) <= transition.max) {\n        maxInterval = transition.max;\n        break;\n      }\n    }\n    // 0xff terms don't get the optimization... not worth the trouble.\n    if (maxInterval != 0xff)\n      maxInterval++;\n    int length = position + 1; /* position + maxTransition */\n    if (linearUpperBound.bytes.length < length)\n      linearUpperBound.bytes = new byte[length];\n    System.arraycopy(seekBytesRef.bytes, 0, linearUpperBound.bytes, 0, position);\n    linearUpperBound.bytes[position] = (byte) maxInterval;\n    linearUpperBound.length = length;\n    \n    linear = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#setLinear(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#setLinear(int).mjava","sourceNew":"  /**\n   * Sets the enum to operate in linear fashion, as we have found\n   * a looping transition at position: we set an upper bound and \n   * act like a TermRangeQuery for this portion of the term space.\n   */\n  private void setLinear(int position) {\n    assert linear == false;\n    \n    int state = runAutomaton.getInitialState();\n    assert state == 0;\n    int maxInterval = 0xff;\n    //System.out.println(\"setLinear pos=\" + position + \" seekbytesRef=\" + seekBytesRef);\n    for (int i = 0; i < position; i++) {\n      state = runAutomaton.step(state, seekBytesRef.bytes[i] & 0xff);\n      assert state >= 0: \"state=\" + state;\n    }\n    final int numTransitions = automaton.getNumTransitions(state);\n    automaton.initTransition(state, transition);\n    for (int i = 0; i < numTransitions; i++) {\n      automaton.getNextTransition(transition);\n      if (transition.min <= (seekBytesRef.bytes[position] & 0xff) && \n          (seekBytesRef.bytes[position] & 0xff) <= transition.max) {\n        maxInterval = transition.max;\n        break;\n      }\n    }\n    // 0xff terms don't get the optimization... not worth the trouble.\n    if (maxInterval != 0xff)\n      maxInterval++;\n    int length = position + 1; /* position + maxTransition */\n    if (linearUpperBound.bytes.length < length)\n      linearUpperBound.bytes = new byte[length];\n    System.arraycopy(seekBytesRef.bytes, 0, linearUpperBound.bytes, 0, position);\n    linearUpperBound.bytes[position] = (byte) maxInterval;\n    linearUpperBound.length = length;\n    \n    linear = true;\n  }\n\n","sourceOld":"  /**\n   * Sets the enum to operate in linear fashion, as we have found\n   * a looping transition at position: we set an upper bound and \n   * act like a TermRangeQuery for this portion of the term space.\n   */\n  private void setLinear(int position) {\n    assert linear == false;\n    \n    int state = runAutomaton.getInitialState();\n    int maxInterval = 0xff;\n    for (int i = 0; i < position; i++) {\n      state = runAutomaton.step(state, seekBytesRef.bytes[i] & 0xff);\n      assert state >= 0: \"state=\" + state;\n    }\n    for (int i = 0; i < allTransitions[state].length; i++) {\n      Transition t = allTransitions[state][i];\n      if (t.getMin() <= (seekBytesRef.bytes[position] & 0xff) && \n          (seekBytesRef.bytes[position] & 0xff) <= t.getMax()) {\n        maxInterval = t.getMax();\n        break;\n      }\n    }\n    // 0xff terms don't get the optimization... not worth the trouble.\n    if (maxInterval != 0xff)\n      maxInterval++;\n    int length = position + 1; /* position + maxTransition */\n    if (linearUpperBound.bytes.length < length)\n      linearUpperBound.bytes = new byte[length];\n    System.arraycopy(seekBytesRef.bytes, 0, linearUpperBound.bytes, 0, position);\n    linearUpperBound.bytes[position] = (byte) maxInterval;\n    linearUpperBound.length = length;\n    \n    linear = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#setLinear(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#setLinear(int).mjava","sourceNew":"  /**\n   * Sets the enum to operate in linear fashion, as we have found\n   * a looping transition at position: we set an upper bound and \n   * act like a TermRangeQuery for this portion of the term space.\n   */\n  private void setLinear(int position) {\n    assert linear == false;\n    \n    int state = runAutomaton.getInitialState();\n    assert state == 0;\n    int maxInterval = 0xff;\n    //System.out.println(\"setLinear pos=\" + position + \" seekbytesRef=\" + seekBytesRef);\n    for (int i = 0; i < position; i++) {\n      state = runAutomaton.step(state, seekBytesRef.byteAt(i) & 0xff);\n      assert state >= 0: \"state=\" + state;\n    }\n    final int numTransitions = automaton.getNumTransitions(state);\n    automaton.initTransition(state, transition);\n    for (int i = 0; i < numTransitions; i++) {\n      automaton.getNextTransition(transition);\n      if (transition.min <= (seekBytesRef.byteAt(position) & 0xff) && \n          (seekBytesRef.byteAt(position) & 0xff) <= transition.max) {\n        maxInterval = transition.max;\n        break;\n      }\n    }\n    // 0xff terms don't get the optimization... not worth the trouble.\n    if (maxInterval != 0xff)\n      maxInterval++;\n    int length = position + 1; /* position + maxTransition */\n    if (linearUpperBound.bytes.length < length)\n      linearUpperBound.bytes = new byte[length];\n    System.arraycopy(seekBytesRef.bytes(), 0, linearUpperBound.bytes, 0, position);\n    linearUpperBound.bytes[position] = (byte) maxInterval;\n    linearUpperBound.length = length;\n    \n    linear = true;\n  }\n\n","sourceOld":"  /**\n   * Sets the enum to operate in linear fashion, as we have found\n   * a looping transition at position: we set an upper bound and \n   * act like a TermRangeQuery for this portion of the term space.\n   */\n  private void setLinear(int position) {\n    assert linear == false;\n    \n    int state = runAutomaton.getInitialState();\n    assert state == 0;\n    int maxInterval = 0xff;\n    //System.out.println(\"setLinear pos=\" + position + \" seekbytesRef=\" + seekBytesRef);\n    for (int i = 0; i < position; i++) {\n      state = runAutomaton.step(state, seekBytesRef.bytes[i] & 0xff);\n      assert state >= 0: \"state=\" + state;\n    }\n    final int numTransitions = automaton.getNumTransitions(state);\n    automaton.initTransition(state, transition);\n    for (int i = 0; i < numTransitions; i++) {\n      automaton.getNextTransition(transition);\n      if (transition.min <= (seekBytesRef.bytes[position] & 0xff) && \n          (seekBytesRef.bytes[position] & 0xff) <= transition.max) {\n        maxInterval = transition.max;\n        break;\n      }\n    }\n    // 0xff terms don't get the optimization... not worth the trouble.\n    if (maxInterval != 0xff)\n      maxInterval++;\n    int length = position + 1; /* position + maxTransition */\n    if (linearUpperBound.bytes.length < length)\n      linearUpperBound.bytes = new byte[length];\n    System.arraycopy(seekBytesRef.bytes, 0, linearUpperBound.bytes, 0, position);\n    linearUpperBound.bytes[position] = (byte) maxInterval;\n    linearUpperBound.length = length;\n    \n    linear = true;\n  }\n\n","bugFix":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7543e96e2d4820e09334d36a699b998ed963f4f","date":1476121426,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#setLinear(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#setLinear(int).mjava","sourceNew":"  /**\n   * Sets the enum to operate in linear fashion, as we have found\n   * a looping transition at position: we set an upper bound and \n   * act like a TermRangeQuery for this portion of the term space.\n   */\n  private void setLinear(int position) {\n    assert linear == false;\n    \n    int state = 0;\n    assert state == 0;\n    int maxInterval = 0xff;\n    //System.out.println(\"setLinear pos=\" + position + \" seekbytesRef=\" + seekBytesRef);\n    for (int i = 0; i < position; i++) {\n      state = runAutomaton.step(state, seekBytesRef.byteAt(i) & 0xff);\n      assert state >= 0: \"state=\" + state;\n    }\n    final int numTransitions = automaton.getNumTransitions(state);\n    automaton.initTransition(state, transition);\n    for (int i = 0; i < numTransitions; i++) {\n      automaton.getNextTransition(transition);\n      if (transition.min <= (seekBytesRef.byteAt(position) & 0xff) && \n          (seekBytesRef.byteAt(position) & 0xff) <= transition.max) {\n        maxInterval = transition.max;\n        break;\n      }\n    }\n    // 0xff terms don't get the optimization... not worth the trouble.\n    if (maxInterval != 0xff)\n      maxInterval++;\n    int length = position + 1; /* position + maxTransition */\n    if (linearUpperBound.bytes.length < length)\n      linearUpperBound.bytes = new byte[length];\n    System.arraycopy(seekBytesRef.bytes(), 0, linearUpperBound.bytes, 0, position);\n    linearUpperBound.bytes[position] = (byte) maxInterval;\n    linearUpperBound.length = length;\n    \n    linear = true;\n  }\n\n","sourceOld":"  /**\n   * Sets the enum to operate in linear fashion, as we have found\n   * a looping transition at position: we set an upper bound and \n   * act like a TermRangeQuery for this portion of the term space.\n   */\n  private void setLinear(int position) {\n    assert linear == false;\n    \n    int state = runAutomaton.getInitialState();\n    assert state == 0;\n    int maxInterval = 0xff;\n    //System.out.println(\"setLinear pos=\" + position + \" seekbytesRef=\" + seekBytesRef);\n    for (int i = 0; i < position; i++) {\n      state = runAutomaton.step(state, seekBytesRef.byteAt(i) & 0xff);\n      assert state >= 0: \"state=\" + state;\n    }\n    final int numTransitions = automaton.getNumTransitions(state);\n    automaton.initTransition(state, transition);\n    for (int i = 0; i < numTransitions; i++) {\n      automaton.getNextTransition(transition);\n      if (transition.min <= (seekBytesRef.byteAt(position) & 0xff) && \n          (seekBytesRef.byteAt(position) & 0xff) <= transition.max) {\n        maxInterval = transition.max;\n        break;\n      }\n    }\n    // 0xff terms don't get the optimization... not worth the trouble.\n    if (maxInterval != 0xff)\n      maxInterval++;\n    int length = position + 1; /* position + maxTransition */\n    if (linearUpperBound.bytes.length < length)\n      linearUpperBound.bytes = new byte[length];\n    System.arraycopy(seekBytesRef.bytes(), 0, linearUpperBound.bytes, 0, position);\n    linearUpperBound.bytes[position] = (byte) maxInterval;\n    linearUpperBound.length = length;\n    \n    linear = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#setLinear(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#setLinear(int).mjava","sourceNew":"  /**\n   * Sets the enum to operate in linear fashion, as we have found\n   * a looping transition at position: we set an upper bound and \n   * act like a TermRangeQuery for this portion of the term space.\n   */\n  private void setLinear(int position) {\n    assert linear == false;\n    \n    int state = 0;\n    assert state == 0;\n    int maxInterval = 0xff;\n    //System.out.println(\"setLinear pos=\" + position + \" seekbytesRef=\" + seekBytesRef);\n    for (int i = 0; i < position; i++) {\n      state = runAutomaton.step(state, seekBytesRef.byteAt(i) & 0xff);\n      assert state >= 0: \"state=\" + state;\n    }\n    final int numTransitions = automaton.getNumTransitions(state);\n    automaton.initTransition(state, transition);\n    for (int i = 0; i < numTransitions; i++) {\n      automaton.getNextTransition(transition);\n      if (transition.min <= (seekBytesRef.byteAt(position) & 0xff) && \n          (seekBytesRef.byteAt(position) & 0xff) <= transition.max) {\n        maxInterval = transition.max;\n        break;\n      }\n    }\n    // 0xff terms don't get the optimization... not worth the trouble.\n    if (maxInterval != 0xff)\n      maxInterval++;\n    int length = position + 1; /* position + maxTransition */\n    if (linearUpperBound.bytes.length < length)\n      linearUpperBound.bytes = new byte[length];\n    System.arraycopy(seekBytesRef.bytes(), 0, linearUpperBound.bytes, 0, position);\n    linearUpperBound.bytes[position] = (byte) maxInterval;\n    linearUpperBound.length = length;\n    \n    linear = true;\n  }\n\n","sourceOld":"  /**\n   * Sets the enum to operate in linear fashion, as we have found\n   * a looping transition at position: we set an upper bound and \n   * act like a TermRangeQuery for this portion of the term space.\n   */\n  private void setLinear(int position) {\n    assert linear == false;\n    \n    int state = runAutomaton.getInitialState();\n    assert state == 0;\n    int maxInterval = 0xff;\n    //System.out.println(\"setLinear pos=\" + position + \" seekbytesRef=\" + seekBytesRef);\n    for (int i = 0; i < position; i++) {\n      state = runAutomaton.step(state, seekBytesRef.byteAt(i) & 0xff);\n      assert state >= 0: \"state=\" + state;\n    }\n    final int numTransitions = automaton.getNumTransitions(state);\n    automaton.initTransition(state, transition);\n    for (int i = 0; i < numTransitions; i++) {\n      automaton.getNextTransition(transition);\n      if (transition.min <= (seekBytesRef.byteAt(position) & 0xff) && \n          (seekBytesRef.byteAt(position) & 0xff) <= transition.max) {\n        maxInterval = transition.max;\n        break;\n      }\n    }\n    // 0xff terms don't get the optimization... not worth the trouble.\n    if (maxInterval != 0xff)\n      maxInterval++;\n    int length = position + 1; /* position + maxTransition */\n    if (linearUpperBound.bytes.length < length)\n      linearUpperBound.bytes = new byte[length];\n    System.arraycopy(seekBytesRef.bytes(), 0, linearUpperBound.bytes, 0, position);\n    linearUpperBound.bytes[position] = (byte) maxInterval;\n    linearUpperBound.length = length;\n    \n    linear = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20a5c56c8be07b6993c34c9f1a02fe0ff4cc6f14","date":1582882926,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#setLinear(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#setLinear(int).mjava","sourceNew":"  /**\n   * Sets the enum to operate in linear fashion, as we have found\n   * a looping transition at position: we set an upper bound and \n   * act like a TermRangeQuery for this portion of the term space.\n   */\n  private void setLinear(int position) {\n    assert linear == false;\n    \n    int state = 0;\n    int maxInterval = 0xff;\n    //System.out.println(\"setLinear pos=\" + position + \" seekbytesRef=\" + seekBytesRef);\n    for (int i = 0; i < position; i++) {\n      state = runAutomaton.step(state, seekBytesRef.byteAt(i) & 0xff);\n      assert state >= 0: \"state=\" + state;\n    }\n    final int numTransitions = automaton.getNumTransitions(state);\n    automaton.initTransition(state, transition);\n    for (int i = 0; i < numTransitions; i++) {\n      automaton.getNextTransition(transition);\n      if (transition.min <= (seekBytesRef.byteAt(position) & 0xff) && \n          (seekBytesRef.byteAt(position) & 0xff) <= transition.max) {\n        maxInterval = transition.max;\n        break;\n      }\n    }\n    // 0xff terms don't get the optimization... not worth the trouble.\n    if (maxInterval != 0xff)\n      maxInterval++;\n    int length = position + 1; /* position + maxTransition */\n    if (linearUpperBound.bytes.length < length) {\n      linearUpperBound.bytes = new byte[ArrayUtil.oversize(length, Byte.BYTES)];\n    }\n    System.arraycopy(seekBytesRef.bytes(), 0, linearUpperBound.bytes, 0, position);\n    linearUpperBound.bytes[position] = (byte) maxInterval;\n    linearUpperBound.length = length;\n    \n    linear = true;\n  }\n\n","sourceOld":"  /**\n   * Sets the enum to operate in linear fashion, as we have found\n   * a looping transition at position: we set an upper bound and \n   * act like a TermRangeQuery for this portion of the term space.\n   */\n  private void setLinear(int position) {\n    assert linear == false;\n    \n    int state = 0;\n    assert state == 0;\n    int maxInterval = 0xff;\n    //System.out.println(\"setLinear pos=\" + position + \" seekbytesRef=\" + seekBytesRef);\n    for (int i = 0; i < position; i++) {\n      state = runAutomaton.step(state, seekBytesRef.byteAt(i) & 0xff);\n      assert state >= 0: \"state=\" + state;\n    }\n    final int numTransitions = automaton.getNumTransitions(state);\n    automaton.initTransition(state, transition);\n    for (int i = 0; i < numTransitions; i++) {\n      automaton.getNextTransition(transition);\n      if (transition.min <= (seekBytesRef.byteAt(position) & 0xff) && \n          (seekBytesRef.byteAt(position) & 0xff) <= transition.max) {\n        maxInterval = transition.max;\n        break;\n      }\n    }\n    // 0xff terms don't get the optimization... not worth the trouble.\n    if (maxInterval != 0xff)\n      maxInterval++;\n    int length = position + 1; /* position + maxTransition */\n    if (linearUpperBound.bytes.length < length)\n      linearUpperBound.bytes = new byte[length];\n    System.arraycopy(seekBytesRef.bytes(), 0, linearUpperBound.bytes, 0, position);\n    linearUpperBound.bytes[position] = (byte) maxInterval;\n    linearUpperBound.length = length;\n    \n    linear = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b7543e96e2d4820e09334d36a699b998ed963f4f":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["5c84485629d80d203608e8975a1139de9933cc38"],"20a5c56c8be07b6993c34c9f1a02fe0ff4cc6f14":["b7543e96e2d4820e09334d36a699b998ed963f4f"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","b7543e96e2d4820e09334d36a699b998ed963f4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20a5c56c8be07b6993c34c9f1a02fe0ff4cc6f14"]},"commit2Childs":{"b7543e96e2d4820e09334d36a699b998ed963f4f":["20a5c56c8be07b6993c34c9f1a02fe0ff4cc6f14","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["b7543e96e2d4820e09334d36a699b998ed963f4f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5c84485629d80d203608e8975a1139de9933cc38":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"20a5c56c8be07b6993c34c9f1a02fe0ff4cc6f14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}