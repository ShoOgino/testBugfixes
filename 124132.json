{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/FieldMetadata#write(DataOutput).mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/FieldMetadata#write(DataOutput).mjava","pathOld":"/dev/null","sourceNew":"  public void write(DataOutput output) throws IOException {\n    assert dictionaryStartFP >= 0;\n    assert firstBlockStartFP >= 0;\n    assert lastBlockStartFP >= 0;\n    assert numTerms > 0 : \"There should be at least one term for field \" + fieldInfo.name + \": \" + numTerms;\n    assert firstBlockStartFP <= lastBlockStartFP : \"start: \" + firstBlockStartFP + \" end: \" + lastBlockStartFP;\n    assert lastTerm != null : \"you must set the last term\";\n\n    output.writeVInt(fieldInfo.number);\n\n    output.writeVInt(numTerms);\n    output.writeVInt(sumDocFreq);\n\n    if (fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0) {\n      assert sumTotalTermFreq >= sumDocFreq : \"sumTotalFQ: \" + sumTotalTermFreq + \" sumDocFQ: \" + sumDocFreq;\n      output.writeVInt(sumTotalTermFreq - sumDocFreq);\n    }\n\n    output.writeVInt(getDocCount());\n\n    output.writeVLong(dictionaryStartFP);\n    output.writeVLong(firstBlockStartFP);\n    output.writeVLong(lastBlockStartFP);\n\n    if (lastTerm.length > 0) {\n      output.writeVInt(lastTerm.length);\n      output.writeBytes(lastTerm.bytes, lastTerm.offset, lastTerm.length);\n    } else {\n      output.writeVInt(0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d28da8a459f5f0c930da7185c56d0c25edd3fbd1","date":1577783695,"type":4,"author":"Bruno Roustant","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/FieldMetadata#write(DataOutput).mjava","sourceNew":null,"sourceOld":"  public void write(DataOutput output) throws IOException {\n    assert dictionaryStartFP >= 0;\n    assert firstBlockStartFP >= 0;\n    assert lastBlockStartFP >= 0;\n    assert numTerms > 0 : \"There should be at least one term for field \" + fieldInfo.name + \": \" + numTerms;\n    assert firstBlockStartFP <= lastBlockStartFP : \"start: \" + firstBlockStartFP + \" end: \" + lastBlockStartFP;\n    assert lastTerm != null : \"you must set the last term\";\n\n    output.writeVInt(fieldInfo.number);\n\n    output.writeVInt(numTerms);\n    output.writeVInt(sumDocFreq);\n\n    if (fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0) {\n      assert sumTotalTermFreq >= sumDocFreq : \"sumTotalFQ: \" + sumTotalTermFreq + \" sumDocFQ: \" + sumDocFreq;\n      output.writeVInt(sumTotalTermFreq - sumDocFreq);\n    }\n\n    output.writeVInt(getDocCount());\n\n    output.writeVLong(dictionaryStartFP);\n    output.writeVLong(firstBlockStartFP);\n    output.writeVLong(lastBlockStartFP);\n\n    if (lastTerm.length > 0) {\n      output.writeVInt(lastTerm.length);\n      output.writeBytes(lastTerm.bytes, lastTerm.offset, lastTerm.length);\n    } else {\n      output.writeVInt(0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c606b777c4250f3f3f6f66d659c7c4c403679b71","date":1577958559,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/FieldMetadata#write(DataOutput).mjava","sourceNew":null,"sourceOld":"  public void write(DataOutput output) throws IOException {\n    assert dictionaryStartFP >= 0;\n    assert firstBlockStartFP >= 0;\n    assert lastBlockStartFP >= 0;\n    assert numTerms > 0 : \"There should be at least one term for field \" + fieldInfo.name + \": \" + numTerms;\n    assert firstBlockStartFP <= lastBlockStartFP : \"start: \" + firstBlockStartFP + \" end: \" + lastBlockStartFP;\n    assert lastTerm != null : \"you must set the last term\";\n\n    output.writeVInt(fieldInfo.number);\n\n    output.writeVInt(numTerms);\n    output.writeVInt(sumDocFreq);\n\n    if (fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0) {\n      assert sumTotalTermFreq >= sumDocFreq : \"sumTotalFQ: \" + sumTotalTermFreq + \" sumDocFQ: \" + sumDocFreq;\n      output.writeVInt(sumTotalTermFreq - sumDocFreq);\n    }\n\n    output.writeVInt(getDocCount());\n\n    output.writeVLong(dictionaryStartFP);\n    output.writeVLong(firstBlockStartFP);\n    output.writeVLong(lastBlockStartFP);\n\n    if (lastTerm.length > 0) {\n      output.writeVInt(lastTerm.length);\n      output.writeBytes(lastTerm.bytes, lastTerm.offset, lastTerm.length);\n    } else {\n      output.writeVInt(0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c606b777c4250f3f3f6f66d659c7c4c403679b71":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","d28da8a459f5f0c930da7185c56d0c25edd3fbd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d28da8a459f5f0c930da7185c56d0c25edd3fbd1":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d28da8a459f5f0c930da7185c56d0c25edd3fbd1"]},"commit2Childs":{"c606b777c4250f3f3f6f66d659c7c4c403679b71":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["c606b777c4250f3f3f6f66d659c7c4c403679b71","d28da8a459f5f0c930da7185c56d0c25edd3fbd1"],"d28da8a459f5f0c930da7185c56d0c25edd3fbd1":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}