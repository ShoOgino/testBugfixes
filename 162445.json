{"path":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    LogMergePolicy lmp = (LogMergePolicy) w.getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    LogMergePolicy lmp = (LogMergePolicy) w.getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    LogMergePolicy lmp = (LogMergePolicy) w.getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9","date":1270985469,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","date":1270996866,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","date":1271167458,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","date":1280297653,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(r,\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(r,\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n                                                                                                  0.1).setMaxBufferedDocs(maxBufferedDocs).setMergePolicy(newLogMergePolicy()));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n                                                                                                  0.1).setMaxBufferedDocs(maxBufferedDocs).setMergePolicy(newLogMergePolicy()));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n                                                                                                  0.1).setMaxBufferedDocs(maxBufferedDocs).setMergePolicy(newLogMergePolicy()));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n        0.1).setMaxBufferedDocs(maxBufferedDocs));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n                                                                                                  0.1).setMaxBufferedDocs(maxBufferedDocs).setMergePolicy(newLogMergePolicy()));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n                                                                                                  0.1).setMaxBufferedDocs(maxBufferedDocs).setMergePolicy(newLogMergePolicy()));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n                                                                                                  0.1).setMaxBufferedDocs(maxBufferedDocs).setMergePolicy(newLogMergePolicy()));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n                                                                                                  0.1).setMaxBufferedDocs(maxBufferedDocs).setMergePolicy(newLogMergePolicy()));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n                                                                                                  0.1).setMaxBufferedDocs(maxBufferedDocs).setMergePolicy(newLogMergePolicy()));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n                                                                                                  0.1).setMaxBufferedDocs(maxBufferedDocs).setMergePolicy(newLogMergePolicy()));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n                                                                                                  0.1).setMaxBufferedDocs(maxBufferedDocs).setMergePolicy(newLogMergePolicy()));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n                                                                                                  0.1).setMaxBufferedDocs(maxBufferedDocs).setMergePolicy(newLogMergePolicy()));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n                                                                                                  0.1).setMaxBufferedDocs(maxBufferedDocs).setMergePolicy(newLogMergePolicy()));\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n                                                                                                  0.1).setMaxBufferedDocs(maxBufferedDocs).setMergePolicy(newLogMergePolicy()));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n                                                                                                  0.1).setMaxBufferedDocs(maxBufferedDocs).setMergePolicy(newLogMergePolicy()));\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.forceMerge(1);\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n                                                                                                  0.1).setMaxBufferedDocs(maxBufferedDocs).setMergePolicy(newLogMergePolicy()));\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.optimize();\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandomIWReader(int,int,int,Directory).mjava","sourceNew":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n                                                                                                  0.1).setMaxBufferedDocs(maxBufferedDocs).setMergePolicy(newLogMergePolicy()));\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.forceMerge(1);\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","sourceOld":"  public DocsAndWriter indexRandomIWReader(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    IndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setRAMBufferSizeMB(\n                                                                                                  0.1).setMaxBufferedDocs(maxBufferedDocs).setMergePolicy(newLogMergePolicy()));\n    w.commit();\n    LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n    lmp.setUseCompoundFile(false);\n    lmp.setMergeFactor(mergeFactor);\n    /***\n        w.setMaxMergeDocs(Integer.MAX_VALUE);\n        w.setMaxFieldLength(10000);\n        w.setRAMBufferSizeMB(1);\n        w.setMergeFactor(10);\n    ***/\n\n    threads = new IndexingThread[nThreads];\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = new IndexingThread();\n      th.w = w;\n      th.base = 1000000*i;\n      th.range = range;\n      th.iterations = iterations;\n      threads[i] = th;\n    }\n\n    for (int i=0; i<threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i=0; i<threads.length; i++) {\n      threads[i].join();\n    }\n\n    // w.forceMerge(1);\n    //w.close();    \n\n    for (int i=0; i<threads.length; i++) {\n      IndexingThread th = threads[i];\n      synchronized(th) {\n        docs.putAll(th.docs);\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n    DocsAndWriter dw = new DocsAndWriter();\n    dw.docs = docs;\n    dw.writer = w;\n    return dw;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"c19f985e36a65cc969e8e564fe337a0d41512075":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c19f985e36a65cc969e8e564fe337a0d41512075"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"06584e6e98d592b34e1329b384182f368d2025e8":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["1f653cfcf159baeaafe5d01682a911e95bba4012","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["06584e6e98d592b34e1329b384182f368d2025e8","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"d572389229127c297dd1fa5ce4758e1cec41e799":["b21422ff1d1d56499dec481f193b402e5e8def5b","8dc26bfa5ebbc55b5a04fbec545dfcec647b046b"],"962d04139994fce5193143ef35615499a9a96d78":[],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}