{"path":"solr/src/java/org/apache/solr/response/BaseResponseWriter#getDoc(int,IdxInfo).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/BaseResponseWriter#getDoc(int,IdxInfo).mjava","pathOld":"/dev/null","sourceNew":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\r\n    Document doc = info.searcher.doc(id);\r\n    SolrDocument solrDoc = new SolrDocument();\r\n    for (Fieldable f : (List<Fieldable>) doc.getFields()) {\r\n      String fieldName = f.name();\r\n      if (info.returnFields != null && !info.returnFields.contains(fieldName))\r\n        continue;\r\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\r\n      FieldType ft = null;\r\n      if (sf != null) ft = sf.getType();\r\n      Object val = null;\r\n      if (ft == null) { // handle fields not in the schema\r\n        if (f.isBinary())\r\n          val = f.binaryValue();\r\n        else\r\n          val = f.stringValue();\r\n      } else {\r\n        try {\r\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\r\n            val = ft.toObject(f);\r\n          } else {\r\n            val = ft.toExternal(f);\r\n          }\r\n        } catch (Exception e) {\r\n          // There is a chance of the underlying field not really matching the\r\n          // actual field type . So ,it can throw exception\r\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\r\n          // if it happens log it and continue\r\n          continue;\r\n        }\r\n      }\r\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\r\n        ArrayList l = new ArrayList();\r\n        l.add(val);\r\n        solrDoc.addField(fieldName, l);\r\n      } else {\r\n        solrDoc.addField(fieldName, val);\r\n      }\r\n    }\r\n\r\n    return solrDoc;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/BaseResponseWriter#getDoc(int,IdxInfo).mjava","sourceNew":null,"sourceOld":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\r\n    Document doc = info.searcher.doc(id);\r\n    SolrDocument solrDoc = new SolrDocument();\r\n    for (Fieldable f : (List<Fieldable>) doc.getFields()) {\r\n      String fieldName = f.name();\r\n      if (info.returnFields != null && !info.returnFields.contains(fieldName))\r\n        continue;\r\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\r\n      FieldType ft = null;\r\n      if (sf != null) ft = sf.getType();\r\n      Object val = null;\r\n      if (ft == null) { // handle fields not in the schema\r\n        if (f.isBinary())\r\n          val = f.binaryValue();\r\n        else\r\n          val = f.stringValue();\r\n      } else {\r\n        try {\r\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\r\n            val = ft.toObject(f);\r\n          } else {\r\n            val = ft.toExternal(f);\r\n          }\r\n        } catch (Exception e) {\r\n          // There is a chance of the underlying field not really matching the\r\n          // actual field type . So ,it can throw exception\r\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\r\n          // if it happens log it and continue\r\n          continue;\r\n        }\r\n      }\r\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\r\n        ArrayList l = new ArrayList();\r\n        l.add(val);\r\n        solrDoc.addField(fieldName, l);\r\n      } else {\r\n        solrDoc.addField(fieldName, val);\r\n      }\r\n    }\r\n\r\n    return solrDoc;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/BaseResponseWriter#getDoc(int,IdxInfo).mjava","pathOld":"src/java/org/apache/solr/response/BaseResponseWriter#getDoc(int,IdxInfo).mjava","sourceNew":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\r\n    Document doc = info.searcher.doc(id);\r\n    SolrDocument solrDoc = new SolrDocument();\r\n    for (Fieldable f : (List<Fieldable>) doc.getFields()) {\r\n      String fieldName = f.name();\r\n      if (info.returnFields != null && !info.returnFields.contains(fieldName))\r\n        continue;\r\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\r\n      FieldType ft = null;\r\n      if (sf != null) ft = sf.getType();\r\n      Object val = null;\r\n      if (ft == null) { // handle fields not in the schema\r\n        if (f.isBinary())\r\n          val = f.getBinaryValue();\r\n        else\r\n          val = f.stringValue();\r\n      } else {\r\n        try {\r\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\r\n            val = ft.toObject(f);\r\n          } else {\r\n            val = ft.toExternal(f);\r\n          }\r\n        } catch (Exception e) {\r\n          // There is a chance of the underlying field not really matching the\r\n          // actual field type . So ,it can throw exception\r\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\r\n          // if it happens log it and continue\r\n          continue;\r\n        }\r\n      }\r\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\r\n        ArrayList l = new ArrayList();\r\n        l.add(val);\r\n        solrDoc.addField(fieldName, l);\r\n      } else {\r\n        solrDoc.addField(fieldName, val);\r\n      }\r\n    }\r\n\r\n    return solrDoc;\r\n  }\r\n\n","sourceOld":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\r\n    Document doc = info.searcher.doc(id);\r\n    SolrDocument solrDoc = new SolrDocument();\r\n    for (Fieldable f : (List<Fieldable>) doc.getFields()) {\r\n      String fieldName = f.name();\r\n      if (info.returnFields != null && !info.returnFields.contains(fieldName))\r\n        continue;\r\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\r\n      FieldType ft = null;\r\n      if (sf != null) ft = sf.getType();\r\n      Object val = null;\r\n      if (ft == null) { // handle fields not in the schema\r\n        if (f.isBinary())\r\n          val = f.getBinaryValue();\r\n        else\r\n          val = f.stringValue();\r\n      } else {\r\n        try {\r\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\r\n            val = ft.toObject(f);\r\n          } else {\r\n            val = ft.toExternal(f);\r\n          }\r\n        } catch (Exception e) {\r\n          // There is a chance of the underlying field not really matching the\r\n          // actual field type . So ,it can throw exception\r\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\r\n          // if it happens log it and continue\r\n          continue;\r\n        }\r\n      }\r\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\r\n        ArrayList l = new ArrayList();\r\n        l.add(val);\r\n        solrDoc.addField(fieldName, l);\r\n      } else {\r\n        solrDoc.addField(fieldName, val);\r\n      }\r\n    }\r\n\r\n    return solrDoc;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/BaseResponseWriter#getDoc(int,IdxInfo).mjava","pathOld":"/dev/null","sourceNew":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\r\n    Document doc = info.searcher.doc(id);\r\n    SolrDocument solrDoc = new SolrDocument();\r\n    for (Fieldable f : (List<Fieldable>) doc.getFields()) {\r\n      String fieldName = f.name();\r\n      if (info.returnFields != null && !info.returnFields.contains(fieldName))\r\n        continue;\r\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\r\n      FieldType ft = null;\r\n      if (sf != null) ft = sf.getType();\r\n      Object val = null;\r\n      if (ft == null) { // handle fields not in the schema\r\n        if (f.isBinary())\r\n          val = f.getBinaryValue();\r\n        else\r\n          val = f.stringValue();\r\n      } else {\r\n        try {\r\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\r\n            val = ft.toObject(f);\r\n          } else {\r\n            val = ft.toExternal(f);\r\n          }\r\n        } catch (Exception e) {\r\n          // There is a chance of the underlying field not really matching the\r\n          // actual field type . So ,it can throw exception\r\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\r\n          // if it happens log it and continue\r\n          continue;\r\n        }\r\n      }\r\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\r\n        ArrayList l = new ArrayList();\r\n        l.add(val);\r\n        solrDoc.addField(fieldName, l);\r\n      } else {\r\n        solrDoc.addField(fieldName, val);\r\n      }\r\n    }\r\n\r\n    return solrDoc;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dff3adc4fd8094e3973a5ecbbe8968ae45a86a55","date":1270182973,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/BaseResponseWriter#getDoc(int,IdxInfo).mjava","pathOld":"solr/src/java/org/apache/solr/response/BaseResponseWriter#getDoc(int,IdxInfo).mjava","sourceNew":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\n    Document doc = info.searcher.doc(id);\n    SolrDocument solrDoc = new SolrDocument();\n    for (Fieldable f : (List<Fieldable>) doc.getFields()) {\n      String fieldName = f.name();\n      if (info.returnFields != null && !info.returnFields.contains(fieldName))\n        continue;\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\n      FieldType ft = null;\n      if (sf != null) ft = sf.getType();\n      Object val = null;\n      if (ft == null) { // handle fields not in the schema\n        if (f.isBinary())\n          val = f.getBinaryValue();\n        else\n          val = f.stringValue();\n      } else {\n        try {\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\n            val = ft.toObject(f);\n          } else {\n            val = ft.toExternal(f);\n          }\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          // if it happens log it and continue\n          continue;\n        }\n      }\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\n        ArrayList l = new ArrayList();\n        l.add(val);\n        solrDoc.addField(fieldName, l);\n      } else {\n        solrDoc.addField(fieldName, val);\n      }\n    }\n\n    return solrDoc;\n  }\n\n","sourceOld":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\r\n    Document doc = info.searcher.doc(id);\r\n    SolrDocument solrDoc = new SolrDocument();\r\n    for (Fieldable f : (List<Fieldable>) doc.getFields()) {\r\n      String fieldName = f.name();\r\n      if (info.returnFields != null && !info.returnFields.contains(fieldName))\r\n        continue;\r\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\r\n      FieldType ft = null;\r\n      if (sf != null) ft = sf.getType();\r\n      Object val = null;\r\n      if (ft == null) { // handle fields not in the schema\r\n        if (f.isBinary())\r\n          val = f.getBinaryValue();\r\n        else\r\n          val = f.stringValue();\r\n      } else {\r\n        try {\r\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\r\n            val = ft.toObject(f);\r\n          } else {\r\n            val = ft.toExternal(f);\r\n          }\r\n        } catch (Exception e) {\r\n          // There is a chance of the underlying field not really matching the\r\n          // actual field type . So ,it can throw exception\r\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\r\n          // if it happens log it and continue\r\n          continue;\r\n        }\r\n      }\r\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\r\n        ArrayList l = new ArrayList();\r\n        l.add(val);\r\n        solrDoc.addField(fieldName, l);\r\n      } else {\r\n        solrDoc.addField(fieldName, val);\r\n      }\r\n    }\r\n\r\n    return solrDoc;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","date":1286157263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/BaseResponseWriter#getDoc(int,IdxInfo).mjava","pathOld":"solr/src/java/org/apache/solr/response/BaseResponseWriter#getDoc(int,IdxInfo).mjava","sourceNew":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\n    Document doc = info.searcher.doc(id);\n    SolrDocument solrDoc = new SolrDocument();\n    for (Fieldable f : doc.getFields()) {\n      String fieldName = f.name();\n      if (info.returnFields != null && !info.returnFields.contains(fieldName))\n        continue;\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\n      FieldType ft = null;\n      if (sf != null) ft = sf.getType();\n      Object val = null;\n      if (ft == null) { // handle fields not in the schema\n        if (f.isBinary())\n          val = f.getBinaryValue();\n        else\n          val = f.stringValue();\n      } else {\n        try {\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\n            val = ft.toObject(f);\n          } else {\n            val = ft.toExternal(f);\n          }\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          // if it happens log it and continue\n          continue;\n        }\n      }\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\n        ArrayList l = new ArrayList();\n        l.add(val);\n        solrDoc.addField(fieldName, l);\n      } else {\n        solrDoc.addField(fieldName, val);\n      }\n    }\n\n    return solrDoc;\n  }\n\n","sourceOld":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\n    Document doc = info.searcher.doc(id);\n    SolrDocument solrDoc = new SolrDocument();\n    for (Fieldable f : (List<Fieldable>) doc.getFields()) {\n      String fieldName = f.name();\n      if (info.returnFields != null && !info.returnFields.contains(fieldName))\n        continue;\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\n      FieldType ft = null;\n      if (sf != null) ft = sf.getType();\n      Object val = null;\n      if (ft == null) { // handle fields not in the schema\n        if (f.isBinary())\n          val = f.getBinaryValue();\n        else\n          val = f.stringValue();\n      } else {\n        try {\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\n            val = ft.toObject(f);\n          } else {\n            val = ft.toExternal(f);\n          }\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          // if it happens log it and continue\n          continue;\n        }\n      }\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\n        ArrayList l = new ArrayList();\n        l.add(val);\n        solrDoc.addField(fieldName, l);\n      } else {\n        solrDoc.addField(fieldName, val);\n      }\n    }\n\n    return solrDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/BaseResponseWriter#getDoc(int,IdxInfo).mjava","pathOld":"solr/src/java/org/apache/solr/response/BaseResponseWriter#getDoc(int,IdxInfo).mjava","sourceNew":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\n    Document doc = info.searcher.doc(id);\n    SolrDocument solrDoc = new SolrDocument();\n    for (Fieldable f : doc.getFields()) {\n      String fieldName = f.name();\n      if (info.returnFields != null && !info.returnFields.contains(fieldName))\n        continue;\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\n      FieldType ft = null;\n      if (sf != null) ft = sf.getType();\n      Object val = null;\n      if (ft == null) { // handle fields not in the schema\n        if (f.isBinary())\n          val = f.getBinaryValue();\n        else\n          val = f.stringValue();\n      } else {\n        try {\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\n            val = ft.toObject(f);\n          } else {\n            val = ft.toExternal(f);\n          }\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          // if it happens log it and continue\n          continue;\n        }\n      }\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\n        ArrayList l = new ArrayList();\n        l.add(val);\n        solrDoc.addField(fieldName, l);\n      } else {\n        solrDoc.addField(fieldName, val);\n      }\n    }\n\n    return solrDoc;\n  }\n\n","sourceOld":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\n    Document doc = info.searcher.doc(id);\n    SolrDocument solrDoc = new SolrDocument();\n    for (Fieldable f : (List<Fieldable>) doc.getFields()) {\n      String fieldName = f.name();\n      if (info.returnFields != null && !info.returnFields.contains(fieldName))\n        continue;\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\n      FieldType ft = null;\n      if (sf != null) ft = sf.getType();\n      Object val = null;\n      if (ft == null) { // handle fields not in the schema\n        if (f.isBinary())\n          val = f.getBinaryValue();\n        else\n          val = f.stringValue();\n      } else {\n        try {\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\n            val = ft.toObject(f);\n          } else {\n            val = ft.toExternal(f);\n          }\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          // if it happens log it and continue\n          continue;\n        }\n      }\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\n        ArrayList l = new ArrayList();\n        l.add(val);\n        solrDoc.addField(fieldName, l);\n      } else {\n        solrDoc.addField(fieldName, val);\n      }\n    }\n\n    return solrDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"794957d0f3853445bdf9319bfb72f8b8c2443a7d","date":1301088393,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/BaseResponseWriter#getDoc(int,IdxInfo).mjava","pathOld":"solr/src/java/org/apache/solr/response/BaseResponseWriter#getDoc(int,IdxInfo).mjava","sourceNew":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\n    Document doc = info.searcher.doc(id);\n    SolrDocument solrDoc = new SolrDocument();\n    for (Fieldable f : doc.getFields()) {\n      String fieldName = f.name();\n      if (info.returnFields != null && !info.returnFields.wantsField(fieldName))\n        continue;\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\n      FieldType ft = null;\n      if (sf != null) ft = sf.getType();\n      Object val = null;\n      if (ft == null) { // handle fields not in the schema\n        if (f.isBinary())\n          val = f.getBinaryValue();\n        else\n          val = f.stringValue();\n      } else {\n        try {\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\n            val = ft.toObject(f);\n          } else {\n            val = ft.toExternal(f);\n          }\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          // if it happens log it and continue\n          continue;\n        }\n      }\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\n        ArrayList l = new ArrayList();\n        l.add(val);\n        solrDoc.addField(fieldName, l);\n      } else {\n        solrDoc.addField(fieldName, val);\n      }\n    }\n\n    return solrDoc;\n  }\n\n","sourceOld":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\n    Document doc = info.searcher.doc(id);\n    SolrDocument solrDoc = new SolrDocument();\n    for (Fieldable f : doc.getFields()) {\n      String fieldName = f.name();\n      if (info.returnFields != null && !info.returnFields.contains(fieldName))\n        continue;\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\n      FieldType ft = null;\n      if (sf != null) ft = sf.getType();\n      Object val = null;\n      if (ft == null) { // handle fields not in the schema\n        if (f.isBinary())\n          val = f.getBinaryValue();\n        else\n          val = f.stringValue();\n      } else {\n        try {\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\n            val = ft.toObject(f);\n          } else {\n            val = ft.toExternal(f);\n          }\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          // if it happens log it and continue\n          continue;\n        }\n      }\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\n        ArrayList l = new ArrayList();\n        l.add(val);\n        solrDoc.addField(fieldName, l);\n      } else {\n        solrDoc.addField(fieldName, val);\n      }\n    }\n\n    return solrDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/BaseResponseWriter#getDoc(int,IdxInfo).mjava","pathOld":"solr/src/java/org/apache/solr/response/BaseResponseWriter#getDoc(int,IdxInfo).mjava","sourceNew":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\n    Document doc = info.searcher.doc(id);\n    SolrDocument solrDoc = new SolrDocument();\n    for (Fieldable f : doc.getFields()) {\n      String fieldName = f.name();\n      if (info.returnFields != null && !info.returnFields.wantsField(fieldName))\n        continue;\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\n      FieldType ft = null;\n      if (sf != null) ft = sf.getType();\n      Object val = null;\n      if (ft == null) { // handle fields not in the schema\n        if (f.isBinary())\n          val = f.getBinaryValue();\n        else\n          val = f.stringValue();\n      } else {\n        try {\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\n            val = ft.toObject(f);\n          } else {\n            val = ft.toExternal(f);\n          }\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          // if it happens log it and continue\n          continue;\n        }\n      }\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\n        ArrayList l = new ArrayList();\n        l.add(val);\n        solrDoc.addField(fieldName, l);\n      } else {\n        solrDoc.addField(fieldName, val);\n      }\n    }\n\n    return solrDoc;\n  }\n\n","sourceOld":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\n    Document doc = info.searcher.doc(id);\n    SolrDocument solrDoc = new SolrDocument();\n    for (Fieldable f : doc.getFields()) {\n      String fieldName = f.name();\n      if (info.returnFields != null && !info.returnFields.contains(fieldName))\n        continue;\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\n      FieldType ft = null;\n      if (sf != null) ft = sf.getType();\n      Object val = null;\n      if (ft == null) { // handle fields not in the schema\n        if (f.isBinary())\n          val = f.getBinaryValue();\n        else\n          val = f.stringValue();\n      } else {\n        try {\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\n            val = ft.toObject(f);\n          } else {\n            val = ft.toExternal(f);\n          }\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          // if it happens log it and continue\n          continue;\n        }\n      }\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\n        ArrayList l = new ArrayList();\n        l.add(val);\n        solrDoc.addField(fieldName, l);\n      } else {\n        solrDoc.addField(fieldName, val);\n      }\n    }\n\n    return solrDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/BaseResponseWriter#getDoc(int,IdxInfo).mjava","pathOld":"solr/src/java/org/apache/solr/response/BaseResponseWriter#getDoc(int,IdxInfo).mjava","sourceNew":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\n    Document doc = info.searcher.doc(id);\n    SolrDocument solrDoc = new SolrDocument();\n    for (Fieldable f : doc.getFields()) {\n      String fieldName = f.name();\n      if (info.returnFields != null && !info.returnFields.wantsField(fieldName))\n        continue;\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\n      FieldType ft = null;\n      if (sf != null) ft = sf.getType();\n      Object val = null;\n      if (ft == null) { // handle fields not in the schema\n        if (f.isBinary())\n          val = f.getBinaryValue();\n        else\n          val = f.stringValue();\n      } else {\n        try {\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\n            val = ft.toObject(f);\n          } else {\n            val = ft.toExternal(f);\n          }\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          // if it happens log it and continue\n          continue;\n        }\n      }\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\n        ArrayList l = new ArrayList();\n        l.add(val);\n        solrDoc.addField(fieldName, l);\n      } else {\n        solrDoc.addField(fieldName, val);\n      }\n    }\n\n    return solrDoc;\n  }\n\n","sourceOld":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\n    Document doc = info.searcher.doc(id);\n    SolrDocument solrDoc = new SolrDocument();\n    for (Fieldable f : doc.getFields()) {\n      String fieldName = f.name();\n      if (info.returnFields != null && !info.returnFields.contains(fieldName))\n        continue;\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\n      FieldType ft = null;\n      if (sf != null) ft = sf.getType();\n      Object val = null;\n      if (ft == null) { // handle fields not in the schema\n        if (f.isBinary())\n          val = f.getBinaryValue();\n        else\n          val = f.stringValue();\n      } else {\n        try {\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\n            val = ft.toObject(f);\n          } else {\n            val = ft.toExternal(f);\n          }\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          // if it happens log it and continue\n          continue;\n        }\n      }\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\n        ArrayList l = new ArrayList();\n        l.add(val);\n        solrDoc.addField(fieldName, l);\n      } else {\n        solrDoc.addField(fieldName, val);\n      }\n    }\n\n    return solrDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5ea1095b056cbefa393b519c151cd8d4c60088f","date":1304398632,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/BaseResponseWriter#getDoc(int,IdxInfo).mjava","sourceNew":null,"sourceOld":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\n    Document doc = info.searcher.doc(id);\n    SolrDocument solrDoc = new SolrDocument();\n    for (Fieldable f : doc.getFields()) {\n      String fieldName = f.name();\n      if (info.returnFields != null && !info.returnFields.wantsField(fieldName))\n        continue;\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\n      FieldType ft = null;\n      if (sf != null) ft = sf.getType();\n      Object val = null;\n      if (ft == null) { // handle fields not in the schema\n        if (f.isBinary())\n          val = f.getBinaryValue();\n        else\n          val = f.stringValue();\n      } else {\n        try {\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\n            val = ft.toObject(f);\n          } else {\n            val = ft.toExternal(f);\n          }\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          // if it happens log it and continue\n          continue;\n        }\n      }\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\n        ArrayList l = new ArrayList();\n        l.add(val);\n        solrDoc.addField(fieldName, l);\n      } else {\n        solrDoc.addField(fieldName, val);\n      }\n    }\n\n    return solrDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/BaseResponseWriter#getDoc(int,IdxInfo).mjava","sourceNew":null,"sourceOld":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\n    Document doc = info.searcher.doc(id);\n    SolrDocument solrDoc = new SolrDocument();\n    for (Fieldable f : doc.getFields()) {\n      String fieldName = f.name();\n      if (info.returnFields != null && !info.returnFields.wantsField(fieldName))\n        continue;\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\n      FieldType ft = null;\n      if (sf != null) ft = sf.getType();\n      Object val = null;\n      if (ft == null) { // handle fields not in the schema\n        if (f.isBinary())\n          val = f.getBinaryValue();\n        else\n          val = f.stringValue();\n      } else {\n        try {\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\n            val = ft.toObject(f);\n          } else {\n            val = ft.toExternal(f);\n          }\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          // if it happens log it and continue\n          continue;\n        }\n      }\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\n        ArrayList l = new ArrayList();\n        l.add(val);\n        solrDoc.addField(fieldName, l);\n      } else {\n        solrDoc.addField(fieldName, val);\n      }\n    }\n\n    return solrDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/BaseResponseWriter#getDoc(int,IdxInfo).mjava","sourceNew":null,"sourceOld":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\n    Document doc = info.searcher.doc(id);\n    SolrDocument solrDoc = new SolrDocument();\n    for (Fieldable f : doc.getFields()) {\n      String fieldName = f.name();\n      if (info.returnFields != null && !info.returnFields.wantsField(fieldName))\n        continue;\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\n      FieldType ft = null;\n      if (sf != null) ft = sf.getType();\n      Object val = null;\n      if (ft == null) { // handle fields not in the schema\n        if (f.isBinary())\n          val = f.getBinaryValue();\n        else\n          val = f.stringValue();\n      } else {\n        try {\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\n            val = ft.toObject(f);\n          } else {\n            val = ft.toExternal(f);\n          }\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          // if it happens log it and continue\n          continue;\n        }\n      }\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\n        ArrayList l = new ArrayList();\n        l.add(val);\n        solrDoc.addField(fieldName, l);\n      } else {\n        solrDoc.addField(fieldName, val);\n      }\n    }\n\n    return solrDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d":["dff3adc4fd8094e3973a5ecbbe8968ae45a86a55"],"c5ea1095b056cbefa393b519c151cd8d4c60088f":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["dff3adc4fd8094e3973a5ecbbe8968ae45a86a55","3f7e3e91f914e6265ed09a3208cc60c9ba2a477d"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"a3776dccca01c11e7046323cfad46a3b4a471233":["794957d0f3853445bdf9319bfb72f8b8c2443a7d","c5ea1095b056cbefa393b519c151cd8d4c60088f"],"dff3adc4fd8094e3973a5ecbbe8968ae45a86a55":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["d619839baa8ce5503e496b94a9e42ad6f079293f","c5ea1095b056cbefa393b519c151cd8d4c60088f"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c5ea1095b056cbefa393b519c151cd8d4c60088f"]},"commit2Childs":{"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d":["794957d0f3853445bdf9319bfb72f8b8c2443a7d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d619839baa8ce5503e496b94a9e42ad6f079293f"],"c5ea1095b056cbefa393b519c151cd8d4c60088f":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["c5ea1095b056cbefa393b519c151cd8d4c60088f","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"1da8d55113b689b06716246649de6f62430f15c0":["dff3adc4fd8094e3973a5ecbbe8968ae45a86a55"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"dff3adc4fd8094e3973a5ecbbe8968ae45a86a55":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}