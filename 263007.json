{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#BlockGroupingCollector(Sort,int,boolean,Filter).mjava","commits":[{"id":"3ce36a160d1241ae9c70e109dc3fdfdfb009674a","date":1307033216,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#BlockGroupingCollector(Sort,int,boolean,Filter).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create the single pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @param needsScores true if the collected documents\n   *    require scores, either because relevance is included\n   *    in the withinGroupSort or because you plan to pass true\n   *    for either getSscores or getMaxScores to {@link\n   *    #getTopGroups}\n   *  @param lastDocPerGroup a {@link Filter} that marks the\n   *    last document in each group.\n   */\n  public BlockGroupingCollector(Sort groupSort, int topNGroups, boolean needsScores, Filter lastDocPerGroup) throws IOException {\n\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    groupQueue = new GroupQueue(topNGroups);\n    pendingSubDocs = new int[10];\n    if (needsScores) {\n      pendingSubScores = new float[10];\n    }\n\n    this.needsScores = needsScores;\n    this.lastDocPerGroup = lastDocPerGroup;\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n    \n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n      comparators[i] = sortField.getComparator(topNGroups, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d62f5453a200cec2cbb60148de159dbf55591e9d","date":1307049300,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#BlockGroupingCollector(Sort,int,boolean,Filter).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create the single pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @param needsScores true if the collected documents\n   *    require scores, either because relevance is included\n   *    in the withinGroupSort or because you plan to pass true\n   *    for either getSscores or getMaxScores to {@link\n   *    #getTopGroups}\n   *  @param lastDocPerGroup a {@link Filter} that marks the\n   *    last document in each group.\n   */\n  public BlockGroupingCollector(Sort groupSort, int topNGroups, boolean needsScores, Filter lastDocPerGroup) throws IOException {\n\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    groupQueue = new GroupQueue(topNGroups);\n    pendingSubDocs = new int[10];\n    if (needsScores) {\n      pendingSubScores = new float[10];\n    }\n\n    this.needsScores = needsScores;\n    this.lastDocPerGroup = lastDocPerGroup;\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n    \n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n      comparators[i] = sortField.getComparator(topNGroups, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c715a0f99152be7566591f323c6c5a25725a1bcb","date":1307118449,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#BlockGroupingCollector(Sort,int,boolean,Filter).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create the single pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @param needsScores true if the collected documents\n   *    require scores, either because relevance is included\n   *    in the withinGroupSort or because you plan to pass true\n   *    for either getSscores or getMaxScores to {@link\n   *    #getTopGroups}\n   *  @param lastDocPerGroup a {@link Filter} that marks the\n   *    last document in each group.\n   */\n  public BlockGroupingCollector(Sort groupSort, int topNGroups, boolean needsScores, Filter lastDocPerGroup) throws IOException {\n\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    groupQueue = new GroupQueue(topNGroups);\n    pendingSubDocs = new int[10];\n    if (needsScores) {\n      pendingSubScores = new float[10];\n    }\n\n    this.needsScores = needsScores;\n    this.lastDocPerGroup = lastDocPerGroup;\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n    \n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n      comparators[i] = sortField.getComparator(topNGroups, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb008c8f8fc29e5deccfa43d8a054268ba1c5e48","date":1331199997,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#BlockGroupingCollector(Sort,int,boolean,Filter).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#BlockGroupingCollector(Sort,int,boolean,Filter).mjava","sourceNew":"  /**\n   * Create the single pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @param needsScores true if the collected documents\n   *    require scores, either because relevance is included\n   *    in the withinGroupSort or because you plan to pass true\n   *    for either getSscores or getMaxScores to {@link\n   *    #getTopGroups}\n   *  @param lastDocPerGroup a {@link Filter} that marks the\n   *    last document in each group.\n   */\n  public BlockGroupingCollector(Sort groupSort, int topNGroups, boolean needsScores, Filter lastDocPerGroup) throws IOException {\n\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    groupQueue = new GroupQueue(topNGroups);\n    pendingSubDocs = new int[10];\n    if (needsScores) {\n      pendingSubScores = new float[10];\n    }\n\n    this.needsScores = needsScores;\n    this.lastDocPerGroup = lastDocPerGroup;\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n    \n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator<?>[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n      comparators[i] = sortField.getComparator(topNGroups, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create the single pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @param needsScores true if the collected documents\n   *    require scores, either because relevance is included\n   *    in the withinGroupSort or because you plan to pass true\n   *    for either getSscores or getMaxScores to {@link\n   *    #getTopGroups}\n   *  @param lastDocPerGroup a {@link Filter} that marks the\n   *    last document in each group.\n   */\n  public BlockGroupingCollector(Sort groupSort, int topNGroups, boolean needsScores, Filter lastDocPerGroup) throws IOException {\n\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    groupQueue = new GroupQueue(topNGroups);\n    pendingSubDocs = new int[10];\n    if (needsScores) {\n      pendingSubScores = new float[10];\n    }\n\n    this.needsScores = needsScores;\n    this.lastDocPerGroup = lastDocPerGroup;\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n    \n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n      comparators[i] = sortField.getComparator(topNGroups, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#BlockGroupingCollector(Sort,int,boolean,Filter).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#BlockGroupingCollector(Sort,int,boolean,Filter).mjava","sourceNew":"  /**\n   * Create the single pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @param needsScores true if the collected documents\n   *    require scores, either because relevance is included\n   *    in the withinGroupSort or because you plan to pass true\n   *    for either getSscores or getMaxScores to {@link\n   *    #getTopGroups}\n   *  @param lastDocPerGroup a {@link Filter} that marks the\n   *    last document in each group.\n   */\n  public BlockGroupingCollector(Sort groupSort, int topNGroups, boolean needsScores, Filter lastDocPerGroup) throws IOException {\n\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    groupQueue = new GroupQueue(topNGroups);\n    pendingSubDocs = new int[10];\n    if (needsScores) {\n      pendingSubScores = new float[10];\n    }\n\n    this.needsScores = needsScores;\n    this.lastDocPerGroup = lastDocPerGroup;\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n    \n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator<?>[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n      comparators[i] = sortField.getComparator(topNGroups, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create the single pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @param needsScores true if the collected documents\n   *    require scores, either because relevance is included\n   *    in the withinGroupSort or because you plan to pass true\n   *    for either getSscores or getMaxScores to {@link\n   *    #getTopGroups}\n   *  @param lastDocPerGroup a {@link Filter} that marks the\n   *    last document in each group.\n   */\n  public BlockGroupingCollector(Sort groupSort, int topNGroups, boolean needsScores, Filter lastDocPerGroup) throws IOException {\n\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    groupQueue = new GroupQueue(topNGroups);\n    pendingSubDocs = new int[10];\n    if (needsScores) {\n      pendingSubScores = new float[10];\n    }\n\n    this.needsScores = needsScores;\n    this.lastDocPerGroup = lastDocPerGroup;\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n    \n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n      comparators[i] = sortField.getComparator(topNGroups, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#BlockGroupingCollector(Sort,int,boolean,Filter).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#BlockGroupingCollector(Sort,int,boolean,Filter).mjava","sourceNew":"  /**\n   * Create the single pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @param needsScores true if the collected documents\n   *    require scores, either because relevance is included\n   *    in the withinGroupSort or because you plan to pass true\n   *    for either getSscores or getMaxScores to {@link\n   *    #getTopGroups}\n   *  @param lastDocPerGroup a {@link Filter} that marks the\n   *    last document in each group.\n   */\n  public BlockGroupingCollector(Sort groupSort, int topNGroups, boolean needsScores, Filter lastDocPerGroup) throws IOException {\n\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    groupQueue = new GroupQueue(topNGroups);\n    pendingSubDocs = new int[10];\n    if (needsScores) {\n      pendingSubScores = new float[10];\n    }\n\n    this.needsScores = needsScores;\n    this.lastDocPerGroup = lastDocPerGroup;\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n    \n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator<?>[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n      comparators[i] = sortField.getComparator(topNGroups, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create the single pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @param needsScores true if the collected documents\n   *    require scores, either because relevance is included\n   *    in the withinGroupSort or because you plan to pass true\n   *    for either getSscores or getMaxScores to {@link\n   *    #getTopGroups}\n   *  @param lastDocPerGroup a {@link Filter} that marks the\n   *    last document in each group.\n   */\n  public BlockGroupingCollector(Sort groupSort, int topNGroups, boolean needsScores, Filter lastDocPerGroup) throws IOException {\n\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    groupQueue = new GroupQueue(topNGroups);\n    pendingSubDocs = new int[10];\n    if (needsScores) {\n      pendingSubScores = new float[10];\n    }\n\n    this.needsScores = needsScores;\n    this.lastDocPerGroup = lastDocPerGroup;\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n    this.groupSort = groupSort;\n    \n    this.topNGroups = topNGroups;\n\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator<?>[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n      comparators[i] = sortField.getComparator(topNGroups, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3ce36a160d1241ae9c70e109dc3fdfdfb009674a","eb008c8f8fc29e5deccfa43d8a054268ba1c5e48"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["eb008c8f8fc29e5deccfa43d8a054268ba1c5e48"],"3ce36a160d1241ae9c70e109dc3fdfdfb009674a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eb008c8f8fc29e5deccfa43d8a054268ba1c5e48":["3ce36a160d1241ae9c70e109dc3fdfdfb009674a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c715a0f99152be7566591f323c6c5a25725a1bcb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3ce36a160d1241ae9c70e109dc3fdfdfb009674a"],"d62f5453a200cec2cbb60148de159dbf55591e9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3ce36a160d1241ae9c70e109dc3fdfdfb009674a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3ce36a160d1241ae9c70e109dc3fdfdfb009674a":["38e3b736c7ca086d61b7dbb841c905ee115490da","eb008c8f8fc29e5deccfa43d8a054268ba1c5e48","c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d"],"eb008c8f8fc29e5deccfa43d8a054268ba1c5e48":["38e3b736c7ca086d61b7dbb841c905ee115490da","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ce36a160d1241ae9c70e109dc3fdfdfb009674a","c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d"],"c715a0f99152be7566591f323c6c5a25725a1bcb":[],"d62f5453a200cec2cbb60148de159dbf55591e9d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}