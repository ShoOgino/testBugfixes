{"path":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","commits":[{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public List<CoreDescriptor> discover(CoreContainer cc) {\n    logger.info(\"Looking for core definitions underneath {}\", rootDirectory.getAbsolutePath());\n    List<CoreDescriptor> cds = Lists.newArrayList();\n    discoverUnder(rootDirectory, cds, cc);\n    logger.info(\"Found {} core definitions\", cds.size());\n    return cds;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public List<CoreDescriptor> discover(CoreContainer cc) {\n    logger.info(\"Looking for core definitions underneath {}\", rootDirectory.getAbsolutePath());\n    List<CoreDescriptor> cds = Lists.newArrayList();\n    discoverUnder(rootDirectory, cds, cc);\n    logger.info(\"Found {} core definitions\", cds.size());\n    return cds;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"429eefa8bf427c2fbc5d85905fea54b2f76081f5","date":1409938294,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","sourceNew":"  @Override\n  public List<CoreDescriptor> discover(CoreContainer cc) {\n    logger.info(\"Looking for core definitions underneath {}\", rootDirectory.getAbsolutePath());\n    List<CoreDescriptor> cds = Lists.newArrayList();\n    if (rootDirectory.canRead() == false) {\n      throw new RuntimeException(\"Solr home '\" + rootDirectory.getAbsolutePath() + \"' doesn't have read permissions\");\n    }\n    discoverUnder(rootDirectory, cds, cc);\n    logger.info(\"Found {} core definitions\", cds.size());\n    return cds;\n  }\n\n","sourceOld":"  @Override\n  public List<CoreDescriptor> discover(CoreContainer cc) {\n    logger.info(\"Looking for core definitions underneath {}\", rootDirectory.getAbsolutePath());\n    List<CoreDescriptor> cds = Lists.newArrayList();\n    discoverUnder(rootDirectory, cds, cc);\n    logger.info(\"Found {} core definitions\", cds.size());\n    return cds;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfff642564a0bd7d0848b5e8146a64f7623f6612","date":1447091419,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","sourceNew":"  @Override\n  public List<CoreDescriptor> discover(final CoreContainer cc) {\n    logger.info(\"Looking for core definitions underneath {}\", rootDirectory);\n    final List<CoreDescriptor> cds = Lists.newArrayList();\n    try {\n      Files.walkFileTree(this.rootDirectory, new SimpleFileVisitor<Path>() {\n        @Override\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n          if (file.getFileName().toString().equals(PROPERTIES_FILENAME)) {\n            CoreDescriptor cd = buildCoreDescriptor(file, cc);\n            logger.info(\"Found core {} in {}\", cd.getName(), cd.getInstanceDir());\n            cds.add(cd);\n            return FileVisitResult.SKIP_SIBLINGS;\n          }\n          return FileVisitResult.CONTINUE;\n        }\n\n        @Override\n        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n          // if we get an error on the root, then fail the whole thing\n          // otherwise, log a warning and continue to try and load other cores\n          if (file.equals(rootDirectory)) {\n            logger.error(\"Error reading core root directory {}: {}\", file, exc);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading core root directory\");\n          }\n          logger.warn(\"Error visiting {}: {}\", file, exc);\n          return FileVisitResult.CONTINUE;\n        }\n      });\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Couldn't walk file tree under \" + this.rootDirectory, e);\n    }\n    logger.info(\"Found {} core definitions\", cds.size());\n    return cds;\n  }\n\n","sourceOld":"  @Override\n  public List<CoreDescriptor> discover(CoreContainer cc) {\n    logger.info(\"Looking for core definitions underneath {}\", rootDirectory.getAbsolutePath());\n    List<CoreDescriptor> cds = Lists.newArrayList();\n    if (rootDirectory.canRead() == false) {\n      throw new RuntimeException(\"Solr home '\" + rootDirectory.getAbsolutePath() + \"' doesn't have read permissions\");\n    }\n    discoverUnder(rootDirectory, cds, cc);\n    logger.info(\"Found {} core definitions\", cds.size());\n    return cds;\n  }\n\n","bugFix":null,"bugIntro":["665df8f5fdfcee3503b13769cc0205ac185297c7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"665df8f5fdfcee3503b13769cc0205ac185297c7","date":1453107924,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","sourceNew":"  @Override\n  public List<CoreDescriptor> discover(final CoreContainer cc) {\n    logger.info(\"Looking for core definitions underneath {}\", rootDirectory);\n    final List<CoreDescriptor> cds = Lists.newArrayList();\n    try {\n      Set<FileVisitOption> options = new HashSet<>();\n      options.add(FileVisitOption.FOLLOW_LINKS);\n      final int maxDepth = 256;\n      Files.walkFileTree(this.rootDirectory, options, maxDepth, new SimpleFileVisitor<Path>() {\n        @Override\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n          if (file.getFileName().toString().equals(PROPERTIES_FILENAME)) {\n            CoreDescriptor cd = buildCoreDescriptor(file, cc);\n            logger.info(\"Found core {} in {}\", cd.getName(), cd.getInstanceDir());\n            cds.add(cd);\n            return FileVisitResult.SKIP_SIBLINGS;\n          }\n          return FileVisitResult.CONTINUE;\n        }\n\n        @Override\n        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n          // if we get an error on the root, then fail the whole thing\n          // otherwise, log a warning and continue to try and load other cores\n          if (file.equals(rootDirectory)) {\n            logger.error(\"Error reading core root directory {}: {}\", file, exc);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading core root directory\");\n          }\n          logger.warn(\"Error visiting {}: {}\", file, exc);\n          return FileVisitResult.CONTINUE;\n        }\n      });\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Couldn't walk file tree under \" + this.rootDirectory, e);\n    }\n    logger.info(\"Found {} core definitions\", cds.size());\n    return cds;\n  }\n\n","sourceOld":"  @Override\n  public List<CoreDescriptor> discover(final CoreContainer cc) {\n    logger.info(\"Looking for core definitions underneath {}\", rootDirectory);\n    final List<CoreDescriptor> cds = Lists.newArrayList();\n    try {\n      Files.walkFileTree(this.rootDirectory, new SimpleFileVisitor<Path>() {\n        @Override\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n          if (file.getFileName().toString().equals(PROPERTIES_FILENAME)) {\n            CoreDescriptor cd = buildCoreDescriptor(file, cc);\n            logger.info(\"Found core {} in {}\", cd.getName(), cd.getInstanceDir());\n            cds.add(cd);\n            return FileVisitResult.SKIP_SIBLINGS;\n          }\n          return FileVisitResult.CONTINUE;\n        }\n\n        @Override\n        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n          // if we get an error on the root, then fail the whole thing\n          // otherwise, log a warning and continue to try and load other cores\n          if (file.equals(rootDirectory)) {\n            logger.error(\"Error reading core root directory {}: {}\", file, exc);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading core root directory\");\n          }\n          logger.warn(\"Error visiting {}: {}\", file, exc);\n          return FileVisitResult.CONTINUE;\n        }\n      });\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Couldn't walk file tree under \" + this.rootDirectory, e);\n    }\n    logger.info(\"Found {} core definitions\", cds.size());\n    return cds;\n  }\n\n","bugFix":["bfff642564a0bd7d0848b5e8146a64f7623f6612"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","sourceNew":"  @Override\n  public List<CoreDescriptor> discover(final CoreContainer cc) {\n    logger.debug(\"Looking for core definitions underneath {}\", rootDirectory);\n    final List<CoreDescriptor> cds = Lists.newArrayList();\n    try {\n      Set<FileVisitOption> options = new HashSet<>();\n      options.add(FileVisitOption.FOLLOW_LINKS);\n      final int maxDepth = 256;\n      Files.walkFileTree(this.rootDirectory, options, maxDepth, new SimpleFileVisitor<Path>() {\n        @Override\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n          if (file.getFileName().toString().equals(PROPERTIES_FILENAME)) {\n            CoreDescriptor cd = buildCoreDescriptor(file, cc);\n            logger.debug(\"Found core {} in {}\", cd.getName(), cd.getInstanceDir());\n            cds.add(cd);\n            return FileVisitResult.SKIP_SIBLINGS;\n          }\n          return FileVisitResult.CONTINUE;\n        }\n\n        @Override\n        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n          // if we get an error on the root, then fail the whole thing\n          // otherwise, log a warning and continue to try and load other cores\n          if (file.equals(rootDirectory)) {\n            logger.error(\"Error reading core root directory {}: {}\", file, exc);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading core root directory\");\n          }\n          logger.warn(\"Error visiting {}: {}\", file, exc);\n          return FileVisitResult.CONTINUE;\n        }\n      });\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Couldn't walk file tree under \" + this.rootDirectory, e);\n    }\n    logger.info(\"Found {} core definitions underneath {}\", cds.size(), rootDirectory);\n    if (cds.size() > 0) {\n      logger.info(\"Cores are: {}\", cds.stream().map(CoreDescriptor::getName).collect(Collectors.toList()));\n    }\n    return cds;\n  }\n\n","sourceOld":"  @Override\n  public List<CoreDescriptor> discover(final CoreContainer cc) {\n    logger.info(\"Looking for core definitions underneath {}\", rootDirectory);\n    final List<CoreDescriptor> cds = Lists.newArrayList();\n    try {\n      Set<FileVisitOption> options = new HashSet<>();\n      options.add(FileVisitOption.FOLLOW_LINKS);\n      final int maxDepth = 256;\n      Files.walkFileTree(this.rootDirectory, options, maxDepth, new SimpleFileVisitor<Path>() {\n        @Override\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n          if (file.getFileName().toString().equals(PROPERTIES_FILENAME)) {\n            CoreDescriptor cd = buildCoreDescriptor(file, cc);\n            logger.info(\"Found core {} in {}\", cd.getName(), cd.getInstanceDir());\n            cds.add(cd);\n            return FileVisitResult.SKIP_SIBLINGS;\n          }\n          return FileVisitResult.CONTINUE;\n        }\n\n        @Override\n        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n          // if we get an error on the root, then fail the whole thing\n          // otherwise, log a warning and continue to try and load other cores\n          if (file.equals(rootDirectory)) {\n            logger.error(\"Error reading core root directory {}: {}\", file, exc);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading core root directory\");\n          }\n          logger.warn(\"Error visiting {}: {}\", file, exc);\n          return FileVisitResult.CONTINUE;\n        }\n      });\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Couldn't walk file tree under \" + this.rootDirectory, e);\n    }\n    logger.info(\"Found {} core definitions\", cds.size());\n    return cds;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","sourceNew":"  @Override\n  public List<CoreDescriptor> discover(final CoreContainer cc) {\n    logger.debug(\"Looking for core definitions underneath {}\", rootDirectory);\n    final List<CoreDescriptor> cds = Lists.newArrayList();\n    try {\n      Set<FileVisitOption> options = new HashSet<>();\n      options.add(FileVisitOption.FOLLOW_LINKS);\n      final int maxDepth = 256;\n      Files.walkFileTree(this.rootDirectory, options, maxDepth, new SimpleFileVisitor<Path>() {\n        @Override\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n          if (file.getFileName().toString().equals(PROPERTIES_FILENAME)) {\n            CoreDescriptor cd = buildCoreDescriptor(file, cc);\n            logger.debug(\"Found core {} in {}\", cd.getName(), cd.getInstanceDir());\n            cds.add(cd);\n            return FileVisitResult.SKIP_SIBLINGS;\n          }\n          return FileVisitResult.CONTINUE;\n        }\n\n        @Override\n        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n          // if we get an error on the root, then fail the whole thing\n          // otherwise, log a warning and continue to try and load other cores\n          if (file.equals(rootDirectory)) {\n            logger.error(\"Error reading core root directory {}: {}\", file, exc);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading core root directory\");\n          }\n          logger.warn(\"Error visiting {}: {}\", file, exc);\n          return FileVisitResult.CONTINUE;\n        }\n      });\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Couldn't walk file tree under \" + this.rootDirectory, e);\n    }\n    logger.info(\"Found {} core definitions underneath {}\", cds.size(), rootDirectory);\n    if (cds.size() > 0) {\n      logger.info(\"Cores are: {}\", cds.stream().map(CoreDescriptor::getName).collect(Collectors.toList()));\n    }\n    return cds;\n  }\n\n","sourceOld":"  @Override\n  public List<CoreDescriptor> discover(final CoreContainer cc) {\n    logger.info(\"Looking for core definitions underneath {}\", rootDirectory);\n    final List<CoreDescriptor> cds = Lists.newArrayList();\n    try {\n      Set<FileVisitOption> options = new HashSet<>();\n      options.add(FileVisitOption.FOLLOW_LINKS);\n      final int maxDepth = 256;\n      Files.walkFileTree(this.rootDirectory, options, maxDepth, new SimpleFileVisitor<Path>() {\n        @Override\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n          if (file.getFileName().toString().equals(PROPERTIES_FILENAME)) {\n            CoreDescriptor cd = buildCoreDescriptor(file, cc);\n            logger.info(\"Found core {} in {}\", cd.getName(), cd.getInstanceDir());\n            cds.add(cd);\n            return FileVisitResult.SKIP_SIBLINGS;\n          }\n          return FileVisitResult.CONTINUE;\n        }\n\n        @Override\n        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n          // if we get an error on the root, then fail the whole thing\n          // otherwise, log a warning and continue to try and load other cores\n          if (file.equals(rootDirectory)) {\n            logger.error(\"Error reading core root directory {}: {}\", file, exc);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading core root directory\");\n          }\n          logger.warn(\"Error visiting {}: {}\", file, exc);\n          return FileVisitResult.CONTINUE;\n        }\n      });\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Couldn't walk file tree under \" + this.rootDirectory, e);\n    }\n    logger.info(\"Found {} core definitions\", cds.size());\n    return cds;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","sourceNew":"  @Override\n  public List<CoreDescriptor> discover(final CoreContainer cc) {\n    logger.debug(\"Looking for core definitions underneath {}\", rootDirectory);\n    final List<CoreDescriptor> cds = Lists.newArrayList();\n    try {\n      Set<FileVisitOption> options = new HashSet<>();\n      options.add(FileVisitOption.FOLLOW_LINKS);\n      final int maxDepth = 256;\n      Files.walkFileTree(this.rootDirectory, options, maxDepth, new SimpleFileVisitor<Path>() {\n        @Override\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n          if (file.getFileName().toString().equals(PROPERTIES_FILENAME)) {\n            CoreDescriptor cd = buildCoreDescriptor(file, cc);\n            logger.debug(\"Found core {} in {}\", cd.getName(), cd.getInstanceDir());\n            cds.add(cd);\n            return FileVisitResult.SKIP_SIBLINGS;\n          }\n          return FileVisitResult.CONTINUE;\n        }\n\n        @Override\n        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n          // if we get an error on the root, then fail the whole thing\n          // otherwise, log a warning and continue to try and load other cores\n          if (file.equals(rootDirectory)) {\n            logger.error(\"Error reading core root directory {}: {}\", file, exc);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading core root directory\");\n          }\n          logger.warn(\"Error visiting {}: {}\", file, exc);\n          return FileVisitResult.CONTINUE;\n        }\n      });\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Couldn't walk file tree under \" + this.rootDirectory, e);\n    }\n    logger.info(\"Found {} core definitions underneath {}\", cds.size(), rootDirectory);\n    if (cds.size() > 0) {\n      logger.info(\"Cores are: {}\", cds.stream().map(CoreDescriptor::getName).collect(Collectors.toList()));\n    }\n    return cds;\n  }\n\n","sourceOld":"  @Override\n  public List<CoreDescriptor> discover(final CoreContainer cc) {\n    logger.info(\"Looking for core definitions underneath {}\", rootDirectory);\n    final List<CoreDescriptor> cds = Lists.newArrayList();\n    try {\n      Set<FileVisitOption> options = new HashSet<>();\n      options.add(FileVisitOption.FOLLOW_LINKS);\n      final int maxDepth = 256;\n      Files.walkFileTree(this.rootDirectory, options, maxDepth, new SimpleFileVisitor<Path>() {\n        @Override\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n          if (file.getFileName().toString().equals(PROPERTIES_FILENAME)) {\n            CoreDescriptor cd = buildCoreDescriptor(file, cc);\n            logger.info(\"Found core {} in {}\", cd.getName(), cd.getInstanceDir());\n            cds.add(cd);\n            return FileVisitResult.SKIP_SIBLINGS;\n          }\n          return FileVisitResult.CONTINUE;\n        }\n\n        @Override\n        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n          // if we get an error on the root, then fail the whole thing\n          // otherwise, log a warning and continue to try and load other cores\n          if (file.equals(rootDirectory)) {\n            logger.error(\"Error reading core root directory {}: {}\", file, exc);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading core root directory\");\n          }\n          logger.warn(\"Error visiting {}: {}\", file, exc);\n          return FileVisitResult.CONTINUE;\n        }\n      });\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Couldn't walk file tree under \" + this.rootDirectory, e);\n    }\n    logger.info(\"Found {} core definitions\", cds.size());\n    return cds;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","sourceNew":"  @Override\n  public List<CoreDescriptor> discover(final CoreContainer cc) {\n    logger.debug(\"Looking for core definitions underneath {}\", rootDirectory);\n    final List<CoreDescriptor> cds = Lists.newArrayList();\n    try {\n      Set<FileVisitOption> options = new HashSet<>();\n      options.add(FileVisitOption.FOLLOW_LINKS);\n      final int maxDepth = 256;\n      Files.walkFileTree(this.rootDirectory, options, maxDepth, new SimpleFileVisitor<Path>() {\n        @Override\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n          if (file.getFileName().toString().equals(PROPERTIES_FILENAME)) {\n            CoreDescriptor cd = buildCoreDescriptor(file, cc);\n            logger.debug(\"Found core {} in {}\", cd.getName(), cd.getInstanceDir());\n            cds.add(cd);\n            return FileVisitResult.SKIP_SIBLINGS;\n          }\n          return FileVisitResult.CONTINUE;\n        }\n\n        @Override\n        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n          // if we get an error on the root, then fail the whole thing\n          // otherwise, log a warning and continue to try and load other cores\n          if (file.equals(rootDirectory)) {\n            logger.error(\"Error reading core root directory {}: {}\", file, exc);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading core root directory\");\n          }\n          logger.warn(\"Error visiting {}: {}\", file, exc);\n          return FileVisitResult.CONTINUE;\n        }\n      });\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Couldn't walk file tree under \" + this.rootDirectory, e);\n    }\n    logger.info(\"Found {} core definitions underneath {}\", cds.size(), rootDirectory);\n    if (cds.size() > 0) {\n      logger.info(\"Cores are: {}\", cds.stream().map(CoreDescriptor::getName).collect(Collectors.toList()));\n    }\n    return cds;\n  }\n\n","sourceOld":"  @Override\n  public List<CoreDescriptor> discover(final CoreContainer cc) {\n    logger.info(\"Looking for core definitions underneath {}\", rootDirectory);\n    final List<CoreDescriptor> cds = Lists.newArrayList();\n    try {\n      Set<FileVisitOption> options = new HashSet<>();\n      options.add(FileVisitOption.FOLLOW_LINKS);\n      final int maxDepth = 256;\n      Files.walkFileTree(this.rootDirectory, options, maxDepth, new SimpleFileVisitor<Path>() {\n        @Override\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n          if (file.getFileName().toString().equals(PROPERTIES_FILENAME)) {\n            CoreDescriptor cd = buildCoreDescriptor(file, cc);\n            logger.info(\"Found core {} in {}\", cd.getName(), cd.getInstanceDir());\n            cds.add(cd);\n            return FileVisitResult.SKIP_SIBLINGS;\n          }\n          return FileVisitResult.CONTINUE;\n        }\n\n        @Override\n        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n          // if we get an error on the root, then fail the whole thing\n          // otherwise, log a warning and continue to try and load other cores\n          if (file.equals(rootDirectory)) {\n            logger.error(\"Error reading core root directory {}: {}\", file, exc);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading core root directory\");\n          }\n          logger.warn(\"Error visiting {}: {}\", file, exc);\n          return FileVisitResult.CONTINUE;\n        }\n      });\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Couldn't walk file tree under \" + this.rootDirectory, e);\n    }\n    logger.info(\"Found {} core definitions\", cds.size());\n    return cds;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5","date":1493061731,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","sourceNew":"  @Override\n  public List<CoreDescriptor> discover(final CoreContainer cc) {\n    logger.debug(\"Looking for core definitions underneath {}\", rootDirectory);\n    final List<CoreDescriptor> cds = Lists.newArrayList();\n    try {\n      Set<FileVisitOption> options = new HashSet<>();\n      options.add(FileVisitOption.FOLLOW_LINKS);\n      final int maxDepth = 256;\n      Files.walkFileTree(this.rootDirectory, options, maxDepth, new SimpleFileVisitor<Path>() {\n        @Override\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n          if (file.getFileName().toString().equals(PROPERTIES_FILENAME)) {\n            CoreDescriptor cd = buildCoreDescriptor(file, cc);\n            if (cd != null) {\n              logger.debug(\"Found core {} in {}\", cd.getName(), cd.getInstanceDir());\n              cds.add(cd);\n            }\n            return FileVisitResult.SKIP_SIBLINGS;\n          }\n          return FileVisitResult.CONTINUE;\n        }\n\n        @Override\n        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n          // if we get an error on the root, then fail the whole thing\n          // otherwise, log a warning and continue to try and load other cores\n          if (file.equals(rootDirectory)) {\n            logger.error(\"Error reading core root directory {}: {}\", file, exc);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading core root directory\");\n          }\n          logger.warn(\"Error visiting {}: {}\", file, exc);\n          return FileVisitResult.CONTINUE;\n        }\n      });\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Couldn't walk file tree under \" + this.rootDirectory, e);\n    }\n    logger.info(\"Found {} core definitions underneath {}\", cds.size(), rootDirectory);\n    if (cds.size() > 0) {\n      logger.info(\"Cores are: {}\", cds.stream().map(CoreDescriptor::getName).collect(Collectors.toList()));\n    }\n    return cds;\n  }\n\n","sourceOld":"  @Override\n  public List<CoreDescriptor> discover(final CoreContainer cc) {\n    logger.debug(\"Looking for core definitions underneath {}\", rootDirectory);\n    final List<CoreDescriptor> cds = Lists.newArrayList();\n    try {\n      Set<FileVisitOption> options = new HashSet<>();\n      options.add(FileVisitOption.FOLLOW_LINKS);\n      final int maxDepth = 256;\n      Files.walkFileTree(this.rootDirectory, options, maxDepth, new SimpleFileVisitor<Path>() {\n        @Override\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n          if (file.getFileName().toString().equals(PROPERTIES_FILENAME)) {\n            CoreDescriptor cd = buildCoreDescriptor(file, cc);\n            logger.debug(\"Found core {} in {}\", cd.getName(), cd.getInstanceDir());\n            cds.add(cd);\n            return FileVisitResult.SKIP_SIBLINGS;\n          }\n          return FileVisitResult.CONTINUE;\n        }\n\n        @Override\n        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n          // if we get an error on the root, then fail the whole thing\n          // otherwise, log a warning and continue to try and load other cores\n          if (file.equals(rootDirectory)) {\n            logger.error(\"Error reading core root directory {}: {}\", file, exc);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading core root directory\");\n          }\n          logger.warn(\"Error visiting {}: {}\", file, exc);\n          return FileVisitResult.CONTINUE;\n        }\n      });\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Couldn't walk file tree under \" + this.rootDirectory, e);\n    }\n    logger.info(\"Found {} core definitions underneath {}\", cds.size(), rootDirectory);\n    if (cds.size() > 0) {\n      logger.info(\"Cores are: {}\", cds.stream().map(CoreDescriptor::getName).collect(Collectors.toList()));\n    }\n    return cds;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","sourceNew":"  @Override\n  public List<CoreDescriptor> discover(final CoreContainer cc) {\n    logger.debug(\"Looking for core definitions underneath {}\", rootDirectory);\n    final List<CoreDescriptor> cds = Lists.newArrayList();\n    try {\n      Set<FileVisitOption> options = new HashSet<>();\n      options.add(FileVisitOption.FOLLOW_LINKS);\n      final int maxDepth = 256;\n      Files.walkFileTree(this.rootDirectory, options, maxDepth, new SimpleFileVisitor<Path>() {\n        @Override\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n          if (file.getFileName().toString().equals(PROPERTIES_FILENAME)) {\n            CoreDescriptor cd = buildCoreDescriptor(file, cc);\n            if (cd != null) {\n              logger.debug(\"Found core {} in {}\", cd.getName(), cd.getInstanceDir());\n              cds.add(cd);\n            }\n            return FileVisitResult.SKIP_SIBLINGS;\n          }\n          return FileVisitResult.CONTINUE;\n        }\n\n        @Override\n        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n          // if we get an error on the root, then fail the whole thing\n          // otherwise, log a warning and continue to try and load other cores\n          if (file.equals(rootDirectory)) {\n            logger.error(\"Error reading core root directory {}: {}\", file, exc);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading core root directory\");\n          }\n          logger.warn(\"Error visiting {}: {}\", file, exc);\n          return FileVisitResult.CONTINUE;\n        }\n      });\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Couldn't walk file tree under \" + this.rootDirectory, e);\n    }\n    logger.info(\"Found {} core definitions underneath {}\", cds.size(), rootDirectory);\n    if (cds.size() > 0) {\n      logger.info(\"Cores are: {}\", cds.stream().map(CoreDescriptor::getName).collect(Collectors.toList()));\n    }\n    return cds;\n  }\n\n","sourceOld":"  @Override\n  public List<CoreDescriptor> discover(final CoreContainer cc) {\n    logger.debug(\"Looking for core definitions underneath {}\", rootDirectory);\n    final List<CoreDescriptor> cds = Lists.newArrayList();\n    try {\n      Set<FileVisitOption> options = new HashSet<>();\n      options.add(FileVisitOption.FOLLOW_LINKS);\n      final int maxDepth = 256;\n      Files.walkFileTree(this.rootDirectory, options, maxDepth, new SimpleFileVisitor<Path>() {\n        @Override\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n          if (file.getFileName().toString().equals(PROPERTIES_FILENAME)) {\n            CoreDescriptor cd = buildCoreDescriptor(file, cc);\n            logger.debug(\"Found core {} in {}\", cd.getName(), cd.getInstanceDir());\n            cds.add(cd);\n            return FileVisitResult.SKIP_SIBLINGS;\n          }\n          return FileVisitResult.CONTINUE;\n        }\n\n        @Override\n        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n          // if we get an error on the root, then fail the whole thing\n          // otherwise, log a warning and continue to try and load other cores\n          if (file.equals(rootDirectory)) {\n            logger.error(\"Error reading core root directory {}: {}\", file, exc);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading core root directory\");\n          }\n          logger.warn(\"Error visiting {}: {}\", file, exc);\n          return FileVisitResult.CONTINUE;\n        }\n      });\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Couldn't walk file tree under \" + this.rootDirectory, e);\n    }\n    logger.info(\"Found {} core definitions underneath {}\", cds.size(), rootDirectory);\n    if (cds.size() > 0) {\n      logger.info(\"Cores are: {}\", cds.stream().map(CoreDescriptor::getName).collect(Collectors.toList()));\n    }\n    return cds;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c80f6f4fe2e841ba56e6ce200951063ab91196d3","date":1533052731,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","sourceNew":"  @Override\n  public List<CoreDescriptor> discover(final CoreContainer cc) {\n    log.debug(\"Looking for core definitions underneath {}\", rootDirectory);\n    final List<CoreDescriptor> cds = Lists.newArrayList();\n    try {\n      Set<FileVisitOption> options = new HashSet<>();\n      options.add(FileVisitOption.FOLLOW_LINKS);\n      final int maxDepth = 256;\n      Files.walkFileTree(this.rootDirectory, options, maxDepth, new SimpleFileVisitor<Path>() {\n        @Override\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n          if (file.getFileName().toString().equals(PROPERTIES_FILENAME)) {\n            CoreDescriptor cd = buildCoreDescriptor(file, cc);\n            if (cd != null) {\n              log.debug(\"Found core {} in {}\", cd.getName(), cd.getInstanceDir());\n              cds.add(cd);\n            }\n            return FileVisitResult.SKIP_SIBLINGS;\n          }\n          return FileVisitResult.CONTINUE;\n        }\n\n        @Override\n        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n          // if we get an error on the root, then fail the whole thing\n          // otherwise, log a warning and continue to try and load other cores\n          if (file.equals(rootDirectory)) {\n            log.error(\"Error reading core root directory {}: {}\", file, exc);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading core root directory\");\n          }\n          log.warn(\"Error visiting {}: {}\", file, exc);\n          return FileVisitResult.CONTINUE;\n        }\n      });\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Couldn't walk file tree under \" + this.rootDirectory, e);\n    }\n    log.info(\"Found {} core definitions underneath {}\", cds.size(), rootDirectory);\n    if (cds.size() > 0) {\n      log.info(\"Cores are: {}\", cds.stream().map(CoreDescriptor::getName).collect(Collectors.toList()));\n    }\n    return cds;\n  }\n\n","sourceOld":"  @Override\n  public List<CoreDescriptor> discover(final CoreContainer cc) {\n    logger.debug(\"Looking for core definitions underneath {}\", rootDirectory);\n    final List<CoreDescriptor> cds = Lists.newArrayList();\n    try {\n      Set<FileVisitOption> options = new HashSet<>();\n      options.add(FileVisitOption.FOLLOW_LINKS);\n      final int maxDepth = 256;\n      Files.walkFileTree(this.rootDirectory, options, maxDepth, new SimpleFileVisitor<Path>() {\n        @Override\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n          if (file.getFileName().toString().equals(PROPERTIES_FILENAME)) {\n            CoreDescriptor cd = buildCoreDescriptor(file, cc);\n            if (cd != null) {\n              logger.debug(\"Found core {} in {}\", cd.getName(), cd.getInstanceDir());\n              cds.add(cd);\n            }\n            return FileVisitResult.SKIP_SIBLINGS;\n          }\n          return FileVisitResult.CONTINUE;\n        }\n\n        @Override\n        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n          // if we get an error on the root, then fail the whole thing\n          // otherwise, log a warning and continue to try and load other cores\n          if (file.equals(rootDirectory)) {\n            logger.error(\"Error reading core root directory {}: {}\", file, exc);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading core root directory\");\n          }\n          logger.warn(\"Error visiting {}: {}\", file, exc);\n          return FileVisitResult.CONTINUE;\n        }\n      });\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Couldn't walk file tree under \" + this.rootDirectory, e);\n    }\n    logger.info(\"Found {} core definitions underneath {}\", cds.size(), rootDirectory);\n    if (cds.size() > 0) {\n      logger.info(\"Cores are: {}\", cds.stream().map(CoreDescriptor::getName).collect(Collectors.toList()));\n    }\n    return cds;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CorePropertiesLocator#discover(CoreContainer).mjava","sourceNew":"  @Override\n  public List<CoreDescriptor> discover(final CoreContainer cc) {\n    log.debug(\"Looking for core definitions underneath {}\", rootDirectory);\n    final List<CoreDescriptor> cds = Lists.newArrayList();\n    try {\n      Set<FileVisitOption> options = new HashSet<>();\n      options.add(FileVisitOption.FOLLOW_LINKS);\n      final int maxDepth = 256;\n      Files.walkFileTree(this.rootDirectory, options, maxDepth, new SimpleFileVisitor<Path>() {\n        @Override\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n          if (file.getFileName().toString().equals(PROPERTIES_FILENAME)) {\n            CoreDescriptor cd = buildCoreDescriptor(file, cc);\n            if (cd != null) {\n              if (log.isDebugEnabled()) {\n                log.debug(\"Found core {} in {}\", cd.getName(), cd.getInstanceDir());\n              }\n              cds.add(cd);\n            }\n            return FileVisitResult.SKIP_SIBLINGS;\n          }\n          return FileVisitResult.CONTINUE;\n        }\n\n        @Override\n        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n          // if we get an error on the root, then fail the whole thing\n          // otherwise, log a warning and continue to try and load other cores\n          if (file.equals(rootDirectory)) {\n            log.error(\"Error reading core root directory {}: {}\", file, exc);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading core root directory\");\n          }\n          log.warn(\"Error visiting {}: {}\", file, exc);\n          return FileVisitResult.CONTINUE;\n        }\n      });\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Couldn't walk file tree under \" + this.rootDirectory, e);\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"Found {} core definitions underneath {}\", cds.size(), rootDirectory);\n    }\n    if (cds.size() > 0) {\n      if (log.isInfoEnabled()) {\n        log.info(\"Cores are: {}\", cds.stream().map(CoreDescriptor::getName).collect(Collectors.toList()));\n      }\n    }\n    return cds;\n  }\n\n","sourceOld":"  @Override\n  public List<CoreDescriptor> discover(final CoreContainer cc) {\n    log.debug(\"Looking for core definitions underneath {}\", rootDirectory);\n    final List<CoreDescriptor> cds = Lists.newArrayList();\n    try {\n      Set<FileVisitOption> options = new HashSet<>();\n      options.add(FileVisitOption.FOLLOW_LINKS);\n      final int maxDepth = 256;\n      Files.walkFileTree(this.rootDirectory, options, maxDepth, new SimpleFileVisitor<Path>() {\n        @Override\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n          if (file.getFileName().toString().equals(PROPERTIES_FILENAME)) {\n            CoreDescriptor cd = buildCoreDescriptor(file, cc);\n            if (cd != null) {\n              log.debug(\"Found core {} in {}\", cd.getName(), cd.getInstanceDir());\n              cds.add(cd);\n            }\n            return FileVisitResult.SKIP_SIBLINGS;\n          }\n          return FileVisitResult.CONTINUE;\n        }\n\n        @Override\n        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n          // if we get an error on the root, then fail the whole thing\n          // otherwise, log a warning and continue to try and load other cores\n          if (file.equals(rootDirectory)) {\n            log.error(\"Error reading core root directory {}: {}\", file, exc);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading core root directory\");\n          }\n          log.warn(\"Error visiting {}: {}\", file, exc);\n          return FileVisitResult.CONTINUE;\n        }\n      });\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Couldn't walk file tree under \" + this.rootDirectory, e);\n    }\n    log.info(\"Found {} core definitions underneath {}\", cds.size(), rootDirectory);\n    if (cds.size() > 0) {\n      log.info(\"Cores are: {}\", cds.stream().map(CoreDescriptor::getName).collect(Collectors.toList()));\n    }\n    return cds;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"665df8f5fdfcee3503b13769cc0205ac185297c7":["bfff642564a0bd7d0848b5e8146a64f7623f6612"],"c80f6f4fe2e841ba56e6ce200951063ab91196d3":["fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["665df8f5fdfcee3503b13769cc0205ac185297c7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["665df8f5fdfcee3503b13769cc0205ac185297c7","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bfff642564a0bd7d0848b5e8146a64f7623f6612":["429eefa8bf427c2fbc5d85905fea54b2f76081f5"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5"],"126d6ad24eed13163ba0959435d5a80e5672837c":["665df8f5fdfcee3503b13769cc0205ac185297c7","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"140be51d03394488536f4aacedace29f9b318347":["c80f6f4fe2e841ba56e6ce200951063ab91196d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["665df8f5fdfcee3503b13769cc0205ac185297c7","126d6ad24eed13163ba0959435d5a80e5672837c"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140be51d03394488536f4aacedace29f9b318347"],"429eefa8bf427c2fbc5d85905fea54b2f76081f5":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"665df8f5fdfcee3503b13769cc0205ac185297c7":["7f0c8426396c925de8db3ed3f8ff40fd73670a5c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","126d6ad24eed13163ba0959435d5a80e5672837c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c80f6f4fe2e841ba56e6ce200951063ab91196d3":["140be51d03394488536f4aacedace29f9b318347"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"bfff642564a0bd7d0848b5e8146a64f7623f6612":["665df8f5fdfcee3503b13769cc0205ac185297c7"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5"],"140be51d03394488536f4aacedace29f9b318347":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","429eefa8bf427c2fbc5d85905fea54b2f76081f5"],"fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5":["c80f6f4fe2e841ba56e6ce200951063ab91196d3","e9017cf144952056066919f1ebc7897ff9bd71b1"],"429eefa8bf427c2fbc5d85905fea54b2f76081f5":["bfff642564a0bd7d0848b5e8146a64f7623f6612"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}