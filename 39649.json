{"path":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","sourceNew":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean() ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, null, null);\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","sourceOld":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean() ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, null, null);\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","sourceNew":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random().nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random().nextBoolean(), random().nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random().nextBoolean(), random().nextBoolean(),\n          random().nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random().nextBoolean(), random().nextBoolean(),\n          random().nextBoolean(),\n          random().nextBoolean(), random().nextBoolean() ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, null, null);\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random().nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","sourceOld":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random.nextBoolean(), random.nextBoolean(),\n          random.nextBoolean(),\n          random.nextBoolean(), random.nextBoolean() ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, null, null);\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random.nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c22d44fa0ab988ba3253471cce23610e45a91052","date":1337131019,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","sourceNew":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random().nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random().nextBoolean(), random().nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random().nextBoolean(), random().nextBoolean(),\n          random().nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random().nextBoolean(), random().nextBoolean(),\n          random().nextBoolean(),\n          random().nextBoolean(), random().nextBoolean() ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, null, null);\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random().nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldInfo(fi.number).name);\n    }\n    \n  }\n\n","sourceOld":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random().nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random().nextBoolean(), random().nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random().nextBoolean(), random().nextBoolean(),\n          random().nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random().nextBoolean(), random().nextBoolean(),\n          random().nextBoolean(),\n          random().nextBoolean(), random().nextBoolean() ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, null, null);\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random().nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b","date":1337136355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","sourceNew":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldInfo(fi.number).name);\n    }\n  }\n\n","sourceOld":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random().nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random().nextBoolean(), random().nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random().nextBoolean(), random().nextBoolean(),\n          random().nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random().nextBoolean(), random().nextBoolean(),\n          random().nextBoolean(),\n          random().nextBoolean(), random().nextBoolean() ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, null, null);\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random().nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldInfo(fi.number).name);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","sourceNew":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldInfo(fi.number).name);\n    }\n  }\n\n","sourceOld":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {\n    assertTrue(readOnly.isReadOnly());\n    assertFalse(modifiable.isReadOnly());\n    try {\n      readOnly.add(modifiable.fieldInfo(0));\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    try {\n      readOnly.addOrUpdate(\"bogus\", random().nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random().nextBoolean(), random().nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random().nextBoolean(), random().nextBoolean(),\n          random().nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(\"bogus\", random().nextBoolean(), random().nextBoolean(),\n          random().nextBoolean(),\n          random().nextBoolean(), random().nextBoolean() ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, null, null);\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    try {\n      readOnly.addOrUpdate(Arrays.asList(\"a\", \"b\", \"c\"), random().nextBoolean());\n      fail(\"instance should be read only\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldName(fi.number));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb","date":1411653326,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","sourceNew":null,"sourceOld":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldInfo(fi.number).name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#assertReadOnly(FieldInfos,FieldInfos).mjava","sourceNew":null,"sourceOld":"  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {    \n    assertEquals(modifiable.size(), readOnly.size());\n    // assert we can iterate\n    for (FieldInfo fi : readOnly) {\n      assertEquals(fi.name, modifiable.fieldInfo(fi.number).name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["c22d44fa0ab988ba3253471cce23610e45a91052"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"c22d44fa0ab988ba3253471cce23610e45a91052":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["5f6bd27530a2846413fe2d00030493c0e2d3a072","c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","c22d44fa0ab988ba3253471cce23610e45a91052"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"c22d44fa0ab988ba3253471cce23610e45a91052":["f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}