{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#testInclusiveLowerNumericRange().mjava","commits":[{"id":"e91b7614171e0a6a82351457c2870d2a0124ba9a","date":1312225025,"type":0,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#testInclusiveLowerNumericRange().mjava","pathOld":"/dev/null","sourceNew":"   @Test\n  // test disabled since standard syntax parser does not work with inclusive and\n  // exclusive at the same time\n  public void testInclusiveLowerNumericRange() throws Exception {\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.ZERO, false, true, 1);\n    assertRangeQuery(NumberType.ZERO, NumberType.POSITIVE, false, true, 1);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.POSITIVE, false, true, 2);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.NEGATIVE, false, true, 0);\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#testInclusiveLowerNumericRange().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#testInclusiveLowerNumericRange().mjava","sourceNew":"   @Test\n  // test disabled since standard syntax parser does not work with inclusive and\n  // exclusive at the same time\n  public void testInclusiveLowerNumericRange() throws Exception {\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.ZERO, false, true, 1);\n    assertRangeQuery(NumberType.ZERO, NumberType.POSITIVE, false, true, 1);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.POSITIVE, false, true, 2);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.NEGATIVE, false, true, 0);\n   }\n\n","sourceOld":"   @Test\n  // test disabled since standard syntax parser does not work with inclusive and\n  // exclusive at the same time\n  public void testInclusiveLowerNumericRange() throws Exception {\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.ZERO, false, true, 1);\n    assertRangeQuery(NumberType.ZERO, NumberType.POSITIVE, false, true, 1);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.POSITIVE, false, true, 2);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.NEGATIVE, false, true, 0);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e91b7614171e0a6a82351457c2870d2a0124ba9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"e91b7614171e0a6a82351457c2870d2a0124ba9a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}