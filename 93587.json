{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene42/Lucene42TermVectorsWriter#flushFieldNums().mjava","commits":[{"id":"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6","date":1411857884,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene42/Lucene42TermVectorsWriter#flushFieldNums().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a sorted array containing unique field numbers */\n  private int[] flushFieldNums() throws IOException {\n    SortedSet<Integer> fieldNums = new TreeSet<>();\n    for (DocData dd : pendingDocs) {\n      for (FieldData fd : dd.fields) {\n        fieldNums.add(fd.fieldNum);\n      }\n    }\n\n    final int numDistinctFields = fieldNums.size();\n    assert numDistinctFields > 0;\n    final int bitsRequired = PackedInts.bitsRequired(fieldNums.last());\n    final int token = (Math.min(numDistinctFields - 1, 0x07) << 5) | bitsRequired;\n    vectorsStream.writeByte((byte) token);\n    if (numDistinctFields - 1 >= 0x07) {\n      vectorsStream.writeVInt(numDistinctFields - 1 - 0x07);\n    }\n    final PackedInts.Writer writer = PackedInts.getWriterNoHeader(vectorsStream, PackedInts.Format.PACKED, fieldNums.size(), bitsRequired, 1);\n    for (Integer fieldNum : fieldNums) {\n      writer.add(fieldNum);\n    }\n    writer.finish();\n\n    int[] fns = new int[fieldNums.size()];\n    int i = 0;\n    for (Integer key : fieldNums) {\n      fns[i++] = key;\n    }\n    return fns;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene42/Lucene42TermVectorsWriter#flushFieldNums().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a sorted array containing unique field numbers */\n  private int[] flushFieldNums() throws IOException {\n    SortedSet<Integer> fieldNums = new TreeSet<>();\n    for (DocData dd : pendingDocs) {\n      for (FieldData fd : dd.fields) {\n        fieldNums.add(fd.fieldNum);\n      }\n    }\n\n    final int numDistinctFields = fieldNums.size();\n    assert numDistinctFields > 0;\n    final int bitsRequired = PackedInts.bitsRequired(fieldNums.last());\n    final int token = (Math.min(numDistinctFields - 1, 0x07) << 5) | bitsRequired;\n    vectorsStream.writeByte((byte) token);\n    if (numDistinctFields - 1 >= 0x07) {\n      vectorsStream.writeVInt(numDistinctFields - 1 - 0x07);\n    }\n    final PackedInts.Writer writer = PackedInts.getWriterNoHeader(vectorsStream, PackedInts.Format.PACKED, fieldNums.size(), bitsRequired, 1);\n    for (Integer fieldNum : fieldNums) {\n      writer.add(fieldNum);\n    }\n    writer.finish();\n\n    int[] fns = new int[fieldNums.size()];\n    int i = 0;\n    for (Integer key : fieldNums) {\n      fns[i++] = key;\n    }\n    return fns;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene42/Lucene42TermVectorsWriter#flushFieldNums().mjava","sourceNew":null,"sourceOld":"  /** Returns a sorted array containing unique field numbers */\n  private int[] flushFieldNums() throws IOException {\n    SortedSet<Integer> fieldNums = new TreeSet<>();\n    for (DocData dd : pendingDocs) {\n      for (FieldData fd : dd.fields) {\n        fieldNums.add(fd.fieldNum);\n      }\n    }\n\n    final int numDistinctFields = fieldNums.size();\n    assert numDistinctFields > 0;\n    final int bitsRequired = PackedInts.bitsRequired(fieldNums.last());\n    final int token = (Math.min(numDistinctFields - 1, 0x07) << 5) | bitsRequired;\n    vectorsStream.writeByte((byte) token);\n    if (numDistinctFields - 1 >= 0x07) {\n      vectorsStream.writeVInt(numDistinctFields - 1 - 0x07);\n    }\n    final PackedInts.Writer writer = PackedInts.getWriterNoHeader(vectorsStream, PackedInts.Format.PACKED, fieldNums.size(), bitsRequired, 1);\n    for (Integer fieldNum : fieldNums) {\n      writer.add(fieldNum);\n    }\n    writer.finish();\n\n    int[] fns = new int[fieldNums.size()];\n    int i = 0;\n    for (Integer key : fieldNums) {\n      fns[i++] = key;\n    }\n    return fns;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d5291145ae0cea7e6e6a2379f3a32643bf71bf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"9bb9a29a5e71a90295f175df8919802993142c9a":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9bb9a29a5e71a90295f175df8919802993142c9a","3d5291145ae0cea7e6e6a2379f3a32643bf71bf6"],"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6":["9bb9a29a5e71a90295f175df8919802993142c9a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}