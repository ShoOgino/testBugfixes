{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#setNextReader(IndexReader.AtomicReaderContext).mjava","commits":[{"id":"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00","date":1317931776,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#setNextReader(IndexReader.AtomicReaderContext).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#setNextReader(IndexReader.AtomicReaderContext).mjava","sourceNew":"    public void setNextReader(IndexReader.AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, groupField);\n      for (int i = 0; i < fields.length; i++) {\n        if (fields[i].getType() == SortField.Type.SCORE) {\n          continue;\n        }\n\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader, fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.numOrd()];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int ord = groupIndex.binarySearchLookup(collectedGroup.groupValue, scratchBytesRef);\n        if (ord >= 0) {\n          ordSet.put(ord);\n          segmentGroupHeads[ord] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            if (fields[i].getType() == SortField.Type.SCORE) {\n              continue;\n            }\n\n            collectedGroup.sortOrds[i] = sortsIndex[i].binarySearchLookup(collectedGroup.sortValues[i], scratchBytesRef);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void setNextReader(IndexReader.AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, groupField);\n      for (int i = 0; i < fields.length; i++) {\n        if (fields[i].getType() == SortField.Type.SCORE) {\n          continue;\n        }\n\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader, fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.numOrd()];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int ord = groupIndex.binarySearchLookup(collectedGroup.groupValue, scratchBytesRef);\n        if (ord >= 0) {\n          ordSet.put(ord);\n          segmentGroupHeads[ord] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            if (fields[i].getType() == SortField.Type.SCORE) {\n              continue;\n            }\n\n            collectedGroup.sortOrds[i] = sortsIndex[i].binarySearchLookup(collectedGroup.sortValues[i], scratchBytesRef);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7528ec8c6e88061e2e6af98c4ae1f72a30f180b2","date":1327854270,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#setNextReader(IndexReader.AtomicReaderContext).mjava","sourceNew":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        if (fields[i].getType() == SortField.Type.SCORE) {\n          continue;\n        }\n\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.numOrd()];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int ord = groupIndex.binarySearchLookup(collectedGroup.groupValue, scratchBytesRef);\n        if (ord >= 0) {\n          ordSet.put(ord);\n          segmentGroupHeads[ord] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            if (fields[i].getType() == SortField.Type.SCORE) {\n              continue;\n            }\n\n            collectedGroup.sortOrds[i] = sortsIndex[i].binarySearchLookup(collectedGroup.sortValues[i], scratchBytesRef);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void setNextReader(IndexReader.AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, groupField);\n      for (int i = 0; i < fields.length; i++) {\n        if (fields[i].getType() == SortField.Type.SCORE) {\n          continue;\n        }\n\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader, fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.numOrd()];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int ord = groupIndex.binarySearchLookup(collectedGroup.groupValue, scratchBytesRef);\n        if (ord >= 0) {\n          ordSet.put(ord);\n          segmentGroupHeads[ord] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            if (fields[i].getType() == SortField.Type.SCORE) {\n              continue;\n            }\n\n            collectedGroup.sortOrds[i] = sortsIndex[i].binarySearchLookup(collectedGroup.sortValues[i], scratchBytesRef);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#setNextReader(IndexReader.AtomicReaderContext).mjava","sourceNew":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        if (fields[i].getType() == SortField.Type.SCORE) {\n          continue;\n        }\n\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.numOrd()];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int ord = groupIndex.binarySearchLookup(collectedGroup.groupValue, scratchBytesRef);\n        if (ord >= 0) {\n          ordSet.put(ord);\n          segmentGroupHeads[ord] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            if (fields[i].getType() == SortField.Type.SCORE) {\n              continue;\n            }\n\n            collectedGroup.sortOrds[i] = sortsIndex[i].binarySearchLookup(collectedGroup.sortValues[i], scratchBytesRef);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void setNextReader(IndexReader.AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, groupField);\n      for (int i = 0; i < fields.length; i++) {\n        if (fields[i].getType() == SortField.Type.SCORE) {\n          continue;\n        }\n\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader, fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.numOrd()];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int ord = groupIndex.binarySearchLookup(collectedGroup.groupValue, scratchBytesRef);\n        if (ord >= 0) {\n          ordSet.put(ord);\n          segmentGroupHeads[ord] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            if (fields[i].getType() == SortField.Type.SCORE) {\n              continue;\n            }\n\n            collectedGroup.sortOrds[i] = sortsIndex[i].binarySearchLookup(collectedGroup.sortValues[i], scratchBytesRef);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7528ec8c6e88061e2e6af98c4ae1f72a30f180b2":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00","7528ec8c6e88061e2e6af98c4ae1f72a30f180b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"]},"commit2Childs":{"7528ec8c6e88061e2e6af98c4ae1f72a30f180b2":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00":["7528ec8c6e88061e2e6af98c4ae1f72a30f180b2","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}