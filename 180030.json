{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","commits":[{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node4\", l.get(1).node);\n    assertEquals(\"node3\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node4\", l.get(1).node);\n    assertEquals(\"node3\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node4\", l.get(1).node);\n    assertEquals(\"node3\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node4\", l.get(1).node);\n    assertEquals(\"node3\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"/dev/null","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node4\", l.get(1).node);\n    assertEquals(\"node3\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954590f07cfbe2c3ccb86e29d0742c43740ca509","date":1500371516,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node4\", l.get(1).node);\n    assertEquals(\"node3\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bccf7971a36bd151490117582a0a1a695081ead3","date":1502778995,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5088ce415a50eb8412f4942aeabe293e75c81e7","date":1504531555,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\",\"r1\"));\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\",\"r1\"));\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node4\", l.get(1).node);\n    assertEquals(\"node3\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\",\"r1\"));\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node4\", l.get(1).node);\n    assertEquals(\"node3\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"gettingstarted\")\n        .hint(Hint.SHARD, \"r1\");\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\",\"r1\"));\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\",\"r1\"));\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\",\"r1\"));\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\",\"r1\"));\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\",\"r1\"));\n    SolrParams operation = suggester.getSuggestion().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getSuggestion();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\",\"r1\"));\n    SolrParams operation = suggester.getOperation().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getOperation();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\", \"r1\"));\n    SolrParams operation = suggester.getSuggestion().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getSuggestion();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\",\"r1\"));\n    SolrParams operation = suggester.getSuggestion().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getSuggestion();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33ae23947c41339ea2b352422bb762dfb4a17077","date":1524235117,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\", \"r1\"));\n    SolrParams operation = suggester.getSuggestion().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getSuggestion();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","sourceOld":"  public void testRules() throws IOException {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\", \"r1\"));\n    SolrParams operation = suggester.getSuggestion().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getSuggestion();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78231225260fb5b3bf9920f203d71477d5501c65","date":1531726165,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSortedNodes();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\", \"r1\"));\n    SolrParams operation = suggester.getSuggestion().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getSuggestion();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","sourceOld":"  public void testRules() {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\", \"r1\"));\n    SolrParams operation = suggester.getSuggestion().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getSuggestion();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10a24d2afdf00bbe1013706b80c989315772dc9","date":1531726431,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\", \"r1\"));\n    SolrParams operation = suggester.getSuggestion().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getSuggestion();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","sourceOld":"  public void testRules() {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSortedNodes();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\", \"r1\"));\n    SolrParams operation = suggester.getSuggestion().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getSuggestion();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f91616b62c917fffa5286c4ef2d21b10cc56f8e","date":1531726562,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSortedNodes();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\", \"r1\"));\n    SolrParams operation = suggester.getSuggestion().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getSuggestion();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","sourceOld":"  public void testRules() {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\", \"r1\"));\n    SolrParams operation = suggester.getSuggestion().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getSuggestion();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSortedNodes();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\", \"r1\"));\n    SolrParams operation = suggester.getSuggestion().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getSuggestion();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","sourceOld":"  public void testRules() {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSorted();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\", \"r1\"));\n    SolrParams operation = suggester.getSuggestion().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getSuggestion();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddd9a76400512cda8f22bbc69e3d8b85672a91a","date":1559288755,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n    if(useNodeset){\n      rules = \"{\" +\n          \"cluster-policy:[\" +\n          \"{nodeset:{nodeRole:'overseer'},replica : 0 , strict:false},\" +\n          \"{replica:'<1',node:node3},\" +\n          \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n          \" cluster-preferences:[\" +\n          \"{minimize:cores , precision:2},\" +\n          \"{maximize:freedisk, precision:50}, \" +\n          \"{minimize:heapUsage, precision:1000}]}\";\n    }\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSortedNodes();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\", \"r1\"));\n    SolrParams operation = suggester.getSuggestion().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getSuggestion();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","sourceOld":"  public void testRules() {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSortedNodes();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\", \"r1\"));\n    SolrParams operation = suggester.getSuggestion().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getSuggestion();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  public void testRules() {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n    if(useNodeset){\n      rules = \"{\" +\n          \"cluster-policy:[\" +\n          \"{nodeset:{nodeRole:'overseer'},replica : 0 , strict:false},\" +\n          \"{replica:'<1',node:node3},\" +\n          \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n          \" cluster-preferences:[\" +\n          \"{minimize:cores , precision:2},\" +\n          \"{maximize:freedisk, precision:50}, \" +\n          \"{minimize:heapUsage, precision:1000}]}\";\n    }\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSortedNodes();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\", \"r1\"));\n    SolrParams operation = suggester.getSuggestion().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getSuggestion();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","sourceOld":"  public void testRules() {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSortedNodes();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\", \"r1\"));\n    SolrParams operation = suggester.getSuggestion().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getSuggestion();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testRules() {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n    if(useNodeset){\n      rules = \"{\" +\n          \"cluster-policy:[\" +\n          \"{nodeset:{nodeRole:'overseer'},replica : 0 , strict:false},\" +\n          \"{replica:'<1',node:node3},\" +\n          \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n          \" cluster-preferences:[\" +\n          \"{minimize:cores , precision:2},\" +\n          \"{maximize:freedisk, precision:50}, \" +\n          \"{minimize:heapUsage, precision:1000}]}\";\n    }\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSortedNodes();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\", \"r1\"));\n    SolrParams operation = suggester.getSuggestion().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getSuggestion();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","sourceOld":"  public void testRules() {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n    if(useNodeset){\n      rules = \"{\" +\n          \"cluster-policy:[\" +\n          \"{nodeset:{nodeRole:'overseer'},replica : 0 , strict:false},\" +\n          \"{replica:'<1',node:node3},\" +\n          \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n          \" cluster-preferences:[\" +\n          \"{minimize:cores , precision:2},\" +\n          \"{maximize:freedisk, precision:50}, \" +\n          \"{minimize:heapUsage, precision:1000}]}\";\n    }\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSortedNodes();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\", \"r1\"));\n    SolrParams operation = suggester.getSuggestion().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getSuggestion();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRules().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testRules() {\n    String rules = \"{\" +\n        \"cluster-policy:[\" +\n        \"{nodeRole:'overseer',replica : 0 , strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n        \" cluster-preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heapUsage, precision:1000}]}\";\n    if(useNodeset){\n      rules = \"{\" +\n          \"cluster-policy:[\" +\n          \"{nodeset:{nodeRole:'overseer'},replica : 0 , strict:false},\" +\n          \"{replica:'<1',node:node3},\" +\n          \"{replica:'<2',node:'#ANY', shard:'#EACH'}],\" +\n          \" cluster-preferences:[\" +\n          \"{minimize:cores , precision:2},\" +\n          \"{maximize:freedisk, precision:50}, \" +\n          \"{minimize:heapUsage, precision:1000}]}\";\n    }\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session;\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n\n    List<Row> l = session.getSortedNodes();\n    assertEquals(\"node1\", l.get(0).node);\n    assertEquals(\"node3\", l.get(1).node);\n    assertEquals(\"node4\", l.get(2).node);\n    assertEquals(\"node2\", l.get(3).node);\n\n\n    List<Violation> violations = session.getViolations();\n    assertEquals(3, violations.size());\n    assertTrue(violations.stream().anyMatch(violation -> \"node3\".equals(violation.getClause().tag.getValue())));\n    assertTrue(violations.stream().anyMatch(violation -> \"nodeRole\".equals(violation.getClause().tag.getName())));\n    assertTrue(violations.stream().anyMatch(violation -> (violation.getClause().replica.getOperand() == Operand.LESS_THAN && \"node\".equals(violation.getClause().tag.getName()))));\n\n    Suggester suggester = session.getSuggester(ADDREPLICA)\n        .hint(Hint.COLL_SHARD, new Pair<>(\"gettingstarted\", \"r1\"));\n    SolrParams operation = suggester.getSuggestion().getParams();\n    assertEquals(\"node2\", operation.get(\"node\"));\n\n    nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834},\" +\n        \"node5:{cores:0, freedisk: 895, heapUsage:17834},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}\" +\n        \"}\");\n    session = policy.createSession(getSolrCloudManager(nodeValues, clusterState));\n    SolrRequest opReq = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"node5\")\n        .getSuggestion();\n    assertNotNull(opReq);\n    assertEquals(\"node5\", opReq.getParams().get(\"targetNode\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","d5088ce415a50eb8412f4942aeabe293e75c81e7"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"954590f07cfbe2c3ccb86e29d0742c43740ca509":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"bccf7971a36bd151490117582a0a1a695081ead3":["954590f07cfbe2c3ccb86e29d0742c43740ca509"],"78231225260fb5b3bf9920f203d71477d5501c65":["33ae23947c41339ea2b352422bb762dfb4a17077"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"e4848fb683db0790f2847173af06e2ad2d03328e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["78231225260fb5b3bf9920f203d71477d5501c65"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["33ae23947c41339ea2b352422bb762dfb4a17077","8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"33ae23947c41339ea2b352422bb762dfb4a17077":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"d5088ce415a50eb8412f4942aeabe293e75c81e7":["bccf7971a36bd151490117582a0a1a695081ead3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["954590f07cfbe2c3ccb86e29d0742c43740ca509"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"954590f07cfbe2c3ccb86e29d0742c43740ca509":["bccf7971a36bd151490117582a0a1a695081ead3"],"bccf7971a36bd151490117582a0a1a695081ead3":["d5088ce415a50eb8412f4942aeabe293e75c81e7"],"78231225260fb5b3bf9920f203d71477d5501c65":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["33ae23947c41339ea2b352422bb762dfb4a17077"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","58af973abe9f7c0faa777c1a6285fc7f72c171c5","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a","e4848fb683db0790f2847173af06e2ad2d03328e"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["9ba1b632c041956c93c41aa1143d16a567014891","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"33ae23947c41339ea2b352422bb762dfb4a17077":["78231225260fb5b3bf9920f203d71477d5501c65","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"d5088ce415a50eb8412f4942aeabe293e75c81e7":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}