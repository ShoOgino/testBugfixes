{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#getLeaderId(SolrZkClient).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#getLeaderId(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerProcessor#getLeaderId(SolrZkClient).mjava","sourceNew":"  public static String getLeaderId(SolrZkClient zkClient) throws KeeperException,InterruptedException{\n    byte[] data = null;\n    try {\n      data = zkClient.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    } catch (KeeperException.NoNodeException e) {\n      return null;\n    }\n    Map m = (Map) Utils.fromJSON(data);\n    return  (String) m.get(\"id\");\n  }\n\n","sourceOld":"  public static String getLeaderId(SolrZkClient zkClient) throws KeeperException,InterruptedException{\n    byte[] data = null;\n    try {\n      data = zkClient.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    } catch (KeeperException.NoNodeException e) {\n      return null;\n    }\n    Map m = (Map) Utils.fromJSON(data);\n    return  (String) m.get(\"id\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5551d21c759979ad637581208f5ff5bd7497b5d7","date":1447783672,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#getLeaderId(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#getLeaderId(SolrZkClient).mjava","sourceNew":"  public static String getLeaderId(SolrZkClient zkClient) throws KeeperException,InterruptedException{\n    byte[] data = null;\n    try {\n      data = zkClient.getData(OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, new Stat(), true);\n    } catch (KeeperException.NoNodeException e) {\n      return null;\n    }\n    Map m = (Map) Utils.fromJSON(data);\n    return  (String) m.get(\"id\");\n  }\n\n","sourceOld":"  public static String getLeaderId(SolrZkClient zkClient) throws KeeperException,InterruptedException{\n    byte[] data = null;\n    try {\n      data = zkClient.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    } catch (KeeperException.NoNodeException e) {\n      return null;\n    }\n    Map m = (Map) Utils.fromJSON(data);\n    return  (String) m.get(\"id\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#getLeaderId(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#getLeaderId(SolrZkClient).mjava","sourceNew":"  public static String getLeaderId(SolrZkClient zkClient) throws KeeperException,InterruptedException{\n    byte[] data = null;\n    try {\n      data = zkClient.getData(Overseer.OVERSEER_ELECT + \"/leader\", null, new Stat(), true);\n    } catch (KeeperException.NoNodeException e) {\n      return null;\n    }\n    Map m = (Map) Utils.fromJSON(data);\n    return  (String) m.get(\"id\");\n  }\n\n","sourceOld":"  public static String getLeaderId(SolrZkClient zkClient) throws KeeperException,InterruptedException{\n    byte[] data = null;\n    try {\n      data = zkClient.getData(OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, new Stat(), true);\n    } catch (KeeperException.NoNodeException e) {\n      return null;\n    }\n    Map m = (Map) Utils.fromJSON(data);\n    return  (String) m.get(\"id\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#getLeaderId(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#getLeaderId(SolrZkClient).mjava","sourceNew":"  public static String getLeaderId(SolrZkClient zkClient) throws KeeperException,InterruptedException{\n    byte[] data = null;\n    try {\n      data = zkClient.getData(Overseer.OVERSEER_ELECT + \"/leader\", null, new Stat(), true);\n    } catch (KeeperException.NoNodeException e) {\n      return null;\n    }\n    Map m = (Map) Utils.fromJSON(data);\n    return  (String) m.get(ID);\n  }\n\n","sourceOld":"  public static String getLeaderId(SolrZkClient zkClient) throws KeeperException,InterruptedException{\n    byte[] data = null;\n    try {\n      data = zkClient.getData(Overseer.OVERSEER_ELECT + \"/leader\", null, new Stat(), true);\n    } catch (KeeperException.NoNodeException e) {\n      return null;\n    }\n    Map m = (Map) Utils.fromJSON(data);\n    return  (String) m.get(\"id\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#getLeaderId(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#getLeaderId(SolrZkClient).mjava","sourceNew":"  public static String getLeaderId(SolrZkClient zkClient) throws KeeperException,InterruptedException{\n    byte[] data = null;\n    try {\n      data = zkClient.getData(Overseer.OVERSEER_ELECT + \"/leader\", null, new Stat(), true);\n    } catch (KeeperException.NoNodeException e) {\n      return null;\n    }\n    Map m = (Map) Utils.fromJSON(data);\n    return  (String) m.get(ID);\n  }\n\n","sourceOld":"  public static String getLeaderId(SolrZkClient zkClient) throws KeeperException,InterruptedException{\n    byte[] data = null;\n    try {\n      data = zkClient.getData(Overseer.OVERSEER_ELECT + \"/leader\", null, new Stat(), true);\n    } catch (KeeperException.NoNodeException e) {\n      return null;\n    }\n    Map m = (Map) Utils.fromJSON(data);\n    return  (String) m.get(\"id\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#getLeaderId(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#getLeaderId(SolrZkClient).mjava","sourceNew":"  public static String getLeaderId(SolrZkClient zkClient) throws KeeperException,InterruptedException{\n    byte[] data = null;\n    try {\n      data = zkClient.getData(Overseer.OVERSEER_ELECT + \"/leader\", null, new Stat(), true);\n    } catch (KeeperException.NoNodeException e) {\n      return null;\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = (Map) Utils.fromJSON(data);\n    return  (String) m.get(ID);\n  }\n\n","sourceOld":"  public static String getLeaderId(SolrZkClient zkClient) throws KeeperException,InterruptedException{\n    byte[] data = null;\n    try {\n      data = zkClient.getData(Overseer.OVERSEER_ELECT + \"/leader\", null, new Stat(), true);\n    } catch (KeeperException.NoNodeException e) {\n      return null;\n    }\n    Map m = (Map) Utils.fromJSON(data);\n    return  (String) m.get(ID);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5551d21c759979ad637581208f5ff5bd7497b5d7":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"e5fa6615014cd2288fe930f8c8bb726f9504961d":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["5551d21c759979ad637581208f5ff5bd7497b5d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"5551d21c759979ad637581208f5ff5bd7497b5d7":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"2209af2c265d2258ec4b29c8cc78622d36994a15":["5551d21c759979ad637581208f5ff5bd7497b5d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["e5fa6615014cd2288fe930f8c8bb726f9504961d","6d2dadc1f5ca8703d8659f4964961f9967935d75"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}