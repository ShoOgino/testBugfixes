{"path":"lucene/core/src/test/org/apache/lucene/geo/TestXYPoint#testEqualsAndHashCode().mjava","commits":[{"id":"a4d14322963cbbe599706c6c272d5cba0817ea32","date":1581676750,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestXYPoint#testEqualsAndHashCode().mjava","pathOld":"/dev/null","sourceNew":"  /** equals and hashcode */\n  public void testEqualsAndHashCode() {\n    XYPoint point = new XYPoint(ShapeTestUtil.nextFloat(random()), ShapeTestUtil.nextFloat(random()));\n    XYPoint copy = new XYPoint(point.getX(), point.getY());\n    assertEquals(point, copy);\n    assertEquals(point.hashCode(), copy.hashCode());\n    XYPoint otherPoint = new XYPoint(ShapeTestUtil.nextFloat(random()), ShapeTestUtil.nextFloat(random()));\n    if (point.getX() != otherPoint.getX() || point.getY() != otherPoint.getY()) {\n      assertNotEquals(point, otherPoint);\n      assertNotEquals(point.hashCode(), otherPoint.hashCode());\n    } else {\n      assertEquals(point, otherPoint);\n      assertEquals(point.hashCode(), otherPoint.hashCode());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f66eaefcdea9f8ffcf9508f78556159d61b8e3df","date":1581695213,"type":0,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestXYPoint#testEqualsAndHashCode().mjava","pathOld":"/dev/null","sourceNew":"  /** equals and hashcode */\n  public void testEqualsAndHashCode() {\n    XYPoint point = new XYPoint(ShapeTestUtil.nextFloat(random()), ShapeTestUtil.nextFloat(random()));\n    XYPoint copy = new XYPoint(point.getX(), point.getY());\n    assertEquals(point, copy);\n    assertEquals(point.hashCode(), copy.hashCode());\n    XYPoint otherPoint = new XYPoint(ShapeTestUtil.nextFloat(random()), ShapeTestUtil.nextFloat(random()));\n    if (point.getX() != otherPoint.getX() || point.getY() != otherPoint.getY()) {\n      assertNotEquals(point, otherPoint);\n      assertNotEquals(point.hashCode(), otherPoint.hashCode());\n    } else {\n      assertEquals(point, otherPoint);\n      assertEquals(point.hashCode(), otherPoint.hashCode());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9460c56bff2cae56ccd93480b2c390fc4d9c4928","date":1585331495,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestXYPoint#testEqualsAndHashCode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestXYPoint#testEqualsAndHashCode().mjava","sourceNew":"  /** equals and hashcode */\n  public void testEqualsAndHashCode() {\n    XYPoint point = new XYPoint(ShapeTestUtil.nextFloat(random()), ShapeTestUtil.nextFloat(random()));\n    XYPoint copy = new XYPoint(point.getX(), point.getY());\n    assertEquals(point, copy);\n    assertEquals(point.hashCode(), copy.hashCode());\n    XYPoint otherPoint = new XYPoint(ShapeTestUtil.nextFloat(random()), ShapeTestUtil.nextFloat(random()));\n    if (point.getX() != otherPoint.getX() || point.getY() != otherPoint.getY()) {\n      assertNotEquals(point, otherPoint);\n      // it is possible to have hashcode collisions\n    } else {\n      assertEquals(point, otherPoint);\n      assertEquals(point.hashCode(), otherPoint.hashCode());\n    }\n  }\n\n","sourceOld":"  /** equals and hashcode */\n  public void testEqualsAndHashCode() {\n    XYPoint point = new XYPoint(ShapeTestUtil.nextFloat(random()), ShapeTestUtil.nextFloat(random()));\n    XYPoint copy = new XYPoint(point.getX(), point.getY());\n    assertEquals(point, copy);\n    assertEquals(point.hashCode(), copy.hashCode());\n    XYPoint otherPoint = new XYPoint(ShapeTestUtil.nextFloat(random()), ShapeTestUtil.nextFloat(random()));\n    if (point.getX() != otherPoint.getX() || point.getY() != otherPoint.getY()) {\n      assertNotEquals(point, otherPoint);\n      assertNotEquals(point.hashCode(), otherPoint.hashCode());\n    } else {\n      assertEquals(point, otherPoint);\n      assertEquals(point.hashCode(), otherPoint.hashCode());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f66eaefcdea9f8ffcf9508f78556159d61b8e3df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a4d14322963cbbe599706c6c272d5cba0817ea32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9460c56bff2cae56ccd93480b2c390fc4d9c4928":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9460c56bff2cae56ccd93480b2c390fc4d9c4928"],"a4d14322963cbbe599706c6c272d5cba0817ea32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f66eaefcdea9f8ffcf9508f78556159d61b8e3df":["9460c56bff2cae56ccd93480b2c390fc4d9c4928"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df","a4d14322963cbbe599706c6c272d5cba0817ea32"],"9460c56bff2cae56ccd93480b2c390fc4d9c4928":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a4d14322963cbbe599706c6c272d5cba0817ea32":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}