{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int,int).mjava","commits":[{"id":"3c4b1dec123e039b2e4f9a82d8d7005a1151a97c","date":1437464198,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int).mjava","sourceNew":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc, int maxUniqueValues) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    Set<String> valueSet = new HashSet<String>();\n    for (int i = 0; i < 10000 && valueSet.size() < maxUniqueValues; ++i) {\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      valueSet.add(TestUtil.randomSimpleString(random(), length));\n    }\n    String[] uniqueValues = valueSet.toArray(new String[0]);\n\n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(RandomPicks.randomFrom(random(), uniqueValues));\n      }\n\n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int,int).mjava","sourceNew":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc, int maxUniqueValues) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    Set<String> valueSet = new HashSet<String>();\n    for (int i = 0; i < 10000 && valueSet.size() < maxUniqueValues; ++i) {\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      valueSet.add(TestUtil.randomSimpleString(random(), length));\n    }\n    String[] uniqueValues = valueSet.toArray(new String[0]);\n\n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(RandomPicks.randomFrom(random(), uniqueValues));\n      }\n\n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          if (docValues.docID() < i) {\n            docValues.nextDoc();\n          }\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues.docID() < i) {\n          docValues.nextDoc();\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc, int maxUniqueValues) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    Set<String> valueSet = new HashSet<String>();\n    for (int i = 0; i < 10000 && valueSet.size() < maxUniqueValues; ++i) {\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      valueSet.add(TestUtil.randomSimpleString(random(), length));\n    }\n    String[] uniqueValues = valueSet.toArray(new String[0]);\n\n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(RandomPicks.randomFrom(random(), uniqueValues));\n      }\n\n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int,int).mjava","sourceNew":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc, int maxUniqueValues) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    Set<String> valueSet = new HashSet<String>();\n    for (int i = 0; i < 10000 && valueSet.size() < maxUniqueValues; ++i) {\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      valueSet.add(TestUtil.randomSimpleString(random(), length));\n    }\n    String[] uniqueValues = valueSet.toArray(new String[0]);\n\n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(RandomPicks.randomFrom(random(), uniqueValues));\n      }\n\n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          if (docValues.docID() < i) {\n            docValues.nextDoc();\n          }\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues.docID() < i) {\n          docValues.nextDoc();\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc, int maxUniqueValues) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    Set<String> valueSet = new HashSet<String>();\n    for (int i = 0; i < 10000 && valueSet.size() < maxUniqueValues; ++i) {\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      valueSet.add(TestUtil.randomSimpleString(random(), length));\n    }\n    String[] uniqueValues = valueSet.toArray(new String[0]);\n\n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(RandomPicks.randomFrom(random(), uniqueValues));\n      }\n\n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int,int).mjava","sourceNew":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc, int maxUniqueValues) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    Set<String> valueSet = new HashSet<String>();\n    for (int i = 0; i < 10000 && valueSet.size() < maxUniqueValues; ++i) {\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      valueSet.add(TestUtil.randomSimpleString(random(), length));\n    }\n    String[] uniqueValues = valueSet.toArray(new String[0]);\n\n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(RandomPicks.randomFrom(random(), uniqueValues));\n      }\n\n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          if (docValues.docID() < i) {\n            docValues.nextDoc();\n          }\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues.docID() < i) {\n          docValues.nextDoc();\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc, int maxUniqueValues) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    Set<String> valueSet = new HashSet<String>();\n    for (int i = 0; i < 10000 && valueSet.size() < maxUniqueValues; ++i) {\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      valueSet.add(TestUtil.randomSimpleString(random(), length));\n    }\n    String[] uniqueValues = valueSet.toArray(new String[0]);\n\n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(RandomPicks.randomFrom(random(), uniqueValues));\n      }\n\n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int,int).mjava","sourceNew":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc, int maxUniqueValues) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    Set<String> valueSet = new HashSet<String>();\n    for (int i = 0; i < 10000 && valueSet.size() < maxUniqueValues; ++i) {\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      valueSet.add(TestUtil.randomSimpleString(random(), length));\n    }\n    String[] uniqueValues = valueSet.toArray(new String[0]);\n\n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(RandomPicks.randomFrom(random(), uniqueValues));\n      }\n\n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          if (docValues.docID() < i) {\n            docValues.nextDoc();\n          }\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues.docID() < i) {\n          docValues.nextDoc();\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc, int maxUniqueValues) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    Set<String> valueSet = new HashSet<String>();\n    for (int i = 0; i < 10000 && valueSet.size() < maxUniqueValues; ++i) {\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      valueSet.add(TestUtil.randomSimpleString(random(), length));\n    }\n    String[] uniqueValues = valueSet.toArray(new String[0]);\n\n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(RandomPicks.randomFrom(random(), uniqueValues));\n      }\n\n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          if (docValues.docID() < i) {\n            docValues.nextDoc();\n          }\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues.docID() < i) {\n          docValues.nextDoc();\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int,int).mjava","sourceNew":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc, int maxUniqueValues) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    Set<String> valueSet = new HashSet<String>();\n    for (int i = 0; i < 10000 && valueSet.size() < maxUniqueValues; ++i) {\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      valueSet.add(TestUtil.randomSimpleString(random(), length));\n    }\n    String[] uniqueValues = valueSet.toArray(new String[0]);\n\n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(RandomPicks.randomFrom(random(), uniqueValues));\n      }\n\n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          if (docValues.docID() < i) {\n            docValues.nextDoc();\n          }\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues.docID() < i) {\n          docValues.nextDoc();\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc, int maxUniqueValues) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    Set<String> valueSet = new HashSet<String>();\n    for (int i = 0; i < 10000 && valueSet.size() < maxUniqueValues; ++i) {\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      valueSet.add(TestUtil.randomSimpleString(random(), length));\n    }\n    String[] uniqueValues = valueSet.toArray(new String[0]);\n\n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(RandomPicks.randomFrom(random(), uniqueValues));\n      }\n\n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          if (docValues.docID() < i) {\n            docValues.nextDoc();\n          }\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues.docID() < i) {\n          docValues.nextDoc();\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int,int).mjava","sourceNew":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc, int maxUniqueValues) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    Set<String> valueSet = new HashSet<String>();\n    for (int i = 0; i < 10000 && valueSet.size() < maxUniqueValues; ++i) {\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      valueSet.add(TestUtil.randomSimpleString(random(), length));\n    }\n    String[] uniqueValues = valueSet.toArray(new String[0]);\n\n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(RandomPicks.randomFrom(random(), uniqueValues));\n      }\n\n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          if (docValues.docID() < i) {\n            docValues.nextDoc();\n          }\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues.docID() < i) {\n          docValues.nextDoc();\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc, int maxUniqueValues) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    Set<String> valueSet = new HashSet<String>();\n    for (int i = 0; i < 10000 && valueSet.size() < maxUniqueValues; ++i) {\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      valueSet.add(TestUtil.randomSimpleString(random(), length));\n    }\n    String[] uniqueValues = valueSet.toArray(new String[0]);\n\n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(RandomPicks.randomFrom(random(), uniqueValues));\n      }\n\n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          if (docValues.docID() < i) {\n            docValues.nextDoc();\n          }\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues.docID() < i) {\n          docValues.nextDoc();\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int,int).mjava","sourceNew":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc, int maxUniqueValues) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    Set<String> valueSet = new HashSet<String>();\n    for (int i = 0; i < 10000 && valueSet.size() < maxUniqueValues; ++i) {\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      valueSet.add(TestUtil.randomSimpleString(random(), length));\n    }\n    String[] uniqueValues = valueSet.toArray(new String[0]);\n\n    // index some docs\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now add numDocs=\" + numDocs);\n    }\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(RandomPicks.randomFrom(random(), uniqueValues));\n      }\n\n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete \" + numDeletions + \" docs\");\n    }\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now get reader\");\n    }\n    DirectoryReader ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          if (docValues.docID() < i) {\n            docValues.nextDoc();\n          }\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now close reader\");\n    }\n    ir.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: force merge\");\n    }\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues.docID() < i) {\n          docValues.nextDoc();\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: close reader\");\n    }\n    ir.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close writer\");\n    }\n    writer.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close dir\");\n    }\n    dir.close();\n  }\n\n","sourceOld":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc, int maxUniqueValues) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    Set<String> valueSet = new HashSet<String>();\n    for (int i = 0; i < 10000 && valueSet.size() < maxUniqueValues; ++i) {\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      valueSet.add(TestUtil.randomSimpleString(random(), length));\n    }\n    String[] uniqueValues = valueSet.toArray(new String[0]);\n\n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(RandomPicks.randomFrom(random(), uniqueValues));\n      }\n\n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          if (docValues.docID() < i) {\n            docValues.nextDoc();\n          }\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues.docID() < i) {\n          docValues.nextDoc();\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int,int).mjava","sourceNew":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc, int maxUniqueValues) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    Set<String> valueSet = new HashSet<String>();\n    for (int i = 0; i < 10000 && valueSet.size() < maxUniqueValues; ++i) {\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      valueSet.add(TestUtil.randomSimpleString(random(), length));\n    }\n    String[] uniqueValues = valueSet.toArray(new String[0]);\n\n    // index some docs\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now add numDocs=\" + numDocs);\n    }\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(RandomPicks.randomFrom(random(), uniqueValues));\n      }\n\n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete \" + numDeletions + \" docs\");\n    }\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now get reader\");\n    }\n    DirectoryReader ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          if (docValues.docID() < i) {\n            docValues.nextDoc();\n          }\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now close reader\");\n    }\n    ir.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: force merge\");\n    }\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues.docID() < i) {\n          docValues.nextDoc();\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: close reader\");\n    }\n    ir.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close writer\");\n    }\n    writer.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close dir\");\n    }\n    dir.close();\n  }\n\n","sourceOld":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc, int maxUniqueValues) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    Set<String> valueSet = new HashSet<String>();\n    for (int i = 0; i < 10000 && valueSet.size() < maxUniqueValues; ++i) {\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      valueSet.add(TestUtil.randomSimpleString(random(), length));\n    }\n    String[] uniqueValues = valueSet.toArray(new String[0]);\n\n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(RandomPicks.randomFrom(random(), uniqueValues));\n      }\n\n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          if (docValues.docID() < i) {\n            docValues.nextDoc();\n          }\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues.docID() < i) {\n          docValues.nextDoc();\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int,int).mjava","sourceNew":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc, int maxUniqueValues) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    Set<String> valueSet = new HashSet<String>();\n    for (int i = 0; i < 10000 && valueSet.size() < maxUniqueValues; ++i) {\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      valueSet.add(TestUtil.randomSimpleString(random(), length));\n    }\n    String[] uniqueValues = valueSet.toArray(new String[0]);\n\n    // index some docs\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now add numDocs=\" + numDocs);\n    }\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(RandomPicks.randomFrom(random(), uniqueValues));\n      }\n\n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now delete \" + numDeletions + \" docs\");\n    }\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now get reader\");\n    }\n    DirectoryReader ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          if (docValues.docID() < i) {\n            docValues.nextDoc();\n          }\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now close reader\");\n    }\n    ir.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: force merge\");\n    }\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues.docID() < i) {\n          docValues.nextDoc();\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: close reader\");\n    }\n    ir.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close writer\");\n    }\n    writer.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close dir\");\n    }\n    dir.close();\n  }\n\n","sourceOld":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc, int maxUniqueValues) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    Set<String> valueSet = new HashSet<String>();\n    for (int i = 0; i < 10000 && valueSet.size() < maxUniqueValues; ++i) {\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      valueSet.add(TestUtil.randomSimpleString(random(), length));\n    }\n    String[] uniqueValues = valueSet.toArray(new String[0]);\n\n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(RandomPicks.randomFrom(random(), uniqueValues));\n      }\n\n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          if (docValues.docID() < i) {\n            docValues.nextDoc();\n          }\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues.docID() < i) {\n          docValues.nextDoc();\n        }\n        if (docValues != null && stringValues.length > 0) {\n          assertEquals(i, docValues.docID());\n          for (int j = 0; j < stringValues.length; j++) {\n            assert docValues != null;\n            long ord = docValues.nextOrd();\n            assert ord != NO_MORE_ORDS;\n            BytesRef scratch = docValues.lookupOrd(ord);\n            assertEquals(stringValues[j], scratch.utf8ToString());\n          }\n          assertEquals(NO_MORE_ORDS, docValues.nextOrd());\n        }\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c4b1dec123e039b2e4f9a82d8d7005a1151a97c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["3c4b1dec123e039b2e4f9a82d8d7005a1151a97c","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["3c4b1dec123e039b2e4f9a82d8d7005a1151a97c"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3c4b1dec123e039b2e4f9a82d8d7005a1151a97c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"3c4b1dec123e039b2e4f9a82d8d7005a1151a97c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c4b1dec123e039b2e4f9a82d8d7005a1151a97c"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}