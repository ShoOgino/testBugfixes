{"path":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","commits":[{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n    state.flushedFiles.add(seedFileName);\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int freqCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with freqCutoff=\" + freqCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(freqCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n                public boolean isIndexTerm(BytesRef term, int docFreq) {\n                return random.nextInt(gap) == 17;\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe","date":1294227869,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int freqCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with freqCutoff=\" + freqCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(freqCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n                public boolean isIndexTerm(BytesRef term, int docFreq) {\n                return random.nextInt(gap) == 17;\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n    state.flushedFiles.add(seedFileName);\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int freqCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with freqCutoff=\" + freqCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(freqCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n                public boolean isIndexTerm(BytesRef term, int docFreq) {\n                return random.nextInt(gap) == 17;\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int freqCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with freqCutoff=\" + freqCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(freqCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n                public boolean isIndexTerm(BytesRef term, int docFreq) {\n                return random.nextInt(gap) == 17;\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d53c3f769ca0f9e7434937b792877770271aecf","date":1294785129,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n                public boolean isIndexTerm(BytesRef term, int docFreq) {\n                return random.nextInt(gap) == 17;\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int freqCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with freqCutoff=\" + freqCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(freqCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n                public boolean isIndexTerm(BytesRef term, int docFreq) {\n                return random.nextInt(gap) == 17;\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n                public boolean isIndexTerm(BytesRef term, int docFreq) {\n                return random.nextInt(gap) == 17;\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecd298fdc085e7eba27afa7fae58df1ba1a2808","date":1295102557,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return random.nextInt(gap) == 17;\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n                public boolean isIndexTerm(BytesRef term, int docFreq) {\n                return random.nextInt(gap) == 17;\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return random.nextInt(gap) == 17;\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n                public boolean isIndexTerm(BytesRef term, int docFreq) {\n                return random.nextInt(gap) == 17;\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return random.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return random.nextInt(gap) == 17;\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return random.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return random.nextInt(gap) == 17;\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return random.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return random.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int freqCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with freqCutoff=\" + freqCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(freqCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n                public boolean isIndexTerm(BytesRef term, int docFreq) {\n                return random.nextInt(gap) == 17;\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new PrefixCodedTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return random.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe"],"16843358872ed92ba92888ab99df297550b9a36a":["868da859b43505d9d2a023bfeae6dd0c795f5295","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["16843358872ed92ba92888ab99df297550b9a36a","b1add9ddc0005b07550d4350720aac22dc9886b3"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"56da903869515527852ee21ea7ef7bfe414cd40d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d53c3f769ca0f9e7434937b792877770271aecf":["fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d53c3f769ca0f9e7434937b792877770271aecf"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["3d53c3f769ca0f9e7434937b792877770271aecf"],"fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe":["56da903869515527852ee21ea7ef7bfe414cd40d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["e79a6d080bdd5b2a8f56342cf571b5476de04180","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"16843358872ed92ba92888ab99df297550b9a36a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["e79a6d080bdd5b2a8f56342cf571b5476de04180","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56da903869515527852ee21ea7ef7bfe414cd40d":["fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3d53c3f769ca0f9e7434937b792877770271aecf":["868da859b43505d9d2a023bfeae6dd0c795f5295","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["16843358872ed92ba92888ab99df297550b9a36a"],"fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe":["70ad682703b8585f5d0a637efec044d57ec05efb","3d53c3f769ca0f9e7434937b792877770271aecf"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["16843358872ed92ba92888ab99df297550b9a36a","b1add9ddc0005b07550d4350720aac22dc9886b3"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}