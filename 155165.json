{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeAdded().mjava","sourceNew":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01322d51122b6cbe6b5ba6059fffba67798dae72","date":1539067228,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","sourceNew":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4).setMaxShardsPerNode(-1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"44dd40f6c2c1465aebf4677bab10f696c7ea18d8","date":1539566013,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","sourceNew":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4).setMaxShardsPerNode(-1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4).setMaxShardsPerNode(-1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","sourceNew":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4).setMaxShardsPerNode(-1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n\n    // TODO: can be 2!\n    // assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    \n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4).setMaxShardsPerNode(-1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","bugFix":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","sourceNew":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4).setMaxShardsPerNode(-1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n\n    // TODO: can be 2!\n    // assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    \n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4).setMaxShardsPerNode(-1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n\n    // TODO: can be 2!\n    // assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    \n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","sourceNew":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4).setMaxShardsPerNode(-1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n\n    // TODO: can be 2!\n    // assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    \n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4).setMaxShardsPerNode(-1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n\n    // TODO: can be 2!\n    // assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    \n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce85ed088dcf7aa1742105d4a8caa9aab3b491c1","date":1546971158,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","sourceNew":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4).setMaxShardsPerNode(-1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n\n    // TODO: can be 2!\n    // assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    \n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4).setMaxShardsPerNode(-1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n\n    // TODO: can be 2!\n    // assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    \n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","sourceNew":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4).setMaxShardsPerNode(-1);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n\n    // TODO: can be 2!\n    // assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    \n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4).setMaxShardsPerNode(-1);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n\n    // TODO: can be 2!\n    // assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    \n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","sourceNew":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4).setMaxShardsPerNode(-1);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    if (log.isInfoEnabled()) {\n      log.info(\"Node values: {}\", Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n      log.info(\"Live nodes: {}, collection state: {}\"\n          , cluster.getClusterStateProvider().getLiveNodes(), cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\")); // logOk\n    }\n\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n\n    // TODO: can be 2!\n    // assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4).setMaxShardsPerNode(-1);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n\n    // TODO: can be 2!\n    // assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    \n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","sourceNew":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4).setMaxShardsPerNode(-1);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    if (log.isInfoEnabled()) {\n      log.info(\"Node values: {}\", Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n      log.info(\"Live nodes: {}, collection state: {}\"\n          , cluster.getClusterStateProvider().getLiveNodes(), cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\")); // logOk\n    }\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n\n    // TODO: can be 2!\n    // assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4).setMaxShardsPerNode(-1);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    if (log.isInfoEnabled()) {\n      log.info(\"Node values: {}\", Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n      log.info(\"Live nodes: {}, collection state: {}\"\n          , cluster.getClusterStateProvider().getLiveNodes(), cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\")); // logOk\n    }\n\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n\n    // TODO: can be 2!\n    // assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","sourceNew":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    if (log.isInfoEnabled()) {\n      log.info(\"Node values: {}\", Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n      log.info(\"Live nodes: {}, collection state: {}\"\n          , cluster.getClusterStateProvider().getLiveNodes(), cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\")); // logOk\n    }\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n\n    // TODO: can be 2!\n    // assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4).setMaxShardsPerNode(-1);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    if (log.isInfoEnabled()) {\n      log.info(\"Node values: {}\", Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n      log.info(\"Live nodes: {}, collection state: {}\"\n          , cluster.getClusterStateProvider().getLiveNodes(), cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\")); // logOk\n    }\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n\n    // TODO: can be 2!\n    // assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","sourceNew":null,"sourceOld":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    if (log.isInfoEnabled()) {\n      log.info(\"Node values: {}\", Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n      log.info(\"Live nodes: {}, collection state: {}\"\n          , cluster.getClusterStateProvider().getLiveNodes(), cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\")); // logOk\n    }\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n\n    // TODO: can be 2!\n    // assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"ce85ed088dcf7aa1742105d4a8caa9aab3b491c1":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["89948af0461fead48f44ba8fb7866f107ce83f22"],"01322d51122b6cbe6b5ba6059fffba67798dae72":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["ce85ed088dcf7aa1742105d4a8caa9aab3b491c1"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"ce85ed088dcf7aa1742105d4a8caa9aab3b491c1":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["ce85ed088dcf7aa1742105d4a8caa9aab3b491c1"],"01322d51122b6cbe6b5ba6059fffba67798dae72":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"89948af0461fead48f44ba8fb7866f107ce83f22":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}