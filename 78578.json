{"path":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#addDoc(RandomIndexWriter,Collection[String],Map[BytesRef,Integer],int).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#addDoc(RandomIndexWriter,Collection[String],Map[BytesRef,Integer],int).mjava","pathOld":"/dev/null","sourceNew":"  private void addDoc(RandomIndexWriter w, Collection<String> terms, Map<BytesRef,Integer> termToID, int id) throws IOException {\n    Document doc = new Document();\n    doc.add(new NumericField(\"id\").setIntValue(id));\n    if (VERBOSE) {\n      System.out.println(\"TEST: addDoc id:\" + id + \" terms=\" + terms);\n    }\n    for (String s2 : terms) {\n      doc.add(newField(\"f\", s2, Field.Index.NOT_ANALYZED));\n      termToID.put(new BytesRef(s2), id);\n    }\n    w.addDocument(doc);\n    terms.clear();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#addDoc(RandomIndexWriter,Collection[String],Map[BytesRef,Integer],int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#addDoc(RandomIndexWriter,Collection[String],Map[BytesRef,Integer],int).mjava","sourceNew":"  private void addDoc(RandomIndexWriter w, Collection<String> terms, Map<BytesRef,Integer> termToID, int id) throws IOException {\n    Document doc = new Document();\n    doc.add(new NumericField(\"id\").setIntValue(id));\n    if (VERBOSE) {\n      System.out.println(\"TEST: addDoc id:\" + id + \" terms=\" + terms);\n    }\n    for (String s2 : terms) {\n      doc.add(newField(\"f\", s2, StringField.TYPE_UNSTORED));\n      termToID.put(new BytesRef(s2), id);\n    }\n    w.addDocument(doc);\n    terms.clear();\n  }\n\n","sourceOld":"  private void addDoc(RandomIndexWriter w, Collection<String> terms, Map<BytesRef,Integer> termToID, int id) throws IOException {\n    Document doc = new Document();\n    doc.add(new NumericField(\"id\").setIntValue(id));\n    if (VERBOSE) {\n      System.out.println(\"TEST: addDoc id:\" + id + \" terms=\" + terms);\n    }\n    for (String s2 : terms) {\n      doc.add(newField(\"f\", s2, Field.Index.NOT_ANALYZED));\n      termToID.put(new BytesRef(s2), id);\n    }\n    w.addDocument(doc);\n    terms.clear();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#addDoc(RandomIndexWriter,Collection[String],Map[BytesRef,Integer],int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#addDoc(RandomIndexWriter,Collection[String],Map[BytesRef,Integer],int).mjava","sourceNew":"  private void addDoc(RandomIndexWriter w, Collection<String> terms, Map<BytesRef,Integer> termToID, int id) throws IOException {\n    Document doc = new Document();\n    doc.add(new NumericField(\"id\", id));\n    if (VERBOSE) {\n      System.out.println(\"TEST: addDoc id:\" + id + \" terms=\" + terms);\n    }\n    for (String s2 : terms) {\n      doc.add(newField(\"f\", s2, StringField.TYPE_UNSTORED));\n      termToID.put(new BytesRef(s2), id);\n    }\n    w.addDocument(doc);\n    terms.clear();\n  }\n\n","sourceOld":"  private void addDoc(RandomIndexWriter w, Collection<String> terms, Map<BytesRef,Integer> termToID, int id) throws IOException {\n    Document doc = new Document();\n    doc.add(new NumericField(\"id\").setIntValue(id));\n    if (VERBOSE) {\n      System.out.println(\"TEST: addDoc id:\" + id + \" terms=\" + terms);\n    }\n    for (String s2 : terms) {\n      doc.add(newField(\"f\", s2, StringField.TYPE_UNSTORED));\n      termToID.put(new BytesRef(s2), id);\n    }\n    w.addDocument(doc);\n    terms.clear();\n  }\n\n","bugFix":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#addDoc(RandomIndexWriter,Collection[String],Map[BytesRef,Integer],int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#addDoc(RandomIndexWriter,Collection[String],Map[BytesRef,Integer],int).mjava","sourceNew":"  private void addDoc(RandomIndexWriter w, Collection<String> terms, Map<BytesRef,Integer> termToID, int id) throws IOException {\n    Document doc = new Document();\n    doc.add(new NumericField(\"id\", id));\n    if (VERBOSE) {\n      System.out.println(\"TEST: addDoc id:\" + id + \" terms=\" + terms);\n    }\n    for (String s2 : terms) {\n      doc.add(newField(\"f\", s2, StringField.TYPE_UNSTORED));\n      termToID.put(new BytesRef(s2), id);\n    }\n    w.addDocument(doc);\n    terms.clear();\n  }\n\n","sourceOld":"  private void addDoc(RandomIndexWriter w, Collection<String> terms, Map<BytesRef,Integer> termToID, int id) throws IOException {\n    Document doc = new Document();\n    doc.add(new NumericField(\"id\", id));\n    if (VERBOSE) {\n      System.out.println(\"TEST: addDoc id:\" + id + \" terms=\" + terms);\n    }\n    for (String s2 : terms) {\n      doc.add(newField(\"f\", s2, StringField.TYPE_UNSTORED));\n      termToID.put(new BytesRef(s2), id);\n    }\n    w.addDocument(doc);\n    terms.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa0f44f887719e97183771e977cfc4bfb485b766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"fa0f44f887719e97183771e977cfc4bfb485b766":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["fa0f44f887719e97183771e977cfc4bfb485b766"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}