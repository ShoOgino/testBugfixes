{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context context) {\n    List<Map<String, String>> fields = context.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = field.get(REGEX);\n      String splitBy = field.get(SPLIT_BY);\n      String replaceWith = field.get(REPLACE_WITH);\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input);\n            if (o != null)\n              results.add(o);\n          }\n          row.put(col, results);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value);\n          if (o != null)\n            row.put(col, o);\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73dfcb0f0208cdc38da92da0c7be6ed50fef55ba","date":1233903110,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context context) {\n    VariableResolver vr = context.getVariableResolver();\n    List<Map<String, String>> fields = context.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = field.get(REGEX);\n      reStr = vr.replaceTokens(reStr);\n      String splitBy = field.get(SPLIT_BY);\n      splitBy =  vr.replaceTokens(splitBy);\n      String replaceWith = field.get(REPLACE_WITH);\n      replaceWith = vr.replaceTokens(replaceWith);\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input);\n            if (o != null)\n              results.add(o);\n          }\n          row.put(col, results);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value);\n          if (o != null)\n            row.put(col, o);\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context context) {\n    List<Map<String, String>> fields = context.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = field.get(REGEX);\n      String splitBy = field.get(SPLIT_BY);\n      String replaceWith = field.get(REPLACE_WITH);\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input);\n            if (o != null)\n              results.add(o);\n          }\n          row.put(col, results);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value);\n          if (o != null)\n            row.put(col, o);\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fee52c628145c8dc485fb7902217fd0b96d7a237","date":1237276690,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context context) {\n    VariableResolver vr = context.getVariableResolver();\n    List<Map<String, String>> fields = context.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = field.get(REGEX);\n      reStr = vr.replaceTokens(reStr);\n      String splitBy = field.get(SPLIT_BY);\n      splitBy =  vr.replaceTokens(splitBy);\n      String replaceWith = field.get(REPLACE_WITH);\n      replaceWith = vr.replaceTokens(replaceWith);\n      String groupNames = vr.replaceTokens(field.get(GROUP_NAMES));\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          Map<String,List> otherVars= null;\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input, groupNames);\n            if (o != null){\n              if (o instanceof Map) {\n                Map map = (Map) o;\n                for (Object e : map.entrySet()) {\n                  Map.Entry<String ,Object> entry = (Map.Entry<String, Object>) e;\n                  List l = results;\n                  if(!col.equals(entry.getKey())){\n                    if(otherVars == null) otherVars = new HashMap<String, List>();\n                    l = otherVars.get(entry.getKey());\n                    if(l == null){\n                      l = new ArrayList();\n                      otherVars.put(entry.getKey(), l);\n                    }\n                  }\n                  if (entry.getValue() instanceof Collection) {\n                    l.addAll((Collection) entry.getValue());\n                  } else {\n                    l.add(entry.getValue());\n                  }\n                }\n              } else {\n                if (o instanceof Collection) {\n                  results.addAll((Collection) o);\n                } else {\n                  results.add(o);\n                }\n              }\n            }\n          }\n          for (Object result : results) row.put(col, result);\n          if(otherVars != null) row.putAll(otherVars);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value, groupNames);\n          if (o != null){\n            if (o instanceof Map) {\n              row.putAll((Map) o);\n            } else{\n              row.put(col, o);\n            }\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context context) {\n    VariableResolver vr = context.getVariableResolver();\n    List<Map<String, String>> fields = context.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = field.get(REGEX);\n      reStr = vr.replaceTokens(reStr);\n      String splitBy = field.get(SPLIT_BY);\n      splitBy =  vr.replaceTokens(splitBy);\n      String replaceWith = field.get(REPLACE_WITH);\n      replaceWith = vr.replaceTokens(replaceWith);\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input);\n            if (o != null)\n              results.add(o);\n          }\n          row.put(col, results);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value);\n          if (o != null)\n            row.put(col, o);\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":["ea0fcd0d941a299af1886b2765544bf38c8b86b6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea0fcd0d941a299af1886b2765544bf38c8b86b6","date":1255155235,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context context) {\n    VariableResolver vr = context.getVariableResolver();\n    List<Map<String, String>> fields = context.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = field.get(REGEX);\n      reStr = vr.replaceTokens(reStr);\n      String splitBy = field.get(SPLIT_BY);\n      splitBy =  vr.replaceTokens(splitBy);\n      String replaceWith = field.get(REPLACE_WITH);\n      replaceWith = vr.replaceTokens(replaceWith);\n      String groupNames = vr.replaceTokens(field.get(GROUP_NAMES));\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          Map<String,List> otherVars= null;\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input, groupNames);\n            if (o != null){\n              if (o instanceof Map) {\n                Map map = (Map) o;\n                for (Object e : map.entrySet()) {\n                  Map.Entry<String ,Object> entry = (Map.Entry<String, Object>) e;\n                  List l = results;\n                  if(!col.equals(entry.getKey())){\n                    if(otherVars == null) otherVars = new HashMap<String, List>();\n                    l = otherVars.get(entry.getKey());\n                    if(l == null){\n                      l = new ArrayList();\n                      otherVars.put(entry.getKey(), l);\n                    }\n                  }\n                  if (entry.getValue() instanceof Collection) {\n                    l.addAll((Collection) entry.getValue());\n                  } else {\n                    l.add(entry.getValue());\n                  }\n                }\n              } else {\n                if (o instanceof Collection) {\n                  results.addAll((Collection) o);\n                } else {\n                  results.add(o);\n                }\n              }\n            }\n          }\n          row.put(col, results);\n          if(otherVars != null) row.putAll(otherVars);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value, groupNames);\n          if (o != null){\n            if (o instanceof Map) {\n              row.putAll((Map) o);\n            } else{\n              row.put(col, o);\n            }\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context context) {\n    VariableResolver vr = context.getVariableResolver();\n    List<Map<String, String>> fields = context.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = field.get(REGEX);\n      reStr = vr.replaceTokens(reStr);\n      String splitBy = field.get(SPLIT_BY);\n      splitBy =  vr.replaceTokens(splitBy);\n      String replaceWith = field.get(REPLACE_WITH);\n      replaceWith = vr.replaceTokens(replaceWith);\n      String groupNames = vr.replaceTokens(field.get(GROUP_NAMES));\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          Map<String,List> otherVars= null;\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input, groupNames);\n            if (o != null){\n              if (o instanceof Map) {\n                Map map = (Map) o;\n                for (Object e : map.entrySet()) {\n                  Map.Entry<String ,Object> entry = (Map.Entry<String, Object>) e;\n                  List l = results;\n                  if(!col.equals(entry.getKey())){\n                    if(otherVars == null) otherVars = new HashMap<String, List>();\n                    l = otherVars.get(entry.getKey());\n                    if(l == null){\n                      l = new ArrayList();\n                      otherVars.put(entry.getKey(), l);\n                    }\n                  }\n                  if (entry.getValue() instanceof Collection) {\n                    l.addAll((Collection) entry.getValue());\n                  } else {\n                    l.add(entry.getValue());\n                  }\n                }\n              } else {\n                if (o instanceof Collection) {\n                  results.addAll((Collection) o);\n                } else {\n                  results.add(o);\n                }\n              }\n            }\n          }\n          for (Object result : results) row.put(col, result);\n          if(otherVars != null) row.putAll(otherVars);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value, groupNames);\n          if (o != null){\n            if (o instanceof Map) {\n              row.putAll((Map) o);\n            } else{\n              row.put(col, o);\n            }\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":["fee52c628145c8dc485fb7902217fd0b96d7a237"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86958cd31b5c9672845e46e83ffbce438424a72b","date":1259835698,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context ctx) {\n    List<Map<String, String>> fields = ctx.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = ctx.replaceTokens(field.get(REGEX));\n      String splitBy = ctx.replaceTokens(field.get(SPLIT_BY));\n      String replaceWith = ctx.replaceTokens(field.get(REPLACE_WITH));\n      String groupNames = ctx.replaceTokens(field.get(GROUP_NAMES));\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          Map<String,List> otherVars= null;\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input, groupNames);\n            if (o != null){\n              if (o instanceof Map) {\n                Map map = (Map) o;\n                for (Object e : map.entrySet()) {\n                  Map.Entry<String ,Object> entry = (Map.Entry<String, Object>) e;\n                  List l = results;\n                  if(!col.equals(entry.getKey())){\n                    if(otherVars == null) otherVars = new HashMap<String, List>();\n                    l = otherVars.get(entry.getKey());\n                    if(l == null){\n                      l = new ArrayList();\n                      otherVars.put(entry.getKey(), l);\n                    }\n                  }\n                  if (entry.getValue() instanceof Collection) {\n                    l.addAll((Collection) entry.getValue());\n                  } else {\n                    l.add(entry.getValue());\n                  }\n                }\n              } else {\n                if (o instanceof Collection) {\n                  results.addAll((Collection) o);\n                } else {\n                  results.add(o);\n                }\n              }\n            }\n          }\n          row.put(col, results);\n          if(otherVars != null) row.putAll(otherVars);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value, groupNames);\n          if (o != null){\n            if (o instanceof Map) {\n              row.putAll((Map) o);\n            } else{\n              row.put(col, o);\n            }\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context context) {\n    VariableResolver vr = context.getVariableResolver();\n    List<Map<String, String>> fields = context.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = field.get(REGEX);\n      reStr = vr.replaceTokens(reStr);\n      String splitBy = field.get(SPLIT_BY);\n      splitBy =  vr.replaceTokens(splitBy);\n      String replaceWith = field.get(REPLACE_WITH);\n      replaceWith = vr.replaceTokens(replaceWith);\n      String groupNames = vr.replaceTokens(field.get(GROUP_NAMES));\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          Map<String,List> otherVars= null;\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input, groupNames);\n            if (o != null){\n              if (o instanceof Map) {\n                Map map = (Map) o;\n                for (Object e : map.entrySet()) {\n                  Map.Entry<String ,Object> entry = (Map.Entry<String, Object>) e;\n                  List l = results;\n                  if(!col.equals(entry.getKey())){\n                    if(otherVars == null) otherVars = new HashMap<String, List>();\n                    l = otherVars.get(entry.getKey());\n                    if(l == null){\n                      l = new ArrayList();\n                      otherVars.put(entry.getKey(), l);\n                    }\n                  }\n                  if (entry.getValue() instanceof Collection) {\n                    l.addAll((Collection) entry.getValue());\n                  } else {\n                    l.add(entry.getValue());\n                  }\n                }\n              } else {\n                if (o instanceof Collection) {\n                  results.addAll((Collection) o);\n                } else {\n                  results.add(o);\n                }\n              }\n            }\n          }\n          row.put(col, results);\n          if(otherVars != null) row.putAll(otherVars);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value, groupNames);\n          if (o != null){\n            if (o instanceof Map) {\n              row.putAll((Map) o);\n            } else{\n              row.put(col, o);\n            }\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/RegexTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context ctx) {\n    List<Map<String, String>> fields = ctx.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = ctx.replaceTokens(field.get(REGEX));\n      String splitBy = ctx.replaceTokens(field.get(SPLIT_BY));\n      String replaceWith = ctx.replaceTokens(field.get(REPLACE_WITH));\n      String groupNames = ctx.replaceTokens(field.get(GROUP_NAMES));\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          Map<String,List> otherVars= null;\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input, groupNames);\n            if (o != null){\n              if (o instanceof Map) {\n                Map map = (Map) o;\n                for (Object e : map.entrySet()) {\n                  Map.Entry<String ,Object> entry = (Map.Entry<String, Object>) e;\n                  List l = results;\n                  if(!col.equals(entry.getKey())){\n                    if(otherVars == null) otherVars = new HashMap<String, List>();\n                    l = otherVars.get(entry.getKey());\n                    if(l == null){\n                      l = new ArrayList();\n                      otherVars.put(entry.getKey(), l);\n                    }\n                  }\n                  if (entry.getValue() instanceof Collection) {\n                    l.addAll((Collection) entry.getValue());\n                  } else {\n                    l.add(entry.getValue());\n                  }\n                }\n              } else {\n                if (o instanceof Collection) {\n                  results.addAll((Collection) o);\n                } else {\n                  results.add(o);\n                }\n              }\n            }\n          }\n          row.put(col, results);\n          if(otherVars != null) row.putAll(otherVars);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value, groupNames);\n          if (o != null){\n            if (o instanceof Map) {\n              row.putAll((Map) o);\n            } else{\n              row.put(col, o);\n            }\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> transformRow(Map<String, Object> row,\n                                          Context ctx) {\n    List<Map<String, String>> fields = ctx.getAllEntityFields();\n    for (Map<String, String> field : fields) {\n      String col = field.get(DataImporter.COLUMN);\n      String reStr = ctx.replaceTokens(field.get(REGEX));\n      String splitBy = ctx.replaceTokens(field.get(SPLIT_BY));\n      String replaceWith = ctx.replaceTokens(field.get(REPLACE_WITH));\n      String groupNames = ctx.replaceTokens(field.get(GROUP_NAMES));\n      if (reStr != null || splitBy != null) {\n        String srcColName = field.get(SRC_COL_NAME);\n        if (srcColName == null) {\n          srcColName = col;\n        }\n        Object tmpVal = row.get(srcColName);\n        if (tmpVal == null)\n          continue;\n\n        if (tmpVal instanceof List) {\n          List<String> inputs = (List<String>) tmpVal;\n          List results = new ArrayList();\n          Map<String,List> otherVars= null;\n          for (String input : inputs) {\n            Object o = process(col, reStr, splitBy, replaceWith, input, groupNames);\n            if (o != null){\n              if (o instanceof Map) {\n                Map map = (Map) o;\n                for (Object e : map.entrySet()) {\n                  Map.Entry<String ,Object> entry = (Map.Entry<String, Object>) e;\n                  List l = results;\n                  if(!col.equals(entry.getKey())){\n                    if(otherVars == null) otherVars = new HashMap<String, List>();\n                    l = otherVars.get(entry.getKey());\n                    if(l == null){\n                      l = new ArrayList();\n                      otherVars.put(entry.getKey(), l);\n                    }\n                  }\n                  if (entry.getValue() instanceof Collection) {\n                    l.addAll((Collection) entry.getValue());\n                  } else {\n                    l.add(entry.getValue());\n                  }\n                }\n              } else {\n                if (o instanceof Collection) {\n                  results.addAll((Collection) o);\n                } else {\n                  results.add(o);\n                }\n              }\n            }\n          }\n          row.put(col, results);\n          if(otherVars != null) row.putAll(otherVars);\n        } else {\n          String value = tmpVal.toString();\n          Object o = process(col, reStr, splitBy, replaceWith, value, groupNames);\n          if (o != null){\n            if (o instanceof Map) {\n              row.putAll((Map) o);\n            } else{\n              row.put(col, o);\n            }\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"73dfcb0f0208cdc38da92da0c7be6ed50fef55ba":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"86958cd31b5c9672845e46e83ffbce438424a72b":["ea0fcd0d941a299af1886b2765544bf38c8b86b6"],"ad94625fb8d088209f46650c8097196fec67f00c":["86958cd31b5c9672845e46e83ffbce438424a72b"],"ea0fcd0d941a299af1886b2765544bf38c8b86b6":["fee52c628145c8dc485fb7902217fd0b96d7a237"],"fee52c628145c8dc485fb7902217fd0b96d7a237":["73dfcb0f0208cdc38da92da0c7be6ed50fef55ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["73dfcb0f0208cdc38da92da0c7be6ed50fef55ba"],"73dfcb0f0208cdc38da92da0c7be6ed50fef55ba":["fee52c628145c8dc485fb7902217fd0b96d7a237"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86958cd31b5c9672845e46e83ffbce438424a72b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"ea0fcd0d941a299af1886b2765544bf38c8b86b6":["86958cd31b5c9672845e46e83ffbce438424a72b"],"fee52c628145c8dc485fb7902217fd0b96d7a237":["ea0fcd0d941a299af1886b2765544bf38c8b86b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}