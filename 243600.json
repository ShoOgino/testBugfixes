{"path":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiQueryParserCollating(Analyzer).mjava","commits":[{"id":"73b24dd99dc72171f84ace6f141e71e669f0221b","date":1237459915,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiQueryParserCollating(Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  public void testFarsiQueryParserCollating(Analyzer analyzer) throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (ramDir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher is = new IndexSearcher(ramDir);\n\n    AnalyzingQueryParser aqp = new AnalyzingQueryParser(\"content\", analyzer);\n    aqp.setLowercaseExpandedTerms(false);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    aqp.setUseOldRangeQuery(false);\n    ScoreDoc[] result\n      = is.search(aqp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(aqp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    aqp.setUseOldRangeQuery(true);\n    result = is.search(aqp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(aqp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiQueryParserCollating(Analyzer).mjava","pathOld":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiQueryParserCollating(Analyzer).mjava","sourceNew":"  public void testFarsiQueryParserCollating(Analyzer analyzer) throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (ramDir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher is = new IndexSearcher(ramDir);\n\n    AnalyzingQueryParser aqp = new AnalyzingQueryParser(\"content\", analyzer);\n    aqp.setLowercaseExpandedTerms(false);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    aqp.setUseOldRangeQuery(false);\n    ScoreDoc[] result\n      = is.search(aqp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(aqp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    aqp.setUseOldRangeQuery(true);\n    result = is.search(aqp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(aqp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiQueryParserCollating(Analyzer analyzer) throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (ramDir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher is = new IndexSearcher(ramDir);\n\n    AnalyzingQueryParser aqp = new AnalyzingQueryParser(\"content\", analyzer);\n    aqp.setLowercaseExpandedTerms(false);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    aqp.setUseOldRangeQuery(false);\n    ScoreDoc[] result\n      = is.search(aqp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(aqp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test RangeQuery\n    aqp.setUseOldRangeQuery(true);\n    result = is.search(aqp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(aqp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiQueryParserCollating(Analyzer).mjava","pathOld":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiQueryParserCollating(Analyzer).mjava","sourceNew":"  public void testFarsiQueryParserCollating(Analyzer analyzer) throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (ramDir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    AnalyzingQueryParser aqp = new AnalyzingQueryParser(\"content\", analyzer);\n    aqp.setLowercaseExpandedTerms(false);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    aqp.setUseOldRangeQuery(false);\n    ScoreDoc[] result\n      = is.search(aqp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(aqp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    aqp.setUseOldRangeQuery(true);\n    result = is.search(aqp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(aqp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiQueryParserCollating(Analyzer analyzer) throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (ramDir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher is = new IndexSearcher(ramDir);\n\n    AnalyzingQueryParser aqp = new AnalyzingQueryParser(\"content\", analyzer);\n    aqp.setLowercaseExpandedTerms(false);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    aqp.setUseOldRangeQuery(false);\n    ScoreDoc[] result\n      = is.search(aqp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(aqp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    aqp.setUseOldRangeQuery(true);\n    result = is.search(aqp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(aqp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da","date":1255296547,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiQueryParserCollating(Analyzer).mjava","pathOld":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiQueryParserCollating(Analyzer).mjava","sourceNew":"  public void testFarsiQueryParserCollating(Analyzer analyzer) throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (ramDir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    AnalyzingQueryParser aqp = new AnalyzingQueryParser(\"content\", analyzer);\n    aqp.setLowercaseExpandedTerms(false);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test TermRangeQuery\n    aqp.setUseOldRangeQuery(false);\n    ScoreDoc[] result\n      = is.search(aqp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(aqp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    aqp.setUseOldRangeQuery(true);\n    result = is.search(aqp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(aqp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiQueryParserCollating(Analyzer analyzer) throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (ramDir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    AnalyzingQueryParser aqp = new AnalyzingQueryParser(\"content\", analyzer);\n    aqp.setLowercaseExpandedTerms(false);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test ConstantScoreRangeQuery\n    aqp.setUseOldRangeQuery(false);\n    ScoreDoc[] result\n      = is.search(aqp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(aqp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    aqp.setUseOldRangeQuery(true);\n    result = is.search(aqp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(aqp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84dc138e05008664b5e01dc83f6ad95bd73b91c5","date":1256054789,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiQueryParserCollating(Analyzer).mjava","pathOld":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiQueryParserCollating(Analyzer).mjava","sourceNew":"  public void testFarsiQueryParserCollating(Analyzer analyzer) throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (ramDir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    AnalyzingQueryParser aqp = new AnalyzingQueryParser(\"content\", analyzer);\n    aqp.setLowercaseExpandedTerms(false);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test TermRangeQuery\n    ScoreDoc[] result\n      = is.search(aqp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(aqp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiQueryParserCollating(Analyzer analyzer) throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (ramDir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    AnalyzingQueryParser aqp = new AnalyzingQueryParser(\"content\", analyzer);\n    aqp.setLowercaseExpandedTerms(false);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test TermRangeQuery\n    aqp.setUseOldRangeQuery(false);\n    ScoreDoc[] result\n      = is.search(aqp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(aqp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    // Test TermRangeQuery\n    aqp.setUseOldRangeQuery(true);\n    result = is.search(aqp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(aqp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiQueryParserCollating(Analyzer).mjava","pathOld":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiQueryParserCollating(Analyzer).mjava","sourceNew":"  public void testFarsiQueryParserCollating(Analyzer analyzer) throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (ramDir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    AnalyzingQueryParser aqp = new AnalyzingQueryParser(Version.LUCENE_CURRENT, \"content\", analyzer);\n    aqp.setLowercaseExpandedTerms(false);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test TermRangeQuery\n    ScoreDoc[] result\n      = is.search(aqp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(aqp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","sourceOld":"  public void testFarsiQueryParserCollating(Analyzer analyzer) throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (ramDir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    AnalyzingQueryParser aqp = new AnalyzingQueryParser(\"content\", analyzer);\n    aqp.setLowercaseExpandedTerms(false);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test TermRangeQuery\n    ScoreDoc[] result\n      = is.search(aqp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(aqp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4275990669802f4c50b4de5d3252a0987854ad68","date":1260360486,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiQueryParserCollating(Analyzer).mjava","sourceNew":null,"sourceOld":"  public void testFarsiQueryParserCollating(Analyzer analyzer) throws Exception {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (ramDir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n\n    AnalyzingQueryParser aqp = new AnalyzingQueryParser(Version.LUCENE_CURRENT, \"content\", analyzer);\n    aqp.setLowercaseExpandedTerms(false);\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is not\n    // supported).\n      \n    // Test TermRangeQuery\n    ScoreDoc[] result\n      = is.search(aqp.parse(\"[ \\u062F TO \\u0698 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = is.search(aqp.parse(\"[ \\u0633 TO \\u0638 ]\"), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4275990669802f4c50b4de5d3252a0987854ad68":["ba1116b3450a9c1642c89445d131b37344055245"],"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["4256bc1b3c94786287ccdfc751230374521843cf"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["73b24dd99dc72171f84ace6f141e71e669f0221b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73b24dd99dc72171f84ace6f141e71e669f0221b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4256bc1b3c94786287ccdfc751230374521843cf":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4275990669802f4c50b4de5d3252a0987854ad68"],"ba1116b3450a9c1642c89445d131b37344055245":["84dc138e05008664b5e01dc83f6ad95bd73b91c5"],"84dc138e05008664b5e01dc83f6ad95bd73b91c5":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"]},"commit2Childs":{"4275990669802f4c50b4de5d3252a0987854ad68":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["84dc138e05008664b5e01dc83f6ad95bd73b91c5"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["4256bc1b3c94786287ccdfc751230374521843cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b24dd99dc72171f84ace6f141e71e669f0221b"],"73b24dd99dc72171f84ace6f141e71e669f0221b":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"4256bc1b3c94786287ccdfc751230374521843cf":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"ba1116b3450a9c1642c89445d131b37344055245":["4275990669802f4c50b4de5d3252a0987854ad68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"84dc138e05008664b5e01dc83f6ad95bd73b91c5":["ba1116b3450a9c1642c89445d131b37344055245"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}