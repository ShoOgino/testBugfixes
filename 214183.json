{"path":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribAdd(AddUpdateCommand,List[Node],ModifiableSolrParams).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribAdd(AddUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  public void distribAdd(AddUpdateCommand cmd, List<Node> nodes, ModifiableSolrParams commitParams) throws IOException {\n    checkResponses(false);\n    \n    // make sure any pending deletes are flushed\n    flushDeletes(1, null, null);\n    \n    // TODO: this is brittle\n    // need to make a clone since these commands may be reused\n    AddUpdateCommand clone = new AddUpdateCommand(null);\n    \n    clone.solrDoc = cmd.solrDoc;\n    clone.commitWithin = cmd.commitWithin;\n    clone.overwrite = cmd.overwrite;\n    clone.setVersion(cmd.getVersion());\n    AddRequest addRequest = new AddRequest();\n    addRequest.cmd = clone;\n    addRequest.params = commitParams;\n\n    for (Node node : nodes) {\n      List<AddRequest> alist = adds.get(node);\n      if (alist == null) {\n        alist = new ArrayList<AddRequest>(2);\n        adds.put(node, alist);\n      }\n      alist.add(addRequest);\n    }\n    \n    flushAdds(maxBufferedAddsPerServer, null, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d","91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribAdd(AddUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  public void distribAdd(AddUpdateCommand cmd, List<Node> nodes, ModifiableSolrParams commitParams) throws IOException {\n    checkResponses(false);\n    \n    // make sure any pending deletes are flushed\n    flushDeletes(1, null, null);\n    \n    // TODO: this is brittle\n    // need to make a clone since these commands may be reused\n    AddUpdateCommand clone = new AddUpdateCommand(null);\n    \n    clone.solrDoc = cmd.solrDoc;\n    clone.commitWithin = cmd.commitWithin;\n    clone.overwrite = cmd.overwrite;\n    clone.setVersion(cmd.getVersion());\n    AddRequest addRequest = new AddRequest();\n    addRequest.cmd = clone;\n    addRequest.params = commitParams;\n\n    for (Node node : nodes) {\n      List<AddRequest> alist = adds.get(node);\n      if (alist == null) {\n        alist = new ArrayList<AddRequest>(2);\n        adds.put(node, alist);\n      }\n      alist.add(addRequest);\n    }\n    \n    flushAdds(maxBufferedAddsPerServer, null, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribAdd(AddUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  public void distribAdd(AddUpdateCommand cmd, List<Node> nodes, ModifiableSolrParams commitParams) throws IOException {\n    checkResponses(false);\n    \n    // make sure any pending deletes are flushed\n    flushDeletes(1, null, null);\n    \n    // TODO: this is brittle\n    // need to make a clone since these commands may be reused\n    AddUpdateCommand clone = new AddUpdateCommand(null);\n    \n    clone.solrDoc = cmd.solrDoc;\n    clone.commitWithin = cmd.commitWithin;\n    clone.overwrite = cmd.overwrite;\n    clone.setVersion(cmd.getVersion());\n    AddRequest addRequest = new AddRequest();\n    addRequest.cmd = clone;\n    addRequest.params = commitParams;\n\n    for (Node node : nodes) {\n      List<AddRequest> alist = adds.get(node);\n      if (alist == null) {\n        alist = new ArrayList<AddRequest>(2);\n        adds.put(node, alist);\n      }\n      alist.add(addRequest);\n    }\n    \n    flushAdds(maxBufferedAddsPerServer, null, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d","date":1330786058,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribAdd(AddUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribAdd(AddUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  public void distribAdd(AddUpdateCommand cmd, List<Node> nodes, ModifiableSolrParams params) throws IOException {\n    checkResponses(false);\n    \n    // make sure any pending deletes are flushed\n    flushDeletes(1);\n    \n    // TODO: this is brittle\n    // need to make a clone since these commands may be reused\n    AddUpdateCommand clone = new AddUpdateCommand(null);\n    \n    clone.solrDoc = cmd.solrDoc;\n    clone.commitWithin = cmd.commitWithin;\n    clone.overwrite = cmd.overwrite;\n    clone.setVersion(cmd.getVersion());\n    AddRequest addRequest = new AddRequest();\n    addRequest.cmd = clone;\n    addRequest.params = params;\n\n    for (Node node : nodes) {\n      List<AddRequest> alist = adds.get(node);\n      if (alist == null) {\n        alist = new ArrayList<AddRequest>(2);\n        adds.put(node, alist);\n      }\n      alist.add(addRequest);\n    }\n    \n    flushAdds(maxBufferedAddsPerServer);\n  }\n\n","sourceOld":"  public void distribAdd(AddUpdateCommand cmd, List<Node> nodes, ModifiableSolrParams commitParams) throws IOException {\n    checkResponses(false);\n    \n    // make sure any pending deletes are flushed\n    flushDeletes(1, null, null);\n    \n    // TODO: this is brittle\n    // need to make a clone since these commands may be reused\n    AddUpdateCommand clone = new AddUpdateCommand(null);\n    \n    clone.solrDoc = cmd.solrDoc;\n    clone.commitWithin = cmd.commitWithin;\n    clone.overwrite = cmd.overwrite;\n    clone.setVersion(cmd.getVersion());\n    AddRequest addRequest = new AddRequest();\n    addRequest.cmd = clone;\n    addRequest.params = commitParams;\n\n    for (Node node : nodes) {\n      List<AddRequest> alist = adds.get(node);\n      if (alist == null) {\n        alist = new ArrayList<AddRequest>(2);\n        adds.put(node, alist);\n      }\n      alist.add(addRequest);\n    }\n    \n    flushAdds(maxBufferedAddsPerServer, null, null);\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribAdd(AddUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribAdd(AddUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  public void distribAdd(AddUpdateCommand cmd, List<Node> nodes, ModifiableSolrParams params) throws IOException {\n    checkResponses(false);\n    \n    // make sure any pending deletes are flushed\n    flushDeletes(1);\n    \n    // TODO: this is brittle\n    // need to make a clone since these commands may be reused\n    AddUpdateCommand clone = new AddUpdateCommand(null);\n    \n    clone.solrDoc = cmd.solrDoc;\n    clone.commitWithin = cmd.commitWithin;\n    clone.overwrite = cmd.overwrite;\n    clone.setVersion(cmd.getVersion());\n    AddRequest addRequest = new AddRequest();\n    addRequest.cmd = clone;\n    addRequest.params = params;\n\n    for (Node node : nodes) {\n      List<AddRequest> alist = adds.get(node);\n      if (alist == null) {\n        alist = new ArrayList<AddRequest>(2);\n        adds.put(node, alist);\n      }\n      alist.add(addRequest);\n    }\n    \n    flushAdds(maxBufferedAddsPerServer);\n  }\n\n","sourceOld":"  public void distribAdd(AddUpdateCommand cmd, List<Node> nodes, ModifiableSolrParams commitParams) throws IOException {\n    checkResponses(false);\n    \n    // make sure any pending deletes are flushed\n    flushDeletes(1, null, null);\n    \n    // TODO: this is brittle\n    // need to make a clone since these commands may be reused\n    AddUpdateCommand clone = new AddUpdateCommand(null);\n    \n    clone.solrDoc = cmd.solrDoc;\n    clone.commitWithin = cmd.commitWithin;\n    clone.overwrite = cmd.overwrite;\n    clone.setVersion(cmd.getVersion());\n    AddRequest addRequest = new AddRequest();\n    addRequest.cmd = clone;\n    addRequest.params = commitParams;\n\n    for (Node node : nodes) {\n      List<AddRequest> alist = adds.get(node);\n      if (alist == null) {\n        alist = new ArrayList<AddRequest>(2);\n        adds.put(node, alist);\n      }\n      alist.add(addRequest);\n    }\n    \n    flushAdds(maxBufferedAddsPerServer, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f1ea787bab5bdb5e72685e55424898da05509b6","date":1370289750,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribAdd(AddUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribAdd(AddUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  public void distribAdd(AddUpdateCommand cmd, List<Node> nodes, ModifiableSolrParams params) throws IOException {\n    checkResponses(false);\n    \n    // make sure any pending deletes are flushed\n    flushDeletes(1);\n\n    // TODO: this is brittle\n    // need to make a clone since these commands may be reused\n    AddUpdateCommand clone = new AddUpdateCommand(null);\n\n    clone.solrDoc = cmd.solrDoc;\n    clone.commitWithin = cmd.commitWithin;\n    clone.overwrite = cmd.overwrite;\n    clone.setVersion(cmd.getVersion());\n    AddRequest addRequest = new AddRequest();\n    addRequest.cmd = clone;\n    addRequest.params = params;\n\n    for (Node node : nodes) {\n      List<AddRequest> alist = adds.get(node);\n      if (alist == null) {\n        alist = new ArrayList<AddRequest>(2);\n        adds.put(node, alist);\n      }\n      alist.add(addRequest);\n    }\n\n    flushAdds(maxBufferedAddsPerServer);\n  }\n\n","sourceOld":"  public void distribAdd(AddUpdateCommand cmd, List<Node> nodes, ModifiableSolrParams params) throws IOException {\n    checkResponses(false);\n    \n    // make sure any pending deletes are flushed\n    flushDeletes(1);\n    \n    // TODO: this is brittle\n    // need to make a clone since these commands may be reused\n    AddUpdateCommand clone = new AddUpdateCommand(null);\n    \n    clone.solrDoc = cmd.solrDoc;\n    clone.commitWithin = cmd.commitWithin;\n    clone.overwrite = cmd.overwrite;\n    clone.setVersion(cmd.getVersion());\n    AddRequest addRequest = new AddRequest();\n    addRequest.cmd = clone;\n    addRequest.params = params;\n\n    for (Node node : nodes) {\n      List<AddRequest> alist = adds.get(node);\n      if (alist == null) {\n        alist = new ArrayList<AddRequest>(2);\n        adds.put(node, alist);\n      }\n      alist.add(addRequest);\n    }\n    \n    flushAdds(maxBufferedAddsPerServer);\n  }\n\n","bugFix":null,"bugIntro":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"91e069c492cf4895697ef7b81df0ffb9a8bd4b48","date":1382134253,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribAdd(AddUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribAdd(AddUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  public void distribAdd(AddUpdateCommand cmd, List<Node> nodes, ModifiableSolrParams params) throws IOException {\n    distribAdd(cmd, nodes, params, false);\n  }\n\n","sourceOld":"  public void distribAdd(AddUpdateCommand cmd, List<Node> nodes, ModifiableSolrParams params) throws IOException {\n    checkResponses(false);\n    \n    // make sure any pending deletes are flushed\n    flushDeletes(1);\n\n    // TODO: this is brittle\n    // need to make a clone since these commands may be reused\n    AddUpdateCommand clone = new AddUpdateCommand(null);\n\n    clone.solrDoc = cmd.solrDoc;\n    clone.commitWithin = cmd.commitWithin;\n    clone.overwrite = cmd.overwrite;\n    clone.setVersion(cmd.getVersion());\n    AddRequest addRequest = new AddRequest();\n    addRequest.cmd = clone;\n    addRequest.params = params;\n\n    for (Node node : nodes) {\n      List<AddRequest> alist = adds.get(node);\n      if (alist == null) {\n        alist = new ArrayList<AddRequest>(2);\n        adds.put(node, alist);\n      }\n      alist.add(addRequest);\n    }\n\n    flushAdds(maxBufferedAddsPerServer);\n  }\n\n","bugFix":["8f1ea787bab5bdb5e72685e55424898da05509b6","2c007e7c4cf8c55bc2a5884e315123afaaeec87f","d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d22d0f5940f155267b250876fa797ff69e8e6e7","date":1400540695,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribAdd(AddUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribAdd(AddUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  public void distribAdd(AddUpdateCommand cmd, List<Node> nodes, ModifiableSolrParams params) throws IOException {\n    distribAdd(cmd, nodes, params, false, null);\n  }\n\n","sourceOld":"  public void distribAdd(AddUpdateCommand cmd, List<Node> nodes, ModifiableSolrParams params) throws IOException {\n    distribAdd(cmd, nodes, params, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribAdd(AddUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribAdd(AddUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  public void distribAdd(AddUpdateCommand cmd, List<Node> nodes, ModifiableSolrParams params) throws IOException {\n    distribAdd(cmd, nodes, params, false, null);\n  }\n\n","sourceOld":"  public void distribAdd(AddUpdateCommand cmd, List<Node> nodes, ModifiableSolrParams params) throws IOException {\n    distribAdd(cmd, nodes, params, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615bf5b56d95ed8c9bf06a402db6c817d6bff21a","date":1509492118,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribAdd(AddUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribAdd(AddUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  public void distribAdd(AddUpdateCommand cmd, List<Node> nodes, ModifiableSolrParams params) throws IOException {\n    distribAdd(cmd, nodes, params, false, null, null);\n  }\n\n","sourceOld":"  public void distribAdd(AddUpdateCommand cmd, List<Node> nodes, ModifiableSolrParams params) throws IOException {\n    distribAdd(cmd, nodes, params, false, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"9d22d0f5940f155267b250876fa797ff69e8e6e7":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d"],"8f1ea787bab5bdb5e72685e55424898da05509b6":["d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d"],"d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["8f1ea787bab5bdb5e72685e55424898da05509b6"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["9d22d0f5940f155267b250876fa797ff69e8e6e7"],"b7605579001505896d48b07160075a5c8b8e128e":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48","9d22d0f5940f155267b250876fa797ff69e8e6e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"9d22d0f5940f155267b250876fa797ff69e8e6e7":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a","b7605579001505896d48b07160075a5c8b8e128e"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8f1ea787bab5bdb5e72685e55424898da05509b6"],"8f1ea787bab5bdb5e72685e55424898da05509b6":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["9d22d0f5940f155267b250876fa797ff69e8e6e7","b7605579001505896d48b07160075a5c8b8e128e"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7605579001505896d48b07160075a5c8b8e128e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}