{"path":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#testBenchmark().mjava","commits":[{"id":"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","date":1282571040,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#testBenchmark().mjava","pathOld":"/dev/null","sourceNew":"  public void testBenchmark() throws Exception {\n    // this benchmark is very time consuming\n    boolean doTest = false;\n    if (!doTest) {\n      return;\n    }\n    Map<String,Integer> ref = new HashMap<String,Integer>();\n    JaspellLookup jaspell = new JaspellLookup();\n    TSTLookup tst = new TSTLookup();\n    \n    _benchmark(tst, ref, true, null);\n    _benchmark(jaspell, ref, true, null);\n    jaspell = null;\n    tst = null;\n    int count = 100;\n    Bench b = runBenchmark(JaspellLookup.class, count);\n    System.err.println(JaspellLookup.class.getSimpleName() + \": buildTime[ms]=\" + (b.buildTime / count) +\n            \" lookupTime[ms]=\" + (b.lookupTime / count / 1000000));\n    b = runBenchmark(TSTLookup.class, count);\n    System.err.println(TSTLookup.class.getSimpleName() + \": buildTime[ms]=\" + (b.buildTime / count) +\n            \" lookupTime[ms]=\" + (b.lookupTime / count / 1000000));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cd064fa4fc33438aaa550384d00adb31b7960f4","date":1282920434,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#testBenchmark().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#testBenchmark().mjava","sourceNew":"  @Test\n  public void testBenchmark() throws Exception {\n    // this benchmark is very time consuming\n    boolean doTest = false;\n    if (!doTest) {\n      return;\n    }\n    Map<String,Integer> ref = new HashMap<String,Integer>();\n    JaspellLookup jaspell = new JaspellLookup();\n    TSTLookup tst = new TSTLookup();\n    \n    _benchmark(tst, ref, true, null);\n    _benchmark(jaspell, ref, true, null);\n    jaspell = null;\n    tst = null;\n    int count = 100;\n    Bench b = runBenchmark(JaspellLookup.class, count);\n    System.err.println(JaspellLookup.class.getSimpleName() + \": buildTime[ms]=\" + (b.buildTime / count) +\n            \" lookupTime[ms]=\" + (b.lookupTime / count / 1000000));\n    b = runBenchmark(TSTLookup.class, count);\n    System.err.println(TSTLookup.class.getSimpleName() + \": buildTime[ms]=\" + (b.buildTime / count) +\n            \" lookupTime[ms]=\" + (b.lookupTime / count / 1000000));\n  }\n\n","sourceOld":"  public void testBenchmark() throws Exception {\n    // this benchmark is very time consuming\n    boolean doTest = false;\n    if (!doTest) {\n      return;\n    }\n    Map<String,Integer> ref = new HashMap<String,Integer>();\n    JaspellLookup jaspell = new JaspellLookup();\n    TSTLookup tst = new TSTLookup();\n    \n    _benchmark(tst, ref, true, null);\n    _benchmark(jaspell, ref, true, null);\n    jaspell = null;\n    tst = null;\n    int count = 100;\n    Bench b = runBenchmark(JaspellLookup.class, count);\n    System.err.println(JaspellLookup.class.getSimpleName() + \": buildTime[ms]=\" + (b.buildTime / count) +\n            \" lookupTime[ms]=\" + (b.lookupTime / count / 1000000));\n    b = runBenchmark(TSTLookup.class, count);\n    System.err.println(TSTLookup.class.getSimpleName() + \": buildTime[ms]=\" + (b.buildTime / count) +\n            \" lookupTime[ms]=\" + (b.lookupTime / count / 1000000));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#testBenchmark().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBenchmark() throws Exception {\n    // this benchmark is very time consuming\n    boolean doTest = false;\n    if (!doTest) {\n      return;\n    }\n    Map<String,Integer> ref = new HashMap<String,Integer>();\n    JaspellLookup jaspell = new JaspellLookup();\n    TSTLookup tst = new TSTLookup();\n    \n    _benchmark(tst, ref, true, null);\n    _benchmark(jaspell, ref, true, null);\n    jaspell = null;\n    tst = null;\n    int count = 100;\n    Bench b = runBenchmark(JaspellLookup.class, count);\n    System.err.println(JaspellLookup.class.getSimpleName() + \": buildTime[ms]=\" + (b.buildTime / count) +\n            \" lookupTime[ms]=\" + (b.lookupTime / count / 1000000));\n    b = runBenchmark(TSTLookup.class, count);\n    System.err.println(TSTLookup.class.getSimpleName() + \": buildTime[ms]=\" + (b.buildTime / count) +\n            \" lookupTime[ms]=\" + (b.lookupTime / count / 1000000));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ce3d278891029d7b03fa19c78ad8a08bf75d13c","date":1301656390,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#testBenchmark().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#testBenchmark().mjava","sourceNew":"  @Test\n  public void testBenchmark() throws Exception {\n    // this benchmark is very time consuming\n    boolean doTest = true;\n    if (!doTest) {\n      return;\n    }\n\n    final List<Class<? extends Lookup>> benchmarkClasses = Lists.newArrayList();  \n    benchmarkClasses.add(JaspellLookup.class);\n    benchmarkClasses.add(TSTLookup.class);\n\n    // Run a single pass just to see if everything works fine and provide size estimates.\n    final RamUsageEstimator rue = new RamUsageEstimator();\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Lookup lookup = singleBenchmark(cls, null);\n      System.err.println(\n          String.format(Locale.ENGLISH,\n              \"%20s, size[B]=%,d\",\n              lookup.getClass().getSimpleName(), \n              rue.estimateRamUsage(lookup)));\n    }\n\n    int warmupCount = 10;\n    int measuredCount = 100;\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Bench b = fullBenchmark(cls, warmupCount, measuredCount);\n      System.err.println(String.format(Locale.ENGLISH,\n          \"%s: buildTime[ms]=%,d lookupTime[ms]=%,d\",\n          cls.getSimpleName(),\n          (b.buildTime / measuredCount),\n          (b.lookupTime / measuredCount / 1000000)));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBenchmark() throws Exception {\n    // this benchmark is very time consuming\n    boolean doTest = false;\n    if (!doTest) {\n      return;\n    }\n    Map<String,Integer> ref = new HashMap<String,Integer>();\n    JaspellLookup jaspell = new JaspellLookup();\n    TSTLookup tst = new TSTLookup();\n    \n    _benchmark(tst, ref, true, null);\n    _benchmark(jaspell, ref, true, null);\n    jaspell = null;\n    tst = null;\n    int count = 100;\n    Bench b = runBenchmark(JaspellLookup.class, count);\n    System.err.println(JaspellLookup.class.getSimpleName() + \": buildTime[ms]=\" + (b.buildTime / count) +\n            \" lookupTime[ms]=\" + (b.lookupTime / count / 1000000));\n    b = runBenchmark(TSTLookup.class, count);\n    System.err.println(TSTLookup.class.getSimpleName() + \": buildTime[ms]=\" + (b.buildTime / count) +\n            \" lookupTime[ms]=\" + (b.lookupTime / count / 1000000));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e9c996f89bd333b3bf4ad2f5f0757713570880f","date":1301741568,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#testBenchmark().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#testBenchmark().mjava","sourceNew":"  @Test @Ignore\n  public void testBenchmark() throws Exception {\n    final List<Class<? extends Lookup>> benchmarkClasses = Lists.newArrayList();  \n    benchmarkClasses.add(JaspellLookup.class);\n    benchmarkClasses.add(TSTLookup.class);\n\n    // Run a single pass just to see if everything works fine and provide size estimates.\n    final RamUsageEstimator rue = new RamUsageEstimator();\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Lookup lookup = singleBenchmark(cls, null);\n      System.err.println(\n          String.format(Locale.ENGLISH,\n              \"%20s, size[B]=%,d\",\n              lookup.getClass().getSimpleName(), \n              rue.estimateRamUsage(lookup)));\n    }\n\n    int warmupCount = 10;\n    int measuredCount = 100;\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Bench b = fullBenchmark(cls, warmupCount, measuredCount);\n      System.err.println(String.format(Locale.ENGLISH,\n          \"%s: buildTime[ms]=%,d lookupTime[ms]=%,d\",\n          cls.getSimpleName(),\n          (b.buildTime / measuredCount),\n          (b.lookupTime / measuredCount / 1000000)));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBenchmark() throws Exception {\n    // this benchmark is very time consuming\n    boolean doTest = true;\n    if (!doTest) {\n      return;\n    }\n\n    final List<Class<? extends Lookup>> benchmarkClasses = Lists.newArrayList();  \n    benchmarkClasses.add(JaspellLookup.class);\n    benchmarkClasses.add(TSTLookup.class);\n\n    // Run a single pass just to see if everything works fine and provide size estimates.\n    final RamUsageEstimator rue = new RamUsageEstimator();\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Lookup lookup = singleBenchmark(cls, null);\n      System.err.println(\n          String.format(Locale.ENGLISH,\n              \"%20s, size[B]=%,d\",\n              lookup.getClass().getSimpleName(), \n              rue.estimateRamUsage(lookup)));\n    }\n\n    int warmupCount = 10;\n    int measuredCount = 100;\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Bench b = fullBenchmark(cls, warmupCount, measuredCount);\n      System.err.println(String.format(Locale.ENGLISH,\n          \"%s: buildTime[ms]=%,d lookupTime[ms]=%,d\",\n          cls.getSimpleName(),\n          (b.buildTime / measuredCount),\n          (b.lookupTime / measuredCount / 1000000)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#testBenchmark().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#testBenchmark().mjava","sourceNew":"  @Test @Ignore\n  public void testBenchmark() throws Exception {\n    final List<Class<? extends Lookup>> benchmarkClasses = Lists.newArrayList();  \n    benchmarkClasses.add(JaspellLookup.class);\n    benchmarkClasses.add(TSTLookup.class);\n\n    // Run a single pass just to see if everything works fine and provide size estimates.\n    final RamUsageEstimator rue = new RamUsageEstimator();\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Lookup lookup = singleBenchmark(cls, null);\n      System.err.println(\n          String.format(Locale.ENGLISH,\n              \"%20s, size[B]=%,d\",\n              lookup.getClass().getSimpleName(), \n              rue.estimateRamUsage(lookup)));\n    }\n\n    int warmupCount = 10;\n    int measuredCount = 100;\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Bench b = fullBenchmark(cls, warmupCount, measuredCount);\n      System.err.println(String.format(Locale.ENGLISH,\n          \"%s: buildTime[ms]=%,d lookupTime[ms]=%,d\",\n          cls.getSimpleName(),\n          (b.buildTime / measuredCount),\n          (b.lookupTime / measuredCount / 1000000)));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBenchmark() throws Exception {\n    // this benchmark is very time consuming\n    boolean doTest = false;\n    if (!doTest) {\n      return;\n    }\n    Map<String,Integer> ref = new HashMap<String,Integer>();\n    JaspellLookup jaspell = new JaspellLookup();\n    TSTLookup tst = new TSTLookup();\n    \n    _benchmark(tst, ref, true, null);\n    _benchmark(jaspell, ref, true, null);\n    jaspell = null;\n    tst = null;\n    int count = 100;\n    Bench b = runBenchmark(JaspellLookup.class, count);\n    System.err.println(JaspellLookup.class.getSimpleName() + \": buildTime[ms]=\" + (b.buildTime / count) +\n            \" lookupTime[ms]=\" + (b.lookupTime / count / 1000000));\n    b = runBenchmark(TSTLookup.class, count);\n    System.err.println(TSTLookup.class.getSimpleName() + \": buildTime[ms]=\" + (b.buildTime / count) +\n            \" lookupTime[ms]=\" + (b.lookupTime / count / 1000000));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47ac88233e9e3019faa24a5184425ad60c23d70f","date":1302779803,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#testBenchmark().mjava","sourceNew":null,"sourceOld":"  @Test @Ignore\n  public void testBenchmark() throws Exception {\n    final List<Class<? extends Lookup>> benchmarkClasses = Lists.newArrayList();  \n    benchmarkClasses.add(JaspellLookup.class);\n    benchmarkClasses.add(TSTLookup.class);\n\n    // Run a single pass just to see if everything works fine and provide size estimates.\n    final RamUsageEstimator rue = new RamUsageEstimator();\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Lookup lookup = singleBenchmark(cls, null);\n      System.err.println(\n          String.format(Locale.ENGLISH,\n              \"%20s, size[B]=%,d\",\n              lookup.getClass().getSimpleName(), \n              rue.estimateRamUsage(lookup)));\n    }\n\n    int warmupCount = 10;\n    int measuredCount = 100;\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Bench b = fullBenchmark(cls, warmupCount, measuredCount);\n      System.err.println(String.format(Locale.ENGLISH,\n          \"%s: buildTime[ms]=%,d lookupTime[ms]=%,d\",\n          cls.getSimpleName(),\n          (b.buildTime / measuredCount),\n          (b.lookupTime / measuredCount / 1000000)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb46686a27187e42311e77666a2c7026f461ebc","date":1302858020,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#testBenchmark().mjava","sourceNew":null,"sourceOld":"  @Test @Ignore\n  public void testBenchmark() throws Exception {\n    final List<Class<? extends Lookup>> benchmarkClasses = Lists.newArrayList();  \n    benchmarkClasses.add(JaspellLookup.class);\n    benchmarkClasses.add(TSTLookup.class);\n\n    // Run a single pass just to see if everything works fine and provide size estimates.\n    final RamUsageEstimator rue = new RamUsageEstimator();\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Lookup lookup = singleBenchmark(cls, null);\n      System.err.println(\n          String.format(Locale.ENGLISH,\n              \"%20s, size[B]=%,d\",\n              lookup.getClass().getSimpleName(), \n              rue.estimateRamUsage(lookup)));\n    }\n\n    int warmupCount = 10;\n    int measuredCount = 100;\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Bench b = fullBenchmark(cls, warmupCount, measuredCount);\n      System.err.println(String.format(Locale.ENGLISH,\n          \"%s: buildTime[ms]=%,d lookupTime[ms]=%,d\",\n          cls.getSimpleName(),\n          (b.buildTime / measuredCount),\n          (b.lookupTime / measuredCount / 1000000)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#testBenchmark().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testBenchmark() throws Exception {\n    // this benchmark is very time consuming\n    boolean doTest = false;\n    if (!doTest) {\n      return;\n    }\n    Map<String,Integer> ref = new HashMap<String,Integer>();\n    JaspellLookup jaspell = new JaspellLookup();\n    TSTLookup tst = new TSTLookup();\n    \n    _benchmark(tst, ref, true, null);\n    _benchmark(jaspell, ref, true, null);\n    jaspell = null;\n    tst = null;\n    int count = 100;\n    Bench b = runBenchmark(JaspellLookup.class, count);\n    System.err.println(JaspellLookup.class.getSimpleName() + \": buildTime[ms]=\" + (b.buildTime / count) +\n            \" lookupTime[ms]=\" + (b.lookupTime / count / 1000000));\n    b = runBenchmark(TSTLookup.class, count);\n    System.err.println(TSTLookup.class.getSimpleName() + \": buildTime[ms]=\" + (b.buildTime / count) +\n            \" lookupTime[ms]=\" + (b.lookupTime / count / 1000000));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/SuggesterTest#testBenchmark().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testBenchmark() throws Exception {\n    // this benchmark is very time consuming\n    boolean doTest = false;\n    if (!doTest) {\n      return;\n    }\n    Map<String,Integer> ref = new HashMap<String,Integer>();\n    JaspellLookup jaspell = new JaspellLookup();\n    TSTLookup tst = new TSTLookup();\n    \n    _benchmark(tst, ref, true, null);\n    _benchmark(jaspell, ref, true, null);\n    jaspell = null;\n    tst = null;\n    int count = 100;\n    Bench b = runBenchmark(JaspellLookup.class, count);\n    System.err.println(JaspellLookup.class.getSimpleName() + \": buildTime[ms]=\" + (b.buildTime / count) +\n            \" lookupTime[ms]=\" + (b.lookupTime / count / 1000000));\n    b = runBenchmark(TSTLookup.class, count);\n    System.err.println(TSTLookup.class.getSimpleName() + \": buildTime[ms]=\" + (b.buildTime / count) +\n            \" lookupTime[ms]=\" + (b.lookupTime / count / 1000000));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9cd064fa4fc33438aaa550384d00adb31b7960f4":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af"],"47ac88233e9e3019faa24a5184425ad60c23d70f":["6e9c996f89bd333b3bf4ad2f5f0757713570880f"],"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1eb46686a27187e42311e77666a2c7026f461ebc":["45669a651c970812a680841b97a77cce06af559f","47ac88233e9e3019faa24a5184425ad60c23d70f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["9cd064fa4fc33438aaa550384d00adb31b7960f4","47ac88233e9e3019faa24a5184425ad60c23d70f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["9cd064fa4fc33438aaa550384d00adb31b7960f4","47ac88233e9e3019faa24a5184425ad60c23d70f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9cd064fa4fc33438aaa550384d00adb31b7960f4"],"45669a651c970812a680841b97a77cce06af559f":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","6e9c996f89bd333b3bf4ad2f5f0757713570880f"],"6e9c996f89bd333b3bf4ad2f5f0757713570880f":["0ce3d278891029d7b03fa19c78ad8a08bf75d13c"],"0ce3d278891029d7b03fa19c78ad8a08bf75d13c":["9cd064fa4fc33438aaa550384d00adb31b7960f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["47ac88233e9e3019faa24a5184425ad60c23d70f"]},"commit2Childs":{"9cd064fa4fc33438aaa550384d00adb31b7960f4":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","0ce3d278891029d7b03fa19c78ad8a08bf75d13c"],"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af":["9cd064fa4fc33438aaa550384d00adb31b7960f4"],"47ac88233e9e3019faa24a5184425ad60c23d70f":["1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1eb46686a27187e42311e77666a2c7026f461ebc":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["45669a651c970812a680841b97a77cce06af559f"],"45669a651c970812a680841b97a77cce06af559f":["1eb46686a27187e42311e77666a2c7026f461ebc"],"6e9c996f89bd333b3bf4ad2f5f0757713570880f":["47ac88233e9e3019faa24a5184425ad60c23d70f","45669a651c970812a680841b97a77cce06af559f"],"0ce3d278891029d7b03fa19c78ad8a08bf75d13c":["6e9c996f89bd333b3bf4ad2f5f0757713570880f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}