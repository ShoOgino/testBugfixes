{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","commits":[{"id":"9684bda54f470eef3b3ad2266a16b96370655fa9","date":1272922666,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestPerFieldAnalzyerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    analyzer.addAnalyzer(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n                                            new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n                                            new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    analyzer.addAnalyzer(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n                                            new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n                                            new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    analyzer.addAnalyzer(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n                                            new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n                                            new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    analyzer.addAnalyzer(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n                                            new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n                                            new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9684bda54f470eef3b3ad2266a16b96370655fa9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9684bda54f470eef3b3ad2266a16b96370655fa9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9684bda54f470eef3b3ad2266a16b96370655fa9"],"9684bda54f470eef3b3ad2266a16b96370655fa9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}