{"path":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinWeight#scorerSupplier(LeafReaderContext).mjava","commits":[{"id":"ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c","date":1485769582,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinWeight#scorerSupplier(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // parent document space\n    @Override\n    public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n      final ScorerSupplier childScorerSupplier = in.scorerSupplier(context);\n      if (childScorerSupplier == null) {\n        return null;\n      }\n\n      // NOTE: this does not take accept docs into account, the responsibility\n      // to not match deleted docs is on the scorer\n      final BitSet parents = parentsFilter.getBitSet(context);\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n\n      return new ScorerSupplier() {\n\n        @Override\n        public Scorer get(boolean randomAccess) throws IOException {\n          return new BlockJoinScorer(BlockJoinWeight.this, childScorerSupplier.get(randomAccess), parents, scoreMode);\n        }\n\n        @Override\n        public long cost() {\n          return childScorerSupplier.cost();\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinWeight#scorerSupplier(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // parent document space\n    @Override\n    public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n      final ScorerSupplier childScorerSupplier = in.scorerSupplier(context);\n      if (childScorerSupplier == null) {\n        return null;\n      }\n\n      // NOTE: this does not take accept docs into account, the responsibility\n      // to not match deleted docs is on the scorer\n      final BitSet parents = parentsFilter.getBitSet(context);\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n\n      return new ScorerSupplier() {\n\n        @Override\n        public Scorer get(boolean randomAccess) throws IOException {\n          return new BlockJoinScorer(BlockJoinWeight.this, childScorerSupplier.get(randomAccess), parents, scoreMode);\n        }\n\n        @Override\n        public long cost() {\n          return childScorerSupplier.cost();\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f3e9c0fc20b3107388ec853a6fbad9f891b461","date":1502359844,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinWeight#scorerSupplier(LeafReaderContext).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinWeight#scorerSupplier(LeafReaderContext).mjava","sourceNew":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // parent document space\n    @Override\n    public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n      final ScorerSupplier childScorerSupplier = in.scorerSupplier(context);\n      if (childScorerSupplier == null) {\n        return null;\n      }\n\n      // NOTE: this does not take accept docs into account, the responsibility\n      // to not match deleted docs is on the scorer\n      final BitSet parents = parentsFilter.getBitSet(context);\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n\n      return new ScorerSupplier() {\n\n        @Override\n        public Scorer get(long leadCost) throws IOException {\n          return new BlockJoinScorer(BlockJoinWeight.this, childScorerSupplier.get(leadCost), parents, scoreMode);\n        }\n\n        @Override\n        public long cost() {\n          return childScorerSupplier.cost();\n        }\n      };\n    }\n\n","sourceOld":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // parent document space\n    @Override\n    public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n      final ScorerSupplier childScorerSupplier = in.scorerSupplier(context);\n      if (childScorerSupplier == null) {\n        return null;\n      }\n\n      // NOTE: this does not take accept docs into account, the responsibility\n      // to not match deleted docs is on the scorer\n      final BitSet parents = parentsFilter.getBitSet(context);\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n\n      return new ScorerSupplier() {\n\n        @Override\n        public Scorer get(boolean randomAccess) throws IOException {\n          return new BlockJoinScorer(BlockJoinWeight.this, childScorerSupplier.get(randomAccess), parents, scoreMode);\n        }\n\n        @Override\n        public long cost() {\n          return childScorerSupplier.cost();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6ba405c7c8192661bdf7ce782181d12f3162a6","date":1502361392,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinWeight#scorerSupplier(LeafReaderContext).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinWeight#scorerSupplier(LeafReaderContext).mjava","sourceNew":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // parent document space\n    @Override\n    public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n      final ScorerSupplier childScorerSupplier = in.scorerSupplier(context);\n      if (childScorerSupplier == null) {\n        return null;\n      }\n\n      // NOTE: this does not take accept docs into account, the responsibility\n      // to not match deleted docs is on the scorer\n      final BitSet parents = parentsFilter.getBitSet(context);\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n\n      return new ScorerSupplier() {\n\n        @Override\n        public Scorer get(long leadCost) throws IOException {\n          return new BlockJoinScorer(BlockJoinWeight.this, childScorerSupplier.get(leadCost), parents, scoreMode);\n        }\n\n        @Override\n        public long cost() {\n          return childScorerSupplier.cost();\n        }\n      };\n    }\n\n","sourceOld":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // parent document space\n    @Override\n    public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n      final ScorerSupplier childScorerSupplier = in.scorerSupplier(context);\n      if (childScorerSupplier == null) {\n        return null;\n      }\n\n      // NOTE: this does not take accept docs into account, the responsibility\n      // to not match deleted docs is on the scorer\n      final BitSet parents = parentsFilter.getBitSet(context);\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n\n      return new ScorerSupplier() {\n\n        @Override\n        public Scorer get(boolean randomAccess) throws IOException {\n          return new BlockJoinScorer(BlockJoinWeight.this, childScorerSupplier.get(randomAccess), parents, scoreMode);\n        }\n\n        @Override\n        public long cost() {\n          return childScorerSupplier.cost();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinWeight#scorerSupplier(LeafReaderContext).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinWeight#scorerSupplier(LeafReaderContext).mjava","sourceNew":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // parent document space\n    @Override\n    public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n      final ScorerSupplier childScorerSupplier = in.scorerSupplier(context);\n      if (childScorerSupplier == null) {\n        return null;\n      }\n\n      // NOTE: this does not take accept docs into account, the responsibility\n      // to not match deleted docs is on the scorer\n      final BitSet parents = parentsFilter.getBitSet(context);\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n\n      return new ScorerSupplier() {\n\n        @Override\n        public Scorer get(long leadCost) throws IOException {\n          return new BlockJoinScorer(BlockJoinWeight.this, childScorerSupplier.get(leadCost), parents, scoreMode);\n        }\n\n        @Override\n        public long cost() {\n          return childScorerSupplier.cost();\n        }\n      };\n    }\n\n","sourceOld":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // parent document space\n    @Override\n    public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n      final ScorerSupplier childScorerSupplier = in.scorerSupplier(context);\n      if (childScorerSupplier == null) {\n        return null;\n      }\n\n      // NOTE: this does not take accept docs into account, the responsibility\n      // to not match deleted docs is on the scorer\n      final BitSet parents = parentsFilter.getBitSet(context);\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n\n      return new ScorerSupplier() {\n\n        @Override\n        public Scorer get(boolean randomAccess) throws IOException {\n          return new BlockJoinScorer(BlockJoinWeight.this, childScorerSupplier.get(randomAccess), parents, scoreMode);\n        }\n\n        @Override\n        public long cost() {\n          return childScorerSupplier.cost();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinWeight#scorerSupplier(LeafReaderContext).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinWeight#scorerSupplier(LeafReaderContext).mjava","sourceNew":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // parent document space\n    @Override\n    public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n      final ScorerSupplier childScorerSupplier = in.scorerSupplier(context);\n      if (childScorerSupplier == null) {\n        return null;\n      }\n\n      // NOTE: this does not take accept docs into account, the responsibility\n      // to not match deleted docs is on the scorer\n      final BitSet parents = parentsFilter.getBitSet(context);\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n\n      return new ScorerSupplier() {\n\n        @Override\n        public Scorer get(long leadCost) throws IOException {\n          return new BlockJoinScorer(BlockJoinWeight.this, childScorerSupplier.get(leadCost), parents, scoreMode);\n        }\n\n        @Override\n        public long cost() {\n          return childScorerSupplier.cost();\n        }\n      };\n    }\n\n","sourceOld":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // parent document space\n    @Override\n    public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n      final ScorerSupplier childScorerSupplier = in.scorerSupplier(context);\n      if (childScorerSupplier == null) {\n        return null;\n      }\n\n      // NOTE: this does not take accept docs into account, the responsibility\n      // to not match deleted docs is on the scorer\n      final BitSet parents = parentsFilter.getBitSet(context);\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n\n      return new ScorerSupplier() {\n\n        @Override\n        public Scorer get(boolean randomAccess) throws IOException {\n          return new BlockJoinScorer(BlockJoinWeight.this, childScorerSupplier.get(randomAccess), parents, scoreMode);\n        }\n\n        @Override\n        public long cost() {\n          return childScorerSupplier.cost();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c","24f3e9c0fc20b3107388ec853a6fbad9f891b461"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"]},"commit2Childs":{"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c":["7d6ba405c7c8192661bdf7ce782181d12f3162a6","58884af1f68e9d61c217c753fbd6266d86a63b14","24f3e9c0fc20b3107388ec853a6fbad9f891b461","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}