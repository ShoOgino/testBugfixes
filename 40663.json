{"path":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","commits":[{"id":"f366ce28775e2b8ea4e06355009471328711666d","date":1360551293,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached multi dv\n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedSetDocValues v = context.reader().getSortedSetDocValues(field);\n      if (v == null) {\n        v = SortedSetDocValues.EMPTY;\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea3c18d8f37008425940502c58fd80ba4b5397c1","date":1361154566,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED_SET) {\n      return null;\n    }\n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedSetDocValues v = context.reader().getSortedSetDocValues(field);\n      if (v == null) {\n        v = SortedSetDocValues.EMPTY;\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached multi dv\n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedSetDocValues v = context.reader().getSortedSetDocValues(field);\n      if (v == null) {\n        v = SortedSetDocValues.EMPTY;\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED_SET) {\n      return null;\n    }\n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedSetDocValues v = context.reader().getSortedSetDocValues(field);\n      if (v == null) {\n        v = SortedSetDocValues.EMPTY;\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e","date":1397206443,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED_SET) {\n      return null;\n    }\n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedSetDocValues v = context.reader().getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.EMPTY_SORTED_SET;\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED_SET) {\n      return null;\n    }\n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedSetDocValues v = context.reader().getSortedSetDocValues(field);\n      if (v == null) {\n        v = SortedSetDocValues.EMPTY;\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","bugFix":["f366ce28775e2b8ea4e06355009471328711666d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED_SET) {\n      return null;\n    }\n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedSetDocValues v = context.reader().getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED_SET) {\n      return null;\n    }\n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedSetDocValues v = context.reader().getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.EMPTY_SORTED_SET;\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED_SET) {\n      return null;\n    }\n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      SortedSetDocValues v = context.reader().getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED_SET) {\n      return null;\n    }\n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedSetDocValues v = context.reader().getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED_SET) {\n      return null;\n    }\n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      SortedSetDocValues v = context.reader().getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED_SET) {\n      return null;\n    }\n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      SortedSetDocValues v = context.reader().getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","bugFix":["f366ce28775e2b8ea4e06355009471328711666d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0764b2ccb75b631aac6dfbfaca0d91f78acd813","date":1438795032,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if(fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET){\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED_SET) {\n      return null;\n    }\n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      SortedSetDocValues v = context.reader().getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedSetDocValues(String).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if(fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET){\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if(fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET){\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["f0764b2ccb75b631aac6dfbfaca0d91f78acd813"],"ea3c18d8f37008425940502c58fd80ba4b5397c1":["f366ce28775e2b8ea4e06355009471328711666d"],"f0764b2ccb75b631aac6dfbfaca0d91f78acd813":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"f366ce28775e2b8ea4e06355009471328711666d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ea3c18d8f37008425940502c58fd80ba4b5397c1"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e":["ddbb72a33557d2b5bc22ee95daf3281c43560502"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea3c18d8f37008425940502c58fd80ba4b5397c1":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"f0764b2ccb75b631aac6dfbfaca0d91f78acd813":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f366ce28775e2b8ea4e06355009471328711666d","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"f366ce28775e2b8ea4e06355009471328711666d":["ea3c18d8f37008425940502c58fd80ba4b5397c1"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["f0764b2ccb75b631aac6dfbfaca0d91f78acd813"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}