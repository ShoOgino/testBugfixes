{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testSettersChaining().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testSettersChaining().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testSettersChaining().mjava","sourceNew":"  @Test\n  public void testSettersChaining() throws Exception {\n    // Ensures that every setter returns IndexWriterConfig to enable easy\n    // chaining.\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class\n          && m.getName().startsWith(\"set\")\n          && !Modifier.isStatic(m.getModifiers())) {\n        assertEquals(\"method \" + m.getName() + \" does not return IndexWriterConfig\",\n            IndexWriterConfig.class, m.getReturnType());\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSettersChaining() throws Exception {\n    // Ensures that every setter returns IndexWriterConfig to enable easy\n    // chaining.\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class\n          && m.getName().startsWith(\"set\")\n          && !Modifier.isStatic(m.getModifiers())) {\n        assertEquals(\"method \" + m.getName() + \" does not return IndexWriterConfig\",\n            IndexWriterConfig.class, m.getReturnType());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4e54ed7cef46f86888b5fb547594f62160395c","date":1340006971,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testSettersChaining().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testSettersChaining().mjava","sourceNew":"  @Test\n  public void testSettersChaining() throws Exception {\n    // Ensures that every setter returns IndexWriterConfig to allow chaining.\n    HashSet<String> liveSetters = new HashSet<String>();\n    HashSet<String> allSetters = new HashSet<String>();\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getName().startsWith(\"set\") && !Modifier.isStatic(m.getModifiers())) {\n        allSetters.add(m.getName());\n        // setters overridden from LiveIndexWriterConfig are returned twice, once with \n        // IndexWriterConfig return type and second with LiveIndexWriterConfig. The ones\n        // from LiveIndexWriterConfig are marked 'synthetic', so just collect them and\n        // assert in the end that we also received them from IWC.\n        if (m.isSynthetic()) {\n          liveSetters.add(m.getName());\n        } else {\n          assertEquals(\"method \" + m.getName() + \" does not return IndexWriterConfig\",\n              IndexWriterConfig.class, m.getReturnType());\n        }\n      }\n    }\n    for (String setter : liveSetters) {\n      assertTrue(\"setter method not overridden by IndexWriterConfig: \" + setter, allSetters.contains(setter));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSettersChaining() throws Exception {\n    // Ensures that every setter returns IndexWriterConfig to enable easy\n    // chaining.\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class\n          && m.getName().startsWith(\"set\")\n          && !Modifier.isStatic(m.getModifiers())) {\n        assertEquals(\"method \" + m.getName() + \" does not return IndexWriterConfig\",\n            IndexWriterConfig.class, m.getReturnType());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testSettersChaining().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testSettersChaining().mjava","sourceNew":"  @Test\n  public void testSettersChaining() throws Exception {\n    // Ensures that every setter returns IndexWriterConfig to allow chaining.\n    HashSet<String> liveSetters = new HashSet<>();\n    HashSet<String> allSetters = new HashSet<>();\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getName().startsWith(\"set\") && !Modifier.isStatic(m.getModifiers())) {\n        allSetters.add(m.getName());\n        // setters overridden from LiveIndexWriterConfig are returned twice, once with \n        // IndexWriterConfig return type and second with LiveIndexWriterConfig. The ones\n        // from LiveIndexWriterConfig are marked 'synthetic', so just collect them and\n        // assert in the end that we also received them from IWC.\n        if (m.isSynthetic()) {\n          liveSetters.add(m.getName());\n        } else {\n          assertEquals(\"method \" + m.getName() + \" does not return IndexWriterConfig\",\n              IndexWriterConfig.class, m.getReturnType());\n        }\n      }\n    }\n    for (String setter : liveSetters) {\n      assertTrue(\"setter method not overridden by IndexWriterConfig: \" + setter, allSetters.contains(setter));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSettersChaining() throws Exception {\n    // Ensures that every setter returns IndexWriterConfig to allow chaining.\n    HashSet<String> liveSetters = new HashSet<String>();\n    HashSet<String> allSetters = new HashSet<String>();\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getName().startsWith(\"set\") && !Modifier.isStatic(m.getModifiers())) {\n        allSetters.add(m.getName());\n        // setters overridden from LiveIndexWriterConfig are returned twice, once with \n        // IndexWriterConfig return type and second with LiveIndexWriterConfig. The ones\n        // from LiveIndexWriterConfig are marked 'synthetic', so just collect them and\n        // assert in the end that we also received them from IWC.\n        if (m.isSynthetic()) {\n          liveSetters.add(m.getName());\n        } else {\n          assertEquals(\"method \" + m.getName() + \" does not return IndexWriterConfig\",\n              IndexWriterConfig.class, m.getReturnType());\n        }\n      }\n    }\n    for (String setter : liveSetters) {\n      assertTrue(\"setter method not overridden by IndexWriterConfig: \" + setter, allSetters.contains(setter));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4e54ed7cef46f86888b5fb547594f62160395c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4e54ed7cef46f86888b5fb547594f62160395c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}