{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/SortedTermFreqIteratorWrapper#sort().mjava","commits":[{"id":"c784b25e28b81ddedff2b97738c8286773f00f15","date":1352150231,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/SortedTermFreqIteratorWrapper#sort().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/SortedTermFreqIteratorWrapper#sort(Comparator[BytesRef]).mjava","sourceNew":"  private Sort.ByteSequencesReader sort() throws IOException {\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    tempInput = File.createTempFile(prefix, \".input\", directory);\n    tempSorted = File.createTempFile(prefix, \".sorted\", directory);\n    \n    final Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    boolean success = false;\n    try {\n      BytesRef spare;\n      byte[] buffer = new byte[0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n\n      while ((spare = source.next()) != null) {\n        encode(writer, output, buffer, spare, source.weight());\n      }\n      writer.close();\n      new Sort(tieBreakByCostComparator).sort(tempInput, tempSorted);\n      ByteSequencesReader reader = new Sort.ByteSequencesReader(tempSorted);\n      success = true;\n      return reader;\n      \n    } finally {\n      if (success) {\n        IOUtils.close(writer);\n      } else {\n        try {\n          IOUtils.closeWhileHandlingException(writer);\n        } finally {\n          close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private Sort.ByteSequencesReader sort(Comparator<BytesRef> comparator) throws IOException {\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    tempInput = File.createTempFile(prefix, \".input\", directory);\n    tempSorted = File.createTempFile(prefix, \".sorted\", directory);\n    \n    final Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    boolean success = false;\n    try {\n      BytesRef spare;\n      byte[] buffer = new byte[0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n\n      while ((spare = source.next()) != null) {\n        encode(writer, output, buffer, spare, source.weight());\n      }\n      writer.close();\n      new Sort(comparator).sort(tempInput, tempSorted);\n      ByteSequencesReader reader = new Sort.ByteSequencesReader(tempSorted);\n      success = true;\n      return reader;\n      \n    } finally {\n      if (success) {\n        IOUtils.close(writer);\n      } else {\n        try {\n          IOUtils.closeWhileHandlingException(writer);\n        } finally {\n          close();\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/SortedTermFreqPayloadIteratorWrapper#sort().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/SortedTermFreqIteratorWrapper#sort().mjava","sourceNew":"  private Sort.ByteSequencesReader sort() throws IOException {\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    tempInput = File.createTempFile(prefix, \".input\", directory);\n    tempSorted = File.createTempFile(prefix, \".sorted\", directory);\n    \n    final Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    boolean success = false;\n    try {\n      BytesRef spare;\n      byte[] buffer = new byte[0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n\n      while ((spare = source.next()) != null) {\n        encode(writer, output, buffer, spare, source.payload(), source.weight());\n      }\n      writer.close();\n      new Sort(tieBreakByCostComparator).sort(tempInput, tempSorted);\n      ByteSequencesReader reader = new Sort.ByteSequencesReader(tempSorted);\n      success = true;\n      return reader;\n      \n    } finally {\n      if (success) {\n        IOUtils.close(writer);\n      } else {\n        try {\n          IOUtils.closeWhileHandlingException(writer);\n        } finally {\n          close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private Sort.ByteSequencesReader sort() throws IOException {\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    tempInput = File.createTempFile(prefix, \".input\", directory);\n    tempSorted = File.createTempFile(prefix, \".sorted\", directory);\n    \n    final Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    boolean success = false;\n    try {\n      BytesRef spare;\n      byte[] buffer = new byte[0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n\n      while ((spare = source.next()) != null) {\n        encode(writer, output, buffer, spare, source.weight());\n      }\n      writer.close();\n      new Sort(tieBreakByCostComparator).sort(tempInput, tempSorted);\n      ByteSequencesReader reader = new Sort.ByteSequencesReader(tempSorted);\n      success = true;\n      return reader;\n      \n    } finally {\n      if (success) {\n        IOUtils.close(writer);\n      } else {\n        try {\n          IOUtils.closeWhileHandlingException(writer);\n        } finally {\n          close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["c784b25e28b81ddedff2b97738c8286773f00f15"],"c784b25e28b81ddedff2b97738c8286773f00f15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c784b25e28b81ddedff2b97738c8286773f00f15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c784b25e28b81ddedff2b97738c8286773f00f15":["ada2f7352a7f964fe49bccd13227c4ec38563d39"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}