{"path":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonFacetCleanErrorOnMissmatchCurrency().mjava","commits":[{"id":"6409f24cc7d96b04fb1c932845092b0e307fb5d4","date":1515972624,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonFacetCleanErrorOnMissmatchCurrency().mjava","pathOld":"/dev/null","sourceNew":"  public void testJsonFacetCleanErrorOnMissmatchCurrency() {\n    final String expected = \"Cannot compare CurrencyValues when their currencies are not equal\";\n    ignoreException(expected);\n    \n    // test to check clean error when start/end have diff currency (json.facet)\n    final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"json.facet\",\n                                              \"{ x:{ type:range, field:\"+FIELD+\", \" +\n                                              \"      start:'0,EUR', gap:'10,EUR', end:'100,USD' } }\");\n    final SolrException ex = expectThrows(SolrException.class, () -> {\n        final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage(), ex.getMessage().contains(expected));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testJsonFacetCleanErrorOnMissmatchCurrency().mjava","pathOld":"/dev/null","sourceNew":"  public void testJsonFacetCleanErrorOnMissmatchCurrency() {\n    final String expected = \"Cannot compare CurrencyValues when their currencies are not equal\";\n    ignoreException(expected);\n    \n    // test to check clean error when start/end have diff currency (json.facet)\n    final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"json.facet\",\n                                              \"{ x:{ type:range, field:\"+FIELD+\", \" +\n                                              \"      start:'0,EUR', gap:'10,EUR', end:'100,USD' } }\");\n    final SolrException ex = expectThrows(SolrException.class, () -> {\n        final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage(), ex.getMessage().contains(expected));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}