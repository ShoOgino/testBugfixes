{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/PackedIntValues.PackedIntsWriter#finish(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/PackedIntValues.PackedIntsWriter#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/PackedIntValues.PackedIntsWriter#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      final IndexOutput dataOut = getOrCreateDataOut();\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        final long delta = maxValue - minValue;\n        // if we exceed the range of positive longs we must switch to fixed\n        // ints\n        if (delta <= (maxValue >= 0 && minValue <= 0 ? Long.MAX_VALUE\n            : Long.MAX_VALUE - 1) && delta >= 0) {\n          dataOut.writeByte(PACKED);\n          writePackedInts(dataOut, docCount);\n          return; // done\n        } else {\n          dataOut.writeByte(FIXED_64);\n        }\n        writeData(dataOut);\n        writeZeros(docCount - (lastDocID + 1), dataOut);\n        success = true;\n      } finally {\n        resetPool();\n        if (success) {\n          IOUtils.close(dataOut);\n        } else {\n          IOUtils.closeWhileHandlingException(dataOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      final IndexOutput dataOut = getOrCreateDataOut();\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        final long delta = maxValue - minValue;\n        // if we exceed the range of positive longs we must switch to fixed\n        // ints\n        if (delta <= (maxValue >= 0 && minValue <= 0 ? Long.MAX_VALUE\n            : Long.MAX_VALUE - 1) && delta >= 0) {\n          dataOut.writeByte(PACKED);\n          writePackedInts(dataOut, docCount);\n          return; // done\n        } else {\n          dataOut.writeByte(FIXED_64);\n        }\n        writeData(dataOut);\n        writeZeros(docCount - (lastDocID + 1), dataOut);\n        success = true;\n      } finally {\n        resetPool();\n        if (success) {\n          IOUtils.close(dataOut);\n        } else {\n          IOUtils.closeWhileHandlingException(dataOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/PackedIntValues.PackedIntsWriter#finish(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      final IndexOutput dataOut = getOrCreateDataOut();\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        final long delta = maxValue - minValue;\n        // if we exceed the range of positive longs we must switch to fixed\n        // ints\n        if (delta <= (maxValue >= 0 && minValue <= 0 ? Long.MAX_VALUE\n            : Long.MAX_VALUE - 1) && delta >= 0) {\n          dataOut.writeByte(PACKED);\n          writePackedInts(dataOut, docCount);\n          return; // done\n        } else {\n          dataOut.writeByte(FIXED_64);\n        }\n        writeData(dataOut);\n        writeZeros(docCount - (lastDocID + 1), dataOut);\n        success = true;\n      } finally {\n        resetPool();\n        if (success) {\n          IOUtils.close(dataOut);\n        } else {\n          IOUtils.closeWhileHandlingException(dataOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/PackedIntValues.PackedIntsWriter#finish(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      final IndexOutput dataOut = getOrCreateDataOut();\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        final long delta = maxValue - minValue;\n        // if we exceed the range of positive longs we must switch to fixed\n        // ints\n        if (delta <= (maxValue >= 0 && minValue <= 0 ? Long.MAX_VALUE\n            : Long.MAX_VALUE - 1) && delta >= 0) {\n          dataOut.writeByte(PACKED);\n          writePackedInts(dataOut, docCount);\n          return; // done\n        } else {\n          dataOut.writeByte(FIXED_64);\n        }\n        writeData(dataOut);\n        writeZeros(docCount - (lastDocID + 1), dataOut);\n        success = true;\n      } finally {\n        resetPool();\n        if (success) {\n          IOUtils.close(dataOut);\n        } else {\n          IOUtils.closeWhileHandlingException(dataOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0837ab0472feecb3a54260729d845f839e1cbd72"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}