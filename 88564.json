{"path":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#matches(Long,boolean,Long,boolean,long).mjava","commits":[{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#matches(Long,boolean,Long,boolean,long).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#matches(long,boolean,long,boolean,long).mjava","sourceNew":"  private static boolean matches(Long lower, boolean includeLower, Long upper, boolean includeUpper, long value) {\n    if (includeLower == false && lower != null) {\n      if (lower == Long.MAX_VALUE) {\n        return false;\n      }\n      lower++;\n    }\n    if (includeUpper == false && upper != null) {\n      if (upper == Long.MIN_VALUE) {\n        return false;\n      }\n      upper--;\n    }\n\n    return (lower == null || value >= lower) && (upper == null || value <= upper);\n  }\n\n","sourceOld":"  private static boolean matches(long lower, boolean includeLower, long upper, boolean includeUpper, long value) {\n    if (includeLower == false) {\n      if (lower == Long.MAX_VALUE) {\n        return false;\n      }\n      lower++;\n    }\n    if (includeUpper == false) {\n      if (upper == Long.MIN_VALUE) {\n        return false;\n      }\n      upper--;\n    }\n\n    return value >= lower && value <= upper;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#matches(Long,boolean,Long,boolean,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#matches(Long,boolean,Long,boolean,long).mjava","sourceNew":"  private static boolean matches(Long lower, boolean includeLower, Long upper, boolean includeUpper, long value) {\n    if (includeLower == false && lower != null) {\n      if (lower == Long.MAX_VALUE) {\n        return false;\n      }\n      lower++;\n    }\n    if (includeUpper == false && upper != null) {\n      if (upper == Long.MIN_VALUE) {\n        return false;\n      }\n      upper--;\n    }\n\n    return (lower == null || value >= lower) && (upper == null || value <= upper);\n  }\n\n","sourceOld":"  private static boolean matches(Long lower, boolean includeLower, Long upper, boolean includeUpper, long value) {\n    if (includeLower == false && lower != null) {\n      if (lower == Long.MAX_VALUE) {\n        return false;\n      }\n      lower++;\n    }\n    if (includeUpper == false && upper != null) {\n      if (upper == Long.MIN_VALUE) {\n        return false;\n      }\n      upper--;\n    }\n\n    return (lower == null || value >= lower) && (upper == null || value <= upper);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}