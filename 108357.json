{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testSolrExceptionCodeNotFromSolr().mjava","commits":[{"id":"196ccd109e6a8e7cc1fddcc105ae99e8894b98d1","date":1366161893,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testSolrExceptionCodeNotFromSolr().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * test that SolrExceptions thrown by HttpSolrServer can\n   * correctly encapsulate http status codes even when not on the list of\n   * ErrorCodes solr may return.\n   */\n  public void testSolrExceptionCodeNotFromSolr() throws IOException, SolrServerException {\n    final int status = 527;\n    assertEquals(status + \" didn't generate an UNKNOWN error code, someone modified the list of valid ErrorCode's w/o changing this test to work a different way\",\n                 ErrorCode.UNKNOWN, ErrorCode.getErrorCode(status));\n\n    HttpSolrServer server = new HttpSolrServer(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n    try {\n      DebugServlet.setErrorCode(status);\n      try {\n        SolrQuery q = new SolrQuery(\"foo\");\n        server.query(q, METHOD.GET);\n        fail(\"Didn't get excepted exception from oversided request\");\n      } catch (SolrException e) {\n        System.out.println(e);\n        assertEquals(\"Unexpected exception status code\", status, e.code());\n      }\n    } finally {\n      server.shutdown();\n      DebugServlet.clear();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testSolrExceptionCodeNotFromSolr().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testSolrExceptionCodeNotFromSolr().mjava","sourceNew":"  /**\n   * test that SolrExceptions thrown by HttpSolrClient can\n   * correctly encapsulate http status codes even when not on the list of\n   * ErrorCodes solr may return.\n   */\n  public void testSolrExceptionCodeNotFromSolr() throws IOException, SolrServerException {\n    final int status = 527;\n    assertEquals(status + \" didn't generate an UNKNOWN error code, someone modified the list of valid ErrorCode's w/o changing this test to work a different way\",\n                 ErrorCode.UNKNOWN, ErrorCode.getErrorCode(status));\n\n    HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n    try {\n      DebugServlet.setErrorCode(status);\n      try {\n        SolrQuery q = new SolrQuery(\"foo\");\n        client.query(q, METHOD.GET);\n        fail(\"Didn't get excepted exception from oversided request\");\n      } catch (SolrException e) {\n        System.out.println(e);\n        assertEquals(\"Unexpected exception status code\", status, e.code());\n      }\n    } finally {\n      client.shutdown();\n      DebugServlet.clear();\n    }\n  }\n\n","sourceOld":"  /**\n   * test that SolrExceptions thrown by HttpSolrServer can\n   * correctly encapsulate http status codes even when not on the list of\n   * ErrorCodes solr may return.\n   */\n  public void testSolrExceptionCodeNotFromSolr() throws IOException, SolrServerException {\n    final int status = 527;\n    assertEquals(status + \" didn't generate an UNKNOWN error code, someone modified the list of valid ErrorCode's w/o changing this test to work a different way\",\n                 ErrorCode.UNKNOWN, ErrorCode.getErrorCode(status));\n\n    HttpSolrServer server = new HttpSolrServer(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n    try {\n      DebugServlet.setErrorCode(status);\n      try {\n        SolrQuery q = new SolrQuery(\"foo\");\n        server.query(q, METHOD.GET);\n        fail(\"Didn't get excepted exception from oversided request\");\n      } catch (SolrException e) {\n        System.out.println(e);\n        assertEquals(\"Unexpected exception status code\", status, e.code());\n      }\n    } finally {\n      server.shutdown();\n      DebugServlet.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":["b4407017a35dea85f652ec066e4565818dd75436"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["196ccd109e6a8e7cc1fddcc105ae99e8894b98d1"],"196ccd109e6a8e7cc1fddcc105ae99e8894b98d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["196ccd109e6a8e7cc1fddcc105ae99e8894b98d1"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"196ccd109e6a8e7cc1fddcc105ae99e8894b98d1":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}