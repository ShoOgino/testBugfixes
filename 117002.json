{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testBicubicSpline().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testBicubicSpline().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testBicubicSpline().mjava","sourceNew":"  @Test\n  public void testBicubicSpline() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(300, 400, 500, 600, 700), \" +\n        \"               b=array(340, 410, 495, 590, 640),\" +\n        \"               c=array(600, 395, 550, 510, 705),\"+\n        \"               d=array(500, 420, 510, 601, 690),\"+\n        \"               e=array(420, 411, 511, 611, 711),\"+\n        \"               f=matrix(a, b, c, d, e),\"+\n        \"               x=array(1,2,3,4,5),\"+\n        \"               y=array(100, 200, 300, 400, 500),\"+\n        \"               bspline=bicubicSpline(x, y, f), \" +\n        \"               p1=predict(bspline, 1.5, 250),\" +\n        \"               p2=predict(bspline, 3.5, 350),\" +\n        \"               p3=predict(bspline, 4.5, 450),\" +\n        \"               p4=predict(bspline,matrix(array(1.5, 250), array(3.5, 350), array(4.5, 450))))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number p1 = (Number)tuples.get(0).get(\"p1\");\n    assertEquals(p1.doubleValue(), 449.7837701612903, 0.0);\n    Number p2 = (Number)tuples.get(0).get(\"p2\");\n    assertEquals(p2.doubleValue(), 536.8916383774491, 0.0);\n    Number p3 = (Number)tuples.get(0).get(\"p3\");\n    assertEquals(p3.doubleValue(), 659.921875, 0.0);\n    List<Number> p4 = (List<Number>)tuples.get(0).get(\"p4\");\n    assertEquals(p4.get(0).doubleValue(), 449.7837701612903, 0.0);\n    assertEquals(p4.get(1).doubleValue(), 536.8916383774491, 0.0);\n    assertEquals(p4.get(2).doubleValue(), 659.921875, 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testBicubicSpline() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(300, 400, 500, 600, 700), \" +\n        \"               b=array(340, 410, 495, 590, 640),\" +\n        \"               c=array(600, 395, 550, 510, 705),\"+\n        \"               d=array(500, 420, 510, 601, 690),\"+\n        \"               e=array(420, 411, 511, 611, 711),\"+\n        \"               f=matrix(a, b, c, d, e),\"+\n        \"               x=array(1,2,3,4,5),\"+\n        \"               y=array(100, 200, 300, 400, 500),\"+\n        \"               bspline=bicubicSpline(x, y, f), \" +\n        \"               p1=predict(bspline, 1.5, 250),\" +\n        \"               p2=predict(bspline, 3.5, 350),\" +\n        \"               p3=predict(bspline, 4.5, 450),\" +\n        \"               p4=predict(bspline,matrix(array(1.5, 250), array(3.5, 350), array(4.5, 450))))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number p1 = (Number)tuples.get(0).get(\"p1\");\n    assertEquals(p1.doubleValue(), 449.7837701612903, 0.0);\n    Number p2 = (Number)tuples.get(0).get(\"p2\");\n    assertEquals(p2.doubleValue(), 536.8916383774491, 0.0);\n    Number p3 = (Number)tuples.get(0).get(\"p3\");\n    assertEquals(p3.doubleValue(), 659.921875, 0.0);\n    List<Number> p4 = (List<Number>)tuples.get(0).get(\"p4\");\n    assertEquals(p4.get(0).doubleValue(), 449.7837701612903, 0.0);\n    assertEquals(p4.get(1).doubleValue(), 536.8916383774491, 0.0);\n    assertEquals(p4.get(2).doubleValue(), 659.921875, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testBicubicSpline().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testBicubicSpline().mjava","sourceNew":"  @Test\n  public void testBicubicSpline() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(300, 400, 500, 600, 700), \" +\n        \"               b=array(340, 410, 495, 590, 640),\" +\n        \"               c=array(600, 395, 550, 510, 705),\"+\n        \"               d=array(500, 420, 510, 601, 690),\"+\n        \"               e=array(420, 411, 511, 611, 711),\"+\n        \"               f=matrix(a, b, c, d, e),\"+\n        \"               x=array(1,2,3,4,5),\"+\n        \"               y=array(100, 200, 300, 400, 500),\"+\n        \"               bspline=bicubicSpline(x, y, f), \" +\n        \"               p1=predict(bspline, 1.5, 250),\" +\n        \"               p2=predict(bspline, 3.5, 350),\" +\n        \"               p3=predict(bspline, 4.5, 450),\" +\n        \"               p4=predict(bspline,matrix(array(1.5, 250), array(3.5, 350), array(4.5, 450))))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number p1 = (Number)tuples.get(0).get(\"p1\");\n    assertEquals(p1.doubleValue(), 449.7837701612903, 0.0);\n    Number p2 = (Number)tuples.get(0).get(\"p2\");\n    assertEquals(p2.doubleValue(), 536.8916383774491, 0.0);\n    Number p3 = (Number)tuples.get(0).get(\"p3\");\n    assertEquals(p3.doubleValue(), 659.921875, 0.0);\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> p4 = (List<Number>)tuples.get(0).get(\"p4\");\n    assertEquals(p4.get(0).doubleValue(), 449.7837701612903, 0.0);\n    assertEquals(p4.get(1).doubleValue(), 536.8916383774491, 0.0);\n    assertEquals(p4.get(2).doubleValue(), 659.921875, 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testBicubicSpline() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(300, 400, 500, 600, 700), \" +\n        \"               b=array(340, 410, 495, 590, 640),\" +\n        \"               c=array(600, 395, 550, 510, 705),\"+\n        \"               d=array(500, 420, 510, 601, 690),\"+\n        \"               e=array(420, 411, 511, 611, 711),\"+\n        \"               f=matrix(a, b, c, d, e),\"+\n        \"               x=array(1,2,3,4,5),\"+\n        \"               y=array(100, 200, 300, 400, 500),\"+\n        \"               bspline=bicubicSpline(x, y, f), \" +\n        \"               p1=predict(bspline, 1.5, 250),\" +\n        \"               p2=predict(bspline, 3.5, 350),\" +\n        \"               p3=predict(bspline, 4.5, 450),\" +\n        \"               p4=predict(bspline,matrix(array(1.5, 250), array(3.5, 350), array(4.5, 450))))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number p1 = (Number)tuples.get(0).get(\"p1\");\n    assertEquals(p1.doubleValue(), 449.7837701612903, 0.0);\n    Number p2 = (Number)tuples.get(0).get(\"p2\");\n    assertEquals(p2.doubleValue(), 536.8916383774491, 0.0);\n    Number p3 = (Number)tuples.get(0).get(\"p3\");\n    assertEquals(p3.doubleValue(), 659.921875, 0.0);\n    List<Number> p4 = (List<Number>)tuples.get(0).get(\"p4\");\n    assertEquals(p4.get(0).doubleValue(), 449.7837701612903, 0.0);\n    assertEquals(p4.get(1).doubleValue(), 536.8916383774491, 0.0);\n    assertEquals(p4.get(2).doubleValue(), 659.921875, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}