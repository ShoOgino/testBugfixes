{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimSubResults(FacetResultNode,int).mjava","commits":[{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimSubResults(FacetResultNode,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/results/MutableFacetResultNode#trimSubResults(int).mjava","sourceNew":"  /** Trim sub results to a given size. */\n  private void trimSubResults(FacetResultNode node, int size) {\n    if (node.subResults == FacetResultNode.EMPTY_SUB_RESULTS || node.subResults.size() == 0) {\n      return;\n    }\n\n    ArrayList<FacetResultNode> trimmed = new ArrayList<FacetResultNode>(size);\n    for (int i = 0; i < node.subResults.size() && i < size; i++) {\n      FacetResultNode trimmedNode = node.subResults.get(i);\n      trimSubResults(trimmedNode, size);\n      trimmed.add(trimmedNode);\n    }\n    \n    /*\n     * If we are trimming, it means Sampling is in effect and the extra\n     * (over-sampled) results are being trimmed. Although the residue is not\n     * guaranteed to be accurate for Sampling, we try our best to fix it.\n     * The node's residue now will take under account the sub-nodes we're\n     * trimming.\n     */\n    for (int i = size; i < node.subResults.size(); i++) {\n      node.residue += node.subResults.get(i).value;\n    }\n    \n    node.subResults = trimmed;\n  }\n\n","sourceOld":"  /**\n   * Trim sub results to a given size.\n   * <p>\n   * Note: Although the {@link #getResidue()} is not guaranteed to be\n   * accurate, it is worth fixing it, as possible, by taking under account the\n   * trimmed sub-nodes.\n   */\n  public void trimSubResults(int size) {\n    if (subResults == null || subResults.size() == 0) {\n      return;\n    }\n\n    ArrayList<FacetResultNode> trimmed = new ArrayList<FacetResultNode>(size);\n    for (int i = 0; i < subResults.size() && i < size; i++) {\n      MutableFacetResultNode trimmedNode = toImpl(subResults.get(i));\n      trimmedNode.trimSubResults(size);\n      trimmed.add(trimmedNode);\n    }\n    \n    /*\n     * If we are trimming, it means Sampling is in effect and the extra\n     * (over-sampled) results are being trimmed. Although the residue is not\n     * guaranteed to be accurate for Sampling, we try our best to fix it.\n     * The node's residue now will take under account the sub-nodes we're\n     * trimming.\n     */\n    for (int i = size; i < subResults.size(); i++) {\n      increaseResidue(subResults.get(i).getValue());\n    }\n    \n    subResults = trimmed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimSubResults(FacetResultNode,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/results/MutableFacetResultNode#trimSubResults(int).mjava","sourceNew":"  /** Trim sub results to a given size. */\n  private void trimSubResults(FacetResultNode node, int size) {\n    if (node.subResults == FacetResultNode.EMPTY_SUB_RESULTS || node.subResults.size() == 0) {\n      return;\n    }\n\n    ArrayList<FacetResultNode> trimmed = new ArrayList<FacetResultNode>(size);\n    for (int i = 0; i < node.subResults.size() && i < size; i++) {\n      FacetResultNode trimmedNode = node.subResults.get(i);\n      trimSubResults(trimmedNode, size);\n      trimmed.add(trimmedNode);\n    }\n    \n    /*\n     * If we are trimming, it means Sampling is in effect and the extra\n     * (over-sampled) results are being trimmed. Although the residue is not\n     * guaranteed to be accurate for Sampling, we try our best to fix it.\n     * The node's residue now will take under account the sub-nodes we're\n     * trimming.\n     */\n    for (int i = size; i < node.subResults.size(); i++) {\n      node.residue += node.subResults.get(i).value;\n    }\n    \n    node.subResults = trimmed;\n  }\n\n","sourceOld":"  /**\n   * Trim sub results to a given size.\n   * <p>\n   * Note: Although the {@link #getResidue()} is not guaranteed to be\n   * accurate, it is worth fixing it, as possible, by taking under account the\n   * trimmed sub-nodes.\n   */\n  public void trimSubResults(int size) {\n    if (subResults == null || subResults.size() == 0) {\n      return;\n    }\n\n    ArrayList<FacetResultNode> trimmed = new ArrayList<FacetResultNode>(size);\n    for (int i = 0; i < subResults.size() && i < size; i++) {\n      MutableFacetResultNode trimmedNode = toImpl(subResults.get(i));\n      trimmedNode.trimSubResults(size);\n      trimmed.add(trimmedNode);\n    }\n    \n    /*\n     * If we are trimming, it means Sampling is in effect and the extra\n     * (over-sampled) results are being trimmed. Although the residue is not\n     * guaranteed to be accurate for Sampling, we try our best to fix it.\n     * The node's residue now will take under account the sub-nodes we're\n     * trimming.\n     */\n    for (int i = size; i < subResults.size(); i++) {\n      increaseResidue(subResults.get(i).getValue());\n    }\n    \n    subResults = trimmed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dae862628c7a5275e1ff00ff3bc9803dedf124a9","date":1358939646,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimSubResults(FacetResultNode,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimSubResults(FacetResultNode,int).mjava","sourceNew":"  /** Trim sub results to a given size. */\n  private void trimSubResults(FacetResultNode node, int size) {\n    if (node.subResults == FacetResultNode.EMPTY_SUB_RESULTS || node.subResults.size() == 0) {\n      return;\n    }\n\n    ArrayList<FacetResultNode> trimmed = new ArrayList<FacetResultNode>(size);\n    for (int i = 0; i < node.subResults.size() && i < size; i++) {\n      FacetResultNode trimmedNode = node.subResults.get(i);\n      trimSubResults(trimmedNode, size);\n      trimmed.add(trimmedNode);\n    }\n    \n    node.subResults = trimmed;\n  }\n\n","sourceOld":"  /** Trim sub results to a given size. */\n  private void trimSubResults(FacetResultNode node, int size) {\n    if (node.subResults == FacetResultNode.EMPTY_SUB_RESULTS || node.subResults.size() == 0) {\n      return;\n    }\n\n    ArrayList<FacetResultNode> trimmed = new ArrayList<FacetResultNode>(size);\n    for (int i = 0; i < node.subResults.size() && i < size; i++) {\n      FacetResultNode trimmedNode = node.subResults.get(i);\n      trimSubResults(trimmedNode, size);\n      trimmed.add(trimmedNode);\n    }\n    \n    /*\n     * If we are trimming, it means Sampling is in effect and the extra\n     * (over-sampled) results are being trimmed. Although the residue is not\n     * guaranteed to be accurate for Sampling, we try our best to fix it.\n     * The node's residue now will take under account the sub-nodes we're\n     * trimming.\n     */\n    for (int i = size; i < node.subResults.size(); i++) {\n      node.residue += node.subResults.get(i).value;\n    }\n    \n    node.subResults = trimmed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d5244a676b83c2d551c3746e8181588ba619e1","date":1359031414,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimSubResults(FacetResultNode,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimSubResults(FacetResultNode,int).mjava","sourceNew":"  /** Trim sub results to a given size. */\n  private void trimSubResults(FacetResultNode node, int size) {\n    if (node.subResults == FacetResultNode.EMPTY_SUB_RESULTS || node.subResults.size() == 0) {\n      return;\n    }\n\n    ArrayList<FacetResultNode> trimmed = new ArrayList<FacetResultNode>(size);\n    for (int i = 0; i < node.subResults.size() && i < size; i++) {\n      FacetResultNode trimmedNode = node.subResults.get(i);\n      trimSubResults(trimmedNode, size);\n      trimmed.add(trimmedNode);\n    }\n    \n    node.subResults = trimmed;\n  }\n\n","sourceOld":"  /** Trim sub results to a given size. */\n  private void trimSubResults(FacetResultNode node, int size) {\n    if (node.subResults == FacetResultNode.EMPTY_SUB_RESULTS || node.subResults.size() == 0) {\n      return;\n    }\n\n    ArrayList<FacetResultNode> trimmed = new ArrayList<FacetResultNode>(size);\n    for (int i = 0; i < node.subResults.size() && i < size; i++) {\n      FacetResultNode trimmedNode = node.subResults.get(i);\n      trimSubResults(trimmedNode, size);\n      trimmed.add(trimmedNode);\n    }\n    \n    /*\n     * If we are trimming, it means Sampling is in effect and the extra\n     * (over-sampled) results are being trimmed. Although the residue is not\n     * guaranteed to be accurate for Sampling, we try our best to fix it.\n     * The node's residue now will take under account the sub-nodes we're\n     * trimming.\n     */\n    for (int i = size; i < node.subResults.size(); i++) {\n      node.residue += node.subResults.get(i).value;\n    }\n    \n    node.subResults = trimmed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/Sampler#trimSubResults(FacetResultNode,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#trimSubResults(FacetResultNode,int).mjava","sourceNew":"  /** Trim sub results to a given size. */\n  private void trimSubResults(FacetResultNode node, int size) {\n    if (node.subResults == FacetResultNode.EMPTY_SUB_RESULTS || node.subResults.size() == 0) {\n      return;\n    }\n\n    ArrayList<FacetResultNode> trimmed = new ArrayList<FacetResultNode>(size);\n    for (int i = 0; i < node.subResults.size() && i < size; i++) {\n      FacetResultNode trimmedNode = node.subResults.get(i);\n      trimSubResults(trimmedNode, size);\n      trimmed.add(trimmedNode);\n    }\n    \n    node.subResults = trimmed;\n  }\n\n","sourceOld":"  /** Trim sub results to a given size. */\n  private void trimSubResults(FacetResultNode node, int size) {\n    if (node.subResults == FacetResultNode.EMPTY_SUB_RESULTS || node.subResults.size() == 0) {\n      return;\n    }\n\n    ArrayList<FacetResultNode> trimmed = new ArrayList<FacetResultNode>(size);\n    for (int i = 0; i < node.subResults.size() && i < size; i++) {\n      FacetResultNode trimmedNode = node.subResults.get(i);\n      trimSubResults(trimmedNode, size);\n      trimmed.add(trimmedNode);\n    }\n    \n    node.subResults = trimmed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["dae862628c7a5275e1ff00ff3bc9803dedf124a9"],"dae862628c7a5275e1ff00ff3bc9803dedf124a9":["811cdb4a80352766eb0c762e48972707a924e5cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","811cdb4a80352766eb0c762e48972707a924e5cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"],"811cdb4a80352766eb0c762e48972707a924e5cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["07155cdd910937cdf6877e48884d5782845c8b8b","dae862628c7a5275e1ff00ff3bc9803dedf124a9"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dae862628c7a5275e1ff00ff3bc9803dedf124a9":["607428da722dcb3e86bbd11c63de8986e6275c36","b2d5244a676b83c2d551c3746e8181588ba619e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["07155cdd910937cdf6877e48884d5782845c8b8b","811cdb4a80352766eb0c762e48972707a924e5cd"],"07155cdd910937cdf6877e48884d5782845c8b8b":["b2d5244a676b83c2d551c3746e8181588ba619e1"],"811cdb4a80352766eb0c762e48972707a924e5cd":["dae862628c7a5275e1ff00ff3bc9803dedf124a9","07155cdd910937cdf6877e48884d5782845c8b8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b2d5244a676b83c2d551c3746e8181588ba619e1":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}