{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestEliasFanoSequence#tstDecodeBackToMultiples(long[],EliasFanoDecoder,long).mjava","commits":[{"id":"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c","date":1373406544,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestEliasFanoSequence#tstDecodeBackToMultiples(long[],EliasFanoDecoder,long).mjava","pathOld":"/dev/null","sourceNew":"  private static void tstDecodeBackToMultiples(long[] values, EliasFanoDecoder efd, final long m) {\n    // test backing to multiples of m\n    assert m > 0;\n    efd.toAfterSequence();\n    int index = values.length - 1;\n    if (index < 0) {\n      long advanceValue = efd.backToValue(0);\n      assertEquals(EliasFanoDecoder.NO_MORE_VALUES, advanceValue);\n      return; // empty values, nothing to go back to/from\n    }\n    long expValue = values[index];\n    long previousValue = expValue + 1;\n    long mm = (expValue / m) * m;\n    while (index >= 0) {\n      expValue = values[index];\n      assert mm < previousValue;\n      if (expValue <= mm) {\n        long backValue = efd.backToValue(mm);\n        assertFalse(\"backToValue at end too early\", EliasFanoDecoder.NO_MORE_VALUES == backValue);\n        assertEquals(expValue, backValue);\n        assertEquals(index, efd.index());\n        previousValue = expValue;\n        do {\n          mm -= m;\n        } while (mm >= previousValue);\n      }\n      index--;\n    }\n    long backValue = efd.backToValue(mm);\n    assertEquals(EliasFanoDecoder.NO_MORE_VALUES, backValue);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestEliasFanoSequence#tstDecodeBackToMultiples(long[],EliasFanoDecoder,long).mjava","pathOld":"/dev/null","sourceNew":"  private static void tstDecodeBackToMultiples(long[] values, EliasFanoDecoder efd, final long m) {\n    // test backing to multiples of m\n    assert m > 0;\n    efd.toAfterSequence();\n    int index = values.length - 1;\n    if (index < 0) {\n      long advanceValue = efd.backToValue(0);\n      assertEquals(EliasFanoDecoder.NO_MORE_VALUES, advanceValue);\n      return; // empty values, nothing to go back to/from\n    }\n    long expValue = values[index];\n    long previousValue = expValue + 1;\n    long mm = (expValue / m) * m;\n    while (index >= 0) {\n      expValue = values[index];\n      assert mm < previousValue;\n      if (expValue <= mm) {\n        long backValue = efd.backToValue(mm);\n        assertFalse(\"backToValue at end too early\", EliasFanoDecoder.NO_MORE_VALUES == backValue);\n        assertEquals(expValue, backValue);\n        assertEquals(index, efd.index());\n        previousValue = expValue;\n        do {\n          mm -= m;\n        } while (mm >= previousValue);\n      }\n      index--;\n    }\n    long backValue = efd.backToValue(mm);\n    assertEquals(EliasFanoDecoder.NO_MORE_VALUES, backValue);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"423470dff9e19aa0db92590e282e2ca12e34d65a","date":1381851051,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestEliasFanoSequence#tstDecodeBackToMultiples(long[],EliasFanoDecoder,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestEliasFanoSequence#tstDecodeBackToMultiples(long[],EliasFanoDecoder,long).mjava","sourceNew":"  private static void tstDecodeBackToMultiples(long[] values, EliasFanoDecoder efd, final long m) {\n    // test backing to multiples of m\n    assert m > 0;\n    efd.toAfterSequence();\n    int index = values.length - 1;\n    if (index < 0) {\n      long advanceValue = efd.backToValue(0);\n      assertEquals(EliasFanoDecoder.NO_MORE_VALUES, advanceValue);\n      return; // empty values, nothing to go back to/from\n    }\n    long expValue = values[index];\n    long previousValue = expValue + 1;\n    long mm = (expValue / m) * m;\n    while (index >= 0) {\n      expValue = values[index];\n      assert mm < previousValue;\n      if (expValue <= mm) {\n        long backValue = efd.backToValue(mm);\n        assertFalse(\"backToValue at end too early\", EliasFanoDecoder.NO_MORE_VALUES == backValue);\n        assertEquals(expValue, backValue);\n        assertEquals(index, efd.currentIndex());\n        previousValue = expValue;\n        do {\n          mm -= m;\n        } while (mm >= previousValue);\n      }\n      index--;\n    }\n    long backValue = efd.backToValue(mm);\n    assertEquals(EliasFanoDecoder.NO_MORE_VALUES, backValue);\n  }\n\n","sourceOld":"  private static void tstDecodeBackToMultiples(long[] values, EliasFanoDecoder efd, final long m) {\n    // test backing to multiples of m\n    assert m > 0;\n    efd.toAfterSequence();\n    int index = values.length - 1;\n    if (index < 0) {\n      long advanceValue = efd.backToValue(0);\n      assertEquals(EliasFanoDecoder.NO_MORE_VALUES, advanceValue);\n      return; // empty values, nothing to go back to/from\n    }\n    long expValue = values[index];\n    long previousValue = expValue + 1;\n    long mm = (expValue / m) * m;\n    while (index >= 0) {\n      expValue = values[index];\n      assert mm < previousValue;\n      if (expValue <= mm) {\n        long backValue = efd.backToValue(mm);\n        assertFalse(\"backToValue at end too early\", EliasFanoDecoder.NO_MORE_VALUES == backValue);\n        assertEquals(expValue, backValue);\n        assertEquals(index, efd.index());\n        previousValue = expValue;\n        do {\n          mm -= m;\n        } while (mm >= previousValue);\n      }\n      index--;\n    }\n    long backValue = efd.backToValue(mm);\n    assertEquals(EliasFanoDecoder.NO_MORE_VALUES, backValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"556259cdb46d4f7fb27f4688c4efcb3eaee4a550","date":1432028057,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestEliasFanoSequence#tstDecodeBackToMultiples(long[],EliasFanoDecoder,long).mjava","sourceNew":null,"sourceOld":"  private static void tstDecodeBackToMultiples(long[] values, EliasFanoDecoder efd, final long m) {\n    // test backing to multiples of m\n    assert m > 0;\n    efd.toAfterSequence();\n    int index = values.length - 1;\n    if (index < 0) {\n      long advanceValue = efd.backToValue(0);\n      assertEquals(EliasFanoDecoder.NO_MORE_VALUES, advanceValue);\n      return; // empty values, nothing to go back to/from\n    }\n    long expValue = values[index];\n    long previousValue = expValue + 1;\n    long mm = (expValue / m) * m;\n    while (index >= 0) {\n      expValue = values[index];\n      assert mm < previousValue;\n      if (expValue <= mm) {\n        long backValue = efd.backToValue(mm);\n        assertFalse(\"backToValue at end too early\", EliasFanoDecoder.NO_MORE_VALUES == backValue);\n        assertEquals(expValue, backValue);\n        assertEquals(index, efd.currentIndex());\n        previousValue = expValue;\n        do {\n          mm -= m;\n        } while (mm >= previousValue);\n      }\n      index--;\n    }\n    long backValue = efd.backToValue(mm);\n    assertEquals(EliasFanoDecoder.NO_MORE_VALUES, backValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"556259cdb46d4f7fb27f4688c4efcb3eaee4a550":["423470dff9e19aa0db92590e282e2ca12e34d65a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"423470dff9e19aa0db92590e282e2ca12e34d65a":["21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["556259cdb46d4f7fb27f4688c4efcb3eaee4a550"]},"commit2Childs":{"556259cdb46d4f7fb27f4688c4efcb3eaee4a550":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c":["37a0f60745e53927c4c876cfe5b5a58170f0646c","423470dff9e19aa0db92590e282e2ca12e34d65a"],"423470dff9e19aa0db92590e282e2ca12e34d65a":["556259cdb46d4f7fb27f4688c4efcb3eaee4a550"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}