{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#addTail(int,BytesRefBuilder,int,int).mjava","commits":[{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#addTail(int,BytesRefBuilder,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#addTail(int,BytesRef,int,int).mjava","sourceNew":"  private BytesRef addTail(int state, BytesRefBuilder term, int idx, int leadLabel) {\n    //System.out.println(\"addTail state=\" + state + \" term=\" + term.utf8ToString() + \" idx=\" + idx + \" leadLabel=\" + (char) leadLabel);\n    //System.out.println(automaton.toDot());\n    // Find biggest transition that's < label\n    // TODO: use binary search here\n    int maxIndex = -1;\n    int numTransitions = automaton.initTransition(state, transition);\n    for(int i=0;i<numTransitions;i++) {\n      automaton.getNextTransition(transition);\n      if (transition.min < leadLabel) {\n        maxIndex = i;\n      } else {\n        // Transitions are alway sorted\n        break;\n      }\n    }\n\n    //System.out.println(\"  maxIndex=\" + maxIndex);\n\n    assert maxIndex != -1;\n    automaton.getTransition(state, maxIndex, transition);\n\n    // Append floorLabel\n    final int floorLabel;\n    if (transition.max > leadLabel-1) {\n      floorLabel = leadLabel-1;\n    } else {\n      floorLabel = transition.max;\n    }\n    //System.out.println(\"  floorLabel=\" + (char) floorLabel);\n    term.grow(1+idx);\n    //if (DEBUG) System.out.println(\"  add floorLabel=\" + (char) floorLabel + \" idx=\" + idx);\n    term.setByteAt(idx, (byte) floorLabel);\n\n    state = transition.dest;\n    //System.out.println(\"  dest: \" + state);\n    idx++;\n\n    // Push down to last accept state\n    while (true) {\n      numTransitions = automaton.getNumTransitions(state);\n      if (numTransitions == 0) {\n        //System.out.println(\"state=\" + state + \" 0 trans\");\n        assert runAutomaton.isAccept(state);\n        term.setLength(idx);\n        //if (DEBUG) System.out.println(\"  return \" + term.utf8ToString());\n        return term.get();\n      } else {\n        // We are pushing \"top\" -- so get last label of\n        // last transition:\n        //System.out.println(\"get state=\" + state + \" numTrans=\" + numTransitions);\n        automaton.getTransition(state, numTransitions-1, transition);\n        term.grow(1+idx);\n        //if (DEBUG) System.out.println(\"  push maxLabel=\" + (char) lastTransition.max + \" idx=\" + idx);\n        //System.out.println(\"  add trans dest=\" + scratch.dest + \" label=\" + (char) scratch.max);\n        term.setByteAt(idx, (byte) transition.max);\n        state = transition.dest;\n        idx++;\n      }\n    }\n  }\n\n","sourceOld":"  private BytesRef addTail(int state, BytesRef term, int idx, int leadLabel) {\n    //System.out.println(\"addTail state=\" + state + \" term=\" + term.utf8ToString() + \" idx=\" + idx + \" leadLabel=\" + (char) leadLabel);\n    //System.out.println(automaton.toDot());\n    // Find biggest transition that's < label\n    // TODO: use binary search here\n    int maxIndex = -1;\n    int numTransitions = automaton.initTransition(state, transition);\n    for(int i=0;i<numTransitions;i++) {\n      automaton.getNextTransition(transition);\n      if (transition.min < leadLabel) {\n        maxIndex = i;\n      } else {\n        // Transitions are alway sorted\n        break;\n      }\n    }\n\n    //System.out.println(\"  maxIndex=\" + maxIndex);\n\n    assert maxIndex != -1;\n    automaton.getTransition(state, maxIndex, transition);\n\n    // Append floorLabel\n    final int floorLabel;\n    if (transition.max > leadLabel-1) {\n      floorLabel = leadLabel-1;\n    } else {\n      floorLabel = transition.max;\n    }\n    //System.out.println(\"  floorLabel=\" + (char) floorLabel);\n    if (idx >= term.bytes.length) {\n      term.grow(1+idx);\n    }\n    //if (DEBUG) System.out.println(\"  add floorLabel=\" + (char) floorLabel + \" idx=\" + idx);\n    term.bytes[idx] = (byte) floorLabel;\n\n    state = transition.dest;\n    //System.out.println(\"  dest: \" + state);\n    idx++;\n\n    // Push down to last accept state\n    while (true) {\n      numTransitions = automaton.getNumTransitions(state);\n      if (numTransitions == 0) {\n        //System.out.println(\"state=\" + state + \" 0 trans\");\n        assert runAutomaton.isAccept(state);\n        term.length = idx;\n        //if (DEBUG) System.out.println(\"  return \" + term.utf8ToString());\n        return term;\n      } else {\n        // We are pushing \"top\" -- so get last label of\n        // last transition:\n        //System.out.println(\"get state=\" + state + \" numTrans=\" + numTransitions);\n        automaton.getTransition(state, numTransitions-1, transition);\n        if (idx >= term.bytes.length) {\n          term.grow(1+idx);\n        }\n        //if (DEBUG) System.out.println(\"  push maxLabel=\" + (char) lastTransition.max + \" idx=\" + idx);\n        //System.out.println(\"  add trans dest=\" + scratch.dest + \" label=\" + (char) scratch.max);\n        term.bytes[idx] = (byte) transition.max;\n        state = transition.dest;\n        idx++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2af44fa9bd43d5df330d6438c1af390323f7d567","date":1574847240,"type":3,"author":"Benedict Jin","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#addTail(int,BytesRefBuilder,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#addTail(int,BytesRefBuilder,int,int).mjava","sourceNew":"  private BytesRef addTail(int state, BytesRefBuilder term, int idx, int leadLabel) {\n    //System.out.println(\"addTail state=\" + state + \" term=\" + term.utf8ToString() + \" idx=\" + idx + \" leadLabel=\" + (char) leadLabel);\n    //System.out.println(automaton.toDot());\n    // Find biggest transition that's < label\n    // TODO: use binary search here\n    int maxIndex = -1;\n    int numTransitions = automaton.initTransition(state, transition);\n    for(int i=0;i<numTransitions;i++) {\n      automaton.getNextTransition(transition);\n      if (transition.min < leadLabel) {\n        maxIndex = i;\n      } else {\n        // Transitions are always sorted\n        break;\n      }\n    }\n\n    //System.out.println(\"  maxIndex=\" + maxIndex);\n\n    assert maxIndex != -1;\n    automaton.getTransition(state, maxIndex, transition);\n\n    // Append floorLabel\n    final int floorLabel;\n    if (transition.max > leadLabel-1) {\n      floorLabel = leadLabel-1;\n    } else {\n      floorLabel = transition.max;\n    }\n    //System.out.println(\"  floorLabel=\" + (char) floorLabel);\n    term.grow(1+idx);\n    //if (DEBUG) System.out.println(\"  add floorLabel=\" + (char) floorLabel + \" idx=\" + idx);\n    term.setByteAt(idx, (byte) floorLabel);\n\n    state = transition.dest;\n    //System.out.println(\"  dest: \" + state);\n    idx++;\n\n    // Push down to last accept state\n    while (true) {\n      numTransitions = automaton.getNumTransitions(state);\n      if (numTransitions == 0) {\n        //System.out.println(\"state=\" + state + \" 0 trans\");\n        assert runAutomaton.isAccept(state);\n        term.setLength(idx);\n        //if (DEBUG) System.out.println(\"  return \" + term.utf8ToString());\n        return term.get();\n      } else {\n        // We are pushing \"top\" -- so get last label of\n        // last transition:\n        //System.out.println(\"get state=\" + state + \" numTrans=\" + numTransitions);\n        automaton.getTransition(state, numTransitions-1, transition);\n        term.grow(1+idx);\n        //if (DEBUG) System.out.println(\"  push maxLabel=\" + (char) lastTransition.max + \" idx=\" + idx);\n        //System.out.println(\"  add trans dest=\" + scratch.dest + \" label=\" + (char) scratch.max);\n        term.setByteAt(idx, (byte) transition.max);\n        state = transition.dest;\n        idx++;\n      }\n    }\n  }\n\n","sourceOld":"  private BytesRef addTail(int state, BytesRefBuilder term, int idx, int leadLabel) {\n    //System.out.println(\"addTail state=\" + state + \" term=\" + term.utf8ToString() + \" idx=\" + idx + \" leadLabel=\" + (char) leadLabel);\n    //System.out.println(automaton.toDot());\n    // Find biggest transition that's < label\n    // TODO: use binary search here\n    int maxIndex = -1;\n    int numTransitions = automaton.initTransition(state, transition);\n    for(int i=0;i<numTransitions;i++) {\n      automaton.getNextTransition(transition);\n      if (transition.min < leadLabel) {\n        maxIndex = i;\n      } else {\n        // Transitions are alway sorted\n        break;\n      }\n    }\n\n    //System.out.println(\"  maxIndex=\" + maxIndex);\n\n    assert maxIndex != -1;\n    automaton.getTransition(state, maxIndex, transition);\n\n    // Append floorLabel\n    final int floorLabel;\n    if (transition.max > leadLabel-1) {\n      floorLabel = leadLabel-1;\n    } else {\n      floorLabel = transition.max;\n    }\n    //System.out.println(\"  floorLabel=\" + (char) floorLabel);\n    term.grow(1+idx);\n    //if (DEBUG) System.out.println(\"  add floorLabel=\" + (char) floorLabel + \" idx=\" + idx);\n    term.setByteAt(idx, (byte) floorLabel);\n\n    state = transition.dest;\n    //System.out.println(\"  dest: \" + state);\n    idx++;\n\n    // Push down to last accept state\n    while (true) {\n      numTransitions = automaton.getNumTransitions(state);\n      if (numTransitions == 0) {\n        //System.out.println(\"state=\" + state + \" 0 trans\");\n        assert runAutomaton.isAccept(state);\n        term.setLength(idx);\n        //if (DEBUG) System.out.println(\"  return \" + term.utf8ToString());\n        return term.get();\n      } else {\n        // We are pushing \"top\" -- so get last label of\n        // last transition:\n        //System.out.println(\"get state=\" + state + \" numTrans=\" + numTransitions);\n        automaton.getTransition(state, numTransitions-1, transition);\n        term.grow(1+idx);\n        //if (DEBUG) System.out.println(\"  push maxLabel=\" + (char) lastTransition.max + \" idx=\" + idx);\n        //System.out.println(\"  add trans dest=\" + scratch.dest + \" label=\" + (char) scratch.max);\n        term.setByteAt(idx, (byte) transition.max);\n        state = transition.dest;\n        idx++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2af44fa9bd43d5df330d6438c1af390323f7d567":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2af44fa9bd43d5df330d6438c1af390323f7d567"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"2af44fa9bd43d5df330d6438c1af390323f7d567":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["2af44fa9bd43d5df330d6438c1af390323f7d567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}