{"path":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#swapChildScores(float[]).mjava","commits":[{"id":"6bd4a7478aca8c3880512b730b28bf3239340635","date":1326554224,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#swapChildScores(float[]).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinScorer#swapChildScores(float[]).mjava","sourceNew":"    float[] swapChildScores(float[] other) {\n      if (scoreMode == ScoreMode.None) {\n        throw new IllegalStateException(\"ScoreMode is None\");\n      }\n      final float[] ret = pendingChildScores;\n      if (other == null) {\n        pendingChildScores = new float[5];\n      } else {\n        pendingChildScores = other;\n      }\n      return ret;\n    }\n\n","sourceOld":"    float[] swapChildScores(float[] other) {\n      if (scoreMode == ScoreMode.None) {\n        throw new IllegalStateException(\"ScoreMode is None\");\n      }\n      final float[] ret = pendingChildScores;\n      if (other == null) {\n        pendingChildScores = new float[5];\n      } else {\n        pendingChildScores = other;\n      }\n      return ret;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c6949f787f5dfccb5561ba7c944dc3194fbbdef","date":1332498797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#swapChildScores(float[]).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#swapChildScores(float[]).mjava","sourceNew":"    float[] swapChildScores(float[] other) {\n      if (scoreMode == ScoreMode.None) {\n        throw new IllegalStateException(\"ScoreMode is None; you must pass trackScores=false to ToParentBlockJoinCollector\");\n      }\n      final float[] ret = pendingChildScores;\n      if (other == null) {\n        pendingChildScores = new float[5];\n      } else {\n        pendingChildScores = other;\n      }\n      return ret;\n    }\n\n","sourceOld":"    float[] swapChildScores(float[] other) {\n      if (scoreMode == ScoreMode.None) {\n        throw new IllegalStateException(\"ScoreMode is None\");\n      }\n      final float[] ret = pendingChildScores;\n      if (other == null) {\n        pendingChildScores = new float[5];\n      } else {\n        pendingChildScores = other;\n      }\n      return ret;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#swapChildScores(float[]).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#swapChildScores(float[]).mjava","sourceNew":"    float[] swapChildScores(float[] other) {\n      if (scoreMode == ScoreMode.None) {\n        throw new IllegalStateException(\"ScoreMode is None; you must pass trackScores=false to ToParentBlockJoinCollector\");\n      }\n      final float[] ret = pendingChildScores;\n      if (other == null) {\n        pendingChildScores = new float[5];\n      } else {\n        pendingChildScores = other;\n      }\n      return ret;\n    }\n\n","sourceOld":"    float[] swapChildScores(float[] other) {\n      if (scoreMode == ScoreMode.None) {\n        throw new IllegalStateException(\"ScoreMode is None; you must pass trackScores=false to ToParentBlockJoinCollector\");\n      }\n      final float[] ret = pendingChildScores;\n      if (other == null) {\n        pendingChildScores = new float[5];\n      } else {\n        pendingChildScores = other;\n      }\n      return ret;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bd4a7478aca8c3880512b730b28bf3239340635":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6c6949f787f5dfccb5561ba7c944dc3194fbbdef"],"6c6949f787f5dfccb5561ba7c944dc3194fbbdef":["6bd4a7478aca8c3880512b730b28bf3239340635"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"6bd4a7478aca8c3880512b730b28bf3239340635":["6c6949f787f5dfccb5561ba7c944dc3194fbbdef"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c6949f787f5dfccb5561ba7c944dc3194fbbdef":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bd4a7478aca8c3880512b730b28bf3239340635"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}