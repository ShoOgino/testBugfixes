{"path":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleLegacyCollection().mjava","commits":[{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleLegacyCollection().mjava","pathOld":"/dev/null","sourceNew":"  public void testSingleLegacyCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleLegacyCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 1\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n\n      Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n      assertNotNull(map.get(\"c1\"));\n      boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n      assertFalse(exists);\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","a7ac6407286ebd80d6754a6586316e11c06f37b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7ac6407286ebd80d6754a6586316e11c06f37b3","date":1469634359,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleLegacyCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleLegacyCollection().mjava","sourceNew":"  public void testSingleLegacyCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleLegacyCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 1\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testSingleLegacyCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleLegacyCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 1\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n\n      Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n      assertNotNull(map.get(\"c1\"));\n      boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n      assertFalse(exists);\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"bugIntro":["4e42079c4c34cc1868518eff79f79ebaeb6d1965"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleLegacyCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleLegacyCollection().mjava","sourceNew":"  public void testSingleLegacyCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleLegacyCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 1\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testSingleLegacyCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleLegacyCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 1\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n\n      Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n      assertNotNull(map.get(\"c1\"));\n      boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n      assertFalse(exists);\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleLegacyCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleLegacyCollection().mjava","sourceNew":"  public void testSingleLegacyCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleLegacyCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 1\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testSingleLegacyCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleLegacyCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 1\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n\n      Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n      assertNotNull(map.get(\"c1\"));\n      boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n      assertFalse(exists);\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e42079c4c34cc1868518eff79f79ebaeb6d1965","date":1507883024,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleLegacyCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleLegacyCollection().mjava","sourceNew":"  public void testSingleLegacyCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleLegacyCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 1\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testSingleLegacyCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleLegacyCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 1\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":["a7ac6407286ebd80d6754a6586316e11c06f37b3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleLegacyCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleLegacyCollection().mjava","sourceNew":"  public void testSingleLegacyCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleLegacyCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 1\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testSingleLegacyCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleLegacyCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 1\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleLegacyCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleLegacyCollection().mjava","sourceNew":"  public void testSingleLegacyCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleLegacyCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 1\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testSingleLegacyCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleLegacyCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 1\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleLegacyCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleLegacyCollection().mjava","sourceNew":"  public void testSingleLegacyCollection() throws Exception {\n    Path zkDir = createTempDir(\"testSingleLegacyCollection\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 1\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","sourceOld":"  public void testSingleLegacyCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleLegacyCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 1\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":4,"author":"murblanc","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleLegacyCollection().mjava","sourceNew":null,"sourceOld":"  public void testSingleLegacyCollection() throws Exception {\n    Path zkDir = createTempDir(\"testSingleLegacyCollection\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 1\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n        boolean exists = zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", true);\n        assertFalse(exists);\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"4e42079c4c34cc1868518eff79f79ebaeb6d1965":["a7ac6407286ebd80d6754a6586316e11c06f37b3"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["4e42079c4c34cc1868518eff79f79ebaeb6d1965"],"a7ac6407286ebd80d6754a6586316e11c06f37b3":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["1072b8e47b50f1c4fb039e1f54a736f381d6f809","a7ac6407286ebd80d6754a6586316e11c06f37b3"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["1072b8e47b50f1c4fb039e1f54a736f381d6f809","a7ac6407286ebd80d6754a6586316e11c06f37b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e42079c4c34cc1868518eff79f79ebaeb6d1965":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a7ac6407286ebd80d6754a6586316e11c06f37b3":["4e42079c4c34cc1868518eff79f79ebaeb6d1965","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["a7ac6407286ebd80d6754a6586316e11c06f37b3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}