{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/registry/GDataServerRegistry#registerScopeVisitor(ScopeVisitor).mjava","commits":[{"id":"303ca293666286b4ae2b0b4dbf10d3bf60ed727c","date":1153866181,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/registry/GDataServerRegistry#registerScopeVisitor(ScopeVisitor).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * @param visitor -\n     *            the visitor to register\n     * @throws RegistryException\n     */\n    public synchronized void registerScopeVisitor(final ScopeVisitor visitor)\n            throws RegistryException {\n        if (visitor == null)\n            throw new IllegalArgumentException(\"visitor must not be null\");\n        Scope scope = visitor.getClass().getAnnotation(Scope.class);\n        if (scope == null)\n            throw new RegistryException(\"Visitor has not Scope\");\n        if (LOGGER.isInfoEnabled())\n            LOGGER.info(\"Register scope visitor -- \" + visitor.getClass());\n        if (scope.scope().equals(Scope.ScopeType.REQUEST)\n                && this.requestVisitable != null)\n            this.requestVisitable.accept(visitor);\n        else if (scope.scope() == Scope.ScopeType.SESSION\n                && this.sessionVisitable != null)\n            this.sessionVisitable.accept(visitor);\n        else if (scope.scope() == Scope.ScopeType.CONTEXT\n                && this.contextVisitable != null)\n            this.sessionVisitable.accept(visitor);\n        else if (!this.visitorBuffer.contains(visitor))\n            this.visitorBuffer.add(visitor);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09fe963da2613c724ffe82353b4ca2364a1f93c6","date":1155249160,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/registry/GDataServerRegistry#registerScopeVisitor(ScopeVisitor).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/registry/GDataServerRegistry#registerScopeVisitor(ScopeVisitor).mjava","sourceNew":"    /**\n     * @param visitor -\n     *            the visitor to register\n     * @throws RegistryException\n     */\n    public synchronized void registerScopeVisitor(final ScopeVisitor visitor)\n            throws RegistryException {\n        if (visitor == null)\n            throw new IllegalArgumentException(\"visitor must not be null\");\n        Scope scope = visitor.getClass().getAnnotation(Scope.class);\n        if (scope == null)\n            throw new RegistryException(\"Visitor has not Scope\");\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Register scope visitor -- \" + visitor.getClass());\n        if (scope.scope().equals(Scope.ScopeType.REQUEST)\n                && this.requestVisitable != null)\n            this.requestVisitable.accept(visitor);\n        else if (scope.scope() == Scope.ScopeType.SESSION\n                && this.sessionVisitable != null)\n            this.sessionVisitable.accept(visitor);\n        else if (scope.scope() == Scope.ScopeType.CONTEXT\n                && this.contextVisitable != null)\n            this.sessionVisitable.accept(visitor);\n        else if (!this.visitorBuffer.contains(visitor))\n            this.visitorBuffer.add(visitor);\n    }\n\n","sourceOld":"    /**\n     * @param visitor -\n     *            the visitor to register\n     * @throws RegistryException\n     */\n    public synchronized void registerScopeVisitor(final ScopeVisitor visitor)\n            throws RegistryException {\n        if (visitor == null)\n            throw new IllegalArgumentException(\"visitor must not be null\");\n        Scope scope = visitor.getClass().getAnnotation(Scope.class);\n        if (scope == null)\n            throw new RegistryException(\"Visitor has not Scope\");\n        if (LOGGER.isInfoEnabled())\n            LOGGER.info(\"Register scope visitor -- \" + visitor.getClass());\n        if (scope.scope().equals(Scope.ScopeType.REQUEST)\n                && this.requestVisitable != null)\n            this.requestVisitable.accept(visitor);\n        else if (scope.scope() == Scope.ScopeType.SESSION\n                && this.sessionVisitable != null)\n            this.sessionVisitable.accept(visitor);\n        else if (scope.scope() == Scope.ScopeType.CONTEXT\n                && this.contextVisitable != null)\n            this.sessionVisitable.accept(visitor);\n        else if (!this.visitorBuffer.contains(visitor))\n            this.visitorBuffer.add(visitor);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/server/registry/GDataServerRegistry#registerScopeVisitor(ScopeVisitor).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/registry/GDataServerRegistry#registerScopeVisitor(ScopeVisitor).mjava","sourceNew":"    /**\n     * @param visitor -\n     *            the visitor to register\n     * @throws RegistryException\n     */\n    public synchronized void registerScopeVisitor(final ScopeVisitor visitor)\n            throws RegistryException {\n        if (visitor == null)\n            throw new IllegalArgumentException(\"visitor must not be null\");\n        Scope scope = visitor.getClass().getAnnotation(Scope.class);\n        if (scope == null)\n            throw new RegistryException(\"Visitor has not Scope\");\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Register scope visitor -- \" + visitor.getClass());\n        if (scope.scope().equals(Scope.ScopeType.REQUEST)\n                && this.requestVisitable != null)\n            this.requestVisitable.accept(visitor);\n        else if (scope.scope() == Scope.ScopeType.SESSION\n                && this.sessionVisitable != null)\n            this.sessionVisitable.accept(visitor);\n        else if (scope.scope() == Scope.ScopeType.CONTEXT\n                && this.contextVisitable != null)\n            this.sessionVisitable.accept(visitor);\n        else if (!this.visitorBuffer.contains(visitor))\n            this.visitorBuffer.add(visitor);\n    }\n\n","sourceOld":"    /**\n     * @param visitor -\n     *            the visitor to register\n     * @throws RegistryException\n     */\n    public synchronized void registerScopeVisitor(final ScopeVisitor visitor)\n            throws RegistryException {\n        if (visitor == null)\n            throw new IllegalArgumentException(\"visitor must not be null\");\n        Scope scope = visitor.getClass().getAnnotation(Scope.class);\n        if (scope == null)\n            throw new RegistryException(\"Visitor has not Scope\");\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Register scope visitor -- \" + visitor.getClass());\n        if (scope.scope().equals(Scope.ScopeType.REQUEST)\n                && this.requestVisitable != null)\n            this.requestVisitable.accept(visitor);\n        else if (scope.scope() == Scope.ScopeType.SESSION\n                && this.sessionVisitable != null)\n            this.sessionVisitable.accept(visitor);\n        else if (scope.scope() == Scope.ScopeType.CONTEXT\n                && this.contextVisitable != null)\n            this.sessionVisitable.accept(visitor);\n        else if (!this.visitorBuffer.contains(visitor))\n            this.visitorBuffer.add(visitor);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09fe963da2613c724ffe82353b4ca2364a1f93c6":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"]},"commit2Childs":{"09fe963da2613c724ffe82353b4ca2364a1f93c6":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}