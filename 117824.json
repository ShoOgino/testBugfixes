{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#explain(BasicStats,int,Explanation,double).mjava","commits":[{"id":"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46","date":1508899684,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#explain(BasicStats,int,Explanation,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#explain(BasicStats,int,Explanation,float).mjava","sourceNew":"  /**\n   * Explains the score. The implementation here provides a basic explanation\n   * in the format <em>score(name-of-similarity, doc=doc-id,\n   * freq=term-frequency), computed from:</em>, and\n   * attaches the score (computed via the {@link #score(BasicStats, double, double)}\n   * method) and the explanation for the term frequency. Subclasses content with\n   * this format may add additional details in\n   * {@link #explain(List, BasicStats, int, double, double)}.\n   *  \n   * @param stats the corpus level statistics.\n   * @param doc the document id.\n   * @param freq the term frequency and its explanation.\n   * @param docLen the document length.\n   * @return the explanation.\n   */\n  protected Explanation explain(\n      BasicStats stats, int doc, Explanation freq, double docLen) {\n    List<Explanation> subs = new ArrayList<>();\n    explain(subs, stats, doc, freq.getValue(), docLen);\n    \n    return Explanation.match(\n        (float) score(stats, freq.getValue(), docLen),\n        \"score(\" + getClass().getSimpleName() + \", doc=\" + doc + \", freq=\" + freq.getValue() +\"), computed from:\",\n        subs);\n  }\n\n","sourceOld":"  /**\n   * Explains the score. The implementation here provides a basic explanation\n   * in the format <em>score(name-of-similarity, doc=doc-id,\n   * freq=term-frequency), computed from:</em>, and\n   * attaches the score (computed via the {@link #score(BasicStats, float, float)}\n   * method) and the explanation for the term frequency. Subclasses content with\n   * this format may add additional details in\n   * {@link #explain(List, BasicStats, int, float, float)}.\n   *  \n   * @param stats the corpus level statistics.\n   * @param doc the document id.\n   * @param freq the term frequency and its explanation.\n   * @param docLen the document length.\n   * @return the explanation.\n   */\n  protected Explanation explain(\n      BasicStats stats, int doc, Explanation freq, float docLen) {\n    List<Explanation> subs = new ArrayList<>();\n    explain(subs, stats, doc, freq.getValue(), docLen);\n    \n    return Explanation.match(\n        score(stats, freq.getValue(), docLen),\n        \"score(\" + getClass().getSimpleName() + \", doc=\" + doc + \", freq=\" + freq.getValue() +\"), computed from:\",\n        subs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#explain(BasicStats,int,Explanation,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#explain(BasicStats,int,Explanation,double).mjava","sourceNew":"  /**\n   * Explains the score. The implementation here provides a basic explanation\n   * in the format <em>score(name-of-similarity, doc=doc-id,\n   * freq=term-frequency), computed from:</em>, and\n   * attaches the score (computed via the {@link #score(BasicStats, double, double)}\n   * method) and the explanation for the term frequency. Subclasses content with\n   * this format may add additional details in\n   * {@link #explain(List, BasicStats, int, double, double)}.\n   *  \n   * @param stats the corpus level statistics.\n   * @param doc the document id.\n   * @param freq the term frequency and its explanation.\n   * @param docLen the document length.\n   * @return the explanation.\n   */\n  protected Explanation explain(\n      BasicStats stats, int doc, Explanation freq, double docLen) {\n    List<Explanation> subs = new ArrayList<>();\n    explain(subs, stats, doc, freq.getValue().floatValue(), docLen);\n    \n    return Explanation.match(\n        (float) score(stats, freq.getValue().floatValue(), docLen),\n        \"score(\" + getClass().getSimpleName() + \", doc=\" + doc + \", freq=\" + freq.getValue() +\"), computed from:\",\n        subs);\n  }\n\n","sourceOld":"  /**\n   * Explains the score. The implementation here provides a basic explanation\n   * in the format <em>score(name-of-similarity, doc=doc-id,\n   * freq=term-frequency), computed from:</em>, and\n   * attaches the score (computed via the {@link #score(BasicStats, double, double)}\n   * method) and the explanation for the term frequency. Subclasses content with\n   * this format may add additional details in\n   * {@link #explain(List, BasicStats, int, double, double)}.\n   *  \n   * @param stats the corpus level statistics.\n   * @param doc the document id.\n   * @param freq the term frequency and its explanation.\n   * @param docLen the document length.\n   * @return the explanation.\n   */\n  protected Explanation explain(\n      BasicStats stats, int doc, Explanation freq, double docLen) {\n    List<Explanation> subs = new ArrayList<>();\n    explain(subs, stats, doc, freq.getValue(), docLen);\n    \n    return Explanation.match(\n        (float) score(stats, freq.getValue(), docLen),\n        \"score(\" + getClass().getSimpleName() + \", doc=\" + doc + \", freq=\" + freq.getValue() +\"), computed from:\",\n        subs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#explain(BasicStats,Explanation,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#explain(BasicStats,int,Explanation,double).mjava","sourceNew":"  /**\n   * Explains the score. The implementation here provides a basic explanation\n   * in the format <em>score(name-of-similarity, doc=doc-id,\n   * freq=term-frequency), computed from:</em>, and\n   * attaches the score (computed via the {@link #score(BasicStats, double, double)}\n   * method) and the explanation for the term frequency. Subclasses content with\n   * this format may add additional details in\n   * {@link #explain(List, BasicStats, double, double)}.\n   *  \n   * @param stats the corpus level statistics.\n   * @param freq the term frequency and its explanation.\n   * @param docLen the document length.\n   * @return the explanation.\n   */\n  protected Explanation explain(\n      BasicStats stats, Explanation freq, double docLen) {\n    List<Explanation> subs = new ArrayList<>();\n    explain(subs, stats, freq.getValue().floatValue(), docLen);\n    \n    return Explanation.match(\n        (float) score(stats, freq.getValue().floatValue(), docLen),\n        \"score(\" + getClass().getSimpleName() + \", freq=\" + freq.getValue() +\"), computed from:\",\n        subs);\n  }\n\n","sourceOld":"  /**\n   * Explains the score. The implementation here provides a basic explanation\n   * in the format <em>score(name-of-similarity, doc=doc-id,\n   * freq=term-frequency), computed from:</em>, and\n   * attaches the score (computed via the {@link #score(BasicStats, double, double)}\n   * method) and the explanation for the term frequency. Subclasses content with\n   * this format may add additional details in\n   * {@link #explain(List, BasicStats, int, double, double)}.\n   *  \n   * @param stats the corpus level statistics.\n   * @param doc the document id.\n   * @param freq the term frequency and its explanation.\n   * @param docLen the document length.\n   * @return the explanation.\n   */\n  protected Explanation explain(\n      BasicStats stats, int doc, Explanation freq, double docLen) {\n    List<Explanation> subs = new ArrayList<>();\n    explain(subs, stats, doc, freq.getValue().floatValue(), docLen);\n    \n    return Explanation.match(\n        (float) score(stats, freq.getValue().floatValue(), docLen),\n        \"score(\" + getClass().getSimpleName() + \", doc=\" + doc + \", freq=\" + freq.getValue() +\"), computed from:\",\n        subs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#explain(BasicStats,int,Explanation,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Explains the score. The implementation here provides a basic explanation\n   * in the format <em>score(name-of-similarity, doc=doc-id,\n   * freq=term-frequency), computed from:</em>, and\n   * attaches the score (computed via the {@link #score(BasicStats, double, double)}\n   * method) and the explanation for the term frequency. Subclasses content with\n   * this format may add additional details in\n   * {@link #explain(List, BasicStats, int, double, double)}.\n   *  \n   * @param stats the corpus level statistics.\n   * @param doc the document id.\n   * @param freq the term frequency and its explanation.\n   * @param docLen the document length.\n   * @return the explanation.\n   */\n  protected Explanation explain(\n      BasicStats stats, int doc, Explanation freq, double docLen) {\n    List<Explanation> subs = new ArrayList<>();\n    explain(subs, stats, doc, freq.getValue().floatValue(), docLen);\n    \n    return Explanation.match(\n        (float) score(stats, freq.getValue().floatValue(), docLen),\n        \"score(\" + getClass().getSimpleName() + \", doc=\" + doc + \", freq=\" + freq.getValue() +\"), computed from:\",\n        subs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}