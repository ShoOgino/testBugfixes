{"path":"solr/core/src/test/org/apache/solr/update/HardAutoCommitTest#testCommitWithin().mjava","commits":[{"id":"039186fd2452232060d10c35a255715d6147dd91","date":1359732548,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/HardAutoCommitTest#testCommitWithin().mjava","pathOld":"/dev/null","sourceNew":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.commitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 2 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n      adoc(2000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c47e57a9659cee31304e7b75b71b252d2f33b6f9","date":1359743123,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/HardAutoCommitTest#testCommitWithin().mjava","pathOld":"/dev/null","sourceNew":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.commitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 2 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n      adoc(2000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02d6c14a1126ed2a641e4de1b0008414004f653b","date":1474882270,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/HardAutoCommitTest#testCommitWithin().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/HardAutoCommitTest#testCommitWithin().mjava","sourceNew":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.commitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 2 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n      adoc(2000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    trigger.pause();\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    trigger.unpause();\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.commitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 2 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n      adoc(2000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/HardAutoCommitTest#testCommitWithin().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/HardAutoCommitTest#testCommitWithin().mjava","sourceNew":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.commitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 2 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n      adoc(2000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    trigger.pause();\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    trigger.unpause();\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.commitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 2 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n      adoc(2000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/HardAutoCommitTest#testCommitWithin().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/HardAutoCommitTest#testCommitWithin().mjava","sourceNew":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.commitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 2 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n      adoc(2000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    trigger.pause();\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    trigger.unpause();\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","sourceOld":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.commitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 2 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n      adoc(2000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff7024b6ebcfb64924eed7543a71a1cbd1e7466c","date":1508275071,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/update/HardAutoCommitTest#testCommitWithin().mjava","sourceNew":null,"sourceOld":"  public void testCommitWithin() throws Exception {\n    SolrCore core = h.getCore();\n    \n    NewSearcherListener trigger = new NewSearcherListener();    \n    core.registerNewSearcherListener(trigger);\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2) core.getUpdateHandler();\n    CommitTracker tracker = updater.commitTracker;\n    tracker.setTimeUpperBound(0);\n    tracker.setDocsUpperBound(-1);\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document with commitWithin == 2 second\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n      adoc(2000, \"id\", \"529\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n\n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    \n    // Wait longer than the commitWithin time\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n\n    // Add one document without commitWithin\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        adoc(\"id\", \"530\", \"field_t\", \"what's inside?\", \"subject\", \"info\"), null ) );\n      trigger.reset();\n      handler.handleRequest( req, rsp );\n      \n    // Check it isn't in the index\n    assertQ(\"shouldn't find any\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    // Delete one document with commitWithin\n    trigger.pause();\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n      delI(\"529\", \"commitWithin\", \"1000\"), null ) );\n    trigger.reset();\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:529\") ,\"//result[@numFound=1]\" );\n    trigger.unpause();\n    \n    // Wait for the commit to happen\n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    \n    // Now we shouldn't find it\n    assertQ(\"should find none\", req(\"id:529\") ,\"//result[@numFound=0]\" );\n    // ... but we should find the new one\n    assertQ(\"should find one\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    trigger.reset();\n    \n    // now make the call 10 times really fast and make sure it \n    // only commits once\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        adoc(2000, \"id\", \"500\" ), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should not be there yet\", req(\"id:500\") ,\"//result[@numFound=0]\" );\n    \n    // the same for the delete\n    req.setContentStreams( AutoCommitTest.toContentStreams(\n        delI(\"530\", \"commitWithin\", \"1000\"), null ) );\n    for( int i=0;i<10; i++ ) {\n      handler.handleRequest( req, rsp );\n    }\n    assertQ(\"should be there\", req(\"id:530\") ,\"//result[@numFound=1]\" );\n    \n    assertTrue(\"commitWithin failed to commit\", trigger.waitForNewSearcher(30000));\n    assertQ(\"should be there\", req(\"id:500\") ,\"//result[@numFound=1]\" );\n    assertQ(\"should not be there\", req(\"id:530\") ,\"//result[@numFound=0]\" );\n    \n    assertEquals(3, tracker.getCommitCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"039186fd2452232060d10c35a255715d6147dd91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["039186fd2452232060d10c35a255715d6147dd91","02d6c14a1126ed2a641e4de1b0008414004f653b"],"c47e57a9659cee31304e7b75b71b252d2f33b6f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","039186fd2452232060d10c35a255715d6147dd91"],"ff7024b6ebcfb64924eed7543a71a1cbd1e7466c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"02d6c14a1126ed2a641e4de1b0008414004f653b":["039186fd2452232060d10c35a255715d6147dd91"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["039186fd2452232060d10c35a255715d6147dd91","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff7024b6ebcfb64924eed7543a71a1cbd1e7466c"]},"commit2Childs":{"039186fd2452232060d10c35a255715d6147dd91":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","c47e57a9659cee31304e7b75b71b252d2f33b6f9","02d6c14a1126ed2a641e4de1b0008414004f653b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["039186fd2452232060d10c35a255715d6147dd91","c47e57a9659cee31304e7b75b71b252d2f33b6f9"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ff7024b6ebcfb64924eed7543a71a1cbd1e7466c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c47e57a9659cee31304e7b75b71b252d2f33b6f9":[],"ff7024b6ebcfb64924eed7543a71a1cbd1e7466c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"02d6c14a1126ed2a641e4de1b0008414004f653b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c47e57a9659cee31304e7b75b71b252d2f33b6f9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}