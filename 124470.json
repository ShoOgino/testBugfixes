{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#setupTest().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance and .auto_add_replicas\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response;\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.auto_add_replicas'}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1, false, true));\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance and .auto_add_replicas\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response;\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.auto_add_replicas'}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1, false, true));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8254aa20264eb7a88d556bbe0346667937ed9c2a","date":1538494545,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance and .auto_add_replicas\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response;\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.auto_add_replicas'}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 3, false, true));\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance and .auto_add_replicas\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response;\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.auto_add_replicas'}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1, false, true));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00c95d2d1a0288835788dbffb1b73ab5852c7154","date":1544457778,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance and .auto_add_replicas\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response;\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.auto_add_replicas'}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance and .auto_add_replicas\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response;\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.auto_add_replicas'}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 3, false, true));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"967a6347853ee35b432c965743a902d42f24e697","date":1544662223,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(NUM_NODES, TimeSource.get(\"simTime:\" + SPEED));\n    \n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance and .auto_add_replicas\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response;\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.auto_add_replicas'}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance and .auto_add_replicas\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response;\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.auto_add_replicas'}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(NUM_NODES, TimeSource.get(\"simTime:\" + SPEED));\n\n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(cluster, \".scheduled_maintenance\");\n    // disable .auto_add_replicas (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".auto_add_replicas\");\n    CloudTestUtils.suspendTrigger(cluster, \".auto_add_replicas\");\n    \n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(NUM_NODES, TimeSource.get(\"simTime:\" + SPEED));\n    \n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance and .auto_add_replicas\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response;\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.auto_add_replicas'}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8170c51c9c3b12c697ac2502e55ede8781c97d22","date":1546463517,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(NUM_NODES, TimeSource.get(\"simTime:\" + SPEED));\n\n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(cluster, \".scheduled_maintenance\");\n    // disable .auto_add_replicas (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".auto_add_replicas\");\n    CloudTestUtils.suspendTrigger(cluster, \".auto_add_replicas\");\n    cluster.getSimClusterStateProvider().createSystemCollection();\n\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(NUM_NODES, TimeSource.get(\"simTime:\" + SPEED));\n\n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(cluster, \".scheduled_maintenance\");\n    // disable .auto_add_replicas (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".auto_add_replicas\");\n    CloudTestUtils.suspendTrigger(cluster, \".auto_add_replicas\");\n    \n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30004ef8212d169b5fc7d098ec7aa299c8b5f060","date":1551998457,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(NUM_NODES, TimeSource.get(\"simTime:\" + SPEED));\n\n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(cluster, \".scheduled_maintenance\");\n    // disable .auto_add_replicas (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".auto_add_replicas\");\n    CloudTestUtils.suspendTrigger(cluster, \".auto_add_replicas\");\n    cluster.getSimClusterStateProvider().createSystemCollection();\n\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    \n    // by default assume we want to allow a (virtually) unbounded amount of events,\n    // tests that expect a specific number can override\n    listenerEventLatch = new CountDownLatch(Integer.MAX_VALUE);\n    listenerEvents.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(NUM_NODES, TimeSource.get(\"simTime:\" + SPEED));\n\n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(cluster, \".scheduled_maintenance\");\n    // disable .auto_add_replicas (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".auto_add_replicas\");\n    CloudTestUtils.suspendTrigger(cluster, \".auto_add_replicas\");\n    cluster.getSimClusterStateProvider().createSystemCollection();\n\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bffd02b7c57b27d76ece244beb098f61c974b9d9","date":1568827127,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(NUM_NODES, TimeSource.get(\"simTime:\" + SPEED));\n\n    // disable metrics history collection\n    cluster.disableMetricsHistory();\n\n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(cluster, \".scheduled_maintenance\");\n    // disable .auto_add_replicas (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".auto_add_replicas\");\n    CloudTestUtils.suspendTrigger(cluster, \".auto_add_replicas\");\n    cluster.getSimClusterStateProvider().createSystemCollection();\n\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    \n    // by default assume we want to allow a (virtually) unbounded amount of events,\n    // tests that expect a specific number can override\n    listenerEventLatch = new CountDownLatch(Integer.MAX_VALUE);\n    listenerEvents.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(NUM_NODES, TimeSource.get(\"simTime:\" + SPEED));\n\n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(cluster, \".scheduled_maintenance\");\n    // disable .auto_add_replicas (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".auto_add_replicas\");\n    CloudTestUtils.suspendTrigger(cluster, \".auto_add_replicas\");\n    cluster.getSimClusterStateProvider().createSystemCollection();\n\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    \n    // by default assume we want to allow a (virtually) unbounded amount of events,\n    // tests that expect a specific number can override\n    listenerEventLatch = new CountDownLatch(Integer.MAX_VALUE);\n    listenerEvents.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"067ba8c807b0f23eae8bf41bc27046a87b548134","date":1587570399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(NUM_NODES, TimeSource.get(\"simTime:\" + SPEED));\n\n    // disable metrics history collection\n    cluster.disableMetricsHistory();\n\n    // turn off the default policy to avoid slowdowns due to the costly #EQUAL rules\n    CloudTestUtils.assertAutoScalingRequest(cluster, \"{'set-cluster-policy': []}\");\n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(cluster, \".scheduled_maintenance\");\n    // disable .auto_add_replicas (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".auto_add_replicas\");\n    CloudTestUtils.suspendTrigger(cluster, \".auto_add_replicas\");\n    cluster.getSimClusterStateProvider().createSystemCollection();\n\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    \n    // by default assume we want to allow a (virtually) unbounded amount of events,\n    // tests that expect a specific number can override\n    listenerEventLatch = new CountDownLatch(Integer.MAX_VALUE);\n    listenerEvents.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(NUM_NODES, TimeSource.get(\"simTime:\" + SPEED));\n\n    // disable metrics history collection\n    cluster.disableMetricsHistory();\n\n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(cluster, \".scheduled_maintenance\");\n    // disable .auto_add_replicas (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".auto_add_replicas\");\n    CloudTestUtils.suspendTrigger(cluster, \".auto_add_replicas\");\n    cluster.getSimClusterStateProvider().createSystemCollection();\n\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    \n    // by default assume we want to allow a (virtually) unbounded amount of events,\n    // tests that expect a specific number can override\n    listenerEventLatch = new CountDownLatch(Integer.MAX_VALUE);\n    listenerEvents.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#setupTest().mjava","sourceNew":null,"sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(NUM_NODES, TimeSource.get(\"simTime:\" + SPEED));\n\n    // disable metrics history collection\n    cluster.disableMetricsHistory();\n\n    // turn off the default policy to avoid slowdowns due to the costly #EQUAL rules\n    CloudTestUtils.assertAutoScalingRequest(cluster, \"{'set-cluster-policy': []}\");\n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(cluster, \".scheduled_maintenance\");\n    // disable .auto_add_replicas (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".auto_add_replicas\");\n    CloudTestUtils.suspendTrigger(cluster, \".auto_add_replicas\");\n    cluster.getSimClusterStateProvider().createSystemCollection();\n\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    \n    // by default assume we want to allow a (virtually) unbounded amount of events,\n    // tests that expect a specific number can override\n    listenerEventLatch = new CountDownLatch(Integer.MAX_VALUE);\n    listenerEvents.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30004ef8212d169b5fc7d098ec7aa299c8b5f060":["8170c51c9c3b12c697ac2502e55ede8781c97d22"],"3f504512a03d978990cbff30db0522b354e846db":["067ba8c807b0f23eae8bf41bc27046a87b548134"],"00c95d2d1a0288835788dbffb1b73ab5852c7154":["8254aa20264eb7a88d556bbe0346667937ed9c2a"],"8170c51c9c3b12c697ac2502e55ede8781c97d22":["89948af0461fead48f44ba8fb7866f107ce83f22"],"8254aa20264eb7a88d556bbe0346667937ed9c2a":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"067ba8c807b0f23eae8bf41bc27046a87b548134":["bffd02b7c57b27d76ece244beb098f61c974b9d9"],"89948af0461fead48f44ba8fb7866f107ce83f22":["967a6347853ee35b432c965743a902d42f24e697"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"bffd02b7c57b27d76ece244beb098f61c974b9d9":["30004ef8212d169b5fc7d098ec7aa299c8b5f060"],"967a6347853ee35b432c965743a902d42f24e697":["00c95d2d1a0288835788dbffb1b73ab5852c7154"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["8254aa20264eb7a88d556bbe0346667937ed9c2a"],"30004ef8212d169b5fc7d098ec7aa299c8b5f060":["bffd02b7c57b27d76ece244beb098f61c974b9d9"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"00c95d2d1a0288835788dbffb1b73ab5852c7154":["967a6347853ee35b432c965743a902d42f24e697"],"8170c51c9c3b12c697ac2502e55ede8781c97d22":["30004ef8212d169b5fc7d098ec7aa299c8b5f060"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"8254aa20264eb7a88d556bbe0346667937ed9c2a":["00c95d2d1a0288835788dbffb1b73ab5852c7154"],"067ba8c807b0f23eae8bf41bc27046a87b548134":["3f504512a03d978990cbff30db0522b354e846db"],"89948af0461fead48f44ba8fb7866f107ce83f22":["8170c51c9c3b12c697ac2502e55ede8781c97d22"],"bffd02b7c57b27d76ece244beb098f61c974b9d9":["067ba8c807b0f23eae8bf41bc27046a87b548134"],"967a6347853ee35b432c965743a902d42f24e697":["89948af0461fead48f44ba8fb7866f107ce83f22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}