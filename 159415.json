{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayBytes().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayBytes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayBytes().mjava","sourceNew":"  public void testGetArrayBytes() throws CorruptIndexException, IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    // only single byte fixed straight supports getArray()\n    indexValues(w, numValues, Type.BYTES_FIXED_STRAIGHT, null, false, 1);\n    IndexReader r = IndexReader.open(w, true);\n    DocValues docValues = getDocValues(r, Type.BYTES_FIXED_STRAIGHT.name());\n    assertNotNull(docValues);\n    // make sure we don't get a direct source since they don't support\n    // getArray()\n    Source source = docValues.getSource();\n\n    switch (source.type()) {\n    case BYTES_FIXED_STRAIGHT: {\n      BytesRef ref = new BytesRef();\n      assertTrue(source.hasArray());\n      byte[] values = (byte[]) source.getArray();\n      for (int i = 0; i < numValues; i++) {\n        source.getBytes(i, ref);\n        assertEquals(1, ref.length);\n        assertEquals(values[i], ref.bytes[ref.offset]);\n      }\n    }\n      break;\n    default:\n      fail(\"unexpected value \" + source.type());\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testGetArrayBytes() throws CorruptIndexException, IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    // only single byte fixed straight supports getArray()\n    indexValues(w, numValues, Type.BYTES_FIXED_STRAIGHT, null, false, 1);\n    IndexReader r = IndexReader.open(w, true);\n    DocValues docValues = getDocValues(r, Type.BYTES_FIXED_STRAIGHT.name());\n    assertNotNull(docValues);\n    // make sure we don't get a direct source since they don't support\n    // getArray()\n    Source source = docValues.getSource();\n\n    switch (source.type()) {\n    case BYTES_FIXED_STRAIGHT: {\n      BytesRef ref = new BytesRef();\n      assertTrue(source.hasArray());\n      byte[] values = (byte[]) source.getArray();\n      for (int i = 0; i < numValues; i++) {\n        source.getBytes(i, ref);\n        assertEquals(1, ref.length);\n        assertEquals(values[i], ref.bytes[ref.offset]);\n      }\n    }\n      break;\n    default:\n      fail(\"unexpected value \" + source.type());\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de5bbadeb3abac0f650298bff584bd4317bd75aa","date":1331116004,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayBytes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayBytes().mjava","sourceNew":"  public void testGetArrayBytes() throws CorruptIndexException, IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    // only single byte fixed straight supports getArray()\n    indexValues(w, numValues, Type.BYTES_FIXED_STRAIGHT, null, false, 1);\n    DirectoryReader r = DirectoryReader.open(w, true);\n    DocValues docValues = getDocValues(r, Type.BYTES_FIXED_STRAIGHT.name());\n    assertNotNull(docValues);\n    // make sure we don't get a direct source since they don't support\n    // getArray()\n    Source source = docValues.getSource();\n\n    switch (source.type()) {\n    case BYTES_FIXED_STRAIGHT: {\n      BytesRef ref = new BytesRef();\n      if (source.hasArray()) {\n        byte[] values = (byte[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          source.getBytes(i, ref);\n          assertEquals(1, ref.length);\n          assertEquals(values[i], ref.bytes[ref.offset]);\n        }\n      }\n    }\n      break;\n    default:\n      fail(\"unexpected value \" + source.type());\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testGetArrayBytes() throws CorruptIndexException, IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    // only single byte fixed straight supports getArray()\n    indexValues(w, numValues, Type.BYTES_FIXED_STRAIGHT, null, false, 1);\n    IndexReader r = IndexReader.open(w, true);\n    DocValues docValues = getDocValues(r, Type.BYTES_FIXED_STRAIGHT.name());\n    assertNotNull(docValues);\n    // make sure we don't get a direct source since they don't support\n    // getArray()\n    Source source = docValues.getSource();\n\n    switch (source.type()) {\n    case BYTES_FIXED_STRAIGHT: {\n      BytesRef ref = new BytesRef();\n      assertTrue(source.hasArray());\n      byte[] values = (byte[]) source.getArray();\n      for (int i = 0; i < numValues; i++) {\n        source.getBytes(i, ref);\n        assertEquals(1, ref.length);\n        assertEquals(values[i], ref.bytes[ref.offset]);\n      }\n    }\n      break;\n    default:\n      fail(\"unexpected value \" + source.type());\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd0f953fbccd59aa346f280fe7e30a698f5ecb04","date":1331511349,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayBytes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayBytes().mjava","sourceNew":"  public void testGetArrayBytes() throws CorruptIndexException, IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    // only single byte fixed straight supports getArray()\n    indexValues(w, numValues, Type.BYTES_FIXED_STRAIGHT, null, false, 1);\n    DirectoryReader r = DirectoryReader.open(w, true);\n    DocValues docValues = getDocValues(r, Type.BYTES_FIXED_STRAIGHT.name());\n    assertNotNull(docValues);\n    // make sure we don't get a direct source since they don't support\n    // getArray()\n    Source source = docValues.getSource();\n\n    switch (source.getType()) {\n    case BYTES_FIXED_STRAIGHT: {\n      BytesRef ref = new BytesRef();\n      if (source.hasArray()) {\n        byte[] values = (byte[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          source.getBytes(i, ref);\n          assertEquals(1, ref.length);\n          assertEquals(values[i], ref.bytes[ref.offset]);\n        }\n      }\n    }\n      break;\n    default:\n      fail(\"unexpected value \" + source.getType());\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testGetArrayBytes() throws CorruptIndexException, IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    // only single byte fixed straight supports getArray()\n    indexValues(w, numValues, Type.BYTES_FIXED_STRAIGHT, null, false, 1);\n    DirectoryReader r = DirectoryReader.open(w, true);\n    DocValues docValues = getDocValues(r, Type.BYTES_FIXED_STRAIGHT.name());\n    assertNotNull(docValues);\n    // make sure we don't get a direct source since they don't support\n    // getArray()\n    Source source = docValues.getSource();\n\n    switch (source.type()) {\n    case BYTES_FIXED_STRAIGHT: {\n      BytesRef ref = new BytesRef();\n      if (source.hasArray()) {\n        byte[] values = (byte[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          source.getBytes(i, ref);\n          assertEquals(1, ref.length);\n          assertEquals(values[i], ref.bytes[ref.offset]);\n        }\n      }\n    }\n      break;\n    default:\n      fail(\"unexpected value \" + source.type());\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayBytes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayBytes().mjava","sourceNew":"  public void testGetArrayBytes() throws CorruptIndexException, IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    // only single byte fixed straight supports getArray()\n    indexValues(w, numValues, Type.BYTES_FIXED_STRAIGHT, null, false, 1);\n    DirectoryReader r = DirectoryReader.open(w, true);\n    DocValues docValues = getDocValues(r, Type.BYTES_FIXED_STRAIGHT.name());\n    assertNotNull(docValues);\n    // make sure we don't get a direct source since they don't support\n    // getArray()\n    Source source = docValues.getSource();\n\n    switch (source.getType()) {\n    case BYTES_FIXED_STRAIGHT: {\n      BytesRef ref = new BytesRef();\n      if (source.hasArray()) {\n        byte[] values = (byte[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          source.getBytes(i, ref);\n          assertEquals(1, ref.length);\n          assertEquals(values[i], ref.bytes[ref.offset]);\n        }\n      }\n    }\n      break;\n    default:\n      fail(\"unexpected value \" + source.getType());\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testGetArrayBytes() throws CorruptIndexException, IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    // only single byte fixed straight supports getArray()\n    indexValues(w, numValues, Type.BYTES_FIXED_STRAIGHT, null, false, 1);\n    IndexReader r = IndexReader.open(w, true);\n    DocValues docValues = getDocValues(r, Type.BYTES_FIXED_STRAIGHT.name());\n    assertNotNull(docValues);\n    // make sure we don't get a direct source since they don't support\n    // getArray()\n    Source source = docValues.getSource();\n\n    switch (source.type()) {\n    case BYTES_FIXED_STRAIGHT: {\n      BytesRef ref = new BytesRef();\n      assertTrue(source.hasArray());\n      byte[] values = (byte[]) source.getArray();\n      for (int i = 0; i < numValues; i++) {\n        source.getBytes(i, ref);\n        assertEquals(1, ref.length);\n        assertEquals(values[i], ref.bytes[ref.offset]);\n      }\n    }\n      break;\n    default:\n      fail(\"unexpected value \" + source.type());\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayBytes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayBytes().mjava","sourceNew":"  public void testGetArrayBytes() throws CorruptIndexException, IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    // only single byte fixed straight supports getArray()\n    indexValues(w, numValues, Type.BYTES_FIXED_STRAIGHT, null, false, 1);\n    DirectoryReader r = DirectoryReader.open(w, true);\n    DocValues docValues = getDocValues(r, Type.BYTES_FIXED_STRAIGHT.name());\n    assertNotNull(docValues);\n    // make sure we don't get a direct source since they don't support\n    // getArray()\n    Source source = docValues.getSource();\n\n    switch (source.getType()) {\n    case BYTES_FIXED_STRAIGHT: {\n      BytesRef ref = new BytesRef();\n      if (source.hasArray()) {\n        byte[] values = (byte[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          source.getBytes(i, ref);\n          assertEquals(1, ref.length);\n          assertEquals(values[i], ref.bytes[ref.offset]);\n        }\n      }\n    }\n      break;\n    default:\n      fail(\"unexpected value \" + source.getType());\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testGetArrayBytes() throws CorruptIndexException, IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    // only single byte fixed straight supports getArray()\n    indexValues(w, numValues, Type.BYTES_FIXED_STRAIGHT, null, false, 1);\n    DirectoryReader r = DirectoryReader.open(w, true);\n    DocValues docValues = getDocValues(r, Type.BYTES_FIXED_STRAIGHT.name());\n    assertNotNull(docValues);\n    // make sure we don't get a direct source since they don't support\n    // getArray()\n    Source source = docValues.getSource();\n\n    switch (source.getType()) {\n    case BYTES_FIXED_STRAIGHT: {\n      BytesRef ref = new BytesRef();\n      if (source.hasArray()) {\n        byte[] values = (byte[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          source.getBytes(i, ref);\n          assertEquals(1, ref.length);\n          assertEquals(values[i], ref.bytes[ref.offset]);\n        }\n      }\n    }\n      break;\n    default:\n      fail(\"unexpected value \" + source.getType());\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayBytes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayBytes().mjava","sourceNew":"  public void testGetArrayBytes() throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    // only single byte fixed straight supports getArray()\n    indexValues(w, numValues, Type.BYTES_FIXED_STRAIGHT, null, false, 1);\n    DirectoryReader r = DirectoryReader.open(w, true);\n    DocValues docValues = getDocValues(r, Type.BYTES_FIXED_STRAIGHT.name());\n    assertNotNull(docValues);\n    // make sure we don't get a direct source since they don't support\n    // getArray()\n    Source source = docValues.getSource();\n\n    switch (source.getType()) {\n    case BYTES_FIXED_STRAIGHT: {\n      BytesRef ref = new BytesRef();\n      if (source.hasArray()) {\n        byte[] values = (byte[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          source.getBytes(i, ref);\n          assertEquals(1, ref.length);\n          assertEquals(values[i], ref.bytes[ref.offset]);\n        }\n      }\n    }\n      break;\n    default:\n      fail(\"unexpected value \" + source.getType());\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testGetArrayBytes() throws CorruptIndexException, IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    // only single byte fixed straight supports getArray()\n    indexValues(w, numValues, Type.BYTES_FIXED_STRAIGHT, null, false, 1);\n    DirectoryReader r = DirectoryReader.open(w, true);\n    DocValues docValues = getDocValues(r, Type.BYTES_FIXED_STRAIGHT.name());\n    assertNotNull(docValues);\n    // make sure we don't get a direct source since they don't support\n    // getArray()\n    Source source = docValues.getSource();\n\n    switch (source.getType()) {\n    case BYTES_FIXED_STRAIGHT: {\n      BytesRef ref = new BytesRef();\n      if (source.hasArray()) {\n        byte[] values = (byte[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          source.getBytes(i, ref);\n          assertEquals(1, ref.length);\n          assertEquals(values[i], ref.bytes[ref.offset]);\n        }\n      }\n    }\n      break;\n    default:\n      fail(\"unexpected value \" + source.getType());\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayBytes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayBytes().mjava","sourceNew":"  public void testGetArrayBytes() throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    // only single byte fixed straight supports getArray()\n    indexValues(w, numValues, Type.BYTES_FIXED_STRAIGHT, null, false, 1);\n    DirectoryReader r = DirectoryReader.open(w, true);\n    DocValues docValues = getDocValues(r, Type.BYTES_FIXED_STRAIGHT.name());\n    assertNotNull(docValues);\n    // make sure we don't get a direct source since they don't support\n    // getArray()\n    Source source = docValues.getSource();\n\n    switch (source.getType()) {\n    case BYTES_FIXED_STRAIGHT: {\n      BytesRef ref = new BytesRef();\n      if (source.hasArray()) {\n        byte[] values = (byte[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          source.getBytes(i, ref);\n          assertEquals(1, ref.length);\n          assertEquals(values[i], ref.bytes[ref.offset]);\n        }\n      }\n    }\n      break;\n    default:\n      fail(\"unexpected value \" + source.getType());\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testGetArrayBytes() throws CorruptIndexException, IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    // only single byte fixed straight supports getArray()\n    indexValues(w, numValues, Type.BYTES_FIXED_STRAIGHT, null, false, 1);\n    DirectoryReader r = DirectoryReader.open(w, true);\n    DocValues docValues = getDocValues(r, Type.BYTES_FIXED_STRAIGHT.name());\n    assertNotNull(docValues);\n    // make sure we don't get a direct source since they don't support\n    // getArray()\n    Source source = docValues.getSource();\n\n    switch (source.getType()) {\n    case BYTES_FIXED_STRAIGHT: {\n      BytesRef ref = new BytesRef();\n      if (source.hasArray()) {\n        byte[] values = (byte[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          source.getBytes(i, ref);\n          assertEquals(1, ref.length);\n          assertEquals(values[i], ref.bytes[ref.offset]);\n        }\n      }\n    }\n      break;\n    default:\n      fail(\"unexpected value \" + source.getType());\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"841532e4eb1e16e53a6f7a438ec2079ff981b192","date":1358288582,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayBytes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayBytes().mjava","sourceNew":"  public void testGetArrayBytes() throws IOException {\n    /* nocommit convert\n    Directory d = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    // only single byte fixed straight supports getArray()\n    indexValues(w, numValues, Type.BYTES_FIXED_STRAIGHT, null, false, 1);\n    DirectoryReader r = DirectoryReader.open(w, true);\n    DocValues docValues = getDocValues(r, Type.BYTES_FIXED_STRAIGHT.name());\n    assertNotNull(docValues);\n    // make sure we don't get a direct source since they don't support\n    // getArray()\n    Source source = docValues.getSource();\n\n    switch (source.getType()) {\n    case BYTES_FIXED_STRAIGHT: {\n      BytesRef ref = new BytesRef();\n      if (source.hasArray()) {\n        byte[] values = (byte[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          source.getBytes(i, ref);\n          assertEquals(1, ref.length);\n          assertEquals(values[i], ref.bytes[ref.offset]);\n        }\n      }\n    }\n      break;\n    default:\n      fail(\"unexpected value \" + source.getType());\n    }\n    r.close();\n    w.close();\n    d.close();\n    */\n  }\n\n","sourceOld":"  public void testGetArrayBytes() throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    // only single byte fixed straight supports getArray()\n    indexValues(w, numValues, Type.BYTES_FIXED_STRAIGHT, null, false, 1);\n    DirectoryReader r = DirectoryReader.open(w, true);\n    DocValues docValues = getDocValues(r, Type.BYTES_FIXED_STRAIGHT.name());\n    assertNotNull(docValues);\n    // make sure we don't get a direct source since they don't support\n    // getArray()\n    Source source = docValues.getSource();\n\n    switch (source.getType()) {\n    case BYTES_FIXED_STRAIGHT: {\n      BytesRef ref = new BytesRef();\n      if (source.hasArray()) {\n        byte[] values = (byte[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          source.getBytes(i, ref);\n          assertEquals(1, ref.length);\n          assertEquals(values[i], ref.bytes[ref.offset]);\n        }\n      }\n    }\n      break;\n    default:\n      fail(\"unexpected value \" + source.getType());\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d048798bdb94f09ba6613d3956314a3ca151bcc3","date":1359417182,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayBytes().mjava","sourceNew":null,"sourceOld":"  public void testGetArrayBytes() throws IOException {\n    /* nocommit convert\n    Directory d = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    // only single byte fixed straight supports getArray()\n    indexValues(w, numValues, Type.BYTES_FIXED_STRAIGHT, null, false, 1);\n    DirectoryReader r = DirectoryReader.open(w, true);\n    DocValues docValues = getDocValues(r, Type.BYTES_FIXED_STRAIGHT.name());\n    assertNotNull(docValues);\n    // make sure we don't get a direct source since they don't support\n    // getArray()\n    Source source = docValues.getSource();\n\n    switch (source.getType()) {\n    case BYTES_FIXED_STRAIGHT: {\n      BytesRef ref = new BytesRef();\n      if (source.hasArray()) {\n        byte[] values = (byte[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          source.getBytes(i, ref);\n          assertEquals(1, ref.length);\n          assertEquals(values[i], ref.bytes[ref.offset]);\n        }\n      }\n    }\n      break;\n    default:\n      fail(\"unexpected value \" + source.getType());\n    }\n    r.close();\n    w.close();\n    d.close();\n    */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testGetArrayBytes().mjava","sourceNew":null,"sourceOld":"  public void testGetArrayBytes() throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    IndexWriter w = new IndexWriter(d, cfg);\n    final int numValues = 50 + atLeast(10);\n    // only single byte fixed straight supports getArray()\n    indexValues(w, numValues, Type.BYTES_FIXED_STRAIGHT, null, false, 1);\n    DirectoryReader r = DirectoryReader.open(w, true);\n    DocValues docValues = getDocValues(r, Type.BYTES_FIXED_STRAIGHT.name());\n    assertNotNull(docValues);\n    // make sure we don't get a direct source since they don't support\n    // getArray()\n    Source source = docValues.getSource();\n\n    switch (source.getType()) {\n    case BYTES_FIXED_STRAIGHT: {\n      BytesRef ref = new BytesRef();\n      if (source.hasArray()) {\n        byte[] values = (byte[]) source.getArray();\n        for (int i = 0; i < numValues; i++) {\n          source.getBytes(i, ref);\n          assertEquals(1, ref.length);\n          assertEquals(values[i], ref.bytes[ref.offset]);\n        }\n      }\n    }\n      break;\n    default:\n      fail(\"unexpected value \" + source.getType());\n    }\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","d048798bdb94f09ba6613d3956314a3ca151bcc3"],"cd0f953fbccd59aa346f280fe7e30a698f5ecb04":["de5bbadeb3abac0f650298bff584bd4317bd75aa"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d048798bdb94f09ba6613d3956314a3ca151bcc3":["841532e4eb1e16e53a6f7a438ec2079ff981b192"],"841532e4eb1e16e53a6f7a438ec2079ff981b192":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd0f953fbccd59aa346f280fe7e30a698f5ecb04":["38e3b736c7ca086d61b7dbb841c905ee115490da","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"d048798bdb94f09ba6613d3956314a3ca151bcc3":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"841532e4eb1e16e53a6f7a438ec2079ff981b192":["d048798bdb94f09ba6613d3956314a3ca151bcc3"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d4d69c535930b5cce125cff868d40f6373dc27d4","fe33227f6805edab2036cbb80645cc4e2d1fa424","841532e4eb1e16e53a6f7a438ec2079ff981b192"],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}