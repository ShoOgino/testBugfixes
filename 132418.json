{"path":"solr/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int,OutputStream).mjava","commits":[{"id":"8217c9a654e7f643e319942262bcf8806545fc98","date":1297114772,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int,OutputStream).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int).mjava","sourceNew":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs, OutputStream out) {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, out);\n        filesPosted++;\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","sourceOld":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs) throws IOException {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      final StringWriter sw = new StringWriter();\n      \n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, sw);\n        filesPosted++;\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int,OutputStream).mjava","pathOld":"/dev/null","sourceNew":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs, OutputStream out) {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, out);\n        filesPosted++;\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int,OutputStream).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int).mjava","sourceNew":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs, OutputStream out) {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, out);\n        filesPosted++;\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","sourceOld":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs) throws IOException {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      final StringWriter sw = new StringWriter();\n      \n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, sw);\n        filesPosted++;\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int,OutputStream).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int,OutputStream).mjava","sourceNew":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs, OutputStream out) {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, out);\n        filesPosted++;\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","sourceOld":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs, OutputStream out) {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, out);\n        filesPosted++;\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int,OutputStream).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int,OutputStream).mjava","sourceNew":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs, OutputStream out) {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, out);\n        filesPosted++;\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","sourceOld":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs, OutputStream out) {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, out);\n        filesPosted++;\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int,OutputStream).mjava","pathOld":"solr/src/java/org/apache/solr/util/SimplePostTool#postFiles(String[],int,OutputStream).mjava","sourceNew":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs, OutputStream out) {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, out);\n        filesPosted++;\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","sourceOld":"  /** Post all filenames provided in args, return the number of files posted*/\n  int postFiles(String [] args,int startIndexInArgs, OutputStream out) {\n    int filesPosted = 0;\n    for (int j = startIndexInArgs; j < args.length; j++) {\n      File srcFile = new File(args[j]);\n      if (srcFile.canRead()) {\n        info(\"POSTing file \" + srcFile.getName());\n        postFile(srcFile, out);\n        filesPosted++;\n      } else {\n        warn(\"Cannot read input file: \" + srcFile);\n      }\n    }\n    return filesPosted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8217c9a654e7f643e319942262bcf8806545fc98":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["8217c9a654e7f643e319942262bcf8806545fc98"],"c26f00b574427b55127e869b935845554afde1fa":["8217c9a654e7f643e319942262bcf8806545fc98","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8217c9a654e7f643e319942262bcf8806545fc98"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["8217c9a654e7f643e319942262bcf8806545fc98"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8217c9a654e7f643e319942262bcf8806545fc98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"8217c9a654e7f643e319942262bcf8806545fc98":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8217c9a654e7f643e319942262bcf8806545fc98","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}