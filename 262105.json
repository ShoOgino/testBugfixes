{"path":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/ru/RussianStemmer#findAndRemoveEnding(StringBuffer,char[][],char[][]).mjava","commits":[{"id":"4215168c7c026cd898f2d98bb6aa5b0df9856696","date":1092688246,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/ru/RussianStemmer#findAndRemoveEnding(StringBuffer,char[][],char[][]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Finds the ending among the given class of endings, then checks if this ending was\n     * preceded by any of given predessors, and if so, removes it from stemming zone.\n     * Creation date: (17/03/2002 8:18:34 PM)\n     */\n    private boolean findAndRemoveEnding(StringBuffer stemmingZone,\n        char[][] theEndingClass, char[][] thePredessors)\n    {\n        int endingLength = findEnding(stemmingZone, theEndingClass);\n        if (endingLength == 0)\n            // not found\n            return false;\n        else\n        {\n            int predessorLength =\n                findEnding(stemmingZone,\n                    stemmingZone.length() - endingLength - 1,\n                    thePredessors);\n            if (predessorLength == 0)\n                return false;\n            else {\n                stemmingZone.setLength(stemmingZone.length() - endingLength);\n                // cut the ending found\n                return true;\n            }\n        }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/ru/RussianStemmer#findAndRemoveEnding(StringBuffer,char[][],char[][]).mjava","pathOld":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/ru/RussianStemmer#findAndRemoveEnding(StringBuffer,char[][],char[][]).mjava","sourceNew":"    /**\n     * Finds the ending among the given class of endings, then checks if this ending was\n     * preceded by any of given predessors, and if so, removes it from stemming zone.\n     * Creation date: (17/03/2002 8:18:34 PM)\n     */\n    private boolean findAndRemoveEnding(StringBuffer stemmingZone,\n        char[][] theEndingClass, char[][] thePredessors)\n    {\n        int endingLength = findEnding(stemmingZone, theEndingClass);\n        if (endingLength == 0)\n            // not found\n            return false;\n        else\n        {\n            int predessorLength =\n                findEnding(stemmingZone,\n                    stemmingZone.length() - endingLength - 1,\n                    thePredessors);\n            if (predessorLength == 0)\n                return false;\n            else {\n                stemmingZone.setLength(stemmingZone.length() - endingLength);\n                // cut the ending found\n                return true;\n            }\n        }\n\n    }\n\n","sourceOld":"    /**\n     * Finds the ending among the given class of endings, then checks if this ending was\n     * preceded by any of given predessors, and if so, removes it from stemming zone.\n     * Creation date: (17/03/2002 8:18:34 PM)\n     */\n    private boolean findAndRemoveEnding(StringBuffer stemmingZone,\n        char[][] theEndingClass, char[][] thePredessors)\n    {\n        int endingLength = findEnding(stemmingZone, theEndingClass);\n        if (endingLength == 0)\n            // not found\n            return false;\n        else\n        {\n            int predessorLength =\n                findEnding(stemmingZone,\n                    stemmingZone.length() - endingLength - 1,\n                    thePredessors);\n            if (predessorLength == 0)\n                return false;\n            else {\n                stemmingZone.setLength(stemmingZone.length() - endingLength);\n                // cut the ending found\n                return true;\n            }\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["4215168c7c026cd898f2d98bb6aa5b0df9856696"],"4215168c7c026cd898f2d98bb6aa5b0df9856696":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4215168c7c026cd898f2d98bb6aa5b0df9856696":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4215168c7c026cd898f2d98bb6aa5b0df9856696"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}