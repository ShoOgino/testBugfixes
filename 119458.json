{"path":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareDocToValue(int,Double).mjava","commits":[{"id":"fb02351ae2b114dd41585916d1e35fb2cff98fb0","date":1337171337,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareDocToValue(int,Double).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int compareDocToValue(int doc, Double valueObj) {\n      final double value = valueObj.doubleValue();\n      double docValue = currentReaderValues[doc];\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      if (docValue < value) {\n        return -1;\n      } else if (docValue > value) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareDocToValue(int,Double).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int compareDocToValue(int doc, Double valueObj) {\n      final double value = valueObj.doubleValue();\n      double docValue = currentReaderValues[doc];\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      if (docValue < value) {\n        return -1;\n      } else if (docValue > value) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f45457a742a53533c348c4b990b1c579ff364467","date":1353197071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareDocToValue(int,Double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareDocToValue(int,Double).mjava","sourceNew":"    @Override\n    public int compareDocToValue(int doc, Double valueObj) {\n      final double value = valueObj.doubleValue();\n      double docValue = currentReaderValues.get(doc);\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      if (docValue < value) {\n        return -1;\n      } else if (docValue > value) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareDocToValue(int doc, Double valueObj) {\n      final double value = valueObj.doubleValue();\n      double docValue = currentReaderValues[doc];\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      if (docValue < value) {\n        return -1;\n      } else if (docValue > value) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareDocToValue(int,Double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareDocToValue(int,Double).mjava","sourceNew":"    @Override\n    public int compareDocToValue(int doc, Double valueObj) {\n      final double value = valueObj.doubleValue();\n      double docValue = currentReaderValues.get(doc);\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      if (docValue < value) {\n        return -1;\n      } else if (docValue > value) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareDocToValue(int doc, Double valueObj) {\n      final double value = valueObj.doubleValue();\n      double docValue = currentReaderValues[doc];\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      if (docValue < value) {\n        return -1;\n      } else if (docValue > value) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n\n","bugFix":["fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47da30f6e362ae055711fad41cdcba60b9dee8c6","date":1363626629,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareDocToValue(int,Double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareDocToValue(int,Double).mjava","sourceNew":"    @Override\n    public int compareDocToValue(int doc, Double valueObj) {\n      final double value = valueObj.doubleValue();\n      double docValue = currentReaderValues.get(doc);\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      return Double.compare(docValue, value);\n    }\n\n","sourceOld":"    @Override\n    public int compareDocToValue(int doc, Double valueObj) {\n      final double value = valueObj.doubleValue();\n      double docValue = currentReaderValues.get(doc);\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      if (docValue < value) {\n        return -1;\n      } else if (docValue > value) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7615b855702e008d91a95a2578bf05d27372f599","date":1389802891,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareTop(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareDocToValue(int,Double).mjava","sourceNew":"    @Override\n    public int compareTop(int doc) {\n      double docValue = currentReaderValues.get(doc);\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      return Double.compare(topValue, docValue);\n    }\n\n","sourceOld":"    @Override\n    public int compareDocToValue(int doc, Double valueObj) {\n      final double value = valueObj.doubleValue();\n      double docValue = currentReaderValues.get(doc);\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      return Double.compare(docValue, value);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareTop(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.DoubleComparator#compareDocToValue(int,Double).mjava","sourceNew":"    @Override\n    public int compareTop(int doc) {\n      double docValue = currentReaderValues.get(doc);\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      return Double.compare(topValue, docValue);\n    }\n\n","sourceOld":"    @Override\n    public int compareDocToValue(int doc, Double valueObj) {\n      final double value = valueObj.doubleValue();\n      double docValue = currentReaderValues.get(doc);\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      return Double.compare(docValue, value);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"47da30f6e362ae055711fad41cdcba60b9dee8c6":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","f45457a742a53533c348c4b990b1c579ff364467"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["47da30f6e362ae055711fad41cdcba60b9dee8c6","7615b855702e008d91a95a2578bf05d27372f599"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7615b855702e008d91a95a2578bf05d27372f599":["47da30f6e362ae055711fad41cdcba60b9dee8c6"],"f45457a742a53533c348c4b990b1c579ff364467":["fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"ef0d8a69209261514c5739c770bba706c2308450":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27ab7b234eab0cbc020836989b96ed430e1065bb"]},"commit2Childs":{"47da30f6e362ae055711fad41cdcba60b9dee8c6":["27ab7b234eab0cbc020836989b96ed430e1065bb","7615b855702e008d91a95a2578bf05d27372f599"],"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["d4d69c535930b5cce125cff868d40f6373dc27d4","f45457a742a53533c348c4b990b1c579ff364467","ef0d8a69209261514c5739c770bba706c2308450"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["47da30f6e362ae055711fad41cdcba60b9dee8c6"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","ef0d8a69209261514c5739c770bba706c2308450"],"7615b855702e008d91a95a2578bf05d27372f599":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"f45457a742a53533c348c4b990b1c579ff364467":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}