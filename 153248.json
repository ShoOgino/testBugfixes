{"path":"solr/core/src/test/org/apache/solr/search/TestSort#testRandomFieldNameSorts().mjava","commits":[{"id":"a66bd69cd26cbc71647b0971089f240b2ea82edc","date":1312150123,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSort#testRandomFieldNameSorts().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomFieldNameSorts() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n\n    final int iters = atLeast(5000);\n    int numberOfOddities = 0;\n\n    for (int i = 0; i < iters; i++) {\n      final StringBuilder input = new StringBuilder();\n      final String[] names = new String[_TestUtil.nextInt(r,1,10)];\n      final boolean[] reverse = new boolean[names.length];\n      for (int j = 0; j < names.length; j++) {\n        names[j] = _TestUtil.randomRealisticUnicodeString(r, 1, 20);\n\n        // reduce the likelyhood that the random str is a valid query or func \n        names[j] = names[j].replaceFirst(\"\\\\{\",\"\\\\{\\\\{\");\n        names[j] = names[j].replaceFirst(\"\\\\(\",\"\\\\(\\\\(\");\n        names[j] = names[j].replaceFirst(\"(\\\\\\\"|\\\\')\",\"$1$1\");\n        names[j] = names[j].replaceFirst(\"(\\\\d)\",\"$1x\");\n\n        // eliminate pesky problem chars\n        names[j] = names[j].replaceAll(\"\\\\p{Cntrl}|\\\\p{javaWhitespace}\",\"\");\n\n        if (0 == names[j].length()) {\n          numberOfOddities++;\n          // screw it, i'm taking my toys and going home\n          names[j] = \"last_ditch_i_give_up\";\n        }\n        reverse[j] = r.nextBoolean();\n\n        input.append(r.nextBoolean() ? \" \" : \"\");\n        input.append(names[j]);\n        input.append(\" \");\n        input.append(reverse[j] ? \"desc,\" : \"asc,\");\n      }\n      input.deleteCharAt(input.length()-1);\n      SortField[] sorts = null;\n      try {\n        sorts = QueryParsing.parseSort(input.toString(), req).getSort();\n      } catch (RuntimeException e) {\n        throw new RuntimeException(\"Failed to parse sort: \" + input, e);\n      }\n      assertEquals(\"parsed sorts had unexpected size\", \n                   names.length, sorts.length);\n      for (int j = 0; j < names.length; j++) {\n        assertEquals(\"sorts[\"+j+\"] had unexpected reverse: \" + input,\n                     reverse[j], sorts[j].getReverse());\n\n        final Type type = sorts[j].getType();\n\n        if (Type.SCORE.equals(type)) {\n          numberOfOddities++;\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type score : \" + input,\n                       \"score\", names[j]);\n        } else if (Type.DOC.equals(type)) {\n          numberOfOddities++;\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type doc : \" + input,\n                       \"_docid_\", names[j]);\n        } else if (Type.CUSTOM.equals(type) || Type.REWRITEABLE.equals(type)) {\n          numberOfOddities++;\n\n          // our orig string better be parsable as a func/query\n          QParser qp = \n            QParser.getParser(names[j], FunctionQParserPlugin.NAME, req);\n          try { \n            Query q = qp.getQuery();\n            assertNotNull(\"sorts[\"+j+\"] had type \" + type + \n                          \" but parsed to null func/query: \" + input, q);\n          } catch (Exception e) {\n            assertNull(\"sorts[\"+j+\"] had type \" + type + \n                       \" but errored parsing as func/query: \" + input, e);\n          }\n        } else {\n          assertEquals(\"sorts[\"+j+\"] had unexpected field: \" + input,\n                       names[j], sorts[j].getField());\n        }\n      }\n    }\n\n    assertTrue(\"Over 0.2% oddities in test: \" +\n               numberOfOddities + \"/\" + iters +\n               \" have func/query parsing semenatics gotten broader?\",\n               numberOfOddities < 0.002 * iters);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7b8bacf32ab8691507c9b77f4cebc75c7e055d30"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b8bacf32ab8691507c9b77f4cebc75c7e055d30","date":1339725638,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSort#testRandomFieldNameSorts().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSort#testRandomFieldNameSorts().mjava","sourceNew":"  public void testRandomFieldNameSorts() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n\n    final int iters = atLeast(5000);\n\n    // infinite loop abort when trying to generate a non-blank sort \"name\"\n    final int nonBlankAttempts = 37;\n\n    for (int i = 0; i < iters; i++) {\n      final StringBuilder input = new StringBuilder();\n      final String[] names = new String[_TestUtil.nextInt(r,1,10)];\n      final boolean[] reverse = new boolean[names.length];\n      for (int j = 0; j < names.length; j++) {\n        names[j] = null;\n        for (int k = 0; k < nonBlankAttempts && null == names[j]; k++) {\n          names[j] = _TestUtil.randomRealisticUnicodeString(r, 1, 100);\n\n          // munge anything that might make this a function\n          names[j] = names[j].replaceFirst(\"\\\\{\",\"\\\\{\\\\{\");\n          names[j] = names[j].replaceFirst(\"\\\\(\",\"\\\\(\\\\(\");\n          names[j] = names[j].replaceFirst(\"(\\\\\\\"|\\\\')\",\"$1$1z\");\n          names[j] = names[j].replaceFirst(\"(\\\\d)\",\"$1x\");\n\n          // eliminate pesky problem chars\n          names[j] = names[j].replaceAll(\"\\\\p{Cntrl}|\\\\p{javaWhitespace}\",\"\");\n          \n          if (0 == names[j].length()) {\n            names[j] = null;\n          }\n        }\n        // with luck this bad, never go to vegas\n        // alternatively: if (null == names[j]) names[j] = \"never_go_to_vegas\";\n        assertNotNull(\"Unable to generate a (non-blank) names[\"+j+\"] after \"\n                      + nonBlankAttempts + \" attempts\", names[j]);\n\n        reverse[j] = r.nextBoolean();\n\n        input.append(r.nextBoolean() ? \" \" : \"\");\n        input.append(names[j]);\n        input.append(\" \");\n        input.append(reverse[j] ? \"desc,\" : \"asc,\");\n      }\n      input.deleteCharAt(input.length()-1);\n      SortField[] sorts = null;\n      try {\n        sorts = QueryParsing.parseSort(input.toString(), req).getSort();\n      } catch (RuntimeException e) {\n        throw new RuntimeException(\"Failed to parse sort: \" + input, e);\n      }\n      assertEquals(\"parsed sorts had unexpected size\", \n                   names.length, sorts.length);\n      for (int j = 0; j < names.length; j++) {\n        assertEquals(\"sorts[\"+j+\"] had unexpected reverse: \" + input,\n                     reverse[j], sorts[j].getReverse());\n\n        final Type type = sorts[j].getType();\n\n        if (Type.SCORE.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type score : \" + input,\n                       \"score\", names[j]);\n        } else if (Type.DOC.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type doc : \" + input,\n                       \"_docid_\", names[j]);\n        } else if (Type.CUSTOM.equals(type) || Type.REWRITEABLE.equals(type)) {\n\n          fail(\"sorts[\"+j+\"] resulted in a '\" + type.toString()\n               + \"', either sort parsing code is broken, or func/query \" \n               + \"semantics have gotten broader and munging in this test \"\n               + \"needs improved: \" + input);\n\n        } else {\n          assertEquals(\"sorts[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected field in: \" + input,\n                       names[j], sorts[j].getField());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomFieldNameSorts() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n\n    final int iters = atLeast(5000);\n    int numberOfOddities = 0;\n\n    for (int i = 0; i < iters; i++) {\n      final StringBuilder input = new StringBuilder();\n      final String[] names = new String[_TestUtil.nextInt(r,1,10)];\n      final boolean[] reverse = new boolean[names.length];\n      for (int j = 0; j < names.length; j++) {\n        names[j] = _TestUtil.randomRealisticUnicodeString(r, 1, 20);\n\n        // reduce the likelyhood that the random str is a valid query or func \n        names[j] = names[j].replaceFirst(\"\\\\{\",\"\\\\{\\\\{\");\n        names[j] = names[j].replaceFirst(\"\\\\(\",\"\\\\(\\\\(\");\n        names[j] = names[j].replaceFirst(\"(\\\\\\\"|\\\\')\",\"$1$1\");\n        names[j] = names[j].replaceFirst(\"(\\\\d)\",\"$1x\");\n\n        // eliminate pesky problem chars\n        names[j] = names[j].replaceAll(\"\\\\p{Cntrl}|\\\\p{javaWhitespace}\",\"\");\n\n        if (0 == names[j].length()) {\n          numberOfOddities++;\n          // screw it, i'm taking my toys and going home\n          names[j] = \"last_ditch_i_give_up\";\n        }\n        reverse[j] = r.nextBoolean();\n\n        input.append(r.nextBoolean() ? \" \" : \"\");\n        input.append(names[j]);\n        input.append(\" \");\n        input.append(reverse[j] ? \"desc,\" : \"asc,\");\n      }\n      input.deleteCharAt(input.length()-1);\n      SortField[] sorts = null;\n      try {\n        sorts = QueryParsing.parseSort(input.toString(), req).getSort();\n      } catch (RuntimeException e) {\n        throw new RuntimeException(\"Failed to parse sort: \" + input, e);\n      }\n      assertEquals(\"parsed sorts had unexpected size\", \n                   names.length, sorts.length);\n      for (int j = 0; j < names.length; j++) {\n        assertEquals(\"sorts[\"+j+\"] had unexpected reverse: \" + input,\n                     reverse[j], sorts[j].getReverse());\n\n        final Type type = sorts[j].getType();\n\n        if (Type.SCORE.equals(type)) {\n          numberOfOddities++;\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type score : \" + input,\n                       \"score\", names[j]);\n        } else if (Type.DOC.equals(type)) {\n          numberOfOddities++;\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type doc : \" + input,\n                       \"_docid_\", names[j]);\n        } else if (Type.CUSTOM.equals(type) || Type.REWRITEABLE.equals(type)) {\n          numberOfOddities++;\n\n          // our orig string better be parsable as a func/query\n          QParser qp = \n            QParser.getParser(names[j], FunctionQParserPlugin.NAME, req);\n          try { \n            Query q = qp.getQuery();\n            assertNotNull(\"sorts[\"+j+\"] had type \" + type + \n                          \" but parsed to null func/query: \" + input, q);\n          } catch (Exception e) {\n            assertNull(\"sorts[\"+j+\"] had type \" + type + \n                       \" but errored parsing as func/query: \" + input, e);\n          }\n        } else {\n          assertEquals(\"sorts[\"+j+\"] had unexpected field: \" + input,\n                       names[j], sorts[j].getField());\n        }\n      }\n    }\n\n    assertTrue(\"Over 0.2% oddities in test: \" +\n               numberOfOddities + \"/\" + iters +\n               \" have func/query parsing semenatics gotten broader?\",\n               numberOfOddities < 0.002 * iters);\n  }\n\n","bugFix":["a66bd69cd26cbc71647b0971089f240b2ea82edc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSort#testRandomFieldNameSorts().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSort#testRandomFieldNameSorts().mjava","sourceNew":"  public void testRandomFieldNameSorts() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n\n    final int iters = atLeast(5000);\n\n    // infinite loop abort when trying to generate a non-blank sort \"name\"\n    final int nonBlankAttempts = 37;\n\n    for (int i = 0; i < iters; i++) {\n      final StringBuilder input = new StringBuilder();\n      final String[] names = new String[_TestUtil.nextInt(r,1,10)];\n      final boolean[] reverse = new boolean[names.length];\n      for (int j = 0; j < names.length; j++) {\n        names[j] = null;\n        for (int k = 0; k < nonBlankAttempts && null == names[j]; k++) {\n          names[j] = _TestUtil.randomRealisticUnicodeString(r, 1, 100);\n\n          // munge anything that might make this a function\n          names[j] = names[j].replaceFirst(\"\\\\{\",\"\\\\{\\\\{\");\n          names[j] = names[j].replaceFirst(\"\\\\(\",\"\\\\(\\\\(\");\n          names[j] = names[j].replaceFirst(\"(\\\\\\\"|\\\\')\",\"$1$1z\");\n          names[j] = names[j].replaceFirst(\"(\\\\d)\",\"$1x\");\n\n          // eliminate pesky problem chars\n          names[j] = names[j].replaceAll(\"\\\\p{Cntrl}|\\\\p{javaWhitespace}\",\"\");\n          \n          if (0 == names[j].length()) {\n            names[j] = null;\n          }\n        }\n        // with luck this bad, never go to vegas\n        // alternatively: if (null == names[j]) names[j] = \"never_go_to_vegas\";\n        assertNotNull(\"Unable to generate a (non-blank) names[\"+j+\"] after \"\n                      + nonBlankAttempts + \" attempts\", names[j]);\n\n        reverse[j] = r.nextBoolean();\n\n        input.append(r.nextBoolean() ? \" \" : \"\");\n        input.append(names[j]);\n        input.append(\" \");\n        input.append(reverse[j] ? \"desc,\" : \"asc,\");\n      }\n      input.deleteCharAt(input.length()-1);\n      SortField[] sorts = null;\n      try {\n        sorts = QueryParsing.parseSort(input.toString(), req).getSort();\n      } catch (RuntimeException e) {\n        throw new RuntimeException(\"Failed to parse sort: \" + input, e);\n      }\n      assertEquals(\"parsed sorts had unexpected size\", \n                   names.length, sorts.length);\n      for (int j = 0; j < names.length; j++) {\n        assertEquals(\"sorts[\"+j+\"] had unexpected reverse: \" + input,\n                     reverse[j], sorts[j].getReverse());\n\n        final Type type = sorts[j].getType();\n\n        if (Type.SCORE.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type score : \" + input,\n                       \"score\", names[j]);\n        } else if (Type.DOC.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type doc : \" + input,\n                       \"_docid_\", names[j]);\n        } else if (Type.CUSTOM.equals(type) || Type.REWRITEABLE.equals(type)) {\n\n          fail(\"sorts[\"+j+\"] resulted in a '\" + type.toString()\n               + \"', either sort parsing code is broken, or func/query \" \n               + \"semantics have gotten broader and munging in this test \"\n               + \"needs improved: \" + input);\n\n        } else {\n          assertEquals(\"sorts[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected field in: \" + input,\n                       names[j], sorts[j].getField());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomFieldNameSorts() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n\n    final int iters = atLeast(5000);\n\n    // infinite loop abort when trying to generate a non-blank sort \"name\"\n    final int nonBlankAttempts = 37;\n\n    for (int i = 0; i < iters; i++) {\n      final StringBuilder input = new StringBuilder();\n      final String[] names = new String[_TestUtil.nextInt(r,1,10)];\n      final boolean[] reverse = new boolean[names.length];\n      for (int j = 0; j < names.length; j++) {\n        names[j] = null;\n        for (int k = 0; k < nonBlankAttempts && null == names[j]; k++) {\n          names[j] = _TestUtil.randomRealisticUnicodeString(r, 1, 100);\n\n          // munge anything that might make this a function\n          names[j] = names[j].replaceFirst(\"\\\\{\",\"\\\\{\\\\{\");\n          names[j] = names[j].replaceFirst(\"\\\\(\",\"\\\\(\\\\(\");\n          names[j] = names[j].replaceFirst(\"(\\\\\\\"|\\\\')\",\"$1$1z\");\n          names[j] = names[j].replaceFirst(\"(\\\\d)\",\"$1x\");\n\n          // eliminate pesky problem chars\n          names[j] = names[j].replaceAll(\"\\\\p{Cntrl}|\\\\p{javaWhitespace}\",\"\");\n          \n          if (0 == names[j].length()) {\n            names[j] = null;\n          }\n        }\n        // with luck this bad, never go to vegas\n        // alternatively: if (null == names[j]) names[j] = \"never_go_to_vegas\";\n        assertNotNull(\"Unable to generate a (non-blank) names[\"+j+\"] after \"\n                      + nonBlankAttempts + \" attempts\", names[j]);\n\n        reverse[j] = r.nextBoolean();\n\n        input.append(r.nextBoolean() ? \" \" : \"\");\n        input.append(names[j]);\n        input.append(\" \");\n        input.append(reverse[j] ? \"desc,\" : \"asc,\");\n      }\n      input.deleteCharAt(input.length()-1);\n      SortField[] sorts = null;\n      try {\n        sorts = QueryParsing.parseSort(input.toString(), req).getSort();\n      } catch (RuntimeException e) {\n        throw new RuntimeException(\"Failed to parse sort: \" + input, e);\n      }\n      assertEquals(\"parsed sorts had unexpected size\", \n                   names.length, sorts.length);\n      for (int j = 0; j < names.length; j++) {\n        assertEquals(\"sorts[\"+j+\"] had unexpected reverse: \" + input,\n                     reverse[j], sorts[j].getReverse());\n\n        final Type type = sorts[j].getType();\n\n        if (Type.SCORE.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type score : \" + input,\n                       \"score\", names[j]);\n        } else if (Type.DOC.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type doc : \" + input,\n                       \"_docid_\", names[j]);\n        } else if (Type.CUSTOM.equals(type) || Type.REWRITEABLE.equals(type)) {\n\n          fail(\"sorts[\"+j+\"] resulted in a '\" + type.toString()\n               + \"', either sort parsing code is broken, or func/query \" \n               + \"semantics have gotten broader and munging in this test \"\n               + \"needs improved: \" + input);\n\n        } else {\n          assertEquals(\"sorts[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected field in: \" + input,\n                       names[j], sorts[j].getField());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSort#testRandomFieldNameSorts().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSort#testRandomFieldNameSorts().mjava","sourceNew":"  public void testRandomFieldNameSorts() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n\n    final int iters = atLeast(5000);\n\n    // infinite loop abort when trying to generate a non-blank sort \"name\"\n    final int nonBlankAttempts = 37;\n\n    for (int i = 0; i < iters; i++) {\n      final StringBuilder input = new StringBuilder();\n      final String[] names = new String[_TestUtil.nextInt(r,1,10)];\n      final boolean[] reverse = new boolean[names.length];\n      for (int j = 0; j < names.length; j++) {\n        names[j] = null;\n        for (int k = 0; k < nonBlankAttempts && null == names[j]; k++) {\n          names[j] = _TestUtil.randomRealisticUnicodeString(r, 1, 100);\n\n          // munge anything that might make this a function\n          names[j] = names[j].replaceFirst(\"\\\\{\",\"\\\\{\\\\{\");\n          names[j] = names[j].replaceFirst(\"\\\\(\",\"\\\\(\\\\(\");\n          names[j] = names[j].replaceFirst(\"(\\\\\\\"|\\\\')\",\"$1$1z\");\n          names[j] = names[j].replaceFirst(\"(\\\\d)\",\"$1x\");\n\n          // eliminate pesky problem chars\n          names[j] = names[j].replaceAll(\"\\\\p{Cntrl}|\\\\p{javaWhitespace}\",\"\");\n          \n          if (0 == names[j].length()) {\n            names[j] = null;\n          }\n        }\n        // with luck this bad, never go to vegas\n        // alternatively: if (null == names[j]) names[j] = \"never_go_to_vegas\";\n        assertNotNull(\"Unable to generate a (non-blank) names[\"+j+\"] after \"\n                      + nonBlankAttempts + \" attempts\", names[j]);\n\n        reverse[j] = r.nextBoolean();\n\n        input.append(r.nextBoolean() ? \" \" : \"\");\n        input.append(names[j]);\n        input.append(\" \");\n        input.append(reverse[j] ? \"desc,\" : \"asc,\");\n      }\n      input.deleteCharAt(input.length()-1);\n      SortField[] sorts = null;\n      try {\n        sorts = QueryParsing.parseSort(input.toString(), req).getSort();\n      } catch (RuntimeException e) {\n        throw new RuntimeException(\"Failed to parse sort: \" + input, e);\n      }\n      assertEquals(\"parsed sorts had unexpected size\", \n                   names.length, sorts.length);\n      for (int j = 0; j < names.length; j++) {\n        assertEquals(\"sorts[\"+j+\"] had unexpected reverse: \" + input,\n                     reverse[j], sorts[j].getReverse());\n\n        final Type type = sorts[j].getType();\n\n        if (Type.SCORE.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type score : \" + input,\n                       \"score\", names[j]);\n        } else if (Type.DOC.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type doc : \" + input,\n                       \"_docid_\", names[j]);\n        } else if (Type.CUSTOM.equals(type) || Type.REWRITEABLE.equals(type)) {\n\n          fail(\"sorts[\"+j+\"] resulted in a '\" + type.toString()\n               + \"', either sort parsing code is broken, or func/query \" \n               + \"semantics have gotten broader and munging in this test \"\n               + \"needs improved: \" + input);\n\n        } else {\n          assertEquals(\"sorts[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected field in: \" + input,\n                       names[j], sorts[j].getField());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomFieldNameSorts() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n\n    final int iters = atLeast(5000);\n\n    // infinite loop abort when trying to generate a non-blank sort \"name\"\n    final int nonBlankAttempts = 37;\n\n    for (int i = 0; i < iters; i++) {\n      final StringBuilder input = new StringBuilder();\n      final String[] names = new String[_TestUtil.nextInt(r,1,10)];\n      final boolean[] reverse = new boolean[names.length];\n      for (int j = 0; j < names.length; j++) {\n        names[j] = null;\n        for (int k = 0; k < nonBlankAttempts && null == names[j]; k++) {\n          names[j] = _TestUtil.randomRealisticUnicodeString(r, 1, 100);\n\n          // munge anything that might make this a function\n          names[j] = names[j].replaceFirst(\"\\\\{\",\"\\\\{\\\\{\");\n          names[j] = names[j].replaceFirst(\"\\\\(\",\"\\\\(\\\\(\");\n          names[j] = names[j].replaceFirst(\"(\\\\\\\"|\\\\')\",\"$1$1z\");\n          names[j] = names[j].replaceFirst(\"(\\\\d)\",\"$1x\");\n\n          // eliminate pesky problem chars\n          names[j] = names[j].replaceAll(\"\\\\p{Cntrl}|\\\\p{javaWhitespace}\",\"\");\n          \n          if (0 == names[j].length()) {\n            names[j] = null;\n          }\n        }\n        // with luck this bad, never go to vegas\n        // alternatively: if (null == names[j]) names[j] = \"never_go_to_vegas\";\n        assertNotNull(\"Unable to generate a (non-blank) names[\"+j+\"] after \"\n                      + nonBlankAttempts + \" attempts\", names[j]);\n\n        reverse[j] = r.nextBoolean();\n\n        input.append(r.nextBoolean() ? \" \" : \"\");\n        input.append(names[j]);\n        input.append(\" \");\n        input.append(reverse[j] ? \"desc,\" : \"asc,\");\n      }\n      input.deleteCharAt(input.length()-1);\n      SortField[] sorts = null;\n      try {\n        sorts = QueryParsing.parseSort(input.toString(), req).getSort();\n      } catch (RuntimeException e) {\n        throw new RuntimeException(\"Failed to parse sort: \" + input, e);\n      }\n      assertEquals(\"parsed sorts had unexpected size\", \n                   names.length, sorts.length);\n      for (int j = 0; j < names.length; j++) {\n        assertEquals(\"sorts[\"+j+\"] had unexpected reverse: \" + input,\n                     reverse[j], sorts[j].getReverse());\n\n        final Type type = sorts[j].getType();\n\n        if (Type.SCORE.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type score : \" + input,\n                       \"score\", names[j]);\n        } else if (Type.DOC.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type doc : \" + input,\n                       \"_docid_\", names[j]);\n        } else if (Type.CUSTOM.equals(type) || Type.REWRITEABLE.equals(type)) {\n\n          fail(\"sorts[\"+j+\"] resulted in a '\" + type.toString()\n               + \"', either sort parsing code is broken, or func/query \" \n               + \"semantics have gotten broader and munging in this test \"\n               + \"needs improved: \" + input);\n\n        } else {\n          assertEquals(\"sorts[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected field in: \" + input,\n                       names[j], sorts[j].getField());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02453e8d9fe1bde22dc7676145ad809cb1dbfcad","date":1386084179,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSort#testRandomFieldNameSorts().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSort#testRandomFieldNameSorts().mjava","sourceNew":"  public void testRandomFieldNameSorts() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n\n    final int iters = atLeast(5000);\n\n    // infinite loop abort when trying to generate a non-blank sort \"name\"\n    final int nonBlankAttempts = 37;\n\n    for (int i = 0; i < iters; i++) {\n      final StringBuilder input = new StringBuilder();\n      final String[] names = new String[_TestUtil.nextInt(r,1,10)];\n      final boolean[] reverse = new boolean[names.length];\n      for (int j = 0; j < names.length; j++) {\n        names[j] = null;\n        for (int k = 0; k < nonBlankAttempts && null == names[j]; k++) {\n          names[j] = _TestUtil.randomRealisticUnicodeString(r, 1, 100);\n\n          // munge anything that might make this a function\n          names[j] = names[j].replaceFirst(\"\\\\{\",\"\\\\{\\\\{\");\n          names[j] = names[j].replaceFirst(\"\\\\(\",\"\\\\(\\\\(\");\n          names[j] = names[j].replaceFirst(\"(\\\\\\\"|\\\\')\",\"$1$1z\");\n          names[j] = names[j].replaceFirst(\"(\\\\d)\",\"$1x\");\n\n          // eliminate pesky problem chars\n          names[j] = names[j].replaceAll(\"\\\\p{Cntrl}|\\\\p{javaWhitespace}\",\"\");\n          \n          if (0 == names[j].length()) {\n            names[j] = null;\n          }\n        }\n        // with luck this bad, never go to vegas\n        // alternatively: if (null == names[j]) names[j] = \"never_go_to_vegas\";\n        assertNotNull(\"Unable to generate a (non-blank) names[\"+j+\"] after \"\n                      + nonBlankAttempts + \" attempts\", names[j]);\n\n        reverse[j] = r.nextBoolean();\n\n        input.append(r.nextBoolean() ? \" \" : \"\");\n        input.append(names[j]);\n        input.append(\" \");\n        input.append(reverse[j] ? \"desc,\" : \"asc,\");\n      }\n      input.deleteCharAt(input.length()-1);\n      SortField[] sorts = null;\n      List<SchemaField> fields = null;\n      try {\n        SortSpec spec = QueryParsing.parseSortSpec(input.toString(), req);\n        sorts = spec.getSort().getSort();\n        fields = spec.getSchemaFields();\n      } catch (RuntimeException e) {\n        throw new RuntimeException(\"Failed to parse sort: \" + input, e);\n      }\n      assertEquals(\"parsed sorts had unexpected size\", \n                   names.length, sorts.length);\n      assertEquals(\"parsed sort schema fields had unexpected size\", \n                   names.length, fields.size());\n      for (int j = 0; j < names.length; j++) {\n        assertEquals(\"sorts[\"+j+\"] had unexpected reverse: \" + input,\n                     reverse[j], sorts[j].getReverse());\n\n        final Type type = sorts[j].getType();\n\n        if (Type.SCORE.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type score : \" + input,\n                       \"score\", names[j]);\n        } else if (Type.DOC.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type doc : \" + input,\n                       \"_docid_\", names[j]);\n        } else if (Type.CUSTOM.equals(type) || Type.REWRITEABLE.equals(type)) {\n\n          fail(\"sorts[\"+j+\"] resulted in a '\" + type.toString()\n               + \"', either sort parsing code is broken, or func/query \" \n               + \"semantics have gotten broader and munging in this test \"\n               + \"needs improved: \" + input);\n\n        } else {\n          assertEquals(\"sorts[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected field in: \" + input,\n                       names[j], sorts[j].getField());\n          assertEquals(\"fields[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected name in: \" + input,\n                       names[j], fields.get(j).getName());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomFieldNameSorts() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n\n    final int iters = atLeast(5000);\n\n    // infinite loop abort when trying to generate a non-blank sort \"name\"\n    final int nonBlankAttempts = 37;\n\n    for (int i = 0; i < iters; i++) {\n      final StringBuilder input = new StringBuilder();\n      final String[] names = new String[_TestUtil.nextInt(r,1,10)];\n      final boolean[] reverse = new boolean[names.length];\n      for (int j = 0; j < names.length; j++) {\n        names[j] = null;\n        for (int k = 0; k < nonBlankAttempts && null == names[j]; k++) {\n          names[j] = _TestUtil.randomRealisticUnicodeString(r, 1, 100);\n\n          // munge anything that might make this a function\n          names[j] = names[j].replaceFirst(\"\\\\{\",\"\\\\{\\\\{\");\n          names[j] = names[j].replaceFirst(\"\\\\(\",\"\\\\(\\\\(\");\n          names[j] = names[j].replaceFirst(\"(\\\\\\\"|\\\\')\",\"$1$1z\");\n          names[j] = names[j].replaceFirst(\"(\\\\d)\",\"$1x\");\n\n          // eliminate pesky problem chars\n          names[j] = names[j].replaceAll(\"\\\\p{Cntrl}|\\\\p{javaWhitespace}\",\"\");\n          \n          if (0 == names[j].length()) {\n            names[j] = null;\n          }\n        }\n        // with luck this bad, never go to vegas\n        // alternatively: if (null == names[j]) names[j] = \"never_go_to_vegas\";\n        assertNotNull(\"Unable to generate a (non-blank) names[\"+j+\"] after \"\n                      + nonBlankAttempts + \" attempts\", names[j]);\n\n        reverse[j] = r.nextBoolean();\n\n        input.append(r.nextBoolean() ? \" \" : \"\");\n        input.append(names[j]);\n        input.append(\" \");\n        input.append(reverse[j] ? \"desc,\" : \"asc,\");\n      }\n      input.deleteCharAt(input.length()-1);\n      SortField[] sorts = null;\n      try {\n        sorts = QueryParsing.parseSort(input.toString(), req).getSort();\n      } catch (RuntimeException e) {\n        throw new RuntimeException(\"Failed to parse sort: \" + input, e);\n      }\n      assertEquals(\"parsed sorts had unexpected size\", \n                   names.length, sorts.length);\n      for (int j = 0; j < names.length; j++) {\n        assertEquals(\"sorts[\"+j+\"] had unexpected reverse: \" + input,\n                     reverse[j], sorts[j].getReverse());\n\n        final Type type = sorts[j].getType();\n\n        if (Type.SCORE.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type score : \" + input,\n                       \"score\", names[j]);\n        } else if (Type.DOC.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type doc : \" + input,\n                       \"_docid_\", names[j]);\n        } else if (Type.CUSTOM.equals(type) || Type.REWRITEABLE.equals(type)) {\n\n          fail(\"sorts[\"+j+\"] resulted in a '\" + type.toString()\n               + \"', either sort parsing code is broken, or func/query \" \n               + \"semantics have gotten broader and munging in this test \"\n               + \"needs improved: \" + input);\n\n        } else {\n          assertEquals(\"sorts[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected field in: \" + input,\n                       names[j], sorts[j].getField());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSort#testRandomFieldNameSorts().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSort#testRandomFieldNameSorts().mjava","sourceNew":"  public void testRandomFieldNameSorts() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n\n    final int iters = atLeast(5000);\n\n    // infinite loop abort when trying to generate a non-blank sort \"name\"\n    final int nonBlankAttempts = 37;\n\n    for (int i = 0; i < iters; i++) {\n      final StringBuilder input = new StringBuilder();\n      final String[] names = new String[_TestUtil.nextInt(r,1,10)];\n      final boolean[] reverse = new boolean[names.length];\n      for (int j = 0; j < names.length; j++) {\n        names[j] = null;\n        for (int k = 0; k < nonBlankAttempts && null == names[j]; k++) {\n          names[j] = _TestUtil.randomRealisticUnicodeString(r, 1, 100);\n\n          // munge anything that might make this a function\n          names[j] = names[j].replaceFirst(\"\\\\{\",\"\\\\{\\\\{\");\n          names[j] = names[j].replaceFirst(\"\\\\(\",\"\\\\(\\\\(\");\n          names[j] = names[j].replaceFirst(\"(\\\\\\\"|\\\\')\",\"$1$1z\");\n          names[j] = names[j].replaceFirst(\"(\\\\d)\",\"$1x\");\n\n          // eliminate pesky problem chars\n          names[j] = names[j].replaceAll(\"\\\\p{Cntrl}|\\\\p{javaWhitespace}\",\"\");\n          \n          if (0 == names[j].length()) {\n            names[j] = null;\n          }\n        }\n        // with luck this bad, never go to vegas\n        // alternatively: if (null == names[j]) names[j] = \"never_go_to_vegas\";\n        assertNotNull(\"Unable to generate a (non-blank) names[\"+j+\"] after \"\n                      + nonBlankAttempts + \" attempts\", names[j]);\n\n        reverse[j] = r.nextBoolean();\n\n        input.append(r.nextBoolean() ? \" \" : \"\");\n        input.append(names[j]);\n        input.append(\" \");\n        input.append(reverse[j] ? \"desc,\" : \"asc,\");\n      }\n      input.deleteCharAt(input.length()-1);\n      SortField[] sorts = null;\n      List<SchemaField> fields = null;\n      try {\n        SortSpec spec = QueryParsing.parseSortSpec(input.toString(), req);\n        sorts = spec.getSort().getSort();\n        fields = spec.getSchemaFields();\n      } catch (RuntimeException e) {\n        throw new RuntimeException(\"Failed to parse sort: \" + input, e);\n      }\n      assertEquals(\"parsed sorts had unexpected size\", \n                   names.length, sorts.length);\n      assertEquals(\"parsed sort schema fields had unexpected size\", \n                   names.length, fields.size());\n      for (int j = 0; j < names.length; j++) {\n        assertEquals(\"sorts[\"+j+\"] had unexpected reverse: \" + input,\n                     reverse[j], sorts[j].getReverse());\n\n        final Type type = sorts[j].getType();\n\n        if (Type.SCORE.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type score : \" + input,\n                       \"score\", names[j]);\n        } else if (Type.DOC.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type doc : \" + input,\n                       \"_docid_\", names[j]);\n        } else if (Type.CUSTOM.equals(type) || Type.REWRITEABLE.equals(type)) {\n\n          fail(\"sorts[\"+j+\"] resulted in a '\" + type.toString()\n               + \"', either sort parsing code is broken, or func/query \" \n               + \"semantics have gotten broader and munging in this test \"\n               + \"needs improved: \" + input);\n\n        } else {\n          assertEquals(\"sorts[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected field in: \" + input,\n                       names[j], sorts[j].getField());\n          assertEquals(\"fields[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected name in: \" + input,\n                       names[j], fields.get(j).getName());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomFieldNameSorts() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n\n    final int iters = atLeast(5000);\n\n    // infinite loop abort when trying to generate a non-blank sort \"name\"\n    final int nonBlankAttempts = 37;\n\n    for (int i = 0; i < iters; i++) {\n      final StringBuilder input = new StringBuilder();\n      final String[] names = new String[_TestUtil.nextInt(r,1,10)];\n      final boolean[] reverse = new boolean[names.length];\n      for (int j = 0; j < names.length; j++) {\n        names[j] = null;\n        for (int k = 0; k < nonBlankAttempts && null == names[j]; k++) {\n          names[j] = _TestUtil.randomRealisticUnicodeString(r, 1, 100);\n\n          // munge anything that might make this a function\n          names[j] = names[j].replaceFirst(\"\\\\{\",\"\\\\{\\\\{\");\n          names[j] = names[j].replaceFirst(\"\\\\(\",\"\\\\(\\\\(\");\n          names[j] = names[j].replaceFirst(\"(\\\\\\\"|\\\\')\",\"$1$1z\");\n          names[j] = names[j].replaceFirst(\"(\\\\d)\",\"$1x\");\n\n          // eliminate pesky problem chars\n          names[j] = names[j].replaceAll(\"\\\\p{Cntrl}|\\\\p{javaWhitespace}\",\"\");\n          \n          if (0 == names[j].length()) {\n            names[j] = null;\n          }\n        }\n        // with luck this bad, never go to vegas\n        // alternatively: if (null == names[j]) names[j] = \"never_go_to_vegas\";\n        assertNotNull(\"Unable to generate a (non-blank) names[\"+j+\"] after \"\n                      + nonBlankAttempts + \" attempts\", names[j]);\n\n        reverse[j] = r.nextBoolean();\n\n        input.append(r.nextBoolean() ? \" \" : \"\");\n        input.append(names[j]);\n        input.append(\" \");\n        input.append(reverse[j] ? \"desc,\" : \"asc,\");\n      }\n      input.deleteCharAt(input.length()-1);\n      SortField[] sorts = null;\n      try {\n        sorts = QueryParsing.parseSort(input.toString(), req).getSort();\n      } catch (RuntimeException e) {\n        throw new RuntimeException(\"Failed to parse sort: \" + input, e);\n      }\n      assertEquals(\"parsed sorts had unexpected size\", \n                   names.length, sorts.length);\n      for (int j = 0; j < names.length; j++) {\n        assertEquals(\"sorts[\"+j+\"] had unexpected reverse: \" + input,\n                     reverse[j], sorts[j].getReverse());\n\n        final Type type = sorts[j].getType();\n\n        if (Type.SCORE.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type score : \" + input,\n                       \"score\", names[j]);\n        } else if (Type.DOC.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type doc : \" + input,\n                       \"_docid_\", names[j]);\n        } else if (Type.CUSTOM.equals(type) || Type.REWRITEABLE.equals(type)) {\n\n          fail(\"sorts[\"+j+\"] resulted in a '\" + type.toString()\n               + \"', either sort parsing code is broken, or func/query \" \n               + \"semantics have gotten broader and munging in this test \"\n               + \"needs improved: \" + input);\n\n        } else {\n          assertEquals(\"sorts[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected field in: \" + input,\n                       names[j], sorts[j].getField());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSort#testRandomFieldNameSorts().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSort#testRandomFieldNameSorts().mjava","sourceNew":"  public void testRandomFieldNameSorts() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n\n    final int iters = atLeast(5000);\n\n    // infinite loop abort when trying to generate a non-blank sort \"name\"\n    final int nonBlankAttempts = 37;\n\n    for (int i = 0; i < iters; i++) {\n      final StringBuilder input = new StringBuilder();\n      final String[] names = new String[TestUtil.nextInt(r, 1, 10)];\n      final boolean[] reverse = new boolean[names.length];\n      for (int j = 0; j < names.length; j++) {\n        names[j] = null;\n        for (int k = 0; k < nonBlankAttempts && null == names[j]; k++) {\n          names[j] = TestUtil.randomRealisticUnicodeString(r, 1, 100);\n\n          // munge anything that might make this a function\n          names[j] = names[j].replaceFirst(\"\\\\{\",\"\\\\{\\\\{\");\n          names[j] = names[j].replaceFirst(\"\\\\(\",\"\\\\(\\\\(\");\n          names[j] = names[j].replaceFirst(\"(\\\\\\\"|\\\\')\",\"$1$1z\");\n          names[j] = names[j].replaceFirst(\"(\\\\d)\",\"$1x\");\n\n          // eliminate pesky problem chars\n          names[j] = names[j].replaceAll(\"\\\\p{Cntrl}|\\\\p{javaWhitespace}\",\"\");\n          \n          if (0 == names[j].length()) {\n            names[j] = null;\n          }\n        }\n        // with luck this bad, never go to vegas\n        // alternatively: if (null == names[j]) names[j] = \"never_go_to_vegas\";\n        assertNotNull(\"Unable to generate a (non-blank) names[\"+j+\"] after \"\n                      + nonBlankAttempts + \" attempts\", names[j]);\n\n        reverse[j] = r.nextBoolean();\n\n        input.append(r.nextBoolean() ? \" \" : \"\");\n        input.append(names[j]);\n        input.append(\" \");\n        input.append(reverse[j] ? \"desc,\" : \"asc,\");\n      }\n      input.deleteCharAt(input.length()-1);\n      SortField[] sorts = null;\n      List<SchemaField> fields = null;\n      try {\n        SortSpec spec = QueryParsing.parseSortSpec(input.toString(), req);\n        sorts = spec.getSort().getSort();\n        fields = spec.getSchemaFields();\n      } catch (RuntimeException e) {\n        throw new RuntimeException(\"Failed to parse sort: \" + input, e);\n      }\n      assertEquals(\"parsed sorts had unexpected size\", \n                   names.length, sorts.length);\n      assertEquals(\"parsed sort schema fields had unexpected size\", \n                   names.length, fields.size());\n      for (int j = 0; j < names.length; j++) {\n        assertEquals(\"sorts[\"+j+\"] had unexpected reverse: \" + input,\n                     reverse[j], sorts[j].getReverse());\n\n        final Type type = sorts[j].getType();\n\n        if (Type.SCORE.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type score : \" + input,\n                       \"score\", names[j]);\n        } else if (Type.DOC.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type doc : \" + input,\n                       \"_docid_\", names[j]);\n        } else if (Type.CUSTOM.equals(type) || Type.REWRITEABLE.equals(type)) {\n\n          fail(\"sorts[\"+j+\"] resulted in a '\" + type.toString()\n               + \"', either sort parsing code is broken, or func/query \" \n               + \"semantics have gotten broader and munging in this test \"\n               + \"needs improved: \" + input);\n\n        } else {\n          assertEquals(\"sorts[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected field in: \" + input,\n                       names[j], sorts[j].getField());\n          assertEquals(\"fields[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected name in: \" + input,\n                       names[j], fields.get(j).getName());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomFieldNameSorts() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n\n    final int iters = atLeast(5000);\n\n    // infinite loop abort when trying to generate a non-blank sort \"name\"\n    final int nonBlankAttempts = 37;\n\n    for (int i = 0; i < iters; i++) {\n      final StringBuilder input = new StringBuilder();\n      final String[] names = new String[_TestUtil.nextInt(r,1,10)];\n      final boolean[] reverse = new boolean[names.length];\n      for (int j = 0; j < names.length; j++) {\n        names[j] = null;\n        for (int k = 0; k < nonBlankAttempts && null == names[j]; k++) {\n          names[j] = _TestUtil.randomRealisticUnicodeString(r, 1, 100);\n\n          // munge anything that might make this a function\n          names[j] = names[j].replaceFirst(\"\\\\{\",\"\\\\{\\\\{\");\n          names[j] = names[j].replaceFirst(\"\\\\(\",\"\\\\(\\\\(\");\n          names[j] = names[j].replaceFirst(\"(\\\\\\\"|\\\\')\",\"$1$1z\");\n          names[j] = names[j].replaceFirst(\"(\\\\d)\",\"$1x\");\n\n          // eliminate pesky problem chars\n          names[j] = names[j].replaceAll(\"\\\\p{Cntrl}|\\\\p{javaWhitespace}\",\"\");\n          \n          if (0 == names[j].length()) {\n            names[j] = null;\n          }\n        }\n        // with luck this bad, never go to vegas\n        // alternatively: if (null == names[j]) names[j] = \"never_go_to_vegas\";\n        assertNotNull(\"Unable to generate a (non-blank) names[\"+j+\"] after \"\n                      + nonBlankAttempts + \" attempts\", names[j]);\n\n        reverse[j] = r.nextBoolean();\n\n        input.append(r.nextBoolean() ? \" \" : \"\");\n        input.append(names[j]);\n        input.append(\" \");\n        input.append(reverse[j] ? \"desc,\" : \"asc,\");\n      }\n      input.deleteCharAt(input.length()-1);\n      SortField[] sorts = null;\n      List<SchemaField> fields = null;\n      try {\n        SortSpec spec = QueryParsing.parseSortSpec(input.toString(), req);\n        sorts = spec.getSort().getSort();\n        fields = spec.getSchemaFields();\n      } catch (RuntimeException e) {\n        throw new RuntimeException(\"Failed to parse sort: \" + input, e);\n      }\n      assertEquals(\"parsed sorts had unexpected size\", \n                   names.length, sorts.length);\n      assertEquals(\"parsed sort schema fields had unexpected size\", \n                   names.length, fields.size());\n      for (int j = 0; j < names.length; j++) {\n        assertEquals(\"sorts[\"+j+\"] had unexpected reverse: \" + input,\n                     reverse[j], sorts[j].getReverse());\n\n        final Type type = sorts[j].getType();\n\n        if (Type.SCORE.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type score : \" + input,\n                       \"score\", names[j]);\n        } else if (Type.DOC.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type doc : \" + input,\n                       \"_docid_\", names[j]);\n        } else if (Type.CUSTOM.equals(type) || Type.REWRITEABLE.equals(type)) {\n\n          fail(\"sorts[\"+j+\"] resulted in a '\" + type.toString()\n               + \"', either sort parsing code is broken, or func/query \" \n               + \"semantics have gotten broader and munging in this test \"\n               + \"needs improved: \" + input);\n\n        } else {\n          assertEquals(\"sorts[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected field in: \" + input,\n                       names[j], sorts[j].getField());\n          assertEquals(\"fields[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected name in: \" + input,\n                       names[j], fields.get(j).getName());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c8dc56dbae186505066de8a78986cba31525ef0","date":1447876120,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSort#testRandomFieldNameSorts().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSort#testRandomFieldNameSorts().mjava","sourceNew":"  public void testRandomFieldNameSorts() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n\n    final int iters = atLeast(5000);\n\n    // infinite loop abort when trying to generate a non-blank sort \"name\"\n    final int nonBlankAttempts = 37;\n\n    for (int i = 0; i < iters; i++) {\n      final StringBuilder input = new StringBuilder();\n      final String[] names = new String[TestUtil.nextInt(r, 1, 10)];\n      final boolean[] reverse = new boolean[names.length];\n      for (int j = 0; j < names.length; j++) {\n        names[j] = null;\n        for (int k = 0; k < nonBlankAttempts && null == names[j]; k++) {\n          names[j] = TestUtil.randomRealisticUnicodeString(r, 1, 100);\n\n          // munge anything that might make this a function\n          names[j] = names[j].replaceFirst(\"\\\\{\",\"\\\\{\\\\{\");\n          names[j] = names[j].replaceFirst(\"\\\\(\",\"\\\\(\\\\(\");\n          names[j] = names[j].replaceFirst(\"(\\\\\\\"|\\\\')\",\"$1$1z\");\n          names[j] = names[j].replaceFirst(\"(\\\\d)\",\"$1x\");\n\n          // eliminate pesky problem chars\n          names[j] = names[j].replaceAll(\"\\\\p{Cntrl}|\\\\p{javaWhitespace}\",\"\");\n          \n          if (0 == names[j].length()) {\n            names[j] = null;\n          }\n        }\n        // with luck this bad, never go to vegas\n        // alternatively: if (null == names[j]) names[j] = \"never_go_to_vegas\";\n        assertNotNull(\"Unable to generate a (non-blank) names[\"+j+\"] after \"\n                      + nonBlankAttempts + \" attempts\", names[j]);\n\n        reverse[j] = r.nextBoolean();\n\n        input.append(r.nextBoolean() ? \" \" : \"\");\n        input.append(names[j]);\n        input.append(\" \");\n        input.append(reverse[j] ? \"desc,\" : \"asc,\");\n      }\n      input.deleteCharAt(input.length()-1);\n      SortField[] sorts = null;\n      List<SchemaField> fields = null;\n      try {\n        SortSpec spec = SortSpecParsing.parseSortSpec(input.toString(), req);\n        sorts = spec.getSort().getSort();\n        fields = spec.getSchemaFields();\n      } catch (RuntimeException e) {\n        throw new RuntimeException(\"Failed to parse sort: \" + input, e);\n      }\n      assertEquals(\"parsed sorts had unexpected size\", \n                   names.length, sorts.length);\n      assertEquals(\"parsed sort schema fields had unexpected size\", \n                   names.length, fields.size());\n      for (int j = 0; j < names.length; j++) {\n        assertEquals(\"sorts[\"+j+\"] had unexpected reverse: \" + input,\n                     reverse[j], sorts[j].getReverse());\n\n        final Type type = sorts[j].getType();\n\n        if (Type.SCORE.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type score : \" + input,\n                       \"score\", names[j]);\n        } else if (Type.DOC.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type doc : \" + input,\n                       \"_docid_\", names[j]);\n        } else if (Type.CUSTOM.equals(type) || Type.REWRITEABLE.equals(type)) {\n\n          fail(\"sorts[\"+j+\"] resulted in a '\" + type.toString()\n               + \"', either sort parsing code is broken, or func/query \" \n               + \"semantics have gotten broader and munging in this test \"\n               + \"needs improved: \" + input);\n\n        } else {\n          assertEquals(\"sorts[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected field in: \" + input,\n                       names[j], sorts[j].getField());\n          assertEquals(\"fields[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected name in: \" + input,\n                       names[j], fields.get(j).getName());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomFieldNameSorts() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n\n    final int iters = atLeast(5000);\n\n    // infinite loop abort when trying to generate a non-blank sort \"name\"\n    final int nonBlankAttempts = 37;\n\n    for (int i = 0; i < iters; i++) {\n      final StringBuilder input = new StringBuilder();\n      final String[] names = new String[TestUtil.nextInt(r, 1, 10)];\n      final boolean[] reverse = new boolean[names.length];\n      for (int j = 0; j < names.length; j++) {\n        names[j] = null;\n        for (int k = 0; k < nonBlankAttempts && null == names[j]; k++) {\n          names[j] = TestUtil.randomRealisticUnicodeString(r, 1, 100);\n\n          // munge anything that might make this a function\n          names[j] = names[j].replaceFirst(\"\\\\{\",\"\\\\{\\\\{\");\n          names[j] = names[j].replaceFirst(\"\\\\(\",\"\\\\(\\\\(\");\n          names[j] = names[j].replaceFirst(\"(\\\\\\\"|\\\\')\",\"$1$1z\");\n          names[j] = names[j].replaceFirst(\"(\\\\d)\",\"$1x\");\n\n          // eliminate pesky problem chars\n          names[j] = names[j].replaceAll(\"\\\\p{Cntrl}|\\\\p{javaWhitespace}\",\"\");\n          \n          if (0 == names[j].length()) {\n            names[j] = null;\n          }\n        }\n        // with luck this bad, never go to vegas\n        // alternatively: if (null == names[j]) names[j] = \"never_go_to_vegas\";\n        assertNotNull(\"Unable to generate a (non-blank) names[\"+j+\"] after \"\n                      + nonBlankAttempts + \" attempts\", names[j]);\n\n        reverse[j] = r.nextBoolean();\n\n        input.append(r.nextBoolean() ? \" \" : \"\");\n        input.append(names[j]);\n        input.append(\" \");\n        input.append(reverse[j] ? \"desc,\" : \"asc,\");\n      }\n      input.deleteCharAt(input.length()-1);\n      SortField[] sorts = null;\n      List<SchemaField> fields = null;\n      try {\n        SortSpec spec = QueryParsing.parseSortSpec(input.toString(), req);\n        sorts = spec.getSort().getSort();\n        fields = spec.getSchemaFields();\n      } catch (RuntimeException e) {\n        throw new RuntimeException(\"Failed to parse sort: \" + input, e);\n      }\n      assertEquals(\"parsed sorts had unexpected size\", \n                   names.length, sorts.length);\n      assertEquals(\"parsed sort schema fields had unexpected size\", \n                   names.length, fields.size());\n      for (int j = 0; j < names.length; j++) {\n        assertEquals(\"sorts[\"+j+\"] had unexpected reverse: \" + input,\n                     reverse[j], sorts[j].getReverse());\n\n        final Type type = sorts[j].getType();\n\n        if (Type.SCORE.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type score : \" + input,\n                       \"score\", names[j]);\n        } else if (Type.DOC.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type doc : \" + input,\n                       \"_docid_\", names[j]);\n        } else if (Type.CUSTOM.equals(type) || Type.REWRITEABLE.equals(type)) {\n\n          fail(\"sorts[\"+j+\"] resulted in a '\" + type.toString()\n               + \"', either sort parsing code is broken, or func/query \" \n               + \"semantics have gotten broader and munging in this test \"\n               + \"needs improved: \" + input);\n\n        } else {\n          assertEquals(\"sorts[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected field in: \" + input,\n                       names[j], sorts[j].getField());\n          assertEquals(\"fields[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected name in: \" + input,\n                       names[j], fields.get(j).getName());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"891d9507d39eb3023bc838b326f4de773cc00861","date":1559681397,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSort#testRandomFieldNameSorts().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSort#testRandomFieldNameSorts().mjava","sourceNew":"  public void testRandomFieldNameSorts() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n\n    final int iters = atLeast(5000);\n\n    // infinite loop abort when trying to generate a non-blank sort \"name\"\n    final int nonBlankAttempts = 37;\n\n    for (int i = 0; i < iters; i++) {\n      final StringBuilder input = new StringBuilder();\n      final String[] names = new String[TestUtil.nextInt(r, 1, 10)];\n      final boolean[] reverse = new boolean[names.length];\n      for (int j = 0; j < names.length; j++) {\n        names[j] = null;\n        for (int k = 0; k < nonBlankAttempts && null == names[j]; k++) {\n          names[j] = TestUtil.randomRealisticUnicodeString(r, 1, 100);\n\n          // munge anything that might make this a function\n          names[j] = names[j].replaceFirst(\"\\\\{\",\"\\\\}\\\\{\");\n          names[j] = names[j].replaceFirst(\"\\\\(\",\"\\\\)\\\\(\");\n          names[j] = names[j].replaceFirst(\"(\\\\\\\"|\\\\')\",\"$1$1z\");\n          names[j] = names[j].replaceFirst(\"(\\\\d)\",\"$1x\");\n\n          // eliminate pesky problem chars\n          names[j] = names[j].replaceAll(\"\\\\p{Cntrl}|\\\\p{javaWhitespace}\",\"\");\n          \n          if (0 == names[j].length()) {\n            names[j] = null;\n          }\n        }\n        // with luck this bad, never go to vegas\n        // alternatively: if (null == names[j]) names[j] = \"never_go_to_vegas\";\n        assertNotNull(\"Unable to generate a (non-blank) names[\"+j+\"] after \"\n                      + nonBlankAttempts + \" attempts\", names[j]);\n\n        reverse[j] = r.nextBoolean();\n\n        input.append(r.nextBoolean() ? \" \" : \"\");\n        input.append(names[j]);\n        input.append(\" \");\n        input.append(reverse[j] ? \"desc,\" : \"asc,\");\n      }\n      input.deleteCharAt(input.length()-1);\n      SortField[] sorts = null;\n      List<SchemaField> fields = null;\n      try {\n        SortSpec spec = SortSpecParsing.parseSortSpec(input.toString(), req);\n        sorts = spec.getSort().getSort();\n        fields = spec.getSchemaFields();\n      } catch (RuntimeException e) {\n        throw new RuntimeException(\"Failed to parse sort: \" + input, e);\n      }\n      assertEquals(\"parsed sorts had unexpected size\", \n                   names.length, sorts.length);\n      assertEquals(\"parsed sort schema fields had unexpected size\", \n                   names.length, fields.size());\n      for (int j = 0; j < names.length; j++) {\n        assertEquals(\"sorts[\"+j+\"] had unexpected reverse: \" + input,\n                     reverse[j], sorts[j].getReverse());\n\n        final Type type = sorts[j].getType();\n\n        if (Type.SCORE.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type score : \" + input,\n                       \"score\", names[j]);\n        } else if (Type.DOC.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type doc : \" + input,\n                       \"_docid_\", names[j]);\n        } else if (Type.CUSTOM.equals(type) || Type.REWRITEABLE.equals(type)) {\n          log.error(\"names[{}] : {}\", j, names[j]);\n          log.error(\"sorts[{}] : {}\", j, sorts[j]);\n          fail(\"sorts[\"+j+\"] resulted in a '\" + type.toString()\n               + \"', either sort parsing code is broken, or func/query \" \n               + \"semantics have gotten broader and munging in this test \"\n               + \"needs improved: \" + input);\n\n        } else {\n          assertEquals(\"sorts[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected field in: \" + input,\n                       names[j], sorts[j].getField());\n          assertEquals(\"fields[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected name in: \" + input,\n                       names[j], fields.get(j).getName());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomFieldNameSorts() throws Exception {\n    SolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n\n    final int iters = atLeast(5000);\n\n    // infinite loop abort when trying to generate a non-blank sort \"name\"\n    final int nonBlankAttempts = 37;\n\n    for (int i = 0; i < iters; i++) {\n      final StringBuilder input = new StringBuilder();\n      final String[] names = new String[TestUtil.nextInt(r, 1, 10)];\n      final boolean[] reverse = new boolean[names.length];\n      for (int j = 0; j < names.length; j++) {\n        names[j] = null;\n        for (int k = 0; k < nonBlankAttempts && null == names[j]; k++) {\n          names[j] = TestUtil.randomRealisticUnicodeString(r, 1, 100);\n\n          // munge anything that might make this a function\n          names[j] = names[j].replaceFirst(\"\\\\{\",\"\\\\{\\\\{\");\n          names[j] = names[j].replaceFirst(\"\\\\(\",\"\\\\(\\\\(\");\n          names[j] = names[j].replaceFirst(\"(\\\\\\\"|\\\\')\",\"$1$1z\");\n          names[j] = names[j].replaceFirst(\"(\\\\d)\",\"$1x\");\n\n          // eliminate pesky problem chars\n          names[j] = names[j].replaceAll(\"\\\\p{Cntrl}|\\\\p{javaWhitespace}\",\"\");\n          \n          if (0 == names[j].length()) {\n            names[j] = null;\n          }\n        }\n        // with luck this bad, never go to vegas\n        // alternatively: if (null == names[j]) names[j] = \"never_go_to_vegas\";\n        assertNotNull(\"Unable to generate a (non-blank) names[\"+j+\"] after \"\n                      + nonBlankAttempts + \" attempts\", names[j]);\n\n        reverse[j] = r.nextBoolean();\n\n        input.append(r.nextBoolean() ? \" \" : \"\");\n        input.append(names[j]);\n        input.append(\" \");\n        input.append(reverse[j] ? \"desc,\" : \"asc,\");\n      }\n      input.deleteCharAt(input.length()-1);\n      SortField[] sorts = null;\n      List<SchemaField> fields = null;\n      try {\n        SortSpec spec = SortSpecParsing.parseSortSpec(input.toString(), req);\n        sorts = spec.getSort().getSort();\n        fields = spec.getSchemaFields();\n      } catch (RuntimeException e) {\n        throw new RuntimeException(\"Failed to parse sort: \" + input, e);\n      }\n      assertEquals(\"parsed sorts had unexpected size\", \n                   names.length, sorts.length);\n      assertEquals(\"parsed sort schema fields had unexpected size\", \n                   names.length, fields.size());\n      for (int j = 0; j < names.length; j++) {\n        assertEquals(\"sorts[\"+j+\"] had unexpected reverse: \" + input,\n                     reverse[j], sorts[j].getReverse());\n\n        final Type type = sorts[j].getType();\n\n        if (Type.SCORE.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type score : \" + input,\n                       \"score\", names[j]);\n        } else if (Type.DOC.equals(type)) {\n          assertEquals(\"sorts[\"+j+\"] is (unexpectedly) type doc : \" + input,\n                       \"_docid_\", names[j]);\n        } else if (Type.CUSTOM.equals(type) || Type.REWRITEABLE.equals(type)) {\n\n          fail(\"sorts[\"+j+\"] resulted in a '\" + type.toString()\n               + \"', either sort parsing code is broken, or func/query \" \n               + \"semantics have gotten broader and munging in this test \"\n               + \"needs improved: \" + input);\n\n        } else {\n          assertEquals(\"sorts[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected field in: \" + input,\n                       names[j], sorts[j].getField());\n          assertEquals(\"fields[\"+j+\"] (\"+type.toString()+\n                       \") had unexpected name in: \" + input,\n                       names[j], fields.get(j).getName());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b8bacf32ab8691507c9b77f4cebc75c7e055d30":["a66bd69cd26cbc71647b0971089f240b2ea82edc"],"6c8dc56dbae186505066de8a78986cba31525ef0":["6613659748fe4411a7dcf85266e55db1f95f7315"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["7b8bacf32ab8691507c9b77f4cebc75c7e055d30","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a66bd69cd26cbc71647b0971089f240b2ea82edc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6613659748fe4411a7dcf85266e55db1f95f7315":["02453e8d9fe1bde22dc7676145ad809cb1dbfcad"],"02453e8d9fe1bde22dc7676145ad809cb1dbfcad":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"891d9507d39eb3023bc838b326f4de773cc00861":["6c8dc56dbae186505066de8a78986cba31525ef0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["19275ba31e621f6da1b83bf13af75233876fd3d4","02453e8d9fe1bde22dc7676145ad809cb1dbfcad"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["7b8bacf32ab8691507c9b77f4cebc75c7e055d30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["891d9507d39eb3023bc838b326f4de773cc00861"]},"commit2Childs":{"7b8bacf32ab8691507c9b77f4cebc75c7e055d30":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"6c8dc56dbae186505066de8a78986cba31525ef0":["891d9507d39eb3023bc838b326f4de773cc00861"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"a66bd69cd26cbc71647b0971089f240b2ea82edc":["7b8bacf32ab8691507c9b77f4cebc75c7e055d30"],"6613659748fe4411a7dcf85266e55db1f95f7315":["6c8dc56dbae186505066de8a78986cba31525ef0"],"02453e8d9fe1bde22dc7676145ad809cb1dbfcad":["6613659748fe4411a7dcf85266e55db1f95f7315","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a66bd69cd26cbc71647b0971089f240b2ea82edc"],"891d9507d39eb3023bc838b326f4de773cc00861":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","02453e8d9fe1bde22dc7676145ad809cb1dbfcad","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}