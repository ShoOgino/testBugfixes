{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#addClausesForCollection(ClusterStateProvider,String).mjava","commits":[{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#addClausesForCollection(ClusterStateProvider,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#addClausesForCollection(ClusterDataProvider,String).mjava","sourceNew":"    private void addClausesForCollection(ClusterStateProvider stateProvider, String c) {\n      String p = stateProvider.getPolicyNameByCollection(c);\n      if (p != null) {\n        List<Clause> perCollPolicy = policies.get(p);\n        if (perCollPolicy == null)\n          throw new RuntimeException(StrUtils.formatString(\"Policy for collection {0} is {1} . It does not exist\", c, p));\n      }\n      expandedClauses.addAll(mergePolicies(c, policies.getOrDefault(p, emptyList()), clusterPolicy));\n    }\n\n","sourceOld":"    private void addClausesForCollection(ClusterDataProvider dataProvider, String c) {\n      String p = dataProvider.getPolicyNameByCollection(c);\n      if (p != null) {\n        List<Clause> perCollPolicy = policies.get(p);\n        if (perCollPolicy == null)\n          throw new RuntimeException(StrUtils.formatString(\"Policy for collection {0} is {1} . It does not exist\", c, p));\n      }\n      expandedClauses.addAll(mergePolicies(c, policies.getOrDefault(p, emptyList()), clusterPolicy));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#addClausesForCollection(ClusterStateProvider,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#addClausesForCollection(ClusterStateProvider,String).mjava","sourceNew":"    void addClausesForCollection(ClusterStateProvider stateProvider, String c) {\n      String p = stateProvider.getPolicyNameByCollection(c);\n      if (p != null) {\n        List<Clause> perCollPolicy = policies.get(p);\n        if (perCollPolicy == null)\n          throw new RuntimeException(StrUtils.formatString(\"Policy for collection {0} is {1} . It does not exist\", c, p));\n      }\n      expandedClauses.addAll(mergePolicies(c, policies.getOrDefault(p, emptyList()), clusterPolicy));\n    }\n\n","sourceOld":"    private void addClausesForCollection(ClusterStateProvider stateProvider, String c) {\n      String p = stateProvider.getPolicyNameByCollection(c);\n      if (p != null) {\n        List<Clause> perCollPolicy = policies.get(p);\n        if (perCollPolicy == null)\n          throw new RuntimeException(StrUtils.formatString(\"Policy for collection {0} is {1} . It does not exist\", c, p));\n      }\n      expandedClauses.addAll(mergePolicies(c, policies.getOrDefault(p, emptyList()), clusterPolicy));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#addClausesForCollection(ClusterStateProvider,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#addClausesForCollection(ClusterStateProvider,String).mjava","sourceNew":"    void addClausesForCollection(ClusterStateProvider stateProvider, String c) {\n      String p = stateProvider.getPolicyNameByCollection(c);\n      if (p != null) {\n        List<Clause> perCollPolicy = policies.get(p);\n        if (perCollPolicy == null) {\n          return;\n//          throw new RuntimeException(StrUtils.formatString(\"Policy for collection {0} is {1} . It does not exist\", c, p));\n        }\n      }\n      expandedClauses.addAll(mergePolicies(c, policies.getOrDefault(p, emptyList()), clusterPolicy));\n    }\n\n","sourceOld":"    void addClausesForCollection(ClusterStateProvider stateProvider, String c) {\n      String p = stateProvider.getPolicyNameByCollection(c);\n      if (p != null) {\n        List<Clause> perCollPolicy = policies.get(p);\n        if (perCollPolicy == null)\n          throw new RuntimeException(StrUtils.formatString(\"Policy for collection {0} is {1} . It does not exist\", c, p));\n      }\n      expandedClauses.addAll(mergePolicies(c, policies.getOrDefault(p, emptyList()), clusterPolicy));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#addClausesForCollection(ClusterStateProvider,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#addClausesForCollection(ClusterStateProvider,String).mjava","sourceNew":"    void addClausesForCollection(ClusterStateProvider stateProvider, String c) {\n      String p = stateProvider.getPolicyNameByCollection(c);\n      if (p != null) {\n        List<Clause> perCollPolicy = policies.get(p);\n        if (perCollPolicy == null) {\n          return;\n        }\n      }\n      expandedClauses.addAll(mergePolicies(c, policies.getOrDefault(p, emptyList()), clusterPolicy));\n    }\n\n","sourceOld":"    void addClausesForCollection(ClusterStateProvider stateProvider, String c) {\n      String p = stateProvider.getPolicyNameByCollection(c);\n      if (p != null) {\n        List<Clause> perCollPolicy = policies.get(p);\n        if (perCollPolicy == null) {\n          return;\n//          throw new RuntimeException(StrUtils.formatString(\"Policy for collection {0} is {1} . It does not exist\", c, p));\n        }\n      }\n      expandedClauses.addAll(mergePolicies(c, policies.getOrDefault(p, emptyList()), clusterPolicy));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5028c6838e2e49cb9da1cf70269851c049f107a","date":1584984100,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#addClausesForCollection(ClusterStateProvider,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#addClausesForCollection(ClusterStateProvider,String).mjava","sourceNew":"    void addClausesForCollection(ClusterStateProvider stateProvider, String collection) {\n      addClausesForCollection(policy, expandedClauses, stateProvider, collection);\n    }\n\n","sourceOld":"    void addClausesForCollection(ClusterStateProvider stateProvider, String c) {\n      String p = stateProvider.getPolicyNameByCollection(c);\n      if (p != null) {\n        List<Clause> perCollPolicy = policies.get(p);\n        if (perCollPolicy == null) {\n          return;\n        }\n      }\n      expandedClauses.addAll(mergePolicies(c, policies.getOrDefault(p, emptyList()), clusterPolicy));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#addClausesForCollection(ClusterStateProvider,String).mjava","sourceNew":null,"sourceOld":"    void addClausesForCollection(ClusterStateProvider stateProvider, String collection) {\n      addClausesForCollection(policy, expandedClauses, stateProvider, collection);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["e5028c6838e2e49cb9da1cf70269851c049f107a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"e5028c6838e2e49cb9da1cf70269851c049f107a":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["e5028c6838e2e49cb9da1cf70269851c049f107a"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"e5028c6838e2e49cb9da1cf70269851c049f107a":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}