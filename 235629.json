{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","commits":[{"id":"609ba4ce51a7095e9815d4fb2666ec85714f8f54","date":1456320705,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","pathOld":"/dev/null","sourceNew":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"<field:18.313693958334625,-65.22744392976165>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[17.99999997485429 TO 18.999999999068677},[-65.9999999217689 TO -64.99999998137355}\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","date":1456321728,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","pathOld":"/dev/null","sourceNew":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"<field:18.313693958334625,-65.22744392976165>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[17.99999997485429 TO 18.999999999068677},[-65.9999999217689 TO -64.99999998137355}\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8357a0b6e20da8f78592ec8e53dbd375b1026b","date":1456330381,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744392976165>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[17.99999997485429 TO 18.999999999068677},[-65.9999999217689 TO -64.99999998137355}\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"<field:18.313693958334625,-65.22744392976165>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[17.99999997485429 TO 18.999999999068677},[-65.9999999217689 TO -64.99999998137355}\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a60784094f4a1d4e4b03b3e8086bf55d3eeed","date":1456346320,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744392976165>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[17.99999997485429 TO 18.999999999068677},[-65.9999999217689 TO -64.99999998137355}\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"<field:18.313693958334625,-65.22744392976165>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[17.99999997485429 TO 18.999999999068677},[-65.9999999217689 TO -64.99999998137355}\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ee361295fb38310ac4d53cb4773d1622423d68","date":1456833885,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744392976165>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[17.99999997485429 TO 18.999999999068677},[-65.9999999217689 TO -64.99999998137355}\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n    \n    // distance query does not quantize inputs\n    assertEquals(\"field:18.0,19.0 +/- 25.0 meters\", LatLonPoint.newDistanceQuery(\"field\", 18, 19, 25).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744392976165>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[17.99999997485429 TO 18.999999999068677},[-65.9999999217689 TO -64.99999998137355}\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744392976165>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[17.99999997485429 TO 18.999999999068677],[-65.9999999217689 TO -64.99999998137355]\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n    \n    // distance query does not quantize inputs\n    assertEquals(\"field:18.0,19.0 +/- 25.0 meters\", LatLonPoint.newDistanceQuery(\"field\", 18, 19, 25).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744392976165>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[17.99999997485429 TO 18.999999999068677},[-65.9999999217689 TO -64.99999998137355}\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n    \n    // distance query does not quantize inputs\n    assertEquals(\"field:18.0,19.0 +/- 25.0 meters\", LatLonPoint.newDistanceQuery(\"field\", 18, 19, 25).toString());\n  }\n\n","bugFix":["609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744392976165>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[17.99999997485429 TO 18.999999999068677],[-65.9999999217689 TO -64.99999998137355]\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n    \n    // distance query does not quantize inputs\n    assertEquals(\"field:18.0,19.0 +/- 25.0 meters\", LatLonPoint.newDistanceQuery(\"field\", 18, 19, 25).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744392976165>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[17.99999997485429 TO 18.999999999068677},[-65.9999999217689 TO -64.99999998137355}\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n    \n    // distance query does not quantize inputs\n    assertEquals(\"field:18.0,19.0 +/- 25.0 meters\", LatLonPoint.newDistanceQuery(\"field\", 18, 19, 25).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744392976165>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[17.99999997485429 TO 18.999999999068677],[-65.9999999217689 TO -64.99999998137355]\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n    \n    // distance query does not quantize inputs\n    assertEquals(\"field:18.0,19.0 +/- 25.0 meters\", LatLonPoint.newDistanceQuery(\"field\", 18, 19, 25).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744392976165>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[17.99999997485429 TO 18.999999999068677},[-65.9999999217689 TO -64.99999998137355}\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54f531dff997ea7763360cb59f5ccadc6811b519","date":1457742562,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744392976165>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[17.99999997485429 TO 18.999999999068677],[-65.9999999217689 TO -64.99999998137355]\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n    \n    // distance query does not quantize inputs\n    assertEquals(\"field:18.0,19.0 +/- 25.0 meters\", LatLonPoint.newDistanceQuery(\"field\", 18, 19, 25).toString());\n    \n    // sort field\n    assertEquals(\"<distance:\\\"field\\\" latitude=18.0 longitude=19.0>\", LatLonPoint.newDistanceSort(\"field\", 18.0, 19.0).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744392976165>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[17.99999997485429 TO 18.999999999068677],[-65.9999999217689 TO -64.99999998137355]\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n    \n    // distance query does not quantize inputs\n    assertEquals(\"field:18.0,19.0 +/- 25.0 meters\", LatLonPoint.newDistanceQuery(\"field\", 18, 19, 25).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575856a9f007b9c35d0113c9e18151b554709ef2","date":1457776622,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744392976165>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[17.99999997485429 TO 18.999999999068677],[-65.9999999217689 TO -64.99999998137355]\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n    \n    // distance query does not quantize inputs\n    assertEquals(\"field:18.0,19.0 +/- 25.0 meters\", LatLonPoint.newDistanceQuery(\"field\", 18, 19, 25).toString());\n    \n    // sort field\n    assertEquals(\"<distance:\\\"field\\\" latitude=18.0 longitude=19.0>\", LatLonPoint.newDistanceSort(\"field\", 18.0, 19.0).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744392976165>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[17.99999997485429 TO 18.999999999068677],[-65.9999999217689 TO -64.99999998137355]\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n    \n    // distance query does not quantize inputs\n    assertEquals(\"field:18.0,19.0 +/- 25.0 meters\", LatLonPoint.newDistanceQuery(\"field\", 18, 19, 25).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8da4c29a4aed72a95d20b328cb2140a85621cdd","date":1459513936,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744401358068>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[17.99999997485429 TO 18.999999999068677],[-66.00000000558794 TO -65.00000006519258]\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n    \n    // distance query does not quantize inputs\n    assertEquals(\"field:18.0,19.0 +/- 25.0 meters\", LatLonPoint.newDistanceQuery(\"field\", 18, 19, 25).toString());\n    \n    // sort field\n    assertEquals(\"<distance:\\\"field\\\" latitude=18.0 longitude=19.0>\", LatLonPoint.newDistanceSort(\"field\", 18.0, 19.0).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744392976165>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[17.99999997485429 TO 18.999999999068677],[-65.9999999217689 TO -64.99999998137355]\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n    \n    // distance query does not quantize inputs\n    assertEquals(\"field:18.0,19.0 +/- 25.0 meters\", LatLonPoint.newDistanceQuery(\"field\", 18, 19, 25).toString());\n    \n    // sort field\n    assertEquals(\"<distance:\\\"field\\\" latitude=18.0 longitude=19.0>\", LatLonPoint.newDistanceSort(\"field\", 18.0, 19.0).toString());\n  }\n\n","bugFix":null,"bugIntro":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03bffb520caf6e9833c4b9a82ac67d19a1f3fc97","date":1459595815,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744401358068>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[18.000000016763806 TO 18.999999999068677],[-65.9999999217689 TO -65.00000006519258]\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n    \n    // distance query does not quantize inputs\n    assertEquals(\"field:18.0,19.0 +/- 25.0 meters\", LatLonPoint.newDistanceQuery(\"field\", 18, 19, 25).toString());\n    \n    // sort field\n    assertEquals(\"<distance:\\\"field\\\" latitude=18.0 longitude=19.0>\", LatLonPoint.newDistanceSort(\"field\", 18.0, 19.0).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744401358068>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[17.99999997485429 TO 18.999999999068677],[-66.00000000558794 TO -65.00000006519258]\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n    \n    // distance query does not quantize inputs\n    assertEquals(\"field:18.0,19.0 +/- 25.0 meters\", LatLonPoint.newDistanceQuery(\"field\", 18, 19, 25).toString());\n    \n    // sort field\n    assertEquals(\"<distance:\\\"field\\\" latitude=18.0 longitude=19.0>\", LatLonPoint.newDistanceSort(\"field\", 18.0, 19.0).toString());\n  }\n\n","bugFix":["d8da4c29a4aed72a95d20b328cb2140a85621cdd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc75470f235495b4ac71f43bba9b503023f7f2d0","date":1461532530,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744401358068>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[18.000000016763806 TO 18.999999999068677],[-65.9999999217689 TO -65.00000006519258]\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n    \n    // distance query does not quantize inputs\n    assertEquals(\"field:18.0,19.0 +/- 25.0 meters\", LatLonPoint.newDistanceQuery(\"field\", 18, 19, 25).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744401358068>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[18.000000016763806 TO 18.999999999068677],[-65.9999999217689 TO -65.00000006519258]\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n    \n    // distance query does not quantize inputs\n    assertEquals(\"field:18.0,19.0 +/- 25.0 meters\", LatLonPoint.newDistanceQuery(\"field\", 18, 19, 25).toString());\n    \n    // sort field\n    assertEquals(\"<distance:\\\"field\\\" latitude=18.0 longitude=19.0>\", LatLonPoint.newDistanceSort(\"field\", 18.0, 19.0).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744401358068>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[18.000000016763806 TO 18.999999999068677],[-65.9999999217689 TO -65.00000006519258]\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n    \n    // distance query does not quantize inputs\n    assertEquals(\"field:18.0,19.0 +/- 25.0 meters\", LatLonPoint.newDistanceQuery(\"field\", 18, 19, 25).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744401358068>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[18.000000016763806 TO 18.999999999068677],[-65.9999999217689 TO -65.00000006519258]\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n    \n    // distance query does not quantize inputs\n    assertEquals(\"field:18.0,19.0 +/- 25.0 meters\", LatLonPoint.newDistanceQuery(\"field\", 18, 19, 25).toString());\n    \n    // sort field\n    assertEquals(\"<distance:\\\"field\\\" latitude=18.0 longitude=19.0>\", LatLonPoint.newDistanceSort(\"field\", 18.0, 19.0).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88b0212386fe531136816706dc37dc49b9dbf7dc","date":1532560226,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744401358068>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[18.000000016763806 TO 18.999999999068677],[-65.9999999217689 TO -65.00000006519258]\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n    \n    // distance query does not quantize inputs\n    assertEquals(\"field:18.0,19.0 +/- 25.0 meters\", LatLonPoint.newDistanceQuery(\"field\", 18, 19, 25).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    // looks crazy due to lossiness\n    assertEquals(\"LatLonPoint <field:18.313693958334625,-65.22744401358068>\",(new LatLonPoint(\"field\", 18.313694, -65.227444)).toString());\n    \n    // looks crazy due to lossiness\n    assertEquals(\"field:[18.000000016763806 TO 18.999999999068677],[-65.9999999217689 TO -65.00000006519258]\", LatLonPoint.newBoxQuery(\"field\", 18, 19, -66, -65).toString());\n    \n    // distance query does not quantize inputs\n    assertEquals(\"field:18.0,19.0 +/- 25.0 meters\", LatLonPoint.newDistanceQuery(\"field\", 18, 19, 25).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97","cc75470f235495b4ac71f43bba9b503023f7f2d0"],"575856a9f007b9c35d0113c9e18151b554709ef2":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","54f531dff997ea7763360cb59f5ccadc6811b519"],"d8da4c29a4aed72a95d20b328cb2140a85621cdd":["575856a9f007b9c35d0113c9e18151b554709ef2"],"03bffb520caf6e9833c4b9a82ac67d19a1f3fc97":["d8da4c29a4aed72a95d20b328cb2140a85621cdd"],"c422e924212367b334b4938f1fd3e44438e88c40":["94ee361295fb38310ac4d53cb4773d1622423d68","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["94ee361295fb38310ac4d53cb4773d1622423d68"],"cf8357a0b6e20da8f78592ec8e53dbd375b1026b":["609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"e79a60784094f4a1d4e4b03b3e8086bf55d3eeed":["1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","cf8357a0b6e20da8f78592ec8e53dbd375b1026b"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"609ba4ce51a7095e9815d4fb2666ec85714f8f54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"94ee361295fb38310ac4d53cb4773d1622423d68":["cf8357a0b6e20da8f78592ec8e53dbd375b1026b"],"54f531dff997ea7763360cb59f5ccadc6811b519":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cf8357a0b6e20da8f78592ec8e53dbd375b1026b","c422e924212367b334b4938f1fd3e44438e88c40"],"cc75470f235495b4ac71f43bba9b503023f7f2d0":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88b0212386fe531136816706dc37dc49b9dbf7dc"]},"commit2Childs":{"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"575856a9f007b9c35d0113c9e18151b554709ef2":["d8da4c29a4aed72a95d20b328cb2140a85621cdd"],"d8da4c29a4aed72a95d20b328cb2140a85621cdd":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97"],"03bffb520caf6e9833c4b9a82ac67d19a1f3fc97":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","cc75470f235495b4ac71f43bba9b503023f7f2d0"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"cf8357a0b6e20da8f78592ec8e53dbd375b1026b":["e79a60784094f4a1d4e4b03b3e8086bf55d3eeed","94ee361295fb38310ac4d53cb4773d1622423d68","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"e79a60784094f4a1d4e4b03b3e8086bf55d3eeed":[],"54f531dff997ea7763360cb59f5ccadc6811b519":["575856a9f007b9c35d0113c9e18151b554709ef2"],"94ee361295fb38310ac4d53cb4773d1622423d68":["c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"609ba4ce51a7095e9815d4fb2666ec85714f8f54":["cf8357a0b6e20da8f78592ec8e53dbd375b1026b","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["609ba4ce51a7095e9815d4fb2666ec85714f8f54","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["575856a9f007b9c35d0113c9e18151b554709ef2","54f531dff997ea7763360cb59f5ccadc6811b519"],"cc75470f235495b4ac71f43bba9b503023f7f2d0":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":["e79a60784094f4a1d4e4b03b3e8086bf55d3eeed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a60784094f4a1d4e4b03b3e8086bf55d3eeed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}