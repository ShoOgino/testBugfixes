{"path":"solr/core/src/java/org/apache/solr/core/BlobRepository#getSystemCollReplica().mjava","commits":[{"id":"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","date":1456224289,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#getSystemCollReplica().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JarRepository#getSystemCollReplica().mjava","sourceNew":"  private Replica getSystemCollReplica() {\n    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n    if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n    ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n    if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for .system collection\");\n    Collections.shuffle(slices, RANDOM); //do load balancing\n\n    Replica replica = null;\n    for (Slice slice : slices) {\n      List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n      Collections.shuffle(replicas, RANDOM);\n      for (Replica r : replicas) {\n        if (r.getState() == Replica.State.ACTIVE) {\n          if(zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))){\n            replica = r;\n            break;\n          } else {\n            log.info(\"replica {} says it is active but not a member of live nodes\", r.get(ZkStateReader.NODE_NAME_PROP));\n          }\n        }\n      }\n    }\n    if (replica == null) {\n      throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n    }\n    return replica;\n  }\n\n","sourceOld":"  private Replica getSystemCollReplica() {\n    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n    if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n    ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n    if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for .system collection\");\n    Collections.shuffle(slices, RANDOM); //do load balancing\n\n    Replica replica = null;\n    for (Slice slice : slices) {\n      List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n      Collections.shuffle(replicas, RANDOM);\n      for (Replica r : replicas) {\n        if (r.getState() == Replica.State.ACTIVE) {\n          if(zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))){\n            replica = r;\n            break;\n          } else {\n            log.info(\"replica {} says it is active but not a member of live nodes\", r.get(ZkStateReader.NODE_NAME_PROP));\n          }\n        }\n      }\n    }\n    if (replica == null) {\n      throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n    }\n    return replica;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#getSystemCollReplica().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JarRepository#getSystemCollReplica().mjava","sourceNew":"  private Replica getSystemCollReplica() {\n    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n    if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n    ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n    if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for .system collection\");\n    Collections.shuffle(slices, RANDOM); //do load balancing\n\n    Replica replica = null;\n    for (Slice slice : slices) {\n      List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n      Collections.shuffle(replicas, RANDOM);\n      for (Replica r : replicas) {\n        if (r.getState() == Replica.State.ACTIVE) {\n          if(zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))){\n            replica = r;\n            break;\n          } else {\n            log.info(\"replica {} says it is active but not a member of live nodes\", r.get(ZkStateReader.NODE_NAME_PROP));\n          }\n        }\n      }\n    }\n    if (replica == null) {\n      throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n    }\n    return replica;\n  }\n\n","sourceOld":"  private Replica getSystemCollReplica() {\n    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n    if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n    ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n    if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for .system collection\");\n    Collections.shuffle(slices, RANDOM); //do load balancing\n\n    Replica replica = null;\n    for (Slice slice : slices) {\n      List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n      Collections.shuffle(replicas, RANDOM);\n      for (Replica r : replicas) {\n        if (r.getState() == Replica.State.ACTIVE) {\n          if(zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))){\n            replica = r;\n            break;\n          } else {\n            log.info(\"replica {} says it is active but not a member of live nodes\", r.get(ZkStateReader.NODE_NAME_PROP));\n          }\n        }\n      }\n    }\n    if (replica == null) {\n      throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n    }\n    return replica;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55ed5a78f8a4b37108ac73a894a105db562d303e","date":1500477652,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#getSystemCollReplica().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#getSystemCollReplica().mjava","sourceNew":"  private Replica getSystemCollReplica() {\n    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    DocCollection coll = cs.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n    if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, CollectionAdminParams.SYSTEM_COLL + \" collection not available\");\n    ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n    if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for \" + CollectionAdminParams.SYSTEM_COLL + \" collection\");\n    Collections.shuffle(slices, RANDOM); //do load balancing\n\n    Replica replica = null;\n    for (Slice slice : slices) {\n      List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n      Collections.shuffle(replicas, RANDOM);\n      for (Replica r : replicas) {\n        if (r.getState() == Replica.State.ACTIVE) {\n          if(zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))){\n            replica = r;\n            break;\n          } else {\n            log.info(\"replica {} says it is active but not a member of live nodes\", r.get(ZkStateReader.NODE_NAME_PROP));\n          }\n        }\n      }\n    }\n    if (replica == null) {\n      throw new SolrException(SERVICE_UNAVAILABLE, \"No active replica available for \" + CollectionAdminParams.SYSTEM_COLL + \" collection\");\n    }\n    return replica;\n  }\n\n","sourceOld":"  private Replica getSystemCollReplica() {\n    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n    if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n    ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n    if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for .system collection\");\n    Collections.shuffle(slices, RANDOM); //do load balancing\n\n    Replica replica = null;\n    for (Slice slice : slices) {\n      List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n      Collections.shuffle(replicas, RANDOM);\n      for (Replica r : replicas) {\n        if (r.getState() == Replica.State.ACTIVE) {\n          if(zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))){\n            replica = r;\n            break;\n          } else {\n            log.info(\"replica {} says it is active but not a member of live nodes\", r.get(ZkStateReader.NODE_NAME_PROP));\n          }\n        }\n      }\n    }\n    if (replica == null) {\n      throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n    }\n    return replica;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#getSystemCollReplica().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#getSystemCollReplica().mjava","sourceNew":"  private Replica getSystemCollReplica() {\n    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    DocCollection coll = cs.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n    if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, CollectionAdminParams.SYSTEM_COLL + \" collection not available\");\n    ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n    if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for \" + CollectionAdminParams.SYSTEM_COLL + \" collection\");\n    Collections.shuffle(slices, RANDOM); //do load balancing\n\n    Replica replica = null;\n    for (Slice slice : slices) {\n      List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n      Collections.shuffle(replicas, RANDOM);\n      for (Replica r : replicas) {\n        if (r.getState() == Replica.State.ACTIVE) {\n          if(zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))){\n            replica = r;\n            break;\n          } else {\n            log.info(\"replica {} says it is active but not a member of live nodes\", r.get(ZkStateReader.NODE_NAME_PROP));\n          }\n        }\n      }\n    }\n    if (replica == null) {\n      throw new SolrException(SERVICE_UNAVAILABLE, \"No active replica available for \" + CollectionAdminParams.SYSTEM_COLL + \" collection\");\n    }\n    return replica;\n  }\n\n","sourceOld":"  private Replica getSystemCollReplica() {\n    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n    if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n    ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n    if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for .system collection\");\n    Collections.shuffle(slices, RANDOM); //do load balancing\n\n    Replica replica = null;\n    for (Slice slice : slices) {\n      List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n      Collections.shuffle(replicas, RANDOM);\n      for (Replica r : replicas) {\n        if (r.getState() == Replica.State.ACTIVE) {\n          if(zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))){\n            replica = r;\n            break;\n          } else {\n            log.info(\"replica {} says it is active but not a member of live nodes\", r.get(ZkStateReader.NODE_NAME_PROP));\n          }\n        }\n      }\n    }\n    if (replica == null) {\n      throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n    }\n    return replica;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#getSystemCollReplica().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#getSystemCollReplica().mjava","sourceNew":"  private Replica getSystemCollReplica() {\n    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    DocCollection coll = cs.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n    if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, CollectionAdminParams.SYSTEM_COLL + \" collection not available\");\n    ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n    if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for \" + CollectionAdminParams.SYSTEM_COLL + \" collection\");\n    Collections.shuffle(slices, RANDOM); //do load balancing\n\n    Replica replica = null;\n    for (Slice slice : slices) {\n      List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n      Collections.shuffle(replicas, RANDOM);\n      for (Replica r : replicas) {\n        if (r.getState() == Replica.State.ACTIVE) {\n          if(zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))){\n            replica = r;\n            break;\n          } else {\n            log.info(\"replica {} says it is active but not a member of live nodes\", r.get(ZkStateReader.NODE_NAME_PROP));\n          }\n        }\n      }\n    }\n    if (replica == null) {\n      throw new SolrException(SERVICE_UNAVAILABLE, \"No active replica available for \" + CollectionAdminParams.SYSTEM_COLL + \" collection\");\n    }\n    return replica;\n  }\n\n","sourceOld":"  private Replica getSystemCollReplica() {\n    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    DocCollection coll = cs.getCollectionOrNull(CollectionsHandler.SYSTEM_COLL);\n    if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, \".system collection not available\");\n    ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n    if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for .system collection\");\n    Collections.shuffle(slices, RANDOM); //do load balancing\n\n    Replica replica = null;\n    for (Slice slice : slices) {\n      List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n      Collections.shuffle(replicas, RANDOM);\n      for (Replica r : replicas) {\n        if (r.getState() == Replica.State.ACTIVE) {\n          if(zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))){\n            replica = r;\n            break;\n          } else {\n            log.info(\"replica {} says it is active but not a member of live nodes\", r.get(ZkStateReader.NODE_NAME_PROP));\n          }\n        }\n      }\n    }\n    if (replica == null) {\n      throw new SolrException(SERVICE_UNAVAILABLE, \".no active replica available for .system collection\");\n    }\n    return replica;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#getSystemCollReplica().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#getSystemCollReplica().mjava","sourceNew":"  private Replica getSystemCollReplica() {\n    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    DocCollection coll = cs.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n    if (coll == null)\n      throw new SolrException(SERVICE_UNAVAILABLE, CollectionAdminParams.SYSTEM_COLL + \" collection not available\");\n    ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n    if (slices.isEmpty())\n      throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for \" + CollectionAdminParams.SYSTEM_COLL + \" collection\");\n    Collections.shuffle(slices, RANDOM); //do load balancing\n\n    Replica replica = null;\n    for (Slice slice : slices) {\n      List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n      Collections.shuffle(replicas, RANDOM);\n      for (Replica r : replicas) {\n        if (r.getState() == Replica.State.ACTIVE) {\n          if (zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))) {\n            replica = r;\n            break;\n          } else {\n            log.info(\"replica {} says it is active but not a member of live nodes\", r.get(ZkStateReader.NODE_NAME_PROP));\n          }\n        }\n      }\n    }\n    if (replica == null) {\n      throw new SolrException(SERVICE_UNAVAILABLE, \"No active replica available for \" + CollectionAdminParams.SYSTEM_COLL + \" collection\");\n    }\n    return replica;\n  }\n\n","sourceOld":"  private Replica getSystemCollReplica() {\n    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    DocCollection coll = cs.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n    if (coll == null) throw new SolrException(SERVICE_UNAVAILABLE, CollectionAdminParams.SYSTEM_COLL + \" collection not available\");\n    ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n    if (slices.isEmpty()) throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for \" + CollectionAdminParams.SYSTEM_COLL + \" collection\");\n    Collections.shuffle(slices, RANDOM); //do load balancing\n\n    Replica replica = null;\n    for (Slice slice : slices) {\n      List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n      Collections.shuffle(replicas, RANDOM);\n      for (Replica r : replicas) {\n        if (r.getState() == Replica.State.ACTIVE) {\n          if(zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))){\n            replica = r;\n            break;\n          } else {\n            log.info(\"replica {} says it is active but not a member of live nodes\", r.get(ZkStateReader.NODE_NAME_PROP));\n          }\n        }\n      }\n    }\n    if (replica == null) {\n      throw new SolrException(SERVICE_UNAVAILABLE, \"No active replica available for \" + CollectionAdminParams.SYSTEM_COLL + \" collection\");\n    }\n    return replica;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#getSystemCollReplica().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#getSystemCollReplica().mjava","sourceNew":"  private Replica getSystemCollReplica() {\n    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    DocCollection coll = cs.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n    if (coll == null)\n      throw new SolrException(SERVICE_UNAVAILABLE, CollectionAdminParams.SYSTEM_COLL + \" collection not available\");\n    ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n    if (slices.isEmpty())\n      throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for \" + CollectionAdminParams.SYSTEM_COLL + \" collection\");\n    Collections.shuffle(slices, RANDOM); //do load balancing\n\n    Replica replica = null;\n    for (Slice slice : slices) {\n      List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n      Collections.shuffle(replicas, RANDOM);\n      for (Replica r : replicas) {\n        if (r.getState() == Replica.State.ACTIVE) {\n          if (zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))) {\n            replica = r;\n            break;\n          } else {\n            if (log.isInfoEnabled()) {\n              log.info(\"replica {} says it is active but not a member of live nodes\", r.get(ZkStateReader.NODE_NAME_PROP));\n            }\n          }\n        }\n      }\n    }\n    if (replica == null) {\n      throw new SolrException(SERVICE_UNAVAILABLE, \"No active replica available for \" + CollectionAdminParams.SYSTEM_COLL + \" collection\");\n    }\n    return replica;\n  }\n\n","sourceOld":"  private Replica getSystemCollReplica() {\n    ZkStateReader zkStateReader = this.coreContainer.getZkController().getZkStateReader();\n    ClusterState cs = zkStateReader.getClusterState();\n    DocCollection coll = cs.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n    if (coll == null)\n      throw new SolrException(SERVICE_UNAVAILABLE, CollectionAdminParams.SYSTEM_COLL + \" collection not available\");\n    ArrayList<Slice> slices = new ArrayList<>(coll.getActiveSlices());\n    if (slices.isEmpty())\n      throw new SolrException(SERVICE_UNAVAILABLE, \"No active slices for \" + CollectionAdminParams.SYSTEM_COLL + \" collection\");\n    Collections.shuffle(slices, RANDOM); //do load balancing\n\n    Replica replica = null;\n    for (Slice slice : slices) {\n      List<Replica> replicas = new ArrayList<>(slice.getReplicasMap().values());\n      Collections.shuffle(replicas, RANDOM);\n      for (Replica r : replicas) {\n        if (r.getState() == Replica.State.ACTIVE) {\n          if (zkStateReader.getClusterState().getLiveNodes().contains(r.get(ZkStateReader.NODE_NAME_PROP))) {\n            replica = r;\n            break;\n          } else {\n            log.info(\"replica {} says it is active but not a member of live nodes\", r.get(ZkStateReader.NODE_NAME_PROP));\n          }\n        }\n      }\n    }\n    if (replica == null) {\n      throw new SolrException(SERVICE_UNAVAILABLE, \"No active replica available for \" + CollectionAdminParams.SYSTEM_COLL + \" collection\");\n    }\n    return replica;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","55ed5a78f8a4b37108ac73a894a105db562d303e"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["560c18d71dad43d675158783c3840f8c80d6d39c"],"140be51d03394488536f4aacedace29f9b318347":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5296efc4b319f5647b606629c093a94b23692c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f46a888512a86ee1f37a7682bac9b2f4b38bb5a"],"560c18d71dad43d675158783c3840f8c80d6d39c":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140be51d03394488536f4aacedace29f9b318347"]},"commit2Childs":{"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","55ed5a78f8a4b37108ac73a894a105db562d303e","a5296efc4b319f5647b606629c093a94b23692c6","560c18d71dad43d675158783c3840f8c80d6d39c"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["140be51d03394488536f4aacedace29f9b318347"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","a5296efc4b319f5647b606629c093a94b23692c6"],"140be51d03394488536f4aacedace29f9b318347":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5296efc4b319f5647b606629c093a94b23692c6":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}