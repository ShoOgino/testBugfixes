{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getFunctionsNamespace(VariableResolver,List[Map[String,String]],DocBuilder).mjava","commits":[{"id":"9d532a814197216f5e180897b172e87e0158690b","date":1226309783,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getFunctionsNamespace(VariableResolver,List[Map[String,String]],DocBuilder).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getFunctionsNamespace(VariableResolver,Map[String,Evaluator]).mjava","sourceNew":"  static Map<String, Object> getFunctionsNamespace(\n          final VariableResolver resolver, final List<Map<String, String>> fn, DocBuilder docBuilder) {\n    final Map<String, Evaluator> evaluators = new HashMap<String, Evaluator>();\n    evaluators.put(DATE_FORMAT_EVALUATOR, getDateFormatEvaluator());\n    evaluators.put(SQL_ESCAPE_EVALUATOR, getSqlEscapingEvaluator());\n    evaluators.put(URL_ENCODE_EVALUATOR, getUrlEvaluator());\n    SolrCore core = docBuilder == null ? null : docBuilder.dataImporter.getCore();\n    for (Map<String, String> map : fn) {\n      try {\n        evaluators.put(map.get(NAME), (Evaluator) loadClass(map.get(CLASS), core).newInstance());\n      } catch (Exception e) {\n         throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"Unable to instantiate evaluator: \" + map.get(CLASS), e);\n      }\n    }\n\n    return new HashMap<String, Object>() {\n      @Override\n      public String get(Object key) {\n        if (key == null)\n          return null;\n        Matcher m = FORMAT_METHOD.matcher((String) key);\n        if (!m.find())\n          return null;\n        String fname = m.group(1);\n        Evaluator evaluator = evaluators.get(fname);\n        if (evaluator == null)\n          return null;\n        return evaluator.evaluate(resolver, m.group(2));\n      }\n    };\n  }\n\n","sourceOld":"  static Map<String, Object> getFunctionsNamespace(\n          final VariableResolver resolver, final Map<String, Evaluator> evaluators) {\n\n    return new HashMap<String, Object>() {\n      @Override\n      public String get(Object key) {\n        if (key == null)\n          return null;\n        Matcher m = FORMAT_METHOD.matcher((String) key);\n        if (!m.find())\n          return null;\n        String fname = m.group(1);\n        Evaluator evaluator = evaluators.get(fname);\n        if (evaluator == null)\n          return null;\n        return evaluator.evaluate(resolver, m.group(2));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dfc8d8c033e2239995c45b976c90c18559da31e","date":1235021328,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getFunctionsNamespace(List[Map[String,String]],DocBuilder).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getFunctionsNamespace(VariableResolver,List[Map[String,String]],DocBuilder).mjava","sourceNew":"  static Map<String, Object> getFunctionsNamespace(final List<Map<String, String>> fn, DocBuilder docBuilder) {\n    final Map<String, Evaluator> evaluators = new HashMap<String, Evaluator>();\n    evaluators.put(DATE_FORMAT_EVALUATOR, getDateFormatEvaluator());\n    evaluators.put(SQL_ESCAPE_EVALUATOR, getSqlEscapingEvaluator());\n    evaluators.put(URL_ENCODE_EVALUATOR, getUrlEvaluator());\n    SolrCore core = docBuilder == null ? null : docBuilder.dataImporter.getCore();\n    for (Map<String, String> map : fn) {\n      try {\n        evaluators.put(map.get(NAME), (Evaluator) loadClass(map.get(CLASS), core).newInstance());\n      } catch (Exception e) {\n         throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"Unable to instantiate evaluator: \" + map.get(CLASS), e);\n      }\n    }\n\n    return new HashMap<String, Object>() {\n      @Override\n      public String get(Object key) {\n        if (key == null)\n          return null;\n        Matcher m = FORMAT_METHOD.matcher((String) key);\n        if (!m.find())\n          return null;\n        String fname = m.group(1);\n        Evaluator evaluator = evaluators.get(fname);\n        if (evaluator == null)\n          return null;\n        VariableResolverImpl vri = VariableResolverImpl.CURRENT_VARIABLE_RESOLVER.get();\n        Context ctx = vri == null ? null : vri.context;\n        return evaluator.evaluate(m.group(2), ctx);\n      }\n\n    };\n  }\n\n","sourceOld":"  static Map<String, Object> getFunctionsNamespace(\n          final VariableResolver resolver, final List<Map<String, String>> fn, DocBuilder docBuilder) {\n    final Map<String, Evaluator> evaluators = new HashMap<String, Evaluator>();\n    evaluators.put(DATE_FORMAT_EVALUATOR, getDateFormatEvaluator());\n    evaluators.put(SQL_ESCAPE_EVALUATOR, getSqlEscapingEvaluator());\n    evaluators.put(URL_ENCODE_EVALUATOR, getUrlEvaluator());\n    SolrCore core = docBuilder == null ? null : docBuilder.dataImporter.getCore();\n    for (Map<String, String> map : fn) {\n      try {\n        evaluators.put(map.get(NAME), (Evaluator) loadClass(map.get(CLASS), core).newInstance());\n      } catch (Exception e) {\n         throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"Unable to instantiate evaluator: \" + map.get(CLASS), e);\n      }\n    }\n\n    return new HashMap<String, Object>() {\n      @Override\n      public String get(Object key) {\n        if (key == null)\n          return null;\n        Matcher m = FORMAT_METHOD.matcher((String) key);\n        if (!m.find())\n          return null;\n        String fname = m.group(1);\n        Evaluator evaluator = evaluators.get(fname);\n        if (evaluator == null)\n          return null;\n        return evaluator.evaluate(resolver, m.group(2));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["17a92a6c6955645d64747d96f75583d591643464","17a92a6c6955645d64747d96f75583d591643464"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9d532a814197216f5e180897b172e87e0158690b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7dfc8d8c033e2239995c45b976c90c18559da31e":["9d532a814197216f5e180897b172e87e0158690b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9d532a814197216f5e180897b172e87e0158690b":["7dfc8d8c033e2239995c45b976c90c18559da31e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9d532a814197216f5e180897b172e87e0158690b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dfc8d8c033e2239995c45b976c90c18559da31e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7dfc8d8c033e2239995c45b976c90c18559da31e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}