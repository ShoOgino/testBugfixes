{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingTermsConsumer#startTerm(BytesRef).mjava","commits":[{"id":"29e23e367cc757f42cdfce2bcbf21e68cd209cda","date":1343071560,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingTermsConsumer#startTerm(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    // TODO: AssertingPostingsConsumer\n    @Override\n    public PostingsConsumer startTerm(BytesRef text) throws IOException {\n      // TODO: assert that if state == START (no finishTerm called), that no actual docs were fed.\n      // TODO: this makes the api really confusing! we should try to clean this up!\n      assert state == TermsConsumerState.INITIAL || state == TermsConsumerState.START;\n      state = TermsConsumerState.START;\n      assert lastTerm == null || in.getComparator().compare(text, lastTerm) > 0;\n      lastTerm = BytesRef.deepCopyOf(text);\n      return in.startTerm(text);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55c178897422fc01a257353a67f2ee23f1c82403","date":1343076368,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingTermsConsumer#startTerm(BytesRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingTermsConsumer#startTerm(BytesRef).mjava","sourceNew":"    @Override\n    public PostingsConsumer startTerm(BytesRef text) throws IOException {\n      assert state == TermsConsumerState.INITIAL || state == TermsConsumerState.START && lastPostingsConsumer.docFreq == 0;\n      state = TermsConsumerState.START;\n      assert lastTerm == null || in.getComparator().compare(text, lastTerm) > 0;\n      lastTerm = BytesRef.deepCopyOf(text);\n      return lastPostingsConsumer = new AssertingPostingsConsumer(in.startTerm(text), fieldInfo, visitedDocs);\n    }\n\n","sourceOld":"    // TODO: AssertingPostingsConsumer\n    @Override\n    public PostingsConsumer startTerm(BytesRef text) throws IOException {\n      // TODO: assert that if state == START (no finishTerm called), that no actual docs were fed.\n      // TODO: this makes the api really confusing! we should try to clean this up!\n      assert state == TermsConsumerState.INITIAL || state == TermsConsumerState.START;\n      state = TermsConsumerState.START;\n      assert lastTerm == null || in.getComparator().compare(text, lastTerm) > 0;\n      lastTerm = BytesRef.deepCopyOf(text);\n      return in.startTerm(text);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57635ff388fa1bee703f3b892a86a3e48975576a","date":1343077051,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingTermsConsumer#startTerm(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public PostingsConsumer startTerm(BytesRef text) throws IOException {\n      assert state == TermsConsumerState.INITIAL || state == TermsConsumerState.START && lastPostingsConsumer.docFreq == 0;\n      state = TermsConsumerState.START;\n      assert lastTerm == null || in.getComparator().compare(text, lastTerm) > 0;\n      lastTerm = BytesRef.deepCopyOf(text);\n      return lastPostingsConsumer = new AssertingPostingsConsumer(in.startTerm(text), fieldInfo, visitedDocs);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingTermsConsumer#startTerm(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public PostingsConsumer startTerm(BytesRef text) throws IOException {\n      assert state == TermsConsumerState.INITIAL || state == TermsConsumerState.START && lastPostingsConsumer.docFreq == 0;\n      state = TermsConsumerState.START;\n      assert lastTerm == null || in.getComparator().compare(text, lastTerm) > 0;\n      lastTerm = BytesRef.deepCopyOf(text);\n      return lastPostingsConsumer = new AssertingPostingsConsumer(in.startTerm(text), fieldInfo, visitedDocs);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingTermsConsumer#startTerm(BytesRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingTermsConsumer#startTerm(BytesRef).mjava","sourceNew":"    @Override\n    public PostingsConsumer startTerm(BytesRef text) throws IOException {\n      assert state == TermsConsumerState.INITIAL || state == TermsConsumerState.START && lastPostingsConsumer.docFreq == 0;\n      state = TermsConsumerState.START;\n      assert lastTerm == null || termComp.compare(text, lastTerm) > 0;\n      lastTerm = BytesRef.deepCopyOf(text);\n      return lastPostingsConsumer = new AssertingPostingsConsumer(in.startTerm(text), fieldInfo, visitedDocs);\n    }\n\n","sourceOld":"    @Override\n    public PostingsConsumer startTerm(BytesRef text) throws IOException {\n      assert state == TermsConsumerState.INITIAL || state == TermsConsumerState.START && lastPostingsConsumer.docFreq == 0;\n      state = TermsConsumerState.START;\n      assert lastTerm == null || in.getComparator().compare(text, lastTerm) > 0;\n      lastTerm = BytesRef.deepCopyOf(text);\n      return lastPostingsConsumer = new AssertingPostingsConsumer(in.startTerm(text), fieldInfo, visitedDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingTermsConsumer#startTerm(BytesRef).mjava","sourceNew":null,"sourceOld":"    @Override\n    public PostingsConsumer startTerm(BytesRef text) throws IOException {\n      assert state == TermsConsumerState.INITIAL || state == TermsConsumerState.START && lastPostingsConsumer.docFreq == 0;\n      state = TermsConsumerState.START;\n      assert lastTerm == null || termComp.compare(text, lastTerm) > 0;\n      lastTerm = BytesRef.deepCopyOf(text);\n      return lastPostingsConsumer = new AssertingPostingsConsumer(in.startTerm(text), fieldInfo, visitedDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55c178897422fc01a257353a67f2ee23f1c82403":["29e23e367cc757f42cdfce2bcbf21e68cd209cda"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55c178897422fc01a257353a67f2ee23f1c82403"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["55c178897422fc01a257353a67f2ee23f1c82403"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"29e23e367cc757f42cdfce2bcbf21e68cd209cda":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"57635ff388fa1bee703f3b892a86a3e48975576a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55c178897422fc01a257353a67f2ee23f1c82403"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"]},"commit2Childs":{"55c178897422fc01a257353a67f2ee23f1c82403":["aba371508186796cc6151d8223a5b4e16d02e26e","519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","57635ff388fa1bee703f3b892a86a3e48975576a"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","29e23e367cc757f42cdfce2bcbf21e68cd209cda","57635ff388fa1bee703f3b892a86a3e48975576a"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29e23e367cc757f42cdfce2bcbf21e68cd209cda":["55c178897422fc01a257353a67f2ee23f1c82403"],"57635ff388fa1bee703f3b892a86a3e48975576a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","57635ff388fa1bee703f3b892a86a3e48975576a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}