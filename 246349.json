{"path":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","commits":[{"id":"ee75e7ca968b4012951ebb66aa008c27293a1700","date":1041700420,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new RAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection fieldNames = reader.getFieldNames();\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false);\n        // want to get some more segments here\n        for (int i=0;i<5*writer.mergeFactor;i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i=0;i<5*writer.mergeFactor;i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames();\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c562f6656e39aab9955008a1760cd0c8765ddb8","date":1051751530,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new RAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection fieldNames = reader.getFieldNames();\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.mergeFactor; i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.mergeFactor; i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames();\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n\n        // verify that only indexed fields were returned\n        Collection indexedFieldNames = reader.getFieldNames(true);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n\n        // verify that only unindexed fields were returned\n        Collection unindexedFieldNames = reader.getFieldNames(false);\n        assertTrue(fieldNames.contains(\"unindexed\"));\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new RAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection fieldNames = reader.getFieldNames();\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false);\n        // want to get some more segments here\n        for (int i=0;i<5*writer.mergeFactor;i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i=0;i<5*writer.mergeFactor;i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames();\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"919e20e2d5af1c2a5c413e98e0637364839873c1","date":1091400912,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new RAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection fieldNames = reader.getFieldNames();\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.mergeFactor; i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.mergeFactor; i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames();\n        assertEquals(9, fieldNames.size());    // the following fields + an empty one (bug?!)\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n\n        // verify that only indexed fields were returned\n        Collection indexedFieldNames = reader.getFieldNames(true);\n        assertEquals(6, indexedFieldNames.size());\n        assertTrue(indexedFieldNames.contains(\"keyword\"));\n        assertTrue(indexedFieldNames.contains(\"text\"));\n        assertTrue(indexedFieldNames.contains(\"unstored\"));\n        assertTrue(indexedFieldNames.contains(\"keyword2\"));\n        assertTrue(indexedFieldNames.contains(\"text2\"));\n        assertTrue(indexedFieldNames.contains(\"unstored2\"));\n\n        // verify that only unindexed fields were returned\n        Collection unindexedFieldNames = reader.getFieldNames(false);\n        assertEquals(3, unindexedFieldNames.size());    // the following fields + an empty one\n        assertTrue(unindexedFieldNames.contains(\"unindexed\"));\n        assertTrue(unindexedFieldNames.contains(\"unindexed2\"));\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new RAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection fieldNames = reader.getFieldNames();\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.mergeFactor; i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.mergeFactor; i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames();\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n\n        // verify that only indexed fields were returned\n        Collection indexedFieldNames = reader.getFieldNames(true);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n\n        // verify that only unindexed fields were returned\n        Collection unindexedFieldNames = reader.getFieldNames(false);\n        assertTrue(fieldNames.contains(\"unindexed\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a2785c615142cd1dcec85d0854bf9c3776918e79","date":1103468329,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new RAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection fieldNames = reader.getFieldNames();\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.mergeFactor; i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.mergeFactor; i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames();\n        assertEquals(8, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n\n        // verify that only indexed fields were returned\n        Collection indexedFieldNames = reader.getFieldNames(true);\n        assertEquals(6, indexedFieldNames.size());\n        assertTrue(indexedFieldNames.contains(\"keyword\"));\n        assertTrue(indexedFieldNames.contains(\"text\"));\n        assertTrue(indexedFieldNames.contains(\"unstored\"));\n        assertTrue(indexedFieldNames.contains(\"keyword2\"));\n        assertTrue(indexedFieldNames.contains(\"text2\"));\n        assertTrue(indexedFieldNames.contains(\"unstored2\"));\n\n        // verify that only unindexed fields were returned\n        Collection unindexedFieldNames = reader.getFieldNames(false);\n        assertEquals(2, unindexedFieldNames.size());    // the following fields\n        assertTrue(unindexedFieldNames.contains(\"unindexed\"));\n        assertTrue(unindexedFieldNames.contains(\"unindexed2\"));\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new RAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection fieldNames = reader.getFieldNames();\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.mergeFactor; i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.mergeFactor; i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames();\n        assertEquals(9, fieldNames.size());    // the following fields + an empty one (bug?!)\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n\n        // verify that only indexed fields were returned\n        Collection indexedFieldNames = reader.getFieldNames(true);\n        assertEquals(6, indexedFieldNames.size());\n        assertTrue(indexedFieldNames.contains(\"keyword\"));\n        assertTrue(indexedFieldNames.contains(\"text\"));\n        assertTrue(indexedFieldNames.contains(\"unstored\"));\n        assertTrue(indexedFieldNames.contains(\"keyword2\"));\n        assertTrue(indexedFieldNames.contains(\"text2\"));\n        assertTrue(indexedFieldNames.contains(\"unstored2\"));\n\n        // verify that only unindexed fields were returned\n        Collection unindexedFieldNames = reader.getFieldNames(false);\n        assertEquals(3, unindexedFieldNames.size());    // the following fields + an empty one\n        assertTrue(unindexedFieldNames.contains(\"unindexed\"));\n        assertTrue(unindexedFieldNames.contains(\"unindexed2\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa26be3cd58c6ec8c8480dcb51e2c98fde3ec13d","date":1103744585,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new RAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection fieldNames = reader.getFieldNames();\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames();\n        assertEquals(8, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n\n        // verify that only indexed fields were returned\n        Collection indexedFieldNames = reader.getFieldNames(true);\n        assertEquals(6, indexedFieldNames.size());\n        assertTrue(indexedFieldNames.contains(\"keyword\"));\n        assertTrue(indexedFieldNames.contains(\"text\"));\n        assertTrue(indexedFieldNames.contains(\"unstored\"));\n        assertTrue(indexedFieldNames.contains(\"keyword2\"));\n        assertTrue(indexedFieldNames.contains(\"text2\"));\n        assertTrue(indexedFieldNames.contains(\"unstored2\"));\n\n        // verify that only unindexed fields were returned\n        Collection unindexedFieldNames = reader.getFieldNames(false);\n        assertEquals(2, unindexedFieldNames.size());    // the following fields\n        assertTrue(unindexedFieldNames.contains(\"unindexed\"));\n        assertTrue(unindexedFieldNames.contains(\"unindexed2\"));\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new RAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection fieldNames = reader.getFieldNames();\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.mergeFactor; i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.mergeFactor; i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames();\n        assertEquals(8, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n\n        // verify that only indexed fields were returned\n        Collection indexedFieldNames = reader.getFieldNames(true);\n        assertEquals(6, indexedFieldNames.size());\n        assertTrue(indexedFieldNames.contains(\"keyword\"));\n        assertTrue(indexedFieldNames.contains(\"text\"));\n        assertTrue(indexedFieldNames.contains(\"unstored\"));\n        assertTrue(indexedFieldNames.contains(\"keyword2\"));\n        assertTrue(indexedFieldNames.contains(\"text2\"));\n        assertTrue(indexedFieldNames.contains(\"unstored2\"));\n\n        // verify that only unindexed fields were returned\n        Collection unindexedFieldNames = reader.getFieldNames(false);\n        assertEquals(2, unindexedFieldNames.size());    // the following fields\n        assertTrue(unindexedFieldNames.contains(\"unindexed\"));\n        assertTrue(unindexedFieldNames.contains(\"unindexed2\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ba3aee3f425e35d39d108f6eeb1b39150d898b4","date":1104356321,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new RAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new RAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection fieldNames = reader.getFieldNames();\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames();\n        assertEquals(8, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n\n        // verify that only indexed fields were returned\n        Collection indexedFieldNames = reader.getFieldNames(true);\n        assertEquals(6, indexedFieldNames.size());\n        assertTrue(indexedFieldNames.contains(\"keyword\"));\n        assertTrue(indexedFieldNames.contains(\"text\"));\n        assertTrue(indexedFieldNames.contains(\"unstored\"));\n        assertTrue(indexedFieldNames.contains(\"keyword2\"));\n        assertTrue(indexedFieldNames.contains(\"text2\"));\n        assertTrue(indexedFieldNames.contains(\"unstored2\"));\n\n        // verify that only unindexed fields were returned\n        Collection unindexedFieldNames = reader.getFieldNames(false);\n        assertEquals(2, unindexedFieldNames.size());    // the following fields\n        assertTrue(unindexedFieldNames.contains(\"unindexed\"));\n        assertTrue(unindexedFieldNames.contains(\"unindexed2\"));\n    }\n\n","bugFix":null,"bugIntro":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d72db039743bd6a2da9be6306f57c71654ca1bf6","date":1173217255,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new RAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n    }\n\n","bugFix":["4ba3aee3f425e35d39d108f6eeb1b39150d898b4","ee75e7ca968b4012951ebb66aa008c27293a1700"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            new StandardAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception\n    {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        // want to get some more segments here\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*writer.getMergeFactor(); i++)\n        {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            new StandardAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            new StandardAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c562f6656e39aab9955008a1760cd0c8765ddb8":["ee75e7ca968b4012951ebb66aa008c27293a1700"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"0a046c0c310bc77931fc8441bd920053b607dd14":["0018e7a0579df5d3de71d0bd878322a7abef04d9","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"4ba3aee3f425e35d39d108f6eeb1b39150d898b4":["aa26be3cd58c6ec8c8480dcb51e2c98fde3ec13d"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"aa26be3cd58c6ec8c8480dcb51e2c98fde3ec13d":["a2785c615142cd1dcec85d0854bf9c3776918e79"],"a2785c615142cd1dcec85d0854bf9c3776918e79":["919e20e2d5af1c2a5c413e98e0637364839873c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["4ba3aee3f425e35d39d108f6eeb1b39150d898b4"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["0a046c0c310bc77931fc8441bd920053b607dd14"],"919e20e2d5af1c2a5c413e98e0637364839873c1":["7c562f6656e39aab9955008a1760cd0c8765ddb8"],"ee75e7ca968b4012951ebb66aa008c27293a1700":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"7c562f6656e39aab9955008a1760cd0c8765ddb8":["919e20e2d5af1c2a5c413e98e0637364839873c1"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4ba3aee3f425e35d39d108f6eeb1b39150d898b4":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"aa26be3cd58c6ec8c8480dcb51e2c98fde3ec13d":["4ba3aee3f425e35d39d108f6eeb1b39150d898b4"],"a2785c615142cd1dcec85d0854bf9c3776918e79":["aa26be3cd58c6ec8c8480dcb51e2c98fde3ec13d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee75e7ca968b4012951ebb66aa008c27293a1700"],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"ee75e7ca968b4012951ebb66aa008c27293a1700":["7c562f6656e39aab9955008a1760cd0c8765ddb8"],"919e20e2d5af1c2a5c413e98e0637364839873c1":["a2785c615142cd1dcec85d0854bf9c3776918e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}