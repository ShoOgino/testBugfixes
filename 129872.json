{"path":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#writeDoc(IndexOutput,int,BytesRef).mjava","commits":[{"id":"de5bbadeb3abac0f650298bff584bd4317bd75aa","date":1331116004,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#writeDoc(IndexOutput,int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  protected void writeDoc(IndexOutput output, int docId, BytesRef spare) throws IOException {\n    int ord = ords[docId] - 1;\n    if (ord != -1) {\n      assert ord >= 0;\n      hash.get(ord, spare);\n\n      switch (type) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        SimpleTextUtil.write(output, spare);\n        break;\n      case FIXED_INTS_16:\n        SimpleTextUtil.write(output,\n            Short.toString(DocValuesArraySource.asShort(spare)), scratch);\n        break;\n      case FIXED_INTS_32:\n        SimpleTextUtil.write(output,\n            Integer.toString(DocValuesArraySource.asInt(spare)), scratch);\n        break;\n      case VAR_INTS:\n      case FIXED_INTS_64:\n        SimpleTextUtil.write(output,\n            Long.toString(DocValuesArraySource.asLong(spare)), scratch);\n        break;\n      case FIXED_INTS_8:\n        assert spare.length == 1 : spare.length;\n        SimpleTextUtil.write(output,\n            Integer.toString(spare.bytes[spare.offset]), scratch);\n        break;\n      case FLOAT_32:\n        float valueFloat = Float.intBitsToFloat(DocValuesArraySource.asInt(spare));\n        SimpleTextUtil.write(output, Float.toString(valueFloat), scratch);\n        break;\n      case FLOAT_64:\n        double valueDouble = Double.longBitsToDouble(DocValuesArraySource\n            .asLong(spare));\n        SimpleTextUtil.write(output, Double.toString(valueDouble), scratch);\n        break;\n      default:\n        throw new IllegalArgumentException(\"unsupported type: \" + type);\n      }\n    } else {\n      switch (type) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        if(zeroBytes == null) {\n          assert fixedSize > 0;\n          zeroBytes = new BytesRef(new byte[fixedSize]);\n        }\n        SimpleTextUtil.write(output, zeroBytes);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        scratch.length = 0;\n        SimpleTextUtil.write(output, scratch);\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        SimpleTextUtil.write(output, ZERO_INT);\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        SimpleTextUtil.write(output, ZERO_DOUBLE);\n        break;\n      default:\n        throw new IllegalArgumentException(\"unsupported type: \" + type);\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#writeDoc(IndexOutput,int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  protected void writeDoc(IndexOutput output, int docId, BytesRef spare) throws IOException {\n    int ord = ords[docId] - 1;\n    if (ord != -1) {\n      assert ord >= 0;\n      hash.get(ord, spare);\n\n      switch (type) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        SimpleTextUtil.write(output, spare);\n        break;\n      case FIXED_INTS_16:\n        SimpleTextUtil.write(output,\n            Short.toString(DocValuesArraySource.asShort(spare)), scratch);\n        break;\n      case FIXED_INTS_32:\n        SimpleTextUtil.write(output,\n            Integer.toString(DocValuesArraySource.asInt(spare)), scratch);\n        break;\n      case VAR_INTS:\n      case FIXED_INTS_64:\n        SimpleTextUtil.write(output,\n            Long.toString(DocValuesArraySource.asLong(spare)), scratch);\n        break;\n      case FIXED_INTS_8:\n        assert spare.length == 1 : spare.length;\n        SimpleTextUtil.write(output,\n            Integer.toString(spare.bytes[spare.offset]), scratch);\n        break;\n      case FLOAT_32:\n        float valueFloat = Float.intBitsToFloat(DocValuesArraySource.asInt(spare));\n        SimpleTextUtil.write(output, Float.toString(valueFloat), scratch);\n        break;\n      case FLOAT_64:\n        double valueDouble = Double.longBitsToDouble(DocValuesArraySource\n            .asLong(spare));\n        SimpleTextUtil.write(output, Double.toString(valueDouble), scratch);\n        break;\n      default:\n        throw new IllegalArgumentException(\"unsupported type: \" + type);\n      }\n    } else {\n      switch (type) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        if(zeroBytes == null) {\n          assert fixedSize > 0;\n          zeroBytes = new BytesRef(new byte[fixedSize]);\n        }\n        SimpleTextUtil.write(output, zeroBytes);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        scratch.length = 0;\n        SimpleTextUtil.write(output, scratch);\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        SimpleTextUtil.write(output, ZERO_INT);\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        SimpleTextUtil.write(output, ZERO_DOUBLE);\n        break;\n      default:\n        throw new IllegalArgumentException(\"unsupported type: \" + type);\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18","date":1339188570,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#writeDoc(IndexOutput,int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#writeDoc(IndexOutput,int,BytesRef).mjava","sourceNew":"  protected void writeDoc(IndexOutput output, int docId, BytesRef spare) throws IOException {\n    int ord = ords[docId] - 1;\n    if (ord != -1) {\n      assert ord >= 0;\n      hash.get(ord, spare);\n\n      switch (type) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        SimpleTextUtil.write(output, spare);\n        break;\n      case FIXED_INTS_16:\n        SimpleTextUtil.write(output,\n            Short.toString(DocValuesArraySource.asShort(spare)), scratch);\n        break;\n      case FIXED_INTS_32:\n        SimpleTextUtil.write(output,\n            Integer.toString(DocValuesArraySource.asInt(spare)), scratch);\n        break;\n      case VAR_INTS:\n      case FIXED_INTS_64:\n        SimpleTextUtil.write(output,\n            Long.toString(DocValuesArraySource.asLong(spare)), scratch);\n        break;\n      case FIXED_INTS_8:\n        assert spare.length == 1 : spare.length;\n        SimpleTextUtil.write(output,\n            Integer.toString(spare.bytes[spare.offset]), scratch);\n        break;\n      case FLOAT_32:\n        float valueFloat = Float.intBitsToFloat(DocValuesArraySource.asInt(spare));\n        SimpleTextUtil.write(output, Float.toString(valueFloat), scratch);\n        break;\n      case FLOAT_64:\n        double valueDouble = Double.longBitsToDouble(DocValuesArraySource\n            .asLong(spare));\n        SimpleTextUtil.write(output, Double.toString(valueDouble), scratch);\n        break;\n      default:\n        throw new IllegalArgumentException(\"unsupported type: \" + type);\n      }\n    } else {\n      switch (type) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        if(zeroBytes == null) {\n          assert valueSize > 0;\n          zeroBytes = new BytesRef(new byte[valueSize]);\n        }\n        SimpleTextUtil.write(output, zeroBytes);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        scratch.length = 0;\n        SimpleTextUtil.write(output, scratch);\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        SimpleTextUtil.write(output, ZERO_INT);\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        SimpleTextUtil.write(output, ZERO_DOUBLE);\n        break;\n      default:\n        throw new IllegalArgumentException(\"unsupported type: \" + type);\n      }\n    }\n\n  }\n\n","sourceOld":"  protected void writeDoc(IndexOutput output, int docId, BytesRef spare) throws IOException {\n    int ord = ords[docId] - 1;\n    if (ord != -1) {\n      assert ord >= 0;\n      hash.get(ord, spare);\n\n      switch (type) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        SimpleTextUtil.write(output, spare);\n        break;\n      case FIXED_INTS_16:\n        SimpleTextUtil.write(output,\n            Short.toString(DocValuesArraySource.asShort(spare)), scratch);\n        break;\n      case FIXED_INTS_32:\n        SimpleTextUtil.write(output,\n            Integer.toString(DocValuesArraySource.asInt(spare)), scratch);\n        break;\n      case VAR_INTS:\n      case FIXED_INTS_64:\n        SimpleTextUtil.write(output,\n            Long.toString(DocValuesArraySource.asLong(spare)), scratch);\n        break;\n      case FIXED_INTS_8:\n        assert spare.length == 1 : spare.length;\n        SimpleTextUtil.write(output,\n            Integer.toString(spare.bytes[spare.offset]), scratch);\n        break;\n      case FLOAT_32:\n        float valueFloat = Float.intBitsToFloat(DocValuesArraySource.asInt(spare));\n        SimpleTextUtil.write(output, Float.toString(valueFloat), scratch);\n        break;\n      case FLOAT_64:\n        double valueDouble = Double.longBitsToDouble(DocValuesArraySource\n            .asLong(spare));\n        SimpleTextUtil.write(output, Double.toString(valueDouble), scratch);\n        break;\n      default:\n        throw new IllegalArgumentException(\"unsupported type: \" + type);\n      }\n    } else {\n      switch (type) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        if(zeroBytes == null) {\n          assert fixedSize > 0;\n          zeroBytes = new BytesRef(new byte[fixedSize]);\n        }\n        SimpleTextUtil.write(output, zeroBytes);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        scratch.length = 0;\n        SimpleTextUtil.write(output, scratch);\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        SimpleTextUtil.write(output, ZERO_INT);\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        SimpleTextUtil.write(output, ZERO_DOUBLE);\n        break;\n      default:\n        throw new IllegalArgumentException(\"unsupported type: \" + type);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#writeDoc(IndexOutput,int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#writeDoc(IndexOutput,int,BytesRef).mjava","sourceNew":"  protected void writeDoc(IndexOutput output, int docId, BytesRef spare) throws IOException {\n    int ord = ords[docId] - 1;\n    if (ord != -1) {\n      assert ord >= 0;\n      hash.get(ord, spare);\n\n      switch (type) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        SimpleTextUtil.write(output, spare);\n        break;\n      case FIXED_INTS_16:\n        SimpleTextUtil.write(output,\n            Short.toString(DocValuesArraySource.asShort(spare)), scratch);\n        break;\n      case FIXED_INTS_32:\n        SimpleTextUtil.write(output,\n            Integer.toString(DocValuesArraySource.asInt(spare)), scratch);\n        break;\n      case VAR_INTS:\n      case FIXED_INTS_64:\n        SimpleTextUtil.write(output,\n            Long.toString(DocValuesArraySource.asLong(spare)), scratch);\n        break;\n      case FIXED_INTS_8:\n        assert spare.length == 1 : spare.length;\n        SimpleTextUtil.write(output,\n            Integer.toString(spare.bytes[spare.offset]), scratch);\n        break;\n      case FLOAT_32:\n        float valueFloat = Float.intBitsToFloat(DocValuesArraySource.asInt(spare));\n        SimpleTextUtil.write(output, Float.toString(valueFloat), scratch);\n        break;\n      case FLOAT_64:\n        double valueDouble = Double.longBitsToDouble(DocValuesArraySource\n            .asLong(spare));\n        SimpleTextUtil.write(output, Double.toString(valueDouble), scratch);\n        break;\n      default:\n        throw new IllegalArgumentException(\"unsupported type: \" + type);\n      }\n    } else {\n      switch (type) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        if(zeroBytes == null) {\n          assert valueSize > 0;\n          zeroBytes = new BytesRef(new byte[valueSize]);\n        }\n        SimpleTextUtil.write(output, zeroBytes);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        scratch.length = 0;\n        SimpleTextUtil.write(output, scratch);\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        SimpleTextUtil.write(output, ZERO_INT);\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        SimpleTextUtil.write(output, ZERO_DOUBLE);\n        break;\n      default:\n        throw new IllegalArgumentException(\"unsupported type: \" + type);\n      }\n    }\n\n  }\n\n","sourceOld":"  protected void writeDoc(IndexOutput output, int docId, BytesRef spare) throws IOException {\n    int ord = ords[docId] - 1;\n    if (ord != -1) {\n      assert ord >= 0;\n      hash.get(ord, spare);\n\n      switch (type) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        SimpleTextUtil.write(output, spare);\n        break;\n      case FIXED_INTS_16:\n        SimpleTextUtil.write(output,\n            Short.toString(DocValuesArraySource.asShort(spare)), scratch);\n        break;\n      case FIXED_INTS_32:\n        SimpleTextUtil.write(output,\n            Integer.toString(DocValuesArraySource.asInt(spare)), scratch);\n        break;\n      case VAR_INTS:\n      case FIXED_INTS_64:\n        SimpleTextUtil.write(output,\n            Long.toString(DocValuesArraySource.asLong(spare)), scratch);\n        break;\n      case FIXED_INTS_8:\n        assert spare.length == 1 : spare.length;\n        SimpleTextUtil.write(output,\n            Integer.toString(spare.bytes[spare.offset]), scratch);\n        break;\n      case FLOAT_32:\n        float valueFloat = Float.intBitsToFloat(DocValuesArraySource.asInt(spare));\n        SimpleTextUtil.write(output, Float.toString(valueFloat), scratch);\n        break;\n      case FLOAT_64:\n        double valueDouble = Double.longBitsToDouble(DocValuesArraySource\n            .asLong(spare));\n        SimpleTextUtil.write(output, Double.toString(valueDouble), scratch);\n        break;\n      default:\n        throw new IllegalArgumentException(\"unsupported type: \" + type);\n      }\n    } else {\n      switch (type) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        if(zeroBytes == null) {\n          assert valueSize > 0;\n          zeroBytes = new BytesRef(new byte[valueSize]);\n        }\n        SimpleTextUtil.write(output, zeroBytes);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        scratch.length = 0;\n        SimpleTextUtil.write(output, scratch);\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        SimpleTextUtil.write(output, ZERO_INT);\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        SimpleTextUtil.write(output, ZERO_DOUBLE);\n        break;\n      default:\n        throw new IllegalArgumentException(\"unsupported type: \" + type);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18":["de5bbadeb3abac0f650298bff584bd4317bd75aa"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["38e3b736c7ca086d61b7dbb841c905ee115490da","cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}