{"path":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/db4o/DB4oStorage#storeEntry(ServerBaseEntry).mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/db4o/DB4oStorage#storeEntry(ServerBaseEntry).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/db4o/DB4oStorage#storeEntry(ServerBaseEntry).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#storeEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public BaseEntry storeEntry(ServerBaseEntry entry) throws StorageException {\n        if (entry == null)\n            throw new StorageException(\"Can not store entry -- is null\");\n\n        if (entry.getFeedId() == null)\n            throw new StorageException(\"can not store entry -- feed id is null\");\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"Storing entry for feed: \" + entry.getFeedId());\n        BaseFeed<BaseFeed, BaseEntry> feed = getFeedOnly(entry.getFeedId(),entry.getServiceType());\n       refreshPersistentObject(feed);\n        try {\n            StringBuilder idBuilder = new StringBuilder(entry.getFeedId());\n            idBuilder.append(this.controller.releaseId());\n            entry.setId(idBuilder.toString());\n        } catch (StorageException e) {\n            LOG.error(\"Can not create uid for entry -- \" + e.getMessage(), e);\n            throw new StorageException(\"Can not create uid for entry -- \"\n                    + e.getMessage(), e);\n\n        }\n        setUpdated(entry, feed);\n        DB4oEntry intEntry = new DB4oEntry();\n        intEntry.setEntry(entry.getEntry());\n        intEntry.setUpdateTime(entry.getUpdated().getValue());\n        intEntry.setFeedId(feed.getId());\n        intEntry.setVersion(entry.getVersion());\n\n       \n        try {\n            this.container.set(feed);\n            this.container.set(intEntry);\n            this.container.commit();\n        } catch (Exception e) {\n            LOG\n                    .error(\"Error occured on persisting changes -- rollback changes\");\n            this.container.rollback();\n            throw new StorageException(\"Can not persist changes -- \"\n                    + e.getMessage(), e);\n        }\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Stored Entry for entryID: \" + entry.getId()\n                    + \" -- feedID: \" + entry.getFeedId());\n        return entry.getEntry();\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#storeEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public BaseEntry storeEntry(ServerBaseEntry entry) throws StorageException {\n        if (entry == null)\n            throw new StorageException(\"Can not store entry -- is null\");\n\n        if (entry.getFeedId() == null)\n            throw new StorageException(\"can not store entry -- feed id is null\");\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"Storing entry for feed: \" + entry.getFeedId());\n        BaseFeed<BaseFeed, BaseEntry> feed = getFeedOnly(entry.getFeedId(),entry.getServiceType());\n       refreshPersistentObject(feed);\n        try {\n            StringBuilder idBuilder = new StringBuilder(entry.getFeedId());\n            idBuilder.append(this.controller.releaseId());\n            entry.setId(idBuilder.toString());\n        } catch (StorageException e) {\n            LOG.error(\"Can not create uid for entry -- \" + e.getMessage(), e);\n            throw new StorageException(\"Can not create uid for entry -- \"\n                    + e.getMessage(), e);\n\n        }\n        setUpdated(entry, feed);\n        DB4oEntry intEntry = new DB4oEntry();\n        intEntry.setEntry(entry.getEntry());\n        intEntry.setUpdateTime(entry.getUpdated().getValue());\n        intEntry.setFeedId(feed.getId());\n        intEntry.setVersion(entry.getVersion());\n\n       \n        try {\n            this.container.set(feed);\n            this.container.set(intEntry);\n            this.container.commit();\n        } catch (Exception e) {\n            LOG\n                    .error(\"Error occured on persisting changes -- rollback changes\");\n            this.container.rollback();\n            throw new StorageException(\"Can not persist changes -- \"\n                    + e.getMessage(), e);\n        }\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Stored Entry for entryID: \" + entry.getId()\n                    + \" -- feedID: \" + entry.getFeedId());\n        return entry.getEntry();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/db4o/DB4oStorage#storeEntry(ServerBaseEntry).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/db4o/DB4oStorage#storeEntry(ServerBaseEntry).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#storeEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public BaseEntry storeEntry(ServerBaseEntry entry) throws StorageException {\n        if (entry == null)\n            throw new StorageException(\"Can not store entry -- is null\");\n\n        if (entry.getFeedId() == null)\n            throw new StorageException(\"can not store entry -- feed id is null\");\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"Storing entry for feed: \" + entry.getFeedId());\n        BaseFeed<BaseFeed, BaseEntry> feed = getFeedOnly(entry.getFeedId(),entry.getServiceType());\n       refreshPersistentObject(feed);\n        try {\n            StringBuilder idBuilder = new StringBuilder(entry.getFeedId());\n            idBuilder.append(this.controller.releaseId());\n            entry.setId(idBuilder.toString());\n        } catch (StorageException e) {\n            LOG.error(\"Can not create uid for entry -- \" + e.getMessage(), e);\n            throw new StorageException(\"Can not create uid for entry -- \"\n                    + e.getMessage(), e);\n\n        }\n        setUpdated(entry, feed);\n        DB4oEntry intEntry = new DB4oEntry();\n        intEntry.setEntry(entry.getEntry());\n        intEntry.setUpdateTime(entry.getUpdated().getValue());\n        intEntry.setFeedId(feed.getId());\n        intEntry.setVersion(entry.getVersion());\n\n       \n        try {\n            this.container.set(feed);\n            this.container.set(intEntry);\n            this.container.commit();\n        } catch (Exception e) {\n            LOG\n                    .error(\"Error occured on persisting changes -- rollback changes\");\n            this.container.rollback();\n            throw new StorageException(\"Can not persist changes -- \"\n                    + e.getMessage(), e);\n        }\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Stored Entry for entryID: \" + entry.getId()\n                    + \" -- feedID: \" + entry.getFeedId());\n        return entry.getEntry();\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#storeEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public BaseEntry storeEntry(ServerBaseEntry entry) throws StorageException {\n        if (entry == null)\n            throw new StorageException(\"Can not store entry -- is null\");\n\n        if (entry.getFeedId() == null)\n            throw new StorageException(\"can not store entry -- feed id is null\");\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"Storing entry for feed: \" + entry.getFeedId());\n        BaseFeed<BaseFeed, BaseEntry> feed = getFeedOnly(entry.getFeedId(),entry.getServiceType());\n       refreshPersistentObject(feed);\n        try {\n            StringBuilder idBuilder = new StringBuilder(entry.getFeedId());\n            idBuilder.append(this.controller.releaseId());\n            entry.setId(idBuilder.toString());\n        } catch (StorageException e) {\n            LOG.error(\"Can not create uid for entry -- \" + e.getMessage(), e);\n            throw new StorageException(\"Can not create uid for entry -- \"\n                    + e.getMessage(), e);\n\n        }\n        setUpdated(entry, feed);\n        DB4oEntry intEntry = new DB4oEntry();\n        intEntry.setEntry(entry.getEntry());\n        intEntry.setUpdateTime(entry.getUpdated().getValue());\n        intEntry.setFeedId(feed.getId());\n        intEntry.setVersion(entry.getVersion());\n\n       \n        try {\n            this.container.set(feed);\n            this.container.set(intEntry);\n            this.container.commit();\n        } catch (Exception e) {\n            LOG\n                    .error(\"Error occured on persisting changes -- rollback changes\");\n            this.container.rollback();\n            throw new StorageException(\"Can not persist changes -- \"\n                    + e.getMessage(), e);\n        }\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Stored Entry for entryID: \" + entry.getId()\n                    + \" -- feedID: \" + entry.getFeedId());\n        return entry.getEntry();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}