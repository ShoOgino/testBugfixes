{"path":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int,FST.BytesReader).mjava","commits":[{"id":"4708e7bf7695781d702d204d178627b4faddc03f","date":1326982060,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int,FST.BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address, FST.BytesReader in) throws IOException {\n    fst.readFirstRealArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    final FST<T>.BytesReader in = fst.getBytesReader(0);\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int,FST.BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int,FST.BytesReader).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address, FST.BytesReader in) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address, FST.BytesReader in) throws IOException {\n    fst.readFirstRealArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int,FST.BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int,FST.BytesReader).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address, FST.BytesReader in) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address, FST.BytesReader in) throws IOException {\n    fst.readFirstRealArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int,FST.BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int,FST.BytesReader).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address, FST.BytesReader in) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address, FST.BytesReader in) throws IOException {\n    fst.readFirstRealArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int,FST.BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int,FST.BytesReader).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address, FST.BytesReader in) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address, FST.BytesReader in) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["4708e7bf7695781d702d204d178627b4faddc03f"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["4708e7bf7695781d702d204d178627b4faddc03f","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["4708e7bf7695781d702d204d178627b4faddc03f","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4708e7bf7695781d702d204d178627b4faddc03f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4708e7bf7695781d702d204d178627b4faddc03f"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"4708e7bf7695781d702d204d178627b4faddc03f":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}