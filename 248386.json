{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#readTermsBlock(IndexInput,FieldInfo,BlockTermState).mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#readTermsBlock(IndexInput,FieldInfo,BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#readTermsBlock(IndexInput,FieldInfo,BlockTermState).mjava","sourceNew":"  /* Reads but does not decode the byte[] blob holding\n     metadata for the current terms block */\n  @Override\n  public void readTermsBlock(IndexInput termsIn, FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n\n    final int numBytes = termsIn.readVInt();\n\n    if (termState.bytes == null) {\n      termState.bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n      termState.bytesReader = new ByteArrayDataInput();\n    } else if (termState.bytes.length < numBytes) {\n      termState.bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n\n    termsIn.readBytes(termState.bytes, 0, numBytes);\n    termState.bytesReader.reset(termState.bytes, 0, numBytes);\n  }\n\n","sourceOld":"  /* Reads but does not decode the byte[] blob holding\n     metadata for the current terms block */\n  @Override\n  public void readTermsBlock(IndexInput termsIn, FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n\n    final int numBytes = termsIn.readVInt();\n\n    if (termState.bytes == null) {\n      termState.bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n      termState.bytesReader = new ByteArrayDataInput();\n    } else if (termState.bytes.length < numBytes) {\n      termState.bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n\n    termsIn.readBytes(termState.bytes, 0, numBytes);\n    termState.bytesReader.reset(termState.bytes, 0, numBytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#readTermsBlock(IndexInput,FieldInfo,BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#readTermsBlock(IndexInput,FieldInfo,BlockTermState).mjava","sourceNew":"  /* Reads but does not decode the byte[] blob holding\n     metadata for the current terms block */\n  @Override\n  public void readTermsBlock(IndexInput termsIn, FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n\n    final int numBytes = termsIn.readVInt();\n\n    if (termState.bytes == null) {\n      termState.bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n      termState.bytesReader = new ByteArrayDataInput();\n    } else if (termState.bytes.length < numBytes) {\n      termState.bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n\n    termsIn.readBytes(termState.bytes, 0, numBytes);\n    termState.bytesReader.reset(termState.bytes, 0, numBytes);\n  }\n\n","sourceOld":"  /* Reads but does not decode the byte[] blob holding\n     metadata for the current terms block */\n  @Override\n  public void readTermsBlock(IndexInput termsIn, FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n\n    final int numBytes = termsIn.readVInt();\n\n    if (termState.bytes == null) {\n      termState.bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n      termState.bytesReader = new ByteArrayDataInput();\n    } else if (termState.bytes.length < numBytes) {\n      termState.bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n\n    termsIn.readBytes(termState.bytes, 0, numBytes);\n    termState.bytesReader.reset(termState.bytes, 0, numBytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#readTermsBlock(IndexInput,FieldInfo,BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#readTermsBlock(IndexInput,FieldInfo,BlockTermState).mjava","sourceNew":"  /* Reads but does not decode the byte[] blob holding\n     metadata for the current terms block */\n  @Override\n  public void readTermsBlock(IndexInput termsIn, FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n\n    final int numBytes = termsIn.readVInt();\n\n    if (termState.bytes == null) {\n      termState.bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n      termState.bytesReader = new ByteArrayDataInput();\n    } else if (termState.bytes.length < numBytes) {\n      termState.bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n\n    termsIn.readBytes(termState.bytes, 0, numBytes);\n    termState.bytesReader.reset(termState.bytes, 0, numBytes);\n  }\n\n","sourceOld":"  /* Reads but does not decode the byte[] blob holding\n     metadata for the current terms block */\n  @Override\n  public void readTermsBlock(IndexInput termsIn, FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n\n    final int numBytes = termsIn.readVInt();\n\n    if (termState.bytes == null) {\n      termState.bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n      termState.bytesReader = new ByteArrayDataInput();\n    } else if (termState.bytes.length < numBytes) {\n      termState.bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n\n    termsIn.readBytes(termState.bytes, 0, numBytes);\n    termState.bytesReader.reset(termState.bytes, 0, numBytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#readTermsBlock(IndexInput,FieldInfo,BlockTermState).mjava","sourceNew":null,"sourceOld":"  /* Reads but does not decode the byte[] blob holding\n     metadata for the current terms block */\n  @Override\n  public void readTermsBlock(IndexInput termsIn, FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n\n    final int numBytes = termsIn.readVInt();\n\n    if (termState.bytes == null) {\n      termState.bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n      termState.bytesReader = new ByteArrayDataInput();\n    } else if (termState.bytes.length < numBytes) {\n      termState.bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n\n    termsIn.readBytes(termState.bytes, 0, numBytes);\n    termState.bytesReader.reset(termState.bytes, 0, numBytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#readTermsBlock(IndexInput,FieldInfo,BlockTermState).mjava","sourceNew":null,"sourceOld":"  /* Reads but does not decode the byte[] blob holding\n     metadata for the current terms block */\n  @Override\n  public void readTermsBlock(IndexInput termsIn, FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n\n    final int numBytes = termsIn.readVInt();\n\n    if (termState.bytes == null) {\n      termState.bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n      termState.bytesReader = new ByteArrayDataInput();\n    } else if (termState.bytes.length < numBytes) {\n      termState.bytes = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n\n    termsIn.readBytes(termState.bytes, 0, numBytes);\n    termState.bytesReader.reset(termState.bytes, 0, numBytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f948dd442d23baa6cbb28daf77c8db78b351329"]},"commit2Childs":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","db4fdbf3d262768eabc027cd8321edca0cd11fa8","2f948dd442d23baa6cbb28daf77c8db78b351329"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"2f948dd442d23baa6cbb28daf77c8db78b351329":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}