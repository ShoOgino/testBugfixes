{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMoreLikeThis().mjava","commits":[{"id":"273169b811d9cb86a3a7828abf9b3ba2bbe9b4a3","date":1423125371,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMoreLikeThis().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMoreLikeThis() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    for (int i=0; i<20; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"testMoreLikeThis\" + i);\n      doc.addField(\"x_s\", \"x_\" + i);\n      doc.addField(\"y_s\", \"y_\" + (i % 3));\n      doc.addField(\"z_s\", \"z_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    // test with mlt.fl having comma separated values\n    SolrQuery q = new SolrQuery(\"*:*\");\n    q.setRows(20);\n    q.setParam(\"mlt\", \"true\");\n    q.setParam(\"mlt.mintf\", \"0\");\n    q.setParam(\"mlt.count\", \"2\");\n    q.setParam(\"mlt.fl\", \"x_s,y_s,z_s\");\n    QueryResponse response = client.query(q);\n    System.out.printf(\"Results: \" + response.getResponse());\n    assertEquals(20, response.getResults().getNumFound());\n    NamedList<Object> moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    assertNotNull(\"MoreLikeThis response should not have been null\", moreLikeThis);\n    for (int i=0; i<20; i++)  {\n      String id = \"testMoreLikeThis\" + i;\n      SolrDocumentList mltResp = (SolrDocumentList) moreLikeThis.get(id);\n      assertNotNull(\"MoreLikeThis response for id=\" + id + \" should not be null\", mltResp);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had numFound=0\", mltResp.getNumFound() > 0);\n    }\n\n    // now test with multiple mlt.fl parameters\n    q = new SolrQuery(\"*:*\");\n    q.setRows(20);\n    q.setParam(\"mlt\", \"true\");\n    q.setParam(\"mlt.mintf\", \"0\");\n    q.setParam(\"mlt.count\", \"2\");\n    q.setParam(\"mlt.fl\", \"x_s\", \"y_s\", \"z_s\");\n    response = client.query(q);\n    System.out.printf(\"Results: \" + response.getResponse());\n    assertEquals(20, response.getResults().getNumFound());\n    moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    assertNotNull(\"MoreLikeThis response should not have been null\", moreLikeThis);\n    for (int i=0; i<20; i++)  {\n      String id = \"testMoreLikeThis\" + i;\n      SolrDocumentList mltResp = (SolrDocumentList) moreLikeThis.get(id);\n      assertNotNull(\"MoreLikeThis response for id=\" + id + \" should not be null\", mltResp);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had numFound=0\", mltResp.getNumFound() > 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb6208100e88a0a3aed656f4989a74e52d3fb6cf","date":1423132104,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMoreLikeThis().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMoreLikeThis().mjava","sourceNew":"  @Test\n  public void testMoreLikeThis() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    for (int i=0; i<20; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"testMoreLikeThis\" + i);\n      doc.addField(\"x_s\", \"x_\" + i);\n      doc.addField(\"y_s\", \"y_\" + (i % 3));\n      doc.addField(\"z_s\", \"z_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    // test with mlt.fl having comma separated values\n    SolrQuery q = new SolrQuery(\"*:*\");\n    q.setRows(20);\n    q.setParam(\"mlt\", \"true\");\n    q.setParam(\"mlt.mintf\", \"0\");\n    q.setParam(\"mlt.count\", \"2\");\n    q.setParam(\"mlt.fl\", \"x_s,y_s,z_s\");\n    QueryResponse response = client.query(q);\n    assertEquals(20, response.getResults().getNumFound());\n    NamedList<Object> moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    assertNotNull(\"MoreLikeThis response should not have been null\", moreLikeThis);\n    for (int i=0; i<20; i++)  {\n      String id = \"testMoreLikeThis\" + i;\n      SolrDocumentList mltResp = (SolrDocumentList) moreLikeThis.get(id);\n      assertNotNull(\"MoreLikeThis response for id=\" + id + \" should not be null\", mltResp);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had numFound=0\", mltResp.getNumFound() > 0);\n    }\n\n    // now test with multiple mlt.fl parameters\n    q = new SolrQuery(\"*:*\");\n    q.setRows(20);\n    q.setParam(\"mlt\", \"true\");\n    q.setParam(\"mlt.mintf\", \"0\");\n    q.setParam(\"mlt.count\", \"2\");\n    q.setParam(\"mlt.fl\", \"x_s\", \"y_s\", \"z_s\");\n    response = client.query(q);\n    assertEquals(20, response.getResults().getNumFound());\n    moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    assertNotNull(\"MoreLikeThis response should not have been null\", moreLikeThis);\n    for (int i=0; i<20; i++)  {\n      String id = \"testMoreLikeThis\" + i;\n      SolrDocumentList mltResp = (SolrDocumentList) moreLikeThis.get(id);\n      assertNotNull(\"MoreLikeThis response for id=\" + id + \" should not be null\", mltResp);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had numFound=0\", mltResp.getNumFound() > 0);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMoreLikeThis() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    for (int i=0; i<20; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"testMoreLikeThis\" + i);\n      doc.addField(\"x_s\", \"x_\" + i);\n      doc.addField(\"y_s\", \"y_\" + (i % 3));\n      doc.addField(\"z_s\", \"z_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    // test with mlt.fl having comma separated values\n    SolrQuery q = new SolrQuery(\"*:*\");\n    q.setRows(20);\n    q.setParam(\"mlt\", \"true\");\n    q.setParam(\"mlt.mintf\", \"0\");\n    q.setParam(\"mlt.count\", \"2\");\n    q.setParam(\"mlt.fl\", \"x_s,y_s,z_s\");\n    QueryResponse response = client.query(q);\n    System.out.printf(\"Results: \" + response.getResponse());\n    assertEquals(20, response.getResults().getNumFound());\n    NamedList<Object> moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    assertNotNull(\"MoreLikeThis response should not have been null\", moreLikeThis);\n    for (int i=0; i<20; i++)  {\n      String id = \"testMoreLikeThis\" + i;\n      SolrDocumentList mltResp = (SolrDocumentList) moreLikeThis.get(id);\n      assertNotNull(\"MoreLikeThis response for id=\" + id + \" should not be null\", mltResp);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had numFound=0\", mltResp.getNumFound() > 0);\n    }\n\n    // now test with multiple mlt.fl parameters\n    q = new SolrQuery(\"*:*\");\n    q.setRows(20);\n    q.setParam(\"mlt\", \"true\");\n    q.setParam(\"mlt.mintf\", \"0\");\n    q.setParam(\"mlt.count\", \"2\");\n    q.setParam(\"mlt.fl\", \"x_s\", \"y_s\", \"z_s\");\n    response = client.query(q);\n    System.out.printf(\"Results: \" + response.getResponse());\n    assertEquals(20, response.getResults().getNumFound());\n    moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    assertNotNull(\"MoreLikeThis response should not have been null\", moreLikeThis);\n    for (int i=0; i<20; i++)  {\n      String id = \"testMoreLikeThis\" + i;\n      SolrDocumentList mltResp = (SolrDocumentList) moreLikeThis.get(id);\n      assertNotNull(\"MoreLikeThis response for id=\" + id + \" should not be null\", mltResp);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had numFound=0\", mltResp.getNumFound() > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c3d088739fca447f2b8455a020c68bc2c74f14b","date":1477570285,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMoreLikeThis().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMoreLikeThis().mjava","sourceNew":"  @Test\n  public void testMoreLikeThis() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    for (int i=0; i<20; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"testMoreLikeThis\" + i);\n      doc.addField(\"x_s\", \"x_\" + i);\n      doc.addField(\"y_s\", \"y_\" + (i % 3));\n      doc.addField(\"z_s\", \"z_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    // test with mlt.fl having comma separated values\n    SolrQuery q = new SolrQuery(\"*:*\");\n    q.setRows(20);\n    q.setMoreLikeThisFields(\"x_s\", \"y_s\", \"z_s\");\n    q.setMoreLikeThisMinTermFreq(0);\n    q.setMoreLikeThisCount(2);\n    QueryResponse response = client.query(q);\n    assertEquals(20, response.getResults().getNumFound());\n    NamedList<SolrDocumentList> moreLikeThis = response.getMoreLikeThis();\n    assertNotNull(\"MoreLikeThis response should not have been null\", moreLikeThis);\n    for (int i=0; i<20; i++)  {\n      String id = \"testMoreLikeThis\" + i;\n      SolrDocumentList mltResp = moreLikeThis.get(id);\n      assertNotNull(\"MoreLikeThis response for id=\" + id + \" should not be null\", mltResp);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had numFound=0\", mltResp.getNumFound() > 0);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had not returned exactly 2 documents\", mltResp.size() == 2);\n    }\n\n    // now test with multiple mlt.fl parameters\n    q = new SolrQuery(\"*:*\");\n    q.setRows(20);\n    q.setParam(\"mlt\", \"true\");\n    q.setParam(\"mlt.fl\", \"x_s\", \"y_s\", \"z_s\");\n    q.setMoreLikeThisMinTermFreq(0);\n    q.setMoreLikeThisCount(2);\n    response = client.query(q);\n    assertEquals(20, response.getResults().getNumFound());\n    moreLikeThis = response.getMoreLikeThis();\n    assertNotNull(\"MoreLikeThis response should not have been null\", moreLikeThis);\n    for (int i=0; i<20; i++)  {\n      String id = \"testMoreLikeThis\" + i;\n      SolrDocumentList mltResp = moreLikeThis.get(id);\n      assertNotNull(\"MoreLikeThis response for id=\" + id + \" should not be null\", mltResp);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had numFound=0\", mltResp.getNumFound() > 0);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had not returned exactly 2 documents\", mltResp.size() == 2);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMoreLikeThis() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    for (int i=0; i<20; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"testMoreLikeThis\" + i);\n      doc.addField(\"x_s\", \"x_\" + i);\n      doc.addField(\"y_s\", \"y_\" + (i % 3));\n      doc.addField(\"z_s\", \"z_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    // test with mlt.fl having comma separated values\n    SolrQuery q = new SolrQuery(\"*:*\");\n    q.setRows(20);\n    q.setParam(\"mlt\", \"true\");\n    q.setParam(\"mlt.mintf\", \"0\");\n    q.setParam(\"mlt.count\", \"2\");\n    q.setParam(\"mlt.fl\", \"x_s,y_s,z_s\");\n    QueryResponse response = client.query(q);\n    assertEquals(20, response.getResults().getNumFound());\n    NamedList<Object> moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    assertNotNull(\"MoreLikeThis response should not have been null\", moreLikeThis);\n    for (int i=0; i<20; i++)  {\n      String id = \"testMoreLikeThis\" + i;\n      SolrDocumentList mltResp = (SolrDocumentList) moreLikeThis.get(id);\n      assertNotNull(\"MoreLikeThis response for id=\" + id + \" should not be null\", mltResp);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had numFound=0\", mltResp.getNumFound() > 0);\n    }\n\n    // now test with multiple mlt.fl parameters\n    q = new SolrQuery(\"*:*\");\n    q.setRows(20);\n    q.setParam(\"mlt\", \"true\");\n    q.setParam(\"mlt.mintf\", \"0\");\n    q.setParam(\"mlt.count\", \"2\");\n    q.setParam(\"mlt.fl\", \"x_s\", \"y_s\", \"z_s\");\n    response = client.query(q);\n    assertEquals(20, response.getResults().getNumFound());\n    moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    assertNotNull(\"MoreLikeThis response should not have been null\", moreLikeThis);\n    for (int i=0; i<20; i++)  {\n      String id = \"testMoreLikeThis\" + i;\n      SolrDocumentList mltResp = (SolrDocumentList) moreLikeThis.get(id);\n      assertNotNull(\"MoreLikeThis response for id=\" + id + \" should not be null\", mltResp);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had numFound=0\", mltResp.getNumFound() > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMoreLikeThis().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMoreLikeThis().mjava","sourceNew":"  @Test\n  public void testMoreLikeThis() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    for (int i=0; i<20; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"testMoreLikeThis\" + i);\n      doc.addField(\"x_s\", \"x_\" + i);\n      doc.addField(\"y_s\", \"y_\" + (i % 3));\n      doc.addField(\"z_s\", \"z_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    // test with mlt.fl having comma separated values\n    SolrQuery q = new SolrQuery(\"*:*\");\n    q.setRows(20);\n    q.setMoreLikeThisFields(\"x_s\", \"y_s\", \"z_s\");\n    q.setMoreLikeThisMinTermFreq(0);\n    q.setMoreLikeThisCount(2);\n    QueryResponse response = client.query(q);\n    assertEquals(20, response.getResults().getNumFound());\n    NamedList<SolrDocumentList> moreLikeThis = response.getMoreLikeThis();\n    assertNotNull(\"MoreLikeThis response should not have been null\", moreLikeThis);\n    for (int i=0; i<20; i++)  {\n      String id = \"testMoreLikeThis\" + i;\n      SolrDocumentList mltResp = moreLikeThis.get(id);\n      assertNotNull(\"MoreLikeThis response for id=\" + id + \" should not be null\", mltResp);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had numFound=0\", mltResp.getNumFound() > 0);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had not returned exactly 2 documents\", mltResp.size() == 2);\n    }\n\n    // now test with multiple mlt.fl parameters\n    q = new SolrQuery(\"*:*\");\n    q.setRows(20);\n    q.setParam(\"mlt\", \"true\");\n    q.setParam(\"mlt.fl\", \"x_s\", \"y_s\", \"z_s\");\n    q.setMoreLikeThisMinTermFreq(0);\n    q.setMoreLikeThisCount(2);\n    response = client.query(q);\n    assertEquals(20, response.getResults().getNumFound());\n    moreLikeThis = response.getMoreLikeThis();\n    assertNotNull(\"MoreLikeThis response should not have been null\", moreLikeThis);\n    for (int i=0; i<20; i++)  {\n      String id = \"testMoreLikeThis\" + i;\n      SolrDocumentList mltResp = moreLikeThis.get(id);\n      assertNotNull(\"MoreLikeThis response for id=\" + id + \" should not be null\", mltResp);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had numFound=0\", mltResp.getNumFound() > 0);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had not returned exactly 2 documents\", mltResp.size() == 2);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMoreLikeThis() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    for (int i=0; i<20; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"testMoreLikeThis\" + i);\n      doc.addField(\"x_s\", \"x_\" + i);\n      doc.addField(\"y_s\", \"y_\" + (i % 3));\n      doc.addField(\"z_s\", \"z_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    // test with mlt.fl having comma separated values\n    SolrQuery q = new SolrQuery(\"*:*\");\n    q.setRows(20);\n    q.setParam(\"mlt\", \"true\");\n    q.setParam(\"mlt.mintf\", \"0\");\n    q.setParam(\"mlt.count\", \"2\");\n    q.setParam(\"mlt.fl\", \"x_s,y_s,z_s\");\n    QueryResponse response = client.query(q);\n    assertEquals(20, response.getResults().getNumFound());\n    NamedList<Object> moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    assertNotNull(\"MoreLikeThis response should not have been null\", moreLikeThis);\n    for (int i=0; i<20; i++)  {\n      String id = \"testMoreLikeThis\" + i;\n      SolrDocumentList mltResp = (SolrDocumentList) moreLikeThis.get(id);\n      assertNotNull(\"MoreLikeThis response for id=\" + id + \" should not be null\", mltResp);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had numFound=0\", mltResp.getNumFound() > 0);\n    }\n\n    // now test with multiple mlt.fl parameters\n    q = new SolrQuery(\"*:*\");\n    q.setRows(20);\n    q.setParam(\"mlt\", \"true\");\n    q.setParam(\"mlt.mintf\", \"0\");\n    q.setParam(\"mlt.count\", \"2\");\n    q.setParam(\"mlt.fl\", \"x_s\", \"y_s\", \"z_s\");\n    response = client.query(q);\n    assertEquals(20, response.getResults().getNumFound());\n    moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    assertNotNull(\"MoreLikeThis response should not have been null\", moreLikeThis);\n    for (int i=0; i<20; i++)  {\n      String id = \"testMoreLikeThis\" + i;\n      SolrDocumentList mltResp = (SolrDocumentList) moreLikeThis.get(id);\n      assertNotNull(\"MoreLikeThis response for id=\" + id + \" should not be null\", mltResp);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had numFound=0\", mltResp.getNumFound() > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e24ef15e7e97c77f0829a62180966fccd2e94b5","date":1477623326,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMoreLikeThis().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMoreLikeThis().mjava","sourceNew":"  @Test\n  public void testMoreLikeThis() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    for (int i=0; i<20; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"testMoreLikeThis\" + i);\n      doc.addField(\"x_s\", \"x_\" + i);\n      doc.addField(\"y_s\", \"y_\" + (i % 3));\n      doc.addField(\"z_s\", \"z_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    // test with mlt.fl having comma separated values\n    SolrQuery q = new SolrQuery(\"*:*\");\n    q.setRows(20);\n    q.setMoreLikeThisFields(\"x_s\", \"y_s\", \"z_s\");\n    q.setMoreLikeThisMinTermFreq(0);\n    q.setMoreLikeThisCount(2);\n    QueryResponse response = client.query(q);\n    assertEquals(20, response.getResults().getNumFound());\n    NamedList<SolrDocumentList> moreLikeThis = response.getMoreLikeThis();\n    assertNotNull(\"MoreLikeThis response should not have been null\", moreLikeThis);\n    for (int i=0; i<20; i++)  {\n      String id = \"testMoreLikeThis\" + i;\n      SolrDocumentList mltResp = moreLikeThis.get(id);\n      assertNotNull(\"MoreLikeThis response for id=\" + id + \" should not be null\", mltResp);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had numFound=0\", mltResp.getNumFound() > 0);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had not returned exactly 2 documents\", mltResp.size() == 2);\n    }\n\n    // now test with multiple mlt.fl parameters\n    q = new SolrQuery(\"*:*\");\n    q.setRows(20);\n    q.setParam(\"mlt\", \"true\");\n    q.setParam(\"mlt.fl\", \"x_s\", \"y_s\", \"z_s\");\n    q.setMoreLikeThisMinTermFreq(0);\n    q.setMoreLikeThisCount(2);\n    response = client.query(q);\n    assertEquals(20, response.getResults().getNumFound());\n    moreLikeThis = response.getMoreLikeThis();\n    assertNotNull(\"MoreLikeThis response should not have been null\", moreLikeThis);\n    for (int i=0; i<20; i++)  {\n      String id = \"testMoreLikeThis\" + i;\n      SolrDocumentList mltResp = moreLikeThis.get(id);\n      assertNotNull(\"MoreLikeThis response for id=\" + id + \" should not be null\", mltResp);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had numFound=0\", mltResp.getNumFound() > 0);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had not returned exactly 2 documents\", mltResp.size() == 2);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMoreLikeThis() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    for (int i=0; i<20; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"testMoreLikeThis\" + i);\n      doc.addField(\"x_s\", \"x_\" + i);\n      doc.addField(\"y_s\", \"y_\" + (i % 3));\n      doc.addField(\"z_s\", \"z_\" + i);\n      client.add(doc);\n    }\n    client.commit();\n\n    // test with mlt.fl having comma separated values\n    SolrQuery q = new SolrQuery(\"*:*\");\n    q.setRows(20);\n    q.setParam(\"mlt\", \"true\");\n    q.setParam(\"mlt.mintf\", \"0\");\n    q.setParam(\"mlt.count\", \"2\");\n    q.setParam(\"mlt.fl\", \"x_s,y_s,z_s\");\n    QueryResponse response = client.query(q);\n    assertEquals(20, response.getResults().getNumFound());\n    NamedList<Object> moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    assertNotNull(\"MoreLikeThis response should not have been null\", moreLikeThis);\n    for (int i=0; i<20; i++)  {\n      String id = \"testMoreLikeThis\" + i;\n      SolrDocumentList mltResp = (SolrDocumentList) moreLikeThis.get(id);\n      assertNotNull(\"MoreLikeThis response for id=\" + id + \" should not be null\", mltResp);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had numFound=0\", mltResp.getNumFound() > 0);\n    }\n\n    // now test with multiple mlt.fl parameters\n    q = new SolrQuery(\"*:*\");\n    q.setRows(20);\n    q.setParam(\"mlt\", \"true\");\n    q.setParam(\"mlt.mintf\", \"0\");\n    q.setParam(\"mlt.count\", \"2\");\n    q.setParam(\"mlt.fl\", \"x_s\", \"y_s\", \"z_s\");\n    response = client.query(q);\n    assertEquals(20, response.getResults().getNumFound());\n    moreLikeThis = (NamedList<Object>) response.getResponse().get(\"moreLikeThis\");\n    assertNotNull(\"MoreLikeThis response should not have been null\", moreLikeThis);\n    for (int i=0; i<20; i++)  {\n      String id = \"testMoreLikeThis\" + i;\n      SolrDocumentList mltResp = (SolrDocumentList) moreLikeThis.get(id);\n      assertNotNull(\"MoreLikeThis response for id=\" + id + \" should not be null\", mltResp);\n      assertTrue(\"MoreLikeThis response for id=\" + id + \" had numFound=0\", mltResp.getNumFound() > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"273169b811d9cb86a3a7828abf9b3ba2bbe9b4a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["cb6208100e88a0a3aed656f4989a74e52d3fb6cf","8c3d088739fca447f2b8455a020c68bc2c74f14b"],"cb6208100e88a0a3aed656f4989a74e52d3fb6cf":["273169b811d9cb86a3a7828abf9b3ba2bbe9b4a3"],"7e24ef15e7e97c77f0829a62180966fccd2e94b5":["cb6208100e88a0a3aed656f4989a74e52d3fb6cf","8c3d088739fca447f2b8455a020c68bc2c74f14b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e24ef15e7e97c77f0829a62180966fccd2e94b5"],"8c3d088739fca447f2b8455a020c68bc2c74f14b":["cb6208100e88a0a3aed656f4989a74e52d3fb6cf"]},"commit2Childs":{"273169b811d9cb86a3a7828abf9b3ba2bbe9b4a3":["cb6208100e88a0a3aed656f4989a74e52d3fb6cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["273169b811d9cb86a3a7828abf9b3ba2bbe9b4a3"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"cb6208100e88a0a3aed656f4989a74e52d3fb6cf":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","7e24ef15e7e97c77f0829a62180966fccd2e94b5","8c3d088739fca447f2b8455a020c68bc2c74f14b"],"7e24ef15e7e97c77f0829a62180966fccd2e94b5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8c3d088739fca447f2b8455a020c68bc2c74f14b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","7e24ef15e7e97c77f0829a62180966fccd2e94b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}