{"path":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","commits":[{"id":"53b6c192847de8643a5da505cc433cbf8476a175","date":1245413392,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","pathOld":"/dev/null","sourceNew":"  public void testInverseRange() throws Exception {\n    NumericRangeFilter f = NumericRangeFilter.newLongRange(\"field8\", 8, new Long(1000L), new Long(-1000L), true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7203bbd52dabe8a6e36d5bc785f4be70ba0f61ff","date":1246028569,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","sourceNew":"  public void testInverseRange() throws Exception {\n    NumericRangeFilter f = NumericRangeFilter.newLongRange(\"field8\", 8, new Long(1000L), new Long(-1000L), true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, new Long(Long.MAX_VALUE), null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, new Long(Long.MIN_VALUE), false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n  }\n\n","sourceOld":"  public void testInverseRange() throws Exception {\n    NumericRangeFilter f = NumericRangeFilter.newLongRange(\"field8\", 8, new Long(1000L), new Long(-1000L), true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a9e462a51fd525218b83cdc33329f5ee00ca20","date":1254431499,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","sourceNew":"  public void testInverseRange() throws Exception {\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n  }\n\n","sourceOld":"  public void testInverseRange() throws Exception {\n    NumericRangeFilter f = NumericRangeFilter.newLongRange(\"field8\", 8, new Long(1000L), new Long(-1000L), true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, new Long(Long.MAX_VALUE), null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, new Long(Long.MIN_VALUE), false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6462d89a9840dd623bfbd36483d84abce975e31a","date":1266751912,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","sourceNew":"  @Test\n  public void testInverseRange() throws Exception {\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n  }\n\n","sourceOld":"  public void testInverseRange() throws Exception {\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","sourceNew":"  @Test\n  public void testInverseRange() throws Exception {\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n  }\n\n","sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6462d89a9840dd623bfbd36483d84abce975e31a":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["7203bbd52dabe8a6e36d5bc785f4be70ba0f61ff"],"53b6c192847de8643a5da505cc433cbf8476a175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7203bbd52dabe8a6e36d5bc785f4be70ba0f61ff":["53b6c192847de8643a5da505cc433cbf8476a175"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6462d89a9840dd623bfbd36483d84abce975e31a"]},"commit2Childs":{"6462d89a9840dd623bfbd36483d84abce975e31a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53b6c192847de8643a5da505cc433cbf8476a175"],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["6462d89a9840dd623bfbd36483d84abce975e31a"],"53b6c192847de8643a5da505cc433cbf8476a175":["7203bbd52dabe8a6e36d5bc785f4be70ba0f61ff"],"7203bbd52dabe8a6e36d5bc785f4be70ba0f61ff":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}