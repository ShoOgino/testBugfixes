{"path":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#termStatistics(Term,TermStates).mjava","commits":[{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#termStatistics(Term,TermStates).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#termStatistics(Term,TermContext).mjava","sourceNew":"      @Override\n      public TermStatistics termStatistics(Term term, TermStates context) throws IOException {\n        assert term != null;\n        long docFreq = 0;\n        long totalTermFreq = 0;\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n\n          final TermStatistics subStats;\n          if (nodeID == myNodeID) {\n            subStats = super.termStatistics(term, context);\n          } else {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            subStats = termStatsCache.get(key);\n          }\n          \n          if (subStats == null) {\n            continue; // term not found\n          }\n        \n          long nodeDocFreq = subStats.docFreq();\n          docFreq += nodeDocFreq;\n          \n          long nodeTotalTermFreq = subStats.totalTermFreq();\n          totalTermFreq += nodeTotalTermFreq;\n        }\n\n        if (docFreq == 0) {\n          return null; // term not found in any node whatsoever\n        } else {\n          return new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n        }\n      }\n\n","sourceOld":"      @Override\n      public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n        assert term != null;\n        long docFreq = 0;\n        long totalTermFreq = 0;\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n\n          final TermStatistics subStats;\n          if (nodeID == myNodeID) {\n            subStats = super.termStatistics(term, context);\n          } else {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            subStats = termStatsCache.get(key);\n          }\n          \n          if (subStats == null) {\n            continue; // term not found\n          }\n        \n          long nodeDocFreq = subStats.docFreq();\n          docFreq += nodeDocFreq;\n          \n          long nodeTotalTermFreq = subStats.totalTermFreq();\n          totalTermFreq += nodeTotalTermFreq;\n        }\n\n        if (docFreq == 0) {\n          return null; // term not found in any node whatsoever\n        } else {\n          return new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#termStatistics(Term,TermStates).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public TermStatistics termStatistics(Term term, TermStates context) throws IOException {\n        assert term != null;\n        long docFreq = 0;\n        long totalTermFreq = 0;\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n\n          final TermStatistics subStats;\n          if (nodeID == myNodeID) {\n            subStats = super.termStatistics(term, context);\n          } else {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            subStats = termStatsCache.get(key);\n          }\n          \n          if (subStats == null) {\n            continue; // term not found\n          }\n        \n          long nodeDocFreq = subStats.docFreq();\n          docFreq += nodeDocFreq;\n          \n          long nodeTotalTermFreq = subStats.totalTermFreq();\n          totalTermFreq += nodeTotalTermFreq;\n        }\n\n        if (docFreq == 0) {\n          return null; // term not found in any node whatsoever\n        } else {\n          return new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19238c4860c45945f1b1e39032e056ce9e266152","date":1568753304,"type":5,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#termStatistics(Term,int,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#termStatistics(Term,TermStates).mjava","sourceNew":"      @Override\n      public TermStatistics termStatistics(Term term, int docFreq, long totalTermFreq) throws IOException {\n        assert term != null;\n        long distributedDocFreq = 0;\n        long distributedTotalTermFreq = 0;\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n\n          final TermStatistics subStats;\n          if (nodeID == myNodeID) {\n            subStats = super.termStatistics(term, docFreq, totalTermFreq);\n          } else {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            subStats = termStatsCache.get(key);\n            if (subStats == null) {\n              continue; // term not found\n            }\n          }\n\n          long nodeDocFreq = subStats.docFreq();\n          distributedDocFreq += nodeDocFreq;\n          \n          long nodeTotalTermFreq = subStats.totalTermFreq();\n          distributedTotalTermFreq += nodeTotalTermFreq;\n        }\n        assert distributedDocFreq > 0;\n        return new TermStatistics(term.bytes(), distributedDocFreq, distributedTotalTermFreq);\n      }\n\n","sourceOld":"      @Override\n      public TermStatistics termStatistics(Term term, TermStates context) throws IOException {\n        assert term != null;\n        long docFreq = 0;\n        long totalTermFreq = 0;\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n\n          final TermStatistics subStats;\n          if (nodeID == myNodeID) {\n            subStats = super.termStatistics(term, context);\n          } else {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            subStats = termStatsCache.get(key);\n          }\n          \n          if (subStats == null) {\n            continue; // term not found\n          }\n        \n          long nodeDocFreq = subStats.docFreq();\n          docFreq += nodeDocFreq;\n          \n          long nodeTotalTermFreq = subStats.totalTermFreq();\n          totalTermFreq += nodeTotalTermFreq;\n        }\n\n        if (docFreq == 0) {\n          return null; // term not found in any node whatsoever\n        } else {\n          return new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19238c4860c45945f1b1e39032e056ce9e266152":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19238c4860c45945f1b1e39032e056ce9e266152"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["19238c4860c45945f1b1e39032e056ce9e266152"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"19238c4860c45945f1b1e39032e056ce9e266152":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}