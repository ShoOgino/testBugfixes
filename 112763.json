{"path":"src/java/org/apache/solr/util/FindClasses[SuggestMissingFactories]#main(String[]).mjava","commits":[{"id":"ff7c5f059d5a1dc549d20043d719ec940ef90bda","date":1194565212,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/FindClasses[SuggestMissingFactories]#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Simple command line test method\n   */\n  public static void main(String[] args)\n    throws ClassNotFoundException, IOException, NoSuchMethodException {\n\n    FindClasses finder = new FindClasses(new File(args[1]));\n    ClassLoader cl = finder.getClassLoader();\n    Class clazz = cl.loadClass(args[0]);\n    if (args.length == 2) {\n            \n      System.out.println(\"Finding all extenders of \" + clazz.getName());\n      for (Class c : finder.findExtends(clazz)) {\n        System.out.println(c.getName());\n      }\n    } else {\n      String methName = args[2];\n      System.out.println(\"Finding all extenders of \" + clazz.getName() +\n                         \" with method: \" + methName);\n            \n      Class[] methArgs = new Class[args.length-3];\n      for (int i = 3; i < args.length; i++) {\n        methArgs[i-3] = cl.loadClass(args[i]);\n      }\n      Map<Class,Class> map = finder.findMethodReturns\n        (finder.findExtends(clazz),methName, methArgs);\n\n      for (Class key : map.keySet()) {\n        System.out.println(key.getName() + \" => \" + map.get(key).getName());\n      }\n           \n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/FindClasses[SuggestMissingFactories]#main(String[]).mjava","pathOld":"src/java/org/apache/solr/util/FindClasses[SuggestMissingFactories]#main(String[]).mjava","sourceNew":"  /**\n   * Simple command line test method\n   */\n  public static void main(String[] args)\n    throws ClassNotFoundException, IOException, NoSuchMethodException {\n\n    FindClasses finder = new FindClasses(new File(args[1]));\n    ClassLoader cl = finder.getClassLoader();\n    Class clazz = cl.loadClass(args[0]);\n    if (args.length == 2) {\n            \n      System.out.println(\"Finding all extenders of \" + clazz.getName());\n      for (Class c : finder.findExtends(clazz)) {\n        System.out.println(c.getName());\n      }\n    } else {\n      String methName = args[2];\n      System.out.println(\"Finding all extenders of \" + clazz.getName() +\n                         \" with method: \" + methName);\n            \n      Class[] methArgs = new Class[args.length-3];\n      for (int i = 3; i < args.length; i++) {\n        methArgs[i-3] = cl.loadClass(args[i]);\n      }\n      Map<Class,Class> map = finder.findMethodReturns\n        (finder.findExtends(clazz),methName, methArgs);\n\n      for (Class key : map.keySet()) {\n        System.out.println(key.getName() + \" => \" + map.get(key).getName());\n      }\n           \n\n    }\n  }\n\n","sourceOld":"  /**\n   * Simple command line test method\n   */\n  public static void main(String[] args)\n    throws ClassNotFoundException, IOException, NoSuchMethodException {\n\n    FindClasses finder = new FindClasses(new File(args[1]));\n    ClassLoader cl = finder.getClassLoader();\n    Class clazz = cl.loadClass(args[0]);\n    if (args.length == 2) {\n            \n      System.out.println(\"Finding all extenders of \" + clazz.getName());\n      for (Class c : finder.findExtends(clazz)) {\n        System.out.println(c.getName());\n      }\n    } else {\n      String methName = args[2];\n      System.out.println(\"Finding all extenders of \" + clazz.getName() +\n                         \" with method: \" + methName);\n            \n      Class[] methArgs = new Class[args.length-3];\n      for (int i = 3; i < args.length; i++) {\n        methArgs[i-3] = cl.loadClass(args[i]);\n      }\n      Map<Class,Class> map = finder.findMethodReturns\n        (finder.findExtends(clazz),methName, methArgs);\n\n      for (Class key : map.keySet()) {\n        System.out.println(key.getName() + \" => \" + map.get(key).getName());\n      }\n           \n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff7c5f059d5a1dc549d20043d719ec940ef90bda":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["ff7c5f059d5a1dc549d20043d719ec940ef90bda"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff7c5f059d5a1dc549d20043d719ec940ef90bda":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ff7c5f059d5a1dc549d20043d719ec940ef90bda"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}