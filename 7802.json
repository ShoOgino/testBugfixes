{"path":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocsAndPositionsEnum.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5f000280bc18391509bbb40c4a2a2c7515d54d3","date":1339339354,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\"), Field.Store.NO));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3ecb222f24c462c1c33887cba7cd1efdb6eedd63","date":1341494670,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\"), Field.Store.NO));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, \"UTF-8\"));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, \"UTF-8\");\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\"), Field.Store.NO));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\"), Field.Store.NO));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, \"UTF-8\"));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, \"UTF-8\");\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\"), Field.Store.NO));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\"), Field.Store.NO));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, \"UTF-8\"));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, \"UTF-8\");\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\"), Field.Store.NO));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, \"UTF-8\"));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, \"UTF-8\");\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\"), Field.Store.NO));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, \"UTF-8\"));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, \"UTF-8\");\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\"), Field.Store.NO));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, \"UTF-8\"));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, \"UTF-8\");\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a3635dad24b0681f0088f2ef680456482cdb451","date":1344025573,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, \"UTF-8\"));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, \"UTF-8\");\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\"), Field.Store.NO));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, \"UTF-8\"));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, \"UTF-8\");\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, \"UTF-8\"));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, \"UTF-8\");\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\"), Field.Store.NO));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, \"UTF-8\"));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, \"UTF-8\");\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, \"UTF-8\"));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, \"UTF-8\");\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\"), Field.Store.NO));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"),\n                                                  false);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, \"UTF-8\"));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, \"UTF-8\");\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0e3c1c21aac8ecf75706605133012833585c7","date":1347535263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(new Term(\"content\", \"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, \"UTF-8\"));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, \"UTF-8\");\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(r.getLiveDocs(),\n                                                  \"content\",\n                                                  new BytesRef(\"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, \"UTF-8\"));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, \"UTF-8\");\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(new Term(\"content\", \"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, StandardCharsets.UTF_8);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(new Term(\"content\", \"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, \"UTF-8\"));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, \"UTF-8\");\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(new Term(\"content\", \"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, StandardCharsets.UTF_8);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(new Term(\"content\", \"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, \"UTF-8\"));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, \"UTF-8\");\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(new Term(\"content\", \"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, StandardCharsets.UTF_8);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.shutdown();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(new Term(\"content\", \"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, StandardCharsets.UTF_8);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(new Term(\"content\", \"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, StandardCharsets.UTF_8);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(new Term(\"content\", \"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, StandardCharsets.UTF_8);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.shutdown();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(new Term(\"content\", \"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, StandardCharsets.UTF_8);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    AtomicReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(new Term(\"content\", \"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, StandardCharsets.UTF_8);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    PostingsEnum tp = r.termDocsEnum(new Term(\"content\", \"a\"), PostingsEnum.FLAG_ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, StandardCharsets.UTF_8);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    DocsAndPositionsEnum tp = r.termPositionsEnum(new Term(\"content\", \"a\"));\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, StandardCharsets.UTF_8);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    PostingsEnum tp = r.postings(new Term(\"content\", \"a\"), PostingsEnum.ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, StandardCharsets.UTF_8);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    PostingsEnum tp = r.termDocsEnum(new Term(\"content\", \"a\"), PostingsEnum.FLAG_ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, StandardCharsets.UTF_8);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    PostingsEnum tp = r.postings(new Term(\"content\", \"a\"), PostingsEnum.ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getIndexReader(), snq);\n    while (pspans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (pspans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if (VERBOSE) {\n          System.out.println(\"doc \" + pspans.docID() + \": span \" + pspans.startPosition()\n              + \" to \" + pspans.endPosition());\n        }\n        Collection<byte[]> payloads = pspans.getPayload();\n        sawZero |= pspans.startPosition() == 0;\n        for (byte[] bytes : payloads) {\n          count++;\n          if (VERBOSE) {\n            System.out.println(\"  payload: \" + new String(bytes, StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getIndexReader(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        count++;\n        sawZero |= spans.startPosition() == 0;\n        // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n        // spans.end());\n      }\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, StandardCharsets.UTF_8);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    PostingsEnum tp = r.postings(new Term(\"content\", \"a\"), PostingsEnum.ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, StandardCharsets.UTF_8);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    PostingsEnum tp = r.postings(new Term(\"content\", \"a\"), PostingsEnum.ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getIndexReader(), snq);\n    while (pspans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (pspans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if (VERBOSE) {\n          System.out.println(\"doc \" + pspans.docID() + \": span \" + pspans.startPosition()\n              + \" to \" + pspans.endPosition());\n        }\n        Collection<byte[]> payloads = pspans.getPayload();\n        sawZero |= pspans.startPosition() == 0;\n        for (byte[] bytes : payloads) {\n          count++;\n          if (VERBOSE) {\n            System.out.println(\"  payload: \" + new String(bytes, StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getIndexReader(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        count++;\n        sawZero |= spans.startPosition() == 0;\n        // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n        // spans.end());\n      }\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, StandardCharsets.UTF_8);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    PostingsEnum tp = r.postings(new Term(\"content\", \"a\"), PostingsEnum.ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    while (pspans.next()) {\n      if (VERBOSE) {\n        System.out.println(\"doc \" + pspans.doc() + \": span \" + pspans.start()\n            + \" to \" + pspans.end());\n      }\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (byte[] bytes : payloads) {\n        count++;\n        if (VERBOSE) {\n          System.out.println(\"  payload: \" + new String(bytes, StandardCharsets.UTF_8));\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n      // spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    // System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, StandardCharsets.UTF_8);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    PostingsEnum tp = r.postings(new Term(\"content\", \"a\"), PostingsEnum.ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    Spans pspans = MultiSpansWrapper.wrap(is.getIndexReader(), snq, collector);\n    while (pspans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (pspans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if (VERBOSE) {\n          System.out.println(\"doc \" + pspans.docID() + \": span \" + pspans.startPosition()\n              + \" to \" + pspans.endPosition());\n        }\n        collector.reset();\n        pspans.collect(collector);\n        Collection<byte[]> payloads = collector.getPayloads();\n        sawZero |= pspans.startPosition() == 0;\n        for (byte[] bytes : payloads) {\n          count++;\n          if (VERBOSE) {\n            System.out.println(\"  payload: \" + new String(bytes, StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(8, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getIndexReader(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        count++;\n        sawZero |= spans.startPosition() == 0;\n        // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n        // spans.end());\n      }\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, StandardCharsets.UTF_8);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(8, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    PostingsEnum tp = r.postings(new Term(\"content\", \"a\"), PostingsEnum.ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    Spans pspans = MultiSpansWrapper.wrap(is.getIndexReader(), snq);\n    while (pspans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (pspans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if (VERBOSE) {\n          System.out.println(\"doc \" + pspans.docID() + \": span \" + pspans.startPosition()\n              + \" to \" + pspans.endPosition());\n        }\n        Collection<byte[]> payloads = pspans.getPayload();\n        sawZero |= pspans.startPosition() == 0;\n        for (byte[] bytes : payloads) {\n          count++;\n          if (VERBOSE) {\n            System.out.println(\"  payload: \" + new String(bytes, StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(5, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getIndexReader(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        count++;\n        sawZero |= spans.startPosition() == 0;\n        // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n        // spans.end());\n      }\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, StandardCharsets.UTF_8);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29aea3139c4326c0501d75d51059855463220279","date":1433952060,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    PostingsEnum tp = r.postings(new Term(\"content\", \"a\"), PostingsEnum.ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    Spans pspans = MultiSpansWrapper.wrap(is.getIndexReader(), snq, SpanWeight.Postings.PAYLOADS);\n    while (pspans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (pspans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if (VERBOSE) {\n          System.out.println(\"doc \" + pspans.docID() + \": span \" + pspans.startPosition()\n              + \" to \" + pspans.endPosition());\n        }\n        collector.reset();\n        pspans.collect(collector);\n        Collection<byte[]> payloads = collector.getPayloads();\n        sawZero |= pspans.startPosition() == 0;\n        for (byte[] bytes : payloads) {\n          count++;\n          if (VERBOSE) {\n            System.out.println(\"  payload: \" + new String(bytes, StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(8, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getIndexReader(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        count++;\n        sawZero |= spans.startPosition() == 0;\n        // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n        // spans.end());\n      }\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, StandardCharsets.UTF_8);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(8, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    PostingsEnum tp = r.postings(new Term(\"content\", \"a\"), PostingsEnum.ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    Spans pspans = MultiSpansWrapper.wrap(is.getIndexReader(), snq, collector);\n    while (pspans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (pspans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if (VERBOSE) {\n          System.out.println(\"doc \" + pspans.docID() + \": span \" + pspans.startPosition()\n              + \" to \" + pspans.endPosition());\n        }\n        collector.reset();\n        pspans.collect(collector);\n        Collection<byte[]> payloads = collector.getPayloads();\n        sawZero |= pspans.startPosition() == 0;\n        for (byte[] bytes : payloads) {\n          count++;\n          if (VERBOSE) {\n            System.out.println(\"  payload: \" + new String(bytes, StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(8, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getIndexReader(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        count++;\n        sawZero |= spans.startPosition() == 0;\n        // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n        // spans.end());\n      }\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, StandardCharsets.UTF_8);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(8, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    PostingsEnum tp = r.postings(new Term(\"content\", \"a\"), PostingsEnum.ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    Spans pspans = MultiSpansWrapper.wrap(is.getIndexReader(), snq, SpanWeight.Postings.PAYLOADS);\n    while (pspans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (pspans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if (VERBOSE) {\n          System.out.println(\"doc \" + pspans.docID() + \": span \" + pspans.startPosition()\n              + \" to \" + pspans.endPosition());\n        }\n        collector.reset();\n        pspans.collect(collector);\n        sawZero |= pspans.startPosition() == 0;\n        for (BytesRef payload : collector.payloads) {\n          count++;\n          if (VERBOSE) {\n            System.out.println(\"  payload: \" + Term.toString(payload));\n          }\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(8, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getIndexReader(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        count++;\n        sawZero |= spans.startPosition() == 0;\n        // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n        // spans.end());\n      }\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    PostingsEnum tp = r.postings(new Term(\"content\", \"a\"), PostingsEnum.ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    Spans pspans = MultiSpansWrapper.wrap(is.getIndexReader(), snq, SpanWeight.Postings.PAYLOADS);\n    while (pspans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (pspans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if (VERBOSE) {\n          System.out.println(\"doc \" + pspans.docID() + \": span \" + pspans.startPosition()\n              + \" to \" + pspans.endPosition());\n        }\n        collector.reset();\n        pspans.collect(collector);\n        Collection<byte[]> payloads = collector.getPayloads();\n        sawZero |= pspans.startPosition() == 0;\n        for (byte[] bytes : payloads) {\n          count++;\n          if (VERBOSE) {\n            System.out.println(\"  payload: \" + new String(bytes, StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(8, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getIndexReader(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        count++;\n        sawZero |= spans.startPosition() == 0;\n        // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n        // spans.end());\n      }\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getTopReaderContext());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes, StandardCharsets.UTF_8);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(8, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":["2d530e71ed32ab23b34ca3fc72b080a554a40404","c8323d210478d76a02372693d254b69aac614689","30de45e50bdc1a79a6797f34dca6271c8866cb6e","7d89d7e4e5101347833eea558851bf4209218619","7f6c85ffa816c86be877aa7a5029a5daa1336e7f","560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = getOnlyLeafReader(readerFromWriter);\n\n    PostingsEnum tp = r.postings(new Term(\"content\", \"a\"), PostingsEnum.ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(getOnlyLeafReader(readerFromWriter));\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    Spans pspans = snq.createWeight(is, false).getSpans(is.getIndexReader().leaves().get(0), SpanWeight.Postings.PAYLOADS);\n    while (pspans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (pspans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if (VERBOSE) {\n          System.out.println(\"doc \" + pspans.docID() + \": span \" + pspans.startPosition()\n              + \" to \" + pspans.endPosition());\n        }\n        collector.reset();\n        pspans.collect(collector);\n        sawZero |= pspans.startPosition() == 0;\n        for (BytesRef payload : collector.payloads) {\n          count++;\n          if (VERBOSE) {\n            System.out.println(\"  payload: \" + Term.toString(payload));\n          }\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(8, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.createWeight(is, false).getSpans(is.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    count = 0;\n    sawZero = false;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        count++;\n        sawZero |= spans.startPosition() == 0;\n        // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n        // spans.end());\n      }\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = SlowCompositeReaderWrapper.wrap(readerFromWriter);\n\n    PostingsEnum tp = r.postings(new Term(\"content\", \"a\"), PostingsEnum.ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(readerFromWriter);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    Spans pspans = MultiSpansWrapper.wrap(is.getIndexReader(), snq, SpanWeight.Postings.PAYLOADS);\n    while (pspans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (pspans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if (VERBOSE) {\n          System.out.println(\"doc \" + pspans.docID() + \": span \" + pspans.startPosition()\n              + \" to \" + pspans.endPosition());\n        }\n        collector.reset();\n        pspans.collect(collector);\n        sawZero |= pspans.startPosition() == 0;\n        for (BytesRef payload : collector.payloads) {\n          count++;\n          if (VERBOSE) {\n            System.out.println(\"  payload: \" + Term.toString(payload));\n          }\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(8, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = MultiSpansWrapper.wrap(is.getIndexReader(), snq);\n    count = 0;\n    sawZero = false;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        count++;\n        sawZero |= spans.startPosition() == 0;\n        // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n        // spans.end());\n      }\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","790e1fde4caa765b3faaad3fbcd25c6973450336","29aea3139c4326c0501d75d51059855463220279","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = getOnlyLeafReader(readerFromWriter);\n\n    PostingsEnum tp = r.postings(new Term(\"content\", \"a\"), PostingsEnum.ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(getOnlyLeafReader(readerFromWriter));\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    Spans pspans = snq.createWeight(is, false, 1f).getSpans(is.getIndexReader().leaves().get(0), SpanWeight.Postings.PAYLOADS);\n    while (pspans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (pspans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if (VERBOSE) {\n          System.out.println(\"doc \" + pspans.docID() + \": span \" + pspans.startPosition()\n              + \" to \" + pspans.endPosition());\n        }\n        collector.reset();\n        pspans.collect(collector);\n        sawZero |= pspans.startPosition() == 0;\n        for (BytesRef payload : collector.payloads) {\n          count++;\n          if (VERBOSE) {\n            System.out.println(\"  payload: \" + Term.toString(payload));\n          }\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(8, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.createWeight(is, false, 1f).getSpans(is.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    count = 0;\n    sawZero = false;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        count++;\n        sawZero |= spans.startPosition() == 0;\n        // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n        // spans.end());\n      }\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = getOnlyLeafReader(readerFromWriter);\n\n    PostingsEnum tp = r.postings(new Term(\"content\", \"a\"), PostingsEnum.ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(getOnlyLeafReader(readerFromWriter));\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    Spans pspans = snq.createWeight(is, false).getSpans(is.getIndexReader().leaves().get(0), SpanWeight.Postings.PAYLOADS);\n    while (pspans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (pspans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if (VERBOSE) {\n          System.out.println(\"doc \" + pspans.docID() + \": span \" + pspans.startPosition()\n              + \" to \" + pspans.endPosition());\n        }\n        collector.reset();\n        pspans.collect(collector);\n        sawZero |= pspans.startPosition() == 0;\n        for (BytesRef payload : collector.payloads) {\n          count++;\n          if (VERBOSE) {\n            System.out.println(\"  payload: \" + Term.toString(payload));\n          }\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(8, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.createWeight(is, false).getSpans(is.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    count = 0;\n    sawZero = false;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        count++;\n        sawZero |= spans.startPosition() == 0;\n        // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n        // spans.end());\n      }\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = getOnlyLeafReader(readerFromWriter);\n\n    PostingsEnum tp = r.postings(new Term(\"content\", \"a\"), PostingsEnum.ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(getOnlyLeafReader(readerFromWriter));\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    Spans pspans = snq.createWeight(is, false, 1f).getSpans(is.getIndexReader().leaves().get(0), SpanWeight.Postings.PAYLOADS);\n    while (pspans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (pspans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if (VERBOSE) {\n          System.out.println(\"doc \" + pspans.docID() + \": span \" + pspans.startPosition()\n              + \" to \" + pspans.endPosition());\n        }\n        collector.reset();\n        pspans.collect(collector);\n        sawZero |= pspans.startPosition() == 0;\n        for (BytesRef payload : collector.payloads) {\n          count++;\n          if (VERBOSE) {\n            System.out.println(\"  payload: \" + Term.toString(payload));\n          }\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(8, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.createWeight(is, false, 1f).getSpans(is.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    count = 0;\n    sawZero = false;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        count++;\n        sawZero |= spans.startPosition() == 0;\n        // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n        // spans.end());\n      }\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = getOnlyLeafReader(readerFromWriter);\n\n    PostingsEnum tp = r.postings(new Term(\"content\", \"a\"), PostingsEnum.ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(getOnlyLeafReader(readerFromWriter));\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    Spans pspans = snq.createWeight(is, false).getSpans(is.getIndexReader().leaves().get(0), SpanWeight.Postings.PAYLOADS);\n    while (pspans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (pspans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if (VERBOSE) {\n          System.out.println(\"doc \" + pspans.docID() + \": span \" + pspans.startPosition()\n              + \" to \" + pspans.endPosition());\n        }\n        collector.reset();\n        pspans.collect(collector);\n        sawZero |= pspans.startPosition() == 0;\n        for (BytesRef payload : collector.payloads) {\n          count++;\n          if (VERBOSE) {\n            System.out.println(\"  payload: \" + Term.toString(payload));\n          }\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(8, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.createWeight(is, false).getSpans(is.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    count = 0;\n    sawZero = false;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        count++;\n        sawZero |= spans.startPosition() == 0;\n        // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n        // spans.end());\n      }\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = getOnlyLeafReader(readerFromWriter);\n\n    PostingsEnum tp = r.postings(new Term(\"content\", \"a\"), PostingsEnum.ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(getOnlyLeafReader(readerFromWriter));\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    Spans pspans = snq.createWeight(is, ScoreMode.COMPLETE_NO_SCORES, 1f).getSpans(is.getIndexReader().leaves().get(0), SpanWeight.Postings.PAYLOADS);\n    while (pspans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (pspans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if (VERBOSE) {\n          System.out.println(\"doc \" + pspans.docID() + \": span \" + pspans.startPosition()\n              + \" to \" + pspans.endPosition());\n        }\n        collector.reset();\n        pspans.collect(collector);\n        sawZero |= pspans.startPosition() == 0;\n        for (BytesRef payload : collector.payloads) {\n          count++;\n          if (VERBOSE) {\n            System.out.println(\"  payload: \" + Term.toString(payload));\n          }\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(8, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.createWeight(is, ScoreMode.COMPLETE_NO_SCORES, 1f).getSpans(is.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    count = 0;\n    sawZero = false;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        count++;\n        sawZero |= spans.startPosition() == 0;\n        // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n        // spans.end());\n      }\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = getOnlyLeafReader(readerFromWriter);\n\n    PostingsEnum tp = r.postings(new Term(\"content\", \"a\"), PostingsEnum.ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(getOnlyLeafReader(readerFromWriter));\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    Spans pspans = snq.createWeight(is, false, 1f).getSpans(is.getIndexReader().leaves().get(0), SpanWeight.Postings.PAYLOADS);\n    while (pspans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (pspans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if (VERBOSE) {\n          System.out.println(\"doc \" + pspans.docID() + \": span \" + pspans.startPosition()\n              + \" to \" + pspans.endPosition());\n        }\n        collector.reset();\n        pspans.collect(collector);\n        sawZero |= pspans.startPosition() == 0;\n        for (BytesRef payload : collector.payloads) {\n          count++;\n          if (VERBOSE) {\n            System.out.println(\"  payload: \" + Term.toString(payload));\n          }\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(8, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.createWeight(is, false, 1f).getSpans(is.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    count = 0;\n    sawZero = false;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        count++;\n        sawZero |= spans.startPosition() == 0;\n        // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n        // spans.end());\n      }\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = getOnlyLeafReader(readerFromWriter);\n\n    PostingsEnum tp = r.postings(new Term(\"content\", \"a\"), PostingsEnum.ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(getOnlyLeafReader(readerFromWriter));\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    Spans pspans = snq.createWeight(is, ScoreMode.COMPLETE_NO_SCORES, 1f).getSpans(is.getIndexReader().leaves().get(0), SpanWeight.Postings.PAYLOADS);\n    while (pspans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (pspans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if (VERBOSE) {\n          System.out.println(\"doc \" + pspans.docID() + \": span \" + pspans.startPosition()\n              + \" to \" + pspans.endPosition());\n        }\n        collector.reset();\n        pspans.collect(collector);\n        sawZero |= pspans.startPosition() == 0;\n        for (BytesRef payload : collector.payloads) {\n          count++;\n          if (VERBOSE) {\n            System.out.println(\"  payload: \" + Term.toString(payload));\n          }\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(8, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.createWeight(is, ScoreMode.COMPLETE_NO_SCORES, 1f).getSpans(is.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    count = 0;\n    sawZero = false;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        count++;\n        sawZero |= spans.startPosition() == 0;\n        // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n        // spans.end());\n      }\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, new MockPayloadAnalyzer());\n    Document doc = new Document();\n    doc.add(new TextField(\"content\", new StringReader(\n        \"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    final IndexReader readerFromWriter = writer.getReader();\n    LeafReader r = getOnlyLeafReader(readerFromWriter);\n\n    PostingsEnum tp = r.postings(new Term(\"content\", \"a\"), PostingsEnum.ALL);\n    \n    int count = 0;\n    assertTrue(tp.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    assertEquals(0, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, tp.nextDoc());\n\n    IndexSearcher is = newSearcher(getOnlyLeafReader(readerFromWriter));\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    if (VERBOSE) {\n      System.out.println(\"\\ngetPayloadSpans test\");\n    }\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    Spans pspans = snq.createWeight(is, false, 1f).getSpans(is.getIndexReader().leaves().get(0), SpanWeight.Postings.PAYLOADS);\n    while (pspans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (pspans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if (VERBOSE) {\n          System.out.println(\"doc \" + pspans.docID() + \": span \" + pspans.startPosition()\n              + \" to \" + pspans.endPosition());\n        }\n        collector.reset();\n        pspans.collect(collector);\n        sawZero |= pspans.startPosition() == 0;\n        for (BytesRef payload : collector.payloads) {\n          count++;\n          if (VERBOSE) {\n            System.out.println(\"  payload: \" + Term.toString(payload));\n          }\n        }\n      }\n    }\n    assertTrue(sawZero);\n    assertEquals(8, count);\n\n    // System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.createWeight(is, false, 1f).getSpans(is.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    count = 0;\n    sawZero = false;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        count++;\n        sawZero |= spans.startPosition() == 0;\n        // System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" +\n        // spans.end());\n      }\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3ecb222f24c462c1c33887cba7cd1efdb6eedd63":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a3635dad24b0681f0088f2ef680456482cdb451":["322360ac5185a8446d3e0b530b2068bef67cd3d5"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["c5f000280bc18391509bbb40c4a2a2c7515d54d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7d89d7e4e5101347833eea558851bf4209218619"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"fab172655716b96f7e42376116235017a922de3a":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["3ecb222f24c462c1c33887cba7cd1efdb6eedd63"],"5eb2511ababf862ea11e10761c70ee560cd84510":["b6a0e3c1c21aac8ecf75706605133012833585c7","7d89d7e4e5101347833eea558851bf4209218619"],"29aea3139c4326c0501d75d51059855463220279":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"c5f000280bc18391509bbb40c4a2a2c7515d54d3":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","3a3635dad24b0681f0088f2ef680456482cdb451"],"7d89d7e4e5101347833eea558851bf4209218619":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"51f5280f31484820499077f41fcdfe92d527d9dc":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"417142ff08fda9cf0b72d5133e63097a166c6458":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","9fc47cb7b4346802411bb432f501ed0673d7119e"],"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["29aea3139c4326c0501d75d51059855463220279"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["04f07771a2a7dd3a395700665ed839c3dae2def2","3ecb222f24c462c1c33887cba7cd1efdb6eedd63"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["3a3635dad24b0681f0088f2ef680456482cdb451"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["3ecb222f24c462c1c33887cba7cd1efdb6eedd63","3a3635dad24b0681f0088f2ef680456482cdb451"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"3ecb222f24c462c1c33887cba7cd1efdb6eedd63":["322360ac5185a8446d3e0b530b2068bef67cd3d5","fe33227f6805edab2036cbb80645cc4e2d1fa424","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"3a3635dad24b0681f0088f2ef680456482cdb451":["8fd5be977c105554c6a7b68afcdbc511439723ab","b6a0e3c1c21aac8ecf75706605133012833585c7","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["51f5280f31484820499077f41fcdfe92d527d9dc"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["3ecb222f24c462c1c33887cba7cd1efdb6eedd63","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["fab172655716b96f7e42376116235017a922de3a","2d530e71ed32ab23b34ca3fc72b080a554a40404"],"fab172655716b96f7e42376116235017a922de3a":[],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["3a3635dad24b0681f0088f2ef680456482cdb451","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"29aea3139c4326c0501d75d51059855463220279":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"c5f000280bc18391509bbb40c4a2a2c7515d54d3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"7d89d7e4e5101347833eea558851bf4209218619":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","5eb2511ababf862ea11e10761c70ee560cd84510"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["9fc47cb7b4346802411bb432f501ed0673d7119e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","417142ff08fda9cf0b72d5133e63097a166c6458"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["29aea3139c4326c0501d75d51059855463220279"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["c5f000280bc18391509bbb40c4a2a2c7515d54d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fab172655716b96f7e42376116235017a922de3a","5eb2511ababf862ea11e10761c70ee560cd84510","8fd5be977c105554c6a7b68afcdbc511439723ab","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}