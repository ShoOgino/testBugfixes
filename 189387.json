{"path":"backwards/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = state.segmentFileName(IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = state.segmentFileName(IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = state.segmentFileName(IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}