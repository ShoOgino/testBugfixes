{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.Mutable#getBitsPerValue().mjava","commits":[{"id":"053891414e8cd30f3b9300a8f4b685d9fd345359","date":1401970642,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.Mutable#getBitsPerValue().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.Reader#getBitsPerValue().mjava","sourceNew":"    /**\n     * @return the number of bits used to store any given value.\n     *         Note: This does not imply that memory usage is\n     *         {@code bitsPerValue * #values} as implementations are free to\n     *         use non-space-optimal packing of bits.\n     */\n    public abstract int getBitsPerValue();\n\n","sourceOld":"    /**\n     * @return the number of bits used to store any given value.\n     *         Note: This does not imply that memory usage is\n     *         {@code bitsPerValue * #values} as implementations are free to\n     *         use non-space-optimal packing of bits.\n     */\n    public abstract int getBitsPerValue();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"053891414e8cd30f3b9300a8f4b685d9fd345359":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["053891414e8cd30f3b9300a8f4b685d9fd345359"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["053891414e8cd30f3b9300a8f4b685d9fd345359"],"053891414e8cd30f3b9300a8f4b685d9fd345359":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}