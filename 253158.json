{"path":"src/java/org/apache/lucene/store/RAMOutputStream#flushBuffer(byte[],int).mjava","commits":[{"id":"15c469602973ef1a33c9a07367a380d278ffab20","date":1074206555,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMOutputStream#flushBuffer(byte[],int).mjava","pathOld":"src/java/org/apache/lucene/store/RAMOutputStream[RAMDirectory]#flushBuffer(byte[],int).mjava","sourceNew":"  public void flushBuffer(byte[] src, int len) {\n    int bufferNumber = pointer/BUFFER_SIZE;\n    int bufferOffset = pointer%BUFFER_SIZE;\n    int bytesInBuffer = BUFFER_SIZE - bufferOffset;\n    int bytesToCopy = bytesInBuffer >= len ? len : bytesInBuffer;\n\n    if (bufferNumber == file.buffers.size())\n      file.buffers.addElement(new byte[BUFFER_SIZE]);\n\n    byte[] buffer = (byte[])file.buffers.elementAt(bufferNumber);\n    System.arraycopy(src, 0, buffer, bufferOffset, bytesToCopy);\n\n    if (bytesToCopy < len) {\t\t\t  // not all in one buffer\n      int srcOffset = bytesToCopy;\n      bytesToCopy = len - bytesToCopy;\t\t  // remaining bytes\n      bufferNumber++;\n      if (bufferNumber == file.buffers.size())\n        file.buffers.addElement(new byte[BUFFER_SIZE]);\n      buffer = (byte[])file.buffers.elementAt(bufferNumber);\n      System.arraycopy(src, srcOffset, buffer, 0, bytesToCopy);\n    }\n    pointer += len;\n    if (pointer > file.length)\n      file.length = pointer;\n\n    file.lastModified = System.currentTimeMillis();\n  }\n\n","sourceOld":"  /** output methods: */\n  public final void flushBuffer(byte[] src, int len) {\n    int bufferNumber = pointer/OutputStream.BUFFER_SIZE;\n    int bufferOffset = pointer%OutputStream.BUFFER_SIZE;\n    int bytesInBuffer = OutputStream.BUFFER_SIZE - bufferOffset;\n    int bytesToCopy = bytesInBuffer >= len ? len : bytesInBuffer;\n\n    if (bufferNumber == file.buffers.size())\n      file.buffers.addElement(new byte[OutputStream.BUFFER_SIZE]);\n\n    byte[] buffer = (byte[])file.buffers.elementAt(bufferNumber);\n    System.arraycopy(src, 0, buffer, bufferOffset, bytesToCopy);\n\n    if (bytesToCopy < len) {\t\t\t  // not all in one buffer\n      int srcOffset = bytesToCopy;\n      bytesToCopy = len - bytesToCopy;\t\t  // remaining bytes\n      bufferNumber++;\n      if (bufferNumber == file.buffers.size())\n        file.buffers.addElement(new byte[OutputStream.BUFFER_SIZE]);\n      buffer = (byte[])file.buffers.elementAt(bufferNumber);\n      System.arraycopy(src, srcOffset, buffer, 0, bytesToCopy);\n    }\n    pointer += len;\n    if (pointer > file.length)\n      file.length = pointer;\n\n    file.lastModified = System.currentTimeMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c493b9789ad0f3deb14aa73312bca235d3dcf889","date":1140541240,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMOutputStream#flushBuffer(byte[],int).mjava","pathOld":"src/java/org/apache/lucene/store/RAMOutputStream#flushBuffer(byte[],int).mjava","sourceNew":"  public void flushBuffer(byte[] src, int len) {\n    byte[] buffer;\n    int bufferPos = 0;\n    while (bufferPos != len) {\n      int bufferNumber = pointer/BUFFER_SIZE;\n      int bufferOffset = pointer%BUFFER_SIZE;\n      int bytesInBuffer = BUFFER_SIZE - bufferOffset;\n      int remainInSrcBuffer = len - bufferPos;\n      int bytesToCopy = bytesInBuffer >= remainInSrcBuffer ? remainInSrcBuffer : bytesInBuffer;\n\n      if (bufferNumber == file.buffers.size()) {\n        buffer = new byte[BUFFER_SIZE];\n        file.buffers.addElement(buffer);\n      } else {\n        buffer = (byte[]) file.buffers.elementAt(bufferNumber);\n      }\n\n      System.arraycopy(src, bufferPos, buffer, bufferOffset, bytesToCopy);\n      bufferPos += bytesToCopy;\n      pointer += bytesToCopy;\n    }\n\n    if (pointer > file.length)\n      file.length = pointer;\n\n    file.lastModified = System.currentTimeMillis();\n  }\n\n","sourceOld":"  public void flushBuffer(byte[] src, int len) {\n    int bufferNumber = pointer/BUFFER_SIZE;\n    int bufferOffset = pointer%BUFFER_SIZE;\n    int bytesInBuffer = BUFFER_SIZE - bufferOffset;\n    int bytesToCopy = bytesInBuffer >= len ? len : bytesInBuffer;\n\n    if (bufferNumber == file.buffers.size())\n      file.buffers.addElement(new byte[BUFFER_SIZE]);\n\n    byte[] buffer = (byte[])file.buffers.elementAt(bufferNumber);\n    System.arraycopy(src, 0, buffer, bufferOffset, bytesToCopy);\n\n    if (bytesToCopy < len) {\t\t\t  // not all in one buffer\n      int srcOffset = bytesToCopy;\n      bytesToCopy = len - bytesToCopy;\t\t  // remaining bytes\n      bufferNumber++;\n      if (bufferNumber == file.buffers.size())\n        file.buffers.addElement(new byte[BUFFER_SIZE]);\n      buffer = (byte[])file.buffers.elementAt(bufferNumber);\n      System.arraycopy(src, srcOffset, buffer, 0, bytesToCopy);\n    }\n    pointer += len;\n    if (pointer > file.length)\n      file.length = pointer;\n\n    file.lastModified = System.currentTimeMillis();\n  }\n\n","bugFix":null,"bugIntro":["f5fd67243f95377506f3ddade7846ad939490bcb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f5fd67243f95377506f3ddade7846ad939490bcb","date":1148396471,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMOutputStream#flushBuffer(byte[],int).mjava","pathOld":"src/java/org/apache/lucene/store/RAMOutputStream#flushBuffer(byte[],int).mjava","sourceNew":"  public void flushBuffer(byte[] src, int len) {\n    byte[] buffer;\n    int bufferPos = 0;\n    while (bufferPos != len) {\n      int bufferNumber = (int)(pointer/BUFFER_SIZE);\n      int bufferOffset = (int)(pointer%BUFFER_SIZE);\n      int bytesInBuffer = BUFFER_SIZE - bufferOffset;\n      int remainInSrcBuffer = len - bufferPos;\n      int bytesToCopy = bytesInBuffer >= remainInSrcBuffer ? remainInSrcBuffer : bytesInBuffer;\n\n      if (bufferNumber == file.buffers.size()) {\n        buffer = new byte[BUFFER_SIZE];\n        file.buffers.addElement(buffer);\n      } else {\n        buffer = (byte[]) file.buffers.elementAt(bufferNumber);\n      }\n\n      System.arraycopy(src, bufferPos, buffer, bufferOffset, bytesToCopy);\n      bufferPos += bytesToCopy;\n      pointer += bytesToCopy;\n    }\n\n    if (pointer > file.length)\n      file.length = pointer;\n\n    file.lastModified = System.currentTimeMillis();\n  }\n\n","sourceOld":"  public void flushBuffer(byte[] src, int len) {\n    byte[] buffer;\n    int bufferPos = 0;\n    while (bufferPos != len) {\n      int bufferNumber = pointer/BUFFER_SIZE;\n      int bufferOffset = pointer%BUFFER_SIZE;\n      int bytesInBuffer = BUFFER_SIZE - bufferOffset;\n      int remainInSrcBuffer = len - bufferPos;\n      int bytesToCopy = bytesInBuffer >= remainInSrcBuffer ? remainInSrcBuffer : bytesInBuffer;\n\n      if (bufferNumber == file.buffers.size()) {\n        buffer = new byte[BUFFER_SIZE];\n        file.buffers.addElement(buffer);\n      } else {\n        buffer = (byte[]) file.buffers.elementAt(bufferNumber);\n      }\n\n      System.arraycopy(src, bufferPos, buffer, bufferOffset, bytesToCopy);\n      bufferPos += bytesToCopy;\n      pointer += bytesToCopy;\n    }\n\n    if (pointer > file.length)\n      file.length = pointer;\n\n    file.lastModified = System.currentTimeMillis();\n  }\n\n","bugFix":["c493b9789ad0f3deb14aa73312bca235d3dcf889"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5657b669e16b843aac69f0ba7e89def1f93f6ea0","date":1164163669,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMOutputStream#flushBuffer(byte[],int).mjava","pathOld":"src/java/org/apache/lucene/store/RAMOutputStream#flushBuffer(byte[],int).mjava","sourceNew":"  public void flushBuffer(byte[] src, int len) {\n    byte[] buffer;\n    int bufferPos = 0;\n    while (bufferPos != len) {\n      int bufferNumber = (int)(pointer/BUFFER_SIZE);\n      int bufferOffset = (int)(pointer%BUFFER_SIZE);\n      int bytesInBuffer = BUFFER_SIZE - bufferOffset;\n      int remainInSrcBuffer = len - bufferPos;\n      int bytesToCopy = bytesInBuffer >= remainInSrcBuffer ? remainInSrcBuffer : bytesInBuffer;\n\n      if (bufferNumber == file.buffers.size())\n        buffer = file.addBuffer(BUFFER_SIZE);\n      else\n        buffer = (byte[]) file.buffers.get(bufferNumber);\n\n      System.arraycopy(src, bufferPos, buffer, bufferOffset, bytesToCopy);\n      bufferPos += bytesToCopy;\n      pointer += bytesToCopy;\n    }\n\n    if (pointer > file.length)\n      file.setLength(pointer);\n\n    file.setLastModified(System.currentTimeMillis());\n  }\n\n","sourceOld":"  public void flushBuffer(byte[] src, int len) {\n    byte[] buffer;\n    int bufferPos = 0;\n    while (bufferPos != len) {\n      int bufferNumber = (int)(pointer/BUFFER_SIZE);\n      int bufferOffset = (int)(pointer%BUFFER_SIZE);\n      int bytesInBuffer = BUFFER_SIZE - bufferOffset;\n      int remainInSrcBuffer = len - bufferPos;\n      int bytesToCopy = bytesInBuffer >= remainInSrcBuffer ? remainInSrcBuffer : bytesInBuffer;\n\n      if (bufferNumber == file.buffers.size()) {\n        buffer = new byte[BUFFER_SIZE];\n        file.buffers.addElement(buffer);\n      } else {\n        buffer = (byte[]) file.buffers.elementAt(bufferNumber);\n      }\n\n      System.arraycopy(src, bufferPos, buffer, bufferOffset, bytesToCopy);\n      bufferPos += bytesToCopy;\n      pointer += bytesToCopy;\n    }\n\n    if (pointer > file.length)\n      file.length = pointer;\n\n    file.lastModified = System.currentTimeMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeefd99c477417e5c7c574228461ebafe92469d4","date":1166460329,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMOutputStream#flushBuffer(byte[],int).mjava","pathOld":"src/java/org/apache/lucene/store/RAMOutputStream#flushBuffer(byte[],int).mjava","sourceNew":"  public void flushBuffer(byte[] src, int len) throws IOException {\n    byte[] buffer;\n    int bufferPos = 0;\n    while (bufferPos != len) {\n      int bufferNumber = (int)(pointer/BUFFER_SIZE);\n      int bufferOffset = (int)(pointer%BUFFER_SIZE);\n      int bytesInBuffer = BUFFER_SIZE - bufferOffset;\n      int remainInSrcBuffer = len - bufferPos;\n      int bytesToCopy = bytesInBuffer >= remainInSrcBuffer ? remainInSrcBuffer : bytesInBuffer;\n\n      if (bufferNumber == file.buffers.size())\n        buffer = file.addBuffer(BUFFER_SIZE);\n      else\n        buffer = (byte[]) file.buffers.get(bufferNumber);\n\n      System.arraycopy(src, bufferPos, buffer, bufferOffset, bytesToCopy);\n      bufferPos += bytesToCopy;\n      pointer += bytesToCopy;\n    }\n\n    if (pointer > file.length)\n      file.setLength(pointer);\n\n    file.setLastModified(System.currentTimeMillis());\n  }\n\n","sourceOld":"  public void flushBuffer(byte[] src, int len) {\n    byte[] buffer;\n    int bufferPos = 0;\n    while (bufferPos != len) {\n      int bufferNumber = (int)(pointer/BUFFER_SIZE);\n      int bufferOffset = (int)(pointer%BUFFER_SIZE);\n      int bytesInBuffer = BUFFER_SIZE - bufferOffset;\n      int remainInSrcBuffer = len - bufferPos;\n      int bytesToCopy = bytesInBuffer >= remainInSrcBuffer ? remainInSrcBuffer : bytesInBuffer;\n\n      if (bufferNumber == file.buffers.size())\n        buffer = file.addBuffer(BUFFER_SIZE);\n      else\n        buffer = (byte[]) file.buffers.get(bufferNumber);\n\n      System.arraycopy(src, bufferPos, buffer, bufferOffset, bytesToCopy);\n      bufferPos += bytesToCopy;\n      pointer += bytesToCopy;\n    }\n\n    if (pointer > file.length)\n      file.setLength(pointer);\n\n    file.setLastModified(System.currentTimeMillis());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8522ae207a56c6db28ca06fe6cc33e70911c3600","date":1173935743,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMOutputStream#flushBuffer(byte[],int,int).mjava","pathOld":"src/java/org/apache/lucene/store/RAMOutputStream#flushBuffer(byte[],int).mjava","sourceNew":"  public void flushBuffer(byte[] src, int offset, int len) throws IOException {\n    byte[] buffer;\n    int bufferPos = 0;\n    while (bufferPos != len) {\n      int bufferNumber = (int)(pointer/BUFFER_SIZE);\n      int bufferOffset = (int)(pointer%BUFFER_SIZE);\n      int bytesInBuffer = BUFFER_SIZE - bufferOffset;\n      int remainInSrcBuffer = len - bufferPos;\n      int bytesToCopy = bytesInBuffer >= remainInSrcBuffer ? remainInSrcBuffer : bytesInBuffer;\n\n      if (bufferNumber == file.buffers.size())\n        buffer = file.addBuffer(BUFFER_SIZE);\n      else\n        buffer = (byte[]) file.buffers.get(bufferNumber);\n\n      System.arraycopy(src, offset + bufferPos, buffer, bufferOffset, bytesToCopy);\n      bufferPos += bytesToCopy;\n      pointer += bytesToCopy;\n    }\n\n    if (pointer > file.length)\n      file.setLength(pointer);\n\n    file.setLastModified(System.currentTimeMillis());\n  }\n\n","sourceOld":"  public void flushBuffer(byte[] src, int len) throws IOException {\n    byte[] buffer;\n    int bufferPos = 0;\n    while (bufferPos != len) {\n      int bufferNumber = (int)(pointer/BUFFER_SIZE);\n      int bufferOffset = (int)(pointer%BUFFER_SIZE);\n      int bytesInBuffer = BUFFER_SIZE - bufferOffset;\n      int remainInSrcBuffer = len - bufferPos;\n      int bytesToCopy = bytesInBuffer >= remainInSrcBuffer ? remainInSrcBuffer : bytesInBuffer;\n\n      if (bufferNumber == file.buffers.size())\n        buffer = file.addBuffer(BUFFER_SIZE);\n      else\n        buffer = (byte[]) file.buffers.get(bufferNumber);\n\n      System.arraycopy(src, bufferPos, buffer, bufferOffset, bytesToCopy);\n      bufferPos += bytesToCopy;\n      pointer += bytesToCopy;\n    }\n\n    if (pointer > file.length)\n      file.setLength(pointer);\n\n    file.setLastModified(System.currentTimeMillis());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeefd99c477417e5c7c574228461ebafe92469d4":["5657b669e16b843aac69f0ba7e89def1f93f6ea0"],"8522ae207a56c6db28ca06fe6cc33e70911c3600":["eeefd99c477417e5c7c574228461ebafe92469d4"],"c493b9789ad0f3deb14aa73312bca235d3dcf889":["15c469602973ef1a33c9a07367a380d278ffab20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5657b669e16b843aac69f0ba7e89def1f93f6ea0":["f5fd67243f95377506f3ddade7846ad939490bcb"],"f5fd67243f95377506f3ddade7846ad939490bcb":["c493b9789ad0f3deb14aa73312bca235d3dcf889"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"15c469602973ef1a33c9a07367a380d278ffab20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"eeefd99c477417e5c7c574228461ebafe92469d4":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"8522ae207a56c6db28ca06fe6cc33e70911c3600":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c493b9789ad0f3deb14aa73312bca235d3dcf889":["f5fd67243f95377506f3ddade7846ad939490bcb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15c469602973ef1a33c9a07367a380d278ffab20"],"5657b669e16b843aac69f0ba7e89def1f93f6ea0":["eeefd99c477417e5c7c574228461ebafe92469d4"],"f5fd67243f95377506f3ddade7846ad939490bcb":["5657b669e16b843aac69f0ba7e89def1f93f6ea0"],"15c469602973ef1a33c9a07367a380d278ffab20":["c493b9789ad0f3deb14aa73312bca235d3dcf889"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}