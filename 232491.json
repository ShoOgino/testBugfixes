{"path":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doDelete(DeleteUpdateCommand,List[Node],ModifiableSolrParams).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doDelete(DeleteUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  private void doDelete(DeleteUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    flushAdds(1, null, null);\n    \n    DeleteUpdateCommand clonedCmd = clone(cmd);\n    DeleteRequest deleteRequest = new DeleteRequest();\n    deleteRequest.cmd = clonedCmd;\n    deleteRequest.params = params;\n    for (Node node : nodes) {\n      List<DeleteRequest> dlist = deletes.get(node);\n      \n      if (dlist == null) {\n        dlist = new ArrayList<DeleteRequest>(2);\n        deletes.put(node, dlist);\n      }\n      dlist.add(deleteRequest);\n    }\n    \n    flushDeletes(maxBufferedDeletesPerServer, null, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doDelete(DeleteUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  private void doDelete(DeleteUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    flushAdds(1, null, null);\n    \n    DeleteUpdateCommand clonedCmd = clone(cmd);\n    DeleteRequest deleteRequest = new DeleteRequest();\n    deleteRequest.cmd = clonedCmd;\n    deleteRequest.params = params;\n    for (Node node : nodes) {\n      List<DeleteRequest> dlist = deletes.get(node);\n      \n      if (dlist == null) {\n        dlist = new ArrayList<DeleteRequest>(2);\n        deletes.put(node, dlist);\n      }\n      dlist.add(deleteRequest);\n    }\n    \n    flushDeletes(maxBufferedDeletesPerServer, null, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doDelete(DeleteUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  private void doDelete(DeleteUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    flushAdds(1, null, null);\n    \n    DeleteUpdateCommand clonedCmd = clone(cmd);\n    DeleteRequest deleteRequest = new DeleteRequest();\n    deleteRequest.cmd = clonedCmd;\n    deleteRequest.params = params;\n    for (Node node : nodes) {\n      List<DeleteRequest> dlist = deletes.get(node);\n      \n      if (dlist == null) {\n        dlist = new ArrayList<DeleteRequest>(2);\n        deletes.put(node, dlist);\n      }\n      dlist.add(deleteRequest);\n    }\n    \n    flushDeletes(maxBufferedDeletesPerServer, null, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d","date":1330786058,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doDelete(DeleteUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doDelete(DeleteUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  private void doDelete(DeleteUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    flushAdds(1);\n    \n    DeleteUpdateCommand clonedCmd = clone(cmd);\n    DeleteRequest deleteRequest = new DeleteRequest();\n    deleteRequest.cmd = clonedCmd;\n    deleteRequest.params = params;\n    for (Node node : nodes) {\n      List<DeleteRequest> dlist = deletes.get(node);\n      \n      if (dlist == null) {\n        dlist = new ArrayList<DeleteRequest>(2);\n        deletes.put(node, dlist);\n      }\n      dlist.add(deleteRequest);\n    }\n    \n    flushDeletes(maxBufferedDeletesPerServer);\n  }\n\n","sourceOld":"  private void doDelete(DeleteUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    flushAdds(1, null, null);\n    \n    DeleteUpdateCommand clonedCmd = clone(cmd);\n    DeleteRequest deleteRequest = new DeleteRequest();\n    deleteRequest.cmd = clonedCmd;\n    deleteRequest.params = params;\n    for (Node node : nodes) {\n      List<DeleteRequest> dlist = deletes.get(node);\n      \n      if (dlist == null) {\n        dlist = new ArrayList<DeleteRequest>(2);\n        deletes.put(node, dlist);\n      }\n      dlist.add(deleteRequest);\n    }\n    \n    flushDeletes(maxBufferedDeletesPerServer, null, null);\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doDelete(DeleteUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doDelete(DeleteUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  private void doDelete(DeleteUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    flushAdds(1);\n    \n    DeleteUpdateCommand clonedCmd = clone(cmd);\n    DeleteRequest deleteRequest = new DeleteRequest();\n    deleteRequest.cmd = clonedCmd;\n    deleteRequest.params = params;\n    for (Node node : nodes) {\n      List<DeleteRequest> dlist = deletes.get(node);\n      \n      if (dlist == null) {\n        dlist = new ArrayList<DeleteRequest>(2);\n        deletes.put(node, dlist);\n      }\n      dlist.add(deleteRequest);\n    }\n    \n    flushDeletes(maxBufferedDeletesPerServer);\n  }\n\n","sourceOld":"  private void doDelete(DeleteUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    flushAdds(1, null, null);\n    \n    DeleteUpdateCommand clonedCmd = clone(cmd);\n    DeleteRequest deleteRequest = new DeleteRequest();\n    deleteRequest.cmd = clonedCmd;\n    deleteRequest.params = params;\n    for (Node node : nodes) {\n      List<DeleteRequest> dlist = deletes.get(node);\n      \n      if (dlist == null) {\n        dlist = new ArrayList<DeleteRequest>(2);\n        deletes.put(node, dlist);\n      }\n      dlist.add(deleteRequest);\n    }\n    \n    flushDeletes(maxBufferedDeletesPerServer, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doDelete(DeleteUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doDelete(DeleteUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  private void doDelete(DeleteUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) {\n    \n    flushAdds(1);\n    \n    DeleteUpdateCommand clonedCmd = clone(cmd);\n    DeleteRequest deleteRequest = new DeleteRequest();\n    deleteRequest.cmd = clonedCmd;\n    deleteRequest.params = params;\n    for (Node node : nodes) {\n      List<DeleteRequest> dlist = deletes.get(node);\n      \n      if (dlist == null) {\n        dlist = new ArrayList<DeleteRequest>(2);\n        deletes.put(node, dlist);\n      }\n      dlist.add(deleteRequest);\n    }\n    \n    flushDeletes(maxBufferedDeletesPerServer);\n  }\n\n","sourceOld":"  private void doDelete(DeleteUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    flushAdds(1);\n    \n    DeleteUpdateCommand clonedCmd = clone(cmd);\n    DeleteRequest deleteRequest = new DeleteRequest();\n    deleteRequest.cmd = clonedCmd;\n    deleteRequest.params = params;\n    for (Node node : nodes) {\n      List<DeleteRequest> dlist = deletes.get(node);\n      \n      if (dlist == null) {\n        dlist = new ArrayList<DeleteRequest>(2);\n        deletes.put(node, dlist);\n      }\n      dlist.add(deleteRequest);\n    }\n    \n    flushDeletes(maxBufferedDeletesPerServer);\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doDelete(DeleteUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doDelete(DeleteUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  private void doDelete(DeleteUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) {\n    \n    flushAdds(1);\n    \n    DeleteUpdateCommand clonedCmd = clone(cmd);\n    DeleteRequest deleteRequest = new DeleteRequest();\n    deleteRequest.cmd = clonedCmd;\n    deleteRequest.params = params;\n    for (Node node : nodes) {\n      List<DeleteRequest> dlist = deletes.get(node);\n      \n      if (dlist == null) {\n        dlist = new ArrayList<DeleteRequest>(2);\n        deletes.put(node, dlist);\n      }\n      dlist.add(deleteRequest);\n    }\n    \n    flushDeletes(maxBufferedDeletesPerServer);\n  }\n\n","sourceOld":"  private void doDelete(DeleteUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    flushAdds(1);\n    \n    DeleteUpdateCommand clonedCmd = clone(cmd);\n    DeleteRequest deleteRequest = new DeleteRequest();\n    deleteRequest.cmd = clonedCmd;\n    deleteRequest.params = params;\n    for (Node node : nodes) {\n      List<DeleteRequest> dlist = deletes.get(node);\n      \n      if (dlist == null) {\n        dlist = new ArrayList<DeleteRequest>(2);\n        deletes.put(node, dlist);\n      }\n      dlist.add(deleteRequest);\n    }\n    \n    flushDeletes(maxBufferedDeletesPerServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91e069c492cf4895697ef7b81df0ffb9a8bd4b48","date":1382134253,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doDelete(DeleteUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":null,"sourceOld":"  private void doDelete(DeleteUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) {\n    \n    flushAdds(1);\n    \n    DeleteUpdateCommand clonedCmd = clone(cmd);\n    DeleteRequest deleteRequest = new DeleteRequest();\n    deleteRequest.cmd = clonedCmd;\n    deleteRequest.params = params;\n    for (Node node : nodes) {\n      List<DeleteRequest> dlist = deletes.get(node);\n      \n      if (dlist == null) {\n        dlist = new ArrayList<DeleteRequest>(2);\n        deletes.put(node, dlist);\n      }\n      dlist.add(deleteRequest);\n    }\n    \n    flushDeletes(maxBufferedDeletesPerServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d"],"d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d9652a1b09ee0e7d6533fdfedf1d7c4d9036b49d","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe33227f6805edab2036cbb80645cc4e2d1fa424","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}