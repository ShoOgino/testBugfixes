{"path":"lucene/sandbox/src/java/org/apache/lucene/document/HalfFloatPoint#halfFloatToShortBits(float).mjava","commits":[{"id":"b5125dbd3878ae934da6ff9243253c2f88b7b6c5","date":1463994309,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/HalfFloatPoint#halfFloatToShortBits(float).mjava","pathOld":"/dev/null","sourceNew":"  static short halfFloatToShortBits(float v) {\n    int floatBits = Float.floatToIntBits(v);\n    int sign = floatBits >>> 31;\n    int exp = (floatBits >>> 23) & 0xff;\n    int mantissa = floatBits & 0x7fffff;\n\n    if (exp == 0xff) {\n      // preserve NaN and Infinity\n      exp = 0x1f;\n      mantissa >>>= (23 - 10);\n    } else if (exp == 0x00) {\n      // denormal float rounded to zero since even the largest denormal float\n      // cannot be represented as a half float\n      mantissa = 0;\n    } else {\n      exp = exp - 127 + 15;\n      if (exp >= 0x1f) {\n        // too large, make it infinity\n        exp = 0x1f;\n        mantissa = 0;\n      } else if (exp <= 0) {\n        // we need to convert to a denormal representation\n        int shift = 23 - 10 - exp + 1;\n        if (shift >= 32) {\n          // need a special case since shifts are mod 32...\n          exp = 0;\n          mantissa = 0;\n        } else {\n          // add the implicit bit\n          mantissa |= 0x800000;\n          mantissa = roundShift(mantissa, shift);\n          exp = mantissa >>> 10;\n          mantissa &= 0x3ff;\n        }\n      } else {\n        mantissa = roundShift((exp << 23) | mantissa, 23 - 10);\n        exp = mantissa >>> 10;\n        mantissa &= 0x3ff;\n      }\n    }\n    return (short) ((sign << 15) | (exp << 10) | mantissa);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","date":1464066565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/HalfFloatPoint#halfFloatToShortBits(float).mjava","pathOld":"/dev/null","sourceNew":"  static short halfFloatToShortBits(float v) {\n    int floatBits = Float.floatToIntBits(v);\n    int sign = floatBits >>> 31;\n    int exp = (floatBits >>> 23) & 0xff;\n    int mantissa = floatBits & 0x7fffff;\n\n    if (exp == 0xff) {\n      // preserve NaN and Infinity\n      exp = 0x1f;\n      mantissa >>>= (23 - 10);\n    } else if (exp == 0x00) {\n      // denormal float rounded to zero since even the largest denormal float\n      // cannot be represented as a half float\n      mantissa = 0;\n    } else {\n      exp = exp - 127 + 15;\n      if (exp >= 0x1f) {\n        // too large, make it infinity\n        exp = 0x1f;\n        mantissa = 0;\n      } else if (exp <= 0) {\n        // we need to convert to a denormal representation\n        int shift = 23 - 10 - exp + 1;\n        if (shift >= 32) {\n          // need a special case since shifts are mod 32...\n          exp = 0;\n          mantissa = 0;\n        } else {\n          // add the implicit bit\n          mantissa |= 0x800000;\n          mantissa = roundShift(mantissa, shift);\n          exp = mantissa >>> 10;\n          mantissa &= 0x3ff;\n        }\n      } else {\n        mantissa = roundShift((exp << 23) | mantissa, 23 - 10);\n        exp = mantissa >>> 10;\n        mantissa &= 0x3ff;\n      }\n    }\n    return (short) ((sign << 15) | (exp << 10) | mantissa);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/HalfFloatPoint#halfFloatToShortBits(float).mjava","pathOld":"/dev/null","sourceNew":"  static short halfFloatToShortBits(float v) {\n    int floatBits = Float.floatToIntBits(v);\n    int sign = floatBits >>> 31;\n    int exp = (floatBits >>> 23) & 0xff;\n    int mantissa = floatBits & 0x7fffff;\n\n    if (exp == 0xff) {\n      // preserve NaN and Infinity\n      exp = 0x1f;\n      mantissa >>>= (23 - 10);\n    } else if (exp == 0x00) {\n      // denormal float rounded to zero since even the largest denormal float\n      // cannot be represented as a half float\n      mantissa = 0;\n    } else {\n      exp = exp - 127 + 15;\n      if (exp >= 0x1f) {\n        // too large, make it infinity\n        exp = 0x1f;\n        mantissa = 0;\n      } else if (exp <= 0) {\n        // we need to convert to a denormal representation\n        int shift = 23 - 10 - exp + 1;\n        if (shift >= 32) {\n          // need a special case since shifts are mod 32...\n          exp = 0;\n          mantissa = 0;\n        } else {\n          // add the implicit bit\n          mantissa |= 0x800000;\n          mantissa = roundShift(mantissa, shift);\n          exp = mantissa >>> 10;\n          mantissa &= 0x3ff;\n        }\n      } else {\n        mantissa = roundShift((exp << 23) | mantissa, 23 - 10);\n        exp = mantissa >>> 10;\n        mantissa &= 0x3ff;\n      }\n    }\n    return (short) ((sign << 15) | (exp << 10) | mantissa);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5125dbd3878ae934da6ff9243253c2f88b7b6c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b5125dbd3878ae934da6ff9243253c2f88b7b6c5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"]},"commit2Childs":{"b5125dbd3878ae934da6ff9243253c2f88b7b6c5":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5125dbd3878ae934da6ff9243253c2f88b7b6c5","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}