{"path":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","commits":[{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","pathOld":"/dev/null","sourceNew":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    writer.setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 3;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List excs = Collections.synchronizedList(new ArrayList());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          public void run() {\n            int count = 0;\n            final Random r = new Random();\n            while(System.currentTimeMillis() < endTime) {\n              try {\n                for(int i=0;i<10;i++) {\n                  writer.addDocument(createDocument(10*count+i, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int i=0;i<5;i++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      sum += new IndexSearcher(r).search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    assertTrue(sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["300334dcd665e74e45788a3884e5989d4b4bab15","a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","sourceNew":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    writer.setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 3;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List excs = Collections.synchronizedList(new ArrayList());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int count = 0;\n            final Random r = new Random();\n            while(System.currentTimeMillis() < endTime) {\n              try {\n                for(int i=0;i<10;i++) {\n                  writer.addDocument(createDocument(10*count+i, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int i=0;i<5;i++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      sum += new IndexSearcher(r).search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    assertTrue(sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    writer.setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 3;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List excs = Collections.synchronizedList(new ArrayList());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          public void run() {\n            int count = 0;\n            final Random r = new Random();\n            while(System.currentTimeMillis() < endTime) {\n              try {\n                for(int i=0;i<10;i++) {\n                  writer.addDocument(createDocument(10*count+i, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int i=0;i<5;i++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      sum += new IndexSearcher(r).search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    assertTrue(sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90cb6b3f4e5652555b614adc90204287fbebd27c","date":1259494272,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","sourceNew":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    writer.setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List excs = Collections.synchronizedList(new ArrayList());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int count = 0;\n            final Random r = new Random();\n            while(System.currentTimeMillis() < endTime) {\n              try {\n                for(int i=0;i<10;i++) {\n                  writer.addDocument(createDocument(10*count+i, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int i=0;i<5;i++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      sum += new IndexSearcher(r).search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    assertTrue(sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    writer.setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 3;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List excs = Collections.synchronizedList(new ArrayList());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int count = 0;\n            final Random r = new Random();\n            while(System.currentTimeMillis() < endTime) {\n              try {\n                for(int i=0;i<10;i++) {\n                  writer.addDocument(createDocument(10*count+i, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int i=0;i<5;i++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      sum += new IndexSearcher(r).search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    assertTrue(sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","sourceNew":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    writer.setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int count = 0;\n            final Random r = new Random();\n            while(System.currentTimeMillis() < endTime) {\n              try {\n                for(int i=0;i<10;i++) {\n                  writer.addDocument(createDocument(10*count+i, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int i=0;i<5;i++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      sum += new IndexSearcher(r).search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    assertTrue(sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    writer.setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List excs = Collections.synchronizedList(new ArrayList());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int count = 0;\n            final Random r = new Random();\n            while(System.currentTimeMillis() < endTime) {\n              try {\n                for(int i=0;i<10;i++) {\n                  writer.addDocument(createDocument(10*count+i, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int i=0;i<5;i++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      sum += new IndexSearcher(r).search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    assertTrue(sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7","date":1261132949,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","sourceNew":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    writer.setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int count = 0;\n            final Random r = new Random();\n            do {\n              try {\n                for(int i=0;i<10;i++) {\n                  writer.addDocument(createDocument(10*count+i, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int i=0;i<5;i++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      sum += new IndexSearcher(r).search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    sum += new IndexSearcher(r).search(q, 10).totalHits;\n\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    writer.setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int count = 0;\n            final Random r = new Random();\n            while(System.currentTimeMillis() < endTime) {\n              try {\n                for(int i=0;i<10;i++) {\n                  writer.addDocument(createDocument(10*count+i, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int i=0;i<5;i++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            }\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      sum += new IndexSearcher(r).search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    assertTrue(sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","sourceNew":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    writer.setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int count = 0;\n            final Random r = new Random();\n            do {\n              try {\n                for(int i=0;i<10;i++) {\n                  writer.addDocument(createDocument(10*count+i, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int i=0;i<5;i++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      sum += new IndexSearcher(r).search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    sum += new IndexSearcher(r).search(q, 10).totalHits;\n\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    writer.setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int count = 0;\n            final Random r = new Random();\n            do {\n              try {\n                for(int i=0;i<10;i++) {\n                  writer.addDocument(createDocument(10*count+i, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int i=0;i<5;i++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      sum += new IndexSearcher(r).search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    sum += new IndexSearcher(r).search(q, 10).totalHits;\n\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","sourceNew":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    writer.setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int count = 0;\n            final Random r = new Random();\n            do {\n              try {\n                for(int i=0;i<10;i++) {\n                  writer.addDocument(createDocument(10*count+i, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int i=0;i<5;i++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      sum += new IndexSearcher(r).search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    sum += new IndexSearcher(r).search(q, 10).totalHits;\n\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    writer.setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int count = 0;\n            final Random r = new Random();\n            do {\n              try {\n                for(int i=0;i<10;i++) {\n                  writer.addDocument(createDocument(10*count+i, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int i=0;i<5;i++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      sum += new IndexSearcher(r).search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    sum += new IndexSearcher(r).search(q, 10).totalHits;\n\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","sourceNew":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int count = 0;\n            final Random r = new Random();\n            do {\n              try {\n                for(int i=0;i<10;i++) {\n                  writer.addDocument(createDocument(10*count+i, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int i=0;i<5;i++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      sum += new IndexSearcher(r).search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    sum += new IndexSearcher(r).search(q, 10).totalHits;\n\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    writer.setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int count = 0;\n            final Random r = new Random();\n            do {\n              try {\n                for(int i=0;i<10;i++) {\n                  writer.addDocument(createDocument(10*count+i, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int i=0;i<5;i++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      sum += new IndexSearcher(r).search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    sum += new IndexSearcher(r).search(q, 10).totalHits;\n\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","sourceNew":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    writer.setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int count = 0;\n            final Random r = new Random();\n            do {\n              try {\n                for(int i=0;i<10;i++) {\n                  writer.addDocument(createDocument(10*count+i, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int i=0;i<5;i++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      sum += new IndexSearcher(r).search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    sum += new IndexSearcher(r).search(q, 10).totalHits;\n\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int count = 0;\n            final Random r = new Random();\n            do {\n              try {\n                for(int i=0;i<10;i++) {\n                  writer.addDocument(createDocument(10*count+i, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int i=0;i<5;i++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      sum += new IndexSearcher(r).search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    sum += new IndexSearcher(r).search(q, 10).totalHits;\n\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","sourceNew":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int count = 0;\n            final Random r = new Random();\n            do {\n              try {\n                for(int i=0;i<10;i++) {\n                  writer.addDocument(createDocument(10*count+i, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int i=0;i<5;i++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      sum += new IndexSearcher(r).search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    sum += new IndexSearcher(r).search(q, 10).totalHits;\n\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    writer.setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int count = 0;\n            final Random r = new Random();\n            do {\n              try {\n                for(int i=0;i<10;i++) {\n                  writer.addDocument(createDocument(10*count+i, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int i=0;i<5;i++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      sum += new IndexSearcher(r).search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    sum += new IndexSearcher(r).search(q, 10).totalHits;\n\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testDuringAddDelete().mjava","sourceNew":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int count = 0;\n            final Random r = new Random();\n            do {\n              try {\n                for(int i=0;i<10;i++) {\n                  writer.addDocument(createDocument(10*count+i, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int i=0;i<5;i++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      sum += new IndexSearcher(r).search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    sum += new IndexSearcher(r).search(q, 10).totalHits;\n\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Stress test reopen during add/delete\n  public void testDuringAddDelete() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n    writer.commit();\n\n    IndexReader r = writer.getReader();\n\n    final int NUM_THREAD = 5;\n    final float SECONDS = 0.5f;\n\n    final long endTime = (long) (System.currentTimeMillis() + 1000.*SECONDS);\n    final List<Throwable> excs = Collections.synchronizedList(new ArrayList<Throwable>());\n\n    final Thread[] threads = new Thread[NUM_THREAD];\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int count = 0;\n            final Random r = new Random();\n            do {\n              try {\n                for(int i=0;i<10;i++) {\n                  writer.addDocument(createDocument(10*count+i, \"test\", 4));\n                }\n                count++;\n                final int limit = count*10;\n                for(int i=0;i<5;i++) {\n                  int x = r.nextInt(limit);\n                  writer.deleteDocuments(new Term(\"field3\", \"b\"+x));\n                }\n              } catch (Throwable t) {\n                excs.add(t);\n                throw new RuntimeException(t);\n              }\n            } while(System.currentTimeMillis() < endTime);\n          }\n        };\n      threads[i].setDaemon(true);\n      threads[i].start();\n    }\n\n    int sum = 0;\n    while(System.currentTimeMillis() < endTime) {\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n      sum += new IndexSearcher(r).search(q, 10).totalHits;\n    }\n\n    for(int i=0;i<NUM_THREAD;i++) {\n      threads[i].join();\n    }\n    // at least search once\n    IndexReader r2 = r.reopen();\n    if (r2 != r) {\n      r.close();\n      r = r2;\n    }\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    sum += new IndexSearcher(r).search(q, 10).totalHits;\n\n    assertTrue(\"no documents found at all\", sum > 0);\n\n    assertEquals(0, excs.size());\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}