{"path":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexBug().mjava","commits":[{"id":"0f423d7b5d458f5b84738366550efaaabc21dfd8","date":1246814176,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexBug().mjava","pathOld":"/dev/null","sourceNew":"  public void testSpanRegexBug() throws CorruptIndexException, IOException {\n    createRAMDirectories();\n\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"a.*\"));\n    SpanRegexQuery stq = new SpanRegexQuery(new Term(\"field\", \"b.*\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] { srq, stq }, 6,\n        true);\n\n    // 1. Search the same store which works\n    IndexSearcher[] arrSearcher = new IndexSearcher[2];\n    arrSearcher[0] = new IndexSearcher(indexStoreA);\n    arrSearcher[1] = new IndexSearcher(indexStoreB);\n    MultiSearcher searcher = new MultiSearcher(arrSearcher);\n    Hits hits = searcher.search(query);\n    arrSearcher[0].close();\n    arrSearcher[1].close();\n\n    // Will fail here\n    // We expect 2 but only one matched\n    // The rewriter function only write it once on the first IndexSearcher\n    // So it's using term: a1 b1 to search on the second IndexSearcher\n    // As a result, it won't match the document in the second IndexSearcher\n    assertEquals(2, hits.length());\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexBug().mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexBug().mjava","sourceNew":"  public void testSpanRegexBug() throws CorruptIndexException, IOException {\n    createRAMDirectories();\n\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"a.*\"));\n    SpanRegexQuery stq = new SpanRegexQuery(new Term(\"field\", \"b.*\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] { srq, stq }, 6,\n        true);\n\n    // 1. Search the same store which works\n    IndexSearcher[] arrSearcher = new IndexSearcher[2];\n    arrSearcher[0] = new IndexSearcher(indexStoreA, true);\n    arrSearcher[1] = new IndexSearcher(indexStoreB, true);\n    MultiSearcher searcher = new MultiSearcher(arrSearcher);\n    Hits hits = searcher.search(query);\n    arrSearcher[0].close();\n    arrSearcher[1].close();\n\n    // Will fail here\n    // We expect 2 but only one matched\n    // The rewriter function only write it once on the first IndexSearcher\n    // So it's using term: a1 b1 to search on the second IndexSearcher\n    // As a result, it won't match the document in the second IndexSearcher\n    assertEquals(2, hits.length());\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","sourceOld":"  public void testSpanRegexBug() throws CorruptIndexException, IOException {\n    createRAMDirectories();\n\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"a.*\"));\n    SpanRegexQuery stq = new SpanRegexQuery(new Term(\"field\", \"b.*\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] { srq, stq }, 6,\n        true);\n\n    // 1. Search the same store which works\n    IndexSearcher[] arrSearcher = new IndexSearcher[2];\n    arrSearcher[0] = new IndexSearcher(indexStoreA);\n    arrSearcher[1] = new IndexSearcher(indexStoreB);\n    MultiSearcher searcher = new MultiSearcher(arrSearcher);\n    Hits hits = searcher.search(query);\n    arrSearcher[0].close();\n    arrSearcher[1].close();\n\n    // Will fail here\n    // We expect 2 but only one matched\n    // The rewriter function only write it once on the first IndexSearcher\n    // So it's using term: a1 b1 to search on the second IndexSearcher\n    // As a result, it won't match the document in the second IndexSearcher\n    assertEquals(2, hits.length());\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexBug().mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexBug().mjava","sourceNew":"  public void testSpanRegexBug() throws CorruptIndexException, IOException {\n    createRAMDirectories();\n\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"a.*\"));\n    SpanRegexQuery stq = new SpanRegexQuery(new Term(\"field\", \"b.*\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] { srq, stq }, 6,\n        true);\n\n    // 1. Search the same store which works\n    IndexSearcher[] arrSearcher = new IndexSearcher[2];\n    arrSearcher[0] = new IndexSearcher(indexStoreA, true);\n    arrSearcher[1] = new IndexSearcher(indexStoreB, true);\n    MultiSearcher searcher = new MultiSearcher(arrSearcher);\n    int numHits = searcher.search(query, null, 1000).totalHits;\n    arrSearcher[0].close();\n    arrSearcher[1].close();\n\n    // Will fail here\n    // We expect 2 but only one matched\n    // The rewriter function only write it once on the first IndexSearcher\n    // So it's using term: a1 b1 to search on the second IndexSearcher\n    // As a result, it won't match the document in the second IndexSearcher\n    assertEquals(2, numHits);\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","sourceOld":"  public void testSpanRegexBug() throws CorruptIndexException, IOException {\n    createRAMDirectories();\n\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"a.*\"));\n    SpanRegexQuery stq = new SpanRegexQuery(new Term(\"field\", \"b.*\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] { srq, stq }, 6,\n        true);\n\n    // 1. Search the same store which works\n    IndexSearcher[] arrSearcher = new IndexSearcher[2];\n    arrSearcher[0] = new IndexSearcher(indexStoreA, true);\n    arrSearcher[1] = new IndexSearcher(indexStoreB, true);\n    MultiSearcher searcher = new MultiSearcher(arrSearcher);\n    Hits hits = searcher.search(query);\n    arrSearcher[0].close();\n    arrSearcher[1].close();\n\n    // Will fail here\n    // We expect 2 but only one matched\n    // The rewriter function only write it once on the first IndexSearcher\n    // So it's using term: a1 b1 to search on the second IndexSearcher\n    // As a result, it won't match the document in the second IndexSearcher\n    assertEquals(2, hits.length());\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexBug().mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegexBug().mjava","sourceNew":"  public void testSpanRegexBug() throws CorruptIndexException, IOException {\n    createRAMDirectories();\n\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"a.*\"));\n    SpanRegexQuery stq = new SpanRegexQuery(new Term(\"field\", \"b.*\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] { srq, stq }, 6,\n        true);\n\n    // 1. Search the same store which works\n    IndexSearcher[] arrSearcher = new IndexSearcher[2];\n    arrSearcher[0] = new IndexSearcher(indexStoreA, true);\n    arrSearcher[1] = new IndexSearcher(indexStoreB, true);\n    MultiSearcher searcher = new MultiSearcher(arrSearcher);\n    int numHits = searcher.search(query, null, 1000).totalHits;\n    arrSearcher[0].close();\n    arrSearcher[1].close();\n\n    // Will fail here\n    // We expect 2 but only one matched\n    // The rewriter function only write it once on the first IndexSearcher\n    // So it's using term: a1 b1 to search on the second IndexSearcher\n    // As a result, it won't match the document in the second IndexSearcher\n    assertEquals(2, numHits);\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","sourceOld":"  public void testSpanRegexBug() throws CorruptIndexException, IOException {\n    createRAMDirectories();\n\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"a.*\"));\n    SpanRegexQuery stq = new SpanRegexQuery(new Term(\"field\", \"b.*\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] { srq, stq }, 6,\n        true);\n\n    // 1. Search the same store which works\n    IndexSearcher[] arrSearcher = new IndexSearcher[2];\n    arrSearcher[0] = new IndexSearcher(indexStoreA, true);\n    arrSearcher[1] = new IndexSearcher(indexStoreB, true);\n    MultiSearcher searcher = new MultiSearcher(arrSearcher);\n    int numHits = searcher.search(query, null, 1000).totalHits;\n    arrSearcher[0].close();\n    arrSearcher[1].close();\n\n    // Will fail here\n    // We expect 2 but only one matched\n    // The rewriter function only write it once on the first IndexSearcher\n    // So it's using term: a1 b1 to search on the second IndexSearcher\n    // As a result, it won't match the document in the second IndexSearcher\n    assertEquals(2, numHits);\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f423d7b5d458f5b84738366550efaaabc21dfd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["4256bc1b3c94786287ccdfc751230374521843cf"],"4256bc1b3c94786287ccdfc751230374521843cf":["0f423d7b5d458f5b84738366550efaaabc21dfd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f423d7b5d458f5b84738366550efaaabc21dfd8"],"0f423d7b5d458f5b84738366550efaaabc21dfd8":["4256bc1b3c94786287ccdfc751230374521843cf"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4256bc1b3c94786287ccdfc751230374521843cf":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}