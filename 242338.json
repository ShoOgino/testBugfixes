{"path":"src/java/org/apache/lucene/index/SnapshotDeletionPolicy#snapshot().mjava","commits":[{"id":"3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5","date":1196805804,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SnapshotDeletionPolicy#snapshot().mjava","pathOld":"/dev/null","sourceNew":"  /** Take a snapshot of the most recent commit to the\n   *  index.  You must call release() to free this snapshot.\n   *  Note that while the snapshot is held, the files it\n   *  references will not be deleted, which will consume\n   *  additional disk space in your index. If you take a\n   *  snapshot at a particularly bad time (say just before\n   *  you call optimize()) then in the worst case this could\n   *  consume an extra 1X of your total index size, until\n   *  you release the snapshot. */\n  public synchronized IndexCommitPoint snapshot() {\n    if (snapshot == null)\n      snapshot = lastCommit;\n    else\n      throw new IllegalStateException(\"snapshot is already set; please call release() first\");\n    return snapshot;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d60f4e15b3e2fb549c23c8f2096249d439876df8","date":1204035825,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SnapshotDeletionPolicy#snapshot().mjava","pathOld":"src/java/org/apache/lucene/index/SnapshotDeletionPolicy#snapshot().mjava","sourceNew":"  /** Take a snapshot of the most recent commit to the\n   *  index.  You must call release() to free this snapshot.\n   *  Note that while the snapshot is held, the files it\n   *  references will not be deleted, which will consume\n   *  additional disk space in your index. If you take a\n   *  snapshot at a particularly bad time (say just before\n   *  you call optimize()) then in the worst case this could\n   *  consume an extra 1X of your total index size, until\n   *  you release the snapshot. */\n  public synchronized IndexCommitPoint snapshot() {\n    if (snapshot == null)\n      snapshot = lastCommit.getSegmentsFileName();\n    else\n      throw new IllegalStateException(\"snapshot is already set; please call release() first\");\n    return lastCommit;\n  }\n\n","sourceOld":"  /** Take a snapshot of the most recent commit to the\n   *  index.  You must call release() to free this snapshot.\n   *  Note that while the snapshot is held, the files it\n   *  references will not be deleted, which will consume\n   *  additional disk space in your index. If you take a\n   *  snapshot at a particularly bad time (say just before\n   *  you call optimize()) then in the worst case this could\n   *  consume an extra 1X of your total index size, until\n   *  you release the snapshot. */\n  public synchronized IndexCommitPoint snapshot() {\n    if (snapshot == null)\n      snapshot = lastCommit;\n    else\n      throw new IllegalStateException(\"snapshot is already set; please call release() first\");\n    return snapshot;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a1559506fd82ede79bd8e60facef2a57524e175","date":1204808228,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SnapshotDeletionPolicy#snapshot().mjava","pathOld":"src/java/org/apache/lucene/index/SnapshotDeletionPolicy#snapshot().mjava","sourceNew":"  /** Take a snapshot of the most recent commit to the\n   *  index.  You must call release() to free this snapshot.\n   *  Note that while the snapshot is held, the files it\n   *  references will not be deleted, which will consume\n   *  additional disk space in your index. If you take a\n   *  snapshot at a particularly bad time (say just before\n   *  you call optimize()) then in the worst case this could\n   *  consume an extra 1X of your total index size, until\n   *  you release the snapshot. */\n  // TODO 3.0: change this to return IndexCommit instead\n  public synchronized IndexCommitPoint snapshot() {\n    if (snapshot == null)\n      snapshot = lastCommit.getSegmentsFileName();\n    else\n      throw new IllegalStateException(\"snapshot is already set; please call release() first\");\n    return lastCommit;\n  }\n\n","sourceOld":"  /** Take a snapshot of the most recent commit to the\n   *  index.  You must call release() to free this snapshot.\n   *  Note that while the snapshot is held, the files it\n   *  references will not be deleted, which will consume\n   *  additional disk space in your index. If you take a\n   *  snapshot at a particularly bad time (say just before\n   *  you call optimize()) then in the worst case this could\n   *  consume an extra 1X of your total index size, until\n   *  you release the snapshot. */\n  public synchronized IndexCommitPoint snapshot() {\n    if (snapshot == null)\n      snapshot = lastCommit.getSegmentsFileName();\n    else\n      throw new IllegalStateException(\"snapshot is already set; please call release() first\");\n    return lastCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1","date":1255502337,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SnapshotDeletionPolicy#snapshot().mjava","pathOld":"src/java/org/apache/lucene/index/SnapshotDeletionPolicy#snapshot().mjava","sourceNew":"  /** Take a snapshot of the most recent commit to the\n   *  index.  You must call release() to free this snapshot.\n   *  Note that while the snapshot is held, the files it\n   *  references will not be deleted, which will consume\n   *  additional disk space in your index. If you take a\n   *  snapshot at a particularly bad time (say just before\n   *  you call optimize()) then in the worst case this could\n   *  consume an extra 1X of your total index size, until\n   *  you release the snapshot. */\n  public synchronized IndexCommit snapshot() {\n    if (snapshot == null)\n      snapshot = lastCommit.getSegmentsFileName();\n    else\n      throw new IllegalStateException(\"snapshot is already set; please call release() first\");\n    return lastCommit;\n  }\n\n","sourceOld":"  /** Take a snapshot of the most recent commit to the\n   *  index.  You must call release() to free this snapshot.\n   *  Note that while the snapshot is held, the files it\n   *  references will not be deleted, which will consume\n   *  additional disk space in your index. If you take a\n   *  snapshot at a particularly bad time (say just before\n   *  you call optimize()) then in the worst case this could\n   *  consume an extra 1X of your total index size, until\n   *  you release the snapshot. */\n  // TODO 3.0: change this to return IndexCommit instead\n  public synchronized IndexCommitPoint snapshot() {\n    if (snapshot == null)\n      snapshot = lastCommit.getSegmentsFileName();\n    else\n      throw new IllegalStateException(\"snapshot is already set; please call release() first\");\n    return lastCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#snapshot().mjava","pathOld":"src/java/org/apache/lucene/index/SnapshotDeletionPolicy#snapshot().mjava","sourceNew":"  /** Take a snapshot of the most recent commit to the\n   *  index.  You must call release() to free this snapshot.\n   *  Note that while the snapshot is held, the files it\n   *  references will not be deleted, which will consume\n   *  additional disk space in your index. If you take a\n   *  snapshot at a particularly bad time (say just before\n   *  you call optimize()) then in the worst case this could\n   *  consume an extra 1X of your total index size, until\n   *  you release the snapshot. */\n  public synchronized IndexCommit snapshot() {\n    if (snapshot == null)\n      snapshot = lastCommit.getSegmentsFileName();\n    else\n      throw new IllegalStateException(\"snapshot is already set; please call release() first\");\n    return lastCommit;\n  }\n\n","sourceOld":"  /** Take a snapshot of the most recent commit to the\n   *  index.  You must call release() to free this snapshot.\n   *  Note that while the snapshot is held, the files it\n   *  references will not be deleted, which will consume\n   *  additional disk space in your index. If you take a\n   *  snapshot at a particularly bad time (say just before\n   *  you call optimize()) then in the worst case this could\n   *  consume an extra 1X of your total index size, until\n   *  you release the snapshot. */\n  public synchronized IndexCommit snapshot() {\n    if (snapshot == null)\n      snapshot = lastCommit.getSegmentsFileName();\n    else\n      throw new IllegalStateException(\"snapshot is already set; please call release() first\");\n    return lastCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d60f4e15b3e2fb549c23c8f2096249d439876df8":["3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5"],"3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["8a1559506fd82ede79bd8e60facef2a57524e175"],"8a1559506fd82ede79bd8e60facef2a57524e175":["d60f4e15b3e2fb549c23c8f2096249d439876df8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"]},"commit2Childs":{"d60f4e15b3e2fb549c23c8f2096249d439876df8":["8a1559506fd82ede79bd8e60facef2a57524e175"],"3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5":["d60f4e15b3e2fb549c23c8f2096249d439876df8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8a1559506fd82ede79bd8e60facef2a57524e175":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}