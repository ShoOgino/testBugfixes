{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KmeansEvaluator#doWork(Object...).mjava","commits":[{"id":"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6","date":1516045834,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KmeansEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length < 2) {\n      throw new IOException(\"kmeans expects atleast two parameters a Matrix of observations and k\");\n    }\n\n    Matrix matrix = null;\n    int k = 0;\n    int maxIterations = 1000;\n\n    if(values[0] instanceof Matrix) {\n      matrix = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for kmeans should be the observation matrix.\");\n    }\n\n    if(values[1] instanceof Number) {\n      k = ((Number)values[1]).intValue();\n    } else {\n      throw new IOException(\"The second parameter for kmeans should be k.\");\n    }\n\n    if(values.length == 3) {\n      maxIterations = ((Number)values[2]).intValue();\n    }\n\n    KMeansPlusPlusClusterer<ClusterPoint> kmeans = new KMeansPlusPlusClusterer(k, maxIterations);\n    List<ClusterPoint> points = new ArrayList();\n    double[][] data = matrix.getData();\n\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      points.add(new ClusterPoint(ids.get(i), vec));\n    }\n\n    Map fields = new HashMap();\n\n    fields.put(\"k\", k);\n    fields.put(\"distance\", \"euclidean\");\n    fields.put(\"maxIterations\", maxIterations);\n\n    return new ClusterTuple(fields, kmeans.cluster(points), matrix.getColumnLabels());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KmeansEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length < 2) {\n      throw new IOException(\"kmeans expects atleast two parameters a Matrix of observations and k\");\n    }\n\n    Matrix matrix = null;\n    int k = 0;\n    int maxIterations = 1000;\n\n    if(values[0] instanceof Matrix) {\n      matrix = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for kmeans should be the observation matrix.\");\n    }\n\n    if(values[1] instanceof Number) {\n      k = ((Number)values[1]).intValue();\n    } else {\n      throw new IOException(\"The second parameter for kmeans should be k.\");\n    }\n\n    if(values.length == 3) {\n      maxIterations = ((Number)values[2]).intValue();\n    }\n\n    KMeansPlusPlusClusterer<ClusterPoint> kmeans = new KMeansPlusPlusClusterer(k, maxIterations);\n    List<ClusterPoint> points = new ArrayList();\n    double[][] data = matrix.getData();\n\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      points.add(new ClusterPoint(ids.get(i), vec));\n    }\n\n    Map fields = new HashMap();\n\n    fields.put(\"k\", k);\n    fields.put(\"distance\", \"euclidean\");\n    fields.put(\"maxIterations\", maxIterations);\n\n    return new ClusterTuple(fields, kmeans.cluster(points), matrix.getColumnLabels());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1d0ba687e34a329efbeaa5dd3993568f15a91ed","date":1516728571,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KmeansEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KmeansEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n\n    Matrix matrix = null;\n    int k = 0;\n\n    if(value1 instanceof Matrix) {\n      matrix = (Matrix)value1;\n    } else {\n      throw new IOException(\"The first parameter for kmeans should be the observation matrix.\");\n    }\n\n    if(value2 instanceof Number) {\n      k = ((Number)value2).intValue();\n    } else {\n      throw new IOException(\"The second parameter for kmeans should be k.\");\n    }\n\n\n    KMeansPlusPlusClusterer<ClusterPoint> kmeans = new KMeansPlusPlusClusterer(k, maxIterations);\n    List<ClusterPoint> points = new ArrayList();\n    double[][] data = matrix.getData();\n\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      points.add(new ClusterPoint(ids.get(i), vec));\n    }\n\n    Map fields = new HashMap();\n\n    fields.put(\"k\", k);\n    fields.put(\"distance\", \"euclidean\");\n    fields.put(\"maxIterations\", maxIterations);\n\n    return new ClusterTuple(fields, kmeans.cluster(points), matrix.getColumnLabels());\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length < 2) {\n      throw new IOException(\"kmeans expects atleast two parameters a Matrix of observations and k\");\n    }\n\n    Matrix matrix = null;\n    int k = 0;\n    int maxIterations = 1000;\n\n    if(values[0] instanceof Matrix) {\n      matrix = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for kmeans should be the observation matrix.\");\n    }\n\n    if(values[1] instanceof Number) {\n      k = ((Number)values[1]).intValue();\n    } else {\n      throw new IOException(\"The second parameter for kmeans should be k.\");\n    }\n\n    if(values.length == 3) {\n      maxIterations = ((Number)values[2]).intValue();\n    }\n\n    KMeansPlusPlusClusterer<ClusterPoint> kmeans = new KMeansPlusPlusClusterer(k, maxIterations);\n    List<ClusterPoint> points = new ArrayList();\n    double[][] data = matrix.getData();\n\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      points.add(new ClusterPoint(ids.get(i), vec));\n    }\n\n    Map fields = new HashMap();\n\n    fields.put(\"k\", k);\n    fields.put(\"distance\", \"euclidean\");\n    fields.put(\"maxIterations\", maxIterations);\n\n    return new ClusterTuple(fields, kmeans.cluster(points), matrix.getColumnLabels());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","date":1516881857,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KmeansEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KmeansEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n\n    Matrix matrix = null;\n    int k = 0;\n\n    if(value1 instanceof Matrix) {\n      matrix = (Matrix)value1;\n    } else {\n      throw new IOException(\"The first parameter for kmeans should be the observation matrix.\");\n    }\n\n    if(value2 instanceof Number) {\n      k = ((Number)value2).intValue();\n    } else {\n      throw new IOException(\"The second parameter for kmeans should be k.\");\n    }\n\n\n    KMeansPlusPlusClusterer<ClusterPoint> kmeans = new KMeansPlusPlusClusterer(k, maxIterations);\n    List<ClusterPoint> points = new ArrayList();\n    double[][] data = matrix.getData();\n\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      points.add(new ClusterPoint(ids.get(i), vec));\n    }\n\n    Map fields = new HashMap();\n\n    fields.put(\"k\", k);\n    fields.put(\"distance\", \"euclidean\");\n    fields.put(\"maxIterations\", maxIterations);\n\n    return new ClusterTuple(fields, kmeans.cluster(points), matrix.getColumnLabels());\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length < 2) {\n      throw new IOException(\"kmeans expects atleast two parameters a Matrix of observations and k\");\n    }\n\n    Matrix matrix = null;\n    int k = 0;\n    int maxIterations = 1000;\n\n    if(values[0] instanceof Matrix) {\n      matrix = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for kmeans should be the observation matrix.\");\n    }\n\n    if(values[1] instanceof Number) {\n      k = ((Number)values[1]).intValue();\n    } else {\n      throw new IOException(\"The second parameter for kmeans should be k.\");\n    }\n\n    if(values.length == 3) {\n      maxIterations = ((Number)values[2]).intValue();\n    }\n\n    KMeansPlusPlusClusterer<ClusterPoint> kmeans = new KMeansPlusPlusClusterer(k, maxIterations);\n    List<ClusterPoint> points = new ArrayList();\n    double[][] data = matrix.getData();\n\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      points.add(new ClusterPoint(ids.get(i), vec));\n    }\n\n    Map fields = new HashMap();\n\n    fields.put(\"k\", k);\n    fields.put(\"distance\", \"euclidean\");\n    fields.put(\"maxIterations\", maxIterations);\n\n    return new ClusterTuple(fields, kmeans.cluster(points), matrix.getColumnLabels());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6"],"c1d0ba687e34a329efbeaa5dd3993568f15a91ed":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["b94236357aaa22b76c10629851fe4e376e0cea82","c1d0ba687e34a329efbeaa5dd3993568f15a91ed"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["c1d0ba687e34a329efbeaa5dd3993568f15a91ed","43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"c1d0ba687e34a329efbeaa5dd3993568f15a91ed":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6"],"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}