{"path":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#ExpandBuff(boolean).mjava","commits":[{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#ExpandBuff(boolean).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/parser/JavaCharStream#ExpandBuff(boolean).mjava","sourceNew":"  protected void ExpandBuff(boolean wrapAround)\n  {\n    char[] newbuffer = new char[bufsize + 2048];\n    int newbufline[] = new int[bufsize + 2048];\n    int newbufcolumn[] = new int[bufsize + 2048];\n\n    try\n    {\n      if (wrapAround)\n      {\n        System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n        System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);\n        buffer = newbuffer;\n\n        System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n        System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);\n        bufline = newbufline;\n\n        System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n        System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);\n        bufcolumn = newbufcolumn;\n\n        bufpos += (bufsize - tokenBegin);\n    }\n    else\n    {\n        System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n        buffer = newbuffer;\n\n        System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n        bufline = newbufline;\n\n        System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n        bufcolumn = newbufcolumn;\n\n        bufpos -= tokenBegin;\n      }\n    }\n    catch (Throwable t)\n    {\n      throw new Error(t.getMessage());\n    }\n\n    available = (bufsize += 2048);\n    tokenBegin = 0;\n  }\n\n","sourceOld":"  protected void ExpandBuff(boolean wrapAround)\n  {\n    char[] newbuffer = new char[bufsize + 2048];\n    int newbufline[] = new int[bufsize + 2048];\n    int newbufcolumn[] = new int[bufsize + 2048];\n\n    try\n    {\n      if (wrapAround)\n      {\n        System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n        System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);\n        buffer = newbuffer;\n\n        System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n        System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);\n        bufline = newbufline;\n\n        System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n        System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);\n        bufcolumn = newbufcolumn;\n\n        bufpos += (bufsize - tokenBegin);\n    }\n    else\n    {\n        System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n        buffer = newbuffer;\n\n        System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n        bufline = newbufline;\n\n        System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n        bufcolumn = newbufcolumn;\n\n        bufpos -= tokenBegin;\n      }\n    }\n    catch (Throwable t)\n    {\n      throw new Error(t.getMessage());\n    }\n\n    available = (bufsize += 2048);\n    tokenBegin = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#ExpandBuff(boolean).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#ExpandBuff(boolean).mjava","sourceNew":"  protected void ExpandBuff(boolean wrapAround)\n  {\n    char[] newbuffer = new char[bufsize + 2048];\n    int newbufline[] = new int[bufsize + 2048];\n    int newbufcolumn[] = new int[bufsize + 2048];\n\n    try\n    {\n      if (wrapAround)\n      {\n        System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n        System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);\n        buffer = newbuffer;\n\n        System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n        System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);\n        bufline = newbufline;\n\n        System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n        System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);\n        bufcolumn = newbufcolumn;\n\n        bufpos += (bufsize - tokenBegin);\n    }\n    else\n    {\n        System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n        buffer = newbuffer;\n\n        System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n        bufline = newbufline;\n\n        System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n        bufcolumn = newbufcolumn;\n\n        bufpos -= tokenBegin;\n      }\n    }\n    catch (Throwable t)\n    {\n      throw new Error(t.getMessage());\n    }\n\n    available = (bufsize += 2048);\n    tokenBegin = 0;\n  }\n\n","sourceOld":"  protected void ExpandBuff(boolean wrapAround)\n  {\n    char[] newbuffer = new char[bufsize + 2048];\n    int newbufline[] = new int[bufsize + 2048];\n    int newbufcolumn[] = new int[bufsize + 2048];\n\n    try\n    {\n      if (wrapAround)\n      {\n        System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n        System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);\n        buffer = newbuffer;\n\n        System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n        System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);\n        bufline = newbufline;\n\n        System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n        System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);\n        bufcolumn = newbufcolumn;\n\n        bufpos += (bufsize - tokenBegin);\n    }\n    else\n    {\n        System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);\n        buffer = newbuffer;\n\n        System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);\n        bufline = newbufline;\n\n        System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);\n        bufcolumn = newbufcolumn;\n\n        bufpos -= tokenBegin;\n      }\n    }\n    catch (Throwable t)\n    {\n      throw new Error(t.getMessage());\n    }\n\n    available = (bufsize += 2048);\n    tokenBegin = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e8a848e758754282137f42bf85793c278e250390"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}