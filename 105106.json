{"path":"src/java/org/apache/lucene/search/RangeQuery#rewrite(IndexReader).mjava","commits":[{"id":"e0b950aef8cdf4606d480e28ea17bd870b93c81e","date":1060680143,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#rewrite(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery query = new BooleanQuery();\n      // if we have a lowerTerm, start there. otherwise, start at beginning\n      if (lowerTerm == null) lowerTerm = new Term(getField(), \"\");\n      TermEnum enumerator = reader.terms(lowerTerm);\n      try {\n        String lowerText = null;\n        String field;\n        boolean checkLower = false;\n          if (!inclusive) {             // make adjustments to set to exclusive\n            if (lowerTerm != null) {\n              lowerText = lowerTerm.text();\n              checkLower = true;\n            }\n            if (upperTerm != null) {\n              // set upperTerm to an actual term in the index\n              TermEnum uppEnum = reader.terms(upperTerm);\n              upperTerm = uppEnum.term();\n            }\n          }\n          String testField = getField();\n          do {\n            Term term = enumerator.term();\n            if (term != null && term.field() == testField) {\n              if (!checkLower || term.text().compareTo(lowerText) > 0) {\n                checkLower = false;\n                if (upperTerm != null) {\n                  int compare = upperTerm.compareTo(term);\n                  /* if beyond the upper term, or is exclusive and\n                   * this is equal to the upper term, break out */\n                  if ((compare < 0) || (!inclusive && compare == 0)) break;\n                }\n                TermQuery tq = new TermQuery(term); // found a match\n                tq.setBoost(getBoost());          // set the boost\n                query.add(tq, false, false); // add to query\n              }\n            }\n            else {\n              break;\n            }\n          }\n          while (enumerator.next());\n      } finally {\n        enumerator.close();\n      }\n      return query;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab881ff578b14fb692d84b482febb5707f628f8","date":1063196645,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#rewrite(IndexReader).mjava","sourceNew":"    /**\n     * FIXME: Describe <code>rewrite</code> method here.\n     *\n     * @param reader an <code>IndexReader</code> value\n     * @return a <code>Query</code> value\n     * @exception IOException if an error occurs\n     */\n    public Query rewrite(IndexReader reader) throws IOException {\n\n        BooleanQuery query = new BooleanQuery();\n        TermEnum enumerator = reader.terms(lowerTerm);\n\n        try {\n\n            boolean checkLower = false;\n            if (!inclusive) // make adjustments to set to exclusive\n                checkLower = true;\n\n            String testField = getField();\n\n            do {\n                Term term = enumerator.term();\n                if (term != null && term.field() == testField) {\n                    if (!checkLower || term.text().compareTo(lowerTerm.text()) > 0) {\n                        checkLower = false;\n                        if (upperTerm != null) {\n                            int compare = upperTerm.text().compareTo(term.text());\n                            /* if beyond the upper term, or is exclusive and\n                             * this is equal to the upper term, break out */\n                            if ((compare < 0) || (!inclusive && compare == 0))\n                                break;\n                        }\n                        TermQuery tq = new TermQuery(term); // found a match\n                        tq.setBoost(getBoost()); // set the boost\n                        query.add(tq, false, false); // add to query\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n            while (enumerator.next());\n        }\n        finally {\n            enumerator.close();\n        }\n        return query;\n    }\n\n","sourceOld":"    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery query = new BooleanQuery();\n      // if we have a lowerTerm, start there. otherwise, start at beginning\n      if (lowerTerm == null) lowerTerm = new Term(getField(), \"\");\n      TermEnum enumerator = reader.terms(lowerTerm);\n      try {\n        String lowerText = null;\n        String field;\n        boolean checkLower = false;\n          if (!inclusive) {             // make adjustments to set to exclusive\n            if (lowerTerm != null) {\n              lowerText = lowerTerm.text();\n              checkLower = true;\n            }\n            if (upperTerm != null) {\n              // set upperTerm to an actual term in the index\n              TermEnum uppEnum = reader.terms(upperTerm);\n              upperTerm = uppEnum.term();\n            }\n          }\n          String testField = getField();\n          do {\n            Term term = enumerator.term();\n            if (term != null && term.field() == testField) {\n              if (!checkLower || term.text().compareTo(lowerText) > 0) {\n                checkLower = false;\n                if (upperTerm != null) {\n                  int compare = upperTerm.compareTo(term);\n                  /* if beyond the upper term, or is exclusive and\n                   * this is equal to the upper term, break out */\n                  if ((compare < 0) || (!inclusive && compare == 0)) break;\n                }\n                TermQuery tq = new TermQuery(term); // found a match\n                tq.setBoost(getBoost());          // set the boost\n                query.add(tq, false, false); // add to query\n              }\n            }\n            else {\n              break;\n            }\n          }\n          while (enumerator.next());\n      } finally {\n        enumerator.close();\n      }\n      return query;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2db8da778bc059db762a1d91f6e41624d01f0c1d","date":1093638047,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#rewrite(IndexReader).mjava","sourceNew":"    /**\n     * FIXME: Describe <code>rewrite</code> method here.\n     *\n     * @param reader an <code>IndexReader</code> value\n     * @return a <code>Query</code> value\n     * @exception IOException if an error occurs\n     */\n    public Query rewrite(IndexReader reader) throws IOException {\n\n        BooleanQuery query = new BooleanQuery();\n        TermEnum enumerator = reader.terms(lowerTerm);\n\n        try {\n\n            boolean checkLower = false;\n            if (!inclusive) // make adjustments to set to exclusive\n                checkLower = true;\n\n            String testField = getField();\n\n            do {\n                Term term = enumerator.term();\n                if (term != null && term.field() == testField) {\n                    if (!checkLower || term.text().compareTo(lowerTerm.text()) > 0) {\n                        checkLower = false;\n                        if (upperTerm != null) {\n                            int compare = upperTerm.text().compareTo(term.text());\n                            /* if beyond the upper term, or is exclusive and\n                             * this is equal to the upper term, break out */\n                            if ((compare < 0) || (!inclusive && compare == 0))\n                                break;\n                        }\n                        TermQuery tq = new TermQuery(term); // found a match\n                        tq.setBoost(getBoost()); // set the boost\n                        query.add(tq, BooleanClause.Occur.SHOULD); // add to query\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n            while (enumerator.next());\n        }\n        finally {\n            enumerator.close();\n        }\n        return query;\n    }\n\n","sourceOld":"    /**\n     * FIXME: Describe <code>rewrite</code> method here.\n     *\n     * @param reader an <code>IndexReader</code> value\n     * @return a <code>Query</code> value\n     * @exception IOException if an error occurs\n     */\n    public Query rewrite(IndexReader reader) throws IOException {\n\n        BooleanQuery query = new BooleanQuery();\n        TermEnum enumerator = reader.terms(lowerTerm);\n\n        try {\n\n            boolean checkLower = false;\n            if (!inclusive) // make adjustments to set to exclusive\n                checkLower = true;\n\n            String testField = getField();\n\n            do {\n                Term term = enumerator.term();\n                if (term != null && term.field() == testField) {\n                    if (!checkLower || term.text().compareTo(lowerTerm.text()) > 0) {\n                        checkLower = false;\n                        if (upperTerm != null) {\n                            int compare = upperTerm.text().compareTo(term.text());\n                            /* if beyond the upper term, or is exclusive and\n                             * this is equal to the upper term, break out */\n                            if ((compare < 0) || (!inclusive && compare == 0))\n                                break;\n                        }\n                        TermQuery tq = new TermQuery(term); // found a match\n                        tq.setBoost(getBoost()); // set the boost\n                        query.add(tq, false, false); // add to query\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n            while (enumerator.next());\n        }\n        finally {\n            enumerator.close();\n        }\n        return query;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71fd8abfd8c79015e156db1a8cc34af92099bb2e","date":1101243287,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#rewrite(IndexReader).mjava","sourceNew":"    public Query rewrite(IndexReader reader) throws IOException {\n\n        BooleanQuery query = new BooleanQuery();\n        TermEnum enumerator = reader.terms(lowerTerm);\n\n        try {\n\n            boolean checkLower = false;\n            if (!inclusive) // make adjustments to set to exclusive\n                checkLower = true;\n\n            String testField = getField();\n\n            do {\n                Term term = enumerator.term();\n                if (term != null && term.field() == testField) {\n                    if (!checkLower || term.text().compareTo(lowerTerm.text()) > 0) {\n                        checkLower = false;\n                        if (upperTerm != null) {\n                            int compare = upperTerm.text().compareTo(term.text());\n                            /* if beyond the upper term, or is exclusive and\n                             * this is equal to the upper term, break out */\n                            if ((compare < 0) || (!inclusive && compare == 0))\n                                break;\n                        }\n                        TermQuery tq = new TermQuery(term); // found a match\n                        tq.setBoost(getBoost()); // set the boost\n                        query.add(tq, BooleanClause.Occur.SHOULD); // add to query\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n            while (enumerator.next());\n        }\n        finally {\n            enumerator.close();\n        }\n        return query;\n    }\n\n","sourceOld":"    /**\n     * FIXME: Describe <code>rewrite</code> method here.\n     *\n     * @param reader an <code>IndexReader</code> value\n     * @return a <code>Query</code> value\n     * @exception IOException if an error occurs\n     */\n    public Query rewrite(IndexReader reader) throws IOException {\n\n        BooleanQuery query = new BooleanQuery();\n        TermEnum enumerator = reader.terms(lowerTerm);\n\n        try {\n\n            boolean checkLower = false;\n            if (!inclusive) // make adjustments to set to exclusive\n                checkLower = true;\n\n            String testField = getField();\n\n            do {\n                Term term = enumerator.term();\n                if (term != null && term.field() == testField) {\n                    if (!checkLower || term.text().compareTo(lowerTerm.text()) > 0) {\n                        checkLower = false;\n                        if (upperTerm != null) {\n                            int compare = upperTerm.text().compareTo(term.text());\n                            /* if beyond the upper term, or is exclusive and\n                             * this is equal to the upper term, break out */\n                            if ((compare < 0) || (!inclusive && compare == 0))\n                                break;\n                        }\n                        TermQuery tq = new TermQuery(term); // found a match\n                        tq.setBoost(getBoost()); // set the boost\n                        query.add(tq, BooleanClause.Occur.SHOULD); // add to query\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n            while (enumerator.next());\n        }\n        finally {\n            enumerator.close();\n        }\n        return query;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db","date":1110223587,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#rewrite(IndexReader).mjava","sourceNew":"    public Query rewrite(IndexReader reader) throws IOException {\n\n        BooleanQuery query = new BooleanQuery(true);\n        TermEnum enumerator = reader.terms(lowerTerm);\n\n        try {\n\n            boolean checkLower = false;\n            if (!inclusive) // make adjustments to set to exclusive\n                checkLower = true;\n\n            String testField = getField();\n\n            do {\n                Term term = enumerator.term();\n                if (term != null && term.field() == testField) {\n                    if (!checkLower || term.text().compareTo(lowerTerm.text()) > 0) {\n                        checkLower = false;\n                        if (upperTerm != null) {\n                            int compare = upperTerm.text().compareTo(term.text());\n                            /* if beyond the upper term, or is exclusive and\n                             * this is equal to the upper term, break out */\n                            if ((compare < 0) || (!inclusive && compare == 0))\n                                break;\n                        }\n                        TermQuery tq = new TermQuery(term); // found a match\n                        tq.setBoost(getBoost()); // set the boost\n                        query.add(tq, BooleanClause.Occur.SHOULD); // add to query\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n            while (enumerator.next());\n        }\n        finally {\n            enumerator.close();\n        }\n        return query;\n    }\n\n","sourceOld":"    public Query rewrite(IndexReader reader) throws IOException {\n\n        BooleanQuery query = new BooleanQuery();\n        TermEnum enumerator = reader.terms(lowerTerm);\n\n        try {\n\n            boolean checkLower = false;\n            if (!inclusive) // make adjustments to set to exclusive\n                checkLower = true;\n\n            String testField = getField();\n\n            do {\n                Term term = enumerator.term();\n                if (term != null && term.field() == testField) {\n                    if (!checkLower || term.text().compareTo(lowerTerm.text()) > 0) {\n                        checkLower = false;\n                        if (upperTerm != null) {\n                            int compare = upperTerm.text().compareTo(term.text());\n                            /* if beyond the upper term, or is exclusive and\n                             * this is equal to the upper term, break out */\n                            if ((compare < 0) || (!inclusive && compare == 0))\n                                break;\n                        }\n                        TermQuery tq = new TermQuery(term); // found a match\n                        tq.setBoost(getBoost()); // set the boost\n                        query.add(tq, BooleanClause.Occur.SHOULD); // add to query\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n            while (enumerator.next());\n        }\n        finally {\n            enumerator.close();\n        }\n        return query;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cafa5491543830e9ff023323b859c809118a056","date":1174485527,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#rewrite(IndexReader).mjava","sourceNew":"    public Query rewrite(IndexReader reader) throws IOException {\n\n        BooleanQuery query = new BooleanQuery(true);\n        TermEnum enumerator = reader.terms(lowerTerm);\n\n        try {\n\n            boolean checkLower = false;\n            if (!inclusive) // make adjustments to set to exclusive\n                checkLower = true;\n\n            String testField = getField();\n\n            do {\n                Term term = enumerator.term();\n                if (term != null && term.field() == testField) { // interned comparison\n                    if (!checkLower || term.text().compareTo(lowerTerm.text()) > 0) {\n                        checkLower = false;\n                        if (upperTerm != null) {\n                            int compare = upperTerm.text().compareTo(term.text());\n                            /* if beyond the upper term, or is exclusive and\n                             * this is equal to the upper term, break out */\n                            if ((compare < 0) || (!inclusive && compare == 0))\n                                break;\n                        }\n                        TermQuery tq = new TermQuery(term); // found a match\n                        tq.setBoost(getBoost()); // set the boost\n                        query.add(tq, BooleanClause.Occur.SHOULD); // add to query\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n            while (enumerator.next());\n        }\n        finally {\n            enumerator.close();\n        }\n        return query;\n    }\n\n","sourceOld":"    public Query rewrite(IndexReader reader) throws IOException {\n\n        BooleanQuery query = new BooleanQuery(true);\n        TermEnum enumerator = reader.terms(lowerTerm);\n\n        try {\n\n            boolean checkLower = false;\n            if (!inclusive) // make adjustments to set to exclusive\n                checkLower = true;\n\n            String testField = getField();\n\n            do {\n                Term term = enumerator.term();\n                if (term != null && term.field() == testField) {\n                    if (!checkLower || term.text().compareTo(lowerTerm.text()) > 0) {\n                        checkLower = false;\n                        if (upperTerm != null) {\n                            int compare = upperTerm.text().compareTo(term.text());\n                            /* if beyond the upper term, or is exclusive and\n                             * this is equal to the upper term, break out */\n                            if ((compare < 0) || (!inclusive && compare == 0))\n                                break;\n                        }\n                        TermQuery tq = new TermQuery(term); // found a match\n                        tq.setBoost(getBoost()); // set the boost\n                        query.add(tq, BooleanClause.Occur.SHOULD); // add to query\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n            while (enumerator.next());\n        }\n        finally {\n            enumerator.close();\n        }\n        return query;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b33dc4652df2747e38f9782fde82bd426b77c538","date":1221599001,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#rewrite(IndexReader).mjava","sourceNew":"    public Query rewrite(IndexReader reader) throws IOException {\n\n        BooleanQuery query = new BooleanQuery(true);\n        String testField = getField();\n        if (collator != null) {\n            TermEnum enumerator = reader.terms(new Term(testField, \"\"));\n            String lowerTermText = lowerTerm != null ? lowerTerm.text() : null;\n            String upperTermText = upperTerm != null ? upperTerm.text() : null;\n\n            try {\n                do {\n                    Term term = enumerator.term();\n                    if (term != null && term.field() == testField) { // interned comparison\n                        if ((lowerTermText == null\n                             || (inclusive ? collator.compare(term.text(), lowerTermText) >= 0\n                                           : collator.compare(term.text(), lowerTermText) > 0))\n                            && (upperTermText == null\n                                || (inclusive ? collator.compare(term.text(), upperTermText) <= 0\n                                              : collator.compare(term.text(), upperTermText) < 0))) {\n                            addTermToQuery(term, query);\n                        }\n                    }\n                }\n                while (enumerator.next());\n            }\n            finally {\n                enumerator.close();\n            }\n        }\n        else { // collator is null\n            TermEnum enumerator = reader.terms(lowerTerm);\n\n            try {\n\n                boolean checkLower = false;\n                if (!inclusive) // make adjustments to set to exclusive\n                    checkLower = true;\n\n                do {\n                    Term term = enumerator.term();\n                    if (term != null && term.field() == testField) { // interned comparison\n                        if (!checkLower || term.text().compareTo(lowerTerm.text()) > 0) {\n                            checkLower = false;\n                            if (upperTerm != null) {\n                                int compare = upperTerm.text().compareTo(term.text());\n                                /* if beyond the upper term, or is exclusive and\n                                 * this is equal to the upper term, break out */\n                                if ((compare < 0) || (!inclusive && compare == 0))\n                                    break;\n                            }\n                            addTermToQuery(term, query); // Found a match\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n                while (enumerator.next());\n            }\n            finally {\n                enumerator.close();\n            }\n        }\n        return query;\n    }\n\n","sourceOld":"    public Query rewrite(IndexReader reader) throws IOException {\n\n        BooleanQuery query = new BooleanQuery(true);\n        TermEnum enumerator = reader.terms(lowerTerm);\n\n        try {\n\n            boolean checkLower = false;\n            if (!inclusive) // make adjustments to set to exclusive\n                checkLower = true;\n\n            String testField = getField();\n\n            do {\n                Term term = enumerator.term();\n                if (term != null && term.field() == testField) { // interned comparison\n                    if (!checkLower || term.text().compareTo(lowerTerm.text()) > 0) {\n                        checkLower = false;\n                        if (upperTerm != null) {\n                            int compare = upperTerm.text().compareTo(term.text());\n                            /* if beyond the upper term, or is exclusive and\n                             * this is equal to the upper term, break out */\n                            if ((compare < 0) || (!inclusive && compare == 0))\n                                break;\n                        }\n                        TermQuery tq = new TermQuery(term); // found a match\n                        tq.setBoost(getBoost()); // set the boost\n                        query.add(tq, BooleanClause.Occur.SHOULD); // add to query\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n            while (enumerator.next());\n        }\n        finally {\n            enumerator.close();\n        }\n        return query;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/RangeQuery#rewrite(IndexReader).mjava","sourceNew":null,"sourceOld":"    public Query rewrite(IndexReader reader) throws IOException {\n\n        BooleanQuery query = new BooleanQuery(true);\n        String testField = getField();\n        if (collator != null) {\n            TermEnum enumerator = reader.terms(new Term(testField, \"\"));\n            String lowerTermText = lowerTerm != null ? lowerTerm.text() : null;\n            String upperTermText = upperTerm != null ? upperTerm.text() : null;\n\n            try {\n                do {\n                    Term term = enumerator.term();\n                    if (term != null && term.field() == testField) { // interned comparison\n                        if ((lowerTermText == null\n                             || (inclusive ? collator.compare(term.text(), lowerTermText) >= 0\n                                           : collator.compare(term.text(), lowerTermText) > 0))\n                            && (upperTermText == null\n                                || (inclusive ? collator.compare(term.text(), upperTermText) <= 0\n                                              : collator.compare(term.text(), upperTermText) < 0))) {\n                            addTermToQuery(term, query);\n                        }\n                    }\n                }\n                while (enumerator.next());\n            }\n            finally {\n                enumerator.close();\n            }\n        }\n        else { // collator is null\n            TermEnum enumerator = reader.terms(lowerTerm);\n\n            try {\n\n                boolean checkLower = false;\n                if (!inclusive) // make adjustments to set to exclusive\n                    checkLower = true;\n\n                do {\n                    Term term = enumerator.term();\n                    if (term != null && term.field() == testField) { // interned comparison\n                        if (!checkLower || term.text().compareTo(lowerTerm.text()) > 0) {\n                            checkLower = false;\n                            if (upperTerm != null) {\n                                int compare = upperTerm.text().compareTo(term.text());\n                                /* if beyond the upper term, or is exclusive and\n                                 * this is equal to the upper term, break out */\n                                if ((compare < 0) || (!inclusive && compare == 0))\n                                    break;\n                            }\n                            addTermToQuery(term, query); // Found a match\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n                while (enumerator.next());\n            }\n            finally {\n                enumerator.close();\n            }\n        }\n        return query;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c","date":1246738520,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#rewrite(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public Query rewrite(IndexReader reader) throws IOException {\n    return delegate.rewrite(reader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da","date":1255296547,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/RangeQuery#rewrite(IndexReader).mjava","sourceNew":null,"sourceOld":"  public Query rewrite(IndexReader reader) throws IOException {\n    return delegate.rewrite(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1cafa5491543830e9ff023323b859c809118a056":["bcbc8ed27f45a5a299f8414d7a886340ce7bb3db"],"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c"],"b33dc4652df2747e38f9782fde82bd426b77c538":["1cafa5491543830e9ff023323b859c809118a056"],"cab881ff578b14fb692d84b482febb5707f628f8":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"71fd8abfd8c79015e156db1a8cc34af92099bb2e":["2db8da778bc059db762a1d91f6e41624d01f0c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["b33dc4652df2747e38f9782fde82bd426b77c538"],"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db":["71fd8abfd8c79015e156db1a8cc34af92099bb2e"],"2db8da778bc059db762a1d91f6e41624d01f0c1d":["cab881ff578b14fb692d84b482febb5707f628f8"]},"commit2Childs":{"1cafa5491543830e9ff023323b859c809118a056":["b33dc4652df2747e38f9782fde82bd426b77c538"],"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["cab881ff578b14fb692d84b482febb5707f628f8"],"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b33dc4652df2747e38f9782fde82bd426b77c538":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"cab881ff578b14fb692d84b482febb5707f628f8":["2db8da778bc059db762a1d91f6e41624d01f0c1d"],"71fd8abfd8c79015e156db1a8cc34af92099bb2e":["bcbc8ed27f45a5a299f8414d7a886340ce7bb3db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db":["1cafa5491543830e9ff023323b859c809118a056"],"2db8da778bc059db762a1d91f6e41624d01f0c1d":["71fd8abfd8c79015e156db1a8cc34af92099bb2e"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}