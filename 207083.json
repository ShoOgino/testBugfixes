{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/BaseGroupSelectorTestCase#testSortWithinGroups().mjava","commits":[{"id":"fdedc06ffe6518d5666d12901a738624563d147d","date":1588593300,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/BaseGroupSelectorTestCase#testSortWithinGroups().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortWithinGroups() throws IOException {\n\n    Shard shard = new Shard();\n    indexRandomDocs(shard.writer);\n    IndexSearcher searcher = shard.getIndexSearcher();\n\n    String[] query = new String[]{ \"foo\", \"bar\", \"baz\" };\n    Query topLevel = new TermQuery(new Term(\"text\", query[random().nextInt(query.length)]));\n\n    GroupingSearch grouper = new GroupingSearch(getGroupSelector());\n    grouper.setGroupDocsLimit(10);\n    Sort sort = new Sort(new SortField(\"sort1\", SortField.Type.STRING), new SortField(\"sort2\", SortField.Type.LONG));\n    grouper.setSortWithinGroup(sort);\n\n    TopGroups<T> topGroups = grouper.search(searcher, topLevel, 0, 5);\n    TopDocs topDoc = searcher.search(topLevel, 1);\n\n    for (int i = 0; i < topGroups.groups.length; i++) {\n      // Check top-level ordering by score: first group's maxScore should be equal to the\n      // top score returned by a simple search with no grouping; subsequent groups should\n      // all have equal or lower maxScores\n      if (i == 0) {\n        assertEquals(topDoc.scoreDocs[0].score, topGroups.groups[0].maxScore, 0);\n      } else {\n        assertTrue(topGroups.groups[i].maxScore <= topGroups.groups[i - 1].maxScore);\n      }\n      // Groups themselves are ordered by a defined Sort, and each should give the same result as\n      // the top-level query, filtered by the group value, with the same Sort\n      Query filtered = new BooleanQuery.Builder()\n          .add(topLevel, BooleanClause.Occur.MUST)\n          .add(filterQuery(topGroups.groups[i].groupValue), BooleanClause.Occur.FILTER)\n          .build();\n      TopDocs td = searcher.search(filtered, 10, sort);\n      assertScoreDocsEquals(td.scoreDocs, topGroups.groups[i].scoreDocs);\n    }\n\n    shard.close();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fdedc06ffe6518d5666d12901a738624563d147d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fdedc06ffe6518d5666d12901a738624563d147d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fdedc06ffe6518d5666d12901a738624563d147d"],"fdedc06ffe6518d5666d12901a738624563d147d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}