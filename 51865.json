{"path":"lucene/core/src/java/org/apache/lucene/document/FieldType#setDimensions(int,int).mjava","commits":[{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#setDimensions(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Enables dimensional indexing.\n   */\n  public void setDimensions(int dimensionCount, int dimensionNumBytes) {\n    if (dimensionCount < 0) {\n      throw new IllegalArgumentException(\"dimensionCount must be >= 0; got \" + dimensionCount);\n    }\n    if (dimensionNumBytes < 0) {\n      throw new IllegalArgumentException(\"dimensionNumBytes must be >= 0; got \" + dimensionNumBytes);\n    }\n    if (dimensionCount == 0) {\n      if (dimensionNumBytes != 0) {\n        throw new IllegalArgumentException(\"when dimensionCount is 0 dimensionNumBytes must 0; got \" + dimensionNumBytes);\n      }\n    } else if (dimensionNumBytes == 0) {\n      if (dimensionCount != 0) {\n        throw new IllegalArgumentException(\"when dimensionNumBytes is 0 dimensionCount must 0; got \" + dimensionCount);\n      }\n    }\n\n    this.dimensionCount = dimensionCount;\n    this.dimensionNumBytes = dimensionNumBytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#setDimensions(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#setDimensions(int,int).mjava","sourceNew":"  /**\n   * Enables points indexing.\n   */\n  public void setDimensions(int dimensionCount, int dimensionNumBytes) {\n    if (dimensionCount < 0) {\n      throw new IllegalArgumentException(\"pointDimensionCount must be >= 0; got \" + dimensionCount);\n    }\n    if (dimensionNumBytes < 0) {\n      throw new IllegalArgumentException(\"pointNumBytes must be >= 0; got \" + dimensionNumBytes);\n    }\n    if (dimensionCount == 0) {\n      if (dimensionNumBytes != 0) {\n        throw new IllegalArgumentException(\"when pointDimensionCount is 0 pointNumBytes must 0; got \" + dimensionNumBytes);\n      }\n    } else if (dimensionNumBytes == 0) {\n      if (dimensionCount != 0) {\n        throw new IllegalArgumentException(\"when pointNumBytes is 0 pointDimensionCount must 0; got \" + dimensionCount);\n      }\n    }\n\n    this.dimensionCount = dimensionCount;\n    this.dimensionNumBytes = dimensionNumBytes;\n  }\n\n","sourceOld":"  /**\n   * Enables dimensional indexing.\n   */\n  public void setDimensions(int dimensionCount, int dimensionNumBytes) {\n    if (dimensionCount < 0) {\n      throw new IllegalArgumentException(\"dimensionCount must be >= 0; got \" + dimensionCount);\n    }\n    if (dimensionNumBytes < 0) {\n      throw new IllegalArgumentException(\"dimensionNumBytes must be >= 0; got \" + dimensionNumBytes);\n    }\n    if (dimensionCount == 0) {\n      if (dimensionNumBytes != 0) {\n        throw new IllegalArgumentException(\"when dimensionCount is 0 dimensionNumBytes must 0; got \" + dimensionNumBytes);\n      }\n    } else if (dimensionNumBytes == 0) {\n      if (dimensionCount != 0) {\n        throw new IllegalArgumentException(\"when dimensionNumBytes is 0 dimensionCount must 0; got \" + dimensionCount);\n      }\n    }\n\n    this.dimensionCount = dimensionCount;\n    this.dimensionNumBytes = dimensionNumBytes;\n  }\n\n","bugFix":null,"bugIntro":["067bb525d2e4993889147c508e2ccb5158f409b1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"067bb525d2e4993889147c508e2ccb5158f409b1","date":1457385185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#setDimensions(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#setDimensions(int,int).mjava","sourceNew":"  /**\n   * Enables points indexing.\n   */\n  public void setDimensions(int dimensionCount, int dimensionNumBytes) {\n    if (dimensionCount < 0) {\n      throw new IllegalArgumentException(\"dimensionCount must be >= 0; got \" + dimensionCount);\n    }\n    if (dimensionCount > PointValues.MAX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"dimensionCount must be <= \" + PointValues.MAX_DIMENSIONS + \"; got \" + dimensionCount);\n    }\n    if (dimensionNumBytes < 0) {\n      throw new IllegalArgumentException(\"dimensionNumBytes must be >= 0; got \" + dimensionNumBytes);\n    }\n    if (dimensionCount > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"dimensionNumBytes must be <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + dimensionNumBytes);\n    }\n    if (dimensionCount == 0) {\n      if (dimensionNumBytes != 0) {\n        throw new IllegalArgumentException(\"when dimensionCount is 0, dimensionNumBytes must 0; got \" + dimensionNumBytes);\n      }\n    } else if (dimensionNumBytes == 0) {\n      if (dimensionCount != 0) {\n        throw new IllegalArgumentException(\"when dimensionNumBytes is 0, dimensionCount must 0; got \" + dimensionCount);\n      }\n    }\n\n    this.dimensionCount = dimensionCount;\n    this.dimensionNumBytes = dimensionNumBytes;\n  }\n\n","sourceOld":"  /**\n   * Enables points indexing.\n   */\n  public void setDimensions(int dimensionCount, int dimensionNumBytes) {\n    if (dimensionCount < 0) {\n      throw new IllegalArgumentException(\"pointDimensionCount must be >= 0; got \" + dimensionCount);\n    }\n    if (dimensionNumBytes < 0) {\n      throw new IllegalArgumentException(\"pointNumBytes must be >= 0; got \" + dimensionNumBytes);\n    }\n    if (dimensionCount == 0) {\n      if (dimensionNumBytes != 0) {\n        throw new IllegalArgumentException(\"when pointDimensionCount is 0 pointNumBytes must 0; got \" + dimensionNumBytes);\n      }\n    } else if (dimensionNumBytes == 0) {\n      if (dimensionCount != 0) {\n        throw new IllegalArgumentException(\"when pointNumBytes is 0 pointDimensionCount must 0; got \" + dimensionCount);\n      }\n    }\n\n    this.dimensionCount = dimensionCount;\n    this.dimensionNumBytes = dimensionNumBytes;\n  }\n\n","bugFix":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"bugIntro":["fd73937ef1d230e8deed60e0859a835558dbd9d6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd73937ef1d230e8deed60e0859a835558dbd9d6","date":1469427951,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#setDimensions(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#setDimensions(int,int).mjava","sourceNew":"  /**\n   * Enables points indexing.\n   */\n  public void setDimensions(int dimensionCount, int dimensionNumBytes) {\n    if (dimensionCount < 0) {\n      throw new IllegalArgumentException(\"dimensionCount must be >= 0; got \" + dimensionCount);\n    }\n    if (dimensionCount > PointValues.MAX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"dimensionCount must be <= \" + PointValues.MAX_DIMENSIONS + \"; got \" + dimensionCount);\n    }\n    if (dimensionNumBytes < 0) {\n      throw new IllegalArgumentException(\"dimensionNumBytes must be >= 0; got \" + dimensionNumBytes);\n    }\n    if (dimensionNumBytes > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"dimensionNumBytes must be <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + dimensionNumBytes);\n    }\n    if (dimensionCount == 0) {\n      if (dimensionNumBytes != 0) {\n        throw new IllegalArgumentException(\"when dimensionCount is 0, dimensionNumBytes must 0; got \" + dimensionNumBytes);\n      }\n    } else if (dimensionNumBytes == 0) {\n      if (dimensionCount != 0) {\n        throw new IllegalArgumentException(\"when dimensionNumBytes is 0, dimensionCount must 0; got \" + dimensionCount);\n      }\n    }\n\n    this.dimensionCount = dimensionCount;\n    this.dimensionNumBytes = dimensionNumBytes;\n  }\n\n","sourceOld":"  /**\n   * Enables points indexing.\n   */\n  public void setDimensions(int dimensionCount, int dimensionNumBytes) {\n    if (dimensionCount < 0) {\n      throw new IllegalArgumentException(\"dimensionCount must be >= 0; got \" + dimensionCount);\n    }\n    if (dimensionCount > PointValues.MAX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"dimensionCount must be <= \" + PointValues.MAX_DIMENSIONS + \"; got \" + dimensionCount);\n    }\n    if (dimensionNumBytes < 0) {\n      throw new IllegalArgumentException(\"dimensionNumBytes must be >= 0; got \" + dimensionNumBytes);\n    }\n    if (dimensionCount > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"dimensionNumBytes must be <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + dimensionNumBytes);\n    }\n    if (dimensionCount == 0) {\n      if (dimensionNumBytes != 0) {\n        throw new IllegalArgumentException(\"when dimensionCount is 0, dimensionNumBytes must 0; got \" + dimensionNumBytes);\n      }\n    } else if (dimensionNumBytes == 0) {\n      if (dimensionCount != 0) {\n        throw new IllegalArgumentException(\"when dimensionNumBytes is 0, dimensionCount must 0; got \" + dimensionCount);\n      }\n    }\n\n    this.dimensionCount = dimensionCount;\n    this.dimensionNumBytes = dimensionNumBytes;\n  }\n\n","bugFix":["067bb525d2e4993889147c508e2ccb5158f409b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#setDimensions(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#setDimensions(int,int).mjava","sourceNew":"  /**\n   * Enables points indexing.\n   */\n  public void setDimensions(int dimensionCount, int dimensionNumBytes) {\n    if (dimensionCount < 0) {\n      throw new IllegalArgumentException(\"dimensionCount must be >= 0; got \" + dimensionCount);\n    }\n    if (dimensionCount > PointValues.MAX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"dimensionCount must be <= \" + PointValues.MAX_DIMENSIONS + \"; got \" + dimensionCount);\n    }\n    if (dimensionNumBytes < 0) {\n      throw new IllegalArgumentException(\"dimensionNumBytes must be >= 0; got \" + dimensionNumBytes);\n    }\n    if (dimensionNumBytes > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"dimensionNumBytes must be <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + dimensionNumBytes);\n    }\n    if (dimensionCount == 0) {\n      if (dimensionNumBytes != 0) {\n        throw new IllegalArgumentException(\"when dimensionCount is 0, dimensionNumBytes must 0; got \" + dimensionNumBytes);\n      }\n    } else if (dimensionNumBytes == 0) {\n      if (dimensionCount != 0) {\n        throw new IllegalArgumentException(\"when dimensionNumBytes is 0, dimensionCount must 0; got \" + dimensionCount);\n      }\n    }\n\n    this.dimensionCount = dimensionCount;\n    this.dimensionNumBytes = dimensionNumBytes;\n  }\n\n","sourceOld":"  /**\n   * Enables points indexing.\n   */\n  public void setDimensions(int dimensionCount, int dimensionNumBytes) {\n    if (dimensionCount < 0) {\n      throw new IllegalArgumentException(\"dimensionCount must be >= 0; got \" + dimensionCount);\n    }\n    if (dimensionCount > PointValues.MAX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"dimensionCount must be <= \" + PointValues.MAX_DIMENSIONS + \"; got \" + dimensionCount);\n    }\n    if (dimensionNumBytes < 0) {\n      throw new IllegalArgumentException(\"dimensionNumBytes must be >= 0; got \" + dimensionNumBytes);\n    }\n    if (dimensionCount > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"dimensionNumBytes must be <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + dimensionNumBytes);\n    }\n    if (dimensionCount == 0) {\n      if (dimensionNumBytes != 0) {\n        throw new IllegalArgumentException(\"when dimensionCount is 0, dimensionNumBytes must 0; got \" + dimensionNumBytes);\n      }\n    } else if (dimensionNumBytes == 0) {\n      if (dimensionCount != 0) {\n        throw new IllegalArgumentException(\"when dimensionNumBytes is 0, dimensionCount must 0; got \" + dimensionCount);\n      }\n    }\n\n    this.dimensionCount = dimensionCount;\n    this.dimensionNumBytes = dimensionNumBytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#setDimensions(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#setDimensions(int,int).mjava","sourceNew":"  /**\n   * Enables points indexing.\n   */\n  public void setDimensions(int dimensionCount, int dimensionNumBytes) {\n    this.setDimensions(dimensionCount, dimensionCount, dimensionNumBytes);\n  }\n\n","sourceOld":"  /**\n   * Enables points indexing.\n   */\n  public void setDimensions(int dimensionCount, int dimensionNumBytes) {\n    if (dimensionCount < 0) {\n      throw new IllegalArgumentException(\"dimensionCount must be >= 0; got \" + dimensionCount);\n    }\n    if (dimensionCount > PointValues.MAX_DIMENSIONS) {\n      throw new IllegalArgumentException(\"dimensionCount must be <= \" + PointValues.MAX_DIMENSIONS + \"; got \" + dimensionCount);\n    }\n    if (dimensionNumBytes < 0) {\n      throw new IllegalArgumentException(\"dimensionNumBytes must be >= 0; got \" + dimensionNumBytes);\n    }\n    if (dimensionNumBytes > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"dimensionNumBytes must be <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + dimensionNumBytes);\n    }\n    if (dimensionCount == 0) {\n      if (dimensionNumBytes != 0) {\n        throw new IllegalArgumentException(\"when dimensionCount is 0, dimensionNumBytes must 0; got \" + dimensionNumBytes);\n      }\n    } else if (dimensionNumBytes == 0) {\n      if (dimensionCount != 0) {\n        throw new IllegalArgumentException(\"when dimensionNumBytes is 0, dimensionCount must 0; got \" + dimensionCount);\n      }\n    }\n\n    this.dimensionCount = dimensionCount;\n    this.dimensionNumBytes = dimensionNumBytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"f6652c943595e92c187ee904c382863013eae28f":["fd73937ef1d230e8deed60e0859a835558dbd9d6"],"067bb525d2e4993889147c508e2ccb5158f409b1":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd73937ef1d230e8deed60e0859a835558dbd9d6":["067bb525d2e4993889147c508e2ccb5158f409b1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["067bb525d2e4993889147c508e2ccb5158f409b1","fd73937ef1d230e8deed60e0859a835558dbd9d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f6652c943595e92c187ee904c382863013eae28f"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["067bb525d2e4993889147c508e2ccb5158f409b1"],"f6652c943595e92c187ee904c382863013eae28f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"067bb525d2e4993889147c508e2ccb5158f409b1":["fd73937ef1d230e8deed60e0859a835558dbd9d6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"fd73937ef1d230e8deed60e0859a835558dbd9d6":["f6652c943595e92c187ee904c382863013eae28f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}