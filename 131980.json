{"path":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#testInvalidAdds().mjava","commits":[{"id":"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","date":1458928975,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#testInvalidAdds().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInvalidAdds() throws IOException {\n    SolrInputDocument invalidDoc = doc(field(\"text\", 1f, \"the quick brown fox\")); //no id\n    try {\n      // This doc should fail without being tolerant\n      add(\"not-tolerant\", null, invalidDoc);\n      fail(\"Expecting exception\");\n    } catch (Exception e) {\n      //expected\n      assertTrue(e.getMessage().contains(\"Document is missing mandatory uniqueKey field\"));\n    }\n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc}), null, \"(unknown)\");\n    \n    //a valid doc\n    SolrInputDocument validDoc = doc(field(\"id\", 1f, \"1\"), field(\"text\", 1f, \"the quick brown fox\"));\n    \n    try {\n      // This batch should fail without being tolerant\n      add(\"not-tolerant\", null, Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc}));\n      fail(\"Expecting exception\");\n    } catch (Exception e) {\n      //expected\n      assertTrue(e.getMessage().contains(\"Document is missing mandatory uniqueKey field\"));\n    }\n    \n    assertU(commit());\n    assertQ(req(\"q\",\"id:1\")\n        ,\"//result[@numFound='0']\");\n    \n    \n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc}), null, \"(unknown)\");\n    assertU(commit());\n    \n    // verify that the good document made it in. \n    assertQ(req(\"q\",\"id:1\")\n        ,\"//result[@numFound='1']\");\n    \n    invalidDoc = doc(field(\"id\", 1f, \"2\"), field(\"weight\", 1f, \"aaa\"));\n    validDoc = doc(field(\"id\", 1f, \"3\"), field(\"weight\", 1f, \"3\"));\n    \n    try {\n      // This batch should fail without being tolerant\n      add(\"not-tolerant\", null, Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc})); //no id\n      fail(\"Expecting exception\");\n    } catch (Exception e) {\n      //expected\n      assertTrue(e.getMessage().contains(\"Error adding field\"));\n    }\n    \n    assertU(commit());\n    assertQ(req(\"q\",\"id:3\")\n        ,\"//result[@numFound='0']\");\n    \n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc}), null, \"2\");\n    assertU(commit());\n    \n    // The valid document was indexed\n    assertQ(req(\"q\",\"id:3\")\n        ,\"//result[@numFound='1']\");\n    \n    // The invalid document was NOT indexed\n    assertQ(req(\"q\",\"id:2\")\n        ,\"//result[@numFound='0']\");\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#testInvalidAdds().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#testInvalidAdds().mjava","sourceNew":"  @Test\n  public void testInvalidAdds() throws IOException {\n    SolrInputDocument invalidDoc = doc(field(\"text\", \"the quick brown fox\")); //no id\n    try {\n      // This doc should fail without being tolerant\n      add(\"not-tolerant\", null, invalidDoc);\n      fail(\"Expecting exception\");\n    } catch (Exception e) {\n      //expected\n      assertTrue(e.getMessage().contains(\"Document is missing mandatory uniqueKey field\"));\n    }\n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc}), null, \"(unknown)\");\n    \n    //a valid doc\n    SolrInputDocument validDoc = doc(field(\"id\", \"1\"), field(\"text\", \"the quick brown fox\"));\n    \n    try {\n      // This batch should fail without being tolerant\n      add(\"not-tolerant\", null, Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc}));\n      fail(\"Expecting exception\");\n    } catch (Exception e) {\n      //expected\n      assertTrue(e.getMessage().contains(\"Document is missing mandatory uniqueKey field\"));\n    }\n    \n    assertU(commit());\n    assertQ(req(\"q\",\"id:1\")\n        ,\"//result[@numFound='0']\");\n    \n    \n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc}), null, \"(unknown)\");\n    assertU(commit());\n    \n    // verify that the good document made it in. \n    assertQ(req(\"q\",\"id:1\")\n        ,\"//result[@numFound='1']\");\n    \n    invalidDoc = doc(field(\"id\", \"2\"), field(\"weight\", \"aaa\"));\n    validDoc = doc(field(\"id\", \"3\"), field(\"weight\", \"3\"));\n    \n    try {\n      // This batch should fail without being tolerant\n      add(\"not-tolerant\", null, Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc})); //no id\n      fail(\"Expecting exception\");\n    } catch (Exception e) {\n      //expected\n      assertTrue(e.getMessage().contains(\"Error adding field\"));\n    }\n    \n    assertU(commit());\n    assertQ(req(\"q\",\"id:3\")\n        ,\"//result[@numFound='0']\");\n    \n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc}), null, \"2\");\n    assertU(commit());\n    \n    // The valid document was indexed\n    assertQ(req(\"q\",\"id:3\")\n        ,\"//result[@numFound='1']\");\n    \n    // The invalid document was NOT indexed\n    assertQ(req(\"q\",\"id:2\")\n        ,\"//result[@numFound='0']\");\n    \n  }\n\n","sourceOld":"  @Test\n  public void testInvalidAdds() throws IOException {\n    SolrInputDocument invalidDoc = doc(field(\"text\", 1f, \"the quick brown fox\")); //no id\n    try {\n      // This doc should fail without being tolerant\n      add(\"not-tolerant\", null, invalidDoc);\n      fail(\"Expecting exception\");\n    } catch (Exception e) {\n      //expected\n      assertTrue(e.getMessage().contains(\"Document is missing mandatory uniqueKey field\"));\n    }\n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc}), null, \"(unknown)\");\n    \n    //a valid doc\n    SolrInputDocument validDoc = doc(field(\"id\", 1f, \"1\"), field(\"text\", 1f, \"the quick brown fox\"));\n    \n    try {\n      // This batch should fail without being tolerant\n      add(\"not-tolerant\", null, Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc}));\n      fail(\"Expecting exception\");\n    } catch (Exception e) {\n      //expected\n      assertTrue(e.getMessage().contains(\"Document is missing mandatory uniqueKey field\"));\n    }\n    \n    assertU(commit());\n    assertQ(req(\"q\",\"id:1\")\n        ,\"//result[@numFound='0']\");\n    \n    \n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc}), null, \"(unknown)\");\n    assertU(commit());\n    \n    // verify that the good document made it in. \n    assertQ(req(\"q\",\"id:1\")\n        ,\"//result[@numFound='1']\");\n    \n    invalidDoc = doc(field(\"id\", 1f, \"2\"), field(\"weight\", 1f, \"aaa\"));\n    validDoc = doc(field(\"id\", 1f, \"3\"), field(\"weight\", 1f, \"3\"));\n    \n    try {\n      // This batch should fail without being tolerant\n      add(\"not-tolerant\", null, Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc})); //no id\n      fail(\"Expecting exception\");\n    } catch (Exception e) {\n      //expected\n      assertTrue(e.getMessage().contains(\"Error adding field\"));\n    }\n    \n    assertU(commit());\n    assertQ(req(\"q\",\"id:3\")\n        ,\"//result[@numFound='0']\");\n    \n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc}), null, \"2\");\n    assertU(commit());\n    \n    // The valid document was indexed\n    assertQ(req(\"q\",\"id:3\")\n        ,\"//result[@numFound='1']\");\n    \n    // The invalid document was NOT indexed\n    assertQ(req(\"q\",\"id:2\")\n        ,\"//result[@numFound='0']\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#testInvalidAdds().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#testInvalidAdds().mjava","sourceNew":"  @Test\n  public void testInvalidAdds() throws IOException {\n    SolrInputDocument invalidDoc1 = doc(field(\"text\", \"the quick brown fox\")); //no id\n    // This doc should fail without being tolerant\n    Exception e = expectThrows(Exception.class, () -> add(\"not-tolerant\", null, invalidDoc1));\n    assertTrue(e.getMessage().contains(\"Document is missing mandatory uniqueKey field\"));\n\n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc1}), null, \"(unknown)\");\n    \n    //a valid doc\n    SolrInputDocument validDoc1 = doc(field(\"id\", \"1\"), field(\"text\", \"the quick brown fox\"));\n\n    // This batch should fail without being tolerant\n    e = expectThrows(Exception.class, () -> add(\"not-tolerant\", null,\n        Arrays.asList(new SolrInputDocument[]{invalidDoc1, validDoc1})));\n    assertTrue(e.getMessage().contains(\"Document is missing mandatory uniqueKey field\"));\n    \n    assertU(commit());\n    assertQ(req(\"q\",\"id:1\"),\"//result[@numFound='0']\");\n    \n    \n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc1, validDoc1}), null, \"(unknown)\");\n    assertU(commit());\n    \n    // verify that the good document made it in. \n    assertQ(req(\"q\",\"id:1\"),\"//result[@numFound='1']\");\n    \n    SolrInputDocument invalidDoc2 = doc(field(\"id\", \"2\"), field(\"weight\", \"aaa\"));\n    SolrInputDocument validDoc2 = doc(field(\"id\", \"3\"), field(\"weight\", \"3\"));\n\n    // This batch should fail without being tolerant\n    e = expectThrows(Exception.class, () -> add(\"not-tolerant\", null,\n        Arrays.asList(new SolrInputDocument[]{invalidDoc2, validDoc2})));\n    assertTrue(e.getMessage().contains(\"Error adding field\"));\n\n    assertU(commit());\n    assertQ(req(\"q\",\"id:3\"),\"//result[@numFound='0']\");\n    \n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc2, validDoc2}), null, \"2\");\n    assertU(commit());\n    \n    // The valid document was indexed\n    assertQ(req(\"q\",\"id:3\"),\"//result[@numFound='1']\");\n    \n    // The invalid document was NOT indexed\n    assertQ(req(\"q\",\"id:2\"),\"//result[@numFound='0']\");\n    \n  }\n\n","sourceOld":"  @Test\n  public void testInvalidAdds() throws IOException {\n    SolrInputDocument invalidDoc = doc(field(\"text\", \"the quick brown fox\")); //no id\n    try {\n      // This doc should fail without being tolerant\n      add(\"not-tolerant\", null, invalidDoc);\n      fail(\"Expecting exception\");\n    } catch (Exception e) {\n      //expected\n      assertTrue(e.getMessage().contains(\"Document is missing mandatory uniqueKey field\"));\n    }\n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc}), null, \"(unknown)\");\n    \n    //a valid doc\n    SolrInputDocument validDoc = doc(field(\"id\", \"1\"), field(\"text\", \"the quick brown fox\"));\n    \n    try {\n      // This batch should fail without being tolerant\n      add(\"not-tolerant\", null, Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc}));\n      fail(\"Expecting exception\");\n    } catch (Exception e) {\n      //expected\n      assertTrue(e.getMessage().contains(\"Document is missing mandatory uniqueKey field\"));\n    }\n    \n    assertU(commit());\n    assertQ(req(\"q\",\"id:1\")\n        ,\"//result[@numFound='0']\");\n    \n    \n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc}), null, \"(unknown)\");\n    assertU(commit());\n    \n    // verify that the good document made it in. \n    assertQ(req(\"q\",\"id:1\")\n        ,\"//result[@numFound='1']\");\n    \n    invalidDoc = doc(field(\"id\", \"2\"), field(\"weight\", \"aaa\"));\n    validDoc = doc(field(\"id\", \"3\"), field(\"weight\", \"3\"));\n    \n    try {\n      // This batch should fail without being tolerant\n      add(\"not-tolerant\", null, Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc})); //no id\n      fail(\"Expecting exception\");\n    } catch (Exception e) {\n      //expected\n      assertTrue(e.getMessage().contains(\"Error adding field\"));\n    }\n    \n    assertU(commit());\n    assertQ(req(\"q\",\"id:3\")\n        ,\"//result[@numFound='0']\");\n    \n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc}), null, \"2\");\n    assertU(commit());\n    \n    // The valid document was indexed\n    assertQ(req(\"q\",\"id:3\")\n        ,\"//result[@numFound='1']\");\n    \n    // The invalid document was NOT indexed\n    assertQ(req(\"q\",\"id:2\")\n        ,\"//result[@numFound='0']\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#testInvalidAdds().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#testInvalidAdds().mjava","sourceNew":"  @Test\n  public void testInvalidAdds() throws IOException {\n    SolrInputDocument invalidDoc1 = doc(field(\"text\", \"the quick brown fox\")); //no id\n    // This doc should fail without being tolerant\n    Exception e = expectThrows(Exception.class, () -> add(\"not-tolerant\", null, invalidDoc1));\n    assertTrue(e.getMessage().contains(\"Document is missing mandatory uniqueKey field\"));\n\n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc1}), null, \"(unknown)\");\n    \n    //a valid doc\n    SolrInputDocument validDoc1 = doc(field(\"id\", \"1\"), field(\"text\", \"the quick brown fox\"));\n\n    // This batch should fail without being tolerant\n    e = expectThrows(Exception.class, () -> add(\"not-tolerant\", null,\n        Arrays.asList(new SolrInputDocument[]{invalidDoc1, validDoc1})));\n    assertTrue(e.getMessage().contains(\"Document is missing mandatory uniqueKey field\"));\n    \n    assertU(commit());\n    assertQ(req(\"q\",\"id:1\"),\"//result[@numFound='0']\");\n    \n    \n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc1, validDoc1}), null, \"(unknown)\");\n    assertU(commit());\n    \n    // verify that the good document made it in. \n    assertQ(req(\"q\",\"id:1\"),\"//result[@numFound='1']\");\n    \n    SolrInputDocument invalidDoc2 = doc(field(\"id\", \"2\"), field(\"weight\", \"aaa\"));\n    SolrInputDocument validDoc2 = doc(field(\"id\", \"3\"), field(\"weight\", \"3\"));\n\n    // This batch should fail without being tolerant\n    e = expectThrows(Exception.class, () -> add(\"not-tolerant\", null,\n        Arrays.asList(new SolrInputDocument[]{invalidDoc2, validDoc2})));\n    assertTrue(e.getMessage().contains(\"Error adding field\"));\n\n    assertU(commit());\n    assertQ(req(\"q\",\"id:3\"),\"//result[@numFound='0']\");\n    \n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc2, validDoc2}), null, \"2\");\n    assertU(commit());\n    \n    // The valid document was indexed\n    assertQ(req(\"q\",\"id:3\"),\"//result[@numFound='1']\");\n    \n    // The invalid document was NOT indexed\n    assertQ(req(\"q\",\"id:2\"),\"//result[@numFound='0']\");\n    \n  }\n\n","sourceOld":"  @Test\n  public void testInvalidAdds() throws IOException {\n    SolrInputDocument invalidDoc = doc(field(\"text\", \"the quick brown fox\")); //no id\n    try {\n      // This doc should fail without being tolerant\n      add(\"not-tolerant\", null, invalidDoc);\n      fail(\"Expecting exception\");\n    } catch (Exception e) {\n      //expected\n      assertTrue(e.getMessage().contains(\"Document is missing mandatory uniqueKey field\"));\n    }\n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc}), null, \"(unknown)\");\n    \n    //a valid doc\n    SolrInputDocument validDoc = doc(field(\"id\", \"1\"), field(\"text\", \"the quick brown fox\"));\n    \n    try {\n      // This batch should fail without being tolerant\n      add(\"not-tolerant\", null, Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc}));\n      fail(\"Expecting exception\");\n    } catch (Exception e) {\n      //expected\n      assertTrue(e.getMessage().contains(\"Document is missing mandatory uniqueKey field\"));\n    }\n    \n    assertU(commit());\n    assertQ(req(\"q\",\"id:1\")\n        ,\"//result[@numFound='0']\");\n    \n    \n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc}), null, \"(unknown)\");\n    assertU(commit());\n    \n    // verify that the good document made it in. \n    assertQ(req(\"q\",\"id:1\")\n        ,\"//result[@numFound='1']\");\n    \n    invalidDoc = doc(field(\"id\", \"2\"), field(\"weight\", \"aaa\"));\n    validDoc = doc(field(\"id\", \"3\"), field(\"weight\", \"3\"));\n    \n    try {\n      // This batch should fail without being tolerant\n      add(\"not-tolerant\", null, Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc})); //no id\n      fail(\"Expecting exception\");\n    } catch (Exception e) {\n      //expected\n      assertTrue(e.getMessage().contains(\"Error adding field\"));\n    }\n    \n    assertU(commit());\n    assertQ(req(\"q\",\"id:3\")\n        ,\"//result[@numFound='0']\");\n    \n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc}), null, \"2\");\n    assertU(commit());\n    \n    // The valid document was indexed\n    assertQ(req(\"q\",\"id:3\")\n        ,\"//result[@numFound='1']\");\n    \n    // The invalid document was NOT indexed\n    assertQ(req(\"q\",\"id:2\")\n        ,\"//result[@numFound='0']\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#testInvalidAdds().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TolerantUpdateProcessorTest#testInvalidAdds().mjava","sourceNew":"  @Test\n  public void testInvalidAdds() throws IOException {\n    SolrInputDocument invalidDoc1 = doc(field(\"text\", \"the quick brown fox\")); //no id\n    // This doc should fail without being tolerant\n    Exception e = expectThrows(Exception.class, () -> add(\"not-tolerant\", null, invalidDoc1));\n    assertTrue(e.getMessage().contains(\"Document is missing mandatory uniqueKey field\"));\n\n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc1}), null, \"(unknown)\");\n    \n    //a valid doc\n    SolrInputDocument validDoc1 = doc(field(\"id\", \"1\"), field(\"text\", \"the quick brown fox\"));\n\n    // This batch should fail without being tolerant\n    e = expectThrows(Exception.class, () -> add(\"not-tolerant\", null,\n        Arrays.asList(new SolrInputDocument[]{invalidDoc1, validDoc1})));\n    assertTrue(e.getMessage().contains(\"Document is missing mandatory uniqueKey field\"));\n    \n    assertU(commit());\n    assertQ(req(\"q\",\"id:1\"),\"//result[@numFound='0']\");\n    \n    \n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc1, validDoc1}), null, \"(unknown)\");\n    assertU(commit());\n    \n    // verify that the good document made it in. \n    assertQ(req(\"q\",\"id:1\"),\"//result[@numFound='1']\");\n    \n    SolrInputDocument invalidDoc2 = doc(field(\"id\", \"2\"), field(\"weight\", \"aaa\"));\n    SolrInputDocument validDoc2 = doc(field(\"id\", \"3\"), field(\"weight\", \"3\"));\n\n    // This batch should fail without being tolerant\n    e = expectThrows(Exception.class, () -> add(\"not-tolerant\", null,\n        Arrays.asList(new SolrInputDocument[]{invalidDoc2, validDoc2})));\n    assertTrue(e.getMessage().contains(\"Error adding field\"));\n\n    assertU(commit());\n    assertQ(req(\"q\",\"id:3\"),\"//result[@numFound='0']\");\n    \n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc2, validDoc2}), null, \"2\");\n    assertU(commit());\n    \n    // The valid document was indexed\n    assertQ(req(\"q\",\"id:3\"),\"//result[@numFound='1']\");\n    \n    // The invalid document was NOT indexed\n    assertQ(req(\"q\",\"id:2\"),\"//result[@numFound='0']\");\n    \n  }\n\n","sourceOld":"  @Test\n  public void testInvalidAdds() throws IOException {\n    SolrInputDocument invalidDoc = doc(field(\"text\", \"the quick brown fox\")); //no id\n    try {\n      // This doc should fail without being tolerant\n      add(\"not-tolerant\", null, invalidDoc);\n      fail(\"Expecting exception\");\n    } catch (Exception e) {\n      //expected\n      assertTrue(e.getMessage().contains(\"Document is missing mandatory uniqueKey field\"));\n    }\n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc}), null, \"(unknown)\");\n    \n    //a valid doc\n    SolrInputDocument validDoc = doc(field(\"id\", \"1\"), field(\"text\", \"the quick brown fox\"));\n    \n    try {\n      // This batch should fail without being tolerant\n      add(\"not-tolerant\", null, Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc}));\n      fail(\"Expecting exception\");\n    } catch (Exception e) {\n      //expected\n      assertTrue(e.getMessage().contains(\"Document is missing mandatory uniqueKey field\"));\n    }\n    \n    assertU(commit());\n    assertQ(req(\"q\",\"id:1\")\n        ,\"//result[@numFound='0']\");\n    \n    \n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc}), null, \"(unknown)\");\n    assertU(commit());\n    \n    // verify that the good document made it in. \n    assertQ(req(\"q\",\"id:1\")\n        ,\"//result[@numFound='1']\");\n    \n    invalidDoc = doc(field(\"id\", \"2\"), field(\"weight\", \"aaa\"));\n    validDoc = doc(field(\"id\", \"3\"), field(\"weight\", \"3\"));\n    \n    try {\n      // This batch should fail without being tolerant\n      add(\"not-tolerant\", null, Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc})); //no id\n      fail(\"Expecting exception\");\n    } catch (Exception e) {\n      //expected\n      assertTrue(e.getMessage().contains(\"Error adding field\"));\n    }\n    \n    assertU(commit());\n    assertQ(req(\"q\",\"id:3\")\n        ,\"//result[@numFound='0']\");\n    \n    assertAddsSucceedWithErrors(\"tolerant-chain-max-errors-10\", Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc}), null, \"2\");\n    assertU(commit());\n    \n    // The valid document was indexed\n    assertQ(req(\"q\",\"id:3\")\n        ,\"//result[@numFound='1']\");\n    \n    // The invalid document was NOT indexed\n    assertQ(req(\"q\",\"id:2\")\n        ,\"//result[@numFound='0']\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["acd9883560fd89e6448b2b447302fe543040cd4f"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["acd9883560fd89e6448b2b447302fe543040cd4f","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"acd9883560fd89e6448b2b447302fe543040cd4f":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"f8061ddd97f3352007d927dae445884a6f3d857b":["acd9883560fd89e6448b2b447302fe543040cd4f","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["acd9883560fd89e6448b2b447302fe543040cd4f"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}