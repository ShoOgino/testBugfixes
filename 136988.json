{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","commits":[{"id":"9d70e774cb25c8a8d2c3e5e84200f235f9168d87","date":1553016391,"type":1,"author":"Bar Rotstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","sourceNew":"  protected List<SolrCmdDistributor.Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n        String leaderCoreNodeName = leaderReplica.getName();\n        List<Replica> replicas = clusterState.getCollection(collection)\n            .getSlice(shardId)\n            .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n        if (replicas.isEmpty()) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n        skippedCoreNodeNames = new HashSet<>();\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (Replica replica: replicas) {\n          String coreNodeName = replica.getName();\n          if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n            log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n          } else if(zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n            log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n            skippedCoreNodeNames.add(replica.getName());\n          } else if (!clusterState.getLiveNodes().contains(replica.getNodeName()) || replica.getState() == Replica.State.DOWN) {\n            skippedCoreNodeNames.add(replica.getName());\n          } else {\n            nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId, maxRetriesToFollowers));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward on to the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new SolrCmdDistributor.ForwardNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId, maxRetriesOnForward));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":"  private List<Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n    if (!zkEnabled) {\n      return null;\n    }\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n        String leaderCoreNodeName = leaderReplica.getName();\n        List<Replica> replicas = clusterState.getCollection(collection)\n            .getSlice(shardId)\n            .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n        if (replicas.isEmpty()) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<Node> nodes = new ArrayList<>(replicas.size());\n        skippedCoreNodeNames = new HashSet<>();\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (Replica replica: replicas) {\n          String coreNodeName = replica.getName();\n          if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n            log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n          } else if(zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n            log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n            skippedCoreNodeNames.add(replica.getName());\n          } else if (!clusterState.getLiveNodes().contains(replica.getNodeName()) || replica.getState() == Replica.State.DOWN) {\n            skippedCoreNodeNames.add(replica.getName());\n          } else {\n            nodes.add(new StdNode(new ZkCoreNodeProps(replica), collection, shardId, maxRetriesToFollowers));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward on to the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new ForwardNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId, maxRetriesOnForward));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88922bf68f0b509aba218f1b9e7ef5981b4d13bc","date":1570820823,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","sourceNew":"  protected List<SolrCmdDistributor.Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    clusterState = zkController.getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        String leaderCoreNodeName = leaderReplica.getName();\n        List<Replica> replicas = clusterState.getCollection(collection)\n            .getSlice(shardId)\n            .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n        if (replicas.isEmpty()) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n        skippedCoreNodeNames = new HashSet<>();\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (Replica replica: replicas) {\n          String coreNodeName = replica.getName();\n          if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n            log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n          } else if(zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n            log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n            skippedCoreNodeNames.add(replica.getName());\n          } else if (!clusterState.getLiveNodes().contains(replica.getNodeName()) || replica.getState() == Replica.State.DOWN) {\n            skippedCoreNodeNames.add(replica.getName());\n          } else {\n            nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId, maxRetriesToFollowers));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward on to the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new SolrCmdDistributor.ForwardNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId, maxRetriesOnForward));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":"  protected List<SolrCmdDistributor.Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n        String leaderCoreNodeName = leaderReplica.getName();\n        List<Replica> replicas = clusterState.getCollection(collection)\n            .getSlice(shardId)\n            .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n        if (replicas.isEmpty()) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n        skippedCoreNodeNames = new HashSet<>();\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (Replica replica: replicas) {\n          String coreNodeName = replica.getName();\n          if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n            log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n          } else if(zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n            log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n            skippedCoreNodeNames.add(replica.getName());\n          } else if (!clusterState.getLiveNodes().contains(replica.getNodeName()) || replica.getState() == Replica.State.DOWN) {\n            skippedCoreNodeNames.add(replica.getName());\n          } else {\n            nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId, maxRetriesToFollowers));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward on to the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new SolrCmdDistributor.ForwardNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId, maxRetriesOnForward));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","sourceNew":"  protected List<SolrCmdDistributor.Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    clusterState = zkController.getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        String leaderCoreNodeName = leaderReplica.getName();\n        List<Replica> replicas = clusterState.getCollection(collection)\n            .getSlice(shardId)\n            .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n        if (replicas.isEmpty()) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n        skippedCoreNodeNames = new HashSet<>();\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (Replica replica: replicas) {\n          String coreNodeName = replica.getName();\n          if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n            log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n          } else if(zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n            log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n            skippedCoreNodeNames.add(replica.getName());\n          } else if (!clusterState.getLiveNodes().contains(replica.getNodeName()) || replica.getState() == Replica.State.DOWN) {\n            skippedCoreNodeNames.add(replica.getName());\n          } else {\n            nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId, maxRetriesToFollowers));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward on to the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new SolrCmdDistributor.ForwardNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId, maxRetriesOnForward));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":"  protected List<SolrCmdDistributor.Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    ClusterState cstate = zkController.getClusterState();\n    DocCollection coll = cstate.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n        String leaderCoreNodeName = leaderReplica.getName();\n        List<Replica> replicas = clusterState.getCollection(collection)\n            .getSlice(shardId)\n            .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n        if (replicas.isEmpty()) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n        skippedCoreNodeNames = new HashSet<>();\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (Replica replica: replicas) {\n          String coreNodeName = replica.getName();\n          if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n            log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n          } else if(zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n            log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n            skippedCoreNodeNames.add(replica.getName());\n          } else if (!clusterState.getLiveNodes().contains(replica.getNodeName()) || replica.getState() == Replica.State.DOWN) {\n            skippedCoreNodeNames.add(replica.getName());\n          } else {\n            nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId, maxRetriesToFollowers));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward on to the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new SolrCmdDistributor.ForwardNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId, maxRetriesOnForward));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#setupRequest(String,SolrInputDocument,String).mjava","sourceNew":"  protected List<SolrCmdDistributor.Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    clusterState = zkController.getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        String leaderCoreNodeName = leaderReplica.getName();\n        List<Replica> replicas = clusterState.getCollection(collection)\n            .getSlice(shardId)\n            .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n        if (replicas.isEmpty()) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:{}\", skipListSet);\n        }\n\n        List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n        skippedCoreNodeNames = new HashSet<>();\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (Replica replica: replicas) {\n          String coreNodeName = replica.getName();\n          if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n            if (log.isInfoEnabled()) {\n              log.info(\"check url:{} against:{} result:true\", replica.getCoreUrl(), skipListSet);\n            }\n          } else if(zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n            if (log.isDebugEnabled()) {\n              log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n            }\n            skippedCoreNodeNames.add(replica.getName());\n          } else if (!clusterState.getLiveNodes().contains(replica.getNodeName()) || replica.getState() == Replica.State.DOWN) {\n            skippedCoreNodeNames.add(replica.getName());\n          } else {\n            nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId, maxRetriesToFollowers));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward on to the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new SolrCmdDistributor.ForwardNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId, maxRetriesOnForward));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":"  protected List<SolrCmdDistributor.Node> setupRequest(String id, SolrInputDocument doc, String route) {\n    // if we are in zk mode...\n\n    assert TestInjection.injectUpdateRandomPause();\n\n    if ((updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0) {\n      isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n      forwardToLeader = false;\n      return null;\n    }\n\n    clusterState = zkController.getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    Slice slice = coll.getRouter().getTargetSlice(id, doc, route, req.getParams(), coll);\n\n    if (slice == null) {\n      // No slice found.  Most strict routers will have already thrown an exception, so a null return is\n      // a signal to use the slice of this core.\n      // TODO: what if this core is not in the targeted collection?\n      String shardId = cloudDesc.getShardId();\n      slice = coll.getSlice(shardId);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shard \" + shardId + \" in \" + coll);\n      }\n    }\n\n    DistribPhase phase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    if (DistribPhase.FROMLEADER == phase && !couldIbeSubShardLeader(coll)) {\n      if (cloudDesc.isLeader()) {\n        // locally we think we are leader but the request says it came FROMLEADER\n        // that could indicate a problem, let the full logic below figure it out\n      } else {\n\n        assert TestInjection.injectFailReplicaRequests();\n\n        isLeader = false;     // we actually might be the leader, but we don't want leader-logic for these types of updates anyway.\n        forwardToLeader = false;\n        return null;\n      }\n    }\n\n    String shardId = slice.getName();\n\n    try {\n      // Not equivalent to getLeaderProps, which  retries to find a leader.\n      // Replica leader = slice.getLeader();\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n      if (!isLeader) {\n        isSubShardLeader = amISubShardLeader(coll, slice, id, doc);\n        if (isSubShardLeader) {\n          shardId = cloudDesc.getShardId();\n          leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n        }\n      }\n\n      doDefensiveChecks(phase);\n\n      // if request is coming from another collection then we want it to be sent to all replicas\n      // even if its phase is FROMLEADER\n      String fromCollection = updateCommand.getReq().getParams().get(DISTRIB_FROM_COLLECTION);\n\n      if (DistribPhase.FROMLEADER == phase && !isSubShardLeader && fromCollection == null) {\n        // we are coming from the leader, just go local - add no urls\n        forwardToLeader = false;\n        return null;\n      } else if (isLeader || isSubShardLeader) {\n        // that means I want to forward onto my replicas...\n        // so get the replicas...\n        forwardToLeader = false;\n        String leaderCoreNodeName = leaderReplica.getName();\n        List<Replica> replicas = clusterState.getCollection(collection)\n            .getSlice(shardId)\n            .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));\n        if (replicas.isEmpty()) {\n          return null;\n        }\n\n        // check for test param that lets us miss replicas\n        String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);\n        Set<String> skipListSet = null;\n        if (skipList != null) {\n          skipListSet = new HashSet<>(skipList.length);\n          skipListSet.addAll(Arrays.asList(skipList));\n          log.info(\"test.distrib.skip.servers was found and contains:\" + skipListSet);\n        }\n\n        List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());\n        skippedCoreNodeNames = new HashSet<>();\n        ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);\n        for (Replica replica: replicas) {\n          String coreNodeName = replica.getName();\n          if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {\n            log.info(\"check url:\" + replica.getCoreUrl() + \" against:\" + skipListSet + \" result:true\");\n          } else if(zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {\n            log.debug(\"skip url:{} cause its term is less than leader\", replica.getCoreUrl());\n            skippedCoreNodeNames.add(replica.getName());\n          } else if (!clusterState.getLiveNodes().contains(replica.getNodeName()) || replica.getState() == Replica.State.DOWN) {\n            skippedCoreNodeNames.add(replica.getName());\n          } else {\n            nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId, maxRetriesToFollowers));\n          }\n        }\n        return nodes;\n\n      } else {\n        // I need to forward on to the leader...\n        forwardToLeader = true;\n        return Collections.singletonList(\n            new SolrCmdDistributor.ForwardNode(new ZkCoreNodeProps(leaderReplica), zkController.getZkStateReader(), collection, shardId, maxRetriesOnForward));\n      }\n\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"740d649f013f07efbeb73ca854f106c60166e7c0":["88922bf68f0b509aba218f1b9e7ef5981b4d13bc"],"88922bf68f0b509aba218f1b9e7ef5981b4d13bc":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"],"b0b597c65628ca9e73913a07e81691f8229bae35":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87","88922bf68f0b509aba218f1b9e7ef5981b4d13bc"]},"commit2Childs":{"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"88922bf68f0b509aba218f1b9e7ef5981b4d13bc":["740d649f013f07efbeb73ca854f106c60166e7c0","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["88922bf68f0b509aba218f1b9e7ef5981b4d13bc","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}