{"path":"lucene/src/test-framework/java/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","sourceNew":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.chars[i];\n      final char ch2 = utf16Result2.chars[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    if (utf16Result1.length == 0 && lastFieldNumber == -1) {\n      // If there is a field named \"\" (empty string) with a term text of \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\". \n      return -1;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","sourceOld":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.chars[i];\n      final char ch2 = utf16Result2.chars[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    if (utf16Result1.length == 0 && lastFieldNumber == -1) {\n      // If there is a field named \"\" (empty string) with a term text of \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\". \n      return -1;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","sourceNew":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copyBytes(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.chars[i];\n      final char ch2 = utf16Result2.chars[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    if (utf16Result1.length == 0 && lastFieldNumber == -1) {\n      // If there is a field named \"\" (empty string) with a term text of \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\". \n      return -1;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","sourceOld":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copy(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.chars[i];\n      final char ch2 = utf16Result2.chars[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    if (utf16Result1.length == 0 && lastFieldNumber == -1) {\n      // If there is a field named \"\" (empty string) with a term text of \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\". \n      return -1;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#compareToLastTerm(int,BytesRef).mjava","sourceNew":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copyBytes(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.chars[i];\n      final char ch2 = utf16Result2.chars[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    if (utf16Result1.length == 0 && lastFieldNumber == -1) {\n      // If there is a field named \"\" (empty string) with a term text of \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\". \n      return -1;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","sourceOld":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, BytesRef term) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    scratchBytes.copyBytes(term);\n    assert lastTerm.offset == 0;\n    UnicodeUtil.UTF8toUTF16(lastTerm.bytes, 0, lastTerm.length, utf16Result1);\n\n    assert scratchBytes.offset == 0;\n    UnicodeUtil.UTF8toUTF16(scratchBytes.bytes, 0, scratchBytes.length, utf16Result2);\n\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.chars[i];\n      final char ch2 = utf16Result2.chars[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    if (utf16Result1.length == 0 && lastFieldNumber == -1) {\n      // If there is a field named \"\" (empty string) with a term text of \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\". \n      return -1;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["e6e919043fa85ee891123768dd655a98edbbf63c"],"e6e919043fa85ee891123768dd655a98edbbf63c":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["e6e919043fa85ee891123768dd655a98edbbf63c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6e919043fa85ee891123768dd655a98edbbf63c":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}