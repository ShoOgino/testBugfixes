{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int,int,boolean,boolean,boolean).mjava","commits":[{"id":"888c2d6bca1edd8d9293631d6e1d188b036e0f05","date":1334076894,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int,int,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkRandomData(Random random, Analyzer a, int iterations, int maxWordLength, boolean useCharFilter, boolean simple, boolean offsetsAreCorrect) throws IOException {\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    for (int i = 0; i < iterations; i++) {\n      String text;\n      \n      if (random.nextInt(10) == 7) {\n        // real data from linedocs\n        text = docs.nextDoc().get(\"body\");\n        if (text.length() > maxWordLength) {\n\n          // Take a random slice from the text...:\n          int startPos = random.nextInt(text.length() - maxWordLength);\n          if (startPos > 0 && Character.isLowSurrogate(text.charAt(startPos))) {\n            // Take care not to split up a surrogate pair:\n            startPos--;\n            assert Character.isHighSurrogate(text.charAt(startPos));\n          }\n          int endPos = startPos + maxWordLength - 1;\n          if (Character.isHighSurrogate(text.charAt(endPos))) {\n            // Take care not to split up a surrogate pair:\n            endPos--;\n          }\n          text = text.substring(startPos, 1+endPos);\n        }\n      } else {\n        // synthetic\n        text = randomAnalysisString(random, maxWordLength, simple);\n      }\n\n      try {\n        checkAnalysisConsistency(random, a, useCharFilter, text, offsetsAreCorrect);\n      } catch (Throwable t) {\n        // TODO: really we should pass a random seed to\n        // checkAnalysisConsistency then print it here too:\n        System.err.println(\"TEST FAIL: useCharFilter=\" + useCharFilter + \" text='\" + escape(text) + \"'\");\n        Rethrow.rethrow(t);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","date":1334174049,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int,int,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkRandomData(Random random, Analyzer a, int iterations, int maxWordLength, boolean useCharFilter, boolean simple, boolean offsetsAreCorrect) throws IOException {\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    for (int i = 0; i < iterations; i++) {\n      String text;\n      \n      if (random.nextInt(10) == 7) {\n        // real data from linedocs\n        text = docs.nextDoc().get(\"body\");\n        if (text.length() > maxWordLength) {\n\n          // Take a random slice from the text...:\n          int startPos = random.nextInt(text.length() - maxWordLength);\n          if (startPos > 0 && Character.isLowSurrogate(text.charAt(startPos))) {\n            // Take care not to split up a surrogate pair:\n            startPos--;\n            assert Character.isHighSurrogate(text.charAt(startPos));\n          }\n          int endPos = startPos + maxWordLength - 1;\n          if (Character.isHighSurrogate(text.charAt(endPos))) {\n            // Take care not to split up a surrogate pair:\n            endPos--;\n          }\n          text = text.substring(startPos, 1+endPos);\n        }\n      } else {\n        // synthetic\n        text = randomAnalysisString(random, maxWordLength, simple);\n      }\n\n      try {\n        checkAnalysisConsistency(random, a, useCharFilter, text, offsetsAreCorrect);\n      } catch (Throwable t) {\n        // TODO: really we should pass a random seed to\n        // checkAnalysisConsistency then print it here too:\n        System.err.println(\"TEST FAIL: useCharFilter=\" + useCharFilter + \" text='\" + escape(text) + \"'\");\n        Rethrow.rethrow(t);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c99a205cd3c1153b74d37a00632ecc8c343be97","date":1334548351,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int,int,boolean,boolean,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int,int,boolean,boolean,boolean).mjava","sourceNew":"  private static void checkRandomData(Random random, Analyzer a, int iterations, int maxWordLength, boolean useCharFilter, boolean simple, boolean offsetsAreCorrect) throws IOException {\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    \n    try {\n      for (int i = 0; i < iterations; i++) {\n        String text;\n        \n        if (random.nextInt(10) == 7) {\n          // real data from linedocs\n          text = docs.nextDoc().get(\"body\");\n          if (text.length() > maxWordLength) {\n            \n            // Take a random slice from the text...:\n            int startPos = random.nextInt(text.length() - maxWordLength);\n            if (startPos > 0 && Character.isLowSurrogate(text.charAt(startPos))) {\n              // Take care not to split up a surrogate pair:\n              startPos--;\n              assert Character.isHighSurrogate(text.charAt(startPos));\n            }\n            int endPos = startPos + maxWordLength - 1;\n            if (Character.isHighSurrogate(text.charAt(endPos))) {\n              // Take care not to split up a surrogate pair:\n              endPos--;\n            }\n            text = text.substring(startPos, 1+endPos);\n          }\n        } else {\n          // synthetic\n          text = randomAnalysisString(random, maxWordLength, simple);\n        }\n        \n        try {\n          checkAnalysisConsistency(random, a, useCharFilter, text, offsetsAreCorrect);\n        } catch (Throwable t) {\n          // TODO: really we should pass a random seed to\n          // checkAnalysisConsistency then print it here too:\n          System.err.println(\"TEST FAIL: useCharFilter=\" + useCharFilter + \" text='\" + escape(text) + \"'\");\n          Rethrow.rethrow(t);\n        }\n      }\n    } finally {\n      IOUtils.closeWhileHandlingException(docs);\n    }\n  }\n\n","sourceOld":"  private static void checkRandomData(Random random, Analyzer a, int iterations, int maxWordLength, boolean useCharFilter, boolean simple, boolean offsetsAreCorrect) throws IOException {\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    for (int i = 0; i < iterations; i++) {\n      String text;\n      \n      if (random.nextInt(10) == 7) {\n        // real data from linedocs\n        text = docs.nextDoc().get(\"body\");\n        if (text.length() > maxWordLength) {\n\n          // Take a random slice from the text...:\n          int startPos = random.nextInt(text.length() - maxWordLength);\n          if (startPos > 0 && Character.isLowSurrogate(text.charAt(startPos))) {\n            // Take care not to split up a surrogate pair:\n            startPos--;\n            assert Character.isHighSurrogate(text.charAt(startPos));\n          }\n          int endPos = startPos + maxWordLength - 1;\n          if (Character.isHighSurrogate(text.charAt(endPos))) {\n            // Take care not to split up a surrogate pair:\n            endPos--;\n          }\n          text = text.substring(startPos, 1+endPos);\n        }\n      } else {\n        // synthetic\n        text = randomAnalysisString(random, maxWordLength, simple);\n      }\n\n      try {\n        checkAnalysisConsistency(random, a, useCharFilter, text, offsetsAreCorrect);\n      } catch (Throwable t) {\n        // TODO: really we should pass a random seed to\n        // checkAnalysisConsistency then print it here too:\n        System.err.println(\"TEST FAIL: useCharFilter=\" + useCharFilter + \" text='\" + escape(text) + \"'\");\n        Rethrow.rethrow(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2d5b1f6ad16c5f1ce7e0a00225e2c9ffd0bc626","date":1339522233,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int,int,boolean,boolean,boolean,RandomIndexWriter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int,int,boolean,boolean,boolean).mjava","sourceNew":"  private static void checkRandomData(Random random, Analyzer a, int iterations, int maxWordLength, boolean useCharFilter, boolean simple, boolean offsetsAreCorrect, RandomIndexWriter iw) throws IOException {\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    Document doc = null;\n    Field field = null, currentField = null;\n    StringReader bogus = new StringReader(\"\");\n    if (iw != null) {\n      doc = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n      if (random.nextBoolean()) {\n        ft.setStoreTermVectors(true);\n        ft.setStoreTermVectorOffsets(random.nextBoolean());\n        ft.setStoreTermVectorPositions(random.nextBoolean());\n      }\n      if (random.nextBoolean()) {\n        ft.setOmitNorms(true);\n      }\n      String pf = _TestUtil.getPostingsFormat(\"dummy\");\n      boolean supportsOffsets = !doesntSupportOffsets.contains(pf);\n      switch(random.nextInt(4)) {\n        case 0: ft.setIndexOptions(IndexOptions.DOCS_ONLY); break;\n        case 1: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS); break;\n        case 2: ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS); break;\n        default:\n                if (supportsOffsets && offsetsAreCorrect) {\n                  ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n                } else {\n                  ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n                }\n      }\n      currentField = field = new Field(\"dummy\", bogus, ft);\n      doc.add(currentField);\n    }\n    \n    try {\n      for (int i = 0; i < iterations; i++) {\n        String text;\n        \n        if (random.nextInt(10) == 7) {\n          // real data from linedocs\n          text = docs.nextDoc().get(\"body\");\n          if (text.length() > maxWordLength) {\n            \n            // Take a random slice from the text...:\n            int startPos = random.nextInt(text.length() - maxWordLength);\n            if (startPos > 0 && Character.isLowSurrogate(text.charAt(startPos))) {\n              // Take care not to split up a surrogate pair:\n              startPos--;\n              assert Character.isHighSurrogate(text.charAt(startPos));\n            }\n            int endPos = startPos + maxWordLength - 1;\n            if (Character.isHighSurrogate(text.charAt(endPos))) {\n              // Take care not to split up a surrogate pair:\n              endPos--;\n            }\n            text = text.substring(startPos, 1+endPos);\n          }\n        } else {\n          // synthetic\n          text = randomAnalysisString(random, maxWordLength, simple);\n        }\n        \n        try {\n          checkAnalysisConsistency(random, a, useCharFilter, text, offsetsAreCorrect, currentField);\n          if (iw != null) {\n            if (random.nextInt(7) == 0) {\n              // pile up a multivalued field\n              FieldType ft = field.fieldType();\n              currentField = new Field(\"dummy\", bogus, ft);\n              doc.add(currentField);\n            } else {\n              iw.addDocument(doc);\n              if (doc.getFields().size() > 1) {\n                // back to 1 field\n                currentField = field;\n                doc.removeFields(\"dummy\");\n                doc.add(currentField);\n              }\n            }\n          }\n        } catch (Throwable t) {\n          // TODO: really we should pass a random seed to\n          // checkAnalysisConsistency then print it here too:\n          System.err.println(\"TEST FAIL: useCharFilter=\" + useCharFilter + \" text='\" + escape(text) + \"'\");\n          Rethrow.rethrow(t);\n        }\n      }\n    } finally {\n      IOUtils.closeWhileHandlingException(docs);\n    }\n  }\n\n","sourceOld":"  private static void checkRandomData(Random random, Analyzer a, int iterations, int maxWordLength, boolean useCharFilter, boolean simple, boolean offsetsAreCorrect) throws IOException {\n\n    final LineFileDocs docs = new LineFileDocs(random);\n    \n    try {\n      for (int i = 0; i < iterations; i++) {\n        String text;\n        \n        if (random.nextInt(10) == 7) {\n          // real data from linedocs\n          text = docs.nextDoc().get(\"body\");\n          if (text.length() > maxWordLength) {\n            \n            // Take a random slice from the text...:\n            int startPos = random.nextInt(text.length() - maxWordLength);\n            if (startPos > 0 && Character.isLowSurrogate(text.charAt(startPos))) {\n              // Take care not to split up a surrogate pair:\n              startPos--;\n              assert Character.isHighSurrogate(text.charAt(startPos));\n            }\n            int endPos = startPos + maxWordLength - 1;\n            if (Character.isHighSurrogate(text.charAt(endPos))) {\n              // Take care not to split up a surrogate pair:\n              endPos--;\n            }\n            text = text.substring(startPos, 1+endPos);\n          }\n        } else {\n          // synthetic\n          text = randomAnalysisString(random, maxWordLength, simple);\n        }\n        \n        try {\n          checkAnalysisConsistency(random, a, useCharFilter, text, offsetsAreCorrect);\n        } catch (Throwable t) {\n          // TODO: really we should pass a random seed to\n          // checkAnalysisConsistency then print it here too:\n          System.err.println(\"TEST FAIL: useCharFilter=\" + useCharFilter + \" text='\" + escape(text) + \"'\");\n          Rethrow.rethrow(t);\n        }\n      }\n    } finally {\n      IOUtils.closeWhileHandlingException(docs);\n    }\n  }\n\n","bugFix":null,"bugIntro":["995993f24c9f6feb42b49b71e1982cda8fa0b37c"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3c99a205cd3c1153b74d37a00632ecc8c343be97":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"888c2d6bca1edd8d9293631d6e1d188b036e0f05":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","888c2d6bca1edd8d9293631d6e1d188b036e0f05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2d5b1f6ad16c5f1ce7e0a00225e2c9ffd0bc626":["3c99a205cd3c1153b74d37a00632ecc8c343be97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2d5b1f6ad16c5f1ce7e0a00225e2c9ffd0bc626"]},"commit2Childs":{"3c99a205cd3c1153b74d37a00632ecc8c343be97":["d2d5b1f6ad16c5f1ce7e0a00225e2c9ffd0bc626"],"888c2d6bca1edd8d9293631d6e1d188b036e0f05":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["3c99a205cd3c1153b74d37a00632ecc8c343be97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["888c2d6bca1edd8d9293631d6e1d188b036e0f05","ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"d2d5b1f6ad16c5f1ce7e0a00225e2c9ffd0bc626":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}