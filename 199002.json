{"path":"backwards/src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests Wildcard queries with an asterisk.\n   */\n  public void testAsterisk()\n      throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    Query query1 = new TermQuery(new Term(\"body\", \"metal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"m*tals\"));\n\n    BooleanQuery query6 = new BooleanQuery();\n    query6.add(query5, BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query7 = new BooleanQuery();\n    query7.add(query3, BooleanClause.Occur.SHOULD);\n    query7.add(query5, BooleanClause.Occur.SHOULD);\n\n    // Queries do not automatically lower-case search terms:\n    Query query8 = new WildcardQuery(new Term(\"body\", \"M*tal*\"));\n\n    assertMatches(searcher, query1, 1);\n    assertMatches(searcher, query2, 2);\n    assertMatches(searcher, query3, 1);\n    assertMatches(searcher, query4, 2);\n    assertMatches(searcher, query5, 1);\n    assertMatches(searcher, query6, 1);\n    assertMatches(searcher, query7, 2);\n    assertMatches(searcher, query8, 0);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tall\")), 0);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tal\")), 1);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tal*\")), 2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","sourceNew":"  /**\n   * Tests Wildcard queries with an asterisk.\n   */\n  public void testAsterisk()\n      throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    Query query1 = new TermQuery(new Term(\"body\", \"metal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"m*tals\"));\n\n    BooleanQuery query6 = new BooleanQuery();\n    query6.add(query5, BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query7 = new BooleanQuery();\n    query7.add(query3, BooleanClause.Occur.SHOULD);\n    query7.add(query5, BooleanClause.Occur.SHOULD);\n\n    // Queries do not automatically lower-case search terms:\n    Query query8 = new WildcardQuery(new Term(\"body\", \"M*tal*\"));\n\n    assertMatches(searcher, query1, 1);\n    assertMatches(searcher, query2, 2);\n    assertMatches(searcher, query3, 1);\n    assertMatches(searcher, query4, 2);\n    assertMatches(searcher, query5, 1);\n    assertMatches(searcher, query6, 1);\n    assertMatches(searcher, query7, 2);\n    assertMatches(searcher, query8, 0);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tall\")), 0);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tal\")), 1);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tal*\")), 2);\n  }\n\n","sourceOld":"  /**\n   * Tests Wildcard queries with an asterisk.\n   */\n  public void testAsterisk()\n      throws IOException {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    Query query1 = new TermQuery(new Term(\"body\", \"metal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"m*tals\"));\n\n    BooleanQuery query6 = new BooleanQuery();\n    query6.add(query5, BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query7 = new BooleanQuery();\n    query7.add(query3, BooleanClause.Occur.SHOULD);\n    query7.add(query5, BooleanClause.Occur.SHOULD);\n\n    // Queries do not automatically lower-case search terms:\n    Query query8 = new WildcardQuery(new Term(\"body\", \"M*tal*\"));\n\n    assertMatches(searcher, query1, 1);\n    assertMatches(searcher, query2, 2);\n    assertMatches(searcher, query3, 1);\n    assertMatches(searcher, query4, 2);\n    assertMatches(searcher, query5, 1);\n    assertMatches(searcher, query6, 1);\n    assertMatches(searcher, query7, 2);\n    assertMatches(searcher, query8, 0);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tall\")), 0);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tal\")), 1);\n    assertMatches(searcher, new WildcardQuery(new Term(\"body\", \"*tal*\")), 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}