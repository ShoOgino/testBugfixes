{"path":"src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList).mjava","commits":[{"id":"401b0b7bbdbac0027e5b44890c4131d808ec2c9d","date":1260774382,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList).mjava","pathOld":"/dev/null","sourceNew":"    public void parse(NamedList terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a45ddee14ecadf18bc50fff428911687afb4745d","a45ddee14ecadf18bc50fff428911687afb4745d","a45ddee14ecadf18bc50fff428911687afb4745d","a45ddee14ecadf18bc50fff428911687afb4745d","a45ddee14ecadf18bc50fff428911687afb4745d","a45ddee14ecadf18bc50fff428911687afb4745d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList).mjava","pathOld":"src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList).mjava","sourceNew":"    public void parse(NamedList terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void parse(NamedList terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"401b0b7bbdbac0027e5b44890c4131d808ec2c9d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["401b0b7bbdbac0027e5b44890c4131d808ec2c9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"401b0b7bbdbac0027e5b44890c4131d808ec2c9d":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["401b0b7bbdbac0027e5b44890c4131d808ec2c9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}