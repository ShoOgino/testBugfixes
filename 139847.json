{"path":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger.SortedDocIDMerger#SortedDocIDMerger(List[T],int).mjava","commits":[{"id":"d85b6e22926e7564c040d2a864f4887f6c59fa92","date":1482349496,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger.SortedDocIDMerger#SortedDocIDMerger(List[T],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger#DocIDMerger(List[T],int,boolean).mjava","sourceNew":"    private SortedDocIDMerger(List<T> subs, int maxCount) throws IOException {\n      this.subs = subs;\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n      reset();\n    }\n\n","sourceOld":"  /** Construct this from the provided subs, specifying the maximum sub count */\n  public DocIDMerger(List<T> subs, int maxCount, boolean indexIsSorted) throws IOException {\n    this.subs = subs;\n\n    if (indexIsSorted && maxCount > 1) {\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n    } else {\n      // We simply concatentate\n      queue = null;\n    }\n\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocIDMerger.SortedDocIDMerger#SortedDocIDMerger(List[T],int).mjava","pathOld":"/dev/null","sourceNew":"    private SortedDocIDMerger(List<T> subs, int maxCount) throws IOException {\n      this.subs = subs;\n      queue = new PriorityQueue<T>(maxCount) {\n        @Override\n        protected boolean lessThan(Sub a, Sub b) {\n          assert a.mappedDocID != b.mappedDocID;\n          return a.mappedDocID < b.mappedDocID;\n        }\n      };\n      reset();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d85b6e22926e7564c040d2a864f4887f6c59fa92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d85b6e22926e7564c040d2a864f4887f6c59fa92"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d85b6e22926e7564c040d2a864f4887f6c59fa92"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d85b6e22926e7564c040d2a864f4887f6c59fa92","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"d85b6e22926e7564c040d2a864f4887f6c59fa92":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}