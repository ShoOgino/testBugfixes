{"path":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#randomLon(boolean).mjava","commits":[{"id":"3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a","date":1445465230,"type":0,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#randomLon(boolean).mjava","pathOld":"/dev/null","sourceNew":"  public double randomLon(boolean small) {\n    double result;\n    if (small) {\n      result = GeoUtils.normalizeLon(originLon + lonRange * (random().nextDouble() - 0.5));\n    } else {\n      result = -180 + 360.0 * random().nextDouble();\n    }\n    return unscaleLon(scaleLon(result));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ca8abb1a4010d2a9e71b0162d3600e898a8a4f56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#randomLon(boolean).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#randomLon(boolean).mjava","sourceNew":"  public double randomLon(boolean small) {\n    double result;\n    if (small) {\n      result = GeoUtils.normalizeLon(originLon + lonRange * (random().nextDouble() - 0.5));\n    } else {\n      result = -180 + 360.0 * random().nextDouble();\n    }\n    // TODO: we should not do this here!  it weakens the test, and users don't pre-quantize the lat/lons they send us:\n    return unscaleLon(scaleLon(result));\n  }\n\n","sourceOld":"  public double randomLon(boolean small) {\n    double result;\n    if (small) {\n      result = GeoUtils.normalizeLon(originLon + lonRange * (random().nextDouble() - 0.5));\n    } else {\n      result = -180 + 360.0 * random().nextDouble();\n    }\n    return unscaleLon(scaleLon(result));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04e093b3c5b253ca032b8008241eab65c8577dc8","date":1453213765,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#randomLon(boolean).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#randomLon(boolean).mjava","sourceNew":"  public double randomLon(boolean small) {\n    double result;\n    if (small) {\n      result = GeoUtils.normalizeLon(originLon + lonRange * (random().nextDouble() - 0.5));\n    } else {\n      result = -180 + 360.0 * random().nextDouble();\n    }\n    return result;\n  }\n\n","sourceOld":"  public double randomLon(boolean small) {\n    double result;\n    if (small) {\n      result = GeoUtils.normalizeLon(originLon + lonRange * (random().nextDouble() - 0.5));\n    } else {\n      result = -180 + 360.0 * random().nextDouble();\n    }\n    // TODO: we should not do this here!  it weakens the test, and users don't pre-quantize the lat/lons they send us:\n    return unscaleLon(scaleLon(result));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46f77e32b3f394d5d5df9591ca222a03b142579d","date":1453475780,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#randomLon(boolean).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#randomLon(boolean).mjava","sourceNew":"  public double randomLon(boolean small) {\n    double result;\n    if (small) {\n      result = GeoUtils.normalizeLon(originLon + lonRange * (random().nextDouble() - 0.5));\n    } else {\n      result = -180 + 360.0 * random().nextDouble();\n    }\n    // TODO: we should not do this here!  it weakens the test, and users don't pre-quantize the lat/lons they send us:\n    return unscaleLon(scaleLon(result));\n  }\n\n","sourceOld":"  public double randomLon(boolean small) {\n    double result;\n    if (small) {\n      result = GeoUtils.normalizeLon(originLon + lonRange * (random().nextDouble() - 0.5));\n    } else {\n      result = -180 + 360.0 * random().nextDouble();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"92041add9368106252731c77e3528b6073bba8c0","date":1453475837,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#randomLon(boolean).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#randomLon(boolean).mjava","sourceNew":"  public double randomLon(boolean small) {\n    double result;\n    if (small) {\n      result = GeoUtils.normalizeLon(originLon + lonRange * (random().nextDouble() - 0.5));\n    } else {\n      result = -180 + 360.0 * random().nextDouble();\n    }\n    return result;\n  }\n\n","sourceOld":"  public double randomLon(boolean small) {\n    double result;\n    if (small) {\n      result = GeoUtils.normalizeLon(originLon + lonRange * (random().nextDouble() - 0.5));\n    } else {\n      result = -180 + 360.0 * random().nextDouble();\n    }\n    // TODO: we should not do this here!  it weakens the test, and users don't pre-quantize the lat/lons they send us:\n    return unscaleLon(scaleLon(result));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb71491929bcfc900d86ccfd957328d620b9209","date":1453672131,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#randomLon(boolean).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#randomLon(boolean).mjava","sourceNew":"  public double randomLon(boolean small) {\n    double result;\n    if (small) {\n      result = GeoUtils.normalizeLon(originLon + lonRange * (random().nextDouble() - 0.5));\n    } else {\n      result = -180 + 360.0 * random().nextDouble();\n    }\n    // TODO: we should not do this here!  it weakens the test, and users don't pre-quantize the lat/lons they send us:\n    return unscaleLon(scaleLon(result));\n  }\n\n","sourceOld":"  public double randomLon(boolean small) {\n    double result;\n    if (small) {\n      result = GeoUtils.normalizeLon(originLon + lonRange * (random().nextDouble() - 0.5));\n    } else {\n      result = -180 + 360.0 * random().nextDouble();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["04995b00da1e08edb88b14c5a9789d741de5c51d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04995b00da1e08edb88b14c5a9789d741de5c51d","date":1453863716,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#randomLon(boolean).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#randomLon(boolean).mjava","sourceNew":"  public double randomLon(boolean small) {\n    double result;\n    if (small) {\n      result = GeoUtils.normalizeLon(originLon + lonRange * (random().nextDouble() - 0.5));\n    } else {\n      result = -180 + 360.0 * random().nextDouble();\n    }\n    return result;\n  }\n\n","sourceOld":"  public double randomLon(boolean small) {\n    double result;\n    if (small) {\n      result = GeoUtils.normalizeLon(originLon + lonRange * (random().nextDouble() - 0.5));\n    } else {\n      result = -180 + 360.0 * random().nextDouble();\n    }\n    // TODO: we should not do this here!  it weakens the test, and users don't pre-quantize the lat/lons they send us:\n    return unscaleLon(scaleLon(result));\n  }\n\n","bugFix":["3bb71491929bcfc900d86ccfd957328d620b9209"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#randomLon(boolean).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#randomLon(boolean).mjava","sourceNew":"  public double randomLon(boolean small) {\n    double result;\n    if (small) {\n      result = GeoUtils.normalizeLon(originLon + lonRange * (random().nextDouble() - 0.5));\n    } else {\n      result = -180 + 360.0 * random().nextDouble();\n    }\n    return result;\n  }\n\n","sourceOld":"  public double randomLon(boolean small) {\n    double result;\n    if (small) {\n      result = GeoUtils.normalizeLon(originLon + lonRange * (random().nextDouble() - 0.5));\n    } else {\n      result = -180 + 360.0 * random().nextDouble();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#randomLon(boolean).mjava","sourceNew":null,"sourceOld":"  public double randomLon(boolean small) {\n    double result;\n    if (small) {\n      result = GeoUtils.normalizeLon(originLon + lonRange * (random().nextDouble() - 0.5));\n    } else {\n      result = -180 + 360.0 * random().nextDouble();\n    }\n    // TODO: we should not do this here!  it weakens the test, and users don't pre-quantize the lat/lons they send us:\n    return unscaleLon(scaleLon(result));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92041add9368106252731c77e3528b6073bba8c0":["46f77e32b3f394d5d5df9591ca222a03b142579d"],"3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04e093b3c5b253ca032b8008241eab65c8577dc8":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["3bb71491929bcfc900d86ccfd957328d620b9209","937923083e4d137932336fc80f3d78758ff698a6"],"3bb71491929bcfc900d86ccfd957328d620b9209":["92041add9368106252731c77e3528b6073bba8c0"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a"],"937923083e4d137932336fc80f3d78758ff698a6":["04995b00da1e08edb88b14c5a9789d741de5c51d"],"04995b00da1e08edb88b14c5a9789d741de5c51d":["3bb71491929bcfc900d86ccfd957328d620b9209"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"],"46f77e32b3f394d5d5df9591ca222a03b142579d":["04e093b3c5b253ca032b8008241eab65c8577dc8"]},"commit2Childs":{"92041add9368106252731c77e3528b6073bba8c0":["3bb71491929bcfc900d86ccfd957328d620b9209"],"3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"04e093b3c5b253ca032b8008241eab65c8577dc8":["46f77e32b3f394d5d5df9591ca222a03b142579d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["04e093b3c5b253ca032b8008241eab65c8577dc8"],"3bb71491929bcfc900d86ccfd957328d620b9209":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","04995b00da1e08edb88b14c5a9789d741de5c51d"],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04995b00da1e08edb88b14c5a9789d741de5c51d":["937923083e4d137932336fc80f3d78758ff698a6"],"46f77e32b3f394d5d5df9591ca222a03b142579d":["92041add9368106252731c77e3528b6073bba8c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}