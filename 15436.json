{"path":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","commits":[{"id":"f6ee314d4978b896d2a804ee60ba6e830624d990","date":1323044870,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  private int mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    final NormsWriter writer = codec.normsFormat().normsWriter(segmentWriteState);\n    \n    boolean success = false;\n    try {\n      int numMerged = writer.merge(mergeState);\n      success = true;\n      return numMerged;\n    } finally {\n      if (success) {\n        IOUtils.close(writer);\n      } else {\n        IOUtils.closeWhileHandlingException(writer);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  private int mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    final NormsWriter writer = codec.normsFormat().normsWriter(segmentWriteState);\n    \n    boolean success = false;\n    try {\n      int numMerged = writer.merge(mergeState);\n      success = true;\n      return numMerged;\n    } finally {\n      if (success) {\n        IOUtils.close(writer);\n      } else {\n        IOUtils.closeWhileHandlingException(writer);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  private int mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    final NormsWriter writer = codec.normsFormat().normsWriter(segmentWriteState);\n    \n    boolean success = false;\n    try {\n      int numMerged = writer.merge(mergeState);\n      success = true;\n      return numMerged;\n    } finally {\n      if (success) {\n        IOUtils.close(writer);\n      } else {\n        IOUtils.closeWhileHandlingException(writer);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","sourceNew":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    final PerDocConsumer docsConsumer = codec.normsFormat()\n        .docsConsumer(new PerDocWriteState(segmentWriteState));\n    // TODO: remove this check when 3.x indexes are no longer supported\n    // (3.x indexes don't have docvalues)\n    if (docsConsumer == null) {\n      return;\n    }\n    boolean success = false;\n    try {\n      docsConsumer.merge(mergeState);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(docsConsumer);\n      } else {\n        IOUtils.closeWhileHandlingException(docsConsumer);\n      }\n    }\n  }\n\n","sourceOld":"  private int mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    final NormsWriter writer = codec.normsFormat().normsWriter(segmentWriteState);\n    \n    boolean success = false;\n    try {\n      int numMerged = writer.merge(mergeState);\n      success = true;\n      return numMerged;\n    } finally {\n      if (success) {\n        IOUtils.close(writer);\n      } else {\n        IOUtils.closeWhileHandlingException(writer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms(SegmentWriteState).mjava","sourceNew":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    final PerDocConsumer docsConsumer = codec.normsFormat()\n        .docsConsumer(new PerDocWriteState(segmentWriteState));\n    // TODO: remove this check when 3.x indexes are no longer supported\n    // (3.x indexes don't have docvalues)\n    if (docsConsumer == null) {\n      return;\n    }\n    boolean success = false;\n    try {\n      docsConsumer.merge(mergeState);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(docsConsumer);\n      } else {\n        IOUtils.closeWhileHandlingException(docsConsumer);\n      }\n    }\n  }\n\n","sourceOld":"  private void mergeNorms(SegmentWriteState segmentWriteState) throws IOException {\n    final PerDocConsumer docsConsumer = codec.normsFormat()\n        .docsConsumer(new PerDocWriteState(segmentWriteState));\n    // TODO: remove this check when 3.x indexes are no longer supported\n    // (3.x indexes don't have docvalues)\n    if (docsConsumer == null) {\n      return;\n    }\n    boolean success = false;\n    try {\n      docsConsumer.merge(mergeState);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(docsConsumer);\n      } else {\n        IOUtils.closeWhileHandlingException(docsConsumer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6ee314d4978b896d2a804ee60ba6e830624d990"],"f6ee314d4978b896d2a804ee60ba6e830624d990":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","f6ee314d4978b896d2a804ee60ba6e830624d990"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"f6ee314d4978b896d2a804ee60ba6e830624d990":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}