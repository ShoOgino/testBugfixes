{"path":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#visit(QueryVisitor).mjava","commits":[{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#visit(QueryVisitor).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void visit(QueryVisitor visitor) {\n    // TODO find some way of consuming Automata\n    if (visitor.acceptField(term.field())) {\n      visitor.visitLeaf(this);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d35c63123a7e255b58f8cf3948eb9a6128100a32","date":1574872099,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#visit(QueryVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#visit(QueryVisitor).mjava","sourceNew":"  @Override\n  public void visit(QueryVisitor visitor) {\n    if (visitor.acceptField(field)) {\n      if (maxEdits == 0 || prefixLength >= term.text().length()) {\n        visitor.consumeTerms(this, term);\n      } else {\n        // Note: we're rebuilding the automaton here, so this can be expensive\n        visitor.consumeTermsMatching(this, field,\n            new ByteRunAutomaton(toAutomaton(), false, Operations.DEFAULT_MAX_DETERMINIZED_STATES));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visit(QueryVisitor visitor) {\n    // TODO find some way of consuming Automata\n    if (visitor.acceptField(term.field())) {\n      visitor.visitLeaf(this);\n    }\n  }\n\n","bugFix":null,"bugIntro":["b8640890b0bef9732f1444f1b08be6c4fa024ce8","b87e0fb536a3ff56f8251c1a1b4539ac7eea519f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b87e0fb536a3ff56f8251c1a1b4539ac7eea519f","date":1576817366,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#visit(QueryVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#visit(QueryVisitor).mjava","sourceNew":"  @Override\n  public void visit(QueryVisitor visitor) {\n    if (visitor.acceptField(field)) {\n      if (maxEdits == 0 || prefixLength >= term.text().length()) {\n        visitor.consumeTerms(this, term);\n      } else {\n        // Note: we're rebuilding the automaton here, so this can be expensive\n        try {\n          visitor.consumeTermsMatching(this, field,\n              new ByteRunAutomaton(toAutomaton(), false, Operations.DEFAULT_MAX_DETERMINIZED_STATES));\n        } catch (TooComplexToDeterminizeException e) {\n          throw new FuzzyTermsEnum.FuzzyTermsException(term.text(), e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visit(QueryVisitor visitor) {\n    if (visitor.acceptField(field)) {\n      if (maxEdits == 0 || prefixLength >= term.text().length()) {\n        visitor.consumeTerms(this, term);\n      } else {\n        // Note: we're rebuilding the automaton here, so this can be expensive\n        visitor.consumeTermsMatching(this, field,\n            new ByteRunAutomaton(toAutomaton(), false, Operations.DEFAULT_MAX_DETERMINIZED_STATES));\n      }\n    }\n  }\n\n","bugFix":["d35c63123a7e255b58f8cf3948eb9a6128100a32"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c66470e527299cc148ad0b3441d08dfb7cb9e03","date":1576859740,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#visit(QueryVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#visit(QueryVisitor).mjava","sourceNew":"  @Override\n  public void visit(QueryVisitor visitor) {\n    if (visitor.acceptField(field)) {\n      if (maxEdits == 0 || prefixLength >= term.text().length()) {\n        visitor.consumeTerms(this, term);\n      } else {\n        // Note: we're rebuilding the automaton here, so this can be expensive\n        try {\n          visitor.consumeTermsMatching(this, field,\n              new ByteRunAutomaton(toAutomaton(), false, Operations.DEFAULT_MAX_DETERMINIZED_STATES));\n        } catch (TooComplexToDeterminizeException e) {\n          throw new FuzzyTermsEnum.FuzzyTermsException(term.text(), e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visit(QueryVisitor visitor) {\n    if (visitor.acceptField(field)) {\n      if (maxEdits == 0 || prefixLength >= term.text().length()) {\n        visitor.consumeTerms(this, term);\n      } else {\n        // Note: we're rebuilding the automaton here, so this can be expensive\n        visitor.consumeTermsMatching(this, field,\n            new ByteRunAutomaton(toAutomaton(), false, Operations.DEFAULT_MAX_DETERMINIZED_STATES));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e99d92de6748e3bbd2dd7b72695cdb952b2d835","date":1579100291,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#visit(QueryVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#visit(QueryVisitor).mjava","sourceNew":"  @Override\n  public void visit(QueryVisitor visitor) {\n    if (visitor.acceptField(field)) {\n      if (maxEdits == 0 || prefixLength >= term.text().length()) {\n        visitor.consumeTerms(this, term);\n      } else {\n        automata[automata.length - 1].visit(visitor, this, field);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visit(QueryVisitor visitor) {\n    if (visitor.acceptField(field)) {\n      if (maxEdits == 0 || prefixLength >= term.text().length()) {\n        visitor.consumeTerms(this, term);\n      } else {\n        // Note: we're rebuilding the automaton here, so this can be expensive\n        try {\n          visitor.consumeTermsMatching(this, field,\n              new ByteRunAutomaton(toAutomaton(), false, Operations.DEFAULT_MAX_DETERMINIZED_STATES));\n        } catch (TooComplexToDeterminizeException e) {\n          throw new FuzzyTermsEnum.FuzzyTermsException(term.text(), e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad855e2f1f69c5e330d1027a5d54f8814e47a0d6","date":1588847334,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#visit(QueryVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#visit(QueryVisitor).mjava","sourceNew":"  @Override\n  public void visit(QueryVisitor visitor) {\n    if (visitor.acceptField(field)) {\n      if (maxEdits == 0 || prefixLength >= term.text().length()) {\n        visitor.consumeTerms(this, term);\n      } else {\n        visitor.consumeTermsMatching(this, term.field(), () -> getAutomata().runAutomaton);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visit(QueryVisitor visitor) {\n    if (visitor.acceptField(field)) {\n      if (maxEdits == 0 || prefixLength >= term.text().length()) {\n        visitor.consumeTerms(this, term);\n      } else {\n        automata[automata.length - 1].visit(visitor, this, field);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["b8640890b0bef9732f1444f1b08be6c4fa024ce8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8640890b0bef9732f1444f1b08be6c4fa024ce8","date":1596711904,"type":3,"author":"Julie Tibshirani","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#visit(QueryVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyQuery#visit(QueryVisitor).mjava","sourceNew":"  @Override\n  public void visit(QueryVisitor visitor) {\n    if (visitor.acceptField(field)) {\n      visitor.consumeTermsMatching(this, term.field(), () -> getAutomata().runAutomaton);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visit(QueryVisitor visitor) {\n    if (visitor.acceptField(field)) {\n      if (maxEdits == 0 || prefixLength >= term.text().length()) {\n        visitor.consumeTerms(this, term);\n      } else {\n        visitor.consumeTermsMatching(this, term.field(), () -> getAutomata().runAutomaton);\n      }\n    }\n  }\n\n","bugFix":["d35c63123a7e255b58f8cf3948eb9a6128100a32","ad855e2f1f69c5e330d1027a5d54f8814e47a0d6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e99d92de6748e3bbd2dd7b72695cdb952b2d835":["b87e0fb536a3ff56f8251c1a1b4539ac7eea519f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b8640890b0bef9732f1444f1b08be6c4fa024ce8":["ad855e2f1f69c5e330d1027a5d54f8814e47a0d6"],"ad855e2f1f69c5e330d1027a5d54f8814e47a0d6":["3e99d92de6748e3bbd2dd7b72695cdb952b2d835"],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":["d35c63123a7e255b58f8cf3948eb9a6128100a32","b87e0fb536a3ff56f8251c1a1b4539ac7eea519f"],"d35c63123a7e255b58f8cf3948eb9a6128100a32":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"b87e0fb536a3ff56f8251c1a1b4539ac7eea519f":["d35c63123a7e255b58f8cf3948eb9a6128100a32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8640890b0bef9732f1444f1b08be6c4fa024ce8"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3e99d92de6748e3bbd2dd7b72695cdb952b2d835":["ad855e2f1f69c5e330d1027a5d54f8814e47a0d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"b8640890b0bef9732f1444f1b08be6c4fa024ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad855e2f1f69c5e330d1027a5d54f8814e47a0d6":["b8640890b0bef9732f1444f1b08be6c4fa024ce8"],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":[],"d35c63123a7e255b58f8cf3948eb9a6128100a32":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","b87e0fb536a3ff56f8251c1a1b4539ac7eea519f"],"b87e0fb536a3ff56f8251c1a1b4539ac7eea519f":["3e99d92de6748e3bbd2dd7b72695cdb952b2d835","4c66470e527299cc148ad0b3441d08dfb7cb9e03"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["d35c63123a7e255b58f8cf3948eb9a6128100a32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}