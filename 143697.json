{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#getValueForNormalization().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#getValueForNormalization().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#getValueForNormalization().mjava","sourceNew":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = 0.0f;\n      for (int i = 0 ; i < weights.size(); i++) {\n        // call sumOfSquaredWeights for all clauses in case of side effects\n        float s = weights.get(i).getValueForNormalization();         // sum sub weights\n        if (!clauses.get(i).isProhibited())\n          // only add to sum for non-prohibited clauses\n          sum += s;\n      }\n\n      sum *= getBoost() * getBoost();             // boost each sub-weight\n\n      return sum ;\n    }\n\n","sourceOld":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = 0.0f;\n      for (int i = 0 ; i < weights.size(); i++) {\n        // call sumOfSquaredWeights for all clauses in case of side effects\n        float s = weights.get(i).getValueForNormalization();         // sum sub weights\n        if (!clauses.get(i).isProhibited())\n          // only add to sum for non-prohibited clauses\n          sum += s;\n      }\n\n      sum *= getBoost() * getBoost();             // boost each sub-weight\n\n      return sum ;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea","date":1390928346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#getValueForNormalization().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#getValueForNormalization().mjava","sourceNew":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = 0.0f;\n      for (int i = 0 ; i < weights.size(); i++) {\n        // call sumOfSquaredWeights for all clauses in case of side effects\n        float s = weights.get(i).getValueForNormalization();         // sum sub weights\n        if (!clauses.get(i).isProhibited()) {\n          // only add to sum for non-prohibited clauses\n          sum += s;\n        }\n      }\n\n      sum *= getBoost() * getBoost();             // boost each sub-weight\n\n      return sum ;\n    }\n\n","sourceOld":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = 0.0f;\n      for (int i = 0 ; i < weights.size(); i++) {\n        // call sumOfSquaredWeights for all clauses in case of side effects\n        float s = weights.get(i).getValueForNormalization();         // sum sub weights\n        if (!clauses.get(i).isProhibited())\n          // only add to sum for non-prohibited clauses\n          sum += s;\n      }\n\n      sum *= getBoost() * getBoost();             // boost each sub-weight\n\n      return sum ;\n    }\n\n","bugFix":["20645c714ca2a7b7707c2707d58ee9fa384c7362"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a18a03f140cbd3f78694787c9f98cf452aab7b7f","date":1423241474,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#getValueForNormalization().mjava","sourceNew":null,"sourceOld":"    @Override\n    public float getValueForNormalization() throws IOException {\n      float sum = 0.0f;\n      for (int i = 0 ; i < weights.size(); i++) {\n        // call sumOfSquaredWeights for all clauses in case of side effects\n        float s = weights.get(i).getValueForNormalization();         // sum sub weights\n        if (!clauses.get(i).isProhibited()) {\n          // only add to sum for non-prohibited clauses\n          sum += s;\n        }\n      }\n\n      sum *= getBoost() * getBoost();             // boost each sub-weight\n\n      return sum ;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}