{"path":"solr/core/src/java/org/apache/solr/metrics/OperatingSystemMetricSet#getMetrics().mjava","commits":[{"id":"d6b8086d510892eddfabded3e60641cbe8bd7884","date":1482320327,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/OperatingSystemMetricSet#getMetrics().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Map<String, Metric> getMetrics() {\n    final Map<String, Metric> metrics = new HashMap<>();\n\n    try {\n      final ObjectName on = new ObjectName(\"java.lang:type=OperatingSystem\");\n      // verify that it exists\n      mBeanServer.getMBeanInfo(on);\n      for (String metric : METRICS) {\n        metrics.put(metric, new JmxAttributeGauge(mBeanServer, on, metric));\n      }\n    } catch (JMException ignored) {\n      log.debug(\"Unable to load OperatingSystem MBean\", ignored);\n    }\n\n    return metrics;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f0c6cf333a5716b595b03873b3efcae8123ceff","date":1482835153,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/OperatingSystemMetricSet#getMetrics().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/OperatingSystemMetricSet#getMetrics().mjava","sourceNew":"  @Override\n  public Map<String, Metric> getMetrics() {\n    final Map<String, Metric> metrics = new HashMap<>();\n\n    try {\n      final ObjectName on = new ObjectName(\"java.lang:type=OperatingSystem\");\n      // verify that it exists\n      MBeanInfo info = mBeanServer.getMBeanInfo(on);\n      // collect valid attributes\n      Set<String> attributes = new HashSet<>();\n      for (MBeanAttributeInfo ai : info.getAttributes()) {\n        attributes.add(ai.getName());\n      }\n      for (String metric : METRICS) {\n        // verify that an attribute exists before attempting to add it\n        if (attributes.contains(metric)) {\n          metrics.put(metric, new JmxAttributeGauge(mBeanServer, on, metric));\n        }\n      }\n    } catch (JMException ignored) {\n      log.debug(\"Unable to load OperatingSystem MBean\", ignored);\n    }\n\n    return metrics;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Metric> getMetrics() {\n    final Map<String, Metric> metrics = new HashMap<>();\n\n    try {\n      final ObjectName on = new ObjectName(\"java.lang:type=OperatingSystem\");\n      // verify that it exists\n      mBeanServer.getMBeanInfo(on);\n      for (String metric : METRICS) {\n        metrics.put(metric, new JmxAttributeGauge(mBeanServer, on, metric));\n      }\n    } catch (JMException ignored) {\n      log.debug(\"Unable to load OperatingSystem MBean\", ignored);\n    }\n\n    return metrics;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/OperatingSystemMetricSet#getMetrics().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Map<String, Metric> getMetrics() {\n    final Map<String, Metric> metrics = new HashMap<>();\n\n    try {\n      final ObjectName on = new ObjectName(\"java.lang:type=OperatingSystem\");\n      // verify that it exists\n      MBeanInfo info = mBeanServer.getMBeanInfo(on);\n      // collect valid attributes\n      Set<String> attributes = new HashSet<>();\n      for (MBeanAttributeInfo ai : info.getAttributes()) {\n        attributes.add(ai.getName());\n      }\n      for (String metric : METRICS) {\n        // verify that an attribute exists before attempting to add it\n        if (attributes.contains(metric)) {\n          metrics.put(metric, new JmxAttributeGauge(mBeanServer, on, metric));\n        }\n      }\n    } catch (JMException ignored) {\n      log.debug(\"Unable to load OperatingSystem MBean\", ignored);\n    }\n\n    return metrics;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/OperatingSystemMetricSet#getMetrics().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/OperatingSystemMetricSet#getMetrics().mjava","sourceNew":"  @Override\n  public Map<String, Metric> getMetrics() {\n    final Map<String, Metric> metrics = new HashMap<>();\n    OperatingSystemMXBean os = ManagementFactory.getOperatingSystemMXBean();\n    MetricUtils.addMXBeanMetrics(os, MetricUtils.OS_MXBEAN_CLASSES, null, (k, v) -> {\n      if (!metrics.containsKey(k)) {\n        metrics.put(k, v);\n      }\n    });\n    return metrics;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Metric> getMetrics() {\n    final Map<String, Metric> metrics = new HashMap<>();\n\n    try {\n      final ObjectName on = new ObjectName(\"java.lang:type=OperatingSystem\");\n      // verify that it exists\n      MBeanInfo info = mBeanServer.getMBeanInfo(on);\n      // collect valid attributes\n      Set<String> attributes = new HashSet<>();\n      for (MBeanAttributeInfo ai : info.getAttributes()) {\n        attributes.add(ai.getName());\n      }\n      for (String metric : METRICS) {\n        // verify that an attribute exists before attempting to add it\n        if (attributes.contains(metric)) {\n          metrics.put(metric, new JmxAttributeGauge(mBeanServer, on, metric));\n        }\n      }\n    } catch (JMException ignored) {\n      log.debug(\"Unable to load OperatingSystem MBean\", ignored);\n    }\n\n    return metrics;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/OperatingSystemMetricSet#getMetrics().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/OperatingSystemMetricSet#getMetrics().mjava","sourceNew":"  @Override\n  public Map<String, Metric> getMetrics() {\n    final Map<String, Metric> metrics = new HashMap<>();\n    OperatingSystemMXBean os = ManagementFactory.getOperatingSystemMXBean();\n    MetricUtils.addMXBeanMetrics(os, MetricUtils.OS_MXBEAN_CLASSES, null, (k, v) -> {\n      if (!metrics.containsKey(k)) {\n        metrics.put(k, v);\n      }\n    });\n    return metrics;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Metric> getMetrics() {\n    final Map<String, Metric> metrics = new HashMap<>();\n\n    try {\n      final ObjectName on = new ObjectName(\"java.lang:type=OperatingSystem\");\n      // verify that it exists\n      MBeanInfo info = mBeanServer.getMBeanInfo(on);\n      // collect valid attributes\n      Set<String> attributes = new HashSet<>();\n      for (MBeanAttributeInfo ai : info.getAttributes()) {\n        attributes.add(ai.getName());\n      }\n      for (String metric : METRICS) {\n        // verify that an attribute exists before attempting to add it\n        if (attributes.contains(metric)) {\n          metrics.put(metric, new JmxAttributeGauge(mBeanServer, on, metric));\n        }\n      }\n    } catch (JMException ignored) {\n      log.debug(\"Unable to load OperatingSystem MBean\", ignored);\n    }\n\n    return metrics;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["6f0c6cf333a5716b595b03873b3efcae8123ceff"],"d6b8086d510892eddfabded3e60641cbe8bd7884":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f0c6cf333a5716b595b03873b3efcae8123ceff":["d6b8086d510892eddfabded3e60641cbe8bd7884"],"816521ebaad5add9cb96bb88c577394e2938c40b":["6f0c6cf333a5716b595b03873b3efcae8123ceff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6f0c6cf333a5716b595b03873b3efcae8123ceff"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"d6b8086d510892eddfabded3e60641cbe8bd7884":["6f0c6cf333a5716b595b03873b3efcae8123ceff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6b8086d510892eddfabded3e60641cbe8bd7884","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"6f0c6cf333a5716b595b03873b3efcae8123ceff":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}