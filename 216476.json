{"path":"src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","commits":[{"id":"19de316fa1c8ef27502785c72cf83f060af72a1e","date":1119559427,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(verbose) System.out.println(\"Query: \" + queryStr);\n    Query query = QueryParser.parse(queryStr, FIELD_NAME,\n        new StandardAnalyzer());\n    Hits multiSearcherHits = multiSearcher.search(query);\n    Hits singleSearcherHits = singleSearcher.search(query);\n    assertEquals(multiSearcherHits.length(), singleSearcherHits.length());\n    for (int i = 0; i < multiSearcherHits.length(); i++) {\n      Document docMulti = multiSearcherHits.doc(i);\n      Document docSingle = singleSearcherHits.doc(i);\n      if(verbose) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits.score(i));\n      if(verbose) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits.score(i));\n      assertEquals(multiSearcherHits.score(i), singleSearcherHits.score(i),\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(verbose) System.out.println();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","sourceNew":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(verbose) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    Query query = queryParser.parse(queryStr);\n    Hits multiSearcherHits = multiSearcher.search(query);\n    Hits singleSearcherHits = singleSearcher.search(query);\n    assertEquals(multiSearcherHits.length(), singleSearcherHits.length());\n    for (int i = 0; i < multiSearcherHits.length(); i++) {\n      Document docMulti = multiSearcherHits.doc(i);\n      Document docSingle = singleSearcherHits.doc(i);\n      if(verbose) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits.score(i));\n      if(verbose) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits.score(i));\n      assertEquals(multiSearcherHits.score(i), singleSearcherHits.score(i),\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(verbose) System.out.println();\n  }\n\n","sourceOld":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(verbose) System.out.println(\"Query: \" + queryStr);\n    Query query = QueryParser.parse(queryStr, FIELD_NAME,\n        new StandardAnalyzer());\n    Hits multiSearcherHits = multiSearcher.search(query);\n    Hits singleSearcherHits = singleSearcher.search(query);\n    assertEquals(multiSearcherHits.length(), singleSearcherHits.length());\n    for (int i = 0; i < multiSearcherHits.length(); i++) {\n      Document docMulti = multiSearcherHits.doc(i);\n      Document docSingle = singleSearcherHits.doc(i);\n      if(verbose) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits.score(i));\n      if(verbose) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits.score(i));\n      assertEquals(multiSearcherHits.score(i), singleSearcherHits.score(i),\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(verbose) System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","sourceNew":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(verbose) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    Query query = queryParser.parse(queryStr);\n    ScoreDoc[] multiSearcherHits = multiSearcher.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleSearcherHits = singleSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(multiSearcherHits.length, singleSearcherHits.length);\n    for (int i = 0; i < multiSearcherHits.length; i++) {\n      Document docMulti = multiSearcher.doc(multiSearcherHits[i].doc);\n      Document docSingle = singleSearcher.doc(singleSearcherHits[i].doc);\n      if(verbose) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits[i].score);\n      if(verbose) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits[i].score);\n      assertEquals(multiSearcherHits[i].score, singleSearcherHits[i].score,\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(verbose) System.out.println();\n  }\n\n","sourceOld":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(verbose) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    Query query = queryParser.parse(queryStr);\n    Hits multiSearcherHits = multiSearcher.search(query);\n    Hits singleSearcherHits = singleSearcher.search(query);\n    assertEquals(multiSearcherHits.length(), singleSearcherHits.length());\n    for (int i = 0; i < multiSearcherHits.length(); i++) {\n      Document docMulti = multiSearcherHits.doc(i);\n      Document docSingle = singleSearcherHits.doc(i);\n      if(verbose) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits.score(i));\n      if(verbose) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits.score(i));\n      assertEquals(multiSearcherHits.score(i), singleSearcherHits.score(i),\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(verbose) System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","sourceNew":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(verbose) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(FIELD_NAME, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    Query query = queryParser.parse(queryStr);\n    ScoreDoc[] multiSearcherHits = multiSearcher.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleSearcherHits = singleSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(multiSearcherHits.length, singleSearcherHits.length);\n    for (int i = 0; i < multiSearcherHits.length; i++) {\n      Document docMulti = multiSearcher.doc(multiSearcherHits[i].doc);\n      Document docSingle = singleSearcher.doc(singleSearcherHits[i].doc);\n      if(verbose) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits[i].score);\n      if(verbose) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits[i].score);\n      assertEquals(multiSearcherHits[i].score, singleSearcherHits[i].score,\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(verbose) System.out.println();\n  }\n\n","sourceOld":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(verbose) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    Query query = queryParser.parse(queryStr);\n    ScoreDoc[] multiSearcherHits = multiSearcher.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleSearcherHits = singleSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(multiSearcherHits.length, singleSearcherHits.length);\n    for (int i = 0; i < multiSearcherHits.length; i++) {\n      Document docMulti = multiSearcher.doc(multiSearcherHits[i].doc);\n      Document docSingle = singleSearcher.doc(singleSearcherHits[i].doc);\n      if(verbose) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits[i].score);\n      if(verbose) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits[i].score);\n      assertEquals(multiSearcherHits[i].score, singleSearcherHits[i].score,\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(verbose) System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","sourceNew":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(verbose) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    Query query = queryParser.parse(queryStr);\n    ScoreDoc[] multiSearcherHits = multiSearcher.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleSearcherHits = singleSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(multiSearcherHits.length, singleSearcherHits.length);\n    for (int i = 0; i < multiSearcherHits.length; i++) {\n      Document docMulti = multiSearcher.doc(multiSearcherHits[i].doc);\n      Document docSingle = singleSearcher.doc(singleSearcherHits[i].doc);\n      if(verbose) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits[i].score);\n      if(verbose) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits[i].score);\n      assertEquals(multiSearcherHits[i].score, singleSearcherHits[i].score,\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(verbose) System.out.println();\n  }\n\n","sourceOld":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(verbose) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(FIELD_NAME, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    Query query = queryParser.parse(queryStr);\n    ScoreDoc[] multiSearcherHits = multiSearcher.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleSearcherHits = singleSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(multiSearcherHits.length, singleSearcherHits.length);\n    for (int i = 0; i < multiSearcherHits.length; i++) {\n      Document docMulti = multiSearcher.doc(multiSearcherHits[i].doc);\n      Document docSingle = singleSearcher.doc(singleSearcherHits[i].doc);\n      if(verbose) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits[i].score);\n      if(verbose) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits[i].score);\n      assertEquals(multiSearcherHits[i].score, singleSearcherHits[i].score,\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(verbose) System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","sourceNew":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(verbose) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    Query query = queryParser.parse(queryStr);\n    ScoreDoc[] multiSearcherHits = multiSearcher.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleSearcherHits = singleSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(multiSearcherHits.length, singleSearcherHits.length);\n    for (int i = 0; i < multiSearcherHits.length; i++) {\n      Document docMulti = multiSearcher.doc(multiSearcherHits[i].doc);\n      Document docSingle = singleSearcher.doc(singleSearcherHits[i].doc);\n      if(verbose) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits[i].score);\n      if(verbose) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits[i].score);\n      assertEquals(multiSearcherHits[i].score, singleSearcherHits[i].score,\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(verbose) System.out.println();\n  }\n\n","sourceOld":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(verbose) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    Query query = queryParser.parse(queryStr);\n    ScoreDoc[] multiSearcherHits = multiSearcher.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleSearcherHits = singleSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(multiSearcherHits.length, singleSearcherHits.length);\n    for (int i = 0; i < multiSearcherHits.length; i++) {\n      Document docMulti = multiSearcher.doc(multiSearcherHits[i].doc);\n      Document docSingle = singleSearcher.doc(singleSearcherHits[i].doc);\n      if(verbose) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits[i].score);\n      if(verbose) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits[i].score);\n      assertEquals(multiSearcherHits[i].score, singleSearcherHits[i].score,\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(verbose) System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","sourceNew":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(VERBOSE) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    Query query = queryParser.parse(queryStr);\n    ScoreDoc[] multiSearcherHits = multiSearcher.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleSearcherHits = singleSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(multiSearcherHits.length, singleSearcherHits.length);\n    for (int i = 0; i < multiSearcherHits.length; i++) {\n      Document docMulti = multiSearcher.doc(multiSearcherHits[i].doc);\n      Document docSingle = singleSearcher.doc(singleSearcherHits[i].doc);\n      if(VERBOSE) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits[i].score);\n      if(VERBOSE) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits[i].score);\n      assertEquals(multiSearcherHits[i].score, singleSearcherHits[i].score,\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(VERBOSE) System.out.println();\n  }\n\n","sourceOld":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(verbose) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    Query query = queryParser.parse(queryStr);\n    ScoreDoc[] multiSearcherHits = multiSearcher.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleSearcherHits = singleSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(multiSearcherHits.length, singleSearcherHits.length);\n    for (int i = 0; i < multiSearcherHits.length; i++) {\n      Document docMulti = multiSearcher.doc(multiSearcherHits[i].doc);\n      Document docSingle = singleSearcher.doc(singleSearcherHits[i].doc);\n      if(verbose) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits[i].score);\n      if(verbose) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits[i].score);\n      assertEquals(multiSearcherHits[i].score, singleSearcherHits[i].score,\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(verbose) System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","sourceNew":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(VERBOSE) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    Query query = queryParser.parse(queryStr);\n    ScoreDoc[] multiSearcherHits = multiSearcher.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleSearcherHits = singleSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(multiSearcherHits.length, singleSearcherHits.length);\n    for (int i = 0; i < multiSearcherHits.length; i++) {\n      Document docMulti = multiSearcher.doc(multiSearcherHits[i].doc);\n      Document docSingle = singleSearcher.doc(singleSearcherHits[i].doc);\n      if(VERBOSE) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits[i].score);\n      if(VERBOSE) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits[i].score);\n      assertEquals(multiSearcherHits[i].score, singleSearcherHits[i].score,\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(VERBOSE) System.out.println();\n  }\n\n","sourceOld":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(VERBOSE) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    Query query = queryParser.parse(queryStr);\n    ScoreDoc[] multiSearcherHits = multiSearcher.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleSearcherHits = singleSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(multiSearcherHits.length, singleSearcherHits.length);\n    for (int i = 0; i < multiSearcherHits.length; i++) {\n      Document docMulti = multiSearcher.doc(multiSearcherHits[i].doc);\n      Document docSingle = singleSearcher.doc(singleSearcherHits[i].doc);\n      if(VERBOSE) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits[i].score);\n      if(VERBOSE) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits[i].score);\n      assertEquals(multiSearcherHits[i].score, singleSearcherHits[i].score,\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(VERBOSE) System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["19de316fa1c8ef27502785c72cf83f060af72a1e"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["ba1116b3450a9c1642c89445d131b37344055245"],"19de316fa1c8ef27502785c72cf83f060af72a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"ba1116b3450a9c1642c89445d131b37344055245":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"]},"commit2Childs":{"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"19de316fa1c8ef27502785c72cf83f060af72a1e":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19de316fa1c8ef27502785c72cf83f060af72a1e"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ba1116b3450a9c1642c89445d131b37344055245"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ba1116b3450a9c1642c89445d131b37344055245":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}