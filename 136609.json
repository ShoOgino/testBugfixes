{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine.Serializer#writeLineTermStates(DataOutput,STBlockLine,DeltaBaseTermStateSerializer).mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine.Serializer#writeLineTermStates(DataOutput,STBlockLine,DeltaBaseTermStateSerializer).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Writes all the {@link BlockTermState} of the provided {@link STBlockLine} to the given output.\n     */\n    public static void writeLineTermStates(DataOutput termStatesOutput, STBlockLine line,\n                                    DeltaBaseTermStateSerializer encoder) throws IOException {\n\n      FieldMetadataTermState fieldMetadataTermState;\n      int size = line.termStates.size();\n      assert size > 0 : \"not valid block line with :\" + size + \" lines.\";\n      if (size == 1) {\n        // When there is only 1 field, write its id as negative, followed by the field TermState.\n        int fieldID = line.termStates.get(0).fieldMetadata.getFieldInfo().number;\n        termStatesOutput.writeZInt(-fieldID);\n        fieldMetadataTermState = line.termStates.get(0);\n        encoder.writeTermState(termStatesOutput, fieldMetadataTermState.fieldMetadata.getFieldInfo(), fieldMetadataTermState.state);\n        return;\n      }\n\n      termStatesOutput.writeZInt(size);\n      // First iteration writes the fields ids.\n      for (int i = 0; i < size; i++) {\n        fieldMetadataTermState = line.termStates.get(i);\n        termStatesOutput.writeVInt(fieldMetadataTermState.fieldMetadata.getFieldInfo().number);\n      }\n      // Second iteration writes the corresponding field TermStates.\n      for (int i = 0; i < size; i++) {\n        fieldMetadataTermState = line.termStates.get(i);\n        encoder.writeTermState(termStatesOutput, fieldMetadataTermState.fieldMetadata.getFieldInfo(), fieldMetadataTermState.state);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d28da8a459f5f0c930da7185c56d0c25edd3fbd1","date":1577783695,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine.Serializer#writeLineTermStates(DataOutput,STBlockLine,DeltaBaseTermStateSerializer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine.Serializer#writeLineTermStates(DataOutput,STBlockLine,DeltaBaseTermStateSerializer).mjava","sourceNew":"    /**\n     * Writes all the {@link BlockTermState} of the provided {@link STBlockLine} to the given output.\n     */\n    public void writeLineTermStates(DataOutput termStatesOutput, STBlockLine line,\n                                    DeltaBaseTermStateSerializer encoder) throws IOException {\n\n      FieldMetadataTermState fieldMetadataTermState;\n      int size = line.termStates.size();\n      assert size > 0 : \"not valid block line with :\" + size + \" lines.\";\n      if (size == 1) {\n        // When there is only 1 field, write its id as negative, followed by the field TermState.\n        int fieldID = line.termStates.get(0).fieldMetadata.getFieldInfo().number;\n        termStatesOutput.writeZInt(-fieldID);\n        fieldMetadataTermState = line.termStates.get(0);\n        encoder.writeTermState(termStatesOutput, fieldMetadataTermState.fieldMetadata.getFieldInfo(), fieldMetadataTermState.state);\n        return;\n      }\n\n      termStatesOutput.writeZInt(size);\n      // First iteration writes the fields ids.\n      for (int i = 0; i < size; i++) {\n        fieldMetadataTermState = line.termStates.get(i);\n        termStatesOutput.writeVInt(fieldMetadataTermState.fieldMetadata.getFieldInfo().number);\n      }\n      // Second iteration writes the corresponding field TermStates.\n      for (int i = 0; i < size; i++) {\n        fieldMetadataTermState = line.termStates.get(i);\n        encoder.writeTermState(termStatesOutput, fieldMetadataTermState.fieldMetadata.getFieldInfo(), fieldMetadataTermState.state);\n      }\n    }\n\n","sourceOld":"    /**\n     * Writes all the {@link BlockTermState} of the provided {@link STBlockLine} to the given output.\n     */\n    public static void writeLineTermStates(DataOutput termStatesOutput, STBlockLine line,\n                                    DeltaBaseTermStateSerializer encoder) throws IOException {\n\n      FieldMetadataTermState fieldMetadataTermState;\n      int size = line.termStates.size();\n      assert size > 0 : \"not valid block line with :\" + size + \" lines.\";\n      if (size == 1) {\n        // When there is only 1 field, write its id as negative, followed by the field TermState.\n        int fieldID = line.termStates.get(0).fieldMetadata.getFieldInfo().number;\n        termStatesOutput.writeZInt(-fieldID);\n        fieldMetadataTermState = line.termStates.get(0);\n        encoder.writeTermState(termStatesOutput, fieldMetadataTermState.fieldMetadata.getFieldInfo(), fieldMetadataTermState.state);\n        return;\n      }\n\n      termStatesOutput.writeZInt(size);\n      // First iteration writes the fields ids.\n      for (int i = 0; i < size; i++) {\n        fieldMetadataTermState = line.termStates.get(i);\n        termStatesOutput.writeVInt(fieldMetadataTermState.fieldMetadata.getFieldInfo().number);\n      }\n      // Second iteration writes the corresponding field TermStates.\n      for (int i = 0; i < size; i++) {\n        fieldMetadataTermState = line.termStates.get(i);\n        encoder.writeTermState(termStatesOutput, fieldMetadataTermState.fieldMetadata.getFieldInfo(), fieldMetadataTermState.state);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c606b777c4250f3f3f6f66d659c7c4c403679b71","date":1577958559,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine.Serializer#writeLineTermStates(DataOutput,STBlockLine,DeltaBaseTermStateSerializer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine.Serializer#writeLineTermStates(DataOutput,STBlockLine,DeltaBaseTermStateSerializer).mjava","sourceNew":"    /**\n     * Writes all the {@link BlockTermState} of the provided {@link STBlockLine} to the given output.\n     */\n    public void writeLineTermStates(DataOutput termStatesOutput, STBlockLine line,\n                                    DeltaBaseTermStateSerializer encoder) throws IOException {\n\n      FieldMetadataTermState fieldMetadataTermState;\n      int size = line.termStates.size();\n      assert size > 0 : \"not valid block line with :\" + size + \" lines.\";\n      if (size == 1) {\n        // When there is only 1 field, write its id as negative, followed by the field TermState.\n        int fieldID = line.termStates.get(0).fieldMetadata.getFieldInfo().number;\n        termStatesOutput.writeZInt(-fieldID);\n        fieldMetadataTermState = line.termStates.get(0);\n        encoder.writeTermState(termStatesOutput, fieldMetadataTermState.fieldMetadata.getFieldInfo(), fieldMetadataTermState.state);\n        return;\n      }\n\n      termStatesOutput.writeZInt(size);\n      // First iteration writes the fields ids.\n      for (int i = 0; i < size; i++) {\n        fieldMetadataTermState = line.termStates.get(i);\n        termStatesOutput.writeVInt(fieldMetadataTermState.fieldMetadata.getFieldInfo().number);\n      }\n      // Second iteration writes the corresponding field TermStates.\n      for (int i = 0; i < size; i++) {\n        fieldMetadataTermState = line.termStates.get(i);\n        encoder.writeTermState(termStatesOutput, fieldMetadataTermState.fieldMetadata.getFieldInfo(), fieldMetadataTermState.state);\n      }\n    }\n\n","sourceOld":"    /**\n     * Writes all the {@link BlockTermState} of the provided {@link STBlockLine} to the given output.\n     */\n    public static void writeLineTermStates(DataOutput termStatesOutput, STBlockLine line,\n                                    DeltaBaseTermStateSerializer encoder) throws IOException {\n\n      FieldMetadataTermState fieldMetadataTermState;\n      int size = line.termStates.size();\n      assert size > 0 : \"not valid block line with :\" + size + \" lines.\";\n      if (size == 1) {\n        // When there is only 1 field, write its id as negative, followed by the field TermState.\n        int fieldID = line.termStates.get(0).fieldMetadata.getFieldInfo().number;\n        termStatesOutput.writeZInt(-fieldID);\n        fieldMetadataTermState = line.termStates.get(0);\n        encoder.writeTermState(termStatesOutput, fieldMetadataTermState.fieldMetadata.getFieldInfo(), fieldMetadataTermState.state);\n        return;\n      }\n\n      termStatesOutput.writeZInt(size);\n      // First iteration writes the fields ids.\n      for (int i = 0; i < size; i++) {\n        fieldMetadataTermState = line.termStates.get(i);\n        termStatesOutput.writeVInt(fieldMetadataTermState.fieldMetadata.getFieldInfo().number);\n      }\n      // Second iteration writes the corresponding field TermStates.\n      for (int i = 0; i < size; i++) {\n        fieldMetadataTermState = line.termStates.get(i);\n        encoder.writeTermState(termStatesOutput, fieldMetadataTermState.fieldMetadata.getFieldInfo(), fieldMetadataTermState.state);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c606b777c4250f3f3f6f66d659c7c4c403679b71":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","d28da8a459f5f0c930da7185c56d0c25edd3fbd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d28da8a459f5f0c930da7185c56d0c25edd3fbd1":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d28da8a459f5f0c930da7185c56d0c25edd3fbd1"]},"commit2Childs":{"c606b777c4250f3f3f6f66d659c7c4c403679b71":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["c606b777c4250f3f3f6f66d659c7c4c403679b71","d28da8a459f5f0c930da7185c56d0c25edd3fbd1"],"d28da8a459f5f0c930da7185c56d0c25edd3fbd1":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}