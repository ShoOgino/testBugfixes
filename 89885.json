{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStaticMethod1().mjava","commits":[{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStaticMethod1().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new MockAnalyzer(random));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new MockAnalyzer(random));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new MockAnalyzer(random));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new MockAnalyzer(random));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new MockAnalyzer(random));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new MockAnalyzer(random));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new MockAnalyzer(random));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new MockAnalyzer(random));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new MockAnalyzer(random));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new MockAnalyzer(random));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStaticMethod1().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new MockAnalyzer(random));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new MockAnalyzer(random));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new MockAnalyzer(random));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new MockAnalyzer(random));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new MockAnalyzer(random));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStaticMethod1().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries2, fields, new MockAnalyzer(random()));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries3, fields, new MockAnalyzer(random()));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries4, fields, new MockAnalyzer(random()));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries5, fields, new MockAnalyzer(random()));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}