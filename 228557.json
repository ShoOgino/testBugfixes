{"path":"src/java/org/apache/lucene/index/DirectoryReader.MultiTermDocs#next().mjava","commits":[{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader.MultiTermDocs#next().mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermDocs#next().mjava","sourceNew":"    public boolean next() throws IOException {\n      for(;;) {\n        if (current!=null && current.next()) {\n          return true;\n        }\n        else if (pointer < readers.length) {\n          if (tenum != null) {\n            smi = tenum.matchingSegments[matchingSegmentPos++];\n            if (smi==null) {\n              pointer = readers.length;\n              return false;\n            }\n            pointer = smi.ord;\n          }\n          base = starts[pointer];\n          current = termDocs(pointer++);\n        } else {\n          return false;\n        }\n      }\n    }\n\n","sourceOld":"    public boolean next() throws IOException {\n      for(;;) {\n        if (current!=null && current.next()) {\n          return true;\n        }\n        else if (pointer < readers.length) {\n          if (tenum != null) {\n            smi = tenum.matchingSegments[matchingSegmentPos++];\n            if (smi==null) {\n              pointer = readers.length;\n              return false;\n            }\n            pointer = smi.ord;\n          }\n          base = starts[pointer];\n          current = termDocs(pointer++);\n        } else {\n          return false;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader.MultiTermDocs#next().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader.MultiTermDocs#next().mjava","sourceNew":"    public boolean next() throws IOException {\n      for(;;) {\n        if (current!=null && current.next()) {\n          return true;\n        }\n        else if (pointer < readers.length) {\n          if (tenum != null) {\n            smi = tenum.matchingSegments[matchingSegmentPos++];\n            if (smi==null) {\n              pointer = readers.length;\n              return false;\n            }\n            pointer = smi.ord;\n          }\n          base = starts[pointer];\n          current = termDocs(pointer++);\n        } else {\n          return false;\n        }\n      }\n    }\n\n","sourceOld":"    public boolean next() throws IOException {\n      for(;;) {\n        if (current!=null && current.next()) {\n          return true;\n        }\n        else if (pointer < readers.length) {\n          if (tenum != null) {\n            smi = tenum.matchingSegments[matchingSegmentPos++];\n            if (smi==null) {\n              pointer = readers.length;\n              return false;\n            }\n            pointer = smi.ord;\n          }\n          base = starts[pointer];\n          current = termDocs(pointer++);\n        } else {\n          return false;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}