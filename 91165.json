{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#putAttribute(String,String).mjava","commits":[{"id":"63caed6eb28209e181e97822c4c8fdf808884c3b","date":1337712793,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#putAttribute(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Puts a codec attribute value.\n   * <p>\n   * This is a key-value mapping for the field that the codec can use\n   * to store additional metadata, and will be available to the codec\n   * when reading the segment via {@link #getAttribute(String)}\n   * <p>\n   * If a value already exists for the field, it will be replaced with \n   * the new value.\n   */\n  public String putAttribute(String key, String value) {\n    if (attributes == null) {\n      attributes = new HashMap<String,String>();\n    }\n    return attributes.put(key, value);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#putAttribute(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Puts a codec attribute value.\n   * <p>\n   * This is a key-value mapping for the field that the codec can use\n   * to store additional metadata, and will be available to the codec\n   * when reading the segment via {@link #getAttribute(String)}\n   * <p>\n   * If a value already exists for the field, it will be replaced with \n   * the new value.\n   */\n  public String putAttribute(String key, String value) {\n    if (attributes == null) {\n      attributes = new HashMap<String,String>();\n    }\n    return attributes.put(key, value);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77f264c55cbf75404f8601ae7290d69157273a56","date":1380484282,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#putAttribute(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Puts a codec attribute value.\n   * <p>\n   * This is a key-value mapping for the field that the codec can use\n   * to store additional metadata, and will be available to the codec\n   * when reading the segment via {@link #getAttribute(String)}\n   * <p>\n   * If a value already exists for the field, it will be replaced with \n   * the new value.\n   */\n  public String putAttribute(String key, String value) {\n    if (attributes == null) {\n      attributes = new HashMap<String,String>();\n    }\n    return attributes.put(key, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8521d944f9dfb45692ec28235dbf116d47ef69ba","date":1417535150,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#putAttribute(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Puts a codec attribute value.\n   * <p>\n   * This is a key-value mapping for the field that the codec can use to store\n   * additional metadata, and will be available to the codec when reading the\n   * segment via {@link #getAttribute(String)}\n   * <p>\n   * If a value already exists for the field, it will be replaced with the new\n   * value.\n   */\n  public String putAttribute(String key, String value) {\n    return attributes.put(key, value);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68ba24d6f9380e2463dbe5130d27502647f64904","date":1554881362,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#putAttribute(String,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#putAttribute(String,String).mjava","sourceNew":"  /**\n   * Puts a codec attribute value.\n   * <p>\n   * This is a key-value mapping for the field that the codec can use to store\n   * additional metadata, and will be available to the codec when reading the\n   * segment via {@link #getAttribute(String)}\n   * <p>\n   * If a value already exists for the field, it will be replaced with the new\n   * value.\n   * This method make a copy on write for every attribute change.\n   */\n  public String putAttribute(String key, String value) {\n    HashMap<String, String> newMap = new HashMap<>(attributes);\n    String oldValue = newMap.put(key, value);\n    // we make a full copy of this to prevent concurrent modifications to this in the toString method\n    // this method is only called when a segment is written but the SegmentInfo might be exposed\n    // in running merges which can cause ConcurrentModificationExceptions if we modify / share\n    // the same instance. Technically that's an unsafe publication but IW design would require\n    // significant changes to prevent this. On the other hand, since we expose the map in getAttributes()\n    // it's a good design to make it unmodifiable anyway.\n    attributes = Collections.unmodifiableMap(newMap);\n    return oldValue;\n  }\n\n","sourceOld":"  /**\n   * Puts a codec attribute value.\n   * <p>\n   * This is a key-value mapping for the field that the codec can use to store\n   * additional metadata, and will be available to the codec when reading the\n   * segment via {@link #getAttribute(String)}\n   * <p>\n   * If a value already exists for the field, it will be replaced with the new\n   * value.\n   */\n  public String putAttribute(String key, String value) {\n    return attributes.put(key, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8521d944f9dfb45692ec28235dbf116d47ef69ba":["77f264c55cbf75404f8601ae7290d69157273a56"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","63caed6eb28209e181e97822c4c8fdf808884c3b"],"68ba24d6f9380e2463dbe5130d27502647f64904":["8521d944f9dfb45692ec28235dbf116d47ef69ba"],"63caed6eb28209e181e97822c4c8fdf808884c3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77f264c55cbf75404f8601ae7290d69157273a56":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68ba24d6f9380e2463dbe5130d27502647f64904"]},"commit2Childs":{"8521d944f9dfb45692ec28235dbf116d47ef69ba":["68ba24d6f9380e2463dbe5130d27502647f64904"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["77f264c55cbf75404f8601ae7290d69157273a56"],"63caed6eb28209e181e97822c4c8fdf808884c3b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"68ba24d6f9380e2463dbe5130d27502647f64904":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","63caed6eb28209e181e97822c4c8fdf808884c3b"],"77f264c55cbf75404f8601ae7290d69157273a56":["8521d944f9dfb45692ec28235dbf116d47ef69ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}