{"path":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#getSuggestions(SuggesterOptions).mjava","commits":[{"id":"7f2e96099703c24c0c63d27806ba7020626b649b","date":1385214372,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#getSuggestions(SuggesterOptions).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns suggestions based on the {@link SuggesterOptions} passed */\n  public SuggesterResult getSuggestions(SuggesterOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.token);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke suggest.build first\");\n      return EMPTY_RESULT;\n    }\n    \n    SuggesterResult res = new SuggesterResult();\n    List<LookupResult> suggestions = lookup.lookup(options.token, false, options.count);\n    res.add(options.token.toString(), suggestions);\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#getSuggestions(SuggesterOptions).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns suggestions based on the {@link SuggesterOptions} passed */\n  public SuggesterResult getSuggestions(SuggesterOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.token);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke suggest.build first\");\n      return EMPTY_RESULT;\n    }\n    \n    SuggesterResult res = new SuggesterResult();\n    List<LookupResult> suggestions = lookup.lookup(options.token, false, options.count);\n    res.add(options.token.toString(), suggestions);\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"214b8610690edbe7e294594a7bc58a978ef1863c","date":1389376762,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#getSuggestions(SuggesterOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#getSuggestions(SuggesterOptions).mjava","sourceNew":"  /** Returns suggestions based on the {@link SuggesterOptions} passed */\n  public SuggesterResult getSuggestions(SuggesterOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.token);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke suggest.build first\");\n      return EMPTY_RESULT;\n    }\n    \n    SuggesterResult res = new SuggesterResult();\n    List<LookupResult> suggestions = lookup.lookup(options.token, false, options.count);\n    res.add(getName(), options.token.toString(), suggestions);\n    return res;\n  }\n\n","sourceOld":"  /** Returns suggestions based on the {@link SuggesterOptions} passed */\n  public SuggesterResult getSuggestions(SuggesterOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.token);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke suggest.build first\");\n      return EMPTY_RESULT;\n    }\n    \n    SuggesterResult res = new SuggesterResult();\n    List<LookupResult> suggestions = lookup.lookup(options.token, false, options.count);\n    res.add(options.token.toString(), suggestions);\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de1635ba58109b4c7c7da50f4dad433333258904","date":1444503719,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#getSuggestions(SuggesterOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#getSuggestions(SuggesterOptions).mjava","sourceNew":"  /** Returns suggestions based on the {@link SuggesterOptions} passed */\n  public SuggesterResult getSuggestions(SuggesterOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.token);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke suggest.build first\");\n      return EMPTY_RESULT;\n    }\n    \n    SuggesterResult res = new SuggesterResult();\n    List<LookupResult> suggestions;\n    if(options.contextFilterQuery == null){\n      //TODO: this path needs to be fixed to accept query params to override configs such as allTermsRequired, highlight\n      suggestions = lookup.lookup(options.token, false, options.count);\n    } else {\n      BooleanQuery query = parseContextFilterQuery(options.contextFilterQuery);\n      suggestions = lookup.lookup(options.token, query, options.count, options.allTermsRequired, options.highlight);\n      if(suggestions == null){\n        // Context filtering not supported/configured by lookup\n        // Silently ignore filtering and serve a result by querying without context filtering\n        LOG.debug(\"Context Filtering Query not supported by {}\", lookup.getClass());\n        suggestions = lookup.lookup(options.token, false, options.count);\n      }\n    }\n    res.add(getName(), options.token.toString(), suggestions);\n    return res;\n  }\n\n","sourceOld":"  /** Returns suggestions based on the {@link SuggesterOptions} passed */\n  public SuggesterResult getSuggestions(SuggesterOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.token);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke suggest.build first\");\n      return EMPTY_RESULT;\n    }\n    \n    SuggesterResult res = new SuggesterResult();\n    List<LookupResult> suggestions = lookup.lookup(options.token, false, options.count);\n    res.add(getName(), options.token.toString(), suggestions);\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#getSuggestions(SuggesterOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#getSuggestions(SuggesterOptions).mjava","sourceNew":"  /** Returns suggestions based on the {@link SuggesterOptions} passed */\n  public SuggesterResult getSuggestions(SuggesterOptions options) throws IOException {\n    log.debug(\"getSuggestions: \" + options.token);\n    if (lookup == null) {\n      log.info(\"Lookup is null - invoke suggest.build first\");\n      return EMPTY_RESULT;\n    }\n    \n    SuggesterResult res = new SuggesterResult();\n    List<LookupResult> suggestions;\n    if(options.contextFilterQuery == null){\n      //TODO: this path needs to be fixed to accept query params to override configs such as allTermsRequired, highlight\n      suggestions = lookup.lookup(options.token, false, options.count);\n    } else {\n      BooleanQuery query = parseContextFilterQuery(options.contextFilterQuery);\n      suggestions = lookup.lookup(options.token, query, options.count, options.allTermsRequired, options.highlight);\n      if(suggestions == null){\n        // Context filtering not supported/configured by lookup\n        // Silently ignore filtering and serve a result by querying without context filtering\n        log.debug(\"Context Filtering Query not supported by {}\", lookup.getClass());\n        suggestions = lookup.lookup(options.token, false, options.count);\n      }\n    }\n    res.add(getName(), options.token.toString(), suggestions);\n    return res;\n  }\n\n","sourceOld":"  /** Returns suggestions based on the {@link SuggesterOptions} passed */\n  public SuggesterResult getSuggestions(SuggesterOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.token);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke suggest.build first\");\n      return EMPTY_RESULT;\n    }\n    \n    SuggesterResult res = new SuggesterResult();\n    List<LookupResult> suggestions;\n    if(options.contextFilterQuery == null){\n      //TODO: this path needs to be fixed to accept query params to override configs such as allTermsRequired, highlight\n      suggestions = lookup.lookup(options.token, false, options.count);\n    } else {\n      BooleanQuery query = parseContextFilterQuery(options.contextFilterQuery);\n      suggestions = lookup.lookup(options.token, query, options.count, options.allTermsRequired, options.highlight);\n      if(suggestions == null){\n        // Context filtering not supported/configured by lookup\n        // Silently ignore filtering and serve a result by querying without context filtering\n        LOG.debug(\"Context Filtering Query not supported by {}\", lookup.getClass());\n        suggestions = lookup.lookup(options.token, false, options.count);\n      }\n    }\n    res.add(getName(), options.token.toString(), suggestions);\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#getSuggestions(SuggesterOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/SolrSuggester#getSuggestions(SuggesterOptions).mjava","sourceNew":"  /** Returns suggestions based on the {@link SuggesterOptions} passed */\n  public SuggesterResult getSuggestions(SuggesterOptions options) throws IOException {\n    if (log.isDebugEnabled()) {\n      log.debug(\"getSuggestions: {}\", options.token);\n    }\n    if (lookup == null) {\n      log.info(\"Lookup is null - invoke suggest.build first\");\n      return EMPTY_RESULT;\n    }\n    \n    SuggesterResult res = new SuggesterResult();\n    List<LookupResult> suggestions;\n    if(options.contextFilterQuery == null){\n      //TODO: this path needs to be fixed to accept query params to override configs such as allTermsRequired, highlight\n      suggestions = lookup.lookup(options.token, false, options.count);\n    } else {\n      BooleanQuery query = parseContextFilterQuery(options.contextFilterQuery);\n      suggestions = lookup.lookup(options.token, query, options.count, options.allTermsRequired, options.highlight);\n      if(suggestions == null){\n        // Context filtering not supported/configured by lookup\n        // Silently ignore filtering and serve a result by querying without context filtering\n        if (log.isDebugEnabled()) {\n          log.debug(\"Context Filtering Query not supported by {}\", lookup.getClass());\n        }\n        suggestions = lookup.lookup(options.token, false, options.count);\n      }\n    }\n    res.add(getName(), options.token.toString(), suggestions);\n    return res;\n  }\n\n","sourceOld":"  /** Returns suggestions based on the {@link SuggesterOptions} passed */\n  public SuggesterResult getSuggestions(SuggesterOptions options) throws IOException {\n    log.debug(\"getSuggestions: \" + options.token);\n    if (lookup == null) {\n      log.info(\"Lookup is null - invoke suggest.build first\");\n      return EMPTY_RESULT;\n    }\n    \n    SuggesterResult res = new SuggesterResult();\n    List<LookupResult> suggestions;\n    if(options.contextFilterQuery == null){\n      //TODO: this path needs to be fixed to accept query params to override configs such as allTermsRequired, highlight\n      suggestions = lookup.lookup(options.token, false, options.count);\n    } else {\n      BooleanQuery query = parseContextFilterQuery(options.contextFilterQuery);\n      suggestions = lookup.lookup(options.token, query, options.count, options.allTermsRequired, options.highlight);\n      if(suggestions == null){\n        // Context filtering not supported/configured by lookup\n        // Silently ignore filtering and serve a result by querying without context filtering\n        log.debug(\"Context Filtering Query not supported by {}\", lookup.getClass());\n        suggestions = lookup.lookup(options.token, false, options.count);\n      }\n    }\n    res.add(getName(), options.token.toString(), suggestions);\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"de1635ba58109b4c7c7da50f4dad433333258904":["214b8610690edbe7e294594a7bc58a978ef1863c"],"7f2e96099703c24c0c63d27806ba7020626b649b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"214b8610690edbe7e294594a7bc58a978ef1863c":["7f2e96099703c24c0c63d27806ba7020626b649b"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7f2e96099703c24c0c63d27806ba7020626b649b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["de1635ba58109b4c7c7da50f4dad433333258904"]},"commit2Childs":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"de1635ba58109b4c7c7da50f4dad433333258904":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"7f2e96099703c24c0c63d27806ba7020626b649b":["214b8610690edbe7e294594a7bc58a978ef1863c","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f2e96099703c24c0c63d27806ba7020626b649b","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"214b8610690edbe7e294594a7bc58a978ef1863c":["de1635ba58109b4c7c7da50f4dad433333258904"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}