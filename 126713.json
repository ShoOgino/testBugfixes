{"path":"backwards/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF16(byte[],int,int,UTF16Result).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF16(byte[],int,int,UTF16Result).mjava","pathOld":"/dev/null","sourceNew":"  /** Convert UTF8 bytes into UTF16 characters.  If offset\n   *  is non-zero, conversion starts at that starting point\n   *  in utf8, re-using the results from the previous call\n   *  up until offset. */\n  public static void UTF8toUTF16(final byte[] utf8, final int offset, final int length, final UTF16Result result) {\n\n    final int end = offset + length;\n    char[] out = result.result;\n    if (result.offsets.length <= end) {\n      int[] newOffsets = new int[2*end];\n      System.arraycopy(result.offsets, 0, newOffsets, 0, result.offsets.length);\n      result.offsets  = newOffsets;\n    }\n    final int[] offsets = result.offsets;\n\n    // If incremental decoding fell in the middle of a\n    // single unicode character, rollback to its start:\n    int upto = offset;\n    while(offsets[upto] == -1)\n      upto--;\n\n    int outUpto = offsets[upto];\n\n    // Pre-allocate for worst case 1-for-1\n    if (outUpto+length >= out.length) {\n      char[] newOut = new char[2*(outUpto+length)];\n      System.arraycopy(out, 0, newOut, 0, outUpto);\n      result.result = out = newOut;\n    }\n\n    while (upto < end) {\n\n      final int b = utf8[upto]&0xff;\n      final int ch;\n\n      offsets[upto++] = outUpto;\n\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (utf8[upto]&0x3f);\n        offsets[upto++] = -1;\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((utf8[upto]&0x3f)<<6) + (utf8[upto+1]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((utf8[upto]&0x3f)<<12) + ((utf8[upto+1]&0x3f)<<6) + (utf8[upto+2]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      }\n\n      if (ch <= UNI_MAX_BMP) {\n        // target is a character <= 0xFFFF\n        out[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - HALF_BASE;\n        out[outUpto++] = (char) ((chHalf >> HALF_SHIFT) + UNI_SUR_HIGH_START);\n        out[outUpto++] = (char) ((chHalf & HALF_MASK) + UNI_SUR_LOW_START);\n      }\n    }\n\n    offsets[upto] = outUpto;\n    result.length = outUpto;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF16(byte[],int,int,UTF16Result).mjava","pathOld":"backwards/src/java/org/apache/lucene/util/UnicodeUtil#UTF8toUTF16(byte[],int,int,UTF16Result).mjava","sourceNew":"  /** Convert UTF8 bytes into UTF16 characters.  If offset\n   *  is non-zero, conversion starts at that starting point\n   *  in utf8, re-using the results from the previous call\n   *  up until offset. */\n  public static void UTF8toUTF16(final byte[] utf8, final int offset, final int length, final UTF16Result result) {\n\n    final int end = offset + length;\n    char[] out = result.result;\n    if (result.offsets.length <= end) {\n      int[] newOffsets = new int[2*end];\n      System.arraycopy(result.offsets, 0, newOffsets, 0, result.offsets.length);\n      result.offsets  = newOffsets;\n    }\n    final int[] offsets = result.offsets;\n\n    // If incremental decoding fell in the middle of a\n    // single unicode character, rollback to its start:\n    int upto = offset;\n    while(offsets[upto] == -1)\n      upto--;\n\n    int outUpto = offsets[upto];\n\n    // Pre-allocate for worst case 1-for-1\n    if (outUpto+length >= out.length) {\n      char[] newOut = new char[2*(outUpto+length)];\n      System.arraycopy(out, 0, newOut, 0, outUpto);\n      result.result = out = newOut;\n    }\n\n    while (upto < end) {\n\n      final int b = utf8[upto]&0xff;\n      final int ch;\n\n      offsets[upto++] = outUpto;\n\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (utf8[upto]&0x3f);\n        offsets[upto++] = -1;\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((utf8[upto]&0x3f)<<6) + (utf8[upto+1]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((utf8[upto]&0x3f)<<12) + ((utf8[upto+1]&0x3f)<<6) + (utf8[upto+2]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      }\n\n      if (ch <= UNI_MAX_BMP) {\n        // target is a character <= 0xFFFF\n        out[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - HALF_BASE;\n        out[outUpto++] = (char) ((chHalf >> HALF_SHIFT) + UNI_SUR_HIGH_START);\n        out[outUpto++] = (char) ((chHalf & HALF_MASK) + UNI_SUR_LOW_START);\n      }\n    }\n\n    offsets[upto] = outUpto;\n    result.length = outUpto;\n  }\n\n","sourceOld":"  /** Convert UTF8 bytes into UTF16 characters.  If offset\n   *  is non-zero, conversion starts at that starting point\n   *  in utf8, re-using the results from the previous call\n   *  up until offset. */\n  public static void UTF8toUTF16(final byte[] utf8, final int offset, final int length, final UTF16Result result) {\n\n    final int end = offset + length;\n    char[] out = result.result;\n    if (result.offsets.length <= end) {\n      int[] newOffsets = new int[2*end];\n      System.arraycopy(result.offsets, 0, newOffsets, 0, result.offsets.length);\n      result.offsets  = newOffsets;\n    }\n    final int[] offsets = result.offsets;\n\n    // If incremental decoding fell in the middle of a\n    // single unicode character, rollback to its start:\n    int upto = offset;\n    while(offsets[upto] == -1)\n      upto--;\n\n    int outUpto = offsets[upto];\n\n    // Pre-allocate for worst case 1-for-1\n    if (outUpto+length >= out.length) {\n      char[] newOut = new char[2*(outUpto+length)];\n      System.arraycopy(out, 0, newOut, 0, outUpto);\n      result.result = out = newOut;\n    }\n\n    while (upto < end) {\n\n      final int b = utf8[upto]&0xff;\n      final int ch;\n\n      offsets[upto++] = outUpto;\n\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (utf8[upto]&0x3f);\n        offsets[upto++] = -1;\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((utf8[upto]&0x3f)<<6) + (utf8[upto+1]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((utf8[upto]&0x3f)<<12) + ((utf8[upto+1]&0x3f)<<6) + (utf8[upto+2]&0x3f);\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n        offsets[upto++] = -1;\n      }\n\n      if (ch <= UNI_MAX_BMP) {\n        // target is a character <= 0xFFFF\n        out[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - HALF_BASE;\n        out[outUpto++] = (char) ((chHalf >> HALF_SHIFT) + UNI_SUR_HIGH_START);\n        out[outUpto++] = (char) ((chHalf & HALF_MASK) + UNI_SUR_LOW_START);\n      }\n    }\n\n    offsets[upto] = outUpto;\n    result.length = outUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}