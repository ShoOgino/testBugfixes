{"path":"src/java/org/apache/lucene/document/NumberTools#longToString(long).mjava","commits":[{"id":"781849b9287fb55f17208578ce7509cdb0d10fec","date":1101244069,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/NumberTools#longToString(long).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Converts a long to a String suitable for indexing.\n     */\n    public static String longToString(long l) {\n\n        if (l == Long.MIN_VALUE) {\n            // special case, because long is not symetric around zero\n            return MIN_STRING_VALUE;\n        }\n\n        StringBuffer buf = new StringBuffer(STR_SIZE);\n\n        if (l < 0) {\n            buf.append(NEGATIVE_PREFIX);\n            l = Long.MAX_VALUE + l + 1;\n        } else {\n            buf.append(POSITIVE_PREFIX);\n        }\n        String num = Long.toString(l, RADIX);\n\n        int padLen = STR_SIZE - num.length() - buf.length();\n        while (padLen-- > 0) {\n            buf.append('0');\n        }\n        buf.append(num);\n\n        return buf.toString();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/NumberTools#longToString(long).mjava","pathOld":"src/java/org/apache/lucene/document/NumberTools#longToString(long).mjava","sourceNew":"    /**\n     * Converts a long to a String suitable for indexing.\n     */\n    public static String longToString(long l) {\n\n        if (l == Long.MIN_VALUE) {\n            // special case, because long is not symmetric around zero\n            return MIN_STRING_VALUE;\n        }\n\n        StringBuffer buf = new StringBuffer(STR_SIZE);\n\n        if (l < 0) {\n            buf.append(NEGATIVE_PREFIX);\n            l = Long.MAX_VALUE + l + 1;\n        } else {\n            buf.append(POSITIVE_PREFIX);\n        }\n        String num = Long.toString(l, RADIX);\n\n        int padLen = STR_SIZE - num.length() - buf.length();\n        while (padLen-- > 0) {\n            buf.append('0');\n        }\n        buf.append(num);\n\n        return buf.toString();\n    }\n\n","sourceOld":"    /**\n     * Converts a long to a String suitable for indexing.\n     */\n    public static String longToString(long l) {\n\n        if (l == Long.MIN_VALUE) {\n            // special case, because long is not symetric around zero\n            return MIN_STRING_VALUE;\n        }\n\n        StringBuffer buf = new StringBuffer(STR_SIZE);\n\n        if (l < 0) {\n            buf.append(NEGATIVE_PREFIX);\n            l = Long.MAX_VALUE + l + 1;\n        } else {\n            buf.append(POSITIVE_PREFIX);\n        }\n        String num = Long.toString(l, RADIX);\n\n        int padLen = STR_SIZE - num.length() - buf.length();\n        while (padLen-- > 0) {\n            buf.append('0');\n        }\n        buf.append(num);\n\n        return buf.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/NumberTools#longToString(long).mjava","pathOld":"src/java/org/apache/lucene/document/NumberTools#longToString(long).mjava","sourceNew":"    /**\n     * Converts a long to a String suitable for indexing.\n     */\n    public static String longToString(long l) {\n\n        if (l == Long.MIN_VALUE) {\n            // special case, because long is not symmetric around zero\n            return MIN_STRING_VALUE;\n        }\n\n        StringBuilder buf = new StringBuilder(STR_SIZE);\n\n        if (l < 0) {\n            buf.append(NEGATIVE_PREFIX);\n            l = Long.MAX_VALUE + l + 1;\n        } else {\n            buf.append(POSITIVE_PREFIX);\n        }\n        String num = Long.toString(l, RADIX);\n\n        int padLen = STR_SIZE - num.length() - buf.length();\n        while (padLen-- > 0) {\n            buf.append('0');\n        }\n        buf.append(num);\n\n        return buf.toString();\n    }\n\n","sourceOld":"    /**\n     * Converts a long to a String suitable for indexing.\n     */\n    public static String longToString(long l) {\n\n        if (l == Long.MIN_VALUE) {\n            // special case, because long is not symmetric around zero\n            return MIN_STRING_VALUE;\n        }\n\n        StringBuffer buf = new StringBuffer(STR_SIZE);\n\n        if (l < 0) {\n            buf.append(NEGATIVE_PREFIX);\n            l = Long.MAX_VALUE + l + 1;\n        } else {\n            buf.append(POSITIVE_PREFIX);\n        }\n        String num = Long.toString(l, RADIX);\n\n        int padLen = STR_SIZE - num.length() - buf.length();\n        while (padLen-- > 0) {\n            buf.append('0');\n        }\n        buf.append(num);\n\n        return buf.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/document/NumberTools#longToString(long).mjava","sourceNew":null,"sourceOld":"    /**\n     * Converts a long to a String suitable for indexing.\n     */\n    public static String longToString(long l) {\n\n        if (l == Long.MIN_VALUE) {\n            // special case, because long is not symmetric around zero\n            return MIN_STRING_VALUE;\n        }\n\n        StringBuilder buf = new StringBuilder(STR_SIZE);\n\n        if (l < 0) {\n            buf.append(NEGATIVE_PREFIX);\n            l = Long.MAX_VALUE + l + 1;\n        } else {\n            buf.append(POSITIVE_PREFIX);\n        }\n        String num = Long.toString(l, RADIX);\n\n        int padLen = STR_SIZE - num.length() - buf.length();\n        while (padLen-- > 0) {\n            buf.append('0');\n        }\n        buf.append(num);\n\n        return buf.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"add7d922e63099fbce8f0a1b31216df7ef5067f1":["781849b9287fb55f17208578ce7509cdb0d10fec"],"781849b9287fb55f17208578ce7509cdb0d10fec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"]},"commit2Childs":{"add7d922e63099fbce8f0a1b31216df7ef5067f1":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"781849b9287fb55f17208578ce7509cdb0d10fec":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["781849b9287fb55f17208578ce7509cdb0d10fec"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}