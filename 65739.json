{"path":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (field != null && !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    String[] pieces = new String[maxPosition + 1];\n    for (int i = 0; i < terms.size(); i++) {\n      int pos = positions.get(i).intValue();\n      String s = pieces[pos];\n      if (s == null) {\n        s = (terms.get(i)).text();\n      } else {\n        s = s + \"|\" + (terms.get(i)).text();\n      }\n      pieces[pos] = s;\n    }\n    for (int i = 0; i < pieces.length; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      String s = pieces[i];\n      if (s == null) {\n        buffer.append('?');\n      } else {\n        buffer.append(s);\n      }\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (field != null && !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    String[] pieces = new String[maxPosition + 1];\n    for (int i = 0; i < terms.size(); i++) {\n      int pos = positions.get(i).intValue();\n      String s = pieces[pos];\n      if (s == null) {\n        s = (terms.get(i)).text();\n      } else {\n        s = s + \"|\" + (terms.get(i)).text();\n      }\n      pieces[pos] = s;\n    }\n    for (int i = 0; i < pieces.length; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      String s = pieces[i];\n      if (s == null) {\n        buffer.append('?');\n      } else {\n        buffer.append(s);\n      }\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fb5dc223475059e18daa29ecbc9ee827971f72c","date":1424359649,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (field != null && !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    final int maxPosition;\n    if (positions.isEmpty()) {\n      maxPosition = -1;\n    } else {\n      maxPosition = positions.get(positions.size() - 1);\n    }\n    String[] pieces = new String[maxPosition + 1];\n    for (int i = 0; i < terms.size(); i++) {\n      int pos = positions.get(i).intValue();\n      String s = pieces[pos];\n      if (s == null) {\n        s = (terms.get(i)).text();\n      } else {\n        s = s + \"|\" + (terms.get(i)).text();\n      }\n      pieces[pos] = s;\n    }\n    for (int i = 0; i < pieces.length; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      String s = pieces[i];\n      if (s == null) {\n        buffer.append('?');\n      } else {\n        buffer.append(s);\n      }\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (field != null && !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    String[] pieces = new String[maxPosition + 1];\n    for (int i = 0; i < terms.size(); i++) {\n      int pos = positions.get(i).intValue();\n      String s = pieces[pos];\n      if (s == null) {\n        s = (terms.get(i)).text();\n      } else {\n        s = s + \"|\" + (terms.get(i)).text();\n      }\n      pieces[pos] = s;\n    }\n    for (int i = 0; i < pieces.length; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      String s = pieces[i];\n      if (s == null) {\n        buffer.append('?');\n      } else {\n        buffer.append(s);\n      }\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (field != null && !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    final int maxPosition;\n    if (positions.length == 0) {\n      maxPosition = -1;\n    } else {\n      maxPosition = positions[positions.length - 1];\n    }\n    String[] pieces = new String[maxPosition + 1];\n    for (int i = 0; i < terms.length; i++) {\n      int pos = positions[i];\n      String s = pieces[pos];\n      if (s == null) {\n        s = (terms[i]).text();\n      } else {\n        s = s + \"|\" + (terms[i]).text();\n      }\n      pieces[pos] = s;\n    }\n    for (int i = 0; i < pieces.length; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      String s = pieces[i];\n      if (s == null) {\n        buffer.append('?');\n      } else {\n        buffer.append(s);\n      }\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (field != null && !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    final int maxPosition;\n    if (positions.isEmpty()) {\n      maxPosition = -1;\n    } else {\n      maxPosition = positions.get(positions.size() - 1);\n    }\n    String[] pieces = new String[maxPosition + 1];\n    for (int i = 0; i < terms.size(); i++) {\n      int pos = positions.get(i).intValue();\n      String s = pieces[pos];\n      if (s == null) {\n        s = (terms.get(i)).text();\n      } else {\n        s = s + \"|\" + (terms.get(i)).text();\n      }\n      pieces[pos] = s;\n    }\n    for (int i = 0; i < pieces.length; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      String s = pieces[i];\n      if (s == null) {\n        buffer.append('?');\n      } else {\n        buffer.append(s);\n      }\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (field != null && !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    final int maxPosition;\n    if (positions.length == 0) {\n      maxPosition = -1;\n    } else {\n      maxPosition = positions[positions.length - 1];\n    }\n    String[] pieces = new String[maxPosition + 1];\n    for (int i = 0; i < terms.length; i++) {\n      int pos = positions[i];\n      String s = pieces[pos];\n      if (s == null) {\n        s = (terms[i]).text();\n      } else {\n        s = s + \"|\" + (terms[i]).text();\n      }\n      pieces[pos] = s;\n    }\n    for (int i = 0; i < pieces.length; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      String s = pieces[i];\n      if (s == null) {\n        buffer.append('?');\n      } else {\n        buffer.append(s);\n      }\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (field != null && !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    final int maxPosition;\n    if (positions.length == 0) {\n      maxPosition = -1;\n    } else {\n      maxPosition = positions[positions.length - 1];\n    }\n    String[] pieces = new String[maxPosition + 1];\n    for (int i = 0; i < terms.length; i++) {\n      int pos = positions[i];\n      String s = pieces[pos];\n      if (s == null) {\n        s = (terms[i]).text();\n      } else {\n        s = s + \"|\" + (terms[i]).text();\n      }\n      pieces[pos] = s;\n    }\n    for (int i = 0; i < pieces.length; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      String s = pieces[i];\n      if (s == null) {\n        buffer.append('?');\n      } else {\n        buffer.append(s);\n      }\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9e1499c5d26c936238506df90a3c02c76707722":["6fb5dc223475059e18daa29ecbc9ee827971f72c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["e9e1499c5d26c936238506df90a3c02c76707722"],"6fb5dc223475059e18daa29ecbc9ee827971f72c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"e9e1499c5d26c936238506df90a3c02c76707722":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6fb5dc223475059e18daa29ecbc9ee827971f72c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6fb5dc223475059e18daa29ecbc9ee827971f72c":["e9e1499c5d26c936238506df90a3c02c76707722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}