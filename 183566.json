{"path":"src/java/org/apache/lucene/index/FieldsReader#uncompress(byte[]).mjava","commits":[{"id":"b3d038c41e70424a134ef69a524f3cc0fb40d854","date":1096548028,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#uncompress(byte[]).mjava","pathOld":"/dev/null","sourceNew":"  private final byte[] uncompress(final byte[] input)\n    throws IOException\n  {\n  \n    Inflater decompressor = new Inflater();\n    decompressor.setInput(input);\n  \n    // Create an expandable byte array to hold the decompressed data\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(input.length);\n  \n    // Decompress the data\n    byte[] buf = new byte[1024];\n    while (!decompressor.finished()) {\n      try {\n        int count = decompressor.inflate(buf);\n        bos.write(buf, 0, count);\n      }\n      catch (DataFormatException e) {\n        // this will happen if the field is not compressed\n        throw new IOException (\"field data are in wrong format: \" + e.toString());\n      }\n    }\n  \n    decompressor.end();\n    \n    // Get the decompressed data\n    return bos.toByteArray();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8f3f03fd9a3e8d1050c506aa42af2715386c1d25"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd205ba0d3dbba4ae2679d527c2c864d6a8293b8","date":1147467840,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#uncompress(byte[]).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#uncompress(byte[]).mjava","sourceNew":"  private final byte[] uncompress(final byte[] input)\n    throws IOException\n  {\n  \n    Inflater decompressor = new Inflater();\n    decompressor.setInput(input);\n  \n    // Create an expandable byte array to hold the decompressed data\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(input.length);\n  \n    // Decompress the data\n    byte[] buf = new byte[1024];\n    while (!decompressor.finished()) {\n      try {\n        int count = decompressor.inflate(buf);\n        bos.write(buf, 0, count);\n      }\n      catch (DataFormatException e) {\n        // this will happen if the field is not compressed\n        IOException newException = new IOException(\"field data are in wrong format: \" + e.toString());\n        newException.initCause(e);\n        throw newException;\n      }\n    }\n  \n    decompressor.end();\n    \n    // Get the decompressed data\n    return bos.toByteArray();\n  }\n\n","sourceOld":"  private final byte[] uncompress(final byte[] input)\n    throws IOException\n  {\n  \n    Inflater decompressor = new Inflater();\n    decompressor.setInput(input);\n  \n    // Create an expandable byte array to hold the decompressed data\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(input.length);\n  \n    // Decompress the data\n    byte[] buf = new byte[1024];\n    while (!decompressor.finished()) {\n      try {\n        int count = decompressor.inflate(buf);\n        bos.write(buf, 0, count);\n      }\n      catch (DataFormatException e) {\n        // this will happen if the field is not compressed\n        throw new IOException (\"field data are in wrong format: \" + e.toString());\n      }\n    }\n  \n    decompressor.end();\n    \n    // Get the decompressed data\n    return bos.toByteArray();\n  }\n\n","bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df","8f3f03fd9a3e8d1050c506aa42af2715386c1d25"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#uncompress(byte[]).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#uncompress(byte[]).mjava","sourceNew":"  private final byte[] uncompress(final byte[] input)\n          throws IOException {\n\n    Inflater decompressor = new Inflater();\n    decompressor.setInput(input);\n\n    // Create an expandable byte array to hold the decompressed data\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(input.length);\n\n    // Decompress the data\n    byte[] buf = new byte[1024];\n    while (!decompressor.finished()) {\n      try {\n        int count = decompressor.inflate(buf);\n        bos.write(buf, 0, count);\n      }\n      catch (DataFormatException e) {\n        // this will happen if the field is not compressed\n        IOException newException = new IOException(\"field data are in wrong format: \" + e.toString());\n        newException.initCause(e);\n        throw newException;\n      }\n    }\n  \n    decompressor.end();\n    \n    // Get the decompressed data\n    return bos.toByteArray();\n  }\n\n","sourceOld":"  private final byte[] uncompress(final byte[] input)\n    throws IOException\n  {\n  \n    Inflater decompressor = new Inflater();\n    decompressor.setInput(input);\n  \n    // Create an expandable byte array to hold the decompressed data\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(input.length);\n  \n    // Decompress the data\n    byte[] buf = new byte[1024];\n    while (!decompressor.finished()) {\n      try {\n        int count = decompressor.inflate(buf);\n        bos.write(buf, 0, count);\n      }\n      catch (DataFormatException e) {\n        // this will happen if the field is not compressed\n        IOException newException = new IOException(\"field data are in wrong format: \" + e.toString());\n        newException.initCause(e);\n        throw newException;\n      }\n    }\n  \n    decompressor.end();\n    \n    // Get the decompressed data\n    return bos.toByteArray();\n  }\n\n","bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df","8f3f03fd9a3e8d1050c506aa42af2715386c1d25"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#uncompress(byte[]).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#uncompress(byte[]).mjava","sourceNew":"  private final byte[] uncompress(final byte[] input)\n          throws CorruptIndexException, IOException {\n\n    Inflater decompressor = new Inflater();\n    decompressor.setInput(input);\n\n    // Create an expandable byte array to hold the decompressed data\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(input.length);\n\n    // Decompress the data\n    byte[] buf = new byte[1024];\n    while (!decompressor.finished()) {\n      try {\n        int count = decompressor.inflate(buf);\n        bos.write(buf, 0, count);\n      }\n      catch (DataFormatException e) {\n        // this will happen if the field is not compressed\n        CorruptIndexException newException = new CorruptIndexException(\"field data are in wrong format: \" + e.toString());\n        newException.initCause(e);\n        throw newException;\n      }\n    }\n  \n    decompressor.end();\n    \n    // Get the decompressed data\n    return bos.toByteArray();\n  }\n\n","sourceOld":"  private final byte[] uncompress(final byte[] input)\n          throws IOException {\n\n    Inflater decompressor = new Inflater();\n    decompressor.setInput(input);\n\n    // Create an expandable byte array to hold the decompressed data\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(input.length);\n\n    // Decompress the data\n    byte[] buf = new byte[1024];\n    while (!decompressor.finished()) {\n      try {\n        int count = decompressor.inflate(buf);\n        bos.write(buf, 0, count);\n      }\n      catch (DataFormatException e) {\n        // this will happen if the field is not compressed\n        IOException newException = new IOException(\"field data are in wrong format: \" + e.toString());\n        newException.initCause(e);\n        throw newException;\n      }\n    }\n  \n    decompressor.end();\n    \n    // Get the decompressed data\n    return bos.toByteArray();\n  }\n\n","bugFix":["fd205ba0d3dbba4ae2679d527c2c864d6a8293b8","12d40284fd9481f79444bc63bc5d13847caddd3d"],"bugIntro":["8f3f03fd9a3e8d1050c506aa42af2715386c1d25"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f3f03fd9a3e8d1050c506aa42af2715386c1d25","date":1215163241,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#uncompress(byte[]).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#uncompress(byte[]).mjava","sourceNew":"  private final byte[] uncompress(final byte[] input)\n          throws CorruptIndexException, IOException {\n\n    // Create an expandable byte array to hold the decompressed data\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(input.length);\n\n    Inflater decompressor = new Inflater();\n\n    try {\n      decompressor.setInput(input);\n\n      // Decompress the data\n      byte[] buf = new byte[1024];\n      while (!decompressor.finished()) {\n        try {\n          int count = decompressor.inflate(buf);\n          bos.write(buf, 0, count);\n        }\n        catch (DataFormatException e) {\n          // this will happen if the field is not compressed\n          CorruptIndexException newException = new CorruptIndexException(\"field data are in wrong format: \" + e.toString());\n          newException.initCause(e);\n          throw newException;\n        }\n      }\n    } finally {  \n      decompressor.end();\n    }\n    \n    // Get the decompressed data\n    return bos.toByteArray();\n  }\n\n","sourceOld":"  private final byte[] uncompress(final byte[] input)\n          throws CorruptIndexException, IOException {\n\n    Inflater decompressor = new Inflater();\n    decompressor.setInput(input);\n\n    // Create an expandable byte array to hold the decompressed data\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(input.length);\n\n    // Decompress the data\n    byte[] buf = new byte[1024];\n    while (!decompressor.finished()) {\n      try {\n        int count = decompressor.inflate(buf);\n        bos.write(buf, 0, count);\n      }\n      catch (DataFormatException e) {\n        // this will happen if the field is not compressed\n        CorruptIndexException newException = new CorruptIndexException(\"field data are in wrong format: \" + e.toString());\n        newException.initCause(e);\n        throw newException;\n      }\n    }\n  \n    decompressor.end();\n    \n    // Get the decompressed data\n    return bos.toByteArray();\n  }\n\n","bugFix":["fd205ba0d3dbba4ae2679d527c2c864d6a8293b8","12d40284fd9481f79444bc63bc5d13847caddd3d","b3d038c41e70424a134ef69a524f3cc0fb40d854","1b54a9bc667895a2095a886184bf69a3179e63df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de01496176b31b9496ca92b2faebc31e16d91cc0","date":1237569222,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#uncompress(byte[]).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#uncompress(byte[]).mjava","sourceNew":"  private byte[] uncompress(byte[] b)\n          throws CorruptIndexException {\n    try {\n      return CompressionTools.decompress(b);\n    } catch (DataFormatException e) {\n      // this will happen if the field is not compressed\n      CorruptIndexException newException = new CorruptIndexException(\"field data are in wrong format: \" + e.toString());\n      newException.initCause(e);\n      throw newException;\n    }\n  }\n\n","sourceOld":"  private final byte[] uncompress(final byte[] input)\n          throws CorruptIndexException, IOException {\n\n    // Create an expandable byte array to hold the decompressed data\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(input.length);\n\n    Inflater decompressor = new Inflater();\n\n    try {\n      decompressor.setInput(input);\n\n      // Decompress the data\n      byte[] buf = new byte[1024];\n      while (!decompressor.finished()) {\n        try {\n          int count = decompressor.inflate(buf);\n          bos.write(buf, 0, count);\n        }\n        catch (DataFormatException e) {\n          // this will happen if the field is not compressed\n          CorruptIndexException newException = new CorruptIndexException(\"field data are in wrong format: \" + e.toString());\n          newException.initCause(e);\n          throw newException;\n        }\n      }\n    } finally {  \n      decompressor.end();\n    }\n    \n    // Get the decompressed data\n    return bos.toByteArray();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0c804f7aa477229414a7e12882af490c241f64d","date":1254963299,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/FieldsReader#uncompress(byte[]).mjava","sourceNew":null,"sourceOld":"  private byte[] uncompress(byte[] b)\n          throws CorruptIndexException {\n    try {\n      return CompressionTools.decompress(b);\n    } catch (DataFormatException e) {\n      // this will happen if the field is not compressed\n      CorruptIndexException newException = new CorruptIndexException(\"field data are in wrong format: \" + e.toString());\n      newException.initCause(e);\n      throw newException;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab50480bb5a7c7abad9762badcf87f8b69efeabe","date":1256591817,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#uncompress(byte[]).mjava","pathOld":"/dev/null","sourceNew":"  private byte[] uncompress(byte[] b)\n          throws CorruptIndexException {\n    try {\n      return CompressionTools.decompress(b);\n    } catch (DataFormatException e) {\n      // this will happen if the field is not compressed\n      CorruptIndexException newException = new CorruptIndexException(\"field data are in wrong format: \" + e.toString());\n      newException.initCause(e);\n      throw newException;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#uncompress(byte[]).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#uncompress(byte[]).mjava","sourceNew":"  private byte[] uncompress(byte[] b)\n          throws CorruptIndexException {\n    try {\n      return CompressionTools.decompress(b);\n    } catch (DataFormatException e) {\n      // this will happen if the field is not compressed\n      CorruptIndexException newException = new CorruptIndexException(\"field data are in wrong format: \" + e.toString());\n      newException.initCause(e);\n      throw newException;\n    }\n  }\n\n","sourceOld":"  private byte[] uncompress(byte[] b)\n          throws CorruptIndexException {\n    try {\n      return CompressionTools.decompress(b);\n    } catch (DataFormatException e) {\n      // this will happen if the field is not compressed\n      CorruptIndexException newException = new CorruptIndexException(\"field data are in wrong format: \" + e.toString());\n      newException.initCause(e);\n      throw newException;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab50480bb5a7c7abad9762badcf87f8b69efeabe":["e0c804f7aa477229414a7e12882af490c241f64d"],"1b54a9bc667895a2095a886184bf69a3179e63df":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"fd205ba0d3dbba4ae2679d527c2c864d6a8293b8":["b3d038c41e70424a134ef69a524f3cc0fb40d854"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"12d40284fd9481f79444bc63bc5d13847caddd3d":["fd205ba0d3dbba4ae2679d527c2c864d6a8293b8"],"e0c804f7aa477229414a7e12882af490c241f64d":["de01496176b31b9496ca92b2faebc31e16d91cc0"],"de01496176b31b9496ca92b2faebc31e16d91cc0":["8f3f03fd9a3e8d1050c506aa42af2715386c1d25"],"b3d038c41e70424a134ef69a524f3cc0fb40d854":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab50480bb5a7c7abad9762badcf87f8b69efeabe"],"8f3f03fd9a3e8d1050c506aa42af2715386c1d25":["1b54a9bc667895a2095a886184bf69a3179e63df"]},"commit2Childs":{"ab50480bb5a7c7abad9762badcf87f8b69efeabe":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1b54a9bc667895a2095a886184bf69a3179e63df":["8f3f03fd9a3e8d1050c506aa42af2715386c1d25"],"fd205ba0d3dbba4ae2679d527c2c864d6a8293b8":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3d038c41e70424a134ef69a524f3cc0fb40d854"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["1b54a9bc667895a2095a886184bf69a3179e63df"],"e0c804f7aa477229414a7e12882af490c241f64d":["ab50480bb5a7c7abad9762badcf87f8b69efeabe"],"b3d038c41e70424a134ef69a524f3cc0fb40d854":["fd205ba0d3dbba4ae2679d527c2c864d6a8293b8"],"de01496176b31b9496ca92b2faebc31e16d91cc0":["e0c804f7aa477229414a7e12882af490c241f64d"],"8f3f03fd9a3e8d1050c506aa42af2715386c1d25":["de01496176b31b9496ca92b2faebc31e16d91cc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}