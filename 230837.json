{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","sourceNew":"  /**\n   * Task tearDown work that should not be measured for that specific task.\n   * By default it does nothing, but tasks can implement this, moving work from \n   * doLogic() to this method. Only the work done in doLogicis measured for this task.\n   * Notice that higher level (sequence) tasks containing this task would then \n   * measure larger time than the sum of their contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      NumberFormat nf = NumberFormat.getInstance();\n      nf.setMaximumFractionDigits(2);\n      System.out.println(nf.format(time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","sourceOld":"  /**\n   * Task tearDown work that should not be measured for that specific task.\n   * By default it does nothing, but tasks can implement this, moving work from \n   * doLogic() to this method. Only the work done in doLogicis measured for this task.\n   * Notice that higher level (sequence) tasks containing this task would then \n   * measure larger time than the sum of their contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      NumberFormat nf = NumberFormat.getInstance();\n      nf.setMaximumFractionDigits(2);\n      System.out.println(nf.format(time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","sourceNew":"  /**\n   * Task tearDown work that should not be measured for that specific task.\n   * By default it does nothing, but tasks can implement this, moving work from \n   * doLogic() to this method. Only the work done in doLogicis measured for this task.\n   * Notice that higher level (sequence) tasks containing this task would then \n   * measure larger time than the sum of their contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      NumberFormat nf = NumberFormat.getInstance();\n      nf.setMaximumFractionDigits(2);\n      System.out.println(nf.format(time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","sourceOld":"  /**\n   * Task tearDown work that should not be measured for that specific task.\n   * By default it does nothing, but tasks can implement this, moving work from \n   * doLogic() to this method. Only the work done in doLogicis measured for this task.\n   * Notice that higher level (sequence) tasks containing this task would then \n   * measure larger time than the sum of their contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      NumberFormat nf = NumberFormat.getInstance();\n      nf.setMaximumFractionDigits(2);\n      System.out.println(nf.format(time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","sourceNew":"  /**\n   * Task tearDown work that should not be measured for that specific task.\n   * By default it does nothing, but tasks can implement this, moving work from \n   * doLogic() to this method. Only the work done in doLogicis measured for this task.\n   * Notice that higher level (sequence) tasks containing this task would then \n   * measure larger time than the sum of their contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      NumberFormat nf = NumberFormat.getInstance();\n      nf.setMaximumFractionDigits(2);\n      System.out.println(nf.format(time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","sourceOld":"  /**\n   * Task tearDown work that should not be measured for that specific task.\n   * By default it does nothing, but tasks can implement this, moving work from \n   * doLogic() to this method. Only the work done in doLogicis measured for this task.\n   * Notice that higher level (sequence) tasks containing this task would then \n   * measure larger time than the sum of their contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      NumberFormat nf = NumberFormat.getInstance();\n      nf.setMaximumFractionDigits(2);\n      System.out.println(nf.format(time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80","date":1318183296,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","sourceNew":"  /**\n   * Task tearDown work that should not be measured for that specific task.\n   * By default it does nothing, but tasks can implement this, moving work from \n   * doLogic() to this method. Only the work done in doLogicis measured for this task.\n   * Notice that higher level (sequence) tasks containing this task would then \n   * measure larger time than the sum of their contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      System.out.println(String.format(\"%7.2f\",time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","sourceOld":"  /**\n   * Task tearDown work that should not be measured for that specific task.\n   * By default it does nothing, but tasks can implement this, moving work from \n   * doLogic() to this method. Only the work done in doLogicis measured for this task.\n   * Notice that higher level (sequence) tasks containing this task would then \n   * measure larger time than the sum of their contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      NumberFormat nf = NumberFormat.getInstance();\n      nf.setMaximumFractionDigits(2);\n      System.out.println(nf.format(time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f962fbd1fec649d4944a41dc9b6fe4a23a461c2a","date":1327488120,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","sourceNew":"  /**\n   * Task tearDown work that should not be measured for that specific task. By\n   * default it does nothing, but tasks can implement this, moving work from\n   * {@link #doLogic()} to this method. Only the work done in {@link #doLogic()}\n   * is measured for this task. Notice that higher level (sequence) tasks\n   * containing this task would then measure larger time than the sum of their\n   * contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      System.out.println(String.format(\"%7.2f\",time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","sourceOld":"  /**\n   * Task tearDown work that should not be measured for that specific task.\n   * By default it does nothing, but tasks can implement this, moving work from \n   * doLogic() to this method. Only the work done in doLogicis measured for this task.\n   * Notice that higher level (sequence) tasks containing this task would then \n   * measure larger time than the sum of their contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      System.out.println(String.format(\"%7.2f\",time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","sourceNew":"  /**\n   * Task tearDown work that should not be measured for that specific task. By\n   * default it does nothing, but tasks can implement this, moving work from\n   * {@link #doLogic()} to this method. Only the work done in {@link #doLogic()}\n   * is measured for this task. Notice that higher level (sequence) tasks\n   * containing this task would then measure larger time than the sum of their\n   * contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      System.out.println(String.format(\"%7.2f\",time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","sourceOld":"  /**\n   * Task tearDown work that should not be measured for that specific task.\n   * By default it does nothing, but tasks can implement this, moving work from \n   * doLogic() to this method. Only the work done in doLogicis measured for this task.\n   * Notice that higher level (sequence) tasks containing this task would then \n   * measure larger time than the sum of their contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      System.out.println(String.format(\"%7.2f\",time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","sourceNew":"  /**\n   * Task tearDown work that should not be measured for that specific task. By\n   * default it does nothing, but tasks can implement this, moving work from\n   * {@link #doLogic()} to this method. Only the work done in {@link #doLogic()}\n   * is measured for this task. Notice that higher level (sequence) tasks\n   * containing this task would then measure larger time than the sum of their\n   * contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      System.out.println(String.format(\"%7.2f\",time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","sourceOld":"  /**\n   * Task tearDown work that should not be measured for that specific task.\n   * By default it does nothing, but tasks can implement this, moving work from \n   * doLogic() to this method. Only the work done in doLogicis measured for this task.\n   * Notice that higher level (sequence) tasks containing this task would then \n   * measure larger time than the sum of their contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      System.out.println(String.format(\"%7.2f\",time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/PerfTask#tearDown().mjava","sourceNew":"  /**\n   * Task tearDown work that should not be measured for that specific task. By\n   * default it does nothing, but tasks can implement this, moving work from\n   * {@link #doLogic()} to this method. Only the work done in {@link #doLogic()}\n   * is measured for this task. Notice that higher level (sequence) tasks\n   * containing this task would then measure larger time than the sum of their\n   * contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      System.out.println(String.format(\"%7.2f\",time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","sourceOld":"  /**\n   * Task tearDown work that should not be measured for that specific task. By\n   * default it does nothing, but tasks can implement this, moving work from\n   * {@link #doLogic()} to this method. Only the work done in {@link #doLogic()}\n   * is measured for this task. Notice that higher level (sequence) tasks\n   * containing this task would then measure larger time than the sum of their\n   * contained tasks.\n   */\n  public void tearDown() throws Exception {\n    if (++logStepCount % logStep == 0) {\n      double time = (System.currentTimeMillis() - runData.getStartTimeMillis()) / 1000.0;\n      System.out.println(String.format(\"%7.2f\",time) + \" sec --> \"\n          + Thread.currentThread().getName() + \" \" + getLogMessage(logStepCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f962fbd1fec649d4944a41dc9b6fe4a23a461c2a"],"b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80","f962fbd1fec649d4944a41dc9b6fe4a23a461c2a"],"f962fbd1fec649d4944a41dc9b6fe4a23a461c2a":["b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80","f962fbd1fec649d4944a41dc9b6fe4a23a461c2a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b5b25dd09e9e2bbeca84aceaf74e1df8ad1bff80":["0d22ac6a4146774c1bc8400160fc0b6150294e92","f962fbd1fec649d4944a41dc9b6fe4a23a461c2a","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"f962fbd1fec649d4944a41dc9b6fe4a23a461c2a":["b89678825b68eccaf09e6ab71675fc0b0af1e099","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}