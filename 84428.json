{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      int charsRead = input.read(chars);\n      inStr = new String(chars, 0, charsRead).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setTermBuffer(inStr, start, gramSize);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      int charsRead = input.read(chars);\n      inStr = new String(chars, 0, charsRead).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setTermBuffer(inStr, start, gramSize);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      int charsRead = input.read(chars);\n      inStr = new String(chars, 0, charsRead).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setTermBuffer(inStr, start, gramSize);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      int charsRead = input.read(chars);\n      inStr = new String(chars, 0, charsRead).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return false;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return false;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    termAtt.setTermBuffer(inStr, start, gramSize);\n    offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n    gramSize++;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}