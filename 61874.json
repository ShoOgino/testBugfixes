{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DateEvaluatorTest#testInvalidValues().mjava","commits":[{"id":"431fcaec9cce0a765cb0d341b8e4e51f133e6519","date":1492023302,"type":0,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DateEvaluatorTest#testInvalidValues().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(\"year(a)\");\n\n    try {\n      values.clear();\n      values.put(\"a\", 12);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertEquals(\"Invalid field a - The field must be a string formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"1995-12-31\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertEquals(\"Invalid field a - The field must be a string formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    values.clear();\n    values.put(\"a\", null);\n    assertNull(evaluator.evaluate(new Tuple(values)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40b789607c421011dabf36a935528a74fb8b2032","date":1492023606,"type":5,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testInvalidValues().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DateEvaluatorTest#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(\"year(a)\");\n\n    try {\n      values.clear();\n      values.put(\"a\", 12);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertEquals(\"Invalid field a - The field must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"1995-12-31\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertEquals(\"Invalid field a - The field must be a string formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    values.clear();\n    values.put(\"a\", null);\n    assertNull(evaluator.evaluate(new Tuple(values)));\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(\"year(a)\");\n\n    try {\n      values.clear();\n      values.put(\"a\", 12);\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertEquals(\"Invalid field a - The field must be a string formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    try {\n      values.clear();\n      values.put(\"a\", \"1995-12-31\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertEquals(\"Invalid field a - The field must be a string formatted in the ISO_INSTANT date format.\", e.getMessage());\n    }\n\n    values.clear();\n    values.put(\"a\", null);\n    assertNull(evaluator.evaluate(new Tuple(values)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"431fcaec9cce0a765cb0d341b8e4e51f133e6519":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"40b789607c421011dabf36a935528a74fb8b2032":["431fcaec9cce0a765cb0d341b8e4e51f133e6519"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["40b789607c421011dabf36a935528a74fb8b2032"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["431fcaec9cce0a765cb0d341b8e4e51f133e6519"],"431fcaec9cce0a765cb0d341b8e4e51f133e6519":["40b789607c421011dabf36a935528a74fb8b2032"],"40b789607c421011dabf36a935528a74fb8b2032":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}