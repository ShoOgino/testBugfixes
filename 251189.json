{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadLongField(FieldInfo).mjava","commits":[{"id":"6a549b1cf014471a1824fa0dfb77c82ed061ee1d","date":1358966558,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadLongField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  private NumericDocValues loadLongField(FieldInfo field) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"dat\");\n    IndexInput input = dir.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.INTS_CODEC_NAME, \n                                   Lucene40DocValuesFormat.INTS_VERSION_START, \n                                   Lucene40DocValuesFormat.INTS_VERSION_CURRENT);\n      input.readInt();\n      int maxDoc = state.segmentInfo.getDocCount();\n      final long values[] = new long[maxDoc];\n      for (int i = 0; i < values.length; i++) {\n        values[i] = input.readLong();\n      }\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return values[docID];\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1982459c2ac4916bf3c0644b801f0cb3e4ee159f","date":1359034079,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadLongField(FieldInfo).mjava","sourceNew":null,"sourceOld":"  private NumericDocValues loadLongField(FieldInfo field) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"dat\");\n    IndexInput input = dir.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.INTS_CODEC_NAME, \n                                   Lucene40DocValuesFormat.INTS_VERSION_START, \n                                   Lucene40DocValuesFormat.INTS_VERSION_CURRENT);\n      input.readInt();\n      int maxDoc = state.segmentInfo.getDocCount();\n      final long values[] = new long[maxDoc];\n      for (int i = 0; i < values.length; i++) {\n        values[i] = input.readLong();\n      }\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return values[docID];\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1982459c2ac4916bf3c0644b801f0cb3e4ee159f":["6a549b1cf014471a1824fa0dfb77c82ed061ee1d"],"6a549b1cf014471a1824fa0dfb77c82ed061ee1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6a549b1cf014471a1824fa0dfb77c82ed061ee1d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1982459c2ac4916bf3c0644b801f0cb3e4ee159f":[],"6a549b1cf014471a1824fa0dfb77c82ed061ee1d":["1982459c2ac4916bf3c0644b801f0cb3e4ee159f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1982459c2ac4916bf3c0644b801f0cb3e4ee159f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}