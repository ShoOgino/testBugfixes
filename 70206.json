{"path":"src/test/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","commits":[{"id":"c5f8e44d5e9627993851287f67e8360a36cb302a","date":1132032532,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","pathOld":"/dev/null","sourceNew":"  /** check very basic hashCode and equals */\r\n  public static void checkHashEquals(Query q) {\r\n    Query q2 = (Query)q.clone();\r\n    checkEqual(q,q2);\r\n\r\n    Query q3 = (Query)q.clone();\r\n    q3.setBoost(7.21792348f);\r\n    checkUnequal(q,q3);\r\n\r\n    // test that a class check is done so that no exception is thrown\r\n    // in the implementation of equals()\r\n    Query whacky = new Query() {\r\n      public String toString(String field) {\r\n        return \"My Whacky Query\";\r\n      }\r\n    };\r\n    whacky.setBoost(q.getBoost());\r\n    checkUnequal(q, whacky);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"492d71f81abcc186afa0074702472ecb6b7dc997","date":1177385598,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","sourceNew":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n  }\n\n","sourceOld":"  /** check very basic hashCode and equals */\r\n  public static void checkHashEquals(Query q) {\r\n    Query q2 = (Query)q.clone();\r\n    checkEqual(q,q2);\r\n\r\n    Query q3 = (Query)q.clone();\r\n    q3.setBoost(7.21792348f);\r\n    checkUnequal(q,q3);\r\n\r\n    // test that a class check is done so that no exception is thrown\r\n    // in the implementation of equals()\r\n    Query whacky = new Query() {\r\n      public String toString(String field) {\r\n        return \"My Whacky Query\";\r\n      }\r\n    };\r\n    whacky.setBoost(q.getBoost());\r\n    checkUnequal(q, whacky);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","sourceNew":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n  }\n\n","sourceOld":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","sourceNew":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n  }\n\n","sourceOld":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["492d71f81abcc186afa0074702472ecb6b7dc997"],"c5f8e44d5e9627993851287f67e8360a36cb302a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"492d71f81abcc186afa0074702472ecb6b7dc997":["c5f8e44d5e9627993851287f67e8360a36cb302a"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c5f8e44d5e9627993851287f67e8360a36cb302a":["492d71f81abcc186afa0074702472ecb6b7dc997"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5f8e44d5e9627993851287f67e8360a36cb302a"],"492d71f81abcc186afa0074702472ecb6b7dc997":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}