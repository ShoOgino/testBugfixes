{"path":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#handleAdminRequest().mjava","commits":[{"id":"a760e2135dfe20a04dea360873d4de1c6a0280bb","date":1430762855,"type":1,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#handleAdminRequest().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#handleAdminRequest(HttpServletRequest,ServletResponse,SolrRequestHandler,SolrQueryRequest).mjava","sourceNew":"  private void handleAdminRequest() throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    SolrCore.preDecorateResponse(solrReq, solrResp);\n    handler.handleRequest(solrReq, solrResp);\n    SolrCore.postDecorateResponse(handler, solrReq, solrResp);\n    if (SolrDispatchFilter.log.isInfoEnabled() && solrResp.getToLog().size() > 0) {\n      SolrDispatchFilter.log.info(solrResp.getToLogAsString(\"[admin] \"));\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(\"standard\");\n    writeResponse(solrResp, respWriter, Method.getMethod(req.getMethod()));\n  }\n\n","sourceOld":"  private void handleAdminRequest(HttpServletRequest req, ServletResponse response, SolrRequestHandler handler,\n                                  SolrQueryRequest solrReq) throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    SolrCore.preDecorateResponse(solrReq, solrResp);\n    handler.handleRequest(solrReq, solrResp);\n    SolrCore.postDecorateResponse(handler, solrReq, solrResp);\n    if (log.isInfoEnabled() && solrResp.getToLog().size() > 0) {\n      log.info(solrResp.getToLogAsString(\"[admin] \"));\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(\"standard\");\n    writeResponse(solrResp, response, respWriter, solrReq, Method.getMethod(req.getMethod()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#handleAdminRequest().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#handleAdminRequest().mjava","sourceNew":"  private void handleAdminRequest() throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    SolrCore.preDecorateResponse(solrReq, solrResp);\n    handler.handleRequest(solrReq, solrResp);\n    SolrCore.postDecorateResponse(handler, solrReq, solrResp);\n    if (log.isInfoEnabled() && solrResp.getToLog().size() > 0) {\n      log.info(solrResp.getToLogAsString(\"[admin] \"));\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(\"standard\");\n    writeResponse(solrResp, respWriter, Method.getMethod(req.getMethod()));\n  }\n\n","sourceOld":"  private void handleAdminRequest() throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    SolrCore.preDecorateResponse(solrReq, solrResp);\n    handler.handleRequest(solrReq, solrResp);\n    SolrCore.postDecorateResponse(handler, solrReq, solrResp);\n    if (SolrDispatchFilter.log.isInfoEnabled() && solrResp.getToLog().size() > 0) {\n      SolrDispatchFilter.log.info(solrResp.getToLogAsString(\"[admin] \"));\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(\"standard\");\n    writeResponse(solrResp, respWriter, Method.getMethod(req.getMethod()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1407827f8682ca5d8a8747ac1dda65ebeff67164","date":1449861948,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#handleAdminRequest().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#handleAdminRequest().mjava","sourceNew":"  private void handleAdminRequest() throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    SolrCore.preDecorateResponse(solrReq, solrResp);\n    handler.handleRequest(solrReq, solrResp);\n    SolrCore.postDecorateResponse(handler, solrReq, solrResp);\n    if (log.isInfoEnabled() && solrResp.getToLog().size() > 0) {\n      log.info(solrResp.getToLogAsString(\"[admin]\"));\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(\"standard\");\n    writeResponse(solrResp, respWriter, Method.getMethod(req.getMethod()));\n  }\n\n","sourceOld":"  private void handleAdminRequest() throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    SolrCore.preDecorateResponse(solrReq, solrResp);\n    handler.handleRequest(solrReq, solrResp);\n    SolrCore.postDecorateResponse(handler, solrReq, solrResp);\n    if (log.isInfoEnabled() && solrResp.getToLog().size() > 0) {\n      log.info(solrResp.getToLogAsString(\"[admin] \"));\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(\"standard\");\n    writeResponse(solrResp, respWriter, Method.getMethod(req.getMethod()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#handleAdminRequest().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#handleAdminRequest().mjava","sourceNew":"  private void handleAdminRequest() throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    SolrCore.preDecorateResponse(solrReq, solrResp);\n    handleAdmin(solrResp);\n    SolrCore.postDecorateResponse(handler, solrReq, solrResp);\n    if (log.isInfoEnabled() && solrResp.getToLog().size() > 0) {\n      log.info(solrResp.getToLogAsString(\"[admin]\"));\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = getResponseWriter();\n    writeResponse(solrResp, respWriter, Method.getMethod(req.getMethod()));\n  }\n\n","sourceOld":"  private void handleAdminRequest() throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    SolrCore.preDecorateResponse(solrReq, solrResp);\n    handler.handleRequest(solrReq, solrResp);\n    SolrCore.postDecorateResponse(handler, solrReq, solrResp);\n    if (log.isInfoEnabled() && solrResp.getToLog().size() > 0) {\n      log.info(solrResp.getToLogAsString(\"[admin]\"));\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(\"standard\");\n    writeResponse(solrResp, respWriter, Method.getMethod(req.getMethod()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#handleAdminRequest().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#handleAdminRequest().mjava","sourceNew":"  private void handleAdminRequest() throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    SolrCore.preDecorateResponse(solrReq, solrResp);\n    handleAdmin(solrResp);\n    SolrCore.postDecorateResponse(handler, solrReq, solrResp);\n    if (log.isInfoEnabled() && solrResp.getToLog().size() > 0) {\n      log.info(solrResp.getToLogAsString(\"[admin]\"));\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = getResponseWriter();\n    writeResponse(solrResp, respWriter, Method.getMethod(req.getMethod()));\n  }\n\n","sourceOld":"  private void handleAdminRequest() throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    SolrCore.preDecorateResponse(solrReq, solrResp);\n    handler.handleRequest(solrReq, solrResp);\n    SolrCore.postDecorateResponse(handler, solrReq, solrResp);\n    if (log.isInfoEnabled() && solrResp.getToLog().size() > 0) {\n      log.info(solrResp.getToLogAsString(\"[admin]\"));\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(\"standard\");\n    writeResponse(solrResp, respWriter, Method.getMethod(req.getMethod()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12ddd922ea96c1d0ea68a68506b6984a246cfb22","date":1554385731,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#handleAdminRequest().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#handleAdminRequest().mjava","sourceNew":"  private void handleAdminRequest() throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    SolrCore.preDecorateResponse(solrReq, solrResp);\n    handleAdmin(solrResp);\n    SolrCore.postDecorateResponse(handler, solrReq, solrResp);\n    if (log.isInfoEnabled() && solrResp.getToLog().size() > 0) {\n      log.info(solrResp.getToLogAsString(\"[admin]\"));\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = getResponseWriter();\n    writeResponse(solrResp, respWriter, Method.getMethod(req.getMethod()));\n    if (shouldAudit()) {\n      EventType eventType = solrResp.getException() == null ? EventType.COMPLETED : EventType.ERROR;\n      if (shouldAudit(eventType)) {\n        cores.getAuditLoggerPlugin().doAudit(\n            new AuditEvent(eventType, req, getAuthCtx(), solrReq.getRequestTimer().getTime(), solrResp.getException()));\n      }\n    }\n  }\n\n","sourceOld":"  private void handleAdminRequest() throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    SolrCore.preDecorateResponse(solrReq, solrResp);\n    handleAdmin(solrResp);\n    SolrCore.postDecorateResponse(handler, solrReq, solrResp);\n    if (log.isInfoEnabled() && solrResp.getToLog().size() > 0) {\n      log.info(solrResp.getToLogAsString(\"[admin]\"));\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = getResponseWriter();\n    writeResponse(solrResp, respWriter, Method.getMethod(req.getMethod()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ef011344cb9d79a273b9cfe096c5ecc5de84f58","date":1593208852,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#handleAdminRequest().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#handleAdminRequest().mjava","sourceNew":"  private void handleAdminRequest() throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    SolrCore.preDecorateResponse(solrReq, solrResp);\n    handleAdmin(solrResp);\n    SolrCore.postDecorateResponse(handler, solrReq, solrResp);\n    if (solrResp.getToLog().size() > 0) {\n      if (log.isInfoEnabled()) { // has to come second and in it's own if to keep ./gradlew check happy.\n        log.info(handler != null ? MarkerFactory.getMarker(handler.getClass().getName()) : MarkerFactory.getMarker(HttpSolrCall.class.getName()), solrResp.getToLogAsString(\"[admin]\"));\n      }\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = getResponseWriter();\n    writeResponse(solrResp, respWriter, Method.getMethod(req.getMethod()));\n    if (shouldAudit()) {\n      EventType eventType = solrResp.getException() == null ? EventType.COMPLETED : EventType.ERROR;\n      if (shouldAudit(eventType)) {\n        cores.getAuditLoggerPlugin().doAudit(\n            new AuditEvent(eventType, req, getAuthCtx(), solrReq.getRequestTimer().getTime(), solrResp.getException()));\n      }\n    }\n  }\n\n","sourceOld":"  private void handleAdminRequest() throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    SolrCore.preDecorateResponse(solrReq, solrResp);\n    handleAdmin(solrResp);\n    SolrCore.postDecorateResponse(handler, solrReq, solrResp);\n    if (log.isInfoEnabled() && solrResp.getToLog().size() > 0) {\n      log.info(solrResp.getToLogAsString(\"[admin]\"));\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = getResponseWriter();\n    writeResponse(solrResp, respWriter, Method.getMethod(req.getMethod()));\n    if (shouldAudit()) {\n      EventType eventType = solrResp.getException() == null ? EventType.COMPLETED : EventType.ERROR;\n      if (shouldAudit(eventType)) {\n        cores.getAuditLoggerPlugin().doAudit(\n            new AuditEvent(eventType, req, getAuthCtx(), solrReq.getRequestTimer().getTime(), solrResp.getException()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1407827f8682ca5d8a8747ac1dda65ebeff67164":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["1407827f8682ca5d8a8747ac1dda65ebeff67164"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["1407827f8682ca5d8a8747ac1dda65ebeff67164","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"3ef011344cb9d79a273b9cfe096c5ecc5de84f58":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3ef011344cb9d79a273b9cfe096c5ecc5de84f58"]},"commit2Childs":{"1407827f8682ca5d8a8747ac1dda65ebeff67164":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["3ef011344cb9d79a273b9cfe096c5ecc5de84f58"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["12ddd922ea96c1d0ea68a68506b6984a246cfb22","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["1407827f8682ca5d8a8747ac1dda65ebeff67164"],"3ef011344cb9d79a273b9cfe096c5ecc5de84f58":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}