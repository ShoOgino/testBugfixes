{"path":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#getCoreName(String,CoreContainer).mjava","commits":[{"id":"118ba480e87dfe453a6b47a320429be33f1d1653","date":1440320558,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#getCoreName(String,CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an String with the name of a core.\n   * <p>\n   * This method searches the core with fromIndex name in the core's container.\n   * If fromIndex isn't name of collection or alias it's returns fromIndex without changes.\n   * If fromIndex is name of alias but if the alias points to multiple collections it's throw\n   * SolrException.ErrorCode.BAD_REQUEST because multiple shards not yet supported.\n   *\n   * @param  fromIndex name of the index\n   * @param  container the core container for searching the core with fromIndex name or alias\n   * @return      the string with name of core\n   */\n  public static String getCoreName(final String fromIndex, CoreContainer container) {\n    if (container.isZooKeeperAware()) {\n      ZkController zkController = container.getZkController();\n      final String resolved =\n        zkController.getClusterState().hasCollection(fromIndex)\n          ? fromIndex : resolveAlias(fromIndex, zkController);\n      if (resolved == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"SolrCloud join: Collection '\" + fromIndex + \"' not found!\");\n      }\n      return findLocalReplicaForFromIndex(zkController, resolved);\n    }\n    return fromIndex;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#getCoreName(String,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#getCoreName(String,CoreContainer).mjava","sourceNew":"  /**\n   * Returns an String with the name of a core.\n   * <p>\n   * This method searches the core with fromIndex name in the core's container.\n   * If fromIndex isn't name of collection or alias it's returns fromIndex without changes.\n   * If fromIndex is name of alias but if the alias points to multiple collections it's throw\n   * SolrException.ErrorCode.BAD_REQUEST because multiple shards not yet supported.\n   *\n   * @param  fromIndex name of the index\n   * @param  container the core container for searching the core with fromIndex name or alias\n   * @return      the string with name of core\n   */\n  public static String getCoreName(final String fromIndex, CoreContainer container) {\n    if (container.isZooKeeperAware()) {\n      ZkController zkController = container.getZkController();\n      final String resolved = resolveAlias(fromIndex, zkController);\n      // TODO DWS: no need for this since later, clusterState.getCollection will throw a reasonable error\n      if (!zkController.getClusterState().hasCollection(resolved)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"SolrCloud join: Collection '\" + fromIndex + \"' not found!\");\n      }\n      return findLocalReplicaForFromIndex(zkController, resolved);\n    }\n    return fromIndex;\n  }\n\n","sourceOld":"  /**\n   * Returns an String with the name of a core.\n   * <p>\n   * This method searches the core with fromIndex name in the core's container.\n   * If fromIndex isn't name of collection or alias it's returns fromIndex without changes.\n   * If fromIndex is name of alias but if the alias points to multiple collections it's throw\n   * SolrException.ErrorCode.BAD_REQUEST because multiple shards not yet supported.\n   *\n   * @param  fromIndex name of the index\n   * @param  container the core container for searching the core with fromIndex name or alias\n   * @return      the string with name of core\n   */\n  public static String getCoreName(final String fromIndex, CoreContainer container) {\n    if (container.isZooKeeperAware()) {\n      ZkController zkController = container.getZkController();\n      final String resolved =\n        zkController.getClusterState().hasCollection(fromIndex)\n          ? fromIndex : resolveAlias(fromIndex, zkController);\n      if (resolved == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"SolrCloud join: Collection '\" + fromIndex + \"' not found!\");\n      }\n      return findLocalReplicaForFromIndex(zkController, resolved);\n    }\n    return fromIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["118ba480e87dfe453a6b47a320429be33f1d1653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"118ba480e87dfe453a6b47a320429be33f1d1653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"]},"commit2Childs":{"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["118ba480e87dfe453a6b47a320429be33f1d1653"],"118ba480e87dfe453a6b47a320429be33f1d1653":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}