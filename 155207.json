{"path":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testPackedNorms().mjava","commits":[{"id":"321d826154449c6260f2010bedcedf15c277e9b6","date":1352257140,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testPackedNorms().mjava","pathOld":"/dev/null","sourceNew":"  public void testPackedNorms() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setSimilarity(new PackedNormSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    int num = _TestUtil.nextInt(random(), 1, 1000);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"len\", Integer.toString(i), Field.Store.YES));\n      StringBuilder sb = new StringBuilder();\n      for (int j = 0; j < i; j++) {\n        sb.append(\" token\");\n      }\n      doc.add(new TextField(\"content\", sb.toString(), Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    DirectoryReader ir = writer.getReader();\n    writer.close();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader reader = context.reader();\n      DocValues norms = reader.normValues(\"content\");\n      assertNotNull(norms);\n      Source source = norms.getSource();\n      assertEquals(Type.VAR_INTS, source.getType());\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        assertEquals(source.getInt(i), Long.parseLong(reader.document(i).get(\"len\")));\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5101758f5f219a150dc76be46e48cc75cc6bbd92","date":1357918519,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testPackedNorms().mjava","sourceNew":null,"sourceOld":"  public void testPackedNorms() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setSimilarity(new PackedNormSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    int num = _TestUtil.nextInt(random(), 1, 1000);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"len\", Integer.toString(i), Field.Store.YES));\n      StringBuilder sb = new StringBuilder();\n      for (int j = 0; j < i; j++) {\n        sb.append(\" token\");\n      }\n      doc.add(new TextField(\"content\", sb.toString(), Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    DirectoryReader ir = writer.getReader();\n    writer.close();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader reader = context.reader();\n      DocValues norms = reader.normValues(\"content\");\n      assertNotNull(norms);\n      Source source = norms.getSource();\n      assertEquals(Type.VAR_INTS, source.getType());\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        assertEquals(source.getInt(i), Long.parseLong(reader.document(i).get(\"len\")));\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testPackedNorms().mjava","sourceNew":null,"sourceOld":"  public void testPackedNorms() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setSimilarity(new PackedNormSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    int num = _TestUtil.nextInt(random(), 1, 1000);\n    for (int i = 0; i < num; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"len\", Integer.toString(i), Field.Store.YES));\n      StringBuilder sb = new StringBuilder();\n      for (int j = 0; j < i; j++) {\n        sb.append(\" token\");\n      }\n      doc.add(new TextField(\"content\", sb.toString(), Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    DirectoryReader ir = writer.getReader();\n    writer.close();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader reader = context.reader();\n      DocValues norms = reader.normValues(\"content\");\n      assertNotNull(norms);\n      Source source = norms.getSource();\n      assertEquals(Type.VAR_INTS, source.getType());\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        assertEquals(source.getInt(i), Long.parseLong(reader.document(i).get(\"len\")));\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8917bfede3b4ca30f4305c1e391e9218959cd723":["321d826154449c6260f2010bedcedf15c277e9b6","5101758f5f219a150dc76be46e48cc75cc6bbd92"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5101758f5f219a150dc76be46e48cc75cc6bbd92":["321d826154449c6260f2010bedcedf15c277e9b6"],"321d826154449c6260f2010bedcedf15c277e9b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5101758f5f219a150dc76be46e48cc75cc6bbd92"]},"commit2Childs":{"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["321d826154449c6260f2010bedcedf15c277e9b6"],"5101758f5f219a150dc76be46e48cc75cc6bbd92":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"321d826154449c6260f2010bedcedf15c277e9b6":["8917bfede3b4ca30f4305c1e391e9218959cd723","5101758f5f219a150dc76be46e48cc75cc6bbd92"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}