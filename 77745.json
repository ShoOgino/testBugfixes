{"path":"lucene/core/src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","sourceNew":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>byte[]</code> containing the binary field value or <code>null</code>\n  */\n  public final BytesRef getBinaryValue(String name) {\n    for (IndexableField field : fields) {\n      if (field.name().equals(name)) {\n        final BytesRef bytes = field.binaryValue();\n        if (bytes != null) {\n          return bytes;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>byte[]</code> containing the binary field value or <code>null</code>\n  */\n  public final BytesRef getBinaryValue(String name) {\n    for (IndexableField field : fields) {\n      if (field.name().equals(name)) {\n        final BytesRef bytes = field.binaryValue();\n        if (bytes != null) {\n          return bytes;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","date":1341524239,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","sourceNew":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>byte[]</code> containing the binary field value or <code>null</code>\n  */\n  public final BytesRef getBinaryValue(String name) {\n    Iterator<StorableField> it = storedFieldsIterator();\n    \n    while (it.hasNext()) {\n      StorableField field = it.next();\n      if (field.name().equals(name)) {\n        final BytesRef bytes = field.binaryValue();\n        if (bytes != null) {\n          return bytes;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>byte[]</code> containing the binary field value or <code>null</code>\n  */\n  public final BytesRef getBinaryValue(String name) {\n    for (IndexableField field : fields) {\n      if (field.name().equals(name)) {\n        final BytesRef bytes = field.binaryValue();\n        if (bytes != null) {\n          return bytes;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","sourceNew":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>byte[]</code> containing the binary field value or <code>null</code>\n  */\n  public final BytesRef getBinaryValue(String name) {\n    Iterator<Field> it = storedFieldsIterator();\n    \n    while (it.hasNext()) {\n      StorableField field = it.next();\n      if (field.name().equals(name)) {\n        final BytesRef bytes = field.binaryValue();\n        if (bytes != null) {\n          return bytes;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>byte[]</code> containing the binary field value or <code>null</code>\n  */\n  public final BytesRef getBinaryValue(String name) {\n    Iterator<StorableField> it = storedFieldsIterator();\n    \n    while (it.hasNext()) {\n      StorableField field = it.next();\n      if (field.name().equals(name)) {\n        final BytesRef bytes = field.binaryValue();\n        if (bytes != null) {\n          return bytes;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","sourceNew":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>byte[]</code> containing the binary field value or <code>null</code>\n  */\n  public final BytesRef getBinaryValue(String name) {\n    Iterator<Field> it = storedFieldsIterator();\n    \n    while (it.hasNext()) {\n      StorableField field = it.next();\n      if (field.name().equals(name)) {\n        final BytesRef bytes = field.binaryValue();\n        if (bytes != null) {\n          return bytes;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>byte[]</code> containing the binary field value or <code>null</code>\n  */\n  public final BytesRef getBinaryValue(String name) {\n    for (IndexableField field : fields) {\n      if (field.name().equals(name)) {\n        final BytesRef bytes = field.binaryValue();\n        if (bytes != null) {\n          return bytes;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7700602b07ba0daa0256f95affa493eb41629722","date":1347547529,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","sourceNew":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>BytesRef</code> containing the binary field value or <code>null</code>\n  */\n  public final BytesRef getBinaryValue(String name) {\n    Iterator<Field> it = storedFieldsIterator();\n    \n    while (it.hasNext()) {\n      StorableField field = it.next();\n      if (field.name().equals(name)) {\n        final BytesRef bytes = field.binaryValue();\n        if (bytes != null) {\n          return bytes;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>byte[]</code> containing the binary field value or <code>null</code>\n  */\n  public final BytesRef getBinaryValue(String name) {\n    Iterator<Field> it = storedFieldsIterator();\n    \n    while (it.hasNext()) {\n      StorableField field = it.next();\n      if (field.name().equals(name)) {\n        final BytesRef bytes = field.binaryValue();\n        if (bytes != null) {\n          return bytes;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"286d87eabbc79863e93070d6126d558a2ca0fb28","date":1352063339,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","sourceNew":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>BytesRef</code> containing the binary field value or <code>null</code>\n  */\n  public final BytesRef getBinaryValue(String name) {\n    for (Iterator<StorableField> it = storedFieldsIterator(); it.hasNext(); ) {\n      StorableField field = it.next();\n      if (field.name().equals(name)) {\n        final BytesRef bytes = field.binaryValue();\n        if (bytes != null) {\n          return bytes;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>BytesRef</code> containing the binary field value or <code>null</code>\n  */\n  public final BytesRef getBinaryValue(String name) {\n    Iterator<Field> it = storedFieldsIterator();\n    \n    while (it.hasNext()) {\n      StorableField field = it.next();\n      if (field.name().equals(name)) {\n        final BytesRef bytes = field.binaryValue();\n        if (bytes != null) {\n          return bytes;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Document#getBinaryValue(String).mjava","sourceNew":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>BytesRef</code> containing the binary field value or <code>null</code>\n  */\n  public final BytesRef getBinaryValue(String name) {\n    for (IndexableField field : fields) {\n      if (field.name().equals(name)) {\n        final BytesRef bytes = field.binaryValue();\n        if (bytes != null) {\n          return bytes;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n  * Returns an array of bytes for the first (or only) field that has the name\n  * specified as the method parameter. This method will return <code>null</code>\n  * if no binary fields with the specified name are available.\n  * There may be non-binary fields with the same name.\n  *\n  * @param name the name of the field.\n  * @return a <code>BytesRef</code> containing the binary field value or <code>null</code>\n  */\n  public final BytesRef getBinaryValue(String name) {\n    for (Iterator<StorableField> it = storedFieldsIterator(); it.hasNext(); ) {\n      StorableField field = it.next();\n      if (field.name().equals(name)) {\n        final BytesRef bytes = field.binaryValue();\n        if (bytes != null) {\n          return bytes;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"286d87eabbc79863e93070d6126d558a2ca0fb28":["7700602b07ba0daa0256f95affa493eb41629722"],"1d028314cced5858683a1bb4741423d0f934257b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7700602b07ba0daa0256f95affa493eb41629722":["1d028314cced5858683a1bb4741423d0f934257b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["286d87eabbc79863e93070d6126d558a2ca0fb28"]},"commit2Childs":{"286d87eabbc79863e93070d6126d558a2ca0fb28":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"1d028314cced5858683a1bb4741423d0f934257b":["7700602b07ba0daa0256f95affa493eb41629722"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["a7e4907084808af8fdb14b9809e6dceaccf6867b"],"7700602b07ba0daa0256f95affa493eb41629722":["286d87eabbc79863e93070d6126d558a2ca0fb28"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1d028314cced5858683a1bb4741423d0f934257b","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}