{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getNumberedStates().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getNumberedStates().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getNumberedStates().mjava","sourceNew":"  public State[] getNumberedStates() {\n    if (numberedStates == null) {\n      expandSingleton();\n      final Set<State> visited = new HashSet<State>();\n      final LinkedList<State> worklist = new LinkedList<State>();\n      numberedStates = new State[4];\n      int upto = 0;\n      worklist.add(initial);\n      visited.add(initial);\n      initial.number = upto;\n      numberedStates[upto] = initial;\n      upto++;\n      while (worklist.size() > 0) {\n        State s = worklist.removeFirst();\n        for (int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          if (!visited.contains(t.to)) {\n            visited.add(t.to);\n            worklist.add(t.to);\n            t.to.number = upto;\n            if (upto == numberedStates.length) {\n              final State[] newArray = new State[ArrayUtil.oversize(1+upto, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n              System.arraycopy(numberedStates, 0, newArray, 0, upto);\n              numberedStates = newArray;\n            }\n            numberedStates[upto] = t.to;\n            upto++;\n          }\n        }\n      }\n      if (numberedStates.length != upto) {\n        final State[] newArray = new State[upto];\n        System.arraycopy(numberedStates, 0, newArray, 0, upto);\n        numberedStates = newArray;\n      }\n    }\n\n    return numberedStates;\n  }\n\n","sourceOld":"  public State[] getNumberedStates() {\n    if (numberedStates == null) {\n      expandSingleton();\n      final Set<State> visited = new HashSet<State>();\n      final LinkedList<State> worklist = new LinkedList<State>();\n      numberedStates = new State[4];\n      int upto = 0;\n      worklist.add(initial);\n      visited.add(initial);\n      initial.number = upto;\n      numberedStates[upto] = initial;\n      upto++;\n      while (worklist.size() > 0) {\n        State s = worklist.removeFirst();\n        for (int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          if (!visited.contains(t.to)) {\n            visited.add(t.to);\n            worklist.add(t.to);\n            t.to.number = upto;\n            if (upto == numberedStates.length) {\n              final State[] newArray = new State[ArrayUtil.oversize(1+upto, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n              System.arraycopy(numberedStates, 0, newArray, 0, upto);\n              numberedStates = newArray;\n            }\n            numberedStates[upto] = t.to;\n            upto++;\n          }\n        }\n      }\n      if (numberedStates.length != upto) {\n        final State[] newArray = new State[upto];\n        System.arraycopy(numberedStates, 0, newArray, 0, upto);\n        numberedStates = newArray;\n      }\n    }\n\n    return numberedStates;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getNumberedStates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getNumberedStates().mjava","sourceNew":"  public State[] getNumberedStates() {\n    if (numberedStates == null) {\n      expandSingleton();\n      final Set<State> visited = new HashSet<>();\n      final LinkedList<State> worklist = new LinkedList<>();\n      numberedStates = new State[4];\n      int upto = 0;\n      worklist.add(initial);\n      visited.add(initial);\n      initial.number = upto;\n      numberedStates[upto] = initial;\n      upto++;\n      while (worklist.size() > 0) {\n        State s = worklist.removeFirst();\n        for (int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          if (!visited.contains(t.to)) {\n            visited.add(t.to);\n            worklist.add(t.to);\n            t.to.number = upto;\n            if (upto == numberedStates.length) {\n              final State[] newArray = new State[ArrayUtil.oversize(1+upto, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n              System.arraycopy(numberedStates, 0, newArray, 0, upto);\n              numberedStates = newArray;\n            }\n            numberedStates[upto] = t.to;\n            upto++;\n          }\n        }\n      }\n      if (numberedStates.length != upto) {\n        final State[] newArray = new State[upto];\n        System.arraycopy(numberedStates, 0, newArray, 0, upto);\n        numberedStates = newArray;\n      }\n    }\n\n    return numberedStates;\n  }\n\n","sourceOld":"  public State[] getNumberedStates() {\n    if (numberedStates == null) {\n      expandSingleton();\n      final Set<State> visited = new HashSet<State>();\n      final LinkedList<State> worklist = new LinkedList<State>();\n      numberedStates = new State[4];\n      int upto = 0;\n      worklist.add(initial);\n      visited.add(initial);\n      initial.number = upto;\n      numberedStates[upto] = initial;\n      upto++;\n      while (worklist.size() > 0) {\n        State s = worklist.removeFirst();\n        for (int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          if (!visited.contains(t.to)) {\n            visited.add(t.to);\n            worklist.add(t.to);\n            t.to.number = upto;\n            if (upto == numberedStates.length) {\n              final State[] newArray = new State[ArrayUtil.oversize(1+upto, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n              System.arraycopy(numberedStates, 0, newArray, 0, upto);\n              numberedStates = newArray;\n            }\n            numberedStates[upto] = t.to;\n            upto++;\n          }\n        }\n      }\n      if (numberedStates.length != upto) {\n        final State[] newArray = new State[upto];\n        System.arraycopy(numberedStates, 0, newArray, 0, upto);\n        numberedStates = newArray;\n      }\n    }\n\n    return numberedStates;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f04837a83ac5990603e49463c653672a3a31af0","date":1395078441,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getNumberedStates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getNumberedStates().mjava","sourceNew":"  public State[] getNumberedStates() {\n    if (numberedStates == null) {\n      expandSingleton();\n      final Set<State> visited = new HashSet<>();\n      final LinkedList<State> worklist = new LinkedList<>();\n      State states[] = new State[4];\n      int upto = 0;\n      worklist.add(initial);\n      visited.add(initial);\n      initial.number = upto;\n      states[upto] = initial;\n      upto++;\n      while (worklist.size() > 0) {\n        State s = worklist.removeFirst();\n        for (int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          if (!visited.contains(t.to)) {\n            visited.add(t.to);\n            worklist.add(t.to);\n            t.to.number = upto;\n            if (upto == states.length) {\n              final State[] newArray = new State[ArrayUtil.oversize(1+upto, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n              System.arraycopy(states, 0, newArray, 0, upto);\n              states = newArray;\n            }\n            states[upto] = t.to;\n            upto++;\n          }\n        }\n      }\n      if (states.length != upto) {\n        final State[] newArray = new State[upto];\n        System.arraycopy(states, 0, newArray, 0, upto);\n        states = newArray;\n      }\n      numberedStates = states;\n    }\n\n    return numberedStates;\n  }\n\n","sourceOld":"  public State[] getNumberedStates() {\n    if (numberedStates == null) {\n      expandSingleton();\n      final Set<State> visited = new HashSet<>();\n      final LinkedList<State> worklist = new LinkedList<>();\n      numberedStates = new State[4];\n      int upto = 0;\n      worklist.add(initial);\n      visited.add(initial);\n      initial.number = upto;\n      numberedStates[upto] = initial;\n      upto++;\n      while (worklist.size() > 0) {\n        State s = worklist.removeFirst();\n        for (int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          if (!visited.contains(t.to)) {\n            visited.add(t.to);\n            worklist.add(t.to);\n            t.to.number = upto;\n            if (upto == numberedStates.length) {\n              final State[] newArray = new State[ArrayUtil.oversize(1+upto, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n              System.arraycopy(numberedStates, 0, newArray, 0, upto);\n              numberedStates = newArray;\n            }\n            numberedStates[upto] = t.to;\n            upto++;\n          }\n        }\n      }\n      if (numberedStates.length != upto) {\n        final State[] newArray = new State[upto];\n        System.arraycopy(numberedStates, 0, newArray, 0, upto);\n        numberedStates = newArray;\n      }\n    }\n\n    return numberedStates;\n  }\n\n","bugFix":["4fc28d227571aea72029cf9096fcf7d3865a6b40","5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getNumberedStates().mjava","sourceNew":null,"sourceOld":"  public State[] getNumberedStates() {\n    if (numberedStates == null) {\n      expandSingleton();\n      final Set<State> visited = new HashSet<>();\n      final LinkedList<State> worklist = new LinkedList<>();\n      State states[] = new State[4];\n      int upto = 0;\n      worklist.add(initial);\n      visited.add(initial);\n      initial.number = upto;\n      states[upto] = initial;\n      upto++;\n      while (worklist.size() > 0) {\n        State s = worklist.removeFirst();\n        for (int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          if (!visited.contains(t.to)) {\n            visited.add(t.to);\n            worklist.add(t.to);\n            t.to.number = upto;\n            if (upto == states.length) {\n              final State[] newArray = new State[ArrayUtil.oversize(1+upto, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n              System.arraycopy(states, 0, newArray, 0, upto);\n              states = newArray;\n            }\n            states[upto] = t.to;\n            upto++;\n          }\n        }\n      }\n      if (states.length != upto) {\n        final State[] newArray = new State[upto];\n        System.arraycopy(states, 0, newArray, 0, upto);\n        states = newArray;\n      }\n      numberedStates = states;\n    }\n\n    return numberedStates;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getNumberedStates().mjava","sourceNew":null,"sourceOld":"  public State[] getNumberedStates() {\n    if (numberedStates == null) {\n      expandSingleton();\n      final Set<State> visited = new HashSet<>();\n      final LinkedList<State> worklist = new LinkedList<>();\n      State states[] = new State[4];\n      int upto = 0;\n      worklist.add(initial);\n      visited.add(initial);\n      initial.number = upto;\n      states[upto] = initial;\n      upto++;\n      while (worklist.size() > 0) {\n        State s = worklist.removeFirst();\n        for (int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          if (!visited.contains(t.to)) {\n            visited.add(t.to);\n            worklist.add(t.to);\n            t.to.number = upto;\n            if (upto == states.length) {\n              final State[] newArray = new State[ArrayUtil.oversize(1+upto, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n              System.arraycopy(states, 0, newArray, 0, upto);\n              states = newArray;\n            }\n            states[upto] = t.to;\n            upto++;\n          }\n        }\n      }\n      if (states.length != upto) {\n        final State[] newArray = new State[upto];\n        System.arraycopy(states, 0, newArray, 0, upto);\n        states = newArray;\n      }\n      numberedStates = states;\n    }\n\n    return numberedStates;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f04837a83ac5990603e49463c653672a3a31af0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["7f04837a83ac5990603e49463c653672a3a31af0"],"5c84485629d80d203608e8975a1139de9933cc38":["7f04837a83ac5990603e49463c653672a3a31af0","7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7f04837a83ac5990603e49463c653672a3a31af0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7f04837a83ac5990603e49463c653672a3a31af0":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}