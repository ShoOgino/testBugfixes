{"path":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#advance(int).mjava","commits":[{"id":"66ad19eb69be5720d673695d38a1f5a0fed70c06","date":1366664507,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#advance(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    assert canCallNextDoc : \"top scorers should not call advance(target)\";\n    return docsEnumIn.advance(target);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#advance(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    return docsEnumIn.advance(target);\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    assert canCallNextDoc : \"top scorers should not call advance(target)\";\n    return docsEnumIn.advance(target);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#advance(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    return docsEnumIn.advance(target);\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    assert canCallNextDoc : \"top scorers should not call advance(target)\";\n    return docsEnumIn.advance(target);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"449f2318aa7f06ce3bce9031e402201231cb781e","date":1424530966,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#advance(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    assert state != IteratorState.FINISHED : \"advance() called after NO_MORE_DOCS\";\n    assert target > doc : \"target must be > docID(), got \" + target + \" <= \" + doc;\n    int advanced = in.advance(target);\n    assert advanced >= target : \"backwards advance from: \" + target + \" to: \" + advanced;\n    if (advanced == DocIdSetIterator.NO_MORE_DOCS) {\n      state = IteratorState.FINISHED;\n    } else {\n      state = IteratorState.ITERATING;\n    }\n    assert in.docID() == advanced;\n    return doc = advanced;\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    return docsEnumIn.advance(target);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#advance(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    assert state != IteratorState.FINISHED : \"advance() called after NO_MORE_DOCS\";\n    assert target > doc : \"target must be > docID(), got \" + target + \" <= \" + doc;\n    int advanced = in.advance(target);\n    assert advanced >= target : \"backwards advance from: \" + target + \" to: \" + advanced;\n    if (advanced == DocIdSetIterator.NO_MORE_DOCS) {\n      state = IteratorState.FINISHED;\n    } else {\n      state = IteratorState.ITERATING;\n    }\n    assert in.docID() == advanced;\n    return doc = advanced;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"66ad19eb69be5720d673695d38a1f5a0fed70c06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["66ad19eb69be5720d673695d38a1f5a0fed70c06"],"449f2318aa7f06ce3bce9031e402201231cb781e":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dd748bb245633a8195281556bb0e68a6ea97d18":["449f2318aa7f06ce3bce9031e402201231cb781e"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["66ad19eb69be5720d673695d38a1f5a0fed70c06","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"66ad19eb69be5720d673695d38a1f5a0fed70c06":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"449f2318aa7f06ce3bce9031e402201231cb781e":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66ad19eb69be5720d673695d38a1f5a0fed70c06"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["449f2318aa7f06ce3bce9031e402201231cb781e"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}