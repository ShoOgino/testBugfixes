{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","sourceNew":"  private void finishDocument(Term delTerm) throws IOException {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    if (deleteSlice == null) {\n      deleteSlice = deleteQueue.newSlice();\n      if (delTerm != null) {\n        deleteQueue.add(delTerm, deleteSlice);\n        deleteSlice.reset();\n      }\n      \n    } else {\n      if (delTerm != null) {\n        deleteQueue.add(delTerm, deleteSlice);\n        assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n        deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      } else if (deleteQueue.updateSlice(deleteSlice)) {\n        deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      }\n    }\n    ++numDocsInRAM;\n  }\n\n","sourceOld":"  private void finishDocument(Term delTerm) throws IOException {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    if (deleteSlice == null) {\n      deleteSlice = deleteQueue.newSlice();\n      if (delTerm != null) {\n        deleteQueue.add(delTerm, deleteSlice);\n        deleteSlice.reset();\n      }\n      \n    } else {\n      if (delTerm != null) {\n        deleteQueue.add(delTerm, deleteSlice);\n        assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n        deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      } else if (deleteQueue.updateSlice(deleteSlice)) {\n        deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      }\n    }\n    ++numDocsInRAM;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","sourceNew":"  private void finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    if (deleteSlice == null) {\n      deleteSlice = deleteQueue.newSlice();\n      if (delTerm != null) {\n        deleteQueue.add(delTerm, deleteSlice);\n        deleteSlice.reset();\n      }\n      \n    } else {\n      if (delTerm != null) {\n        deleteQueue.add(delTerm, deleteSlice);\n        assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n        deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      } else if (deleteQueue.updateSlice(deleteSlice)) {\n        deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      }\n    }\n    ++numDocsInRAM;\n  }\n\n","sourceOld":"  private void finishDocument(Term delTerm) throws IOException {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    if (deleteSlice == null) {\n      deleteSlice = deleteQueue.newSlice();\n      if (delTerm != null) {\n        deleteQueue.add(delTerm, deleteSlice);\n        deleteSlice.reset();\n      }\n      \n    } else {\n      if (delTerm != null) {\n        deleteQueue.add(delTerm, deleteSlice);\n        assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n        deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      } else if (deleteQueue.updateSlice(deleteSlice)) {\n        deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      }\n    }\n    ++numDocsInRAM;\n  }\n\n","bugFix":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","sourceNew":"  private void finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    if (deleteSlice == null) {\n      deleteSlice = deleteQueue.newSlice();\n      if (delTerm != null) {\n        deleteQueue.add(delTerm, deleteSlice);\n        deleteSlice.reset();\n      }\n      \n    } else {\n      if (delTerm != null) {\n        deleteQueue.add(delTerm, deleteSlice);\n        assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n        deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      } else if (deleteQueue.updateSlice(deleteSlice)) {\n        deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      }\n    }\n    ++numDocsInRAM;\n  }\n\n","sourceOld":"  private void finishDocument(Term delTerm) throws IOException {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    if (deleteSlice == null) {\n      deleteSlice = deleteQueue.newSlice();\n      if (delTerm != null) {\n        deleteQueue.add(delTerm, deleteSlice);\n        deleteSlice.reset();\n      }\n      \n    } else {\n      if (delTerm != null) {\n        deleteQueue.add(delTerm, deleteSlice);\n        assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n        deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      } else if (deleteQueue.updateSlice(deleteSlice)) {\n        deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      }\n    }\n    ++numDocsInRAM;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","sourceNew":"  private void finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    if (delTerm != null) {\n      deleteQueue.add(delTerm, deleteSlice);\n      assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n    } else  {\n      applySlice &= deleteQueue.updateSlice(deleteSlice);\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingDeletes, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n  }\n\n","sourceOld":"  private void finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    if (deleteSlice == null) {\n      deleteSlice = deleteQueue.newSlice();\n      if (delTerm != null) {\n        deleteQueue.add(delTerm, deleteSlice);\n        deleteSlice.reset();\n      }\n      \n    } else {\n      if (delTerm != null) {\n        deleteQueue.add(delTerm, deleteSlice);\n        assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n        deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      } else if (deleteQueue.updateSlice(deleteSlice)) {\n        deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      }\n    }\n    ++numDocsInRAM;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","sourceNew":"  private void finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    if (delTerm != null) {\n      deleteQueue.add(delTerm, deleteSlice);\n      assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n    } else  {\n      applySlice &= deleteQueue.updateSlice(deleteSlice);\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingDeletes, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n  }\n\n","sourceOld":"  private void finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    if (deleteSlice == null) {\n      deleteSlice = deleteQueue.newSlice();\n      if (delTerm != null) {\n        deleteQueue.add(delTerm, deleteSlice);\n        deleteSlice.reset();\n      }\n      \n    } else {\n      if (delTerm != null) {\n        deleteQueue.add(delTerm, deleteSlice);\n        assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n        deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      } else if (deleteQueue.updateSlice(deleteSlice)) {\n        deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      }\n    }\n    ++numDocsInRAM;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","sourceNew":"  private void finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    if (delTerm != null) {\n      deleteQueue.add(delTerm, deleteSlice);\n      assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n    } else  {\n      applySlice &= deleteQueue.updateSlice(deleteSlice);\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingDeletes, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n  }\n\n","sourceOld":"  private void finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    if (deleteSlice == null) {\n      deleteSlice = deleteQueue.newSlice();\n      if (delTerm != null) {\n        deleteQueue.add(delTerm, deleteSlice);\n        deleteSlice.reset();\n      }\n      \n    } else {\n      if (delTerm != null) {\n        deleteQueue.add(delTerm, deleteSlice);\n        assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n        deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      } else if (deleteQueue.updateSlice(deleteSlice)) {\n        deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      }\n    }\n    ++numDocsInRAM;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","sourceNew":"  private void finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    if (delTerm != null) {\n      deleteQueue.add(delTerm, deleteSlice);\n      assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n    } else  {\n      applySlice &= deleteQueue.updateSlice(deleteSlice);\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n  }\n\n","sourceOld":"  private void finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    if (delTerm != null) {\n      deleteQueue.add(delTerm, deleteSlice);\n      assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n    } else  {\n      applySlice &= deleteQueue.updateSlice(deleteSlice);\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingDeletes, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f492fe129985750df09c8dac738aecc503158bb3","date":1464099630,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","sourceNew":"  private long finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    long seqNo;\n    if (delTerm != null) {\n      seqNo = deleteQueue.add(delTerm, deleteSlice);\n      assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n    } else  {\n      applySlice &= deleteQueue.updateSlice(deleteSlice);\n      // nocommit we don't need to increment here?\n      seqNo = deleteQueue.seqNo.get();\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n\n    return seqNo;\n  }\n\n","sourceOld":"  private void finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    if (delTerm != null) {\n      deleteQueue.add(delTerm, deleteSlice);\n      assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n    } else  {\n      applySlice &= deleteQueue.updateSlice(deleteSlice);\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f6df47cbfd656ea50ca2996361f7954531ee18b","date":1464133540,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","sourceNew":"  private long finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    long seqNo;\n    if (delTerm != null) {\n      seqNo = deleteQueue.add(delTerm, deleteSlice);\n      assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n    } else  {\n      applySlice &= deleteQueue.updateSlice(deleteSlice);\n      seqNo = deleteQueue.seqNo.get();\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n\n    return seqNo;\n  }\n\n","sourceOld":"  private long finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    long seqNo;\n    if (delTerm != null) {\n      seqNo = deleteQueue.add(delTerm, deleteSlice);\n      assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n    } else  {\n      applySlice &= deleteQueue.updateSlice(deleteSlice);\n      // nocommit we don't need to increment here?\n      seqNo = deleteQueue.seqNo.get();\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n\n    return seqNo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16ebfabc294f23b88b6a39722a02c9d39b353195","date":1464343867,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","sourceNew":"  private long finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    long seqNo;\n    if (delTerm != null) {\n      seqNo = deleteQueue.add(delTerm, deleteSlice);\n      assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n    } else  {\n      applySlice &= deleteQueue.updateSlice(deleteSlice);\n      seqNo = deleteQueue.getNextSequenceNumber();\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n\n    return seqNo;\n  }\n\n","sourceOld":"  private long finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    long seqNo;\n    if (delTerm != null) {\n      seqNo = deleteQueue.add(delTerm, deleteSlice);\n      assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n    } else  {\n      applySlice &= deleteQueue.updateSlice(deleteSlice);\n      seqNo = deleteQueue.seqNo.get();\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n\n    return seqNo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"122251c49e5a9fa95f056ea257ae3ab452099fc7","date":1464820065,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","sourceNew":"  private long finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    long seqNo;\n    if (delTerm != null) {\n      seqNo = deleteQueue.add(delTerm, deleteSlice);\n      assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n    } else  {\n      seqNo = deleteQueue.updateSlice(deleteSlice);\n      \n      if (seqNo < 0) {\n        seqNo = -seqNo;\n      } else {\n        applySlice = false;\n      }\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n\n    return seqNo;\n  }\n\n","sourceOld":"  private long finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    long seqNo;\n    if (delTerm != null) {\n      seqNo = deleteQueue.add(delTerm, deleteSlice);\n      assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n    } else  {\n      applySlice &= deleteQueue.updateSlice(deleteSlice);\n      seqNo = deleteQueue.getNextSequenceNumber();\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n\n    return seqNo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","sourceNew":"  private long finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    long seqNo;\n    if (delTerm != null) {\n      seqNo = deleteQueue.add(delTerm, deleteSlice);\n      assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n    } else  {\n      seqNo = deleteQueue.updateSlice(deleteSlice);\n      \n      if (seqNo < 0) {\n        seqNo = -seqNo;\n      } else {\n        applySlice = false;\n      }\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n\n    return seqNo;\n  }\n\n","sourceOld":"  private long finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    long seqNo;\n    if (delTerm != null) {\n      seqNo = deleteQueue.add(delTerm, deleteSlice);\n      assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n    } else  {\n      applySlice &= deleteQueue.updateSlice(deleteSlice);\n      seqNo = deleteQueue.getNextSequenceNumber();\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n\n    return seqNo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6483e4260c08168709c02238ae083a51519a28dd","date":1465117546,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","sourceNew":"  private long finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    long seqNo;\n    if (delTerm != null) {\n      seqNo = deleteQueue.add(delTerm, deleteSlice);\n      assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n    } else  {\n      seqNo = deleteQueue.updateSlice(deleteSlice);\n      \n      if (seqNo < 0) {\n        seqNo = -seqNo;\n      } else {\n        applySlice = false;\n      }\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n\n    return seqNo;\n  }\n\n","sourceOld":"  private void finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    if (delTerm != null) {\n      deleteQueue.add(delTerm, deleteSlice);\n      assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n    } else  {\n      applySlice &= deleteQueue.updateSlice(deleteSlice);\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","sourceNew":"  private long finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    long seqNo;\n    if (delTerm != null) {\n      seqNo = deleteQueue.add(delTerm, deleteSlice);\n      assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n    } else  {\n      seqNo = deleteQueue.updateSlice(deleteSlice);\n      \n      if (seqNo < 0) {\n        seqNo = -seqNo;\n      } else {\n        applySlice = false;\n      }\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n\n    return seqNo;\n  }\n\n","sourceOld":"  private void finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    if (delTerm != null) {\n      deleteQueue.add(delTerm, deleteSlice);\n      assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n    } else  {\n      applySlice &= deleteQueue.updateSlice(deleteSlice);\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","sourceNew":"  private long finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    long seqNo;\n    if (delTerm != null) {\n      seqNo = deleteQueue.add(delTerm, deleteSlice);\n      assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n    } else  {\n      seqNo = deleteQueue.updateSlice(deleteSlice);\n      \n      if (seqNo < 0) {\n        seqNo = -seqNo;\n      } else {\n        applySlice = false;\n      }\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n\n    return seqNo;\n  }\n\n","sourceOld":"  private void finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    if (delTerm != null) {\n      deleteQueue.add(delTerm, deleteSlice);\n      assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n    } else  {\n      applySlice &= deleteQueue.updateSlice(deleteSlice);\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"110125c995236a7f61057dd04b039ed2d267f3a1","date":1521014987,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(DocumentsWriterDeleteQueue.Node[#]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#finishDocument(Term).mjava","sourceNew":"  private long finishDocument(DocumentsWriterDeleteQueue.Node<?> deleteNode) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    long seqNo;\n    if (deleteNode != null) {\n      seqNo = deleteQueue.add(deleteNode, deleteSlice);\n      assert deleteSlice.isTail(deleteNode) : \"expected the delete node as the tail\";\n    } else  {\n      seqNo = deleteQueue.updateSlice(deleteSlice);\n      \n      if (seqNo < 0) {\n        seqNo = -seqNo;\n      } else {\n        applySlice = false;\n      }\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n\n    return seqNo;\n  }\n\n","sourceOld":"  private long finishDocument(Term delTerm) {\n    /*\n     * here we actually finish the document in two steps 1. push the delete into\n     * the queue and update our slice. 2. increment the DWPT private document\n     * id.\n     * \n     * the updated slice we get from 1. holds all the deletes that have occurred\n     * since we updated the slice the last time.\n     */\n    boolean applySlice = numDocsInRAM != 0;\n    long seqNo;\n    if (delTerm != null) {\n      seqNo = deleteQueue.add(delTerm, deleteSlice);\n      assert deleteSlice.isTailItem(delTerm) : \"expected the delete term as the tail item\";\n    } else  {\n      seqNo = deleteQueue.updateSlice(deleteSlice);\n      \n      if (seqNo < 0) {\n        seqNo = -seqNo;\n      } else {\n        applySlice = false;\n      }\n    }\n    \n    if (applySlice) {\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n    } else { // if we don't need to apply we must reset!\n      deleteSlice.reset();\n    }\n    ++numDocsInRAM;\n\n    return seqNo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["7af110b00ea8df9429309d83e38e0533d82e144f"],"7af110b00ea8df9429309d83e38e0533d82e144f":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7af110b00ea8df9429309d83e38e0533d82e144f"],"6483e4260c08168709c02238ae083a51519a28dd":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"191128ac5b85671b1671e2c857437694283b6ebf":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","6483e4260c08168709c02238ae083a51519a28dd"],"110125c995236a7f61057dd04b039ed2d267f3a1":["191128ac5b85671b1671e2c857437694283b6ebf"],"16ebfabc294f23b88b6a39722a02c9d39b353195":["0f6df47cbfd656ea50ca2996361f7954531ee18b"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["16ebfabc294f23b88b6a39722a02c9d39b353195","122251c49e5a9fa95f056ea257ae3ab452099fc7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","191128ac5b85671b1671e2c857437694283b6ebf"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f492fe129985750df09c8dac738aecc503158bb3":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0f6df47cbfd656ea50ca2996361f7954531ee18b":["f492fe129985750df09c8dac738aecc503158bb3"],"122251c49e5a9fa95f056ea257ae3ab452099fc7":["16ebfabc294f23b88b6a39722a02c9d39b353195"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["110125c995236a7f61057dd04b039ed2d267f3a1"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["6483e4260c08168709c02238ae083a51519a28dd","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f492fe129985750df09c8dac738aecc503158bb3"],"7af110b00ea8df9429309d83e38e0533d82e144f":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"6483e4260c08168709c02238ae083a51519a28dd":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["110125c995236a7f61057dd04b039ed2d267f3a1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"110125c995236a7f61057dd04b039ed2d267f3a1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"16ebfabc294f23b88b6a39722a02c9d39b353195":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","122251c49e5a9fa95f056ea257ae3ab452099fc7"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["6483e4260c08168709c02238ae083a51519a28dd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f492fe129985750df09c8dac738aecc503158bb3":["0f6df47cbfd656ea50ca2996361f7954531ee18b"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"0f6df47cbfd656ea50ca2996361f7954531ee18b":["16ebfabc294f23b88b6a39722a02c9d39b353195"],"122251c49e5a9fa95f056ea257ae3ab452099fc7":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}