{"path":"solr/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","commits":[{"id":"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34","date":1309197122,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","pathOld":"/dev/null","sourceNew":"  public void testCaching() throws Exception {\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","pathOld":"/dev/null","sourceNew":"  public void testCaching() throws Exception {\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","pathOld":"/dev/null","sourceNew":"  public void testCaching() throws Exception {\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","sourceNew":"  public void testCaching() throws Exception {\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n  }\n\n","sourceOld":"  public void testCaching() throws Exception {\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","sourceNew":"  public void testCaching() throws Exception {\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n  }\n\n","sourceOld":"  public void testCaching() throws Exception {\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFiltering#testCaching().mjava","sourceNew":"  public void testCaching() throws Exception {\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n  }\n\n","sourceOld":"  public void testCaching() throws Exception {\n    assertU(adoc(\"id\",\"4\", \"val_i\",\"1\"));\n    assertU(adoc(\"id\",\"1\", \"val_i\",\"2\"));\n    assertU(adoc(\"id\",\"3\", \"val_i\",\"3\"));\n    assertU(adoc(\"id\",\"2\", \"val_i\",\"4\"));\n    assertU(commit());\n\n    int prevCount;\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // The exact same query the second time will be cached by the queryCache\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=3 cache=false cost=100}val_i\")\n        ,\"/response/numFound==2\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=4}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"q\",\"*:*\", \"fq\",\"{!frange l=2 u=5 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n    // now re-do the same tests w/ faceting on to get the full docset\n\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // since we need the docset and the filter was not cached, the collector will need to be used again\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=6 cache=false cost=100}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(1, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // cache is true by default\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=7}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n    // default cost avoids post filtering\n    prevCount = DelegatingCollector.setLastDelegateCount;\n    assertJQ(req(\"facet\",\"true\", \"facet.field\",\"id\", \"q\",\"*:*\", \"fq\",\"{!frange l=2 u=8 cache=false}val_i\")\n        ,\"/response/numFound==3\"\n    );\n    assertEquals(0, DelegatingCollector.setLastDelegateCount - prevCount);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"c26f00b574427b55127e869b935845554afde1fa":["f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"],"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34":["c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}