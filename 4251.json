{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.FailTwiceDuringMerge#eval(MockDirectoryWrapper).mjava","commits":[{"id":"84b590669deb3d3a471cec6cb13b104b2ee94418","date":1288889547,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.FailTwiceDuringMerge#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailTwiceDuringMerge#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (!doFail) {\n        return;\n      }\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentMerger\".equals(trace[i].getClassName()) && \"mergeTerms\".equals(trace[i].getMethodName()) && !didFail1) {\n          didFail1 = true;\n          throw new IOException(\"fake disk full during mergeTerms\");\n        }\n        if (\"org.apache.lucene.util.BitVector\".equals(trace[i].getClassName()) && \"write\".equals(trace[i].getMethodName()) && !didFail2) {\n          didFail2 = true;\n          throw new IOException(\"fake disk full while writing BitVector\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (!doFail) {\n        return;\n      }\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentMerger\".equals(trace[i].getClassName()) && \"mergeTerms\".equals(trace[i].getMethodName()) && !didFail1) {\n          didFail1 = true;\n          throw new IOException(\"fake disk full during mergeTerms\");\n        }\n        if (\"org.apache.lucene.util.BitVector\".equals(trace[i].getClassName()) && \"write\".equals(trace[i].getMethodName()) && !didFail2) {\n          didFail2 = true;\n          throw new IOException(\"fake disk full while writing BitVector\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.FailTwiceDuringMerge#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailTwiceDuringMerge#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (!doFail) {\n        return;\n      }\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentMerger\".equals(trace[i].getClassName()) && \"mergeTerms\".equals(trace[i].getMethodName()) && !didFail1) {\n          didFail1 = true;\n          throw new IOException(\"fake disk full during mergeTerms\");\n        }\n        if (\"org.apache.lucene.util.BitVector\".equals(trace[i].getClassName()) && \"write\".equals(trace[i].getMethodName()) && !didFail2) {\n          didFail2 = true;\n          throw new IOException(\"fake disk full while writing BitVector\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (!doFail) {\n        return;\n      }\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentMerger\".equals(trace[i].getClassName()) && \"mergeTerms\".equals(trace[i].getMethodName()) && !didFail1) {\n          didFail1 = true;\n          throw new IOException(\"fake disk full during mergeTerms\");\n        }\n        if (\"org.apache.lucene.util.BitVector\".equals(trace[i].getClassName()) && \"write\".equals(trace[i].getMethodName()) && !didFail2) {\n          didFail2 = true;\n          throw new IOException(\"fake disk full while writing BitVector\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.FailTwiceDuringMerge#eval(MockDirectoryWrapper).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (!doFail) {\n        return;\n      }\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentMerger\".equals(trace[i].getClassName()) && \"mergeTerms\".equals(trace[i].getMethodName()) && !didFail1) {\n          didFail1 = true;\n          throw new IOException(\"fake disk full during mergeTerms\");\n        }\n        if (\"org.apache.lucene.util.BitVector\".equals(trace[i].getClassName()) && \"write\".equals(trace[i].getMethodName()) && !didFail2) {\n          didFail2 = true;\n          throw new IOException(\"fake disk full while writing BitVector\");\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6845a8d2b886ea5c45329b6dc67220ea6dbbe67a","date":1326999455,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.FailTwiceDuringMerge#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.FailTwiceDuringMerge#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (!doFail) {\n        return;\n      }\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        if (SegmentMerger.class.getName().equals(trace[i].getClassName()) && \"mergeTerms\".equals(trace[i].getMethodName()) && !didFail1) {\n          didFail1 = true;\n          throw new IOException(\"fake disk full during mergeTerms\");\n        }\n        if (LiveDocsFormat.class.getName().equals(trace[i].getClassName()) && \"writeLiveDocs\".equals(trace[i].getMethodName()) && !didFail2) {\n          didFail2 = true;\n          throw new IOException(\"fake disk full while writing LiveDocs\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (!doFail) {\n        return;\n      }\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentMerger\".equals(trace[i].getClassName()) && \"mergeTerms\".equals(trace[i].getMethodName()) && !didFail1) {\n          didFail1 = true;\n          throw new IOException(\"fake disk full during mergeTerms\");\n        }\n        if (\"org.apache.lucene.util.BitVector\".equals(trace[i].getClassName()) && \"write\".equals(trace[i].getMethodName()) && !didFail2) {\n          didFail2 = true;\n          throw new IOException(\"fake disk full while writing BitVector\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.FailTwiceDuringMerge#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.FailTwiceDuringMerge#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (!doFail) {\n        return;\n      }\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        if (SegmentMerger.class.getName().equals(trace[i].getClassName()) && \"mergeTerms\".equals(trace[i].getMethodName()) && !didFail1) {\n          didFail1 = true;\n          throw new IOException(\"fake disk full during mergeTerms\");\n        }\n        if (LiveDocsFormat.class.getName().equals(trace[i].getClassName()) && \"writeLiveDocs\".equals(trace[i].getMethodName()) && !didFail2) {\n          didFail2 = true;\n          throw new IOException(\"fake disk full while writing LiveDocs\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (!doFail) {\n        return;\n      }\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentMerger\".equals(trace[i].getClassName()) && \"mergeTerms\".equals(trace[i].getMethodName()) && !didFail1) {\n          didFail1 = true;\n          throw new IOException(\"fake disk full during mergeTerms\");\n        }\n        if (\"org.apache.lucene.util.BitVector\".equals(trace[i].getClassName()) && \"write\".equals(trace[i].getMethodName()) && !didFail2) {\n          didFail2 = true;\n          throw new IOException(\"fake disk full while writing BitVector\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.FailTwiceDuringMerge#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.FailTwiceDuringMerge#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (!doFail) {\n        return;\n      }\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        if (SegmentMerger.class.getName().equals(trace[i].getClassName()) && \"mergeTerms\".equals(trace[i].getMethodName()) && !didFail1) {\n          didFail1 = true;\n          throw new IOException(\"fake disk full during mergeTerms\");\n        }\n        if (LiveDocsFormat.class.getName().equals(trace[i].getClassName()) && \"writeLiveDocs\".equals(trace[i].getMethodName()) && !didFail2) {\n          didFail2 = true;\n          throw new IOException(\"fake disk full while writing LiveDocs\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (!doFail) {\n        return;\n      }\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentMerger\".equals(trace[i].getClassName()) && \"mergeTerms\".equals(trace[i].getMethodName()) && !didFail1) {\n          didFail1 = true;\n          throw new IOException(\"fake disk full during mergeTerms\");\n        }\n        if (\"org.apache.lucene.util.BitVector\".equals(trace[i].getClassName()) && \"write\".equals(trace[i].getMethodName()) && !didFail2) {\n          didFail2 = true;\n          throw new IOException(\"fake disk full while writing BitVector\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.FailTwiceDuringMerge#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull.FailTwiceDuringMerge#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (!doFail) {\n        return;\n      }\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        if (SegmentMerger.class.getName().equals(trace[i].getClassName()) && \"mergeTerms\".equals(trace[i].getMethodName()) && !didFail1) {\n          didFail1 = true;\n          throw new IOException(\"fake disk full during mergeTerms\");\n        }\n        if (LiveDocsFormat.class.getName().equals(trace[i].getClassName()) && \"writeLiveDocs\".equals(trace[i].getMethodName()) && !didFail2) {\n          didFail2 = true;\n          throw new IOException(\"fake disk full while writing LiveDocs\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (!doFail) {\n        return;\n      }\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        if (SegmentMerger.class.getName().equals(trace[i].getClassName()) && \"mergeTerms\".equals(trace[i].getMethodName()) && !didFail1) {\n          didFail1 = true;\n          throw new IOException(\"fake disk full during mergeTerms\");\n        }\n        if (LiveDocsFormat.class.getName().equals(trace[i].getClassName()) && \"writeLiveDocs\".equals(trace[i].getMethodName()) && !didFail2) {\n          didFail2 = true;\n          throw new IOException(\"fake disk full while writing LiveDocs\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84b590669deb3d3a471cec6cb13b104b2ee94418":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6845a8d2b886ea5c45329b6dc67220ea6dbbe67a":["84b590669deb3d3a471cec6cb13b104b2ee94418"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","84b590669deb3d3a471cec6cb13b104b2ee94418"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["84b590669deb3d3a471cec6cb13b104b2ee94418","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["84b590669deb3d3a471cec6cb13b104b2ee94418","6845a8d2b886ea5c45329b6dc67220ea6dbbe67a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","84b590669deb3d3a471cec6cb13b104b2ee94418"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"84b590669deb3d3a471cec6cb13b104b2ee94418":["6845a8d2b886ea5c45329b6dc67220ea6dbbe67a","85a883878c0af761245ab048babc63d099f835f3","fd92b8bcc88e969302510acf77bd6970da3994c4","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"6845a8d2b886ea5c45329b6dc67220ea6dbbe67a":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84b590669deb3d3a471cec6cb13b104b2ee94418","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"85a883878c0af761245ab048babc63d099f835f3":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fd92b8bcc88e969302510acf77bd6970da3994c4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","fd92b8bcc88e969302510acf77bd6970da3994c4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}