{"path":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","commits":[{"id":"81a4a1810b619aea1d002a09c1878b498e20bf33","date":1361142322,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = atLeast(3);\n    \n    // create the cores\n    createCores(server, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = random().nextInt(12) + 1;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c8567c25c02eeeb3e719841606a1269f3538ca","date":1361155063,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = atLeast(3);\n    \n    // create the cores\n    createCores(server, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = random().nextInt(12) + 1;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c7856260bc28f285ae7bfefa99b28db4dca6daf","date":1395253500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = atLeast(3);\n    \n    // create the cores\n    createCores(server, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    server.shutdown();\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = atLeast(3);\n    \n    // create the cores\n    createCores(server, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrClient client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrClient adminClient = new HttpSolrClient(url3);\n    adminClient.setConnectionTimeout(15000);\n    adminClient.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = atLeast(3);\n    \n    // create the cores\n    createCores(adminClient, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            adminClient.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    adminClient.shutdown();\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = atLeast(3);\n    \n    // create the cores\n    createCores(server, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    server.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrClient client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrClient adminClient = new HttpSolrClient(url3);\n    adminClient.setConnectionTimeout(15000);\n    adminClient.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = atLeast(3);\n    \n    // create the cores\n    createCores(adminClient, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            adminClient.request(unloadCmd);\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    adminClient.shutdown();\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrClient client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrClient adminClient = new HttpSolrClient(url3);\n    adminClient.setConnectionTimeout(15000);\n    adminClient.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = atLeast(3);\n    \n    // create the cores\n    createCores(adminClient, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            adminClient.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    adminClient.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrClient client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient adminClient = new HttpSolrClient(url3)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      int cnt = atLeast(3);\n\n      // create the cores\n      createCores(adminClient, executor, \"multiunload\", 2, cnt);\n\n      executor.shutdown();\n      executor.awaitTermination(120, TimeUnit.SECONDS);\n      executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      for (int j = 0; j < cnt; j++) {\n        final int freezeJ = j;\n        executor.execute(new Runnable() {\n          @Override\n          public void run() {\n            Unload unloadCmd = new Unload(true);\n            unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n            try {\n              adminClient.request(unloadCmd);\n            } catch (SolrServerException | IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        });\n        Thread.sleep(random().nextInt(50));\n      }\n      executor.shutdown();\n      executor.awaitTermination(120, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrClient client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrClient adminClient = new HttpSolrClient(url3);\n    adminClient.setConnectionTimeout(15000);\n    adminClient.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = atLeast(3);\n    \n    // create the cores\n    createCores(adminClient, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            adminClient.request(unloadCmd);\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    adminClient.shutdown();\n  }\n\n","bugFix":null,"bugIntro":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cb5af3afeddbb803fb785098176e6e177c34261b","date":1428905393,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrClient client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient adminClient = new HttpSolrClient(url3)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      int cnt = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCores(adminClient, executor, \"multiunload\", 2, cnt);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor, 120, TimeUnit.SECONDS);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < cnt; j++) {\n          final int freezeJ = j;\n          executor.execute(new Runnable() {\n            @Override\n            public void run() {\n              Unload unloadCmd = new Unload(true);\n              unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n              try {\n                adminClient.request(unloadCmd);\n              } catch (SolrServerException | IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor, 120, TimeUnit.SECONDS);\n      }\n    }\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrClient client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient adminClient = new HttpSolrClient(url3)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      int cnt = atLeast(3);\n\n      // create the cores\n      createCores(adminClient, executor, \"multiunload\", 2, cnt);\n\n      executor.shutdown();\n      executor.awaitTermination(120, TimeUnit.SECONDS);\n      executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      for (int j = 0; j < cnt; j++) {\n        final int freezeJ = j;\n        executor.execute(new Runnable() {\n          @Override\n          public void run() {\n            Unload unloadCmd = new Unload(true);\n            unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n            try {\n              adminClient.request(unloadCmd);\n            } catch (SolrServerException | IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        });\n        Thread.sleep(random().nextInt(50));\n      }\n      executor.shutdown();\n      executor.awaitTermination(120, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":["275019a81d0883a1db4560391b072d1fbe272ec4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"275019a81d0883a1db4560391b072d1fbe272ec4","date":1432741049,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrClient client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient adminClient = new HttpSolrClient(url3)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      int cnt = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCores(adminClient, executor, \"multiunload\", 2, cnt);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < cnt; j++) {\n          final int freezeJ = j;\n          executor.execute(new Runnable() {\n            @Override\n            public void run() {\n              Unload unloadCmd = new Unload(true);\n              unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n              try {\n                adminClient.request(unloadCmd);\n              } catch (SolrServerException | IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n    }\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrClient client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient adminClient = new HttpSolrClient(url3)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      int cnt = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCores(adminClient, executor, \"multiunload\", 2, cnt);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor, 120, TimeUnit.SECONDS);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < cnt; j++) {\n          final int freezeJ = j;\n          executor.execute(new Runnable() {\n            @Override\n            public void run() {\n              Unload unloadCmd = new Unload(true);\n              unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n              try {\n                adminClient.request(unloadCmd);\n              } catch (SolrServerException | IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor, 120, TimeUnit.SECONDS);\n      }\n    }\n  }\n\n","bugFix":["cb5af3afeddbb803fb785098176e6e177c34261b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrClient client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient adminClient = new HttpSolrClient(url3)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      int cnt = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCores(adminClient, executor, \"multiunload\", 2, cnt);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < cnt; j++) {\n          final int freezeJ = j;\n          executor.execute(() -> {\n            Unload unloadCmd = new Unload(true);\n            unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n            try {\n              adminClient.request(unloadCmd);\n            } catch (SolrServerException | IOException e) {\n              throw new RuntimeException(e);\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n    }\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrClient client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient adminClient = new HttpSolrClient(url3)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      int cnt = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCores(adminClient, executor, \"multiunload\", 2, cnt);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < cnt; j++) {\n          final int freezeJ = j;\n          executor.execute(new Runnable() {\n            @Override\n            public void run() {\n              Unload unloadCmd = new Unload(true);\n              unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n              try {\n                adminClient.request(unloadCmd);\n              } catch (SolrServerException | IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrClient client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient adminClient = getHttpSolrClient(url3)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      int cnt = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCores(adminClient, executor, \"multiunload\", 2, cnt);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < cnt; j++) {\n          final int freezeJ = j;\n          executor.execute(() -> {\n            Unload unloadCmd = new Unload(true);\n            unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n            try {\n              adminClient.request(unloadCmd);\n            } catch (SolrServerException | IOException e) {\n              throw new RuntimeException(e);\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n    }\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrClient client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient adminClient = new HttpSolrClient(url3)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      int cnt = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCores(adminClient, executor, \"multiunload\", 2, cnt);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < cnt; j++) {\n          final int freezeJ = j;\n          executor.execute(() -> {\n            Unload unloadCmd = new Unload(true);\n            unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n            try {\n              adminClient.request(unloadCmd);\n            } catch (SolrServerException | IOException e) {\n              throw new RuntimeException(e);\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrClient client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient adminClient = getHttpSolrClient(url3)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      int cnt = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCores(adminClient, executor, \"multiunload\", 2, cnt);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < cnt; j++) {\n          final int freezeJ = j;\n          executor.execute(() -> {\n            Unload unloadCmd = new Unload(true);\n            unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n            try {\n              adminClient.request(unloadCmd);\n            } catch (SolrServerException | IOException e) {\n              throw new RuntimeException(e);\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n    }\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrClient client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient adminClient = new HttpSolrClient(url3)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      int cnt = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCores(adminClient, executor, \"multiunload\", 2, cnt);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < cnt; j++) {\n          final int freezeJ = j;\n          executor.execute(() -> {\n            Unload unloadCmd = new Unload(true);\n            unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n            try {\n              adminClient.request(unloadCmd);\n            } catch (SolrServerException | IOException e) {\n              throw new RuntimeException(e);\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    JettySolrRunner jetty = jettys.get(0);\n    try (final HttpSolrClient adminClient = (HttpSolrClient) jetty.newClient()) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      int numReplicas = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCollectionInOneInstance(adminClient, jetty.getNodeName(), executor, \"multiunload\", 2, numReplicas);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < numReplicas; j++) {\n          final int freezeJ = j;\n          executor.execute(() -> {\n            Unload unloadCmd = new Unload(true);\n            unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n            try {\n              adminClient.request(unloadCmd);\n            } catch (SolrServerException | IOException e) {\n              throw new RuntimeException(e);\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n    }\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrClient client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient adminClient = getHttpSolrClient(url3)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      int cnt = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCores(adminClient, executor, \"multiunload\", 2, cnt);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < cnt; j++) {\n          final int freezeJ = j;\n          executor.execute(() -> {\n            Unload unloadCmd = new Unload(true);\n            unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n            try {\n              adminClient.request(unloadCmd);\n            } catch (SolrServerException | IOException e) {\n              throw new RuntimeException(e);\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    JettySolrRunner jetty = jettys.get(0);\n    try (final HttpSolrClient adminClient = (HttpSolrClient) jetty.newClient()) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      int numReplicas = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCollectionInOneInstance(adminClient, jetty.getNodeName(), executor, \"multiunload\", 2, numReplicas);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < numReplicas; j++) {\n          final int freezeJ = j;\n          executor.execute(() -> {\n            Unload unloadCmd = new Unload(true);\n            unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n            try {\n              adminClient.request(unloadCmd);\n            } catch (SolrServerException | IOException e) {\n              throw new RuntimeException(e);\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n    }\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrClient client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient adminClient = getHttpSolrClient(url3)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      int cnt = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCores(adminClient, executor, \"multiunload\", 2, cnt);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < cnt; j++) {\n          final int freezeJ = j;\n          executor.execute(() -> {\n            Unload unloadCmd = new Unload(true);\n            unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n            try {\n              adminClient.request(unloadCmd);\n            } catch (SolrServerException | IOException e) {\n              throw new RuntimeException(e);\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    JettySolrRunner jetty = jettys.get(0);\n    try (final HttpSolrClient adminClient = (HttpSolrClient) jetty.newClient()) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      int numReplicas = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCollectionInOneInstance(adminClient, jetty.getNodeName(), executor, \"multiunload\", 2, numReplicas);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < numReplicas; j++) {\n          final int freezeJ = j;\n          executor.execute(() -> {\n            Unload unloadCmd = new Unload(true);\n            unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n            try {\n              adminClient.request(unloadCmd);\n            } catch (SolrServerException | IOException e) {\n              throw new RuntimeException(e);\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n    }\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrClient client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    try (final HttpSolrClient adminClient = getHttpSolrClient(url3)) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      int cnt = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCores(adminClient, executor, \"multiunload\", 2, cnt);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < cnt; j++) {\n          final int freezeJ = j;\n          executor.execute(() -> {\n            Unload unloadCmd = new Unload(true);\n            unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n            try {\n              adminClient.request(unloadCmd);\n            } catch (SolrServerException | IOException e) {\n              throw new RuntimeException(e);\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    JettySolrRunner jetty = jettys.get(0);\n    try (final HttpSolrClient adminClient = (HttpSolrClient) jetty.newClient(15000, 60000)) {\n      int numReplicas = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCollectionInOneInstance(adminClient, jetty.getNodeName(), executor, \"multiunload\", 2, numReplicas);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < numReplicas; j++) {\n          final int freezeJ = j;\n          executor.execute(() -> {\n            Unload unloadCmd = new Unload(true);\n            unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n            try {\n              adminClient.request(unloadCmd);\n            } catch (SolrServerException | IOException e) {\n              throw new RuntimeException(e);\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n    }\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    JettySolrRunner jetty = jettys.get(0);\n    try (final HttpSolrClient adminClient = (HttpSolrClient) jetty.newClient()) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      int numReplicas = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCollectionInOneInstance(adminClient, jetty.getNodeName(), executor, \"multiunload\", 2, numReplicas);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < numReplicas; j++) {\n          final int freezeJ = j;\n          executor.execute(() -> {\n            Unload unloadCmd = new Unload(true);\n            unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n            try {\n              adminClient.request(unloadCmd);\n            } catch (SolrServerException | IOException e) {\n              throw new RuntimeException(e);\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    JettySolrRunner jetty = jettys.get(0);\n    try (final HttpSolrClient adminClient = (HttpSolrClient) jetty.newClient(15000, 60000)) {\n      int numReplicas = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCollectionInOneInstance(adminClient, jetty.getNodeName(), executor, \"multiunload\", 2, numReplicas);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < numReplicas; j++) {\n          final int freezeJ = j;\n          executor.execute(() -> {\n            Unload unloadCmd = new Unload(true);\n            unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n            try {\n              adminClient.request(unloadCmd);\n            } catch (SolrServerException | IOException e) {\n              throw new RuntimeException(e);\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n    }\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    JettySolrRunner jetty = jettys.get(0);\n    try (final HttpSolrClient adminClient = (HttpSolrClient) jetty.newClient()) {\n      adminClient.setConnectionTimeout(15000);\n      adminClient.setSoTimeout(60000);\n      int numReplicas = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCollectionInOneInstance(adminClient, jetty.getNodeName(), executor, \"multiunload\", 2, numReplicas);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < numReplicas; j++) {\n          final int freezeJ = j;\n          executor.execute(() -> {\n            Unload unloadCmd = new Unload(true);\n            unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n            try {\n              adminClient.request(unloadCmd);\n            } catch (SolrServerException | IOException e) {\n              throw new RuntimeException(e);\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add53de9835b2cd1a7a80b4e0036afee171c9fdf","date":1552937136,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    JettySolrRunner jetty = jettys.get(0);\n    try (final HttpSolrClient adminClient = (HttpSolrClient) jetty.newClient(15000, 60000)) {\n      int numReplicas = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCollectionInOneInstance(adminClient, jetty.getNodeName(), executor, \"multiunload\", 2, numReplicas);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < numReplicas; j++) {\n          final int freezeJ = j;\n          executor.execute(() -> {\n            Unload unloadCmd = new Unload(true);\n            unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n            try {\n              adminClient.request(unloadCmd);\n            } catch (SolrServerException | IOException e) {\n              throw new RuntimeException(e);\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n    }\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    JettySolrRunner jetty = jettys.get(0);\n    try (final HttpSolrClient adminClient = (HttpSolrClient) jetty.newClient(15000, 60000)) {\n      int numReplicas = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCollectionInOneInstance(adminClient, jetty.getNodeName(), executor, \"multiunload\", 2, numReplicas);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < numReplicas; j++) {\n          final int freezeJ = j;\n          executor.execute(() -> {\n            Unload unloadCmd = new Unload(true);\n            unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n            try {\n              adminClient.request(unloadCmd);\n            } catch (SolrServerException | IOException e) {\n              throw new RuntimeException(e);\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n    }\n  }\n\n","bugFix":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    JettySolrRunner jetty = jettys.get(0);\n    try (final HttpSolrClient adminClient = (HttpSolrClient) jetty.newClient(15000, 60000)) {\n      int numReplicas = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<>(),\n          new SolrNamedThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCollectionInOneInstance(adminClient, jetty.getNodeName(), executor, \"multiunload\", 2, numReplicas);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<>(),\n          new SolrNamedThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < numReplicas; j++) {\n          final int freezeJ = j;\n          executor.execute(() -> {\n            Unload unloadCmd = new Unload(true);\n            unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n            try {\n              adminClient.request(unloadCmd);\n            } catch (SolrServerException | IOException e) {\n              throw new RuntimeException(e);\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n    }\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    JettySolrRunner jetty = jettys.get(0);\n    try (final HttpSolrClient adminClient = (HttpSolrClient) jetty.newClient(15000, 60000)) {\n      int numReplicas = atLeast(3);\n      ThreadPoolExecutor executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE,\n          5, TimeUnit.SECONDS, new SynchronousQueue<>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        // create the cores\n        createCollectionInOneInstance(adminClient, jetty.getNodeName(), executor, \"multiunload\", 2, numReplicas);\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n\n      executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n          TimeUnit.SECONDS, new SynchronousQueue<>(),\n          new DefaultSolrThreadFactory(\"testExecutor\"));\n      try {\n        for (int j = 0; j < numReplicas; j++) {\n          final int freezeJ = j;\n          executor.execute(() -> {\n            Unload unloadCmd = new Unload(true);\n            unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n            try {\n              adminClient.request(unloadCmd);\n            } catch (SolrServerException | IOException e) {\n              throw new RuntimeException(e);\n            }\n          });\n          Thread.sleep(random().nextInt(50));\n        }\n      } finally {\n        ExecutorUtil.shutdownAndAwaitTermination(executor);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["bafca15d8e408346a67f4282ad1143b88023893b"],"81a4a1810b619aea1d002a09c1878b498e20bf33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["3a0c04b71951333291abc7f317109a6a5957bd28"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"30c8e5574b55d57947e989443dfde611646530ee":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","28288370235ed02234a64753cdbf0c6ec096304a"],"bafca15d8e408346a67f4282ad1143b88023893b":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"3a0c04b71951333291abc7f317109a6a5957bd28":["275019a81d0883a1db4560391b072d1fbe272ec4"],"28288370235ed02234a64753cdbf0c6ec096304a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"09c8567c25c02eeeb3e719841606a1269f3538ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","81a4a1810b619aea1d002a09c1878b498e20bf33"],"add53de9835b2cd1a7a80b4e0036afee171c9fdf":["43d1e498704edd2bba13548a189eed4dfccff11b"],"43d1e498704edd2bba13548a189eed4dfccff11b":["28288370235ed02234a64753cdbf0c6ec096304a"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["30c8e5574b55d57947e989443dfde611646530ee","43d1e498704edd2bba13548a189eed4dfccff11b"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["81a4a1810b619aea1d002a09c1878b498e20bf33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["3a0c04b71951333291abc7f317109a6a5957bd28","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"275019a81d0883a1db4560391b072d1fbe272ec4":["cb5af3afeddbb803fb785098176e6e177c34261b"],"cb5af3afeddbb803fb785098176e6e177c34261b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"]},"commit2Childs":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"81a4a1810b619aea1d002a09c1878b498e20bf33":["09c8567c25c02eeeb3e719841606a1269f3538ca","4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"bafca15d8e408346a67f4282ad1143b88023893b":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"3a0c04b71951333291abc7f317109a6a5957bd28":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","43d1e498704edd2bba13548a189eed4dfccff11b"],"09c8567c25c02eeeb3e719841606a1269f3538ca":[],"add53de9835b2cd1a7a80b4e0036afee171c9fdf":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"43d1e498704edd2bba13548a189eed4dfccff11b":["add53de9835b2cd1a7a80b4e0036afee171c9fdf","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["81a4a1810b619aea1d002a09c1878b498e20bf33","09c8567c25c02eeeb3e719841606a1269f3538ca"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["cb5af3afeddbb803fb785098176e6e177c34261b"],"275019a81d0883a1db4560391b072d1fbe272ec4":["3a0c04b71951333291abc7f317109a6a5957bd28"],"cb5af3afeddbb803fb785098176e6e177c34261b":["275019a81d0883a1db4560391b072d1fbe272ec4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09c8567c25c02eeeb3e719841606a1269f3538ca","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}