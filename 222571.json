{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#getTopGroups(int,boolean).mjava","commits":[{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#getTopGroups(int,boolean).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","sourceNew":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is &lt;= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<T>> getTopGroups(int groupOffset, boolean fillFields) throws IOException {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<T>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = comparators.length;\n    for(CollectedSearchGroup<T> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<T> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is &lt;= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) throws IOException {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = comparators.length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#getTopGroups(int,boolean).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#getTopGroups(int,boolean).mjava","sourceNew":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is &lt;= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<T>> getTopGroups(int groupOffset, boolean fillFields) throws IOException {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<T>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = comparators.length;\n    for(CollectedSearchGroup<T> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<T> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is &lt;= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<GROUP_VALUE_TYPE>> getTopGroups(int groupOffset, boolean fillFields) throws IOException {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<GROUP_VALUE_TYPE>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = comparators.length;\n    for(CollectedSearchGroup<GROUP_VALUE_TYPE> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<GROUP_VALUE_TYPE> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#getTopGroups(int,boolean).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#getTopGroups(int,boolean).mjava","sourceNew":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is &lt;= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<T>> getTopGroups(int groupOffset, boolean fillFields) throws IOException {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<T>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = comparators.length;\n    for(CollectedSearchGroup<T> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      // System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.toString()));\n      SearchGroup<T> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is &lt;= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<T>> getTopGroups(int groupOffset, boolean fillFields) throws IOException {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<T>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = comparators.length;\n    for(CollectedSearchGroup<T> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<T> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#getTopGroups(int,boolean).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#getTopGroups(int,boolean).mjava","sourceNew":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is &lt;= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<T>> getTopGroups(int groupOffset, boolean fillFields) throws IOException {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<T>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = comparators.length;\n    for(CollectedSearchGroup<T> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      // System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.toString()));\n      SearchGroup<T> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is &lt;= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<T>> getTopGroups(int groupOffset, boolean fillFields) throws IOException {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<T>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = comparators.length;\n    for(CollectedSearchGroup<T> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      //System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      SearchGroup<T> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c370507e5521b2eb998530736f1c19b851ed5a","date":1531911305,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#getTopGroups(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#getTopGroups(int,boolean).mjava","sourceNew":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is &lt;= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<T>> getTopGroups(int groupOffset) throws IOException {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<T>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = comparators.length;\n    for(CollectedSearchGroup<T> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      // System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.toString()));\n      SearchGroup<T> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      searchGroup.sortValues = new Object[sortFieldCount];\n      for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n        searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns top groups, starting from offset.  This may\n   * return null, if no groups were collected, or if the\n   * number of unique groups collected is &lt;= offset.\n   *\n   * @param groupOffset The offset in the collected groups\n   * @param fillFields Whether to fill to {@link SearchGroup#sortValues}\n   * @return top groups, starting from offset\n   */\n  public Collection<SearchGroup<T>> getTopGroups(int groupOffset, boolean fillFields) throws IOException {\n\n    //System.out.println(\"FP.getTopGroups groupOffset=\" + groupOffset + \" fillFields=\" + fillFields + \" groupMap.size()=\" + groupMap.size());\n\n    if (groupOffset < 0) {\n      throw new IllegalArgumentException(\"groupOffset must be >= 0 (got \" + groupOffset + \")\");\n    }\n\n    if (groupMap.size() <= groupOffset) {\n      return null;\n    }\n\n    if (orderedGroups == null) {\n      buildSortedSet();\n    }\n\n    final Collection<SearchGroup<T>> result = new ArrayList<>();\n    int upto = 0;\n    final int sortFieldCount = comparators.length;\n    for(CollectedSearchGroup<T> group : orderedGroups) {\n      if (upto++ < groupOffset) {\n        continue;\n      }\n      // System.out.println(\"  group=\" + (group.groupValue == null ? \"null\" : group.groupValue.toString()));\n      SearchGroup<T> searchGroup = new SearchGroup<>();\n      searchGroup.groupValue = group.groupValue;\n      if (fillFields) {\n        searchGroup.sortValues = new Object[sortFieldCount];\n        for(int sortFieldIDX=0;sortFieldIDX<sortFieldCount;sortFieldIDX++) {\n          searchGroup.sortValues[sortFieldIDX] = comparators[sortFieldIDX].value(group.comparatorSlot);\n        }\n      }\n      result.add(searchGroup);\n    }\n    //System.out.println(\"  return \" + result.size() + \" groups\");\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["20e94e61fe5291647346b70437617e6b6c370408"],"20e94e61fe5291647346b70437617e6b6c370408":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04c370507e5521b2eb998530736f1c19b851ed5a":["7ae958a739da1866696f442384393ba2f13e33e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20e94e61fe5291647346b70437617e6b6c370408"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04c370507e5521b2eb998530736f1c19b851ed5a"],"7ae958a739da1866696f442384393ba2f13e33e5":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"20e94e61fe5291647346b70437617e6b6c370408":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","7ae958a739da1866696f442384393ba2f13e33e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"04c370507e5521b2eb998530736f1c19b851ed5a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"7ae958a739da1866696f442384393ba2f13e33e5":["04c370507e5521b2eb998530736f1c19b851ed5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}