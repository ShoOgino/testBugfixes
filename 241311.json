{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(String).mjava","commits":[{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#dataProviderWithData(String).mjava","sourceNew":"  private static SolrCloudManager cloudManagerWithData(String data) {\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(), m3));\n          }\n        });\n\n      });\n\n    });\n    return new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  private static ClusterDataProvider dataProviderWithData(String data){\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(), Replica.Type.get((String)m3.get(\"type\")), new HashMap<>()));\n          }\n        });\n\n      });\n\n    });\n    return new ClusterDataProvider(){\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return (Collection<String>) m.get(\"liveNodes\");\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(String).mjava","sourceNew":"  private static SolrCloudManager cloudManagerWithData(String data) {\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            l3.set(i, new ReplicaInfo(name,name\n                ,coll.toString(), shard.toString(), m3));\n          }\n        });\n\n      });\n\n    });\n    return new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  private static SolrCloudManager cloudManagerWithData(String data) {\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            l3.set(i, new ReplicaInfo(m3.keySet().iterator().next().toString()\n                ,coll.toString(), shard.toString(), m3));\n          }\n        });\n\n      });\n\n    });\n    return new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(String).mjava","sourceNew":"  private static SolrCloudManager cloudManagerWithData(String data) {\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name,name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n\n    });\n    return new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  private static SolrCloudManager cloudManagerWithData(String data) {\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            l3.set(i, new ReplicaInfo(name,name\n                ,coll.toString(), shard.toString(), m3));\n          }\n        });\n\n      });\n\n    });\n    return new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac52b67f02dde8ba4b452266fdf8c0e15442c856","date":1510634873,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(String).mjava","sourceNew":"  private static SolrCloudManager cloudManagerWithData(String data) {\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name,name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n\n    });\n    return new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  private static SolrCloudManager cloudManagerWithData(String data) {\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name,name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n\n    });\n    return new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList(\"nodeValues\", node));\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList(\"replicaInfo\", node));\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(String).mjava","sourceNew":"  private static SolrCloudManager cloudManagerWithData(String data) {\n    return cloudManagerWithData((Map) Utils.fromJSONString(data));\n  }\n\n","sourceOld":"  private static SolrCloudManager cloudManagerWithData(String data) {\n    final Map m = (Map) Utils.fromJSONString(data);\n    Map replicaInfo = (Map) m.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          for (int i = 0; i < l3.size(); i++) {\n            Object o = l3.get(i);\n            Map m3 = (Map) o;\n            String name = m3.keySet().iterator().next().toString();\n            m3 = (Map) m3.get(name);\n            Replica.Type type = Replica.Type.get((String) m3.get(\"type\"));\n            l3.set(i, new ReplicaInfo(name,name\n                , coll.toString(), shard.toString(), type, (String) node, m3));\n          }\n        });\n\n      });\n\n    });\n    return new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>((Collection<String>) m.get(\"liveNodes\"));\n          }\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList(\"nodeValues\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList(\"replicaInfo\", node));\n            return result == null ? Collections.emptyMap() : result;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#cloudManagerWithData(String).mjava","sourceNew":null,"sourceOld":"  private static SolrCloudManager cloudManagerWithData(String data) {\n    return cloudManagerWithData((Map) Utils.fromJSONString(data));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["ac52b67f02dde8ba4b452266fdf8c0e15442c856"],"ac52b67f02dde8ba4b452266fdf8c0e15442c856":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["3f504512a03d978990cbff30db0522b354e846db"],"ac52b67f02dde8ba4b452266fdf8c0e15442c856":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["ac52b67f02dde8ba4b452266fdf8c0e15442c856"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}