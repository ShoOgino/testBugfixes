{"path":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBoost().mjava","commits":[{"id":"d1336abe0899b2984e5652903556c1925fbdca9f","date":1329580100,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBoost().mjava","pathOld":"/dev/null","sourceNew":"  public void testBoost() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new Field(\"field1\", \"sometext\", StringField.TYPE_STORED));\n    doc.add(new TextField(\"field2\", \"sometext\"));\n    doc.add(new StringField(\"foo\", \"bar\"));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      StringField field = new StringField(\"foo\", \"baz\");\n      field.setBoost(5.0f);\n      doc.add(field);\n      iw.addDocument(doc);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBoost().mjava","sourceNew":"  public void testBoost() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new Field(\"field1\", \"sometext\", StringField.TYPE_STORED));\n    doc.add(new TextField(\"field2\", \"sometext\"));\n    doc.add(new StringField(\"foo\", \"bar\"));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      StringField field = new StringField(\"foo\", \"baz\");\n      field.setBoost(5.0f);\n      doc.add(field);\n      iw.addDocument(doc);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoost() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new Field(\"field1\", \"sometext\", StringField.TYPE_STORED));\n    doc.add(new TextField(\"field2\", \"sometext\"));\n    doc.add(new StringField(\"foo\", \"bar\"));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      StringField field = new StringField(\"foo\", \"baz\");\n      field.setBoost(5.0f);\n      doc.add(field);\n      iw.addDocument(doc);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBoost().mjava","sourceNew":"  public void testBoost() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      StringField field = new StringField(\"foo\", \"baz\", Field.Store.NO);\n      field.setBoost(5.0f);\n      doc.add(field);\n      iw.addDocument(doc);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoost() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new Field(\"field1\", \"sometext\", StringField.TYPE_STORED));\n    doc.add(new TextField(\"field2\", \"sometext\"));\n    doc.add(new StringField(\"foo\", \"bar\"));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      StringField field = new StringField(\"foo\", \"baz\");\n      field.setBoost(5.0f);\n      doc.add(field);\n      iw.addDocument(doc);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":["d1336abe0899b2984e5652903556c1925fbdca9f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a3635dad24b0681f0088f2ef680456482cdb451","date":1344025573,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBoost().mjava","sourceNew":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      List<IndexableField> list = new ArrayList<IndexableField>();\n      list.add(new IndexableField() {\n\n        @Override\n        public String name() {\n          return \"foo\";\n        }\n\n        @Override\n        public IndexableFieldType fieldType() {\n          return StringField.TYPE_NOT_STORED;\n        }\n\n        @Override\n        public float boost() {\n          return 5f;\n        }\n\n        @Override\n        public BytesRef binaryValue() {\n          return null;\n        }\n\n        @Override\n        public String stringValue() {\n          return \"baz\";\n        }\n\n        @Override\n        public Reader readerValue() {\n          return null;\n        }\n\n        @Override\n        public Number numericValue() {\n          return null;\n        }\n\n        @Override\n        public TokenStream tokenStream(Analyzer analyzer) throws IOException {\n          return null;\n        }\n      });\n      iw.addDocument(list);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoost() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      StringField field = new StringField(\"foo\", \"baz\", Field.Store.NO);\n      field.setBoost(5.0f);\n      doc.add(field);\n      iw.addDocument(doc);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testBoostOmitNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBoost().mjava","sourceNew":"  public void testBoostOmitNorms() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      List<IndexableField> list = new ArrayList<IndexableField>();\n      list.add(new IndexableField() {\n\n        @Override\n        public String name() {\n          return \"foo\";\n        }\n\n        @Override\n        public IndexableFieldType fieldType() {\n          return StringField.TYPE_NOT_STORED;\n        }\n\n        @Override\n        public float boost() {\n          return 5f;\n        }\n\n        @Override\n        public BytesRef binaryValue() {\n          return null;\n        }\n\n        @Override\n        public String stringValue() {\n          return \"baz\";\n        }\n\n        @Override\n        public Reader readerValue() {\n          return null;\n        }\n\n        @Override\n        public Number numericValue() {\n          return null;\n        }\n\n        @Override\n        public TokenStream tokenStream(Analyzer analyzer) throws IOException {\n          return null;\n        }\n      });\n      iw.addDocument(list);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBoost() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      StringField field = new StringField(\"foo\", \"baz\", Field.Store.NO);\n      field.setBoost(5.0f);\n      doc.add(field);\n      iw.addDocument(doc);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBoost().mjava","sourceNew":null,"sourceOld":"  public void testBoost() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iw = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new StringField(\"field1\", \"sometext\", Field.Store.YES));\n    doc.add(new TextField(\"field2\", \"sometext\", Field.Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc); // add an 'ok' document\n    try {\n      doc = new Document();\n      // try to boost with norms omitted\n      StringField field = new StringField(\"foo\", \"baz\", Field.Store.NO);\n      field.setBoost(5.0f);\n      doc.add(field);\n      iw.addDocument(doc);\n      fail(\"didn't get any exception, boost silently discarded\");\n    } catch (UnsupportedOperationException expected) {\n      // expected\n    }\n    DirectoryReader ir = DirectoryReader.open(iw, false);\n    assertEquals(1, ir.numDocs());\n    assertEquals(\"sometext\", ir.document(0).get(\"field1\"));\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1336abe0899b2984e5652903556c1925fbdca9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["04f07771a2a7dd3a395700665ed839c3dae2def2","3a3635dad24b0681f0088f2ef680456482cdb451"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["d1336abe0899b2984e5652903556c1925fbdca9f"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["04f07771a2a7dd3a395700665ed839c3dae2def2","3a3635dad24b0681f0088f2ef680456482cdb451"],"3a3635dad24b0681f0088f2ef680456482cdb451":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a3635dad24b0681f0088f2ef680456482cdb451"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","3a3635dad24b0681f0088f2ef680456482cdb451"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d1336abe0899b2984e5652903556c1925fbdca9f"],"d1336abe0899b2984e5652903556c1925fbdca9f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"3a3635dad24b0681f0088f2ef680456482cdb451":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}