{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testHTML().mjava","commits":[{"id":"9b31138e7b06f84b96de212b2102103cb629ee68","date":1272962032,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testHTML().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/HTMLStripCharFilterTest#testHTML().mjava","sourceNew":"  //Some sanity checks, but not a full-fledged check\n  public void testHTML() throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"htmlStripReaderTest.html\");\n    HTMLStripCharFilter reader = new HTMLStripCharFilter(CharReader.get(new InputStreamReader(stream, \"UTF-8\")));\n    StringBuilder builder = new StringBuilder();\n    int ch = -1;\n    while ((ch = reader.read()) != -1){\n      builder.append((char)ch);\n    }\n    String str = builder.toString();\n    assertTrue(\"Entity not properly escaped\", str.indexOf(\"&lt;\") == -1);//there is one > in the text\n    assertTrue(\"Forrest should have been stripped out\", str.indexOf(\"forrest\") == -1 && str.indexOf(\"Forrest\") == -1);\n    assertTrue(\"File should start with 'Welcome to Solr' after trimming\", str.trim().startsWith(\"Welcome to Solr\"));\n\n    assertTrue(\"File should start with 'Foundation.' after trimming\", str.trim().endsWith(\"Foundation.\"));\n    \n  }\n\n","sourceOld":"  //Some sanity checks, but not a full-fledged check\n  public void testHTML() throws Exception {\n\n    HTMLStripCharFilter reader = new HTMLStripCharFilter(CharReader.get(new FileReader(new File(\"htmlStripReaderTest.html\"))));\n    StringBuilder builder = new StringBuilder();\n    int ch = -1;\n    while ((ch = reader.read()) != -1){\n      builder.append((char)ch);\n    }\n    String str = builder.toString();\n    assertTrue(\"Entity not properly escaped\", str.indexOf(\"&lt;\") == -1);//there is one > in the text\n    assertTrue(\"Forrest should have been stripped out\", str.indexOf(\"forrest\") == -1 && str.indexOf(\"Forrest\") == -1);\n    assertTrue(\"File should start with 'Welcome to Solr' after trimming\", str.trim().startsWith(\"Welcome to Solr\"));\n\n    assertTrue(\"File should start with 'Foundation.' after trimming\", str.trim().endsWith(\"Foundation.\"));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testHTML().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testHTML().mjava","sourceNew":"  //Some sanity checks, but not a full-fledged check\n  public void testHTML() throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"htmlStripReaderTest.html\");\n    HTMLStripCharFilter reader = new HTMLStripCharFilter(CharReader.get(new InputStreamReader(stream, \"UTF-8\")));\n    StringBuilder builder = new StringBuilder();\n    int ch = -1;\n    while ((ch = reader.read()) != -1){\n      builder.append((char)ch);\n    }\n    String str = builder.toString();\n    assertTrue(\"Entity not properly escaped\", str.indexOf(\"&lt;\") == -1);//there is one > in the text\n    assertTrue(\"Forrest should have been stripped out\", str.indexOf(\"forrest\") == -1 && str.indexOf(\"Forrest\") == -1);\n    assertTrue(\"File should start with 'Welcome to Solr' after trimming\", str.trim().startsWith(\"Welcome to Solr\"));\n\n    assertTrue(\"File should start with 'Foundation.' after trimming\", str.trim().endsWith(\"Foundation.\"));\n    \n  }\n\n","sourceOld":"  //Some sanity checks, but not a full-fledged check\n  public void testHTML() throws Exception {\n    InputStream stream = getClass().getResourceAsStream(\"htmlStripReaderTest.html\");\n    HTMLStripCharFilter reader = new HTMLStripCharFilter(CharReader.get(new InputStreamReader(stream, \"UTF-8\")));\n    StringBuilder builder = new StringBuilder();\n    int ch = -1;\n    while ((ch = reader.read()) != -1){\n      builder.append((char)ch);\n    }\n    String str = builder.toString();\n    assertTrue(\"Entity not properly escaped\", str.indexOf(\"&lt;\") == -1);//there is one > in the text\n    assertTrue(\"Forrest should have been stripped out\", str.indexOf(\"forrest\") == -1 && str.indexOf(\"Forrest\") == -1);\n    assertTrue(\"File should start with 'Welcome to Solr' after trimming\", str.trim().startsWith(\"Welcome to Solr\"));\n\n    assertTrue(\"File should start with 'Foundation.' after trimming\", str.trim().endsWith(\"Foundation.\"));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b31138e7b06f84b96de212b2102103cb629ee68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9b31138e7b06f84b96de212b2102103cb629ee68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"9b31138e7b06f84b96de212b2102103cb629ee68":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b31138e7b06f84b96de212b2102103cb629ee68"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}