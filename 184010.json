{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteCollectionCmd#checkAliasReference(ZkStateReader,String).mjava","commits":[{"id":"59bad1cc1e7f90125a140496e79b06afcedb68ec","date":1554915399,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteCollectionCmd#checkAliasReference(ZkStateReader,String).mjava","pathOld":"/dev/null","sourceNew":"  // it's ok if a collection is referenced either by none or exactly by a single alias.\n  // This method returns the single alias to delete, if present, or null\n  private String checkAliasReference(ZkStateReader zkStateReader, String extCollection) throws Exception {\n    List<String> aliases = referencedByAlias(extCollection, zkStateReader.getAliases());\n    if (aliases.size() > 1) {\n      zkStateReader.aliasesManager.update(); // aliases may have been stale; get latest from ZK\n      aliases = referencedByAlias(extCollection, zkStateReader.getAliases());\n      if (aliases.size() > 1) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Collection : \" + extCollection + \" is part of aliases: \" + aliases + \", remove or modify the aliases before removing this collection.\");\n      }\n    }\n    if (!aliases.isEmpty()) {\n      return aliases.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6e5eb1137994855cee975febe08850fcb7726d3","date":1558358375,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteCollectionCmd#checkAliasReference(ZkStateReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteCollectionCmd#checkAliasReference(ZkStateReader,String).mjava","sourceNew":"  // This method returns the single collection aliases to delete, if present, or null\n  private List<String> checkAliasReference(ZkStateReader zkStateReader, String extCollection) throws Exception {\n    Aliases aliases = zkStateReader.getAliases();\n    List<String> aliasesRefs = referencedByAlias(extCollection, aliases);\n    List<String> aliasesToDelete = new ArrayList<>();\n    if (aliasesRefs.size() > 0) {\n      zkStateReader.aliasesManager.update(); // aliases may have been stale; get latest from ZK\n      aliases = zkStateReader.getAliases();\n      aliasesRefs = referencedByAlias(extCollection, aliases);\n      if (aliasesRefs.size() > 0) {\n        for (String alias : aliasesRefs) {\n          // for back-compat in 8.x we don't automatically remove other\n          // aliases that point only to this collection\n          if (!extCollection.equals(alias)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Collection : \" + extCollection + \" is part of aliases: \" + aliasesRefs + \", remove or modify the aliases before removing this collection.\");\n          } else {\n            aliasesToDelete.add(alias);\n          }\n        }\n      }\n    }\n    return aliasesToDelete;\n  }\n\n","sourceOld":"  // it's ok if a collection is referenced either by none or exactly by a single alias.\n  // This method returns the single alias to delete, if present, or null\n  private String checkAliasReference(ZkStateReader zkStateReader, String extCollection) throws Exception {\n    List<String> aliases = referencedByAlias(extCollection, zkStateReader.getAliases());\n    if (aliases.size() > 1) {\n      zkStateReader.aliasesManager.update(); // aliases may have been stale; get latest from ZK\n      aliases = referencedByAlias(extCollection, zkStateReader.getAliases());\n      if (aliases.size() > 1) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Collection : \" + extCollection + \" is part of aliases: \" + aliases + \", remove or modify the aliases before removing this collection.\");\n      }\n    }\n    if (!aliases.isEmpty()) {\n      return aliases.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":["ce0b61a2648584b34304ab915de569c63bdb36b4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c","date":1562161956,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteCollectionCmd#checkAliasReference(ZkStateReader,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteCollectionCmd#checkAliasReference(ZkStateReader,String).mjava","sourceNew":"  // This method returns the single collection aliases to delete, if present, or null\n  private List<String> checkAliasReference(ZkStateReader zkStateReader, String extCollection, boolean followAliases) throws Exception {\n    Aliases aliases = zkStateReader.getAliases();\n    List<String> aliasesRefs = referencedByAlias(extCollection, aliases, followAliases);\n    List<String> aliasesToDelete = new ArrayList<>();\n    if (aliasesRefs.size() > 0) {\n      zkStateReader.aliasesManager.update(); // aliases may have been stale; get latest from ZK\n      aliases = zkStateReader.getAliases();\n      aliasesRefs = referencedByAlias(extCollection, aliases, followAliases);\n      if (aliasesRefs.size() > 0) {\n        for (String alias : aliasesRefs) {\n          // for back-compat in 8.x we don't automatically remove other\n          // aliases that point only to this collection\n          if (!extCollection.equals(alias)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Collection : \" + extCollection + \" is part of aliases: \" + aliasesRefs + \", remove or modify the aliases before removing this collection.\");\n          } else {\n            aliasesToDelete.add(alias);\n          }\n        }\n      }\n    }\n    return aliasesToDelete;\n  }\n\n","sourceOld":"  // This method returns the single collection aliases to delete, if present, or null\n  private List<String> checkAliasReference(ZkStateReader zkStateReader, String extCollection) throws Exception {\n    Aliases aliases = zkStateReader.getAliases();\n    List<String> aliasesRefs = referencedByAlias(extCollection, aliases);\n    List<String> aliasesToDelete = new ArrayList<>();\n    if (aliasesRefs.size() > 0) {\n      zkStateReader.aliasesManager.update(); // aliases may have been stale; get latest from ZK\n      aliases = zkStateReader.getAliases();\n      aliasesRefs = referencedByAlias(extCollection, aliases);\n      if (aliasesRefs.size() > 0) {\n        for (String alias : aliasesRefs) {\n          // for back-compat in 8.x we don't automatically remove other\n          // aliases that point only to this collection\n          if (!extCollection.equals(alias)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Collection : \" + extCollection + \" is part of aliases: \" + aliasesRefs + \", remove or modify the aliases before removing this collection.\");\n          } else {\n            aliasesToDelete.add(alias);\n          }\n        }\n      }\n    }\n    return aliasesToDelete;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"59bad1cc1e7f90125a140496e79b06afcedb68ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6e5eb1137994855cee975febe08850fcb7726d3":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c"],"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c":["b6e5eb1137994855cee975febe08850fcb7726d3"]},"commit2Childs":{"59bad1cc1e7f90125a140496e79b06afcedb68ec":["b6e5eb1137994855cee975febe08850fcb7726d3"],"b6e5eb1137994855cee975febe08850fcb7726d3":["d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}