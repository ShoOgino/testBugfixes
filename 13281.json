{"path":"solr/src/java/org/apache/solr/analysis/KeepWordFilterFactory#inform(ResourceLoader).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/KeepWordFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(ResourceLoader loader) {\n    String wordFiles = args.get(\"words\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (wordFiles != null) {\n      try {\n        List<String> files = StrUtils.splitFileNames(wordFiles);\n        if (words == null && files.size() > 0){\n          words = new CharArraySet(files.size() * 10, ignoreCase);\n        }\n        for (String file : files) {\n          List<String> wlist = loader.getLines(file.trim());\n          //TODO: once StopFilter.makeStopSet(List) method is available, switch to using that so we can avoid a toArray() call\n          words.addAll(StopFilter.makeStopSet((String[]) wlist.toArray(new String[0]), ignoreCase));\n        }\n      }\n      catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/analysis/KeepWordFilterFactory#inform(ResourceLoader).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(ResourceLoader loader) {\n    String wordFiles = args.get(\"words\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (wordFiles != null) {\n      try {\n        List<String> files = StrUtils.splitFileNames(wordFiles);\n        if (words == null && files.size() > 0){\n          words = new CharArraySet(files.size() * 10, ignoreCase);\n        }\n        for (String file : files) {\n          List<String> wlist = loader.getLines(file.trim());\n          //TODO: once StopFilter.makeStopSet(List) method is available, switch to using that so we can avoid a toArray() call\n          words.addAll(StopFilter.makeStopSet((String[]) wlist.toArray(new String[0]), ignoreCase));\n        }\n      }\n      catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/KeepWordFilterFactory#inform(ResourceLoader).mjava","pathOld":"src/java/org/apache/solr/analysis/KeepWordFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(ResourceLoader loader) {\n    String wordFiles = args.get(\"words\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (wordFiles != null) {\n      try {\n        List<String> files = StrUtils.splitFileNames(wordFiles);\n        if (words == null && files.size() > 0){\n          words = new CharArraySet(files.size() * 10, ignoreCase);\n        }\n        for (String file : files) {\n          List<String> wlist = loader.getLines(file.trim());\n          //TODO: once StopFilter.makeStopSet(List) method is available, switch to using that so we can avoid a toArray() call\n          words.addAll(StopFilter.makeStopSet((String[]) wlist.toArray(new String[0]), ignoreCase));\n        }\n      }\n      catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(ResourceLoader loader) {\n    String wordFiles = args.get(\"words\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (wordFiles != null) {\n      try {\n        List<String> files = StrUtils.splitFileNames(wordFiles);\n        if (words == null && files.size() > 0){\n          words = new CharArraySet(files.size() * 10, ignoreCase);\n        }\n        for (String file : files) {\n          List<String> wlist = loader.getLines(file.trim());\n          //TODO: once StopFilter.makeStopSet(List) method is available, switch to using that so we can avoid a toArray() call\n          words.addAll(StopFilter.makeStopSet((String[]) wlist.toArray(new String[0]), ignoreCase));\n        }\n      }\n      catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/KeepWordFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(ResourceLoader loader) {\n    String wordFiles = args.get(\"words\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (wordFiles != null) {\n      try {\n        List<String> files = StrUtils.splitFileNames(wordFiles);\n        if (words == null && files.size() > 0){\n          words = new CharArraySet(files.size() * 10, ignoreCase);\n        }\n        for (String file : files) {\n          List<String> wlist = loader.getLines(file.trim());\n          //TODO: once StopFilter.makeStopSet(List) method is available, switch to using that so we can avoid a toArray() call\n          words.addAll(StopFilter.makeStopSet((String[]) wlist.toArray(new String[0]), ignoreCase));\n        }\n      }\n      catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c8b12bda3f5864b27e3e04df1be4f6736ec067a","date":1270088127,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/KeepWordFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/KeepWordFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String wordFiles = args.get(\"words\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (wordFiles != null) {   \n      try {\n        words = getWordSet(loader, wordFiles, ignoreCase);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(ResourceLoader loader) {\n    String wordFiles = args.get(\"words\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (wordFiles != null) {\n      try {\n        List<String> files = StrUtils.splitFileNames(wordFiles);\n        if (words == null && files.size() > 0){\n          words = new CharArraySet(files.size() * 10, ignoreCase);\n        }\n        for (String file : files) {\n          List<String> wlist = loader.getLines(file.trim());\n          //TODO: once StopFilter.makeStopSet(List) method is available, switch to using that so we can avoid a toArray() call\n          words.addAll(StopFilter.makeStopSet((String[]) wlist.toArray(new String[0]), ignoreCase));\n        }\n      }\n      catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["f714d3d16beb7d9cc74e7ae85c110a7976c62938"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f714d3d16beb7d9cc74e7ae85c110a7976c62938","date":1296412234,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/KeepWordFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/KeepWordFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String wordFiles = args.get(\"words\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\",false);\n\n    if (wordFiles != null) {\n      try {\n        words = getWordSet(loader, wordFiles, ignoreCase);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String wordFiles = args.get(\"words\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (wordFiles != null) {   \n      try {\n        words = getWordSet(loader, wordFiles, ignoreCase);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":["9c8b12bda3f5864b27e3e04df1be4f6736ec067a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/KeepWordFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/KeepWordFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String wordFiles = args.get(\"words\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\",false);\n\n    if (wordFiles != null) {\n      try {\n        words = getWordSet(loader, wordFiles, ignoreCase);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String wordFiles = args.get(\"words\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (wordFiles != null) {   \n      try {\n        words = getWordSet(loader, wordFiles, ignoreCase);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/KeepWordFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/KeepWordFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String wordFiles = args.get(\"words\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\",false);\n\n    if (wordFiles != null) {\n      try {\n        words = getWordSet(loader, wordFiles, ignoreCase);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String wordFiles = args.get(\"words\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (wordFiles != null) {   \n      try {\n        words = getWordSet(loader, wordFiles, ignoreCase);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/KeepWordFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/KeepWordFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String wordFiles = args.get(\"words\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\",false);\n\n    if (wordFiles != null) {\n      try {\n        words = getWordSet(loader, wordFiles, ignoreCase);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String wordFiles = args.get(\"words\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\",false);\n\n    if (wordFiles != null) {\n      try {\n        words = getWordSet(loader, wordFiles, ignoreCase);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/KeepWordFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/KeepWordFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String wordFiles = args.get(\"words\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\",false);\n\n    if (wordFiles != null) {\n      try {\n        words = getWordSet(loader, wordFiles, ignoreCase);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String wordFiles = args.get(\"words\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\",false);\n\n    if (wordFiles != null) {\n      try {\n        words = getWordSet(loader, wordFiles, ignoreCase);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/KeepWordFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/KeepWordFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String wordFiles = args.get(\"words\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\",false);\n\n    if (wordFiles != null) {\n      try {\n        words = getWordSet(loader, wordFiles, ignoreCase);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String wordFiles = args.get(\"words\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    enablePositionIncrements = getBoolean(\"enablePositionIncrements\",false);\n\n    if (wordFiles != null) {\n      try {\n        words = getWordSet(loader, wordFiles, ignoreCase);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f714d3d16beb7d9cc74e7ae85c110a7976c62938":["9c8b12bda3f5864b27e3e04df1be4f6736ec067a"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["f714d3d16beb7d9cc74e7ae85c110a7976c62938","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"9c8b12bda3f5864b27e3e04df1be4f6736ec067a":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["f714d3d16beb7d9cc74e7ae85c110a7976c62938"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9c8b12bda3f5864b27e3e04df1be4f6736ec067a","f714d3d16beb7d9cc74e7ae85c110a7976c62938"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["f714d3d16beb7d9cc74e7ae85c110a7976c62938"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["9c8b12bda3f5864b27e3e04df1be4f6736ec067a","f714d3d16beb7d9cc74e7ae85c110a7976c62938"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"f714d3d16beb7d9cc74e7ae85c110a7976c62938":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"9c8b12bda3f5864b27e3e04df1be4f6736ec067a":["f714d3d16beb7d9cc74e7ae85c110a7976c62938","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1da8d55113b689b06716246649de6f62430f15c0":["9c8b12bda3f5864b27e3e04df1be4f6736ec067a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}