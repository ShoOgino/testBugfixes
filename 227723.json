{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","commits":[{"id":"56a558aa5aadd60ae850d1ab090098bc63bdfaf9","date":1355245333,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderProps(String,String,int).mjava","sourceNew":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (clusterState != null) {    \n        Replica replica = clusterState.getLeader(collection, shard);\n        if (replica != null && getClusterState().liveNodesContain(replica.getNodeName())) {\n          return replica;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","sourceOld":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderProps(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (clusterState != null) {    \n        Replica replica = clusterState.getLeader(collection, shard);\n        if (replica != null && getClusterState().liveNodesContain(replica.getNodeName())) {\n          return replica;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (clusterState != null) {    \n        Replica replica = clusterState.getLeader(collection, shard);\n        if (replica != null && getClusterState().liveNodesContain(replica.getNodeName())) {\n          return replica;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55540ade5a813e3e393664af04fefbda8a018eff","date":1362953988,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","sourceNew":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt && !closed) {\n      if (clusterState != null) {    \n        Replica replica = clusterState.getLeader(collection, shard);\n        if (replica != null && getClusterState().liveNodesContain(replica.getNodeName())) {\n          return replica;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","sourceOld":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt) {\n      if (clusterState != null) {    \n        Replica replica = clusterState.getLeader(collection, shard);\n        if (replica != null && getClusterState().liveNodesContain(replica.getNodeName())) {\n          return replica;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"204509ef590c8dfddd322f12e0f9fb6a0060be69","date":1391756602,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","sourceNew":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt && !closed) {\n      if (clusterState != null) {    \n        Replica replica = clusterState.getLeader(collection, shard);\n        if (replica != null && getClusterState().liveNodesContain(replica.getNodeName())) {\n          return replica;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found after waiting for \"\n        + timeout + \"ms \" + \", collection: \" + collection + \" slice: \" + shard);\n  }\n\n","sourceOld":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt && !closed) {\n      if (clusterState != null) {    \n        Replica replica = clusterState.getLeader(collection, shard);\n        if (replica != null && getClusterState().liveNodesContain(replica.getNodeName())) {\n          return replica;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found, collection:\" + collection + \" slice:\" + shard);\n  }\n\n","bugFix":["a6378064655e76cd7b908b1cab4ce425b384b508"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd5bc858b8426d40bbe90b94120ead37c77d7954","date":1393812525,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","sourceNew":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS);\n    while (System.nanoTime() < timeoutAt && !closed) {\n      if (clusterState != null) {    \n        Replica replica = clusterState.getLeader(collection, shard);\n        if (replica != null && getClusterState().liveNodesContain(replica.getNodeName())) {\n          return replica;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found after waiting for \"\n        + timeout + \"ms \" + \", collection: \" + collection + \" slice: \" + shard);\n  }\n\n","sourceOld":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutAt && !closed) {\n      if (clusterState != null) {    \n        Replica replica = clusterState.getLeader(collection, shard);\n        if (replica != null && getClusterState().liveNodesContain(replica.getNodeName())) {\n          return replica;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found after waiting for \"\n        + timeout + \"ms \" + \", collection: \" + collection + \" slice: \" + shard);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0932eb10135843758b2ca508d5aa2b4798aa07f9","date":1426947197,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","sourceNew":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS);\n    while (true) {\n      Replica leader = getLeader(collection, shard);\n      if (leader != null) return leader;\n      if (System.nanoTime() >= timeoutAt || closed) break;\n      Thread.sleep(GET_LEADER_RETRY_INTERVAL_MS);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found after waiting for \"\n        + timeout + \"ms \" + \", collection: \" + collection + \" slice: \" + shard);\n  }\n\n","sourceOld":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS);\n    while (System.nanoTime() < timeoutAt && !closed) {\n      if (clusterState != null) {    \n        Replica replica = clusterState.getLeader(collection, shard);\n        if (replica != null && getClusterState().liveNodesContain(replica.getNodeName())) {\n          return replica;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found after waiting for \"\n        + timeout + \"ms \" + \", collection: \" + collection + \" slice: \" + shard);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","sourceNew":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS);\n    while (true) {\n      Replica leader = getLeader(collection, shard);\n      if (leader != null) return leader;\n      if (System.nanoTime() >= timeoutAt || closed) break;\n      Thread.sleep(GET_LEADER_RETRY_INTERVAL_MS);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found after waiting for \"\n        + timeout + \"ms \" + \", collection: \" + collection + \" slice: \" + shard);\n  }\n\n","sourceOld":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS);\n    while (System.nanoTime() < timeoutAt && !closed) {\n      if (clusterState != null) {    \n        Replica replica = clusterState.getLeader(collection, shard);\n        if (replica != null && getClusterState().liveNodesContain(replica.getNodeName())) {\n          return replica;\n        }\n      }\n      Thread.sleep(50);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found after waiting for \"\n        + timeout + \"ms \" + \", collection: \" + collection + \" slice: \" + shard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8cffee0b9c10b78bd087c71485b482217fe84f","date":1505950827,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","sourceNew":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS);\n    while (true) {\n      Replica leader = getLeader(collection, shard);\n      if (leader != null) return leader;\n      if (System.nanoTime() >= timeoutAt || closed) break;\n      Thread.sleep(GET_LEADER_RETRY_INTERVAL_MS);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found after waiting for \"\n        + timeout + \"ms \" + \", collection: \" + collection + \" slice: \" + shard + \" saw state=\" + clusterState.getCollectionOrNull(collection)\n        + \" with live_nodes=\" + clusterState.getLiveNodes());\n  }\n\n","sourceOld":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS);\n    while (true) {\n      Replica leader = getLeader(collection, shard);\n      if (leader != null) return leader;\n      if (System.nanoTime() >= timeoutAt || closed) break;\n      Thread.sleep(GET_LEADER_RETRY_INTERVAL_MS);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found after waiting for \"\n        + timeout + \"ms \" + \", collection: \" + collection + \" slice: \" + shard);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","sourceNew":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS);\n    while (true) {\n      Replica leader = getLeader(collection, shard);\n      if (leader != null) return leader;\n      if (System.nanoTime() >= timeoutAt || closed) break;\n      Thread.sleep(GET_LEADER_RETRY_INTERVAL_MS);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found after waiting for \"\n        + timeout + \"ms \" + \", collection: \" + collection + \" slice: \" + shard + \" saw state=\" + clusterState.getCollectionOrNull(collection)\n        + \" with live_nodes=\" + clusterState.getLiveNodes());\n  }\n\n","sourceOld":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS);\n    while (true) {\n      Replica leader = getLeader(collection, shard);\n      if (leader != null) return leader;\n      if (System.nanoTime() >= timeoutAt || closed) break;\n      Thread.sleep(GET_LEADER_RETRY_INTERVAL_MS);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found after waiting for \"\n        + timeout + \"ms \" + \", collection: \" + collection + \" slice: \" + shard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","sourceNew":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS);\n    while (true) {\n      Replica leader = getLeader(collection, shard);\n      if (leader != null) return leader;\n      if (System.nanoTime() >= timeoutAt || closed) break;\n      Thread.sleep(GET_LEADER_RETRY_INTERVAL_MS);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found after waiting for \"\n        + timeout + \"ms \" + \", collection: \" + collection + \" slice: \" + shard + \" saw state=\" + clusterState.getCollectionOrNull(collection)\n        + \" with live_nodes=\" + clusterState.getLiveNodes());\n  }\n\n","sourceOld":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS);\n    while (true) {\n      Replica leader = getLeader(collection, shard);\n      if (leader != null) return leader;\n      if (System.nanoTime() >= timeoutAt || closed) break;\n      Thread.sleep(GET_LEADER_RETRY_INTERVAL_MS);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found after waiting for \"\n        + timeout + \"ms \" + \", collection: \" + collection + \" slice: \" + shard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","sourceNew":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n\n    AtomicReference<Replica> leader = new AtomicReference<>();\n    try {\n      waitForState(collection, timeout, TimeUnit.MILLISECONDS, (n, c) -> {\n        if (c == null)\n          return false;\n        Replica l = getLeader(n, c, shard);\n        if (l != null) {\n          leader.set(l);\n          return true;\n        }\n        return false;\n      });\n    } catch (TimeoutException | InterruptedException e) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found after waiting for \"\n          + timeout + \"ms \" + \", collection: \" + collection + \" slice: \" + shard + \" saw state=\" + clusterState.getCollectionOrNull(collection)\n          + \" with live_nodes=\" + clusterState.getLiveNodes());\n    }\n    return leader.get();\n  }\n\n","sourceOld":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS);\n    while (true) {\n      Replica leader = getLeader(collection, shard);\n      if (leader != null) return leader;\n      if (System.nanoTime() >= timeoutAt || closed) break;\n      Thread.sleep(GET_LEADER_RETRY_INTERVAL_MS);\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found after waiting for \"\n        + timeout + \"ms \" + \", collection: \" + collection + \" slice: \" + shard + \" saw state=\" + clusterState.getCollectionOrNull(collection)\n        + \" with live_nodes=\" + clusterState.getLiveNodes());\n  }\n\n","bugFix":["204509ef590c8dfddd322f12e0f9fb6a0060be69","fd5bc858b8426d40bbe90b94120ead37c77d7954","5b8cffee0b9c10b78bd087c71485b482217fe84f","0932eb10135843758b2ca508d5aa2b4798aa07f9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed8296167c56d762d39b08e0582d8a72daa1cec9","date":1574449485,"type":3,"author":"Andy Vuong","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getLeaderRetry(String,String,int).mjava","sourceNew":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n\n    AtomicReference<Replica> leader = new AtomicReference<>();\n    try {\n      waitForState(collection, timeout, TimeUnit.MILLISECONDS, (n, c) -> {\n        if (c == null)\n          return false;\n        Replica l = getLeader(n, c, shard);\n        if (l != null) {\n          leader.set(l);\n          return true;\n        }\n        return false;\n      });\n    } catch (TimeoutException e) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found after waiting for \"\n          + timeout + \"ms \" + \", collection: \" + collection + \" slice: \" + shard + \" saw state=\" + clusterState.getCollectionOrNull(collection)\n          + \" with live_nodes=\" + clusterState.getLiveNodes());\n    }\n    return leader.get();\n  }\n\n","sourceOld":"  /**\n   * Get shard leader properties, with retry if none exist.\n   */\n  public Replica getLeaderRetry(String collection, String shard, int timeout) throws InterruptedException {\n\n    AtomicReference<Replica> leader = new AtomicReference<>();\n    try {\n      waitForState(collection, timeout, TimeUnit.MILLISECONDS, (n, c) -> {\n        if (c == null)\n          return false;\n        Replica l = getLeader(n, c, shard);\n        if (l != null) {\n          leader.set(l);\n          return true;\n        }\n        return false;\n      });\n    } catch (TimeoutException | InterruptedException e) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"No registered leader was found after waiting for \"\n          + timeout + \"ms \" + \", collection: \" + collection + \" slice: \" + shard + \" saw state=\" + clusterState.getCollectionOrNull(collection)\n          + \" with live_nodes=\" + clusterState.getLiveNodes());\n    }\n    return leader.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["0932eb10135843758b2ca508d5aa2b4798aa07f9","5b8cffee0b9c10b78bd087c71485b482217fe84f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["560c18d71dad43d675158783c3840f8c80d6d39c"],"204509ef590c8dfddd322f12e0f9fb6a0060be69":["55540ade5a813e3e393664af04fefbda8a018eff"],"ed8296167c56d762d39b08e0582d8a72daa1cec9":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["204509ef590c8dfddd322f12e0f9fb6a0060be69"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fd5bc858b8426d40bbe90b94120ead37c77d7954","0932eb10135843758b2ca508d5aa2b4798aa07f9"],"55540ade5a813e3e393664af04fefbda8a018eff":["56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["0932eb10135843758b2ca508d5aa2b4798aa07f9"],"0932eb10135843758b2ca508d5aa2b4798aa07f9":["fd5bc858b8426d40bbe90b94120ead37c77d7954"],"56a558aa5aadd60ae850d1ab090098bc63bdfaf9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"560c18d71dad43d675158783c3840f8c80d6d39c":["0932eb10135843758b2ca508d5aa2b4798aa07f9","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ed8296167c56d762d39b08e0582d8a72daa1cec9"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["ed8296167c56d762d39b08e0582d8a72daa1cec9"],"204509ef590c8dfddd322f12e0f9fb6a0060be69":["fd5bc858b8426d40bbe90b94120ead37c77d7954"],"ed8296167c56d762d39b08e0582d8a72daa1cec9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0932eb10135843758b2ca508d5aa2b4798aa07f9"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"55540ade5a813e3e393664af04fefbda8a018eff":["204509ef590c8dfddd322f12e0f9fb6a0060be69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"0932eb10135843758b2ca508d5aa2b4798aa07f9":["c304e97e7c1d472bc70e801b35ee78583916c6cd","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5b8cffee0b9c10b78bd087c71485b482217fe84f","560c18d71dad43d675158783c3840f8c80d6d39c"],"56a558aa5aadd60ae850d1ab090098bc63bdfaf9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","55540ade5a813e3e393664af04fefbda8a018eff"],"560c18d71dad43d675158783c3840f8c80d6d39c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}