{"path":"src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","commits":[{"id":"f011f01db72fa6f556a9a0843944ecee2de4aaa8","date":1255806907,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doCommit(Map).mjava","sourceNew":"  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      if (deletedDocsDirty) {               // re-write deleted\n        si.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        deletedDocs.write(directory(), si.getDelFileName());\n\n        si.setDelCount(si.getDelCount()+pendingDeleteCount);\n        pendingDeleteCount = 0;\n        assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n      } else {\n        assert pendingDeleteCount == 0;\n      }\n\n      if (normsDirty) {               // re-write norms\n        si.setNumFields(core.fieldInfos.size());\n        Iterator it = norms.values().iterator();\n        while (it.hasNext()) {\n          Norm norm = (Norm) it.next();\n          if (norm.dirty) {\n            norm.reWrite(si);\n          }\n        }\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n      hasChanges = false;\n    }\n  }\n\n","sourceOld":"  protected void doCommit(Map commitUserData) throws IOException {\n    if (hasChanges) {\n      if (deletedDocsDirty) {               // re-write deleted\n        si.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        deletedDocs.write(directory(), si.getDelFileName());\n\n        si.setDelCount(si.getDelCount()+pendingDeleteCount);\n        pendingDeleteCount = 0;\n        assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n      } else {\n        assert pendingDeleteCount == 0;\n      }\n\n      if (normsDirty) {               // re-write norms\n        si.setNumFields(core.fieldInfos.size());\n        Iterator it = norms.values().iterator();\n        while (it.hasNext()) {\n          Norm norm = (Norm) it.next();\n          if (norm.dirty) {\n            norm.reWrite(si);\n          }\n        }\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n      hasChanges = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d","date":1255859449,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","sourceNew":"  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      if (deletedDocsDirty) {               // re-write deleted\n        si.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        deletedDocs.write(directory(), si.getDelFileName());\n\n        si.setDelCount(si.getDelCount()+pendingDeleteCount);\n        pendingDeleteCount = 0;\n        assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n      } else {\n        assert pendingDeleteCount == 0;\n      }\n\n      if (normsDirty) {               // re-write norms\n        si.setNumFields(core.fieldInfos.size());\n        for (final Norm norm : norms.values()) {\n          if (norm.dirty) {\n            norm.reWrite(si);\n          }\n        }\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n      hasChanges = false;\n    }\n  }\n\n","sourceOld":"  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      if (deletedDocsDirty) {               // re-write deleted\n        si.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        deletedDocs.write(directory(), si.getDelFileName());\n\n        si.setDelCount(si.getDelCount()+pendingDeleteCount);\n        pendingDeleteCount = 0;\n        assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n      } else {\n        assert pendingDeleteCount == 0;\n      }\n\n      if (normsDirty) {               // re-write norms\n        si.setNumFields(core.fieldInfos.size());\n        Iterator it = norms.values().iterator();\n        while (it.hasNext()) {\n          Norm norm = (Norm) it.next();\n          if (norm.dirty) {\n            norm.reWrite(si);\n          }\n        }\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n      hasChanges = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":["1085ea837da8f1e96697e17cf73e1d08e7329261"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","sourceNew":"  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      if (deletedDocsDirty) {               // re-write deleted\n        si.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        deletedDocs.write(directory(), si.getDelFileName());\n\n        si.setDelCount(si.getDelCount()+pendingDeleteCount);\n        pendingDeleteCount = 0;\n        assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n      } else {\n        assert pendingDeleteCount == 0;\n      }\n\n      if (normsDirty) {               // re-write norms\n        si.setNumFields(core.fieldInfos.size());\n        for (final Norm norm : norms.values()) {\n          if (norm.dirty) {\n            norm.reWrite(si);\n          }\n        }\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n      hasChanges = false;\n    }\n  }\n\n","sourceOld":"  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      if (deletedDocsDirty) {               // re-write deleted\n        si.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        deletedDocs.write(directory(), si.getDelFileName());\n\n        si.setDelCount(si.getDelCount()+pendingDeleteCount);\n        pendingDeleteCount = 0;\n        assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n      } else {\n        assert pendingDeleteCount == 0;\n      }\n\n      if (normsDirty) {               // re-write norms\n        si.setNumFields(core.fieldInfos.size());\n        for (final Norm norm : norms.values()) {\n          if (norm.dirty) {\n            norm.reWrite(si);\n          }\n        }\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n      hasChanges = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","sourceNew":"  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      if (deletedDocsDirty) {               // re-write deleted\n        si.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        deletedDocs.write(directory(), si.getDelFileName());\n\n        si.setDelCount(si.getDelCount()+pendingDeleteCount);\n        pendingDeleteCount = 0;\n        assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n      } else {\n        assert pendingDeleteCount == 0;\n      }\n\n      if (normsDirty) {               // re-write norms\n        si.setNumFields(core.fieldInfos.size());\n        for (final Norm norm : norms.values()) {\n          if (norm.dirty) {\n            norm.reWrite(si);\n          }\n        }\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n      hasChanges = false;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      if (deletedDocsDirty) {               // re-write deleted\n        si.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        deletedDocs.write(directory(), si.getDelFileName());\n\n        si.setDelCount(si.getDelCount()+pendingDeleteCount);\n        pendingDeleteCount = 0;\n        assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n      } else {\n        assert pendingDeleteCount == 0;\n      }\n\n      if (normsDirty) {               // re-write norms\n        si.setNumFields(core.fieldInfos.size());\n        for (final Norm norm : norms.values()) {\n          if (norm.dirty) {\n            norm.reWrite(si);\n          }\n        }\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n      hasChanges = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["f011f01db72fa6f556a9a0843944ecee2de4aaa8"],"8a9e385641d717e641408d8fbbc62be8fc766357":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f011f01db72fa6f556a9a0843944ecee2de4aaa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f011f01db72fa6f556a9a0843944ecee2de4aaa8"],"f011f01db72fa6f556a9a0843944ecee2de4aaa8":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}