{"path":"src/test/org/apache/solr/common/SolrDocumentTest#testUnsupportedStuff().mjava","commits":[{"id":"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","date":1181791578,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/common/SolrDocumentTest#testUnsupportedStuff().mjava","pathOld":"src/test/org/apache/solr/util/SolrDocumentTest#testUnsupportedStuff().mjava","sourceNew":"  public void testUnsupportedStuff()\n  {\n    SolrDocument doc = new SolrDocument();\n\n    try { doc.getFieldValueMap().clear();               fail( \"should be unsupported!\" ); } catch( Exception ex ){}\n    try { doc.getFieldValueMap().containsValue( null ); fail( \"should be unsupported!\" ); } catch( Exception ex ){}\n    try { doc.getFieldValueMap().entrySet();            fail( \"should be unsupported!\" ); } catch( Exception ex ){}\n    try { doc.getFieldValueMap().putAll( null );        fail( \"should be unsupported!\" ); } catch( Exception ex ){}\n    try { doc.getFieldValueMap().values();              fail( \"should be unsupported!\" ); } catch( Exception ex ){}\n\n    assertEquals( null, doc.getFieldValueMap().get( \"aaa\" ) );\n    doc.setField( \"aaa\", \"bbb\" );\n    assertEquals( \"bbb\", doc.getFieldValueMap().get( \"aaa\" ) );\n    doc.getFieldValueMap().remove( \"aaa\" );\n    assertEquals( null, doc.getFieldValueMap().get( \"aaa\" ) );\n  }\n\n","sourceOld":"  public void testUnsupportedStuff()\n  {\n    SolrDocument doc = new SolrDocument();\n\n    try { doc.getFieldValueMap().clear();               fail( \"should be unsupported!\" ); } catch( Exception ex ){}\n    try { doc.getFieldValueMap().containsValue( null ); fail( \"should be unsupported!\" ); } catch( Exception ex ){}\n    try { doc.getFieldValueMap().entrySet();            fail( \"should be unsupported!\" ); } catch( Exception ex ){}\n    try { doc.getFieldValueMap().putAll( null );        fail( \"should be unsupported!\" ); } catch( Exception ex ){}\n    try { doc.getFieldValueMap().values();              fail( \"should be unsupported!\" ); } catch( Exception ex ){}\n\n    assertEquals( null, doc.getFieldValueMap().get( \"aaa\" ) );\n    doc.setField( \"aaa\", \"bbb\" );\n    assertEquals( \"bbb\", doc.getFieldValueMap().get( \"aaa\" ) );\n    doc.getFieldValueMap().remove( \"aaa\" );\n    assertEquals( null, doc.getFieldValueMap().get( \"aaa\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a07a53434512d96d1e93e3e4a2ea16c202ec3e7e","date":1212696628,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/common/SolrDocumentTest#testUnsupportedStuff().mjava","pathOld":"src/test/org/apache/solr/common/SolrDocumentTest#testUnsupportedStuff().mjava","sourceNew":"  public void testUnsupportedStuff()\n  {\n    SolrDocument doc = new SolrDocument();\n    \n    try { doc.getFieldValueMap().clear();               fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValueMap().containsValue( null ); fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValueMap().entrySet();            fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValueMap().putAll( null );        fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValueMap().values();              fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValueMap().remove( \"key\" );       fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValueMap().put( \"key\", \"value\" ); fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n\n    try { doc.getFieldValuesMap().clear();               fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValuesMap().containsValue( null ); fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValuesMap().entrySet();            fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValuesMap().putAll( null );        fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValuesMap().values();              fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValuesMap().remove( \"key\" );       fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValueMap().put( \"key\", Collections.EMPTY_LIST ); fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n\n    assertEquals( null, doc.getFieldValueMap().get( \"aaa\" ) );\n    doc.setField( \"aaa\", \"bbb\" );\n    assertEquals( \"bbb\", doc.getFieldValueMap().get( \"aaa\" ) );\n  }\n\n","sourceOld":"  public void testUnsupportedStuff()\n  {\n    SolrDocument doc = new SolrDocument();\n\n    try { doc.getFieldValueMap().clear();               fail( \"should be unsupported!\" ); } catch( Exception ex ){}\n    try { doc.getFieldValueMap().containsValue( null ); fail( \"should be unsupported!\" ); } catch( Exception ex ){}\n    try { doc.getFieldValueMap().entrySet();            fail( \"should be unsupported!\" ); } catch( Exception ex ){}\n    try { doc.getFieldValueMap().putAll( null );        fail( \"should be unsupported!\" ); } catch( Exception ex ){}\n    try { doc.getFieldValueMap().values();              fail( \"should be unsupported!\" ); } catch( Exception ex ){}\n\n    assertEquals( null, doc.getFieldValueMap().get( \"aaa\" ) );\n    doc.setField( \"aaa\", \"bbb\" );\n    assertEquals( \"bbb\", doc.getFieldValueMap().get( \"aaa\" ) );\n    doc.getFieldValueMap().remove( \"aaa\" );\n    assertEquals( null, doc.getFieldValueMap().get( \"aaa\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/SolrDocumentTest#testUnsupportedStuff().mjava","pathOld":"src/test/org/apache/solr/common/SolrDocumentTest#testUnsupportedStuff().mjava","sourceNew":"  public void testUnsupportedStuff()\n  {\n    SolrDocument doc = new SolrDocument();\n    \n    try { doc.getFieldValueMap().clear();               fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValueMap().containsValue( null ); fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValueMap().entrySet();            fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValueMap().putAll( null );        fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValueMap().values();              fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValueMap().remove( \"key\" );       fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValueMap().put( \"key\", \"value\" ); fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n\n    try { doc.getFieldValuesMap().clear();               fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValuesMap().containsValue( null ); fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValuesMap().entrySet();            fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValuesMap().putAll( null );        fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValuesMap().values();              fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValuesMap().remove( \"key\" );       fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValueMap().put( \"key\", Collections.EMPTY_LIST ); fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n\n    assertEquals( null, doc.getFieldValueMap().get( \"aaa\" ) );\n    doc.setField( \"aaa\", \"bbb\" );\n    assertEquals( \"bbb\", doc.getFieldValueMap().get( \"aaa\" ) );\n  }\n\n","sourceOld":"  public void testUnsupportedStuff()\n  {\n    SolrDocument doc = new SolrDocument();\n    \n    try { doc.getFieldValueMap().clear();               fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValueMap().containsValue( null ); fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValueMap().entrySet();            fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValueMap().putAll( null );        fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValueMap().values();              fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValueMap().remove( \"key\" );       fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValueMap().put( \"key\", \"value\" ); fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n\n    try { doc.getFieldValuesMap().clear();               fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValuesMap().containsValue( null ); fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValuesMap().entrySet();            fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValuesMap().putAll( null );        fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValuesMap().values();              fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValuesMap().remove( \"key\" );       fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n    try { doc.getFieldValueMap().put( \"key\", Collections.EMPTY_LIST ); fail( \"should be unsupported!\" ); } catch( UnsupportedOperationException ex ){}\n\n    assertEquals( null, doc.getFieldValueMap().get( \"aaa\" ) );\n    doc.setField( \"aaa\", \"bbb\" );\n    assertEquals( \"bbb\", doc.getFieldValueMap().get( \"aaa\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a07a53434512d96d1e93e3e4a2ea16c202ec3e7e":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["a07a53434512d96d1e93e3e4a2ea16c202ec3e7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["a07a53434512d96d1e93e3e4a2ea16c202ec3e7e"],"a07a53434512d96d1e93e3e4a2ea16c202ec3e7e":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}