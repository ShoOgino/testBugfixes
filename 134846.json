{"path":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","commits":[{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicIndexReader).mjava","sourceNew":"  public static void checkNorms(AtomicReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.fieldType().omitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          DocValues norms = MultiDocValues.getNormDocValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(AtomicIndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.fieldType().omitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          DocValues norms = MultiDocValues.getNormDocValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","sourceNew":"  public static void checkNorms(AtomicReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.fieldType().omitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          DocValues norms = MultiDocValues.getNormDocValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.fieldType().omitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          DocValues norms = MultiDocValues.getNormDocValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","sourceNew":"  public static void checkNorms(AtomicReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.fieldType().omitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          DocValues norms = MultiDocValues.getNormDocValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(AtomicReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.fieldType().omitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          DocValues norms = MultiDocValues.getNormDocValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da6d5ac19a80d65b1e864251f155d30960353b7e","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}