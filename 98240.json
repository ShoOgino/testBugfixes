{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,Map[String,String],Bucket[],FieldComparator[],Metric[],int,String).mjava","commits":[{"id":"5287d62ad5da27d35a88ada646ae7d9adfb76826","date":1450041712,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,Map[String,String],Bucket[],FieldComparator[],Metric[],int,String).mjava","pathOld":"/dev/null","sourceNew":"  private void init(String collection, Map<String, String> props, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.props   = props;\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,Map[String,String],Bucket[],FieldComparator[],Metric[],int,String).mjava","sourceNew":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = params;\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","sourceOld":"  private void init(String collection, Map<String, String> props, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.props   = props;\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,Map[String,String],Bucket[],FieldComparator[],Metric[],int,String).mjava","sourceNew":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = params;\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","sourceOld":"  private void init(String collection, Map<String, String> props, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.props   = props;\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,Map[String,String],Bucket[],FieldComparator[],Metric[],int,String).mjava","sourceNew":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = params;\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","sourceOld":"  private void init(String collection, Map<String, String> props, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.props   = props;\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,Map[String,String],Bucket[],FieldComparator[],Metric[],int,String).mjava","sourceNew":null,"sourceOld":"  private void init(String collection, Map<String, String> props, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.props   = props;\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5287d62ad5da27d35a88ada646ae7d9adfb76826":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":["5287d62ad5da27d35a88ada646ae7d9adfb76826","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["5287d62ad5da27d35a88ada646ae7d9adfb76826"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5287d62ad5da27d35a88ada646ae7d9adfb76826","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["5287d62ad5da27d35a88ada646ae7d9adfb76826","826d15444ddf61716dc768c229cd54b2c2ccce1c"]},"commit2Childs":{"5287d62ad5da27d35a88ada646ae7d9adfb76826":["e66a459d38c1c4a2f97128433dab546f683a9fed","826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5287d62ad5da27d35a88ada646ae7d9adfb76826"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}