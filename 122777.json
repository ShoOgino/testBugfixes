{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newBoxQuery(String,double,double,double,double).mjava","commits":[{"id":"c6e339fe2e96467edfc4bf0aa5654e4da37e2d1b","date":1459439641,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newBoxQuery(String,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a query for matching a box.\n   * <p>\n   * The box may cross over the dateline.\n   * @param field field name. must not be null.\n   * @param minLatitude latitude lower bound: must be within standard +/-90 coordinate bounds.\n   * @param maxLatitude latitude upper bound: must be within standard +/-90 coordinate bounds.\n   * @param minLongitude longitude lower bound: must be within standard +/-180 coordinate bounds.\n   * @param maxLongitude longitude upper bound: must be within standard +/-180 coordinate bounds.\n   * @return query matching points within this box\n   * @throws IllegalArgumentException if {@code field} is null, or the box has invalid coordinates.\n   */\n  public static Query newBoxQuery(final String field, final double minLatitude, final double maxLatitude, final double minLongitude, final double maxLongitude) {\n    checkLatitude(minLatitude);\n    checkLongitude(minLongitude);\n    checkLatitude(maxLatitude);\n    checkLongitude(maxLongitude);\n    final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.WGS84, \n      fromDegrees(maxLatitude), fromDegrees(minLatitude), fromDegrees(minLongitude), fromDegrees(maxLongitude));\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7593e6c5cc33e73fa12f7d1b0035d218d3a36309","date":1459810619,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newBoxQuery(String,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newBoxQuery(String,double,double,double,double).mjava","sourceNew":"  /**\n   * Create a query for matching a box.\n   * <p>\n   * The box may cross over the dateline.\n   * @param field field name. must not be null.\n   * @param minLatitude latitude lower bound: must be within standard +/-90 coordinate bounds.\n   * @param maxLatitude latitude upper bound: must be within standard +/-90 coordinate bounds.\n   * @param minLongitude longitude lower bound: must be within standard +/-180 coordinate bounds.\n   * @param maxLongitude longitude upper bound: must be within standard +/-180 coordinate bounds.\n   * @return query matching points within this box\n   * @throws IllegalArgumentException if {@code field} is null, or the box has invalid coordinates.\n   */\n  public static Query newBoxQuery(final String field, final double minLatitude, final double maxLatitude, final double minLongitude, final double maxLongitude) {\n    GeoUtils.checkLatitude(minLatitude);\n    GeoUtils.checkLongitude(minLongitude);\n    GeoUtils.checkLatitude(maxLatitude);\n    GeoUtils.checkLongitude(maxLongitude);\n    final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.WGS84, \n      fromDegrees(maxLatitude), fromDegrees(minLatitude), fromDegrees(minLongitude), fromDegrees(maxLongitude));\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /**\n   * Create a query for matching a box.\n   * <p>\n   * The box may cross over the dateline.\n   * @param field field name. must not be null.\n   * @param minLatitude latitude lower bound: must be within standard +/-90 coordinate bounds.\n   * @param maxLatitude latitude upper bound: must be within standard +/-90 coordinate bounds.\n   * @param minLongitude longitude lower bound: must be within standard +/-180 coordinate bounds.\n   * @param maxLongitude longitude upper bound: must be within standard +/-180 coordinate bounds.\n   * @return query matching points within this box\n   * @throws IllegalArgumentException if {@code field} is null, or the box has invalid coordinates.\n   */\n  public static Query newBoxQuery(final String field, final double minLatitude, final double maxLatitude, final double minLongitude, final double maxLongitude) {\n    checkLatitude(minLatitude);\n    checkLongitude(minLongitude);\n    checkLatitude(maxLatitude);\n    checkLongitude(maxLongitude);\n    final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.WGS84, \n      fromDegrees(maxLatitude), fromDegrees(minLatitude), fromDegrees(minLongitude), fromDegrees(maxLongitude));\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newBoxQuery(String,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newBoxQuery(String,double,double,double,double).mjava","sourceNew":"  /**\n   * Create a query for matching a box.\n   * <p>\n   * The box may cross over the dateline.\n   * @param field field name. must not be null.\n   * @param minLatitude latitude lower bound: must be within standard +/-90 coordinate bounds.\n   * @param maxLatitude latitude upper bound: must be within standard +/-90 coordinate bounds.\n   * @param minLongitude longitude lower bound: must be within standard +/-180 coordinate bounds.\n   * @param maxLongitude longitude upper bound: must be within standard +/-180 coordinate bounds.\n   * @return query matching points within this box\n   * @throws IllegalArgumentException if {@code field} is null, or the box has invalid coordinates.\n   */\n  public static Query newBoxQuery(final String field, final double minLatitude, final double maxLatitude, final double minLongitude, final double maxLongitude) {\n    GeoUtils.checkLatitude(minLatitude);\n    GeoUtils.checkLongitude(minLongitude);\n    GeoUtils.checkLatitude(maxLatitude);\n    GeoUtils.checkLongitude(maxLongitude);\n    final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.WGS84, \n      fromDegrees(maxLatitude), fromDegrees(minLatitude), fromDegrees(minLongitude), fromDegrees(maxLongitude));\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /**\n   * Create a query for matching a box.\n   * <p>\n   * The box may cross over the dateline.\n   * @param field field name. must not be null.\n   * @param minLatitude latitude lower bound: must be within standard +/-90 coordinate bounds.\n   * @param maxLatitude latitude upper bound: must be within standard +/-90 coordinate bounds.\n   * @param minLongitude longitude lower bound: must be within standard +/-180 coordinate bounds.\n   * @param maxLongitude longitude upper bound: must be within standard +/-180 coordinate bounds.\n   * @return query matching points within this box\n   * @throws IllegalArgumentException if {@code field} is null, or the box has invalid coordinates.\n   */\n  public static Query newBoxQuery(final String field, final double minLatitude, final double maxLatitude, final double minLongitude, final double maxLongitude) {\n    checkLatitude(minLatitude);\n    checkLongitude(minLongitude);\n    checkLatitude(maxLatitude);\n    checkLongitude(maxLongitude);\n    final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.WGS84, \n      fromDegrees(maxLatitude), fromDegrees(minLatitude), fromDegrees(minLongitude), fromDegrees(maxLongitude));\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f32db9456b1759bf570a512581f5cea321f69f73","date":1463520039,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newBoxQuery(String,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newBoxQuery(String,double,double,double,double).mjava","sourceNew":"  /**\n   * Create a query for matching a box.\n   * <p>\n   * The box may cross over the dateline.\n   * @param field field name. must not be null.\n   * @param minLatitude latitude lower bound: must be within standard +/-90 coordinate bounds.\n   * @param maxLatitude latitude upper bound: must be within standard +/-90 coordinate bounds.\n   * @param minLongitude longitude lower bound: must be within standard +/-180 coordinate bounds.\n   * @param maxLongitude longitude upper bound: must be within standard +/-180 coordinate bounds.\n   * @return query matching points within this box\n   * @throws IllegalArgumentException if {@code field} is null, or the box has invalid coordinates.\n   */\n  public static Query newBoxQuery(final String field, final double minLatitude, final double maxLatitude, final double minLongitude, final double maxLongitude) {\n    final GeoShape shape = Geo3DUtil.fromBox(minLatitude, maxLatitude, minLongitude, maxLongitude);\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /**\n   * Create a query for matching a box.\n   * <p>\n   * The box may cross over the dateline.\n   * @param field field name. must not be null.\n   * @param minLatitude latitude lower bound: must be within standard +/-90 coordinate bounds.\n   * @param maxLatitude latitude upper bound: must be within standard +/-90 coordinate bounds.\n   * @param minLongitude longitude lower bound: must be within standard +/-180 coordinate bounds.\n   * @param maxLongitude longitude upper bound: must be within standard +/-180 coordinate bounds.\n   * @return query matching points within this box\n   * @throws IllegalArgumentException if {@code field} is null, or the box has invalid coordinates.\n   */\n  public static Query newBoxQuery(final String field, final double minLatitude, final double maxLatitude, final double minLongitude, final double maxLongitude) {\n    GeoUtils.checkLatitude(minLatitude);\n    GeoUtils.checkLongitude(minLongitude);\n    GeoUtils.checkLatitude(maxLatitude);\n    GeoUtils.checkLongitude(maxLongitude);\n    final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.WGS84, \n      fromDegrees(maxLatitude), fromDegrees(minLatitude), fromDegrees(minLongitude), fromDegrees(maxLongitude));\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c9819d04ff44d2877a5a19257cd662751284a5f","date":1463541580,"type":3,"author":"David Smiley","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newBoxQuery(String,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newBoxQuery(String,double,double,double,double).mjava","sourceNew":"  /**\n   * Create a query for matching a box.\n   * <p>\n   * The box may cross over the dateline.\n   * @param field field name. must not be null.\n   * @param minLatitude latitude lower bound: must be within standard +/-90 coordinate bounds.\n   * @param maxLatitude latitude upper bound: must be within standard +/-90 coordinate bounds.\n   * @param minLongitude longitude lower bound: must be within standard +/-180 coordinate bounds.\n   * @param maxLongitude longitude upper bound: must be within standard +/-180 coordinate bounds.\n   * @return query matching points within this box\n   * @throws IllegalArgumentException if {@code field} is null, or the box has invalid coordinates.\n   */\n  public static Query newBoxQuery(final String field, final double minLatitude, final double maxLatitude, final double minLongitude, final double maxLongitude) {\n    final GeoShape shape = Geo3DUtil.fromBox(minLatitude, maxLatitude, minLongitude, maxLongitude);\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /**\n   * Create a query for matching a box.\n   * <p>\n   * The box may cross over the dateline.\n   * @param field field name. must not be null.\n   * @param minLatitude latitude lower bound: must be within standard +/-90 coordinate bounds.\n   * @param maxLatitude latitude upper bound: must be within standard +/-90 coordinate bounds.\n   * @param minLongitude longitude lower bound: must be within standard +/-180 coordinate bounds.\n   * @param maxLongitude longitude upper bound: must be within standard +/-180 coordinate bounds.\n   * @return query matching points within this box\n   * @throws IllegalArgumentException if {@code field} is null, or the box has invalid coordinates.\n   */\n  public static Query newBoxQuery(final String field, final double minLatitude, final double maxLatitude, final double minLongitude, final double maxLongitude) {\n    GeoUtils.checkLatitude(minLatitude);\n    GeoUtils.checkLongitude(minLongitude);\n    GeoUtils.checkLatitude(maxLatitude);\n    GeoUtils.checkLongitude(maxLongitude);\n    final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.WGS84, \n      fromDegrees(maxLatitude), fromDegrees(minLatitude), fromDegrees(minLongitude), fromDegrees(maxLongitude));\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newBoxQuery(String,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newBoxQuery(String,double,double,double,double).mjava","sourceNew":"  /**\n   * Create a query for matching a box.\n   * <p>\n   * The box may cross over the dateline.\n   * @param field field name. must not be null.\n   * @param minLatitude latitude lower bound: must be within standard +/-90 coordinate bounds.\n   * @param maxLatitude latitude upper bound: must be within standard +/-90 coordinate bounds.\n   * @param minLongitude longitude lower bound: must be within standard +/-180 coordinate bounds.\n   * @param maxLongitude longitude upper bound: must be within standard +/-180 coordinate bounds.\n   * @return query matching points within this box\n   * @throws IllegalArgumentException if {@code field} is null, or the box has invalid coordinates.\n   */\n  public static Query newBoxQuery(final String field, final double minLatitude, final double maxLatitude, final double minLongitude, final double maxLongitude) {\n    final GeoShape shape = Geo3DUtil.fromBox(minLatitude, maxLatitude, minLongitude, maxLongitude);\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /**\n   * Create a query for matching a box.\n   * <p>\n   * The box may cross over the dateline.\n   * @param field field name. must not be null.\n   * @param minLatitude latitude lower bound: must be within standard +/-90 coordinate bounds.\n   * @param maxLatitude latitude upper bound: must be within standard +/-90 coordinate bounds.\n   * @param minLongitude longitude lower bound: must be within standard +/-180 coordinate bounds.\n   * @param maxLongitude longitude upper bound: must be within standard +/-180 coordinate bounds.\n   * @return query matching points within this box\n   * @throws IllegalArgumentException if {@code field} is null, or the box has invalid coordinates.\n   */\n  public static Query newBoxQuery(final String field, final double minLatitude, final double maxLatitude, final double minLongitude, final double maxLongitude) {\n    GeoUtils.checkLatitude(minLatitude);\n    GeoUtils.checkLongitude(minLongitude);\n    GeoUtils.checkLatitude(maxLatitude);\n    GeoUtils.checkLongitude(maxLongitude);\n    final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.WGS84, \n      fromDegrees(maxLatitude), fromDegrees(minLatitude), fromDegrees(minLongitude), fromDegrees(maxLongitude));\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newBoxQuery(String,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newBoxQuery(String,double,double,double,double).mjava","sourceNew":"  /**\n   * Create a query for matching a box.\n   * <p>\n   * The box may cross over the dateline.\n   * @param field field name. must not be null.\n   * @param minLatitude latitude lower bound: must be within standard +/-90 coordinate bounds.\n   * @param maxLatitude latitude upper bound: must be within standard +/-90 coordinate bounds.\n   * @param minLongitude longitude lower bound: must be within standard +/-180 coordinate bounds.\n   * @param maxLongitude longitude upper bound: must be within standard +/-180 coordinate bounds.\n   * @return query matching points within this box\n   * @throws IllegalArgumentException if {@code field} is null, or the box has invalid coordinates.\n   */\n  public static Query newBoxQuery(final String field, final double minLatitude, final double maxLatitude, final double minLongitude, final double maxLongitude) {\n    final GeoShape shape = Geo3DUtil.fromBox(minLatitude, maxLatitude, minLongitude, maxLongitude);\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /**\n   * Create a query for matching a box.\n   * <p>\n   * The box may cross over the dateline.\n   * @param field field name. must not be null.\n   * @param minLatitude latitude lower bound: must be within standard +/-90 coordinate bounds.\n   * @param maxLatitude latitude upper bound: must be within standard +/-90 coordinate bounds.\n   * @param minLongitude longitude lower bound: must be within standard +/-180 coordinate bounds.\n   * @param maxLongitude longitude upper bound: must be within standard +/-180 coordinate bounds.\n   * @return query matching points within this box\n   * @throws IllegalArgumentException if {@code field} is null, or the box has invalid coordinates.\n   */\n  public static Query newBoxQuery(final String field, final double minLatitude, final double maxLatitude, final double minLongitude, final double maxLongitude) {\n    GeoUtils.checkLatitude(minLatitude);\n    GeoUtils.checkLongitude(minLongitude);\n    GeoUtils.checkLatitude(maxLatitude);\n    GeoUtils.checkLongitude(maxLongitude);\n    final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.WGS84, \n      fromDegrees(maxLatitude), fromDegrees(minLatitude), fromDegrees(minLongitude), fromDegrees(maxLongitude));\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newBoxQuery(String,PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newBoxQuery(String,double,double,double,double).mjava","sourceNew":"  /**\n   * Create a query for matching a box.\n   * <p>\n   * The box may cross over the dateline.\n   * @param field field name. must not be null.\n   * @param minLatitude latitude lower bound: must be within standard +/-90 coordinate bounds.\n   * @param maxLatitude latitude upper bound: must be within standard +/-90 coordinate bounds.\n   * @param minLongitude longitude lower bound: must be within standard +/-180 coordinate bounds.\n   * @param maxLongitude longitude upper bound: must be within standard +/-180 coordinate bounds.\n   * @return query matching points within this box\n   * @throws IllegalArgumentException if {@code field} is null, or the box has invalid coordinates.\n   */\n  public static Query newBoxQuery(final String field, final PlanetModel planetModel, final double minLatitude, final double maxLatitude, final double minLongitude, final double maxLongitude) {\n    final GeoShape shape = Geo3DUtil.fromBox(planetModel, minLatitude, maxLatitude, minLongitude, maxLongitude);\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /**\n   * Create a query for matching a box.\n   * <p>\n   * The box may cross over the dateline.\n   * @param field field name. must not be null.\n   * @param minLatitude latitude lower bound: must be within standard +/-90 coordinate bounds.\n   * @param maxLatitude latitude upper bound: must be within standard +/-90 coordinate bounds.\n   * @param minLongitude longitude lower bound: must be within standard +/-180 coordinate bounds.\n   * @param maxLongitude longitude upper bound: must be within standard +/-180 coordinate bounds.\n   * @return query matching points within this box\n   * @throws IllegalArgumentException if {@code field} is null, or the box has invalid coordinates.\n   */\n  public static Query newBoxQuery(final String field, final double minLatitude, final double maxLatitude, final double minLongitude, final double maxLongitude) {\n    final GeoShape shape = Geo3DUtil.fromBox(minLatitude, maxLatitude, minLongitude, maxLongitude);\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6e339fe2e96467edfc4bf0aa5654e4da37e2d1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["c6e339fe2e96467edfc4bf0aa5654e4da37e2d1b","7593e6c5cc33e73fa12f7d1b0035d218d3a36309"],"9c9819d04ff44d2877a5a19257cd662751284a5f":["7593e6c5cc33e73fa12f7d1b0035d218d3a36309","f32db9456b1759bf570a512581f5cea321f69f73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"f32db9456b1759bf570a512581f5cea321f69f73":["7593e6c5cc33e73fa12f7d1b0035d218d3a36309"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7593e6c5cc33e73fa12f7d1b0035d218d3a36309","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"7593e6c5cc33e73fa12f7d1b0035d218d3a36309":["c6e339fe2e96467edfc4bf0aa5654e4da37e2d1b"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["7593e6c5cc33e73fa12f7d1b0035d218d3a36309","f32db9456b1759bf570a512581f5cea321f69f73"]},"commit2Childs":{"c6e339fe2e96467edfc4bf0aa5654e4da37e2d1b":["09af2c9610ce53a4b25fd99344299b40318a4a1a","7593e6c5cc33e73fa12f7d1b0035d218d3a36309"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"9c9819d04ff44d2877a5a19257cd662751284a5f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6e339fe2e96467edfc4bf0aa5654e4da37e2d1b"],"f32db9456b1759bf570a512581f5cea321f69f73":["9c9819d04ff44d2877a5a19257cd662751284a5f","d470c8182e92b264680e34081b75e70a9f2b3c89"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"7593e6c5cc33e73fa12f7d1b0035d218d3a36309":["09af2c9610ce53a4b25fd99344299b40318a4a1a","9c9819d04ff44d2877a5a19257cd662751284a5f","f32db9456b1759bf570a512581f5cea321f69f73","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","9c9819d04ff44d2877a5a19257cd662751284a5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}