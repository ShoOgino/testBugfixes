{"path":"solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker#init(NamedList,SolrCore).mjava","commits":[{"id":"0ad9ec888e587ca9a3279368245cdf00aabdc108","date":1338832525,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public String init(NamedList config, SolrCore core) {\n    for (int i = 0; i < checkers.size(); i++) {\n      SolrSpellChecker c = checkers.get(i);\n      String dn = c.init(config, core);\n      \n      //TODO:  in the future, we could develop this further to allow\n      //        multiple spellcheckers with per-field dictionaries...\n      if (dictionaryName != null && !dictionaryName.equals(dn)) {\n        throw new IllegalArgumentException(\n            \"Cannot have more than one dictionary. (\" + dn + \" , \"\n                + dictionaryName + \")\");\n      }\n      dictionaryName = dn;\n    }\n    if (dictionaryName == null) {\n      dictionaryName = DEFAULT_DICTIONARY_NAME;\n    }\n    initalized = true;\n    return dictionaryName;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8a5b40aa0e4052014f868a1f29d5e611c9dd9603"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9","date":1419431639,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public String init(NamedList config, SolrCore core) {\n    for (int i = 0; i < checkers.size(); i++) {\n      SolrSpellChecker c = checkers.get(i);\n      String dn = c.init(config, core);\n      \n      //TODO:  in the future, we could develop this further to allow\n      //        multiple spellcheckers with per-field dictionaries...\n      if (dictionaryName != null && !dictionaryName.equals(dn)) {\n        throw new IllegalArgumentException(\n            \"Cannot have more than one dictionary. (\" + dn + \" , \"\n                + dictionaryName + \")\");\n      }\n      dictionaryName = dn;\n    }\n    if (dictionaryName == null) {\n      dictionaryName = DEFAULT_DICTIONARY_NAME;\n    }\n    initialized = true;\n    return dictionaryName;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public String init(NamedList config, SolrCore core) {\n    for (int i = 0; i < checkers.size(); i++) {\n      SolrSpellChecker c = checkers.get(i);\n      String dn = c.init(config, core);\n      \n      //TODO:  in the future, we could develop this further to allow\n      //        multiple spellcheckers with per-field dictionaries...\n      if (dictionaryName != null && !dictionaryName.equals(dn)) {\n        throw new IllegalArgumentException(\n            \"Cannot have more than one dictionary. (\" + dn + \" , \"\n                + dictionaryName + \")\");\n      }\n      dictionaryName = dn;\n    }\n    if (dictionaryName == null) {\n      dictionaryName = DEFAULT_DICTIONARY_NAME;\n    }\n    initalized = true;\n    return dictionaryName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a5b40aa0e4052014f868a1f29d5e611c9dd9603","date":1523635966,"type":3,"author":"jdyer1","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(@SuppressWarnings(\"rawtypes\") NamedList config, SolrCore core) {\n    for (int i = 0; i < checkers.size(); i++) {\n      SolrSpellChecker c = checkers.get(i);\n      String dn = c.init(config, core);\n      \n      //TODO:  in the future, we could develop this further to allow\n      //        multiple spellcheckers with per-field dictionaries...\n      if (dictionaryName != null && !dictionaryName.equals(dn)) {\n        throw new IllegalArgumentException(\n            \"Cannot have more than one dictionary. (\" + dn + \" , \"\n                + dictionaryName + \")\");\n      }\n      dictionaryName = dn;\n    }\n    if (dictionaryName == null) {\n      dictionaryName = DEFAULT_DICTIONARY_NAME;\n    }\n    initialized = true;\n    return dictionaryName;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public String init(NamedList config, SolrCore core) {\n    for (int i = 0; i < checkers.size(); i++) {\n      SolrSpellChecker c = checkers.get(i);\n      String dn = c.init(config, core);\n      \n      //TODO:  in the future, we could develop this further to allow\n      //        multiple spellcheckers with per-field dictionaries...\n      if (dictionaryName != null && !dictionaryName.equals(dn)) {\n        throw new IllegalArgumentException(\n            \"Cannot have more than one dictionary. (\" + dn + \" , \"\n                + dictionaryName + \")\");\n      }\n      dictionaryName = dn;\n    }\n    if (dictionaryName == null) {\n      dictionaryName = DEFAULT_DICTIONARY_NAME;\n    }\n    initialized = true;\n    return dictionaryName;\n  }\n\n","bugFix":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cc17990871fe421019acbdd0ed59c8644b9154c","date":1523636883,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(@SuppressWarnings(\"rawtypes\") NamedList config, SolrCore core) {\n    for (int i = 0; i < checkers.size(); i++) {\n      SolrSpellChecker c = checkers.get(i);\n      String dn = c.init(config, core);\n      \n      //TODO:  in the future, we could develop this further to allow\n      //        multiple spellcheckers with per-field dictionaries...\n      if (dictionaryName != null && !dictionaryName.equals(dn)) {\n        throw new IllegalArgumentException(\n            \"Cannot have more than one dictionary. (\" + dn + \" , \"\n                + dictionaryName + \")\");\n      }\n      dictionaryName = dn;\n    }\n    if (dictionaryName == null) {\n      dictionaryName = DEFAULT_DICTIONARY_NAME;\n    }\n    initialized = true;\n    return dictionaryName;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public String init(NamedList config, SolrCore core) {\n    for (int i = 0; i < checkers.size(); i++) {\n      SolrSpellChecker c = checkers.get(i);\n      String dn = c.init(config, core);\n      \n      //TODO:  in the future, we could develop this further to allow\n      //        multiple spellcheckers with per-field dictionaries...\n      if (dictionaryName != null && !dictionaryName.equals(dn)) {\n        throw new IllegalArgumentException(\n            \"Cannot have more than one dictionary. (\" + dn + \" , \"\n                + dictionaryName + \")\");\n      }\n      dictionaryName = dn;\n    }\n    if (dictionaryName == null) {\n      dictionaryName = DEFAULT_DICTIONARY_NAME;\n    }\n    initialized = true;\n    return dictionaryName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1cc17990871fe421019acbdd0ed59c8644b9154c":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9","8a5b40aa0e4052014f868a1f29d5e611c9dd9603"],"0ad9ec888e587ca9a3279368245cdf00aabdc108":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a5b40aa0e4052014f868a1f29d5e611c9dd9603":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1cc17990871fe421019acbdd0ed59c8644b9154c"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["0ad9ec888e587ca9a3279368245cdf00aabdc108"]},"commit2Childs":{"1cc17990871fe421019acbdd0ed59c8644b9154c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad9ec888e587ca9a3279368245cdf00aabdc108":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"8a5b40aa0e4052014f868a1f29d5e611c9dd9603":["1cc17990871fe421019acbdd0ed59c8644b9154c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["1cc17990871fe421019acbdd0ed59c8644b9154c","8a5b40aa0e4052014f868a1f29d5e611c9dd9603"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}