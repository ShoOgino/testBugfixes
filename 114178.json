{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(DocumentsWriterFlushControl).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(DocumentsWriterFlushControl).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(DocumentsWriterFlushControl).mjava","sourceNew":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link DocumentsWriterStallControl} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(DocumentsWriterFlushControl flushControl) {\n    do {\n      // if we have more flushing / blocked DWPT than numActiveDWPT we stall!\n      // don't stall if we have queued flushes - threads should be hijacked instead\n      while (flushControl.netBytes() > flushControl.stallLimitBytes()) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","sourceOld":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link DocumentsWriterStallControl} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(DocumentsWriterFlushControl flushControl) {\n    do {\n      // if we have more flushing / blocked DWPT than numActiveDWPT we stall!\n      // don't stall if we have queued flushes - threads should be hijacked instead\n      while (flushControl.netBytes() > flushControl.stallLimitBytes()) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6","date":1337196931,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(MemoryController).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(DocumentsWriterFlushControl).mjava","sourceNew":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link DocumentsWriterStallControl} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(MemoryController controller) {\n    do {\n      // if we have more flushing / blocked DWPT than numActiveDWPT we stall!\n      // don't stall if we have queued flushes - threads should be hijacked instead\n      while (controller.netBytes() > controller.stallLimitBytes()) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","sourceOld":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link DocumentsWriterStallControl} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(DocumentsWriterFlushControl flushControl) {\n    do {\n      // if we have more flushing / blocked DWPT than numActiveDWPT we stall!\n      // don't stall if we have queued flushes - threads should be hijacked instead\n      while (flushControl.netBytes() > flushControl.stallLimitBytes()) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","bugFix":null,"bugIntro":["7a0bb7b6eeee9103dc4c7cb2dfd62a9a41894fc2","7a0bb7b6eeee9103dc4c7cb2dfd62a9a41894fc2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(MemoryController).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(DocumentsWriterFlushControl).mjava","sourceNew":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link DocumentsWriterStallControl} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(MemoryController controller) {\n    do {\n      // if we have more flushing / blocked DWPT than numActiveDWPT we stall!\n      // don't stall if we have queued flushes - threads should be hijacked instead\n      while (controller.netBytes() > controller.stallLimitBytes()) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","sourceOld":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link DocumentsWriterStallControl} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(DocumentsWriterFlushControl flushControl) {\n    do {\n      // if we have more flushing / blocked DWPT than numActiveDWPT we stall!\n      // don't stall if we have queued flushes - threads should be hijacked instead\n      while (flushControl.netBytes() > flushControl.stallLimitBytes()) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef0d8a69209261514c5739c770bba706c2308450":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6"]},"commit2Childs":{"f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6","ef0d8a69209261514c5739c770bba706c2308450"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}