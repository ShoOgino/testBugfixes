{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#initAndGetDataDir().mjava","commits":[{"id":"9799ebcab48102552d92f7807965a91fb6e116f7","date":1564676118,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#initAndGetDataDir().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Subclasses may call this method to access the \"dataDir\" that will be used by \n   * {@link #initCore} (either prior to or after the core is created).\n   * <p>\n   * If the dataDir has not yet been initialized when this method is called, this method will do so.\n   * Calling {@link #deleteCore} will \"reset\" the value, such that subsequent calls will \n   * re-initialize a new value.  All directories returned by any calls to this method will \n   * automatically be cleaned up per {@link #createTempDir}\n   * </p>\n   * <p>\n   * NOTE: calling this method is not requried, it will be implicitly called as needed when\n   * initializing cores.  Callers that don't care about using {@link #initCore} and just want\n   * a temporary directory to put data in sould instead be using {@link #createTempDir} directly.\n   * </p>\n   *\n   * @see #initCoreDataDir\n   */\n  protected static File initAndGetDataDir() {\n    File dataDir = initCoreDataDir;\n    if (null == dataDir) {\n      final int id = dataDirCount.incrementAndGet();\n      dataDir = initCoreDataDir = createTempDir(\"data-dir-\"+ id).toFile();\n      assertNotNull(dataDir);\n      log.info(\"Created dataDir: {}\", dataDir.getAbsolutePath());\n    }\n    return dataDir;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":0,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#initAndGetDataDir().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Subclasses may call this method to access the \"dataDir\" that will be used by \n   * {@link #initCore} (either prior to or after the core is created).\n   * <p>\n   * If the dataDir has not yet been initialized when this method is called, this method will do so.\n   * Calling {@link #deleteCore} will \"reset\" the value, such that subsequent calls will \n   * re-initialize a new value.  All directories returned by any calls to this method will \n   * automatically be cleaned up per {@link #createTempDir}\n   * </p>\n   * <p>\n   * NOTE: calling this method is not requried, it will be implicitly called as needed when\n   * initializing cores.  Callers that don't care about using {@link #initCore} and just want\n   * a temporary directory to put data in sould instead be using {@link #createTempDir} directly.\n   * </p>\n   *\n   * @see #initCoreDataDir\n   */\n  protected static File initAndGetDataDir() {\n    File dataDir = initCoreDataDir;\n    if (null == dataDir) {\n      final int id = dataDirCount.incrementAndGet();\n      dataDir = initCoreDataDir = createTempDir(\"data-dir-\"+ id).toFile();\n      assertNotNull(dataDir);\n      log.info(\"Created dataDir: {}\", dataDir.getAbsolutePath());\n    }\n    return dataDir;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#initAndGetDataDir().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#initAndGetDataDir().mjava","sourceNew":"  /**\n   * Subclasses may call this method to access the \"dataDir\" that will be used by \n   * {@link #initCore} (either prior to or after the core is created).\n   * <p>\n   * If the dataDir has not yet been initialized when this method is called, this method will do so.\n   * Calling {@link #deleteCore} will \"reset\" the value, such that subsequent calls will \n   * re-initialize a new value.  All directories returned by any calls to this method will \n   * automatically be cleaned up per {@link #createTempDir}\n   * </p>\n   * <p>\n   * NOTE: calling this method is not requried, it will be implicitly called as needed when\n   * initializing cores.  Callers that don't care about using {@link #initCore} and just want\n   * a temporary directory to put data in sould instead be using {@link #createTempDir} directly.\n   * </p>\n   *\n   * @see #initCoreDataDir\n   */\n  protected static File initAndGetDataDir() {\n    File dataDir = initCoreDataDir;\n    if (null == dataDir) {\n      final int id = dataDirCount.incrementAndGet();\n      dataDir = initCoreDataDir = createTempDir(\"data-dir-\"+ id).toFile();\n      assertNotNull(dataDir);\n      if (log.isInfoEnabled()) {\n        log.info(\"Created dataDir: {}\", dataDir.getAbsolutePath());\n      }\n    }\n    return dataDir;\n  }\n\n","sourceOld":"  /**\n   * Subclasses may call this method to access the \"dataDir\" that will be used by \n   * {@link #initCore} (either prior to or after the core is created).\n   * <p>\n   * If the dataDir has not yet been initialized when this method is called, this method will do so.\n   * Calling {@link #deleteCore} will \"reset\" the value, such that subsequent calls will \n   * re-initialize a new value.  All directories returned by any calls to this method will \n   * automatically be cleaned up per {@link #createTempDir}\n   * </p>\n   * <p>\n   * NOTE: calling this method is not requried, it will be implicitly called as needed when\n   * initializing cores.  Callers that don't care about using {@link #initCore} and just want\n   * a temporary directory to put data in sould instead be using {@link #createTempDir} directly.\n   * </p>\n   *\n   * @see #initCoreDataDir\n   */\n  protected static File initAndGetDataDir() {\n    File dataDir = initCoreDataDir;\n    if (null == dataDir) {\n      final int id = dataDirCount.incrementAndGet();\n      dataDir = initCoreDataDir = createTempDir(\"data-dir-\"+ id).toFile();\n      assertNotNull(dataDir);\n      log.info(\"Created dataDir: {}\", dataDir.getAbsolutePath());\n    }\n    return dataDir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9799ebcab48102552d92f7807965a91fb6e116f7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["9799ebcab48102552d92f7807965a91fb6e116f7"],"f8061ddd97f3352007d927dae445884a6f3d857b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9799ebcab48102552d92f7807965a91fb6e116f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9799ebcab48102552d92f7807965a91fb6e116f7","f8061ddd97f3352007d927dae445884a6f3d857b"],"9799ebcab48102552d92f7807965a91fb6e116f7":["a966532d92cf9ba2856f15a8140151bb6b518e4b","f8061ddd97f3352007d927dae445884a6f3d857b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}