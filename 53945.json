{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","commits":[{"id":"fd4c4b2a55a46d2c45e3de4514f08e33215caa21","date":1288902330,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85d5cec53bbf37613c1a435c2f8c878cd7ff55e9","date":1290891674,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4","date":1305207152,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new MockTokenizer(reader, MockTokenizer.SIMPLE, true)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34934968e33dadf8cbcfa6d3b11779a3ced129d9","date":1314332179,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.count = 0;\n          }\n        };\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.count = 0;\n          }\n        };\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.count = 0;\n          }\n        };\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53ae89cd75b0acbdfb8890710c6742f3fb80e65d","date":1315806626,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new ReusableAnalyzerBase() {\n\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.count = 0;\n          }\n        });\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.count = 0;\n          }\n        };\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f49143da0a5d278a72f741432047fcfa6da996e","date":1316927425,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.count = 0;\n          }\n        });\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new ReusableAnalyzerBase() {\n\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.count = 0;\n          }\n        });\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.count = 0;\n          }\n        });\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                    t.field(),\n                                    new BytesRef(t.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    false);\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.count = 0;\n          }\n        });\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.count = 0;\n          }\n        });\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                    t.field(),\n                                    new BytesRef(t.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    false);\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.count = 0;\n          }\n        });\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              t.field(),\n                                              new BytesRef(t.text()));\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.count = 0;\n          }\n        });\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                    t.field(),\n                                    new BytesRef(t.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    false);\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.count = 0;\n          }\n        });\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                    t.field(),\n                                    new BytesRef(t.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    false);\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.count = 0;\n          }\n        });\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                    t.field(),\n                                    new BytesRef(t.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    false);\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.count = 0;\n          }\n        });\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                    t.field(),\n                                    new BytesRef(t.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    false);\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.count = 0;\n          }\n        });\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                    t.field(),\n                                    new BytesRef(t.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    false);\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.count = 0;\n          }\n        });\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                    t.field(),\n                                    new BytesRef(t.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    false);\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.count = 0;\n          }\n        });\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                    t.field(),\n                                    new BytesRef(t.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    false);\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new TokenFilter(tokenizer) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.count = 0;\n          }\n        });\n      }\n\n    });\n    conf.setMaxBufferedDocs(Math.max(3, conf.getMaxBufferedDocs()));\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(newField(\"content\", \"aa bb cc dd\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(3, reader.docFreq(t));\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                    t.field(),\n                                    new BytesRef(t.text()),\n                                    MultiFields.getLiveDocs(reader),\n                                    null,\n                                    false);\n\n    int count = 0;\n    while(tdocs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"34934968e33dadf8cbcfa6d3b11779a3ced129d9":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["872cff1d3a554e0cd64014cd97f88d3002b0f491","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["2f49143da0a5d278a72f741432047fcfa6da996e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","85d5cec53bbf37613c1a435c2f8c878cd7ff55e9"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4":["85d5cec53bbf37613c1a435c2f8c878cd7ff55e9"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["2f49143da0a5d278a72f741432047fcfa6da996e","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a3776dccca01c11e7046323cfad46a3b4a471233":["85d5cec53bbf37613c1a435c2f8c878cd7ff55e9","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2f49143da0a5d278a72f741432047fcfa6da996e":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["872cff1d3a554e0cd64014cd97f88d3002b0f491","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["3bb13258feba31ab676502787ab2e1779f129b7a","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["34934968e33dadf8cbcfa6d3b11779a3ced129d9"],"85d5cec53bbf37613c1a435c2f8c878cd7ff55e9":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"3bb13258feba31ab676502787ab2e1779f129b7a":["85a883878c0af761245ab048babc63d099f835f3","85d5cec53bbf37613c1a435c2f8c878cd7ff55e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"34934968e33dadf8cbcfa6d3b11779a3ced129d9":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["34934968e33dadf8cbcfa6d3b11779a3ced129d9","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"85a883878c0af761245ab048babc63d099f835f3":["3bb13258feba31ab676502787ab2e1779f129b7a"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","b65b350ca9588f9fc76ce7d6804160d06c45ff42","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["2f49143da0a5d278a72f741432047fcfa6da996e"],"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["85a883878c0af761245ab048babc63d099f835f3","85d5cec53bbf37613c1a435c2f8c878cd7ff55e9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2f49143da0a5d278a72f741432047fcfa6da996e":["872cff1d3a554e0cd64014cd97f88d3002b0f491","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"85d5cec53bbf37613c1a435c2f8c878cd7ff55e9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}