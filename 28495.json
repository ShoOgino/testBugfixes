{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#TrecJudge(BufferedReader).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#TrecJudge(BufferedReader).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#TrecJudge(BufferedReader).mjava","sourceNew":"  /**\n   * Constructor from a reader.\n   * <p>\n   * Expected input format:\n   * <pre>\n   *     qnum  0   doc-name     is-relevant\n   * </pre> \n   * Two sample lines:\n   * <pre> \n   *     19    0   doc303       1\n   *     19    0   doc7295      0\n   * </pre> \n   * @param reader where judgments are read from.\n   * @throws IOException \n   */\n  public TrecJudge (BufferedReader reader) throws IOException {\n    judgements = new HashMap<String,QRelJudgement>();\n    QRelJudgement curr = null;\n    String zero = \"0\";\n    String line;\n    \n    try {\n      while (null!=(line=reader.readLine())) {\n        line = line.trim();\n        if (line.length()==0 || '#'==line.charAt(0)) {\n          continue;\n        }\n        StringTokenizer st = new StringTokenizer(line);\n        String queryID = st.nextToken();\n        st.nextToken();\n        String docName = st.nextToken();\n        boolean relevant = !zero.equals(st.nextToken());\n        assert !st.hasMoreTokens() : \"wrong format: \"+line+\"  next: \"+st.nextToken();\n        if (relevant) { // only keep relevant docs\n          if (curr==null || !curr.queryID.equals(queryID)) {\n            curr = judgements.get(queryID);\n            if (curr==null) {\n              curr = new QRelJudgement(queryID);\n              judgements.put(queryID,curr);\n            }\n          }\n          curr.addRelevandDoc(docName);\n        }\n      }\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructor from a reader.\n   * <p>\n   * Expected input format:\n   * <pre>\n   *     qnum  0   doc-name     is-relevant\n   * </pre> \n   * Two sample lines:\n   * <pre> \n   *     19    0   doc303       1\n   *     19    0   doc7295      0\n   * </pre> \n   * @param reader where judgments are read from.\n   * @throws IOException \n   */\n  public TrecJudge (BufferedReader reader) throws IOException {\n    judgements = new HashMap<String,QRelJudgement>();\n    QRelJudgement curr = null;\n    String zero = \"0\";\n    String line;\n    \n    try {\n      while (null!=(line=reader.readLine())) {\n        line = line.trim();\n        if (line.length()==0 || '#'==line.charAt(0)) {\n          continue;\n        }\n        StringTokenizer st = new StringTokenizer(line);\n        String queryID = st.nextToken();\n        st.nextToken();\n        String docName = st.nextToken();\n        boolean relevant = !zero.equals(st.nextToken());\n        assert !st.hasMoreTokens() : \"wrong format: \"+line+\"  next: \"+st.nextToken();\n        if (relevant) { // only keep relevant docs\n          if (curr==null || !curr.queryID.equals(queryID)) {\n            curr = judgements.get(queryID);\n            if (curr==null) {\n              curr = new QRelJudgement(queryID);\n              judgements.put(queryID,curr);\n            }\n          }\n          curr.addRelevandDoc(docName);\n        }\n      }\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#TrecJudge(BufferedReader).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#TrecJudge(BufferedReader).mjava","sourceNew":"  /**\n   * Constructor from a reader.\n   * <p>\n   * Expected input format:\n   * <pre>\n   *     qnum  0   doc-name     is-relevant\n   * </pre> \n   * Two sample lines:\n   * <pre> \n   *     19    0   doc303       1\n   *     19    0   doc7295      0\n   * </pre> \n   * @param reader where judgments are read from.\n   * @throws IOException \n   */\n  public TrecJudge (BufferedReader reader) throws IOException {\n    judgements = new HashMap<String,QRelJudgement>();\n    QRelJudgement curr = null;\n    String zero = \"0\";\n    String line;\n    \n    try {\n      while (null!=(line=reader.readLine())) {\n        line = line.trim();\n        if (line.length()==0 || '#'==line.charAt(0)) {\n          continue;\n        }\n        StringTokenizer st = new StringTokenizer(line);\n        String queryID = st.nextToken();\n        st.nextToken();\n        String docName = st.nextToken();\n        boolean relevant = !zero.equals(st.nextToken());\n        assert !st.hasMoreTokens() : \"wrong format: \"+line+\"  next: \"+st.nextToken();\n        if (relevant) { // only keep relevant docs\n          if (curr==null || !curr.queryID.equals(queryID)) {\n            curr = judgements.get(queryID);\n            if (curr==null) {\n              curr = new QRelJudgement(queryID);\n              judgements.put(queryID,curr);\n            }\n          }\n          curr.addRelevandDoc(docName);\n        }\n      }\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructor from a reader.\n   * <p>\n   * Expected input format:\n   * <pre>\n   *     qnum  0   doc-name     is-relevant\n   * </pre> \n   * Two sample lines:\n   * <pre> \n   *     19    0   doc303       1\n   *     19    0   doc7295      0\n   * </pre> \n   * @param reader where judgments are read from.\n   * @throws IOException \n   */\n  public TrecJudge (BufferedReader reader) throws IOException {\n    judgements = new HashMap<String,QRelJudgement>();\n    QRelJudgement curr = null;\n    String zero = \"0\";\n    String line;\n    \n    try {\n      while (null!=(line=reader.readLine())) {\n        line = line.trim();\n        if (line.length()==0 || '#'==line.charAt(0)) {\n          continue;\n        }\n        StringTokenizer st = new StringTokenizer(line);\n        String queryID = st.nextToken();\n        st.nextToken();\n        String docName = st.nextToken();\n        boolean relevant = !zero.equals(st.nextToken());\n        assert !st.hasMoreTokens() : \"wrong format: \"+line+\"  next: \"+st.nextToken();\n        if (relevant) { // only keep relevant docs\n          if (curr==null || !curr.queryID.equals(queryID)) {\n            curr = judgements.get(queryID);\n            if (curr==null) {\n              curr = new QRelJudgement(queryID);\n              judgements.put(queryID,curr);\n            }\n          }\n          curr.addRelevandDoc(docName);\n        }\n      }\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#TrecJudge(BufferedReader).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#TrecJudge(BufferedReader).mjava","sourceNew":"  /**\n   * Constructor from a reader.\n   * <p>\n   * Expected input format:\n   * <pre>\n   *     qnum  0   doc-name     is-relevant\n   * </pre> \n   * Two sample lines:\n   * <pre> \n   *     19    0   doc303       1\n   *     19    0   doc7295      0\n   * </pre> \n   * @param reader where judgments are read from.\n   * @throws IOException \n   */\n  public TrecJudge (BufferedReader reader) throws IOException {\n    judgements = new HashMap<String,QRelJudgement>();\n    QRelJudgement curr = null;\n    String zero = \"0\";\n    String line;\n    \n    try {\n      while (null!=(line=reader.readLine())) {\n        line = line.trim();\n        if (line.length()==0 || '#'==line.charAt(0)) {\n          continue;\n        }\n        StringTokenizer st = new StringTokenizer(line);\n        String queryID = st.nextToken();\n        st.nextToken();\n        String docName = st.nextToken();\n        boolean relevant = !zero.equals(st.nextToken());\n        assert !st.hasMoreTokens() : \"wrong format: \"+line+\"  next: \"+st.nextToken();\n        if (relevant) { // only keep relevant docs\n          if (curr==null || !curr.queryID.equals(queryID)) {\n            curr = judgements.get(queryID);\n            if (curr==null) {\n              curr = new QRelJudgement(queryID);\n              judgements.put(queryID,curr);\n            }\n          }\n          curr.addRelevandDoc(docName);\n        }\n      }\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructor from a reader.\n   * <p>\n   * Expected input format:\n   * <pre>\n   *     qnum  0   doc-name     is-relevant\n   * </pre> \n   * Two sample lines:\n   * <pre> \n   *     19    0   doc303       1\n   *     19    0   doc7295      0\n   * </pre> \n   * @param reader where judgments are read from.\n   * @throws IOException \n   */\n  public TrecJudge (BufferedReader reader) throws IOException {\n    judgements = new HashMap<String,QRelJudgement>();\n    QRelJudgement curr = null;\n    String zero = \"0\";\n    String line;\n    \n    try {\n      while (null!=(line=reader.readLine())) {\n        line = line.trim();\n        if (line.length()==0 || '#'==line.charAt(0)) {\n          continue;\n        }\n        StringTokenizer st = new StringTokenizer(line);\n        String queryID = st.nextToken();\n        st.nextToken();\n        String docName = st.nextToken();\n        boolean relevant = !zero.equals(st.nextToken());\n        assert !st.hasMoreTokens() : \"wrong format: \"+line+\"  next: \"+st.nextToken();\n        if (relevant) { // only keep relevant docs\n          if (curr==null || !curr.queryID.equals(queryID)) {\n            curr = judgements.get(queryID);\n            if (curr==null) {\n              curr = new QRelJudgement(queryID);\n              judgements.put(queryID,curr);\n            }\n          }\n          curr.addRelevandDoc(docName);\n        }\n      }\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#TrecJudge(BufferedReader).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#TrecJudge(BufferedReader).mjava","sourceNew":"  /**\n   * Constructor from a reader.\n   * <p>\n   * Expected input format:\n   * <pre>\n   *     qnum  0   doc-name     is-relevant\n   * </pre> \n   * Two sample lines:\n   * <pre> \n   *     19    0   doc303       1\n   *     19    0   doc7295      0\n   * </pre> \n   * @param reader where judgments are read from.\n   * @throws IOException \n   */\n  public TrecJudge (BufferedReader reader) throws IOException {\n    judgements = new HashMap<String,QRelJudgement>();\n    QRelJudgement curr = null;\n    String zero = \"0\";\n    String line;\n    \n    try {\n      while (null!=(line=reader.readLine())) {\n        line = line.trim();\n        if (line.length()==0 || '#'==line.charAt(0)) {\n          continue;\n        }\n        StringTokenizer st = new StringTokenizer(line);\n        String queryID = st.nextToken();\n        st.nextToken();\n        String docName = st.nextToken();\n        boolean relevant = !zero.equals(st.nextToken());\n        assert !st.hasMoreTokens() : \"wrong format: \"+line+\"  next: \"+st.nextToken();\n        if (relevant) { // only keep relevant docs\n          if (curr==null || !curr.queryID.equals(queryID)) {\n            curr = judgements.get(queryID);\n            if (curr==null) {\n              curr = new QRelJudgement(queryID);\n              judgements.put(queryID,curr);\n            }\n          }\n          curr.addRelevandDoc(docName);\n        }\n      }\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructor from a reader.\n   * <p>\n   * Expected input format:\n   * <pre>\n   *     qnum  0   doc-name     is-relevant\n   * </pre> \n   * Two sample lines:\n   * <pre> \n   *     19    0   doc303       1\n   *     19    0   doc7295      0\n   * </pre> \n   * @param reader where judgments are read from.\n   * @throws IOException \n   */\n  public TrecJudge (BufferedReader reader) throws IOException {\n    judgements = new HashMap<String,QRelJudgement>();\n    QRelJudgement curr = null;\n    String zero = \"0\";\n    String line;\n    \n    try {\n      while (null!=(line=reader.readLine())) {\n        line = line.trim();\n        if (line.length()==0 || '#'==line.charAt(0)) {\n          continue;\n        }\n        StringTokenizer st = new StringTokenizer(line);\n        String queryID = st.nextToken();\n        st.nextToken();\n        String docName = st.nextToken();\n        boolean relevant = !zero.equals(st.nextToken());\n        assert !st.hasMoreTokens() : \"wrong format: \"+line+\"  next: \"+st.nextToken();\n        if (relevant) { // only keep relevant docs\n          if (curr==null || !curr.queryID.equals(queryID)) {\n            curr = judgements.get(queryID);\n            if (curr==null) {\n              curr = new QRelJudgement(queryID);\n              judgements.put(queryID,curr);\n            }\n          }\n          curr.addRelevandDoc(docName);\n        }\n      }\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","b89678825b68eccaf09e6ab71675fc0b0af1e099","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}