{"path":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#testMaxQueryLength(Boolean).mjava","commits":[{"id":"438117c5355b74dcb5b01197e08f16858e726c7d","date":1577196300,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#testMaxQueryLength(Boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void testMaxQueryLength(Boolean limitQueryLength) throws Exception {\n\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList<Object> spellchecker = new NamedList<>();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(SolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2);\n\n    // demonstrate that \"anothar\" is not corrected when maxQueryLength is set to a small number\n    if (limitQueryLength) spellchecker.add(DirectSolrSpellChecker.MAXQUERYLENGTH, 4);\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    h.getCore().withSearcher(searcher -> {\n      Collection<Token> tokens = queryConverter.convert(\"anothar\");\n      SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.getIndexReader());\n      SpellingResult result = checker.getSuggestions(spellOpts);\n      assertNotNull(\"result shouldn't be null\", result);\n      Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n      assertNotNull(\"suggestions shouldn't be null\", suggestions);\n\n      if (limitQueryLength) {\n        assertTrue(\"suggestions should be empty\", suggestions.isEmpty());\n      } else {\n        assertFalse(\"suggestions shouldn't be empty\", suggestions.isEmpty());\n        Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n        assertEquals(\"another\", entry.getKey());\n      }\n\n      return null;\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","date":1577276097,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest#testMaxQueryLength(Boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void testMaxQueryLength(Boolean limitQueryLength) throws Exception {\n\n    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();\n    NamedList<Object> spellchecker = new NamedList<>();\n    spellchecker.add(\"classname\", DirectSolrSpellChecker.class.getName());\n    spellchecker.add(SolrSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2);\n\n    // demonstrate that \"anothar\" is not corrected when maxQueryLength is set to a small number\n    if (limitQueryLength) spellchecker.add(DirectSolrSpellChecker.MAXQUERYLENGTH, 4);\n\n    SolrCore core = h.getCore();\n    checker.init(spellchecker, core);\n\n    h.getCore().withSearcher(searcher -> {\n      Collection<Token> tokens = queryConverter.convert(\"anothar\");\n      SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.getIndexReader());\n      SpellingResult result = checker.getSuggestions(spellOpts);\n      assertNotNull(\"result shouldn't be null\", result);\n      Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n      assertNotNull(\"suggestions shouldn't be null\", suggestions);\n\n      if (limitQueryLength) {\n        assertTrue(\"suggestions should be empty\", suggestions.isEmpty());\n      } else {\n        assertFalse(\"suggestions shouldn't be empty\", suggestions.isEmpty());\n        Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n        assertEquals(\"another\", entry.getKey());\n      }\n\n      return null;\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","438117c5355b74dcb5b01197e08f16858e726c7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["438117c5355b74dcb5b01197e08f16858e726c7d"],"438117c5355b74dcb5b01197e08f16858e726c7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","438117c5355b74dcb5b01197e08f16858e726c7d"],"438117c5355b74dcb5b01197e08f16858e726c7d":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}