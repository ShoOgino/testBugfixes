{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#doTestSparseNumericBlocksOfVariousBitsPerValue(double).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":1,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#doTestSparseNumericBlocksOfVariousBitsPerValue(double).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#doTestSparseNumericBlocksOfVariousBitsPerValue(double).mjava","sourceNew":"  private void doTestSparseNumericBlocksOfVariousBitsPerValue(double density) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(atLeast(Lucene70DocValuesFormat.NUMERIC_BLOCK_SIZE));\n    conf.setRAMBufferSizeMB(-1);\n    conf.setMergePolicy(newLogMergePolicy(random().nextBoolean()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    Field storedField = newStringField(\"stored\", \"\", Field.Store.YES);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(storedField);\n    doc.add(dvField);\n\n    final int numDocs = atLeast(Lucene70DocValuesFormat.NUMERIC_BLOCK_SIZE*3);\n    final LongSupplier longs = blocksOfVariousBPV();\n    for (int i = 0; i < numDocs; i++) {\n      if (random().nextDouble() > density) {\n        writer.addDocument(new Document());\n        continue;\n      }\n      long value = longs.getAsLong();\n      storedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      writer.addDocument(doc);\n    }\n\n    writer.forceMerge(1);\n\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      NumericDocValues docValues = DocValues.getNumeric(r, \"dv\");\n      docValues.nextDoc();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String storedValue = r.document(i).get(\"stored\");\n        if (storedValue == null) {\n          assertTrue(docValues.docID() > i);\n        } else {\n          assertEquals(i, docValues.docID());\n          assertEquals(Long.parseLong(storedValue), docValues.longValue());\n          docValues.nextDoc();\n        }\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docValues.docID());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSparseNumericBlocksOfVariousBitsPerValue(double density) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(atLeast(Lucene70DocValuesFormat.NUMERIC_BLOCK_SIZE));\n    conf.setRAMBufferSizeMB(-1);\n    conf.setMergePolicy(newLogMergePolicy(random().nextBoolean()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    Field storedField = newStringField(\"stored\", \"\", Field.Store.YES);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(storedField);\n    doc.add(dvField);\n\n    final int numDocs = atLeast(Lucene70DocValuesFormat.NUMERIC_BLOCK_SIZE*3);\n    final LongSupplier longs = blocksOfVariousBPV();\n    for (int i = 0; i < numDocs; i++) {\n      if (random().nextDouble() > density) {\n        writer.addDocument(new Document());\n        continue;\n      }\n      long value = longs.getAsLong();\n      storedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      writer.addDocument(doc);\n    }\n\n    writer.forceMerge(1);\n\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      NumericDocValues docValues = DocValues.getNumeric(r, \"dv\");\n      docValues.nextDoc();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String storedValue = r.document(i).get(\"stored\");\n        if (storedValue == null) {\n          assertTrue(docValues.docID() > i);\n        } else {\n          assertEquals(i, docValues.docID());\n          assertEquals(Long.parseLong(storedValue), docValues.longValue());\n          docValues.nextDoc();\n        }\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docValues.docID());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":1,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#doTestSparseNumericBlocksOfVariousBitsPerValue(double).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#doTestSparseNumericBlocksOfVariousBitsPerValue(double).mjava","sourceNew":"  private void doTestSparseNumericBlocksOfVariousBitsPerValue(double density) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(atLeast(Lucene70DocValuesFormat.NUMERIC_BLOCK_SIZE));\n    conf.setRAMBufferSizeMB(-1);\n    conf.setMergePolicy(newLogMergePolicy(random().nextBoolean()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    Field storedField = newStringField(\"stored\", \"\", Field.Store.YES);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(storedField);\n    doc.add(dvField);\n\n    final int numDocs = atLeast(Lucene70DocValuesFormat.NUMERIC_BLOCK_SIZE*3);\n    final LongSupplier longs = blocksOfVariousBPV();\n    for (int i = 0; i < numDocs; i++) {\n      if (random().nextDouble() > density) {\n        writer.addDocument(new Document());\n        continue;\n      }\n      long value = longs.getAsLong();\n      storedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      writer.addDocument(doc);\n    }\n\n    writer.forceMerge(1);\n\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      NumericDocValues docValues = DocValues.getNumeric(r, \"dv\");\n      docValues.nextDoc();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String storedValue = r.document(i).get(\"stored\");\n        if (storedValue == null) {\n          assertTrue(docValues.docID() > i);\n        } else {\n          assertEquals(i, docValues.docID());\n          assertEquals(Long.parseLong(storedValue), docValues.longValue());\n          docValues.nextDoc();\n        }\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docValues.docID());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSparseNumericBlocksOfVariousBitsPerValue(double density) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(atLeast(Lucene70DocValuesFormat.NUMERIC_BLOCK_SIZE));\n    conf.setRAMBufferSizeMB(-1);\n    conf.setMergePolicy(newLogMergePolicy(random().nextBoolean()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    Field storedField = newStringField(\"stored\", \"\", Field.Store.YES);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(storedField);\n    doc.add(dvField);\n\n    final int numDocs = atLeast(Lucene70DocValuesFormat.NUMERIC_BLOCK_SIZE*3);\n    final LongSupplier longs = blocksOfVariousBPV();\n    for (int i = 0; i < numDocs; i++) {\n      if (random().nextDouble() > density) {\n        writer.addDocument(new Document());\n        continue;\n      }\n      long value = longs.getAsLong();\n      storedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      writer.addDocument(doc);\n    }\n\n    writer.forceMerge(1);\n\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      NumericDocValues docValues = DocValues.getNumeric(r, \"dv\");\n      docValues.nextDoc();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String storedValue = r.document(i).get(\"stored\");\n        if (storedValue == null) {\n          assertTrue(docValues.docID() > i);\n        } else {\n          assertEquals(i, docValues.docID());\n          assertEquals(Long.parseLong(storedValue), docValues.longValue());\n          docValues.nextDoc();\n        }\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docValues.docID());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57cb6df494f10aeb3fab477b1ce4a9187455a227","date":1574155024,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#doTestSparseNumericBlocksOfVariousBitsPerValue(double).mjava","sourceNew":null,"sourceOld":"  private void doTestSparseNumericBlocksOfVariousBitsPerValue(double density) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(atLeast(Lucene70DocValuesFormat.NUMERIC_BLOCK_SIZE));\n    conf.setRAMBufferSizeMB(-1);\n    conf.setMergePolicy(newLogMergePolicy(random().nextBoolean()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    Field storedField = newStringField(\"stored\", \"\", Field.Store.YES);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(storedField);\n    doc.add(dvField);\n\n    final int numDocs = atLeast(Lucene70DocValuesFormat.NUMERIC_BLOCK_SIZE*3);\n    final LongSupplier longs = blocksOfVariousBPV();\n    for (int i = 0; i < numDocs; i++) {\n      if (random().nextDouble() > density) {\n        writer.addDocument(new Document());\n        continue;\n      }\n      long value = longs.getAsLong();\n      storedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      writer.addDocument(doc);\n    }\n\n    writer.forceMerge(1);\n\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    TestUtil.checkReader(ir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      NumericDocValues docValues = DocValues.getNumeric(r, \"dv\");\n      docValues.nextDoc();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String storedValue = r.document(i).get(\"stored\");\n        if (storedValue == null) {\n          assertTrue(docValues.docID() > i);\n        } else {\n          assertEquals(i, docValues.docID());\n          assertEquals(Long.parseLong(storedValue), docValues.longValue());\n          docValues.nextDoc();\n        }\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docValues.docID());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57cb6df494f10aeb3fab477b1ce4a9187455a227":["03e17b020972a0d6e8d6823f545571a66646a167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57cb6df494f10aeb3fab477b1ce4a9187455a227"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","57cb6df494f10aeb3fab477b1ce4a9187455a227"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"57cb6df494f10aeb3fab477b1ce4a9187455a227":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}