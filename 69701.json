{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#CoreContainer(NodeConfig,CoresLocator,boolean).mjava","commits":[{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#CoreContainer(NodeConfig,CoresLocator,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#CoreContainer(NodeConfig,Properties,CoresLocator,boolean).mjava","sourceNew":"  public CoreContainer(NodeConfig config, CoresLocator locator, boolean asyncSolrCoreLoad) {\n    this.loader = config.getSolrResourceLoader();\n    this.solrHome = config.getSolrHome();\n    this.cfg = requireNonNull(config);\n    try {\n      containerHandlers.put(PublicKeyHandler.PATH, new PublicKeyHandler(cfg.getCloudConfig()));\n    } catch (IOException | InvalidKeySpecException e) {\n      throw new RuntimeException(\"Bad PublicKeyHandler configuration.\", e);\n    }\n    if (null != this.cfg.getBooleanQueryMaxClauseCount()) {\n      IndexSearcher.setMaxClauseCount(this.cfg.getBooleanQueryMaxClauseCount());\n    }\n    this.coresLocator = locator;\n    this.containerProperties = new Properties(config.getSolrProperties());\n    this.asyncSolrCoreLoad = asyncSolrCoreLoad;\n    this.replayUpdatesExecutor = new OrderedExecutor(\n        cfg.getReplayUpdatesThreads(),\n        ExecutorUtil.newMDCAwareCachedThreadPool(\n            cfg.getReplayUpdatesThreads(),\n            new DefaultSolrThreadFactory(\"replayUpdatesExecutor\")));\n  }\n\n","sourceOld":"  public CoreContainer(NodeConfig config, Properties properties, CoresLocator locator, boolean asyncSolrCoreLoad) {\n    this.cfg = requireNonNull(config);\n    this.loader = config.getSolrResourceLoader();\n    this.solrHome = loader.getInstancePath().toString();\n    try {\n      containerHandlers.put(PublicKeyHandler.PATH, new PublicKeyHandler(cfg.getCloudConfig()));\n    } catch (IOException | InvalidKeySpecException e) {\n      throw new RuntimeException(\"Bad PublicKeyHandler configuration.\", e);\n    }\n    if (null != this.cfg.getBooleanQueryMaxClauseCount()) {\n      IndexSearcher.setMaxClauseCount(this.cfg.getBooleanQueryMaxClauseCount());\n    }\n    this.coresLocator = locator;\n    this.containerProperties = new Properties(properties);\n    this.asyncSolrCoreLoad = asyncSolrCoreLoad;\n    this.replayUpdatesExecutor = new OrderedExecutor(\n        cfg.getReplayUpdatesThreads(),\n        ExecutorUtil.newMDCAwareCachedThreadPool(\n            cfg.getReplayUpdatesThreads(),\n            new DefaultSolrThreadFactory(\"replayUpdatesExecutor\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#CoreContainer(NodeConfig,CoresLocator,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#CoreContainer(NodeConfig,CoresLocator,boolean).mjava","sourceNew":"  public CoreContainer(NodeConfig config, CoresLocator locator, boolean asyncSolrCoreLoad) {\n    this.loader = config.getSolrResourceLoader();\n    this.solrHome = config.getSolrHome();\n    this.cfg = requireNonNull(config);\n    try {\n      containerHandlers.put(PublicKeyHandler.PATH, new PublicKeyHandler(cfg.getCloudConfig()));\n    } catch (IOException | InvalidKeySpecException e) {\n      throw new RuntimeException(\"Bad PublicKeyHandler configuration.\", e);\n    }\n    if (null != this.cfg.getBooleanQueryMaxClauseCount()) {\n      IndexSearcher.setMaxClauseCount(this.cfg.getBooleanQueryMaxClauseCount());\n    }\n    this.coresLocator = locator;\n    this.containerProperties = new Properties(config.getSolrProperties());\n    this.asyncSolrCoreLoad = asyncSolrCoreLoad;\n    this.replayUpdatesExecutor = new OrderedExecutor(\n        cfg.getReplayUpdatesThreads(),\n        ExecutorUtil.newMDCAwareCachedThreadPool(\n            cfg.getReplayUpdatesThreads(),\n            new SolrNamedThreadFactory(\"replayUpdatesExecutor\")));\n  }\n\n","sourceOld":"  public CoreContainer(NodeConfig config, CoresLocator locator, boolean asyncSolrCoreLoad) {\n    this.loader = config.getSolrResourceLoader();\n    this.solrHome = config.getSolrHome();\n    this.cfg = requireNonNull(config);\n    try {\n      containerHandlers.put(PublicKeyHandler.PATH, new PublicKeyHandler(cfg.getCloudConfig()));\n    } catch (IOException | InvalidKeySpecException e) {\n      throw new RuntimeException(\"Bad PublicKeyHandler configuration.\", e);\n    }\n    if (null != this.cfg.getBooleanQueryMaxClauseCount()) {\n      IndexSearcher.setMaxClauseCount(this.cfg.getBooleanQueryMaxClauseCount());\n    }\n    this.coresLocator = locator;\n    this.containerProperties = new Properties(config.getSolrProperties());\n    this.asyncSolrCoreLoad = asyncSolrCoreLoad;\n    this.replayUpdatesExecutor = new OrderedExecutor(\n        cfg.getReplayUpdatesThreads(),\n        ExecutorUtil.newMDCAwareCachedThreadPool(\n            cfg.getReplayUpdatesThreads(),\n            new DefaultSolrThreadFactory(\"replayUpdatesExecutor\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373","date":1592489632,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#CoreContainer(NodeConfig,CoresLocator,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#CoreContainer(NodeConfig,CoresLocator,boolean).mjava","sourceNew":"  public CoreContainer(NodeConfig config, CoresLocator locator, boolean asyncSolrCoreLoad) {\n    this.loader = config.getSolrResourceLoader();\n    this.solrHome = config.getSolrHome();\n    this.cfg = requireNonNull(config);\n    try {\n      containerHandlers.put(PublicKeyHandler.PATH, new PublicKeyHandler(cfg.getCloudConfig()));\n    } catch (IOException | InvalidKeySpecException e) {\n      throw new RuntimeException(\"Bad PublicKeyHandler configuration.\", e);\n    }\n    if (null != this.cfg.getBooleanQueryMaxClauseCount()) {\n      IndexSearcher.setMaxClauseCount(this.cfg.getBooleanQueryMaxClauseCount());\n    }\n    this.coresLocator = locator;\n    this.containerProperties = new Properties(config.getSolrProperties());\n    this.asyncSolrCoreLoad = asyncSolrCoreLoad;\n    this.replayUpdatesExecutor = new OrderedExecutor(\n        cfg.getReplayUpdatesThreads(),\n        ExecutorUtil.newMDCAwareCachedThreadPool(\n            cfg.getReplayUpdatesThreads(),\n            new SolrNamedThreadFactory(\"replayUpdatesExecutor\")));\n\n    this.allowPaths = new java.util.HashSet<>();\n    this.allowPaths.add(cfg.getSolrHome());\n    this.allowPaths.add(cfg.getCoreRootDirectory());\n    if (cfg.getSolrDataHome() != null) {\n      this.allowPaths.add(cfg.getSolrDataHome());\n    }\n    if (!cfg.getAllowPaths().isEmpty()) {\n      this.allowPaths.addAll(cfg.getAllowPaths());\n      if (log.isInfoEnabled()) {\n        log.info(\"Allowing use of paths: {}\", cfg.getAllowPaths());\n      }\n    }\n  }\n\n","sourceOld":"  public CoreContainer(NodeConfig config, CoresLocator locator, boolean asyncSolrCoreLoad) {\n    this.loader = config.getSolrResourceLoader();\n    this.solrHome = config.getSolrHome();\n    this.cfg = requireNonNull(config);\n    try {\n      containerHandlers.put(PublicKeyHandler.PATH, new PublicKeyHandler(cfg.getCloudConfig()));\n    } catch (IOException | InvalidKeySpecException e) {\n      throw new RuntimeException(\"Bad PublicKeyHandler configuration.\", e);\n    }\n    if (null != this.cfg.getBooleanQueryMaxClauseCount()) {\n      IndexSearcher.setMaxClauseCount(this.cfg.getBooleanQueryMaxClauseCount());\n    }\n    this.coresLocator = locator;\n    this.containerProperties = new Properties(config.getSolrProperties());\n    this.asyncSolrCoreLoad = asyncSolrCoreLoad;\n    this.replayUpdatesExecutor = new OrderedExecutor(\n        cfg.getReplayUpdatesThreads(),\n        ExecutorUtil.newMDCAwareCachedThreadPool(\n            cfg.getReplayUpdatesThreads(),\n            new SolrNamedThreadFactory(\"replayUpdatesExecutor\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8c36bc16f489634a3fcf14294704824192273df","date":1593058738,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#CoreContainer(NodeConfig,CoresLocator,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#CoreContainer(NodeConfig,CoresLocator,boolean).mjava","sourceNew":"  public CoreContainer(NodeConfig config, CoresLocator locator, boolean asyncSolrCoreLoad) {\n    this.loader = config.getSolrResourceLoader();\n    this.solrHome = config.getSolrHome();\n    this.cfg = requireNonNull(config);\n    try {\n      containerHandlers.put(PublicKeyHandler.PATH, new PublicKeyHandler(cfg.getCloudConfig()));\n    } catch (IOException | InvalidKeySpecException e) {\n      throw new RuntimeException(\"Bad PublicKeyHandler configuration.\", e);\n    }\n    if (null != this.cfg.getBooleanQueryMaxClauseCount()) {\n      IndexSearcher.setMaxClauseCount(this.cfg.getBooleanQueryMaxClauseCount());\n    }\n    this.coresLocator = locator;\n    this.containerProperties = new Properties(config.getSolrProperties());\n    this.asyncSolrCoreLoad = asyncSolrCoreLoad;\n    this.replayUpdatesExecutor = new OrderedExecutor(\n        cfg.getReplayUpdatesThreads(),\n        ExecutorUtil.newMDCAwareCachedThreadPool(\n            cfg.getReplayUpdatesThreads(),\n            new SolrNamedThreadFactory(\"replayUpdatesExecutor\")));\n\n    this.allowPaths = new java.util.HashSet<>();\n    this.allowPaths.add(cfg.getSolrHome());\n    this.allowPaths.add(cfg.getCoreRootDirectory());\n    if (cfg.getSolrDataHome() != null) {\n      this.allowPaths.add(cfg.getSolrDataHome());\n    }\n    if (!cfg.getAllowPaths().isEmpty()) {\n      this.allowPaths.addAll(cfg.getAllowPaths());\n      if (log.isInfoEnabled()) {\n        log.info(\"Allowing use of paths: {}\", cfg.getAllowPaths());\n      }\n    }\n\n    Path userFilesPath = getUserFilesPath(); // TODO make configurable on cfg?\n    try {\n      Files.createDirectories(userFilesPath); // does nothing if already exists\n    } catch (Exception e) {\n      log.warn(\"Unable to create [{}].  Features requiring this directory may fail.\", userFilesPath, e);\n    }\n  }\n\n","sourceOld":"  public CoreContainer(NodeConfig config, CoresLocator locator, boolean asyncSolrCoreLoad) {\n    this.loader = config.getSolrResourceLoader();\n    this.solrHome = config.getSolrHome();\n    this.cfg = requireNonNull(config);\n    try {\n      containerHandlers.put(PublicKeyHandler.PATH, new PublicKeyHandler(cfg.getCloudConfig()));\n    } catch (IOException | InvalidKeySpecException e) {\n      throw new RuntimeException(\"Bad PublicKeyHandler configuration.\", e);\n    }\n    if (null != this.cfg.getBooleanQueryMaxClauseCount()) {\n      IndexSearcher.setMaxClauseCount(this.cfg.getBooleanQueryMaxClauseCount());\n    }\n    this.coresLocator = locator;\n    this.containerProperties = new Properties(config.getSolrProperties());\n    this.asyncSolrCoreLoad = asyncSolrCoreLoad;\n    this.replayUpdatesExecutor = new OrderedExecutor(\n        cfg.getReplayUpdatesThreads(),\n        ExecutorUtil.newMDCAwareCachedThreadPool(\n            cfg.getReplayUpdatesThreads(),\n            new SolrNamedThreadFactory(\"replayUpdatesExecutor\")));\n\n    this.allowPaths = new java.util.HashSet<>();\n    this.allowPaths.add(cfg.getSolrHome());\n    this.allowPaths.add(cfg.getCoreRootDirectory());\n    if (cfg.getSolrDataHome() != null) {\n      this.allowPaths.add(cfg.getSolrDataHome());\n    }\n    if (!cfg.getAllowPaths().isEmpty()) {\n      this.allowPaths.addAll(cfg.getAllowPaths());\n      if (log.isInfoEnabled()) {\n        log.info(\"Allowing use of paths: {}\", cfg.getAllowPaths());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"e8c36bc16f489634a3fcf14294704824192273df":["c75c0fad5a9b6633e919ce2e9f96e1f0c496d373"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8c36bc16f489634a3fcf14294704824192273df"]},"commit2Childs":{"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373":["e8c36bc16f489634a3fcf14294704824192273df"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["c75c0fad5a9b6633e919ce2e9f96e1f0c496d373"],"e8c36bc16f489634a3fcf14294704824192273df":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}