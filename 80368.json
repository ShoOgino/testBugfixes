{"path":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#beforeClass().mjava","commits":[{"id":"92749b51992f15c9e464fd464baf3372bd5573a2","date":1330019010,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    stopword = \"\" + randomChar();\n    CharacterRunAutomaton stopset = new CharacterRunAutomaton(BasicAutomata.makeString(stopword));\n    analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopset, true);\n    RandomIndexWriter iw = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    Field id = new StringField(\"id\", \"\");\n    Field field = new TextField(\"field\", \"\");\n    doc.add(id);\n    doc.add(field);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(Integer.toString(i));\n      field.setStringValue(randomFieldContents());\n      iw.addDocument(doc);\n    }\n    \n    // delete some docs\n    int numDeletes = numDocs/20;\n    for (int i = 0; i < numDeletes; i++) {\n      Term toDelete = new Term(\"id\", Integer.toString(random.nextInt(numDocs)));\n      if (random.nextBoolean()) {\n        iw.deleteDocuments(toDelete);\n      } else {\n        iw.deleteDocuments(new TermQuery(toDelete));\n      }\n    }\n    \n    reader = iw.getReader();\n    s1 = newSearcher(reader);\n    s2 = newSearcher(reader);\n    iw.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    stopword = \"\" + randomChar();\n    CharacterRunAutomaton stopset = new CharacterRunAutomaton(BasicAutomata.makeString(stopword));\n    analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopset, true);\n    RandomIndexWriter iw = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    Field id = new StringField(\"id\", \"\");\n    Field field = new TextField(\"field\", \"\");\n    doc.add(id);\n    doc.add(field);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(Integer.toString(i));\n      field.setStringValue(randomFieldContents());\n      iw.addDocument(doc);\n    }\n    \n    // delete some docs\n    int numDeletes = numDocs/20;\n    for (int i = 0; i < numDeletes; i++) {\n      Term toDelete = new Term(\"id\", Integer.toString(random.nextInt(numDocs)));\n      if (random.nextBoolean()) {\n        iw.deleteDocuments(toDelete);\n      } else {\n        iw.deleteDocuments(new TermQuery(toDelete));\n      }\n    }\n    \n    reader = iw.getReader();\n    s1 = newSearcher(reader);\n    s2 = newSearcher(reader);\n    iw.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#beforeClass().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    Random random = random();\n    directory = newDirectory();\n    stopword = \"\" + randomChar();\n    CharacterRunAutomaton stopset = new CharacterRunAutomaton(BasicAutomata.makeString(stopword));\n    analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopset, true);\n    RandomIndexWriter iw = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    Field id = new StringField(\"id\", \"\");\n    Field field = new TextField(\"field\", \"\");\n    doc.add(id);\n    doc.add(field);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(Integer.toString(i));\n      field.setStringValue(randomFieldContents());\n      iw.addDocument(doc);\n    }\n    \n    // delete some docs\n    int numDeletes = numDocs/20;\n    for (int i = 0; i < numDeletes; i++) {\n      Term toDelete = new Term(\"id\", Integer.toString(random.nextInt(numDocs)));\n      if (random.nextBoolean()) {\n        iw.deleteDocuments(toDelete);\n      } else {\n        iw.deleteDocuments(new TermQuery(toDelete));\n      }\n    }\n    \n    reader = iw.getReader();\n    s1 = newSearcher(reader);\n    s2 = newSearcher(reader);\n    iw.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    stopword = \"\" + randomChar();\n    CharacterRunAutomaton stopset = new CharacterRunAutomaton(BasicAutomata.makeString(stopword));\n    analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopset, true);\n    RandomIndexWriter iw = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    Field id = new StringField(\"id\", \"\");\n    Field field = new TextField(\"field\", \"\");\n    doc.add(id);\n    doc.add(field);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(Integer.toString(i));\n      field.setStringValue(randomFieldContents());\n      iw.addDocument(doc);\n    }\n    \n    // delete some docs\n    int numDeletes = numDocs/20;\n    for (int i = 0; i < numDeletes; i++) {\n      Term toDelete = new Term(\"id\", Integer.toString(random.nextInt(numDocs)));\n      if (random.nextBoolean()) {\n        iw.deleteDocuments(toDelete);\n      } else {\n        iw.deleteDocuments(new TermQuery(toDelete));\n      }\n    }\n    \n    reader = iw.getReader();\n    s1 = newSearcher(reader);\n    s2 = newSearcher(reader);\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#beforeClass().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    Random random = random();\n    directory = newDirectory();\n    stopword = \"\" + randomChar();\n    CharacterRunAutomaton stopset = new CharacterRunAutomaton(BasicAutomata.makeString(stopword));\n    analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopset, true);\n    RandomIndexWriter iw = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    Field id = new StringField(\"id\", \"\", Field.Store.NO);\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    doc.add(id);\n    doc.add(field);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(Integer.toString(i));\n      field.setStringValue(randomFieldContents());\n      iw.addDocument(doc);\n    }\n    \n    // delete some docs\n    int numDeletes = numDocs/20;\n    for (int i = 0; i < numDeletes; i++) {\n      Term toDelete = new Term(\"id\", Integer.toString(random.nextInt(numDocs)));\n      if (random.nextBoolean()) {\n        iw.deleteDocuments(toDelete);\n      } else {\n        iw.deleteDocuments(new TermQuery(toDelete));\n      }\n    }\n    \n    reader = iw.getReader();\n    s1 = newSearcher(reader);\n    s2 = newSearcher(reader);\n    iw.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    Random random = random();\n    directory = newDirectory();\n    stopword = \"\" + randomChar();\n    CharacterRunAutomaton stopset = new CharacterRunAutomaton(BasicAutomata.makeString(stopword));\n    analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopset, true);\n    RandomIndexWriter iw = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    Field id = new StringField(\"id\", \"\");\n    Field field = new TextField(\"field\", \"\");\n    doc.add(id);\n    doc.add(field);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(Integer.toString(i));\n      field.setStringValue(randomFieldContents());\n      iw.addDocument(doc);\n    }\n    \n    // delete some docs\n    int numDeletes = numDocs/20;\n    for (int i = 0; i < numDeletes; i++) {\n      Term toDelete = new Term(\"id\", Integer.toString(random.nextInt(numDocs)));\n      if (random.nextBoolean()) {\n        iw.deleteDocuments(toDelete);\n      } else {\n        iw.deleteDocuments(new TermQuery(toDelete));\n      }\n    }\n    \n    reader = iw.getReader();\n    s1 = newSearcher(reader);\n    s2 = newSearcher(reader);\n    iw.close();\n  }\n\n","bugFix":["92749b51992f15c9e464fd464baf3372bd5573a2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#beforeClass().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    Random random = random();\n    directory = newDirectory();\n    stopword = \"\" + randomChar();\n    CharacterRunAutomaton stopset = new CharacterRunAutomaton(BasicAutomata.makeString(stopword));\n    analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopset);\n    RandomIndexWriter iw = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    Field id = new StringField(\"id\", \"\", Field.Store.NO);\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    doc.add(id);\n    doc.add(field);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(Integer.toString(i));\n      field.setStringValue(randomFieldContents());\n      iw.addDocument(doc);\n    }\n    \n    // delete some docs\n    int numDeletes = numDocs/20;\n    for (int i = 0; i < numDeletes; i++) {\n      Term toDelete = new Term(\"id\", Integer.toString(random.nextInt(numDocs)));\n      if (random.nextBoolean()) {\n        iw.deleteDocuments(toDelete);\n      } else {\n        iw.deleteDocuments(new TermQuery(toDelete));\n      }\n    }\n    \n    reader = iw.getReader();\n    s1 = newSearcher(reader);\n    s2 = newSearcher(reader);\n    iw.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    Random random = random();\n    directory = newDirectory();\n    stopword = \"\" + randomChar();\n    CharacterRunAutomaton stopset = new CharacterRunAutomaton(BasicAutomata.makeString(stopword));\n    analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopset, true);\n    RandomIndexWriter iw = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    Field id = new StringField(\"id\", \"\", Field.Store.NO);\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    doc.add(id);\n    doc.add(field);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(Integer.toString(i));\n      field.setStringValue(randomFieldContents());\n      iw.addDocument(doc);\n    }\n    \n    // delete some docs\n    int numDeletes = numDocs/20;\n    for (int i = 0; i < numDeletes; i++) {\n      Term toDelete = new Term(\"id\", Integer.toString(random.nextInt(numDocs)));\n      if (random.nextBoolean()) {\n        iw.deleteDocuments(toDelete);\n      } else {\n        iw.deleteDocuments(new TermQuery(toDelete));\n      }\n    }\n    \n    reader = iw.getReader();\n    s1 = newSearcher(reader);\n    s2 = newSearcher(reader);\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#beforeClass().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    Random random = random();\n    directory = newDirectory();\n    stopword = \"\" + randomChar();\n    CharacterRunAutomaton stopset = new CharacterRunAutomaton(BasicAutomata.makeString(stopword));\n    analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopset);\n    RandomIndexWriter iw = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    Field id = new StringField(\"id\", \"\", Field.Store.NO);\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    doc.add(id);\n    doc.add(field);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(Integer.toString(i));\n      field.setStringValue(randomFieldContents());\n      iw.addDocument(doc);\n    }\n    \n    // delete some docs\n    int numDeletes = numDocs/20;\n    for (int i = 0; i < numDeletes; i++) {\n      Term toDelete = new Term(\"id\", Integer.toString(random.nextInt(numDocs)));\n      if (random.nextBoolean()) {\n        iw.deleteDocuments(toDelete);\n      } else {\n        iw.deleteDocuments(new TermQuery(toDelete));\n      }\n    }\n    \n    reader = iw.getReader();\n    s1 = newSearcher(reader);\n    s2 = newSearcher(reader);\n    iw.shutdown();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    Random random = random();\n    directory = newDirectory();\n    stopword = \"\" + randomChar();\n    CharacterRunAutomaton stopset = new CharacterRunAutomaton(BasicAutomata.makeString(stopword));\n    analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopset);\n    RandomIndexWriter iw = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    Field id = new StringField(\"id\", \"\", Field.Store.NO);\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    doc.add(id);\n    doc.add(field);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(Integer.toString(i));\n      field.setStringValue(randomFieldContents());\n      iw.addDocument(doc);\n    }\n    \n    // delete some docs\n    int numDeletes = numDocs/20;\n    for (int i = 0; i < numDeletes; i++) {\n      Term toDelete = new Term(\"id\", Integer.toString(random.nextInt(numDocs)));\n      if (random.nextBoolean()) {\n        iw.deleteDocuments(toDelete);\n      } else {\n        iw.deleteDocuments(new TermQuery(toDelete));\n      }\n    }\n    \n    reader = iw.getReader();\n    s1 = newSearcher(reader);\n    s2 = newSearcher(reader);\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#beforeClass().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    Random random = random();\n    directory = newDirectory();\n    stopword = \"\" + randomChar();\n    CharacterRunAutomaton stopset = new CharacterRunAutomaton(BasicAutomata.makeStringLight(stopword));\n    analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopset);\n    RandomIndexWriter iw = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    Field id = new StringField(\"id\", \"\", Field.Store.NO);\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    doc.add(id);\n    doc.add(field);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(Integer.toString(i));\n      field.setStringValue(randomFieldContents());\n      iw.addDocument(doc);\n    }\n    \n    // delete some docs\n    int numDeletes = numDocs/20;\n    for (int i = 0; i < numDeletes; i++) {\n      Term toDelete = new Term(\"id\", Integer.toString(random.nextInt(numDocs)));\n      if (random.nextBoolean()) {\n        iw.deleteDocuments(toDelete);\n      } else {\n        iw.deleteDocuments(new TermQuery(toDelete));\n      }\n    }\n    \n    reader = iw.getReader();\n    s1 = newSearcher(reader);\n    s2 = newSearcher(reader);\n    iw.shutdown();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    Random random = random();\n    directory = newDirectory();\n    stopword = \"\" + randomChar();\n    CharacterRunAutomaton stopset = new CharacterRunAutomaton(BasicAutomata.makeString(stopword));\n    analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopset);\n    RandomIndexWriter iw = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    Field id = new StringField(\"id\", \"\", Field.Store.NO);\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    doc.add(id);\n    doc.add(field);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(Integer.toString(i));\n      field.setStringValue(randomFieldContents());\n      iw.addDocument(doc);\n    }\n    \n    // delete some docs\n    int numDeletes = numDocs/20;\n    for (int i = 0; i < numDeletes; i++) {\n      Term toDelete = new Term(\"id\", Integer.toString(random.nextInt(numDocs)));\n      if (random.nextBoolean()) {\n        iw.deleteDocuments(toDelete);\n      } else {\n        iw.deleteDocuments(new TermQuery(toDelete));\n      }\n    }\n    \n    reader = iw.getReader();\n    s1 = newSearcher(reader);\n    s2 = newSearcher(reader);\n    iw.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#beforeClass().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    Random random = random();\n    directory = newDirectory();\n    stopword = \"\" + randomChar();\n    CharacterRunAutomaton stopset = new CharacterRunAutomaton(Automata.makeString(stopword));\n    analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopset);\n    RandomIndexWriter iw = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    Field id = new StringField(\"id\", \"\", Field.Store.NO);\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    doc.add(id);\n    doc.add(field);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(Integer.toString(i));\n      field.setStringValue(randomFieldContents());\n      iw.addDocument(doc);\n    }\n    \n    // delete some docs\n    int numDeletes = numDocs/20;\n    for (int i = 0; i < numDeletes; i++) {\n      Term toDelete = new Term(\"id\", Integer.toString(random.nextInt(numDocs)));\n      if (random.nextBoolean()) {\n        iw.deleteDocuments(toDelete);\n      } else {\n        iw.deleteDocuments(new TermQuery(toDelete));\n      }\n    }\n    \n    reader = iw.getReader();\n    s1 = newSearcher(reader);\n    s2 = newSearcher(reader);\n    iw.shutdown();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    Random random = random();\n    directory = newDirectory();\n    stopword = \"\" + randomChar();\n    CharacterRunAutomaton stopset = new CharacterRunAutomaton(BasicAutomata.makeStringLight(stopword));\n    analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopset);\n    RandomIndexWriter iw = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    Field id = new StringField(\"id\", \"\", Field.Store.NO);\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    doc.add(id);\n    doc.add(field);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(Integer.toString(i));\n      field.setStringValue(randomFieldContents());\n      iw.addDocument(doc);\n    }\n    \n    // delete some docs\n    int numDeletes = numDocs/20;\n    for (int i = 0; i < numDeletes; i++) {\n      Term toDelete = new Term(\"id\", Integer.toString(random.nextInt(numDocs)));\n      if (random.nextBoolean()) {\n        iw.deleteDocuments(toDelete);\n      } else {\n        iw.deleteDocuments(new TermQuery(toDelete));\n      }\n    }\n    \n    reader = iw.getReader();\n    s1 = newSearcher(reader);\n    s2 = newSearcher(reader);\n    iw.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#beforeClass().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    Random random = random();\n    directory = newDirectory();\n    stopword = \"\" + randomChar();\n    CharacterRunAutomaton stopset = new CharacterRunAutomaton(Automata.makeString(stopword));\n    analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopset);\n    RandomIndexWriter iw = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    Field id = new StringField(\"id\", \"\", Field.Store.NO);\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    doc.add(id);\n    doc.add(field);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(Integer.toString(i));\n      field.setStringValue(randomFieldContents());\n      iw.addDocument(doc);\n    }\n    \n    // delete some docs\n    int numDeletes = numDocs/20;\n    for (int i = 0; i < numDeletes; i++) {\n      Term toDelete = new Term(\"id\", Integer.toString(random.nextInt(numDocs)));\n      if (random.nextBoolean()) {\n        iw.deleteDocuments(toDelete);\n      } else {\n        iw.deleteDocuments(new TermQuery(toDelete));\n      }\n    }\n    \n    reader = iw.getReader();\n    s1 = newSearcher(reader);\n    s2 = newSearcher(reader);\n    iw.shutdown();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    Random random = random();\n    directory = newDirectory();\n    stopword = \"\" + randomChar();\n    CharacterRunAutomaton stopset = new CharacterRunAutomaton(BasicAutomata.makeString(stopword));\n    analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopset);\n    RandomIndexWriter iw = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    Field id = new StringField(\"id\", \"\", Field.Store.NO);\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    doc.add(id);\n    doc.add(field);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(Integer.toString(i));\n      field.setStringValue(randomFieldContents());\n      iw.addDocument(doc);\n    }\n    \n    // delete some docs\n    int numDeletes = numDocs/20;\n    for (int i = 0; i < numDeletes; i++) {\n      Term toDelete = new Term(\"id\", Integer.toString(random.nextInt(numDocs)));\n      if (random.nextBoolean()) {\n        iw.deleteDocuments(toDelete);\n      } else {\n        iw.deleteDocuments(new TermQuery(toDelete));\n      }\n    }\n    \n    reader = iw.getReader();\n    s1 = newSearcher(reader);\n    s2 = newSearcher(reader);\n    iw.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#beforeClass().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    Random random = random();\n    directory = newDirectory();\n    stopword = \"\" + randomChar();\n    CharacterRunAutomaton stopset = new CharacterRunAutomaton(Automata.makeString(stopword));\n    analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopset);\n    RandomIndexWriter iw = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    Field id = new StringField(\"id\", \"\", Field.Store.NO);\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    doc.add(id);\n    doc.add(field);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(Integer.toString(i));\n      field.setStringValue(randomFieldContents());\n      iw.addDocument(doc);\n    }\n    \n    // delete some docs\n    int numDeletes = numDocs/20;\n    for (int i = 0; i < numDeletes; i++) {\n      Term toDelete = new Term(\"id\", Integer.toString(random.nextInt(numDocs)));\n      if (random.nextBoolean()) {\n        iw.deleteDocuments(toDelete);\n      } else {\n        iw.deleteDocuments(new TermQuery(toDelete));\n      }\n    }\n    \n    reader = iw.getReader();\n    s1 = newSearcher(reader);\n    s2 = newSearcher(reader);\n    iw.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    Random random = random();\n    directory = newDirectory();\n    stopword = \"\" + randomChar();\n    CharacterRunAutomaton stopset = new CharacterRunAutomaton(Automata.makeString(stopword));\n    analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopset);\n    RandomIndexWriter iw = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    Field id = new StringField(\"id\", \"\", Field.Store.NO);\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    doc.add(id);\n    doc.add(field);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(Integer.toString(i));\n      field.setStringValue(randomFieldContents());\n      iw.addDocument(doc);\n    }\n    \n    // delete some docs\n    int numDeletes = numDocs/20;\n    for (int i = 0; i < numDeletes; i++) {\n      Term toDelete = new Term(\"id\", Integer.toString(random.nextInt(numDocs)));\n      if (random.nextBoolean()) {\n        iw.deleteDocuments(toDelete);\n      } else {\n        iw.deleteDocuments(new TermQuery(toDelete));\n      }\n    }\n    \n    reader = iw.getReader();\n    s1 = newSearcher(reader);\n    s2 = newSearcher(reader);\n    iw.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7ac93f1b4f66dba87b555cd5815ecbfe0060dae","date":1429483620,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#beforeClass().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    Random random = random();\n    directory = newDirectory();\n    stopword = \"\" + randomChar();\n    CharacterRunAutomaton stopset = new CharacterRunAutomaton(Automata.makeString(stopword));\n    analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopset);\n    RandomIndexWriter iw = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    Field id = new StringField(\"id\", \"\", Field.Store.NO);\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    doc.add(id);\n    doc.add(field);\n    \n    // index some docs\n    int numDocs = TEST_NIGHTLY ? atLeast(1000) : atLeast(100);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(Integer.toString(i));\n      field.setStringValue(randomFieldContents());\n      iw.addDocument(doc);\n    }\n    \n    // delete some docs\n    int numDeletes = numDocs/20;\n    for (int i = 0; i < numDeletes; i++) {\n      Term toDelete = new Term(\"id\", Integer.toString(random.nextInt(numDocs)));\n      if (random.nextBoolean()) {\n        iw.deleteDocuments(toDelete);\n      } else {\n        iw.deleteDocuments(new TermQuery(toDelete));\n      }\n    }\n    \n    reader = iw.getReader();\n    s1 = newSearcher(reader);\n    s2 = newSearcher(reader);\n    iw.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    Random random = random();\n    directory = newDirectory();\n    stopword = \"\" + randomChar();\n    CharacterRunAutomaton stopset = new CharacterRunAutomaton(Automata.makeString(stopword));\n    analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopset);\n    RandomIndexWriter iw = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    Field id = new StringField(\"id\", \"\", Field.Store.NO);\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    doc.add(id);\n    doc.add(field);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      id.setStringValue(Integer.toString(i));\n      field.setStringValue(randomFieldContents());\n      iw.addDocument(doc);\n    }\n    \n    // delete some docs\n    int numDeletes = numDocs/20;\n    for (int i = 0; i < numDeletes; i++) {\n      Term toDelete = new Term(\"id\", Integer.toString(random.nextInt(numDocs)));\n      if (random.nextBoolean()) {\n        iw.deleteDocuments(toDelete);\n      } else {\n        iw.deleteDocuments(new TermQuery(toDelete));\n      }\n    }\n    \n    reader = iw.getReader();\n    s1 = newSearcher(reader);\n    s2 = newSearcher(reader);\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92749b51992f15c9e464fd464baf3372bd5573a2"],"e7ac93f1b4f66dba87b555cd5815ecbfe0060dae":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"92749b51992f15c9e464fd464baf3372bd5573a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["5c84485629d80d203608e8975a1139de9933cc38"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["92749b51992f15c9e464fd464baf3372bd5573a2"],"5c84485629d80d203608e8975a1139de9933cc38":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7ac93f1b4f66dba87b555cd5815ecbfe0060dae"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"e7ac93f1b4f66dba87b555cd5815ecbfe0060dae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"92749b51992f15c9e464fd464baf3372bd5573a2":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","92749b51992f15c9e464fd464baf3372bd5573a2"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["e7ac93f1b4f66dba87b555cd5815ecbfe0060dae"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"5c84485629d80d203608e8975a1139de9933cc38":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}