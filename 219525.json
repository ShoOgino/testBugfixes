{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List).mjava","sourceNew":"  private void verifyCommitOrder(List commits) throws IOException {\n    final IndexCommit firstCommit = ((IndexCommit) commits.get(0));\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    long lastVersion = firstCommit.getVersion();\n    long lastTimestamp = firstCommit.getTimestamp();\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit = ((IndexCommit) commits.get(i));\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      long nowVersion = commit.getVersion();\n      long nowTimestamp = commit.getTimestamp();\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertTrue(\"SegmentInfos versions are out-of-order\", nowVersion > lastVersion);\n      assertTrue(\"SegmentInfos timestamps are out-of-order: now=\" + nowTimestamp + \" vs last=\" + lastTimestamp, nowTimestamp >= lastTimestamp);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n      lastVersion = nowVersion;\n      lastTimestamp = nowTimestamp;\n    }\n  }\n\n","sourceOld":"  private void verifyCommitOrder(List commits) throws IOException {\n    final IndexCommit firstCommit = ((IndexCommit) commits.get(0));\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    long lastVersion = firstCommit.getVersion();\n    long lastTimestamp = firstCommit.getTimestamp();\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit = ((IndexCommit) commits.get(i));\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      long nowVersion = commit.getVersion();\n      long nowTimestamp = commit.getTimestamp();\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertTrue(\"SegmentInfos versions are out-of-order\", nowVersion > lastVersion);\n      assertTrue(\"SegmentInfos timestamps are out-of-order: now=\" + nowTimestamp + \" vs last=\" + lastTimestamp, nowTimestamp >= lastTimestamp);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n      lastVersion = nowVersion;\n      lastTimestamp = nowTimestamp;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List).mjava","sourceNew":null,"sourceOld":"  private void verifyCommitOrder(List commits) throws IOException {\n    final IndexCommit firstCommit = ((IndexCommit) commits.get(0));\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    long lastVersion = firstCommit.getVersion();\n    long lastTimestamp = firstCommit.getTimestamp();\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit = ((IndexCommit) commits.get(i));\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      long nowVersion = commit.getVersion();\n      long nowTimestamp = commit.getTimestamp();\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertTrue(\"SegmentInfos versions are out-of-order\", nowVersion > lastVersion);\n      assertTrue(\"SegmentInfos timestamps are out-of-order: now=\" + nowTimestamp + \" vs last=\" + lastTimestamp, nowTimestamp >= lastTimestamp);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n      lastVersion = nowVersion;\n      lastTimestamp = nowTimestamp;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}