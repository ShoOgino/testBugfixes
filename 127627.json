{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testEqualityDoesNotDependOnOrder().mjava","commits":[{"id":"4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969","date":1444679002,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testEqualityDoesNotDependOnOrder().mjava","pathOld":"/dev/null","sourceNew":"  public void testEqualityDoesNotDependOnOrder() {\n    TermQuery[] queries = new TermQuery[] {\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"baz\"))\n    };\n    for (int iter = 0; iter < 10; ++iter) {\n      List<BooleanClause> clauses = new ArrayList<>();\n      final int numClauses = random().nextInt(20);\n      for (int i = 0; i < numClauses; ++i) {\n        Query query = RandomPicks.randomFrom(random(), queries);\n        if (random().nextBoolean()) {\n          query = new BoostQuery(query, random().nextFloat());\n        }\n        Occur occur = RandomPicks.randomFrom(random(), Occur.values());\n        clauses.add(new BooleanClause(query, occur));\n      }\n\n      final boolean disableCoord = random().nextBoolean();\n      final int minShouldMatch = random().nextInt(5);\n      BooleanQuery.Builder bq1Builder = new BooleanQuery.Builder();\n      bq1Builder.setDisableCoord(disableCoord);\n      bq1Builder.setMinimumNumberShouldMatch(minShouldMatch);\n      for (BooleanClause clause : clauses) {\n        bq1Builder.add(clause);\n      }\n      final BooleanQuery bq1 = bq1Builder.build();\n\n      Collections.shuffle(clauses, random());\n      BooleanQuery.Builder bq2Builder = new BooleanQuery.Builder();\n      bq2Builder.setDisableCoord(disableCoord);\n      bq2Builder.setMinimumNumberShouldMatch(minShouldMatch);\n      for (BooleanClause clause : clauses) {\n        bq2Builder.add(clause);\n      }\n      final BooleanQuery bq2 = bq2Builder.build();\n\n      QueryUtils.checkEqual(bq1, bq2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testEqualityDoesNotDependOnOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testEqualityDoesNotDependOnOrder().mjava","sourceNew":"  public void testEqualityDoesNotDependOnOrder() {\n    TermQuery[] queries = new TermQuery[] {\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"baz\"))\n    };\n    for (int iter = 0; iter < 10; ++iter) {\n      List<BooleanClause> clauses = new ArrayList<>();\n      final int numClauses = random().nextInt(20);\n      for (int i = 0; i < numClauses; ++i) {\n        Query query = RandomPicks.randomFrom(random(), queries);\n        if (random().nextBoolean()) {\n          query = new BoostQuery(query, random().nextFloat());\n        }\n        Occur occur = RandomPicks.randomFrom(random(), Occur.values());\n        clauses.add(new BooleanClause(query, occur));\n      }\n\n      final int minShouldMatch = random().nextInt(5);\n      BooleanQuery.Builder bq1Builder = new BooleanQuery.Builder();\n      bq1Builder.setMinimumNumberShouldMatch(minShouldMatch);\n      for (BooleanClause clause : clauses) {\n        bq1Builder.add(clause);\n      }\n      final BooleanQuery bq1 = bq1Builder.build();\n\n      Collections.shuffle(clauses, random());\n      BooleanQuery.Builder bq2Builder = new BooleanQuery.Builder();\n      bq2Builder.setMinimumNumberShouldMatch(minShouldMatch);\n      for (BooleanClause clause : clauses) {\n        bq2Builder.add(clause);\n      }\n      final BooleanQuery bq2 = bq2Builder.build();\n\n      QueryUtils.checkEqual(bq1, bq2);\n    }\n  }\n\n","sourceOld":"  public void testEqualityDoesNotDependOnOrder() {\n    TermQuery[] queries = new TermQuery[] {\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"baz\"))\n    };\n    for (int iter = 0; iter < 10; ++iter) {\n      List<BooleanClause> clauses = new ArrayList<>();\n      final int numClauses = random().nextInt(20);\n      for (int i = 0; i < numClauses; ++i) {\n        Query query = RandomPicks.randomFrom(random(), queries);\n        if (random().nextBoolean()) {\n          query = new BoostQuery(query, random().nextFloat());\n        }\n        Occur occur = RandomPicks.randomFrom(random(), Occur.values());\n        clauses.add(new BooleanClause(query, occur));\n      }\n\n      final boolean disableCoord = random().nextBoolean();\n      final int minShouldMatch = random().nextInt(5);\n      BooleanQuery.Builder bq1Builder = new BooleanQuery.Builder();\n      bq1Builder.setDisableCoord(disableCoord);\n      bq1Builder.setMinimumNumberShouldMatch(minShouldMatch);\n      for (BooleanClause clause : clauses) {\n        bq1Builder.add(clause);\n      }\n      final BooleanQuery bq1 = bq1Builder.build();\n\n      Collections.shuffle(clauses, random());\n      BooleanQuery.Builder bq2Builder = new BooleanQuery.Builder();\n      bq2Builder.setDisableCoord(disableCoord);\n      bq2Builder.setMinimumNumberShouldMatch(minShouldMatch);\n      for (BooleanClause clause : clauses) {\n        bq2Builder.add(clause);\n      }\n      final BooleanQuery bq2 = bq2Builder.build();\n\n      QueryUtils.checkEqual(bq1, bq2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testEqualityDoesNotDependOnOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testEqualityDoesNotDependOnOrder().mjava","sourceNew":"  public void testEqualityDoesNotDependOnOrder() {\n    TermQuery[] queries = new TermQuery[] {\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"baz\"))\n    };\n    for (int iter = 0; iter < 10; ++iter) {\n      List<BooleanClause> clauses = new ArrayList<>();\n      final int numClauses = random().nextInt(20);\n      for (int i = 0; i < numClauses; ++i) {\n        Query query = RandomPicks.randomFrom(random(), queries);\n        if (random().nextBoolean()) {\n          query = new BoostQuery(query, random().nextFloat());\n        }\n        Occur occur = RandomPicks.randomFrom(random(), Occur.values());\n        clauses.add(new BooleanClause(query, occur));\n      }\n\n      final int minShouldMatch = random().nextInt(5);\n      BooleanQuery.Builder bq1Builder = new BooleanQuery.Builder();\n      bq1Builder.setMinimumNumberShouldMatch(minShouldMatch);\n      for (BooleanClause clause : clauses) {\n        bq1Builder.add(clause);\n      }\n      final BooleanQuery bq1 = bq1Builder.build();\n\n      Collections.shuffle(clauses, random());\n      BooleanQuery.Builder bq2Builder = new BooleanQuery.Builder();\n      bq2Builder.setMinimumNumberShouldMatch(minShouldMatch);\n      for (BooleanClause clause : clauses) {\n        bq2Builder.add(clause);\n      }\n      final BooleanQuery bq2 = bq2Builder.build();\n\n      QueryUtils.checkEqual(bq1, bq2);\n    }\n  }\n\n","sourceOld":"  public void testEqualityDoesNotDependOnOrder() {\n    TermQuery[] queries = new TermQuery[] {\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"baz\"))\n    };\n    for (int iter = 0; iter < 10; ++iter) {\n      List<BooleanClause> clauses = new ArrayList<>();\n      final int numClauses = random().nextInt(20);\n      for (int i = 0; i < numClauses; ++i) {\n        Query query = RandomPicks.randomFrom(random(), queries);\n        if (random().nextBoolean()) {\n          query = new BoostQuery(query, random().nextFloat());\n        }\n        Occur occur = RandomPicks.randomFrom(random(), Occur.values());\n        clauses.add(new BooleanClause(query, occur));\n      }\n\n      final boolean disableCoord = random().nextBoolean();\n      final int minShouldMatch = random().nextInt(5);\n      BooleanQuery.Builder bq1Builder = new BooleanQuery.Builder();\n      bq1Builder.setDisableCoord(disableCoord);\n      bq1Builder.setMinimumNumberShouldMatch(minShouldMatch);\n      for (BooleanClause clause : clauses) {\n        bq1Builder.add(clause);\n      }\n      final BooleanQuery bq1 = bq1Builder.build();\n\n      Collections.shuffle(clauses, random());\n      BooleanQuery.Builder bq2Builder = new BooleanQuery.Builder();\n      bq2Builder.setDisableCoord(disableCoord);\n      bq2Builder.setMinimumNumberShouldMatch(minShouldMatch);\n      for (BooleanClause clause : clauses) {\n        bq2Builder.add(clause);\n      }\n      final BooleanQuery bq2 = bq2Builder.build();\n\n      QueryUtils.checkEqual(bq1, bq2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969"],"4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}