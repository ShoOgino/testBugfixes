{"path":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkController).mjava","commits":[{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkController).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkController).mjava","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n                                        final String shardId, final String collection, final String coreNodeName,\n                                        ZkNodeProps props, ZkController zkController) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkController.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkStateReader = zkController.getZkStateReader();\n    this.zkClient = zkStateReader.getZkClient();\n    this.zkController = zkController;\n    this.shardId = shardId;\n    this.collection = collection;\n\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    // only if /collections/{collection} exists already do we succeed in creating this path\n    log.info(\"make sure parent is created {}\", parent);\n    try {\n      zcmd.ensureExists(parent, (byte[]) null, CreateMode.PERSISTENT, zkClient, 2);\n    } catch (KeeperException e) {\n      throw new RuntimeException(e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n      final String shardId, final String collection, final String coreNodeName,\n      ZkNodeProps props, ZkController zkController) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkController.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkStateReader = zkController.getZkStateReader();\n    this.zkClient = zkStateReader.getZkClient();\n    this.zkController = zkController;\n    this.shardId = shardId;\n    this.collection = collection;\n    \n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    // only if /collections/{collection} exists already do we succeed in creating this path\n    log.info(\"make sure parent is created {}\", parent);\n    try {\n      zcmd.ensureExists(parent, (byte[])null, CreateMode.PERSISTENT, zkClient, 2);\n    } catch (KeeperException e) {\n      throw new RuntimeException(e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3adc4d119a7deba35b2721853853464857d9d0a9","date":1594608068,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkController).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkController).mjava","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n                                        final String shardId, final String collection, final String coreNodeName,\n                                        ZkNodeProps props, ZkController zkController) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkController.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkStateReader = zkController.getZkStateReader();\n    this.zkClient = zkStateReader.getZkClient();\n    this.zkController = zkController;\n    this.shardId = shardId;\n    this.collection = collection;\n\n    String parent = Paths.get(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    // only if /collections/{collection} exists already do we succeed in creating this path\n    log.info(\"make sure parent is created {}\", parent);\n    try {\n      zcmd.ensureExists(parent, (byte[]) null, CreateMode.PERSISTENT, zkClient, 2);\n    } catch (KeeperException e) {\n      throw new RuntimeException(e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n                                        final String shardId, final String collection, final String coreNodeName,\n                                        ZkNodeProps props, ZkController zkController) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkController.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkStateReader = zkController.getZkStateReader();\n    this.zkClient = zkStateReader.getZkClient();\n    this.zkController = zkController;\n    this.shardId = shardId;\n    this.collection = collection;\n\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    // only if /collections/{collection} exists already do we succeed in creating this path\n    log.info(\"make sure parent is created {}\", parent);\n    try {\n      zcmd.ensureExists(parent, (byte[]) null, CreateMode.PERSISTENT, zkClient, 2);\n    } catch (KeeperException e) {\n      throw new RuntimeException(e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d12cb2880d9de40cdf8dfb8398beedbe238e1b3f","date":1594861381,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkController).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkController).mjava","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n                                        final String shardId, final String collection, final String coreNodeName,\n                                        ZkNodeProps props, ZkController zkController) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkController.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkStateReader = zkController.getZkStateReader();\n    this.zkClient = zkStateReader.getZkClient();\n    this.zkController = zkController;\n    this.shardId = shardId;\n    this.collection = collection;\n\n    // Fails on Windows if you use nio Paths.get here\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    // only if /collections/{collection} exists already do we succeed in creating this path\n    log.info(\"make sure parent is created {}\", parent);\n    try {\n      zcmd.ensureExists(parent, (byte[]) null, CreateMode.PERSISTENT, zkClient, 2);\n    } catch (KeeperException e) {\n      throw new RuntimeException(e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n                                        final String shardId, final String collection, final String coreNodeName,\n                                        ZkNodeProps props, ZkController zkController) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkController.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkStateReader = zkController.getZkStateReader();\n    this.zkClient = zkStateReader.getZkClient();\n    this.zkController = zkController;\n    this.shardId = shardId;\n    this.collection = collection;\n\n    String parent = Paths.get(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    // only if /collections/{collection} exists already do we succeed in creating this path\n    log.info(\"make sure parent is created {}\", parent);\n    try {\n      zcmd.ensureExists(parent, (byte[]) null, CreateMode.PERSISTENT, zkClient, 2);\n    } catch (KeeperException e) {\n      throw new RuntimeException(e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["1b4e25416a41abd13d1febb3eebf589cbc71e5ae"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b4e25416a41abd13d1febb3eebf589cbc71e5ae","date":1595017101,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkController).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase#ShardLeaderElectionContextBase(LeaderElector,String,String,String,ZkNodeProps,ZkController).mjava","sourceNew":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n                                        final String shardId, final String collection, final String coreNodeName,\n                                        ZkNodeProps props, ZkController zkController) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkController.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkStateReader = zkController.getZkStateReader();\n    this.zkClient = zkStateReader.getZkClient();\n    this.zkController = zkController;\n    this.shardId = shardId;\n    this.collection = collection;\n\n    String parent = ZkMaintenanceUtils.getZkParent(leaderPath);\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    // only if /collections/{collection} exists already do we succeed in creating this path\n    log.info(\"make sure parent is created {}\", parent);\n    try {\n      zcmd.ensureExists(parent, (byte[]) null, CreateMode.PERSISTENT, zkClient, 2);\n    } catch (KeeperException e) {\n      throw new RuntimeException(e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public ShardLeaderElectionContextBase(LeaderElector leaderElector,\n                                        final String shardId, final String collection, final String coreNodeName,\n                                        ZkNodeProps props, ZkController zkController) {\n    super(coreNodeName, ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection\n        + \"/leader_elect/\" + shardId, ZkStateReader.getShardLeadersPath(\n        collection, shardId), props, zkController.getZkClient());\n    this.leaderElector = leaderElector;\n    this.zkStateReader = zkController.getZkStateReader();\n    this.zkClient = zkStateReader.getZkClient();\n    this.zkController = zkController;\n    this.shardId = shardId;\n    this.collection = collection;\n\n    // Fails on Windows if you use nio Paths.get here\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    // only if /collections/{collection} exists already do we succeed in creating this path\n    log.info(\"make sure parent is created {}\", parent);\n    try {\n      zcmd.ensureExists(parent, (byte[]) null, CreateMode.PERSISTENT, zkClient, 2);\n    } catch (KeeperException e) {\n      throw new RuntimeException(e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":["d12cb2880d9de40cdf8dfb8398beedbe238e1b3f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3adc4d119a7deba35b2721853853464857d9d0a9":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"1b4e25416a41abd13d1febb3eebf589cbc71e5ae":["d12cb2880d9de40cdf8dfb8398beedbe238e1b3f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba33781da68babcaa5828121b443d3eb5c9d8480":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1b4e25416a41abd13d1febb3eebf589cbc71e5ae"],"d12cb2880d9de40cdf8dfb8398beedbe238e1b3f":["3adc4d119a7deba35b2721853853464857d9d0a9"]},"commit2Childs":{"3adc4d119a7deba35b2721853853464857d9d0a9":["d12cb2880d9de40cdf8dfb8398beedbe238e1b3f"],"1b4e25416a41abd13d1febb3eebf589cbc71e5ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["3adc4d119a7deba35b2721853853464857d9d0a9"],"d12cb2880d9de40cdf8dfb8398beedbe238e1b3f":["1b4e25416a41abd13d1febb3eebf589cbc71e5ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}