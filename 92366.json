{"path":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testPredicate().mjava","commits":[{"id":"7b2c4e17100e207bc842e56d016b9f91f411304e","date":1434336696,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testPredicate().mjava","pathOld":"/dev/null","sourceNew":"  private void testPredicate() throws Exception {\n\n    SqlParser parser = new SqlParser();\n    String sql = \"select a from b where c = 'd'\";\n    Statement statement = parser.createStatement(sql);\n    SQLHandler.SQLVisitor sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:d)\"));\n\n    //Add parens\n    parser = new SqlParser();\n    sql = \"select a from b where (c = 'd')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:d)\"));\n\n    //Phrase\n    parser = new SqlParser();\n    sql = \"select a from b where (c = '\\\"d d\\\"')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:\\\"d d\\\")\"));\n\n    // AND\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') AND (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:d) AND (l:z))\"));\n\n    // OR\n\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:d) OR (l:z))\"));\n\n    // AND NOT\n\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') AND NOT (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:d) AND -(l:z))\"));\n\n    // NESTED\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR ((l = 'z') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:d) OR ((l:z) AND (m:j)))\"));\n\n    // NESTED NOT\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR ((l = 'z') AND NOT (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:d) OR ((l:z) AND -(m:j)))\"));\n\n    // RANGE - Will have to do until SQL BETWEEN is supported.\n    // NESTED\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = '[0 TO 100]') OR ((l = 'z') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:z) AND (m:j)))\"));\n\n    // Wildcard\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = '[0 TO 100]') OR ((l = 'z*') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:z*) AND (m:j)))\"));\n\n    // Complex Lucene/Solr Query\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = '[0 TO 100]') OR ((l = 'z*') AND (m = '(j OR (k NOT s))')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:z*) AND (m:(j OR (k NOT s)))))\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da9a71da64ce12a97dcfcdd912893aeb1fa2981","date":1437510515,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testPredicate().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testPredicate().mjava","sourceNew":"  private void testPredicate() throws Exception {\n\n    SqlParser parser = new SqlParser();\n    String sql = \"select a from b where c = 'd'\";\n    Statement statement = parser.createStatement(sql);\n    SQLHandler.SQLVisitor sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:\\\"d\\\")\"));\n\n    //Add parens\n    parser = new SqlParser();\n    sql = \"select a from b where (c = 'd')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:\\\"d\\\")\"));\n\n    //Phrase\n    parser = new SqlParser();\n    sql = \"select a from b where (c = 'd d')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:\\\"d d\\\")\"));\n\n    // AND\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') AND (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") AND (l:\\\"z\\\"))\"));\n\n    // OR\n\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") OR (l:\\\"z\\\"))\"));\n\n    // AND NOT\n\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') AND NOT (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") AND -(l:\\\"z\\\"))\"));\n\n    // NESTED\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR ((l = 'z') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") OR ((l:\\\"z\\\") AND (m:\\\"j\\\")))\"));\n\n    // NESTED NOT\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR ((l = 'z') AND NOT (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") OR ((l:\\\"z\\\") AND -(m:\\\"j\\\")))\"));\n\n    // RANGE - Will have to do until SQL BETWEEN is supported.\n    // NESTED\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = '[0 TO 100]') OR ((l = '(z)') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:(z)) AND (m:\\\"j\\\")))\"));\n\n    // Wildcard\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = '[0 TO 100]') OR ((l = '(z*)') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:(z*)) AND (m:\\\"j\\\")))\"));\n\n    // Complex Lucene/Solr Query\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = '[0 TO 100]') OR ((l = '(z*)') AND (m = '(j OR (k NOT s))')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:(z*)) AND (m:(j OR (k NOT s)))))\"));\n  }\n\n","sourceOld":"  private void testPredicate() throws Exception {\n\n    SqlParser parser = new SqlParser();\n    String sql = \"select a from b where c = 'd'\";\n    Statement statement = parser.createStatement(sql);\n    SQLHandler.SQLVisitor sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:d)\"));\n\n    //Add parens\n    parser = new SqlParser();\n    sql = \"select a from b where (c = 'd')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:d)\"));\n\n    //Phrase\n    parser = new SqlParser();\n    sql = \"select a from b where (c = '\\\"d d\\\"')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:\\\"d d\\\")\"));\n\n    // AND\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') AND (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:d) AND (l:z))\"));\n\n    // OR\n\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:d) OR (l:z))\"));\n\n    // AND NOT\n\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') AND NOT (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:d) AND -(l:z))\"));\n\n    // NESTED\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR ((l = 'z') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:d) OR ((l:z) AND (m:j)))\"));\n\n    // NESTED NOT\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR ((l = 'z') AND NOT (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:d) OR ((l:z) AND -(m:j)))\"));\n\n    // RANGE - Will have to do until SQL BETWEEN is supported.\n    // NESTED\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = '[0 TO 100]') OR ((l = 'z') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:z) AND (m:j)))\"));\n\n    // Wildcard\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = '[0 TO 100]') OR ((l = 'z*') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:z*) AND (m:j)))\"));\n\n    // Complex Lucene/Solr Query\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = '[0 TO 100]') OR ((l = 'z*') AND (m = '(j OR (k NOT s))')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:z*) AND (m:(j OR (k NOT s)))))\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36479872320bb00635cb97ca6757614c88562e1b","date":1444426483,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testPredicate().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testPredicate().mjava","sourceNew":"  private void testPredicate() throws Exception {\n\n    SqlParser parser = new SqlParser();\n    String sql = \"select a from b where c = 'd'\";\n    Statement statement = parser.createStatement(sql);\n    SQLHandler.SQLVisitor sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:\\\"d\\\")\"));\n\n    //Add parens\n    parser = new SqlParser();\n    sql = \"select a from b where (c = 'd')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:\\\"d\\\")\"));\n\n\n    //Upper case\n    parser = new SqlParser();\n    sql = \"select a from b where ('CcC' = 'D')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"(CcC:\\\"D\\\")\"));\n\n    //Phrase\n    parser = new SqlParser();\n    sql = \"select a from b where (c = 'd d')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:\\\"d d\\\")\"));\n\n    // AND\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') AND (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") AND (l:\\\"z\\\"))\"));\n\n    // OR\n\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") OR (l:\\\"z\\\"))\"));\n\n    // AND NOT\n\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') AND NOT (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") AND -(l:\\\"z\\\"))\"));\n\n    // NESTED\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR ((l = 'z') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") OR ((l:\\\"z\\\") AND (m:\\\"j\\\")))\"));\n\n    // NESTED NOT\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR ((l = 'z') AND NOT (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") OR ((l:\\\"z\\\") AND -(m:\\\"j\\\")))\"));\n\n    // RANGE - Will have to do until SQL BETWEEN is supported.\n    // NESTED\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = '[0 TO 100]') OR ((l = '(z)') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:(z)) AND (m:\\\"j\\\")))\"));\n\n    // Wildcard\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = '[0 TO 100]') OR ((l = '(z*)') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:(z*)) AND (m:\\\"j\\\")))\"));\n\n    // Complex Lucene/Solr Query\n    parser = new SqlParser();\n    sql = \"select a from b where (('c' = '[0 TO 100]') OR ((l = '(z*)') AND ('M' = '(j OR (k NOT s))')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:(z*)) AND (M:(j OR (k NOT s)))))\"));\n  }\n\n","sourceOld":"  private void testPredicate() throws Exception {\n\n    SqlParser parser = new SqlParser();\n    String sql = \"select a from b where c = 'd'\";\n    Statement statement = parser.createStatement(sql);\n    SQLHandler.SQLVisitor sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:\\\"d\\\")\"));\n\n    //Add parens\n    parser = new SqlParser();\n    sql = \"select a from b where (c = 'd')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:\\\"d\\\")\"));\n\n    //Phrase\n    parser = new SqlParser();\n    sql = \"select a from b where (c = 'd d')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:\\\"d d\\\")\"));\n\n    // AND\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') AND (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") AND (l:\\\"z\\\"))\"));\n\n    // OR\n\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") OR (l:\\\"z\\\"))\"));\n\n    // AND NOT\n\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') AND NOT (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") AND -(l:\\\"z\\\"))\"));\n\n    // NESTED\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR ((l = 'z') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") OR ((l:\\\"z\\\") AND (m:\\\"j\\\")))\"));\n\n    // NESTED NOT\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR ((l = 'z') AND NOT (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") OR ((l:\\\"z\\\") AND -(m:\\\"j\\\")))\"));\n\n    // RANGE - Will have to do until SQL BETWEEN is supported.\n    // NESTED\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = '[0 TO 100]') OR ((l = '(z)') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:(z)) AND (m:\\\"j\\\")))\"));\n\n    // Wildcard\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = '[0 TO 100]') OR ((l = '(z*)') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:(z*)) AND (m:\\\"j\\\")))\"));\n\n    // Complex Lucene/Solr Query\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = '[0 TO 100]') OR ((l = '(z*)') AND (m = '(j OR (k NOT s))')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:(z*)) AND (m:(j OR (k NOT s)))))\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d984627825732e682759c22df7a3b171a80f3812","date":1461857653,"type":4,"author":"Kevin Risden","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testPredicate().mjava","sourceNew":null,"sourceOld":"  private void testPredicate() throws Exception {\n\n    SqlParser parser = new SqlParser();\n    String sql = \"select a from b where c = 'd'\";\n    Statement statement = parser.createStatement(sql);\n    SQLHandler.SQLVisitor sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:\\\"d\\\")\"));\n\n    //Add parens\n    parser = new SqlParser();\n    sql = \"select a from b where (c = 'd')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:\\\"d\\\")\"));\n\n\n    //Upper case\n    parser = new SqlParser();\n    sql = \"select a from b where ('CcC' = 'D')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"(CcC:\\\"D\\\")\"));\n\n    //Phrase\n    parser = new SqlParser();\n    sql = \"select a from b where (c = 'd d')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:\\\"d d\\\")\"));\n\n    // AND\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') AND (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") AND (l:\\\"z\\\"))\"));\n\n    // OR\n\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") OR (l:\\\"z\\\"))\"));\n\n    // AND NOT\n\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') AND NOT (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") AND -(l:\\\"z\\\"))\"));\n\n    // NESTED\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR ((l = 'z') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") OR ((l:\\\"z\\\") AND (m:\\\"j\\\")))\"));\n\n    // NESTED NOT\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR ((l = 'z') AND NOT (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") OR ((l:\\\"z\\\") AND -(m:\\\"j\\\")))\"));\n\n    // RANGE - Will have to do until SQL BETWEEN is supported.\n    // NESTED\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = '[0 TO 100]') OR ((l = '(z)') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:(z)) AND (m:\\\"j\\\")))\"));\n\n    // Wildcard\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = '[0 TO 100]') OR ((l = '(z*)') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:(z*)) AND (m:\\\"j\\\")))\"));\n\n    // Complex Lucene/Solr Query\n    parser = new SqlParser();\n    sql = \"select a from b where (('c' = '[0 TO 100]') OR ((l = '(z*)') AND ('M' = '(j OR (k NOT s))')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:(z*)) AND (M:(j OR (k NOT s)))))\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77ace774184b7fdbf04c66d1e206b8ff368dfb6c","date":1475777393,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testPredicate().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testPredicate().mjava","sourceNew":"  private void testPredicate() throws Exception {\n\n    SqlParser parser = new SqlParser();\n    String sql = \"select a from b where c = 'd'\";\n    Statement statement = parser.createStatement(sql);\n    SQLHandler.SQLVisitor sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(c:\\\"d\\\")\", sqlVistor.query);\n\n    parser = new SqlParser();\n    sql = \"select a from b where c = 5\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(c:\\\"5\\\")\", sqlVistor.query);\n\n    parser = new SqlParser();\n    sql = \"select a from b where c <> 'd'\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(-c:\\\"d\\\")\", sqlVistor.query);\n\n    parser = new SqlParser();\n    sql = \"select a from b where c <> 5\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(-c:\\\"5\\\")\", sqlVistor.query);\n\n    parser = new SqlParser();\n    sql = \"select a from b where c > 'd'\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(c:{\\\"d\\\" TO *])\", sqlVistor.query);\n\n    parser = new SqlParser();\n    sql = \"select a from b where c > 5\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(c:{\\\"5\\\" TO *])\", sqlVistor.query);\n\n    parser = new SqlParser();\n    sql = \"select a from b where c >= 'd'\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(c:[\\\"d\\\" TO *])\", sqlVistor.query);\n\n    parser = new SqlParser();\n    sql = \"select a from b where c >= 5\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(c:[\\\"5\\\" TO *])\", sqlVistor.query);\n\n    parser = new SqlParser();\n    sql = \"select a from b where c < 'd'\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(c:[* TO \\\"d\\\"})\", sqlVistor.query);\n\n    parser = new SqlParser();\n    sql = \"select a from b where c < 5\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(c:[* TO \\\"5\\\"})\", sqlVistor.query);\n\n    parser = new SqlParser();\n    sql = \"select a from b where c <= 'd'\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(c:[* TO \\\"d\\\"])\", sqlVistor.query);\n\n    parser = new SqlParser();\n    sql = \"select a from b where c <= 5\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(c:[* TO \\\"5\\\"])\", sqlVistor.query);\n\n    //Add parens\n    parser = new SqlParser();\n    sql = \"select a from b where (c = 'd')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:\\\"d\\\")\"));\n\n\n    //Upper case\n    parser = new SqlParser();\n    sql = \"select a from b where ('CcC' = 'D')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"(CcC:\\\"D\\\")\"));\n\n    //Phrase\n    parser = new SqlParser();\n    sql = \"select a from b where (c = 'd d')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:\\\"d d\\\")\"));\n\n    // AND\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') AND (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") AND (l:\\\"z\\\"))\"));\n\n    // OR\n\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") OR (l:\\\"z\\\"))\"));\n\n    // AND NOT\n\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') AND NOT (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") AND -(l:\\\"z\\\"))\"));\n\n    // NESTED\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR ((l = 'z') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") OR ((l:\\\"z\\\") AND (m:\\\"j\\\")))\"));\n\n    // NESTED NOT\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR ((l = 'z') AND NOT (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") OR ((l:\\\"z\\\") AND -(m:\\\"j\\\")))\"));\n\n    // RANGE - Will have to do until SQL BETWEEN is supported.\n    // NESTED\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = '[0 TO 100]') OR ((l = '(z)') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:(z)) AND (m:\\\"j\\\")))\"));\n\n    // Wildcard\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = '[0 TO 100]') OR ((l = '(z*)') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:(z*)) AND (m:\\\"j\\\")))\"));\n\n    // Complex Lucene/Solr Query\n    parser = new SqlParser();\n    sql = \"select a from b where (('c' = '[0 TO 100]') OR ((l = '(z*)') AND ('M' = '(j OR (k NOT s))')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:(z*)) AND (M:(j OR (k NOT s)))))\"));\n  }\n\n","sourceOld":"  private void testPredicate() throws Exception {\n\n    SqlParser parser = new SqlParser();\n    String sql = \"select a from b where c = 'd'\";\n    Statement statement = parser.createStatement(sql);\n    SQLHandler.SQLVisitor sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:\\\"d\\\")\"));\n\n    //Add parens\n    parser = new SqlParser();\n    sql = \"select a from b where (c = 'd')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:\\\"d\\\")\"));\n\n\n    //Upper case\n    parser = new SqlParser();\n    sql = \"select a from b where ('CcC' = 'D')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"(CcC:\\\"D\\\")\"));\n\n    //Phrase\n    parser = new SqlParser();\n    sql = \"select a from b where (c = 'd d')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:\\\"d d\\\")\"));\n\n    // AND\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') AND (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") AND (l:\\\"z\\\"))\"));\n\n    // OR\n\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") OR (l:\\\"z\\\"))\"));\n\n    // AND NOT\n\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') AND NOT (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") AND -(l:\\\"z\\\"))\"));\n\n    // NESTED\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR ((l = 'z') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") OR ((l:\\\"z\\\") AND (m:\\\"j\\\")))\"));\n\n    // NESTED NOT\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR ((l = 'z') AND NOT (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") OR ((l:\\\"z\\\") AND -(m:\\\"j\\\")))\"));\n\n    // RANGE - Will have to do until SQL BETWEEN is supported.\n    // NESTED\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = '[0 TO 100]') OR ((l = '(z)') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:(z)) AND (m:\\\"j\\\")))\"));\n\n    // Wildcard\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = '[0 TO 100]') OR ((l = '(z*)') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:(z*)) AND (m:\\\"j\\\")))\"));\n\n    // Complex Lucene/Solr Query\n    parser = new SqlParser();\n    sql = \"select a from b where (('c' = '[0 TO 100]') OR ((l = '(z*)') AND ('M' = '(j OR (k NOT s))')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:(z*)) AND (M:(j OR (k NOT s)))))\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":4,"author":"Joel Bernstein","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testPredicate().mjava","sourceNew":null,"sourceOld":"  private void testPredicate() throws Exception {\n\n    SqlParser parser = new SqlParser();\n    String sql = \"select a from b where c = 'd'\";\n    Statement statement = parser.createStatement(sql);\n    SQLHandler.SQLVisitor sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(c:\\\"d\\\")\", sqlVistor.query);\n\n    parser = new SqlParser();\n    sql = \"select a from b where c = 5\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(c:\\\"5\\\")\", sqlVistor.query);\n\n    parser = new SqlParser();\n    sql = \"select a from b where c <> 'd'\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(-c:\\\"d\\\")\", sqlVistor.query);\n\n    parser = new SqlParser();\n    sql = \"select a from b where c <> 5\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(-c:\\\"5\\\")\", sqlVistor.query);\n\n    parser = new SqlParser();\n    sql = \"select a from b where c > 'd'\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(c:{\\\"d\\\" TO *])\", sqlVistor.query);\n\n    parser = new SqlParser();\n    sql = \"select a from b where c > 5\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(c:{\\\"5\\\" TO *])\", sqlVistor.query);\n\n    parser = new SqlParser();\n    sql = \"select a from b where c >= 'd'\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(c:[\\\"d\\\" TO *])\", sqlVistor.query);\n\n    parser = new SqlParser();\n    sql = \"select a from b where c >= 5\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(c:[\\\"5\\\" TO *])\", sqlVistor.query);\n\n    parser = new SqlParser();\n    sql = \"select a from b where c < 'd'\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(c:[* TO \\\"d\\\"})\", sqlVistor.query);\n\n    parser = new SqlParser();\n    sql = \"select a from b where c < 5\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(c:[* TO \\\"5\\\"})\", sqlVistor.query);\n\n    parser = new SqlParser();\n    sql = \"select a from b where c <= 'd'\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(c:[* TO \\\"d\\\"])\", sqlVistor.query);\n\n    parser = new SqlParser();\n    sql = \"select a from b where c <= 5\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, 0);\n\n    assertEquals(\"(c:[* TO \\\"5\\\"])\", sqlVistor.query);\n\n    //Add parens\n    parser = new SqlParser();\n    sql = \"select a from b where (c = 'd')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:\\\"d\\\")\"));\n\n\n    //Upper case\n    parser = new SqlParser();\n    sql = \"select a from b where ('CcC' = 'D')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"(CcC:\\\"D\\\")\"));\n\n    //Phrase\n    parser = new SqlParser();\n    sql = \"select a from b where (c = 'd d')\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"(c:\\\"d d\\\")\"));\n\n    // AND\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') AND (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") AND (l:\\\"z\\\"))\"));\n\n    // OR\n\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") OR (l:\\\"z\\\"))\"));\n\n    // AND NOT\n\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') AND NOT (l = 'z'))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") AND -(l:\\\"z\\\"))\"));\n\n    // NESTED\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR ((l = 'z') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") OR ((l:\\\"z\\\") AND (m:\\\"j\\\")))\"));\n\n    // NESTED NOT\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = 'd') OR ((l = 'z') AND NOT (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:\\\"d\\\") OR ((l:\\\"z\\\") AND -(m:\\\"j\\\")))\"));\n\n    // RANGE - Will have to do until SQL BETWEEN is supported.\n    // NESTED\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = '[0 TO 100]') OR ((l = '(z)') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:(z)) AND (m:\\\"j\\\")))\"));\n\n    // Wildcard\n    parser = new SqlParser();\n    sql = \"select a from b where ((c = '[0 TO 100]') OR ((l = '(z*)') AND (m = 'j')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:(z*)) AND (m:\\\"j\\\")))\"));\n\n    // Complex Lucene/Solr Query\n    parser = new SqlParser();\n    sql = \"select a from b where (('c' = '[0 TO 100]') OR ((l = '(z*)') AND ('M' = '(j OR (k NOT s))')))\";\n    statement = parser.createStatement(sql);\n    sqlVistor = new SQLHandler.SQLVisitor(new StringBuilder());\n    sqlVistor.process(statement, new Integer(0));\n    assert(sqlVistor.query.equals(\"((c:[0 TO 100]) OR ((l:(z*)) AND (M:(j OR (k NOT s)))))\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36479872320bb00635cb97ca6757614c88562e1b":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["77ace774184b7fdbf04c66d1e206b8ff368dfb6c","d984627825732e682759c22df7a3b171a80f3812"],"d984627825732e682759c22df7a3b171a80f3812":["36479872320bb00635cb97ca6757614c88562e1b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b2c4e17100e207bc842e56d016b9f91f411304e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"77ace774184b7fdbf04c66d1e206b8ff368dfb6c":["36479872320bb00635cb97ca6757614c88562e1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"]},"commit2Childs":{"36479872320bb00635cb97ca6757614c88562e1b":["d984627825732e682759c22df7a3b171a80f3812","77ace774184b7fdbf04c66d1e206b8ff368dfb6c"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d984627825732e682759c22df7a3b171a80f3812":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"7b2c4e17100e207bc842e56d016b9f91f411304e":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["36479872320bb00635cb97ca6757614c88562e1b"],"77ace774184b7fdbf04c66d1e206b8ff368dfb6c":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}