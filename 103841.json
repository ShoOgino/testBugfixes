{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTest(int,Token[],Token[],int[],String[],boolean).mjava","commits":[{"id":"f6a10bd7a06139a7fe2285d8094a66bc2cdaeaf4","date":1252476174,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTest(int,Token[],Token[],int[],String[],boolean).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTest(int,Token[],Token[],int[],String[]).mjava","sourceNew":"  protected void shingleFilterTest(int maxSize, Token[] tokensToShingle, Token[] tokensToCompare,\n                                   int[] positionIncrements, String[] types,\n                                   boolean outputUnigrams)\n    throws IOException {\n\n    ShingleFilter filter = new ShingleFilter(new TestTokenStream(tokensToShingle), maxSize);\n    filter.setOutputUnigrams(outputUnigrams);\n\n    TermAttribute termAtt = (TermAttribute) filter.addAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = (OffsetAttribute) filter.addAttribute(OffsetAttribute.class);\n    PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) filter.addAttribute(PositionIncrementAttribute.class);\n    TypeAttribute typeAtt = (TypeAttribute) filter.addAttribute(TypeAttribute.class);\n\n    int i = 0;\n    while (filter.incrementToken()) {\n      assertTrue(\"ShingleFilter outputted more tokens than expected\", i < tokensToCompare.length);\n      String termText = termAtt.term();\n      String goldText = tokensToCompare[i].term();\n      assertEquals(\"Wrong termText\", goldText, termText);\n      assertEquals(\"Wrong startOffset for token \\\"\" + termText + \"\\\"\",\n          tokensToCompare[i].startOffset(), offsetAtt.startOffset());\n      assertEquals(\"Wrong endOffset for token \\\"\" + termText + \"\\\"\",\n          tokensToCompare[i].endOffset(), offsetAtt.endOffset());\n      assertEquals(\"Wrong positionIncrement for token \\\"\" + termText + \"\\\"\",\n          positionIncrements[i], posIncrAtt.getPositionIncrement());\n      assertEquals(\"Wrong type for token \\\"\" + termText + \"\\\"\", types[i], typeAtt.type());\n      i++;\n    }\n    assertEquals(\"ShingleFilter outputted wrong # of tokens. (# output = \" + i + \"; # expected =\" + tokensToCompare.length + \")\",\n                 tokensToCompare.length, i);\n  }\n\n","sourceOld":"  protected void shingleFilterTest(int maxSize, Token[] tokensToShingle, Token[] tokensToCompare,\n                                   int[] positionIncrements, String[] types)\n    throws IOException {\n\n    TokenStream filter = new ShingleFilter(new TestTokenStream(tokensToShingle), maxSize);\n    TermAttribute termAtt = (TermAttribute) filter.addAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = (OffsetAttribute) filter.addAttribute(OffsetAttribute.class);\n    PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) filter.addAttribute(PositionIncrementAttribute.class);\n    TypeAttribute typeAtt = (TypeAttribute) filter.addAttribute(TypeAttribute.class);\n\n    int i = 0;\n    while (filter.incrementToken()) {\n      String termText = termAtt.term();\n      String goldText = tokensToCompare[i].term();\n      assertEquals(\"Wrong termText\", goldText, termText);\n      assertEquals(\"Wrong startOffset for token \\\"\" + termText + \"\\\"\",\n          tokensToCompare[i].startOffset(), offsetAtt.startOffset());\n      assertEquals(\"Wrong endOffset for token \\\"\" + termText + \"\\\"\",\n          tokensToCompare[i].endOffset(), offsetAtt.endOffset());\n      assertEquals(\"Wrong positionIncrement for token \\\"\" + termText + \"\\\"\",\n          positionIncrements[i], posIncrAtt.getPositionIncrement());\n      assertEquals(\"Wrong type for token \\\"\" + termText + \"\\\"\", types[i], typeAtt.type());\n      i++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTest(int,Token[],Token[],int[],String[],boolean).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTest(int,Token[],Token[],int[],String[],boolean).mjava","sourceNew":"  protected void shingleFilterTest(int maxSize, Token[] tokensToShingle, Token[] tokensToCompare,\n                                   int[] positionIncrements, String[] types,\n                                   boolean outputUnigrams)\n    throws IOException {\n\n    ShingleFilter filter = new ShingleFilter(new TestTokenStream(tokensToShingle), maxSize);\n    filter.setOutputUnigrams(outputUnigrams);\n\n    TermAttribute termAtt = filter.addAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = filter.addAttribute(OffsetAttribute.class);\n    PositionIncrementAttribute posIncrAtt = filter.addAttribute(PositionIncrementAttribute.class);\n    TypeAttribute typeAtt = filter.addAttribute(TypeAttribute.class);\n\n    int i = 0;\n    while (filter.incrementToken()) {\n      assertTrue(\"ShingleFilter outputted more tokens than expected\", i < tokensToCompare.length);\n      String termText = termAtt.term();\n      String goldText = tokensToCompare[i].term();\n      assertEquals(\"Wrong termText\", goldText, termText);\n      assertEquals(\"Wrong startOffset for token \\\"\" + termText + \"\\\"\",\n          tokensToCompare[i].startOffset(), offsetAtt.startOffset());\n      assertEquals(\"Wrong endOffset for token \\\"\" + termText + \"\\\"\",\n          tokensToCompare[i].endOffset(), offsetAtt.endOffset());\n      assertEquals(\"Wrong positionIncrement for token \\\"\" + termText + \"\\\"\",\n          positionIncrements[i], posIncrAtt.getPositionIncrement());\n      assertEquals(\"Wrong type for token \\\"\" + termText + \"\\\"\", types[i], typeAtt.type());\n      i++;\n    }\n    assertEquals(\"ShingleFilter outputted wrong # of tokens. (# output = \" + i + \"; # expected =\" + tokensToCompare.length + \")\",\n                 tokensToCompare.length, i);\n  }\n\n","sourceOld":"  protected void shingleFilterTest(int maxSize, Token[] tokensToShingle, Token[] tokensToCompare,\n                                   int[] positionIncrements, String[] types,\n                                   boolean outputUnigrams)\n    throws IOException {\n\n    ShingleFilter filter = new ShingleFilter(new TestTokenStream(tokensToShingle), maxSize);\n    filter.setOutputUnigrams(outputUnigrams);\n\n    TermAttribute termAtt = (TermAttribute) filter.addAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = (OffsetAttribute) filter.addAttribute(OffsetAttribute.class);\n    PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) filter.addAttribute(PositionIncrementAttribute.class);\n    TypeAttribute typeAtt = (TypeAttribute) filter.addAttribute(TypeAttribute.class);\n\n    int i = 0;\n    while (filter.incrementToken()) {\n      assertTrue(\"ShingleFilter outputted more tokens than expected\", i < tokensToCompare.length);\n      String termText = termAtt.term();\n      String goldText = tokensToCompare[i].term();\n      assertEquals(\"Wrong termText\", goldText, termText);\n      assertEquals(\"Wrong startOffset for token \\\"\" + termText + \"\\\"\",\n          tokensToCompare[i].startOffset(), offsetAtt.startOffset());\n      assertEquals(\"Wrong endOffset for token \\\"\" + termText + \"\\\"\",\n          tokensToCompare[i].endOffset(), offsetAtt.endOffset());\n      assertEquals(\"Wrong positionIncrement for token \\\"\" + termText + \"\\\"\",\n          positionIncrements[i], posIncrAtt.getPositionIncrement());\n      assertEquals(\"Wrong type for token \\\"\" + termText + \"\\\"\", types[i], typeAtt.type());\n      i++;\n    }\n    assertEquals(\"ShingleFilter outputted wrong # of tokens. (# output = \" + i + \"; # expected =\" + tokensToCompare.length + \")\",\n                 tokensToCompare.length, i);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39","date":1264946641,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTest(int,Token[],Token[],int[],String[],boolean).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTest(int,Token[],Token[],int[],String[],boolean).mjava","sourceNew":"  protected void shingleFilterTest(int maxSize, Token[] tokensToShingle, Token[] tokensToCompare,\n                                   int[] positionIncrements, String[] types,\n                                   boolean outputUnigrams)\n    throws IOException {\n\n    ShingleFilter filter = new ShingleFilter(new TestTokenStream(tokensToShingle), maxSize);\n    shingleFilterTestCommon\n      (filter, tokensToCompare, positionIncrements, types, outputUnigrams);\n  }\n\n","sourceOld":"  protected void shingleFilterTest(int maxSize, Token[] tokensToShingle, Token[] tokensToCompare,\n                                   int[] positionIncrements, String[] types,\n                                   boolean outputUnigrams)\n    throws IOException {\n\n    ShingleFilter filter = new ShingleFilter(new TestTokenStream(tokensToShingle), maxSize);\n    filter.setOutputUnigrams(outputUnigrams);\n\n    TermAttribute termAtt = filter.addAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = filter.addAttribute(OffsetAttribute.class);\n    PositionIncrementAttribute posIncrAtt = filter.addAttribute(PositionIncrementAttribute.class);\n    TypeAttribute typeAtt = filter.addAttribute(TypeAttribute.class);\n\n    int i = 0;\n    while (filter.incrementToken()) {\n      assertTrue(\"ShingleFilter outputted more tokens than expected\", i < tokensToCompare.length);\n      String termText = termAtt.term();\n      String goldText = tokensToCompare[i].term();\n      assertEquals(\"Wrong termText\", goldText, termText);\n      assertEquals(\"Wrong startOffset for token \\\"\" + termText + \"\\\"\",\n          tokensToCompare[i].startOffset(), offsetAtt.startOffset());\n      assertEquals(\"Wrong endOffset for token \\\"\" + termText + \"\\\"\",\n          tokensToCompare[i].endOffset(), offsetAtt.endOffset());\n      assertEquals(\"Wrong positionIncrement for token \\\"\" + termText + \"\\\"\",\n          positionIncrements[i], posIncrAtt.getPositionIncrement());\n      assertEquals(\"Wrong type for token \\\"\" + termText + \"\\\"\", types[i], typeAtt.type());\n      i++;\n    }\n    assertEquals(\"ShingleFilter outputted wrong # of tokens. (# output = \" + i + \"; # expected =\" + tokensToCompare.length + \")\",\n                 tokensToCompare.length, i);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTest(int,Token[],Token[],int[],String[],boolean).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleFilterTest#shingleFilterTest(int,Token[],Token[],int[],String[],boolean).mjava","sourceNew":"  protected void shingleFilterTest(int maxSize, Token[] tokensToShingle, Token[] tokensToCompare,\n                                   int[] positionIncrements, String[] types,\n                                   boolean outputUnigrams)\n    throws IOException {\n\n    ShingleFilter filter = new ShingleFilter(new TestTokenStream(tokensToShingle), maxSize);\n    shingleFilterTestCommon\n      (filter, tokensToCompare, positionIncrements, types, outputUnigrams);\n  }\n\n","sourceOld":"  protected void shingleFilterTest(int maxSize, Token[] tokensToShingle, Token[] tokensToCompare,\n                                   int[] positionIncrements, String[] types,\n                                   boolean outputUnigrams)\n    throws IOException {\n\n    ShingleFilter filter = new ShingleFilter(new TestTokenStream(tokensToShingle), maxSize);\n    shingleFilterTestCommon\n      (filter, tokensToCompare, positionIncrements, types, outputUnigrams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d78f014fded44fbde905f4f84cdc21907b371e8":["f6a10bd7a06139a7fe2285d8094a66bc2cdaeaf4"],"f6a10bd7a06139a7fe2285d8094a66bc2cdaeaf4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39"]},"commit2Childs":{"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6a10bd7a06139a7fe2285d8094a66bc2cdaeaf4"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39"],"f6a10bd7a06139a7fe2285d8094a66bc2cdaeaf4":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}