{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    q(\"q\", \"*:*\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    q(\"q\", \"*:*\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    q(\"q\", \"*:*\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    q(\"q\", \"*:*\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    q(\"q\", \"*:*\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    q(\"q\", \"*:*\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5","date":1320922486,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n        \n    q(\"q\", \"*:*\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  \n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    q(\"q\", \"*:*\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  }\n\n","bugFix":null,"bugIntro":["9f53e30d1a17e72299f6e7a149cd1ca6d90b554c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a207aeb3e27baa146de0bead73cf0fd8883111c","date":1329321152,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n        \n    q(\"q\", \"*:*\", \"spellcheck\", \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  \n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n        \n    q(\"q\", \"*:*\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  \n  }\n\n","bugFix":["1805a9b39f81f70b33c67bd84a1d672c896ceca0"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n        \n    q(\"q\", \"*:*\", \"spellcheck\", \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\", SpellingParams.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  \n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n        \n    q(\"q\", \"*:*\", \"spellcheck\", \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  \n  }\n\n","bugFix":null,"bugIntro":["9f53e30d1a17e72299f6e7a149cd1ca6d90b554c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n        \n    q(\"q\", \"*:*\", \"spellcheck\", \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\", SpellingParams.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  \n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n        \n    q(\"q\", \"*:*\", \"spellcheck\", \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"4\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"541f6605a29362fa8a42f33b69069e7da5178034","date":1337786849,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n        \n    q(\"q\", \"*:*\", \"spellcheck\", \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\", SpellingParams.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  \n    query(\"q\", \"lowerfilt:(\\\"quote red fox\\\")\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_ALTERNATIVE_TERM_COUNT, \"5\", SpellCheckComponent.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, \"10\");\n    query(\"q\", \"lowerfilt:(\\\"rod fix\\\")\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_ALTERNATIVE_TERM_COUNT, \"5\", SpellCheckComponent.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, \"10\");\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n        \n    q(\"q\", \"*:*\", \"spellcheck\", \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\", SpellingParams.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  \n  }\n\n","bugFix":null,"bugIntro":["9f53e30d1a17e72299f6e7a149cd1ca6d90b554c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n        \n    q(\"q\", \"*:*\", \"spellcheck\", \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\", SpellingParams.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  \n    query(\"q\", \"lowerfilt:(\\\"quote red fox\\\")\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_ALTERNATIVE_TERM_COUNT, \"5\", SpellCheckComponent.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, \"10\");\n    query(\"q\", \"lowerfilt:(\\\"rod fix\\\")\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_ALTERNATIVE_TERM_COUNT, \"5\", SpellCheckComponent.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, \"10\");\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n        \n    q(\"q\", \"*:*\", \"spellcheck\", \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\", SpellingParams.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad9ec888e587ca9a3279368245cdf00aabdc108","date":1338832525,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n        \n    q(\"q\", \"*:*\", \"spellcheck\", \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\", SpellingParams.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  \n    query(\"q\", \"lowerfilt:(\\\"quote red fox\\\")\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_ALTERNATIVE_TERM_COUNT, \"5\", SpellCheckComponent.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, \"10\");\n    query(\"q\", \"lowerfilt:(\\\"rod fix\\\")\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_ALTERNATIVE_TERM_COUNT, \"5\", SpellCheckComponent.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, \"10\");\n  \n    query(\"q\", \"lowerfilt:(+quock +redfox +jum +ped)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", reqHandlerWithWordbreak, \"shards.qt\", reqHandlerWithWordbreak, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n        \n    q(\"q\", \"*:*\", \"spellcheck\", \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\", SpellingParams.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  \n    query(\"q\", \"lowerfilt:(\\\"quote red fox\\\")\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_ALTERNATIVE_TERM_COUNT, \"5\", SpellCheckComponent.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, \"10\");\n    query(\"q\", \"lowerfilt:(\\\"rod fix\\\")\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_ALTERNATIVE_TERM_COUNT, \"5\", SpellCheckComponent.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, \"10\");\n  }\n\n","bugFix":null,"bugIntro":["9f53e30d1a17e72299f6e7a149cd1ca6d90b554c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7ad332474d675e1022ebd516bc281dd2876f14a7","date":1338844537,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n        \n    q(\"q\", \"*:*\", \"spellcheck\", \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\", SpellingParams.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  \n    query(\"q\", \"lowerfilt:(\\\"quote red fox\\\")\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_ALTERNATIVE_TERM_COUNT, \"5\", SpellCheckComponent.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, \"10\");\n    query(\"q\", \"lowerfilt:(\\\"rod fix\\\")\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_ALTERNATIVE_TERM_COUNT, \"5\", SpellCheckComponent.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, \"10\");\n  \n    //query(\"q\", \"lowerfilt:(+quock +redfox +jum +ped)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", reqHandlerWithWordbreak, \"shards.qt\", reqHandlerWithWordbreak, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n        \n    q(\"q\", \"*:*\", \"spellcheck\", \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\", SpellingParams.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  \n    query(\"q\", \"lowerfilt:(\\\"quote red fox\\\")\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_ALTERNATIVE_TERM_COUNT, \"5\", SpellCheckComponent.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, \"10\");\n    query(\"q\", \"lowerfilt:(\\\"rod fix\\\")\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_ALTERNATIVE_TERM_COUNT, \"5\", SpellCheckComponent.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, \"10\");\n  \n    query(\"q\", \"lowerfilt:(+quock +redfox +jum +ped)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", reqHandlerWithWordbreak, \"shards.qt\", reqHandlerWithWordbreak, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56d78974d33c1244e0810e0dc8f1c6371faceac9","date":1338918242,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n        \n    q(\"q\", \"*:*\", \"spellcheck\", \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\", SpellingParams.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  \n    query(\"q\", \"lowerfilt:(\\\"quote red fox\\\")\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_ALTERNATIVE_TERM_COUNT, \"5\", SpellCheckComponent.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, \"10\");\n    query(\"q\", \"lowerfilt:(\\\"rod fix\\\")\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_ALTERNATIVE_TERM_COUNT, \"5\", SpellCheckComponent.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, \"10\");\n  \n    query(\"q\", \"lowerfilt:(+quock +redfox +jum +ped)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", reqHandlerWithWordbreak, \"shards.qt\", reqHandlerWithWordbreak, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n        \n    q(\"q\", \"*:*\", \"spellcheck\", \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\", SpellingParams.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  \n    query(\"q\", \"lowerfilt:(\\\"quote red fox\\\")\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_ALTERNATIVE_TERM_COUNT, \"5\", SpellCheckComponent.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, \"10\");\n    query(\"q\", \"lowerfilt:(\\\"rod fix\\\")\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_ALTERNATIVE_TERM_COUNT, \"5\", SpellCheckComponent.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, \"10\");\n  \n    //query(\"q\", \"lowerfilt:(+quock +redfox +jum +ped)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", reqHandlerWithWordbreak, \"shards.qt\", reqHandlerWithWordbreak, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n  }\n\n","bugFix":null,"bugIntro":["9f53e30d1a17e72299f6e7a149cd1ca6d90b554c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n        \n    q(\"q\", \"*:*\", \"spellcheck\", \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\", SpellingParams.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  \n    query(\"q\", \"lowerfilt:(\\\"quote red fox\\\")\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_ALTERNATIVE_TERM_COUNT, \"5\", SpellCheckComponent.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, \"10\");\n    query(\"q\", \"lowerfilt:(\\\"rod fix\\\")\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_ALTERNATIVE_TERM_COUNT, \"5\", SpellCheckComponent.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, \"10\");\n  \n    query(\"q\", \"lowerfilt:(+quock +redfox +jum +ped)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", reqHandlerWithWordbreak, \"shards.qt\", reqHandlerWithWordbreak, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n  \tdel(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n        \n    q(\"q\", \"*:*\", \"spellcheck\", \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\", SpellingParams.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  \n    query(\"q\", \"lowerfilt:(\\\"quote red fox\\\")\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_ALTERNATIVE_TERM_COUNT, \"5\", SpellCheckComponent.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, \"10\");\n    query(\"q\", \"lowerfilt:(\\\"rod fix\\\")\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_ALTERNATIVE_TERM_COUNT, \"5\", SpellCheckComponent.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, \"10\");\n  \n    query(\"q\", \"lowerfilt:(+quock +redfox +jum +ped)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", reqHandlerWithWordbreak, \"shards.qt\", reqHandlerWithWordbreak, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f53e30d1a17e72299f6e7a149cd1ca6d90b554c","date":1364838207,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    handle.put(\"grouped\", SKIP);\n    \n    //Randomly select either IndexBasedSpellChecker or DirectSolrSpellChecker\n    String requestHandlerName = \"spellCheckCompRH_Direct\";\n    String reqHandlerWithWordbreak = \"spellCheckWithWordbreak_Direct\";\n    if(random().nextBoolean()) {\n      requestHandlerName = \"spellCheckCompRH\";\n      reqHandlerWithWordbreak = \"spellCheckWithWordbreak\";   \n    } \n    \n    //Shortcut names\n    String build = SpellingParams.SPELLCHECK_BUILD;\n    String extended = SpellingParams.SPELLCHECK_EXTENDED_RESULTS;\n    String count = SpellingParams.SPELLCHECK_COUNT;\n    String collate = SpellingParams.SPELLCHECK_COLLATE;\n    String collateExtended = SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS;\n    String maxCollationTries = SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES;\n    String maxCollations = SpellingParams.SPELLCHECK_MAX_COLLATIONS;\n    String altTermCount = SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT;\n    String maxResults = SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST;\n     \n    //Build the dictionary for IndexBasedSpellChecker\n    q(buildRequest(\"*:*\", false, \"spellCheckCompRH\", false, build, \"true\"));\n    \n    //Test Basic Functionality\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), (String[]) null));\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), extended, \"true\"));\n    query(buildRequest(\"bluo\", true, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\"));\n    \n    //Test Collate functionality\n    query(buildRequest(\"The quick reb fox jumped over the lazy brown dogs\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\", collate, \"true\"));    \n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"false\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"false\"));\n    \n    //Test context-sensitive collate\n    query(buildRequest(\"lowerfilt:(\\\"quote red fox\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    \n    //Test word-break spellchecker\n    query(buildRequest(\"lowerfilt:(+quock +redfox +jum +ped)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n        \n    q(\"q\", \"*:*\", \"spellcheck\", \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\");\n    \n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName);\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"toyata\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"*:*\", \"fl\", \"id,lowerfilt\", \"spellcheck.q\",\"bluo\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\");\n    query(\"q\", \"The quick reb fox jumped over the lazy brown dogs\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"4\", SpellingParams.SPELLCHECK_COLLATE, \"true\");\n\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"10\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n    query(\"q\", \"lowerfilt:(+quock +reb)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", requestHandlerName, \"shards.qt\", requestHandlerName, SpellingParams.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellingParams.SPELLCHECK_COUNT, \"10\", SpellingParams.SPELLCHECK_COLLATE, \"true\", SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"false\");\n  \n    query(\"q\", \"lowerfilt:(\\\"quote red fox\\\")\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_ALTERNATIVE_TERM_COUNT, \"5\", SpellCheckComponent.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, \"10\");\n    query(\"q\", \"lowerfilt:(\\\"rod fix\\\")\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", \"spellCheckCompRH\", \"shards.qt\", \"spellCheckCompRH\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_ALTERNATIVE_TERM_COUNT, \"5\", SpellCheckComponent.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, \"10\");\n  \n    query(\"q\", \"lowerfilt:(+quock +redfox +jum +ped)\", \"fl\", \"id,lowerfilt\", \"spellcheck\", \"true\", \"qt\", reqHandlerWithWordbreak, \"shards.qt\", reqHandlerWithWordbreak, SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\", SpellCheckComponent.SPELLCHECK_COUNT, \"10\", SpellCheckComponent.SPELLCHECK_COLLATE, \"true\", SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\", SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\", SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n  }\n\n","bugFix":["51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5","f08557cdb6c60ac7b88a9342c983a20cd236e74f","6cee2d88cddadfdbf6a07ac928dfbd77bb6480c1","0ad9ec888e587ca9a3279368245cdf00aabdc108","56d78974d33c1244e0810e0dc8f1c6371faceac9","541f6605a29362fa8a42f33b69069e7da5178034"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"072f211dfa8387028bb978d128c35bf9a450bbbf","date":1406041363,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    handle.put(\"grouped\", SKIP);\n    \n    //Randomly select either IndexBasedSpellChecker or DirectSolrSpellChecker\n    String requestHandlerName = \"spellCheckCompRH_Direct\";\n    String reqHandlerWithWordbreak = \"spellCheckWithWordbreak_Direct\";\n    if(random().nextBoolean()) {\n      requestHandlerName = \"spellCheckCompRH\";\n      reqHandlerWithWordbreak = \"spellCheckWithWordbreak\";   \n    } \n    \n    //Shortcut names\n    String build = SpellingParams.SPELLCHECK_BUILD;\n    String extended = SpellingParams.SPELLCHECK_EXTENDED_RESULTS;\n    String count = SpellingParams.SPELLCHECK_COUNT;\n    String collate = SpellingParams.SPELLCHECK_COLLATE;\n    String collateExtended = SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS;\n    String maxCollationTries = SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES;\n    String maxCollations = SpellingParams.SPELLCHECK_MAX_COLLATIONS;\n    String altTermCount = SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT;\n    String maxResults = SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST;\n     \n    //Build the dictionary for IndexBasedSpellChecker\n    q(buildRequest(\"*:*\", false, \"spellCheckCompRH\", false, build, \"true\"));\n    \n    //Test Basic Functionality\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), (String[]) null));\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), extended, \"true\"));\n    query(buildRequest(\"bluo\", true, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\"));\n    \n    //Test Collate functionality\n    query(buildRequest(\"The quick reb fox jumped over the lazy brown dogs\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\", collate, \"true\"));    \n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"false\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"false\"));\n    \n    //Test context-sensitive collate\n    query(buildRequest(\"lowerfilt:(\\\"quote red fox\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    \n    //Test word-break spellchecker\n    query(buildRequest(\"lowerfilt:(+quock +redfox +jum +ped)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    handle.put(\"grouped\", SKIP);\n    \n    //Randomly select either IndexBasedSpellChecker or DirectSolrSpellChecker\n    String requestHandlerName = \"spellCheckCompRH_Direct\";\n    String reqHandlerWithWordbreak = \"spellCheckWithWordbreak_Direct\";\n    if(random().nextBoolean()) {\n      requestHandlerName = \"spellCheckCompRH\";\n      reqHandlerWithWordbreak = \"spellCheckWithWordbreak\";   \n    } \n    \n    //Shortcut names\n    String build = SpellingParams.SPELLCHECK_BUILD;\n    String extended = SpellingParams.SPELLCHECK_EXTENDED_RESULTS;\n    String count = SpellingParams.SPELLCHECK_COUNT;\n    String collate = SpellingParams.SPELLCHECK_COLLATE;\n    String collateExtended = SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS;\n    String maxCollationTries = SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES;\n    String maxCollations = SpellingParams.SPELLCHECK_MAX_COLLATIONS;\n    String altTermCount = SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT;\n    String maxResults = SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST;\n     \n    //Build the dictionary for IndexBasedSpellChecker\n    q(buildRequest(\"*:*\", false, \"spellCheckCompRH\", false, build, \"true\"));\n    \n    //Test Basic Functionality\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), (String[]) null));\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), extended, \"true\"));\n    query(buildRequest(\"bluo\", true, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\"));\n    \n    //Test Collate functionality\n    query(buildRequest(\"The quick reb fox jumped over the lazy brown dogs\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\", collate, \"true\"));    \n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"false\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"false\"));\n    \n    //Test context-sensitive collate\n    query(buildRequest(\"lowerfilt:(\\\"quote red fox\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    \n    //Test word-break spellchecker\n    query(buildRequest(\"lowerfilt:(+quock +redfox +jum +ped)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n  }\n\n","bugFix":["9079aceb3d611cfeb6922ebdf91003c30a08b745"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"343d2d9477b299075fa3a19a46e654b6c3bf552b","date":1407872410,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"The quicker red fox jumped over the lazy brown dogs.\");\n    index(id, \"26\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    handle.put(\"grouped\", SKIP);\n    \n    //Randomly select either IndexBasedSpellChecker or DirectSolrSpellChecker\n    String requestHandlerName = \"spellCheckCompRH_Direct\";\n    String reqHandlerWithWordbreak = \"spellCheckWithWordbreak_Direct\";\n    if(random().nextBoolean()) {\n      requestHandlerName = \"spellCheckCompRH\";\n      reqHandlerWithWordbreak = \"spellCheckWithWordbreak\";   \n    } \n    \n    //Shortcut names\n    String build = SpellingParams.SPELLCHECK_BUILD;\n    String extended = SpellingParams.SPELLCHECK_EXTENDED_RESULTS;\n    String count = SpellingParams.SPELLCHECK_COUNT;\n    String collate = SpellingParams.SPELLCHECK_COLLATE;\n    String collateExtended = SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS;\n    String maxCollationTries = SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES;\n    String maxCollations = SpellingParams.SPELLCHECK_MAX_COLLATIONS;\n    String altTermCount = SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT;\n    String maxResults = SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST;\n     \n    //Build the dictionary for IndexBasedSpellChecker\n    q(buildRequest(\"*:*\", false, \"spellCheckCompRH\", false, build, \"true\"));\n    \n    //Test Basic Functionality\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), (String[]) null));\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), extended, \"true\"));\n    query(buildRequest(\"bluo\", true, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\"));\n    \n    //Test Collate functionality\n    query(buildRequest(\"The quick reb fox jumped over the lazy brown dogs\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\", collate, \"true\"));    \n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"false\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"false\"));\n    \n    //Test context-sensitive collate\n    query(buildRequest(\"lowerfilt:(\\\"quick red fox\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    \n    //Test word-break spellchecker\n    query(buildRequest(\"lowerfilt:(+quock +redfox +jum +ped)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    handle.put(\"grouped\", SKIP);\n    \n    //Randomly select either IndexBasedSpellChecker or DirectSolrSpellChecker\n    String requestHandlerName = \"spellCheckCompRH_Direct\";\n    String reqHandlerWithWordbreak = \"spellCheckWithWordbreak_Direct\";\n    if(random().nextBoolean()) {\n      requestHandlerName = \"spellCheckCompRH\";\n      reqHandlerWithWordbreak = \"spellCheckWithWordbreak\";   \n    } \n    \n    //Shortcut names\n    String build = SpellingParams.SPELLCHECK_BUILD;\n    String extended = SpellingParams.SPELLCHECK_EXTENDED_RESULTS;\n    String count = SpellingParams.SPELLCHECK_COUNT;\n    String collate = SpellingParams.SPELLCHECK_COLLATE;\n    String collateExtended = SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS;\n    String maxCollationTries = SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES;\n    String maxCollations = SpellingParams.SPELLCHECK_MAX_COLLATIONS;\n    String altTermCount = SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT;\n    String maxResults = SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST;\n     \n    //Build the dictionary for IndexBasedSpellChecker\n    q(buildRequest(\"*:*\", false, \"spellCheckCompRH\", false, build, \"true\"));\n    \n    //Test Basic Functionality\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), (String[]) null));\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), extended, \"true\"));\n    query(buildRequest(\"bluo\", true, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\"));\n    \n    //Test Collate functionality\n    query(buildRequest(\"The quick reb fox jumped over the lazy brown dogs\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\", collate, \"true\"));    \n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"false\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"false\"));\n    \n    //Test context-sensitive collate\n    query(buildRequest(\"lowerfilt:(\\\"quote red fox\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    \n    //Test word-break spellchecker\n    query(buildRequest(\"lowerfilt:(+quock +redfox +jum +ped)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e65acce892eede973379cb2fb3b90ea49a4a5ed","date":1409839025,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"The quicker red fox jumped over the lazy brown dogs.\");\n    index(id, \"26\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    handle.put(\"grouped\", SKIP);\n    \n    //Randomly select either IndexBasedSpellChecker or DirectSolrSpellChecker\n    String requestHandlerName = \"spellCheckCompRH_Direct\";\n    String reqHandlerWithWordbreak = \"spellCheckWithWordbreak_Direct\";\n    if(random().nextBoolean()) {\n      requestHandlerName = \"spellCheckCompRH\";\n      reqHandlerWithWordbreak = \"spellCheckWithWordbreak\";   \n    } \n    \n    //Shortcut names\n    String build = SpellingParams.SPELLCHECK_BUILD;\n    String extended = SpellingParams.SPELLCHECK_EXTENDED_RESULTS;\n    String count = SpellingParams.SPELLCHECK_COUNT;\n    String collate = SpellingParams.SPELLCHECK_COLLATE;\n    String collateExtended = SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS;\n    String maxCollationTries = SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES;\n    String maxCollations = SpellingParams.SPELLCHECK_MAX_COLLATIONS;\n    String altTermCount = SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT;\n    String maxResults = SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST;\n     \n    //Build the dictionary for IndexBasedSpellChecker\n    q(buildRequest(\"*:*\", false, \"spellCheckCompRH\", false, build, \"true\"));\n    \n    //Test Basic Functionality\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), (String[]) null));\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), extended, \"true\"));\n    query(buildRequest(\"bluo\", true, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\"));\n    \n    //Test Collate functionality\n    query(buildRequest(\"The quick reb fox jumped over the lazy brown dogs\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\", collate, \"true\"));    \n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"false\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"false\"));\n    \n    //Test context-sensitive collate\n    query(buildRequest(\"lowerfilt:(\\\"quick red fox\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    \n    //Test word-break spellchecker\n    query(buildRequest(\"lowerfilt:(+quock +redfox +jum +ped)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+rodfix)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+son +ata)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"The quicker red fox jumped over the lazy brown dogs.\");\n    index(id, \"26\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    handle.put(\"grouped\", SKIP);\n    \n    //Randomly select either IndexBasedSpellChecker or DirectSolrSpellChecker\n    String requestHandlerName = \"spellCheckCompRH_Direct\";\n    String reqHandlerWithWordbreak = \"spellCheckWithWordbreak_Direct\";\n    if(random().nextBoolean()) {\n      requestHandlerName = \"spellCheckCompRH\";\n      reqHandlerWithWordbreak = \"spellCheckWithWordbreak\";   \n    } \n    \n    //Shortcut names\n    String build = SpellingParams.SPELLCHECK_BUILD;\n    String extended = SpellingParams.SPELLCHECK_EXTENDED_RESULTS;\n    String count = SpellingParams.SPELLCHECK_COUNT;\n    String collate = SpellingParams.SPELLCHECK_COLLATE;\n    String collateExtended = SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS;\n    String maxCollationTries = SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES;\n    String maxCollations = SpellingParams.SPELLCHECK_MAX_COLLATIONS;\n    String altTermCount = SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT;\n    String maxResults = SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST;\n     \n    //Build the dictionary for IndexBasedSpellChecker\n    q(buildRequest(\"*:*\", false, \"spellCheckCompRH\", false, build, \"true\"));\n    \n    //Test Basic Functionality\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), (String[]) null));\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), extended, \"true\"));\n    query(buildRequest(\"bluo\", true, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\"));\n    \n    //Test Collate functionality\n    query(buildRequest(\"The quick reb fox jumped over the lazy brown dogs\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\", collate, \"true\"));    \n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"false\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"false\"));\n    \n    //Test context-sensitive collate\n    query(buildRequest(\"lowerfilt:(\\\"quick red fox\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    \n    //Test word-break spellchecker\n    query(buildRequest(\"lowerfilt:(+quock +redfox +jum +ped)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"The quicker red fox jumped over the lazy brown dogs.\");\n    index(id, \"26\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    handle.put(\"grouped\", SKIP);\n    \n    //Randomly select either IndexBasedSpellChecker or DirectSolrSpellChecker\n    String requestHandlerName = \"spellCheckCompRH_Direct\";\n    String reqHandlerWithWordbreak = \"spellCheckWithWordbreak_Direct\";\n    if(random().nextBoolean()) {\n      requestHandlerName = \"spellCheckCompRH\";\n      reqHandlerWithWordbreak = \"spellCheckWithWordbreak\";   \n    } \n    \n    //Shortcut names\n    String build = SpellingParams.SPELLCHECK_BUILD;\n    String extended = SpellingParams.SPELLCHECK_EXTENDED_RESULTS;\n    String count = SpellingParams.SPELLCHECK_COUNT;\n    String collate = SpellingParams.SPELLCHECK_COLLATE;\n    String collateExtended = SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS;\n    String maxCollationTries = SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES;\n    String maxCollations = SpellingParams.SPELLCHECK_MAX_COLLATIONS;\n    String altTermCount = SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT;\n    String maxResults = SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST;\n     \n    //Build the dictionary for IndexBasedSpellChecker\n    q(buildRequest(\"*:*\", false, \"spellCheckCompRH\", false, build, \"true\"));\n    \n    //Test Basic Functionality\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), (String[]) null));\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), extended, \"true\"));\n    query(buildRequest(\"bluo\", true, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\"));\n    \n    //Test Collate functionality\n    query(buildRequest(\"The quick reb fox jumped over the lazy brown dogs\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\", collate, \"true\"));    \n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"false\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"false\"));\n    \n    //Test context-sensitive collate\n    query(buildRequest(\"lowerfilt:(\\\"quick red fox\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    \n    //Test word-break spellchecker\n    query(buildRequest(\"lowerfilt:(+quock +redfox +jum +ped)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+rodfix)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+son +ata)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"The quicker red fox jumped over the lazy brown dogs.\");\n    index(id, \"26\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    handle.put(\"grouped\", SKIP);\n    \n    //Randomly select either IndexBasedSpellChecker or DirectSolrSpellChecker\n    String requestHandlerName = \"spellCheckCompRH_Direct\";\n    String reqHandlerWithWordbreak = \"spellCheckWithWordbreak_Direct\";\n    if(random().nextBoolean()) {\n      requestHandlerName = \"spellCheckCompRH\";\n      reqHandlerWithWordbreak = \"spellCheckWithWordbreak\";   \n    } \n    \n    //Shortcut names\n    String build = SpellingParams.SPELLCHECK_BUILD;\n    String extended = SpellingParams.SPELLCHECK_EXTENDED_RESULTS;\n    String count = SpellingParams.SPELLCHECK_COUNT;\n    String collate = SpellingParams.SPELLCHECK_COLLATE;\n    String collateExtended = SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS;\n    String maxCollationTries = SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES;\n    String maxCollations = SpellingParams.SPELLCHECK_MAX_COLLATIONS;\n    String altTermCount = SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT;\n    String maxResults = SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST;\n     \n    //Build the dictionary for IndexBasedSpellChecker\n    q(buildRequest(\"*:*\", false, \"spellCheckCompRH\", false, build, \"true\"));\n    \n    //Test Basic Functionality\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), (String[]) null));\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), extended, \"true\"));\n    query(buildRequest(\"bluo\", true, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\"));\n    \n    //Test Collate functionality\n    query(buildRequest(\"The quick reb fox jumped over the lazy brown dogs\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\", collate, \"true\"));    \n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"false\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"false\"));\n    \n    //Test context-sensitive collate\n    query(buildRequest(\"lowerfilt:(\\\"quick red fox\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    \n    //Test word-break spellchecker\n    query(buildRequest(\"lowerfilt:(+quock +redfox +jum +ped)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+rodfix)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+son +ata)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"072f211dfa8387028bb978d128c35bf9a450bbbf":["9f53e30d1a17e72299f6e7a149cd1ca6d90b554c"],"56d78974d33c1244e0810e0dc8f1c6371faceac9":["7ad332474d675e1022ebd516bc281dd2876f14a7"],"0ad9ec888e587ca9a3279368245cdf00aabdc108":["541f6605a29362fa8a42f33b69069e7da5178034"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a207aeb3e27baa146de0bead73cf0fd8883111c","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"abb23fcc2461782ab204e61213240feb77d355aa":["8e65acce892eede973379cb2fb3b90ea49a4a5ed"],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["072f211dfa8387028bb978d128c35bf9a450bbbf"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a207aeb3e27baa146de0bead73cf0fd8883111c"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"9f53e30d1a17e72299f6e7a149cd1ca6d90b554c":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"541f6605a29362fa8a42f33b69069e7da5178034":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"8e65acce892eede973379cb2fb3b90ea49a4a5ed":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","541f6605a29362fa8a42f33b69069e7da5178034"],"7ad332474d675e1022ebd516bc281dd2876f14a7":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a207aeb3e27baa146de0bead73cf0fd8883111c":["51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["56d78974d33c1244e0810e0dc8f1c6371faceac9"]},"commit2Childs":{"072f211dfa8387028bb978d128c35bf9a450bbbf":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"56d78974d33c1244e0810e0dc8f1c6371faceac9":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"0ad9ec888e587ca9a3279368245cdf00aabdc108":["7ad332474d675e1022ebd516bc281dd2876f14a7"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","541f6605a29362fa8a42f33b69069e7da5178034","3599646b4d4c346cf74d334813488b8b337b5bf5"],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["8e65acce892eede973379cb2fb3b90ea49a4a5ed"],"c26f00b574427b55127e869b935845554afde1fa":["51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5"],"9f53e30d1a17e72299f6e7a149cd1ca6d90b554c":["072f211dfa8387028bb978d128c35bf9a450bbbf"],"541f6605a29362fa8a42f33b69069e7da5178034":["0ad9ec888e587ca9a3279368245cdf00aabdc108","3599646b4d4c346cf74d334813488b8b337b5bf5"],"8e65acce892eede973379cb2fb3b90ea49a4a5ed":["abb23fcc2461782ab204e61213240feb77d355aa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"7ad332474d675e1022ebd516bc281dd2876f14a7":["56d78974d33c1244e0810e0dc8f1c6371faceac9"],"51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5":["3a207aeb3e27baa146de0bead73cf0fd8883111c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"3a207aeb3e27baa146de0bead73cf0fd8883111c":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["9f53e30d1a17e72299f6e7a149cd1ca6d90b554c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","3599646b4d4c346cf74d334813488b8b337b5bf5","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}