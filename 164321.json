{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedIntsNull().mjava","commits":[{"id":"cb240aebd5a347d79f642127ad9255dd9a979f06","date":1375188159,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedIntsNull().mjava","pathOld":"/dev/null","sourceNew":"  public void testPackedIntsNull() {\n    int size = _TestUtil.nextInt(random(), 0, 256);\n    Reader packedInts = new PackedInts.NullReader(size);\n    assertEquals(0, packedInts.get(_TestUtil.nextInt(random(), 0, size - 1)));\n    long[] arr = new long[size + 10];\n    int r;\n    Arrays.fill(arr, 1);\n    r = packedInts.get(0, arr, 0, size - 1);\n    assertEquals(size - 1, r);\n    for (r--; r >= 0; r--) {\n      assertEquals(0, arr[r]);\n    }\n    Arrays.fill(arr, 1);\n    r = packedInts.get(10, arr, 0, size + 10);\n    assertEquals(size - 10, r);\n    for (int i = 0; i < size - 10; i++) {\n      assertEquals(0, arr[i]);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db0f92273490b4a8ab621092cf70dc15db97a90f","date":1375215555,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedIntsNull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedIntsNull().mjava","sourceNew":"  public void testPackedIntsNull() {\n    // must be > 10 for the bulk reads below\n    int size = _TestUtil.nextInt(random(), 11, 256);\n    Reader packedInts = new PackedInts.NullReader(size);\n    assertEquals(0, packedInts.get(_TestUtil.nextInt(random(), 0, size - 1)));\n    long[] arr = new long[size + 10];\n    int r;\n    Arrays.fill(arr, 1);\n    r = packedInts.get(0, arr, 0, size - 1);\n    assertEquals(size - 1, r);\n    for (r--; r >= 0; r--) {\n      assertEquals(0, arr[r]);\n    }\n    Arrays.fill(arr, 1);\n    r = packedInts.get(10, arr, 0, size + 10);\n    assertEquals(size - 10, r);\n    for (int i = 0; i < size - 10; i++) {\n      assertEquals(0, arr[i]);\n    }\n\n  }\n\n","sourceOld":"  public void testPackedIntsNull() {\n    int size = _TestUtil.nextInt(random(), 0, 256);\n    Reader packedInts = new PackedInts.NullReader(size);\n    assertEquals(0, packedInts.get(_TestUtil.nextInt(random(), 0, size - 1)));\n    long[] arr = new long[size + 10];\n    int r;\n    Arrays.fill(arr, 1);\n    r = packedInts.get(0, arr, 0, size - 1);\n    assertEquals(size - 1, r);\n    for (r--; r >= 0; r--) {\n      assertEquals(0, arr[r]);\n    }\n    Arrays.fill(arr, 1);\n    r = packedInts.get(10, arr, 0, size + 10);\n    assertEquals(size - 10, r);\n    for (int i = 0; i < size - 10; i++) {\n      assertEquals(0, arr[i]);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedIntsNull().mjava","pathOld":"/dev/null","sourceNew":"  public void testPackedIntsNull() {\n    // must be > 10 for the bulk reads below\n    int size = _TestUtil.nextInt(random(), 11, 256);\n    Reader packedInts = new PackedInts.NullReader(size);\n    assertEquals(0, packedInts.get(_TestUtil.nextInt(random(), 0, size - 1)));\n    long[] arr = new long[size + 10];\n    int r;\n    Arrays.fill(arr, 1);\n    r = packedInts.get(0, arr, 0, size - 1);\n    assertEquals(size - 1, r);\n    for (r--; r >= 0; r--) {\n      assertEquals(0, arr[r]);\n    }\n    Arrays.fill(arr, 1);\n    r = packedInts.get(10, arr, 0, size + 10);\n    assertEquals(size - 10, r);\n    for (int i = 0; i < size - 10; i++) {\n      assertEquals(0, arr[i]);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedIntsNull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedIntsNull().mjava","sourceNew":"  public void testPackedIntsNull() {\n    // must be > 10 for the bulk reads below\n    int size = TestUtil.nextInt(random(), 11, 256);\n    Reader packedInts = new PackedInts.NullReader(size);\n    assertEquals(0, packedInts.get(TestUtil.nextInt(random(), 0, size - 1)));\n    long[] arr = new long[size + 10];\n    int r;\n    Arrays.fill(arr, 1);\n    r = packedInts.get(0, arr, 0, size - 1);\n    assertEquals(size - 1, r);\n    for (r--; r >= 0; r--) {\n      assertEquals(0, arr[r]);\n    }\n    Arrays.fill(arr, 1);\n    r = packedInts.get(10, arr, 0, size + 10);\n    assertEquals(size - 10, r);\n    for (int i = 0; i < size - 10; i++) {\n      assertEquals(0, arr[i]);\n    }\n\n  }\n\n","sourceOld":"  public void testPackedIntsNull() {\n    // must be > 10 for the bulk reads below\n    int size = _TestUtil.nextInt(random(), 11, 256);\n    Reader packedInts = new PackedInts.NullReader(size);\n    assertEquals(0, packedInts.get(_TestUtil.nextInt(random(), 0, size - 1)));\n    long[] arr = new long[size + 10];\n    int r;\n    Arrays.fill(arr, 1);\n    r = packedInts.get(0, arr, 0, size - 1);\n    assertEquals(size - 1, r);\n    for (r--; r >= 0; r--) {\n      assertEquals(0, arr[r]);\n    }\n    Arrays.fill(arr, 1);\n    r = packedInts.get(10, arr, 0, size + 10);\n    assertEquals(size - 10, r);\n    for (int i = 0; i < size - 10; i++) {\n      assertEquals(0, arr[i]);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db0f92273490b4a8ab621092cf70dc15db97a90f":["cb240aebd5a347d79f642127ad9255dd9a979f06"],"6613659748fe4411a7dcf85266e55db1f95f7315":["db0f92273490b4a8ab621092cf70dc15db97a90f"],"cb240aebd5a347d79f642127ad9255dd9a979f06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"db0f92273490b4a8ab621092cf70dc15db97a90f":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cb240aebd5a347d79f642127ad9255dd9a979f06":["db0f92273490b4a8ab621092cf70dc15db97a90f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb240aebd5a347d79f642127ad9255dd9a979f06","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}