{"path":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#deleteDocuments(Term).mjava","commits":[{"id":"c2045b132a2396bb23dff28d2d9f349a6907d36e","date":1367513076,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#deleteDocuments(Term).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNRTManager#deleteDocuments(Term).mjava","sourceNew":"  @Override\n  protected void deleteDocuments(Term id) throws Exception {\n    final long gen = genWriter.deleteDocuments(id);\n    // randomly verify the delete \"took\":\n    if (random().nextInt(20) == 7) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify del \" + id);\n      }\n      nrtDeletesThread.waitForGeneration(gen);\n      final IndexSearcher s = nrtDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(0, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","sourceOld":"  @Override\n  protected void deleteDocuments(Term id) throws Exception {\n    final long gen = genWriter.deleteDocuments(id);\n    // randomly verify the delete \"took\":\n    if (random().nextInt(20) == 7) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify del \" + id);\n      }\n      nrtDeletes.waitForGeneration(gen);\n      final IndexSearcher s = nrtDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(0, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e5cee716c29944d6fcbb8f558285d2aa5c07da8","date":1450118305,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#deleteDocuments(Term).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#deleteDocuments(Term).mjava","sourceNew":"  @Override\n  protected void deleteDocuments(Term id) throws Exception {\n    final long gen = genWriter.deleteDocuments(id);\n    // randomly verify the delete \"took\":\n    if (random().nextInt(20) == 7) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify del \" + id);\n      }\n      nrtDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(0, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","sourceOld":"  @Override\n  protected void deleteDocuments(Term id) throws Exception {\n    final long gen = genWriter.deleteDocuments(id);\n    // randomly verify the delete \"took\":\n    if (random().nextInt(20) == 7) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify del \" + id);\n      }\n      nrtDeletesThread.waitForGeneration(gen);\n      final IndexSearcher s = nrtDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(0, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"730b7b729dd280f1fec51e6b252f24c4de2a68e1","date":1465891767,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#deleteDocuments(Term).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#deleteDocuments(Term).mjava","sourceNew":"  @Override\n  protected void deleteDocuments(Term id) throws Exception {\n    final long gen = genWriter.deleteDocuments(id);\n    // randomly verify the delete \"took\":\n    if (random().nextInt(20) == 7) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify deleteDocuments \" + id + \" gen=\" + gen);\n      }\n      nrtDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got deletes searcher=\" + s);\n      }\n      try {\n        assertEquals(0, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","sourceOld":"  @Override\n  protected void deleteDocuments(Term id) throws Exception {\n    final long gen = genWriter.deleteDocuments(id);\n    // randomly verify the delete \"took\":\n    if (random().nextInt(20) == 7) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify del \" + id);\n      }\n      nrtDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(0, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#deleteDocuments(Term).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#deleteDocuments(Term).mjava","sourceNew":"  @Override\n  protected void deleteDocuments(Term id) throws Exception {\n    final long gen = genWriter.deleteDocuments(id);\n    // randomly verify the delete \"took\":\n    if (random().nextInt(20) == 7) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify deleteDocuments \" + id + \" gen=\" + gen);\n      }\n      nrtDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got deletes searcher=\" + s);\n      }\n      try {\n        assertEquals(0, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","sourceOld":"  @Override\n  protected void deleteDocuments(Term id) throws Exception {\n    final long gen = genWriter.deleteDocuments(id);\n    // randomly verify the delete \"took\":\n    if (random().nextInt(20) == 7) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify del \" + id);\n      }\n      nrtDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(0, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#deleteDocuments(Term).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#deleteDocuments(Term).mjava","sourceNew":"  @Override\n  protected void deleteDocuments(Term id) throws Exception {\n    final long gen = genWriter.deleteDocuments(id);\n    // randomly verify the delete \"took\":\n    if (random().nextInt(20) == 7) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify deleteDocuments \" + id + \" gen=\" + gen);\n      }\n      nrtDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got deletes searcher=\" + s);\n      }\n      try {\n        assertEquals(0, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","sourceOld":"  @Override\n  protected void deleteDocuments(Term id) throws Exception {\n    final long gen = genWriter.deleteDocuments(id);\n    // randomly verify the delete \"took\":\n    if (random().nextInt(20) == 7) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify del \" + id);\n      }\n      nrtDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(0, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#deleteDocuments(Term).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#deleteDocuments(Term).mjava","sourceNew":"  @Override\n  protected void deleteDocuments(Term id) throws Exception {\n    final long gen = genWriter.deleteDocuments(id);\n    // randomly verify the delete \"took\":\n    if (random().nextInt(20) == 7) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify deleteDocuments \" + id + \" gen=\" + gen);\n      }\n      nrtDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got deletes searcher=\" + s);\n      }\n      try {\n        assertEquals(0, s.search(new TermQuery(id), 10).totalHits.value);\n      } finally {\n        nrtDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","sourceOld":"  @Override\n  protected void deleteDocuments(Term id) throws Exception {\n    final long gen = genWriter.deleteDocuments(id);\n    // randomly verify the delete \"took\":\n    if (random().nextInt(20) == 7) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify deleteDocuments \" + id + \" gen=\" + gen);\n      }\n      nrtDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got deletes searcher=\" + s);\n      }\n      try {\n        assertEquals(0, s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2045b132a2396bb23dff28d2d9f349a6907d36e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"730b7b729dd280f1fec51e6b252f24c4de2a68e1":["7e5cee716c29944d6fcbb8f558285d2aa5c07da8"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["7e5cee716c29944d6fcbb8f558285d2aa5c07da8","730b7b729dd280f1fec51e6b252f24c4de2a68e1"],"7e5cee716c29944d6fcbb8f558285d2aa5c07da8":["c2045b132a2396bb23dff28d2d9f349a6907d36e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7e5cee716c29944d6fcbb8f558285d2aa5c07da8","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"c2045b132a2396bb23dff28d2d9f349a6907d36e":["7e5cee716c29944d6fcbb8f558285d2aa5c07da8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2045b132a2396bb23dff28d2d9f349a6907d36e"],"730b7b729dd280f1fec51e6b252f24c4de2a68e1":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["83788ad129a5154d5c6562c4e8ce3db48793aada","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7e5cee716c29944d6fcbb8f558285d2aa5c07da8":["730b7b729dd280f1fec51e6b252f24c4de2a68e1","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}