{"path":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdateWithRouteField#setupCluster().mjava","commits":[{"id":"de77148275e541f915efc6e934c276a0a7ec45ea","date":1556190342,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdateWithRouteField#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = TestUtil.nextInt(random(), 1, 3);\n    configureCluster(nodeCount)\n\n        .addConfig(configName, configDir)\n        .configure();\n\n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\" );\n    collectionProperties.put(\"schema\", \"schema-inplace-updates.xml\");\n\n    int replicas = 2;\n    // router field can be defined either  for ImplicitDocRouter or CompositeIdRouter\n    boolean implicit = random().nextBoolean();\n    String routerName = implicit ? \"implicit\":\"compositeId\";\n    Create createCmd = CollectionAdminRequest.createCollection(COLLECTION, configName, shards.length, replicas)\n        .setMaxShardsPerNode(shards.length * replicas)\n        .setProperties(collectionProperties)\n        .setRouterName(routerName)\n        .setRouterField(\"shardName\");\n    if (implicit) {\n      createCmd.setShards(Arrays.stream(shards).collect(Collectors.joining(\",\")));\n    }\n    createCmd.process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdateWithRouteField#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdateWithRouteField#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = TestUtil.nextInt(random(), 1, 3);\n    configureCluster(nodeCount)\n\n        .addConfig(configName, configDir)\n        .configure();\n\n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\" );\n    collectionProperties.put(\"schema\", \"schema-inplace-updates.xml\");\n\n    int replicas = 2;\n    // router field can be defined either  for ImplicitDocRouter or CompositeIdRouter\n    boolean implicit = random().nextBoolean();\n    String routerName = implicit ? \"implicit\":\"compositeId\";\n    Create createCmd = CollectionAdminRequest.createCollection(COLLECTION, configName, shards.length, replicas)\n        .setProperties(collectionProperties)\n        .setRouterName(routerName)\n        .setRouterField(\"shardName\");\n    if (implicit) {\n      createCmd.setShards(Arrays.stream(shards).collect(Collectors.joining(\",\")));\n    }\n    createCmd.process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n\n    String configName = \"solrCloudCollectionConfig\";\n    int nodeCount = TestUtil.nextInt(random(), 1, 3);\n    configureCluster(nodeCount)\n\n        .addConfig(configName, configDir)\n        .configure();\n\n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\" );\n    collectionProperties.put(\"schema\", \"schema-inplace-updates.xml\");\n\n    int replicas = 2;\n    // router field can be defined either  for ImplicitDocRouter or CompositeIdRouter\n    boolean implicit = random().nextBoolean();\n    String routerName = implicit ? \"implicit\":\"compositeId\";\n    Create createCmd = CollectionAdminRequest.createCollection(COLLECTION, configName, shards.length, replicas)\n        .setMaxShardsPerNode(shards.length * replicas)\n        .setProperties(collectionProperties)\n        .setRouterName(routerName)\n        .setRouterField(\"shardName\");\n    if (implicit) {\n      createCmd.setShards(Arrays.stream(shards).collect(Collectors.joining(\",\")));\n    }\n    createCmd.process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de77148275e541f915efc6e934c276a0a7ec45ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["de77148275e541f915efc6e934c276a0a7ec45ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de77148275e541f915efc6e934c276a0a7ec45ea"],"de77148275e541f915efc6e934c276a0a7ec45ea":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}