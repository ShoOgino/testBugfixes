{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory,boolean).mjava","commits":[{"id":"a199589f8815be5b2c960d0a591ca1ddad8b52b1","date":1342833673,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static BaseDirectoryWrapper newFSDirectory(File f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      if (lf != null) {\n        wrapped.setLockFactory(lf);\n      }\n      return wrapped;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static BaseDirectoryWrapper newFSDirectory(File f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      if (lf != null) {\n        wrapped.setLockFactory(lf);\n      }\n      return wrapped;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static BaseDirectoryWrapper newFSDirectory(File f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      if (lf != null) {\n        wrapped.setLockFactory(lf);\n      }\n      return wrapped;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c0e11c85a63a4eb8a3f072df2a1d380b7e48c14","date":1396642661,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper newFSDirectory(File f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      if (lf != null) {\n        wrapped.setLockFactory(lf);\n      }\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper newFSDirectory(File f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      if (lf != null) {\n        wrapped.setLockFactory(lf);\n      }\n      return wrapped;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper newFSDirectory(File f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      if (lf != null) {\n        wrapped.setLockFactory(lf);\n      }\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper newFSDirectory(File f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      if (lf != null) {\n        wrapped.setLockFactory(lf);\n      }\n      return wrapped;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(Path,LockFactory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper newFSDirectory(Path f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      if (lf != null) {\n        wrapped.setLockFactory(lf);\n      }\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper newFSDirectory(File f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      if (lf != null) {\n        wrapped.setLockFactory(lf);\n      }\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a199589f8815be5b2c960d0a591ca1ddad8b52b1"],"a199589f8815be5b2c960d0a591ca1ddad8b52b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["a199589f8815be5b2c960d0a591ca1ddad8b52b1","4c0e11c85a63a4eb8a3f072df2a1d380b7e48c14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a199589f8815be5b2c960d0a591ca1ddad8b52b1"],"4c0e11c85a63a4eb8a3f072df2a1d380b7e48c14":["a199589f8815be5b2c960d0a591ca1ddad8b52b1"],"f4abec28b874149a7223e32cc7a01704c27790de":["4c0e11c85a63a4eb8a3f072df2a1d380b7e48c14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a199589f8815be5b2c960d0a591ca1ddad8b52b1":["aba371508186796cc6151d8223a5b4e16d02e26e","15e323346eac5e4685c0a9f2df85eb96b4239bbb","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","4c0e11c85a63a4eb8a3f072df2a1d380b7e48c14"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","a199589f8815be5b2c960d0a591ca1ddad8b52b1","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"4c0e11c85a63a4eb8a3f072df2a1d380b7e48c14":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","15e323346eac5e4685c0a9f2df85eb96b4239bbb","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}