{"path":"solr/core/src/java/org/apache/solr/search/CursorMark#getSerializedTotem().mjava","commits":[{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CursorMark#getSerializedTotem().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Generates a Base64 encoded serialized representation of the sort values \n   * encapsulated by this object, for use in cursor requests.\n   *\n   * @see #parseSerializedTotem\n   */\n  public String getSerializedTotem() {\n    if (null == this.values) {\n      return CURSOR_MARK_START;\n    }\n\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n    final ArrayList<Object> marshalledValues = new ArrayList<Object>(values.size()+1);\n    for (int i = 0; i < schemaFields.size(); i++) {\n      SchemaField fld = schemaFields.get(i);\n      Object safeValue = values.get(i);\n      if (null != fld) {\n        FieldType type = fld.getType();\n        safeValue = type.marshalSortValue(safeValue);\n      }\n      marshalledValues.add(safeValue);\n    }\n\n    // TODO: we could also encode info about the SortSpec for error checking:\n    // the type/name/dir from the SortFields (or a hashCode to act as a checksum) \n    // could help provide more validation beyond just the number of clauses.\n\n    try {\n      ByteArrayOutputStream out = new ByteArrayOutputStream(256);\n      try {\n        codec.marshal(marshalledValues, out);\n        byte[] rawData = out.toByteArray();\n        return Base64.byteArrayToBase64(rawData, 0, rawData.length);\n      } finally {\n        out.close();\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n                              \"Unable to format search after totem\", ex);\n      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CursorMark#getSerializedTotem().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CursorMark#getSerializedTotem().mjava","sourceNew":"  /**\n   * Generates a Base64 encoded serialized representation of the sort values \n   * encapsulated by this object, for use in cursor requests.\n   *\n   * @see #parseSerializedTotem\n   */\n  public String getSerializedTotem() {\n    if (null == this.values) {\n      return CURSOR_MARK_START;\n    }\n\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n    final ArrayList<Object> marshalledValues = new ArrayList<>(values.size()+1);\n    for (int i = 0; i < schemaFields.size(); i++) {\n      SchemaField fld = schemaFields.get(i);\n      Object safeValue = values.get(i);\n      if (null != fld) {\n        FieldType type = fld.getType();\n        safeValue = type.marshalSortValue(safeValue);\n      }\n      marshalledValues.add(safeValue);\n    }\n\n    // TODO: we could also encode info about the SortSpec for error checking:\n    // the type/name/dir from the SortFields (or a hashCode to act as a checksum) \n    // could help provide more validation beyond just the number of clauses.\n\n    try {\n      ByteArrayOutputStream out = new ByteArrayOutputStream(256);\n      try {\n        codec.marshal(marshalledValues, out);\n        byte[] rawData = out.toByteArray();\n        return Base64.byteArrayToBase64(rawData, 0, rawData.length);\n      } finally {\n        out.close();\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n                              \"Unable to format search after totem\", ex);\n      \n    }\n  }\n\n","sourceOld":"  /**\n   * Generates a Base64 encoded serialized representation of the sort values \n   * encapsulated by this object, for use in cursor requests.\n   *\n   * @see #parseSerializedTotem\n   */\n  public String getSerializedTotem() {\n    if (null == this.values) {\n      return CURSOR_MARK_START;\n    }\n\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n    final ArrayList<Object> marshalledValues = new ArrayList<Object>(values.size()+1);\n    for (int i = 0; i < schemaFields.size(); i++) {\n      SchemaField fld = schemaFields.get(i);\n      Object safeValue = values.get(i);\n      if (null != fld) {\n        FieldType type = fld.getType();\n        safeValue = type.marshalSortValue(safeValue);\n      }\n      marshalledValues.add(safeValue);\n    }\n\n    // TODO: we could also encode info about the SortSpec for error checking:\n    // the type/name/dir from the SortFields (or a hashCode to act as a checksum) \n    // could help provide more validation beyond just the number of clauses.\n\n    try {\n      ByteArrayOutputStream out = new ByteArrayOutputStream(256);\n      try {\n        codec.marshal(marshalledValues, out);\n        byte[] rawData = out.toByteArray();\n        return Base64.byteArrayToBase64(rawData, 0, rawData.length);\n      } finally {\n        out.close();\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n                              \"Unable to format search after totem\", ex);\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a3257d56e8638a76ea557a46d6ef5c70dcaaaa7","date":1457008564,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CursorMark#getSerializedTotem().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CursorMark#getSerializedTotem().mjava","sourceNew":"  /**\n   * Generates a Base64 encoded serialized representation of the sort values \n   * encapsulated by this object, for use in cursor requests.\n   *\n   * @see #parseSerializedTotem\n   */\n  public String getSerializedTotem() {\n    if (null == this.values) {\n      return CURSOR_MARK_START;\n    }\n\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n    final ArrayList<Object> marshalledValues = new ArrayList<>(values.size()+1);\n    for (int i = 0; i < schemaFields.size(); i++) {\n      SchemaField fld = schemaFields.get(i);\n      Object safeValue = values.get(i);\n      if (null != fld) {\n        FieldType type = fld.getType();\n        safeValue = type.marshalSortValue(safeValue);\n      }\n      marshalledValues.add(safeValue);\n    }\n\n    // TODO: we could also encode info about the SortSpec for error checking:\n    // the type/name/dir from the SortFields (or a hashCode to act as a checksum) \n    // could help provide more validation beyond just the number of clauses.\n\n    try {\n      ByteArrayOutputStream out = new ByteArrayOutputStream(256);\n      try {\n        new JavaBinCodec().marshal(marshalledValues, out);\n        byte[] rawData = out.toByteArray();\n        return Base64.byteArrayToBase64(rawData, 0, rawData.length);\n      } finally {\n        out.close();\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n                              \"Unable to format search after totem\", ex);\n      \n    }\n  }\n\n","sourceOld":"  /**\n   * Generates a Base64 encoded serialized representation of the sort values \n   * encapsulated by this object, for use in cursor requests.\n   *\n   * @see #parseSerializedTotem\n   */\n  public String getSerializedTotem() {\n    if (null == this.values) {\n      return CURSOR_MARK_START;\n    }\n\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n    final ArrayList<Object> marshalledValues = new ArrayList<>(values.size()+1);\n    for (int i = 0; i < schemaFields.size(); i++) {\n      SchemaField fld = schemaFields.get(i);\n      Object safeValue = values.get(i);\n      if (null != fld) {\n        FieldType type = fld.getType();\n        safeValue = type.marshalSortValue(safeValue);\n      }\n      marshalledValues.add(safeValue);\n    }\n\n    // TODO: we could also encode info about the SortSpec for error checking:\n    // the type/name/dir from the SortFields (or a hashCode to act as a checksum) \n    // could help provide more validation beyond just the number of clauses.\n\n    try {\n      ByteArrayOutputStream out = new ByteArrayOutputStream(256);\n      try {\n        codec.marshal(marshalledValues, out);\n        byte[] rawData = out.toByteArray();\n        return Base64.byteArrayToBase64(rawData, 0, rawData.length);\n      } finally {\n        out.close();\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n                              \"Unable to format search after totem\", ex);\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CursorMark#getSerializedTotem().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CursorMark#getSerializedTotem().mjava","sourceNew":"  /**\n   * Generates a Base64 encoded serialized representation of the sort values \n   * encapsulated by this object, for use in cursor requests.\n   *\n   * @see #parseSerializedTotem\n   */\n  public String getSerializedTotem() {\n    if (null == this.values) {\n      return CURSOR_MARK_START;\n    }\n\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n    final ArrayList<Object> marshalledValues = new ArrayList<>(values.size()+1);\n    for (int i = 0; i < schemaFields.size(); i++) {\n      SchemaField fld = schemaFields.get(i);\n      Object safeValue = values.get(i);\n      if (null != fld) {\n        FieldType type = fld.getType();\n        safeValue = type.marshalSortValue(safeValue);\n      }\n      marshalledValues.add(safeValue);\n    }\n\n    // TODO: we could also encode info about the SortSpec for error checking:\n    // the type/name/dir from the SortFields (or a hashCode to act as a checksum) \n    // could help provide more validation beyond just the number of clauses.\n\n    try {\n      ByteArrayOutputStream out = new ByteArrayOutputStream(256);\n      try {\n        new JavaBinCodec().marshal(marshalledValues, out);\n        byte[] rawData = out.toByteArray();\n        return Base64.byteArrayToBase64(rawData, 0, rawData.length);\n      } finally {\n        out.close();\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n                              \"Unable to format search after totem\", ex);\n      \n    }\n  }\n\n","sourceOld":"  /**\n   * Generates a Base64 encoded serialized representation of the sort values \n   * encapsulated by this object, for use in cursor requests.\n   *\n   * @see #parseSerializedTotem\n   */\n  public String getSerializedTotem() {\n    if (null == this.values) {\n      return CURSOR_MARK_START;\n    }\n\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n    final ArrayList<Object> marshalledValues = new ArrayList<>(values.size()+1);\n    for (int i = 0; i < schemaFields.size(); i++) {\n      SchemaField fld = schemaFields.get(i);\n      Object safeValue = values.get(i);\n      if (null != fld) {\n        FieldType type = fld.getType();\n        safeValue = type.marshalSortValue(safeValue);\n      }\n      marshalledValues.add(safeValue);\n    }\n\n    // TODO: we could also encode info about the SortSpec for error checking:\n    // the type/name/dir from the SortFields (or a hashCode to act as a checksum) \n    // could help provide more validation beyond just the number of clauses.\n\n    try {\n      ByteArrayOutputStream out = new ByteArrayOutputStream(256);\n      try {\n        codec.marshal(marshalledValues, out);\n        byte[] rawData = out.toByteArray();\n        return Base64.byteArrayToBase64(rawData, 0, rawData.length);\n      } finally {\n        out.close();\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n                              \"Unable to format search after totem\", ex);\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","date":1497850557,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CursorMark#getSerializedTotem().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CursorMark#getSerializedTotem().mjava","sourceNew":"  /**\n   * Generates a Base64 encoded serialized representation of the sort values \n   * encapsulated by this object, for use in cursor requests.\n   *\n   * @see #parseSerializedTotem\n   */\n  public String getSerializedTotem() {\n    if (null == this.values) {\n      return CURSOR_MARK_START;\n    }\n\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n    final ArrayList<Object> marshalledValues = new ArrayList<>(values.size()+1);\n    for (int i = 0; i < schemaFields.size(); i++) {\n      SchemaField fld = schemaFields.get(i);\n      Object safeValue = values.get(i);\n      if (null != fld) {\n        FieldType type = fld.getType();\n        safeValue = type.marshalSortValue(safeValue);\n      }\n      marshalledValues.add(safeValue);\n    }\n\n    // TODO: we could also encode info about the SortSpec for error checking:\n    // the type/name/dir from the SortFields (or a hashCode to act as a checksum) \n    // could help provide more validation beyond just the number of clauses.\n\n    try (JavaBinCodec jbc = new JavaBinCodec(); ByteArrayOutputStream out = new ByteArrayOutputStream(256)) {\n      jbc.marshal(marshalledValues, out);\n      byte[] rawData = out.toByteArray();\n      return Base64.byteArrayToBase64(rawData, 0, rawData.length);\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n                              \"Unable to format search after totem\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Generates a Base64 encoded serialized representation of the sort values \n   * encapsulated by this object, for use in cursor requests.\n   *\n   * @see #parseSerializedTotem\n   */\n  public String getSerializedTotem() {\n    if (null == this.values) {\n      return CURSOR_MARK_START;\n    }\n\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n    final ArrayList<Object> marshalledValues = new ArrayList<>(values.size()+1);\n    for (int i = 0; i < schemaFields.size(); i++) {\n      SchemaField fld = schemaFields.get(i);\n      Object safeValue = values.get(i);\n      if (null != fld) {\n        FieldType type = fld.getType();\n        safeValue = type.marshalSortValue(safeValue);\n      }\n      marshalledValues.add(safeValue);\n    }\n\n    // TODO: we could also encode info about the SortSpec for error checking:\n    // the type/name/dir from the SortFields (or a hashCode to act as a checksum) \n    // could help provide more validation beyond just the number of clauses.\n\n    try {\n      ByteArrayOutputStream out = new ByteArrayOutputStream(256);\n      try {\n        new JavaBinCodec().marshal(marshalledValues, out);\n        byte[] rawData = out.toByteArray();\n        return Base64.byteArrayToBase64(rawData, 0, rawData.length);\n      } finally {\n        out.close();\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n                              \"Unable to format search after totem\", ex);\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CursorMark#getSerializedTotem().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CursorMark#getSerializedTotem().mjava","sourceNew":"  /**\n   * Generates a Base64 encoded serialized representation of the sort values \n   * encapsulated by this object, for use in cursor requests.\n   *\n   * @see #parseSerializedTotem\n   */\n  public String getSerializedTotem() {\n    if (null == this.values) {\n      return CURSOR_MARK_START;\n    }\n\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n    final ArrayList<Object> marshalledValues = new ArrayList<>(values.size()+1);\n    for (int i = 0; i < schemaFields.size(); i++) {\n      SchemaField fld = schemaFields.get(i);\n      Object safeValue = values.get(i);\n      if (null != fld) {\n        FieldType type = fld.getType();\n        safeValue = type.marshalSortValue(safeValue);\n      }\n      marshalledValues.add(safeValue);\n    }\n\n    // TODO: we could also encode info about the SortSpec for error checking:\n    // the type/name/dir from the SortFields (or a hashCode to act as a checksum) \n    // could help provide more validation beyond just the number of clauses.\n\n    try (JavaBinCodec jbc = new JavaBinCodec(); ByteArrayOutputStream out = new ByteArrayOutputStream(256)) {\n      jbc.marshal(marshalledValues, out);\n      byte[] rawData = out.toByteArray();\n      return Base64.byteArrayToBase64(rawData, 0, rawData.length);\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n                              \"Unable to format search after totem\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Generates a Base64 encoded serialized representation of the sort values \n   * encapsulated by this object, for use in cursor requests.\n   *\n   * @see #parseSerializedTotem\n   */\n  public String getSerializedTotem() {\n    if (null == this.values) {\n      return CURSOR_MARK_START;\n    }\n\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n    final ArrayList<Object> marshalledValues = new ArrayList<>(values.size()+1);\n    for (int i = 0; i < schemaFields.size(); i++) {\n      SchemaField fld = schemaFields.get(i);\n      Object safeValue = values.get(i);\n      if (null != fld) {\n        FieldType type = fld.getType();\n        safeValue = type.marshalSortValue(safeValue);\n      }\n      marshalledValues.add(safeValue);\n    }\n\n    // TODO: we could also encode info about the SortSpec for error checking:\n    // the type/name/dir from the SortFields (or a hashCode to act as a checksum) \n    // could help provide more validation beyond just the number of clauses.\n\n    try {\n      ByteArrayOutputStream out = new ByteArrayOutputStream(256);\n      try {\n        new JavaBinCodec().marshal(marshalledValues, out);\n        byte[] rawData = out.toByteArray();\n        return Base64.byteArrayToBase64(rawData, 0, rawData.length);\n      } finally {\n        out.close();\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n                              \"Unable to format search after totem\", ex);\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CursorMark#getSerializedTotem().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CursorMark#getSerializedTotem().mjava","sourceNew":"  /**\n   * Generates a Base64 encoded serialized representation of the sort values \n   * encapsulated by this object, for use in cursor requests.\n   *\n   * @see #parseSerializedTotem\n   */\n  public String getSerializedTotem() {\n    if (null == this.values) {\n      return CURSOR_MARK_START;\n    }\n\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n    final ArrayList<Object> marshalledValues = new ArrayList<>(values.size()+1);\n    for (int i = 0; i < schemaFields.size(); i++) {\n      SchemaField fld = schemaFields.get(i);\n      Object safeValue = values.get(i);\n      if (null != fld) {\n        FieldType type = fld.getType();\n        safeValue = type.marshalSortValue(safeValue);\n      }\n      marshalledValues.add(safeValue);\n    }\n\n    // TODO: we could also encode info about the SortSpec for error checking:\n    // the type/name/dir from the SortFields (or a hashCode to act as a checksum) \n    // could help provide more validation beyond just the number of clauses.\n\n    try (JavaBinCodec jbc = new JavaBinCodec(); ByteArrayOutputStream out = new ByteArrayOutputStream(256)) {\n      jbc.marshal(marshalledValues, out);\n      byte[] rawData = out.toByteArray();\n      return Base64.byteArrayToBase64(rawData, 0, rawData.length);\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n                              \"Unable to format search after totem\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Generates a Base64 encoded serialized representation of the sort values \n   * encapsulated by this object, for use in cursor requests.\n   *\n   * @see #parseSerializedTotem\n   */\n  public String getSerializedTotem() {\n    if (null == this.values) {\n      return CURSOR_MARK_START;\n    }\n\n    final List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n    final ArrayList<Object> marshalledValues = new ArrayList<>(values.size()+1);\n    for (int i = 0; i < schemaFields.size(); i++) {\n      SchemaField fld = schemaFields.get(i);\n      Object safeValue = values.get(i);\n      if (null != fld) {\n        FieldType type = fld.getType();\n        safeValue = type.marshalSortValue(safeValue);\n      }\n      marshalledValues.add(safeValue);\n    }\n\n    // TODO: we could also encode info about the SortSpec for error checking:\n    // the type/name/dir from the SortFields (or a hashCode to act as a checksum) \n    // could help provide more validation beyond just the number of clauses.\n\n    try {\n      ByteArrayOutputStream out = new ByteArrayOutputStream(256);\n      try {\n        new JavaBinCodec().marshal(marshalledValues, out);\n        byte[] rawData = out.toByteArray();\n        return Base64.byteArrayToBase64(rawData, 0, rawData.length);\n      } finally {\n        out.close();\n      }\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n                              \"Unable to format search after totem\", ex);\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","3a3257d56e8638a76ea557a46d6ef5c70dcaaaa7"],"3a3257d56e8638a76ea557a46d6ef5c70dcaaaa7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"28288370235ed02234a64753cdbf0c6ec096304a":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","3a3257d56e8638a76ea557a46d6ef5c70dcaaaa7"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"3a3257d56e8638a76ea557a46d6ef5c70dcaaaa7":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}