{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedAndResolvedPwd().mjava","commits":[{"id":"2e096dd0a4f62652c91292a2bfba8f08c4cdba94","date":1465245662,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedAndResolvedPwd().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRetrieveFromJndiWithCredentialsWithEncryptedAndResolvedPwd() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    props.put(\"user\", \"Fred\");\n    props.put(\"encryptKeyFile\", \"${foo.bar}\");\n    props.put(\"password\", \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\");\n    EasyMock.expect(dataSource.getConnection(\"Fred\", \"MyPassword\")).andReturn(\n        connection);\n    \n    Map<String,Object> values = new HashMap<>();\n    values.put(\"bar\", createEncryptionKeyFile());\n    context.getVariableResolver().addNamespace(\"foo\", values);\n    \n    jdbcDataSource.init(context, props);\n    \n    connection.setAutoCommit(false);\n\n    mockControl.replay();\n\n    jdbcDataSource.getConnection();\n\n    mockControl.verify();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedAndResolvedPwd().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRetrieveFromJndiWithCredentialsWithEncryptedAndResolvedPwd() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    props.put(\"user\", \"Fred\");\n    props.put(\"encryptKeyFile\", \"${foo.bar}\");\n    props.put(\"password\", \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\");\n    EasyMock.expect(dataSource.getConnection(\"Fred\", \"MyPassword\")).andReturn(\n        connection);\n    \n    Map<String,Object> values = new HashMap<>();\n    values.put(\"bar\", createEncryptionKeyFile());\n    context.getVariableResolver().addNamespace(\"foo\", values);\n    \n    jdbcDataSource.init(context, props);\n    \n    connection.setAutoCommit(false);\n\n    mockControl.replay();\n\n    jdbcDataSource.getConnection();\n\n    mockControl.verify();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedAndResolvedPwd().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRetrieveFromJndiWithCredentialsWithEncryptedAndResolvedPwd() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    props.put(\"user\", \"Fred\");\n    props.put(\"encryptKeyFile\", \"${foo.bar}\");\n    props.put(\"password\", \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\");\n    EasyMock.expect(dataSource.getConnection(\"Fred\", \"MyPassword\")).andReturn(\n        connection);\n    \n    Map<String,Object> values = new HashMap<>();\n    values.put(\"bar\", createEncryptionKeyFile());\n    context.getVariableResolver().addNamespace(\"foo\", values);\n    \n    jdbcDataSource.init(context, props);\n    \n    connection.setAutoCommit(false);\n\n    mockControl.replay();\n\n    jdbcDataSource.getConnection();\n\n    mockControl.verify();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0957b9b8725b7ad93845495d2512df18cd240731","date":1482658887,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedAndResolvedPwd().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedAndResolvedPwd().mjava","sourceNew":"  @Test\n  public void testRetrieveFromJndiWithCredentialsWithEncryptedAndResolvedPwd() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    Properties properties = new Properties();\n    properties.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    properties.put(\"user\", \"Fred\");\n    properties.put(\"encryptKeyFile\", \"${foo.bar}\");\n    properties.put(\"password\", \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\");\n    EasyMock.expect(dataSource.getConnection(\"Fred\", \"MyPassword\")).andReturn(\n        connection);\n    \n    Map<String,Object> values = new HashMap<>();\n    values.put(\"bar\", createEncryptionKeyFile());\n    context.getVariableResolver().addNamespace(\"foo\", values);\n    \n    jdbcDataSource.init(context, properties);\n    \n    connection.setAutoCommit(false);\n\n    mockControl.replay();\n\n    jdbcDataSource.getConnection();\n\n    mockControl.verify();\n  }\n\n","sourceOld":"  @Test\n  public void testRetrieveFromJndiWithCredentialsWithEncryptedAndResolvedPwd() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    props.put(\"user\", \"Fred\");\n    props.put(\"encryptKeyFile\", \"${foo.bar}\");\n    props.put(\"password\", \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\");\n    EasyMock.expect(dataSource.getConnection(\"Fred\", \"MyPassword\")).andReturn(\n        connection);\n    \n    Map<String,Object> values = new HashMap<>();\n    values.put(\"bar\", createEncryptionKeyFile());\n    context.getVariableResolver().addNamespace(\"foo\", values);\n    \n    jdbcDataSource.init(context, props);\n    \n    connection.setAutoCommit(false);\n\n    mockControl.replay();\n\n    jdbcDataSource.getConnection();\n\n    mockControl.verify();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedAndResolvedPwd().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedAndResolvedPwd().mjava","sourceNew":"  @Test\n  public void testRetrieveFromJndiWithCredentialsWithEncryptedAndResolvedPwd() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    Properties properties = new Properties();\n    properties.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    properties.put(\"user\", \"Fred\");\n    properties.put(\"encryptKeyFile\", \"${foo.bar}\");\n    properties.put(\"password\", \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\");\n    EasyMock.expect(dataSource.getConnection(\"Fred\", \"MyPassword\")).andReturn(\n        connection);\n    \n    Map<String,Object> values = new HashMap<>();\n    values.put(\"bar\", createEncryptionKeyFile());\n    context.getVariableResolver().addNamespace(\"foo\", values);\n    \n    jdbcDataSource.init(context, properties);\n    \n    connection.setAutoCommit(false);\n\n    mockControl.replay();\n\n    jdbcDataSource.getConnection();\n\n    mockControl.verify();\n  }\n\n","sourceOld":"  @Test\n  public void testRetrieveFromJndiWithCredentialsWithEncryptedAndResolvedPwd() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    props.put(\"user\", \"Fred\");\n    props.put(\"encryptKeyFile\", \"${foo.bar}\");\n    props.put(\"password\", \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\");\n    EasyMock.expect(dataSource.getConnection(\"Fred\", \"MyPassword\")).andReturn(\n        connection);\n    \n    Map<String,Object> values = new HashMap<>();\n    values.put(\"bar\", createEncryptionKeyFile());\n    context.getVariableResolver().addNamespace(\"foo\", values);\n    \n    jdbcDataSource.init(context, props);\n    \n    connection.setAutoCommit(false);\n\n    mockControl.replay();\n\n    jdbcDataSource.getConnection();\n\n    mockControl.verify();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedAndResolvedPwd().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedAndResolvedPwd().mjava","sourceNew":"  @Test\n  public void testRetrieveFromJndiWithCredentialsWithEncryptedAndResolvedPwd() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    Properties properties = new Properties();\n    properties.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    properties.put(\"user\", \"Fred\");\n    properties.put(\"encryptKeyFile\", \"${foo.bar}\");\n    properties.put(\"password\", \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\");\n    when(dataSource.getConnection(\"Fred\", \"MyPassword\")).thenReturn(\n        connection);\n\n    Map<String,Object> values = new HashMap<>();\n    values.put(\"bar\", createEncryptionKeyFile());\n    context.getVariableResolver().addNamespace(\"foo\", values);\n\n    jdbcDataSource.init(context, properties);\n    jdbcDataSource.getConnection();\n\n    verify(connection).setAutoCommit(false);\n    verify(dataSource).getConnection(\"Fred\", \"MyPassword\");\n  }\n\n","sourceOld":"  @Test\n  public void testRetrieveFromJndiWithCredentialsWithEncryptedAndResolvedPwd() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    Properties properties = new Properties();\n    properties.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    properties.put(\"user\", \"Fred\");\n    properties.put(\"encryptKeyFile\", \"${foo.bar}\");\n    properties.put(\"password\", \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\");\n    EasyMock.expect(dataSource.getConnection(\"Fred\", \"MyPassword\")).andReturn(\n        connection);\n    \n    Map<String,Object> values = new HashMap<>();\n    values.put(\"bar\", createEncryptionKeyFile());\n    context.getVariableResolver().addNamespace(\"foo\", values);\n    \n    jdbcDataSource.init(context, properties);\n    \n    connection.setAutoCommit(false);\n\n    mockControl.replay();\n\n    jdbcDataSource.getConnection();\n\n    mockControl.verify();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testRetrieveFromJndiWithCredentialsWithEncryptedAndResolvedPwd().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testRetrieveFromJndiWithCredentialsWithEncryptedAndResolvedPwd() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    Properties properties = new Properties();\n    properties.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n    properties.put(\"user\", \"Fred\");\n    properties.put(\"encryptKeyFile\", \"${foo.bar}\");\n    properties.put(\"password\", \"U2FsdGVkX18QMjY0yfCqlfBMvAB4d3XkwY96L7gfO2o=\");\n    when(dataSource.getConnection(\"Fred\", \"MyPassword\")).thenReturn(\n        connection);\n\n    Map<String,Object> values = new HashMap<>();\n    values.put(\"bar\", createEncryptionKeyFile());\n    context.getVariableResolver().addNamespace(\"foo\", values);\n\n    jdbcDataSource.init(context, properties);\n    jdbcDataSource.getConnection();\n\n    verify(connection).setAutoCommit(false);\n    verify(dataSource).getConnection(\"Fred\", \"MyPassword\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"2e096dd0a4f62652c91292a2bfba8f08c4cdba94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["0957b9b8725b7ad93845495d2512df18cd240731"],"191128ac5b85671b1671e2c857437694283b6ebf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e096dd0a4f62652c91292a2bfba8f08c4cdba94"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","191128ac5b85671b1671e2c857437694283b6ebf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"0957b9b8725b7ad93845495d2512df18cd240731":["191128ac5b85671b1671e2c857437694283b6ebf"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0957b9b8725b7ad93845495d2512df18cd240731"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e096dd0a4f62652c91292a2bfba8f08c4cdba94":["191128ac5b85671b1671e2c857437694283b6ebf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e096dd0a4f62652c91292a2bfba8f08c4cdba94","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"191128ac5b85671b1671e2c857437694283b6ebf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0957b9b8725b7ad93845495d2512df18cd240731"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"0957b9b8725b7ad93845495d2512df18cd240731":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}