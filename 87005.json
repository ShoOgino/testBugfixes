{"path":"solr/core/src/java/org/apache/solr/search/facet/LegacyFacet#addFieldFacet(String).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/LegacyFacet#addFieldFacet(String).mjava","pathOld":"/dev/null","sourceNew":"  protected void addFieldFacet(String field) {\n    parseParams(FacetParams.FACET_FIELD, field);\n\n    String f = key;  // the parameter to use for per-field parameters... f.key.facet.limit=10\n\n    int offset = params.getFieldInt(f, FacetParams.FACET_OFFSET, 0);\n    int limit = params.getFieldInt(f, FacetParams.FACET_LIMIT, 10);\n\n    int mincount = params.getFieldInt(f, FacetParams.FACET_MINCOUNT, 1);\n\n    boolean missing = params.getFieldBool(f, FacetParams.FACET_MISSING, false);\n\n    // default to sorting if there is a limit.\n    String sort = params.getFieldParam(f, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX);\n    String prefix = params.getFieldParam(f, FacetParams.FACET_PREFIX);\n\n    Map<String,Object> cmd = new HashMap<String,Object>();\n    cmd.put(\"field\", facetValue);\n    if (offset != 0) cmd.put(\"offset\", offset);\n    if (limit != 10) cmd.put(\"limit\", limit);\n    if (mincount != 1) cmd.put(\"mincount\", mincount);\n    if (missing) cmd.put(\"missing\", missing);\n    if (prefix != null) cmd.put(\"prefix\", prefix);\n    if (sort.equals(\"count\")) {\n      // our default\n    } else if (sort.equals(\"index\")) {\n      cmd.put(\"sort\", \"index asc\");\n    } else {\n      cmd.put(\"sort\", sort);  // can be sort by one of our stats\n    }\n\n    Map<String,Object> type = new HashMap<>(1);\n    type.put(\"terms\", cmd);\n\n    addSub(key, type);\n    handleSubs(cmd);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/LegacyFacet#addFieldFacet(String).mjava","pathOld":"/dev/null","sourceNew":"  protected void addFieldFacet(String field) {\n    parseParams(FacetParams.FACET_FIELD, field);\n\n    String f = key;  // the parameter to use for per-field parameters... f.key.facet.limit=10\n\n    int offset = params.getFieldInt(f, FacetParams.FACET_OFFSET, 0);\n    int limit = params.getFieldInt(f, FacetParams.FACET_LIMIT, 10);\n\n    int mincount = params.getFieldInt(f, FacetParams.FACET_MINCOUNT, 1);\n\n    boolean missing = params.getFieldBool(f, FacetParams.FACET_MISSING, false);\n\n    // default to sorting if there is a limit.\n    String sort = params.getFieldParam(f, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX);\n    String prefix = params.getFieldParam(f, FacetParams.FACET_PREFIX);\n\n    Map<String,Object> cmd = new HashMap<String,Object>();\n    cmd.put(\"field\", facetValue);\n    if (offset != 0) cmd.put(\"offset\", offset);\n    if (limit != 10) cmd.put(\"limit\", limit);\n    if (mincount != 1) cmd.put(\"mincount\", mincount);\n    if (missing) cmd.put(\"missing\", missing);\n    if (prefix != null) cmd.put(\"prefix\", prefix);\n    if (sort.equals(\"count\")) {\n      // our default\n    } else if (sort.equals(\"index\")) {\n      cmd.put(\"sort\", \"index asc\");\n    } else {\n      cmd.put(\"sort\", sort);  // can be sort by one of our stats\n    }\n\n    Map<String,Object> type = new HashMap<>(1);\n    type.put(\"terms\", cmd);\n\n    addSub(key, type);\n    handleSubs(cmd);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/LegacyFacet#addFieldFacet(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/LegacyFacet#addFieldFacet(String).mjava","sourceNew":"  protected void addFieldFacet(String field) {\n    parseParams(FacetParams.FACET_FIELD, field);\n\n    String f = key;  // the parameter to use for per-field parameters... f.key.facet.limit=10\n\n    int offset = params.getFieldInt(f, FacetParams.FACET_OFFSET, 0);\n    int limit = params.getFieldInt(f, FacetParams.FACET_LIMIT, 10);\n\n    int mincount = params.getFieldInt(f, FacetParams.FACET_MINCOUNT, 1);\n\n    boolean missing = params.getFieldBool(f, FacetParams.FACET_MISSING, false);\n\n    // default to sorting if there is a limit.\n    String sort = params.getFieldParam(f, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX);\n    String prefix = params.getFieldParam(f, FacetParams.FACET_PREFIX);\n\n    Map<String,Object> cmd = new HashMap<>();\n    cmd.put(\"field\", facetValue);\n    if (offset != 0) cmd.put(\"offset\", offset);\n    if (limit != 10) cmd.put(\"limit\", limit);\n    if (mincount != 1) cmd.put(\"mincount\", mincount);\n    if (missing) cmd.put(\"missing\", missing);\n    if (prefix != null) cmd.put(\"prefix\", prefix);\n    if (sort.equals(\"count\")) {\n      // our default\n    } else if (sort.equals(\"index\")) {\n      cmd.put(SORT, \"index asc\");\n    } else {\n      cmd.put(SORT, sort);  // can be sort by one of our stats\n    }\n\n    Map<String,Object> type = new HashMap<>(1);\n    type.put(\"terms\", cmd);\n\n    addSub(key, type);\n    handleSubs(cmd);\n  }\n\n","sourceOld":"  protected void addFieldFacet(String field) {\n    parseParams(FacetParams.FACET_FIELD, field);\n\n    String f = key;  // the parameter to use for per-field parameters... f.key.facet.limit=10\n\n    int offset = params.getFieldInt(f, FacetParams.FACET_OFFSET, 0);\n    int limit = params.getFieldInt(f, FacetParams.FACET_LIMIT, 10);\n\n    int mincount = params.getFieldInt(f, FacetParams.FACET_MINCOUNT, 1);\n\n    boolean missing = params.getFieldBool(f, FacetParams.FACET_MISSING, false);\n\n    // default to sorting if there is a limit.\n    String sort = params.getFieldParam(f, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX);\n    String prefix = params.getFieldParam(f, FacetParams.FACET_PREFIX);\n\n    Map<String,Object> cmd = new HashMap<String,Object>();\n    cmd.put(\"field\", facetValue);\n    if (offset != 0) cmd.put(\"offset\", offset);\n    if (limit != 10) cmd.put(\"limit\", limit);\n    if (mincount != 1) cmd.put(\"mincount\", mincount);\n    if (missing) cmd.put(\"missing\", missing);\n    if (prefix != null) cmd.put(\"prefix\", prefix);\n    if (sort.equals(\"count\")) {\n      // our default\n    } else if (sort.equals(\"index\")) {\n      cmd.put(\"sort\", \"index asc\");\n    } else {\n      cmd.put(\"sort\", sort);  // can be sort by one of our stats\n    }\n\n    Map<String,Object> type = new HashMap<>(1);\n    type.put(\"terms\", cmd);\n\n    addSub(key, type);\n    handleSubs(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/LegacyFacet#addFieldFacet(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/LegacyFacet#addFieldFacet(String).mjava","sourceNew":"  protected void addFieldFacet(String field) {\n    parseParams(FacetParams.FACET_FIELD, field);\n\n    String f = key;  // the parameter to use for per-field parameters... f.key.facet.limit=10\n\n    int offset = params.getFieldInt(f, FacetParams.FACET_OFFSET, 0);\n    int limit = params.getFieldInt(f, FacetParams.FACET_LIMIT, 10);\n\n    int mincount = params.getFieldInt(f, FacetParams.FACET_MINCOUNT, 1);\n\n    boolean missing = params.getFieldBool(f, FacetParams.FACET_MISSING, false);\n\n    // default to sorting if there is a limit.\n    String sort = params.getFieldParam(f, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX);\n    String prefix = params.getFieldParam(f, FacetParams.FACET_PREFIX);\n\n    Map<String,Object> cmd = new HashMap<>();\n    cmd.put(\"field\", facetValue);\n    if (offset != 0) cmd.put(\"offset\", offset);\n    if (limit != 10) cmd.put(\"limit\", limit);\n    if (mincount != 1) cmd.put(\"mincount\", mincount);\n    if (missing) cmd.put(\"missing\", missing);\n    if (prefix != null) cmd.put(\"prefix\", prefix);\n    if (sort.equals(\"count\")) {\n      // our default\n    } else if (sort.equals(\"index\")) {\n      cmd.put(SORT, \"index asc\");\n    } else {\n      cmd.put(SORT, sort);  // can be sort by one of our stats\n    }\n\n    Map<String,Object> type = new HashMap<>(1);\n    type.put(\"terms\", cmd);\n\n    addSub(key, type);\n    handleSubs(cmd);\n  }\n\n","sourceOld":"  protected void addFieldFacet(String field) {\n    parseParams(FacetParams.FACET_FIELD, field);\n\n    String f = key;  // the parameter to use for per-field parameters... f.key.facet.limit=10\n\n    int offset = params.getFieldInt(f, FacetParams.FACET_OFFSET, 0);\n    int limit = params.getFieldInt(f, FacetParams.FACET_LIMIT, 10);\n\n    int mincount = params.getFieldInt(f, FacetParams.FACET_MINCOUNT, 1);\n\n    boolean missing = params.getFieldBool(f, FacetParams.FACET_MISSING, false);\n\n    // default to sorting if there is a limit.\n    String sort = params.getFieldParam(f, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX);\n    String prefix = params.getFieldParam(f, FacetParams.FACET_PREFIX);\n\n    Map<String,Object> cmd = new HashMap<String,Object>();\n    cmd.put(\"field\", facetValue);\n    if (offset != 0) cmd.put(\"offset\", offset);\n    if (limit != 10) cmd.put(\"limit\", limit);\n    if (mincount != 1) cmd.put(\"mincount\", mincount);\n    if (missing) cmd.put(\"missing\", missing);\n    if (prefix != null) cmd.put(\"prefix\", prefix);\n    if (sort.equals(\"count\")) {\n      // our default\n    } else if (sort.equals(\"index\")) {\n      cmd.put(\"sort\", \"index asc\");\n    } else {\n      cmd.put(\"sort\", sort);  // can be sort by one of our stats\n    }\n\n    Map<String,Object> type = new HashMap<>(1);\n    type.put(\"terms\", cmd);\n\n    addSub(key, type);\n    handleSubs(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"01624b85de12fb02335810bdf325124e59040772":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["01624b85de12fb02335810bdf325124e59040772"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":[],"01624b85de12fb02335810bdf325124e59040772":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6f4c5d3859373c3a74734e85efa122b17514e3e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}