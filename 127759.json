{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of.  For example,\n   *  IndexSearcher uses this API to drive searching by one\n   *  sub reader at a time.  If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: You should not try using sub-readers returned by\n   *  this method to make any changes (setNorm, deleteDocument,\n   *  etc.). While this might succeed for one composite reader\n   *  (like MultiReader), it will most likely lead to index\n   *  corruption for other readers (like DirectoryReader obtained\n   *  through {@link #open}. Use the parent reader directly. */\n  public IndexReader[] getSequentialSubReaders() {\n    return null;\n  }\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of.  For example,\n   *  IndexSearcher uses this API to drive searching by one\n   *  sub reader at a time.  If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: You should not try using sub-readers returned by\n   *  this method to make any changes (setNorm, deleteDocument,\n   *  etc.). While this might succeed for one composite reader\n   *  (like MultiReader), it will most likely lead to index\n   *  corruption for other readers (like DirectoryReader obtained\n   *  through {@link #open}. Use the parent reader directly. */\n  public IndexReader[] getSequentialSubReaders() {\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: You should not try using sub-readers returned by\n   *  this method to make any changes (setNorm, deleteDocument,\n   *  etc.). While this might succeed for one composite reader\n   *  (like MultiReader), it will most likely lead to index\n   *  corruption for other readers (like DirectoryReader obtained\n   *  through {@link #open}. Use the parent reader directly. */\n  public IndexReader[] getSequentialSubReaders() {\n    return null;\n  }\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of.  For example,\n   *  IndexSearcher uses this API to drive searching by one\n   *  sub reader at a time.  If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: You should not try using sub-readers returned by\n   *  this method to make any changes (setNorm, deleteDocument,\n   *  etc.). While this might succeed for one composite reader\n   *  (like MultiReader), it will most likely lead to index\n   *  corruption for other readers (like DirectoryReader obtained\n   *  through {@link #open}. Use the parent reader directly. */\n  public IndexReader[] getSequentialSubReaders() {\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: You should not try using sub-readers returned by\n   *  this method to make any changes (setNorm, deleteDocument,\n   *  etc.). While this might succeed for one composite reader\n   *  (like MultiReader), it will most likely lead to index\n   *  corruption for other readers (like DirectoryReader obtained\n   *  through {@link #open}. Use the parent reader directly. */\n  public IndexReader[] getSequentialSubReaders() {\n    return null;\n  }\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of.  For example,\n   *  IndexSearcher uses this API to drive searching by one\n   *  sub reader at a time.  If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: You should not try using sub-readers returned by\n   *  this method to make any changes (setNorm, deleteDocument,\n   *  etc.). While this might succeed for one composite reader\n   *  (like MultiReader), it will most likely lead to index\n   *  corruption for other readers (like DirectoryReader obtained\n   *  through {@link #open}. Use the parent reader directly. */\n  public IndexReader[] getSequentialSubReaders() {\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: You should not try using sub-readers returned by\n   *  this method to make any changes (setNorm, deleteDocument,\n   *  etc.). While this might succeed for one composite reader\n   *  (like MultiReader), it will most likely lead to index\n   *  corruption for other readers (like DirectoryReader obtained\n   *  through {@link #open}. Use the parent reader directly. */\n  public IndexReader[] getSequentialSubReaders() {\n    return null;\n  }\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of.  For example,\n   *  IndexSearcher uses this API to drive searching by one\n   *  sub reader at a time.  If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: You should not try using sub-readers returned by\n   *  this method to make any changes (setNorm, deleteDocument,\n   *  etc.). While this might succeed for one composite reader\n   *  (like MultiReader), it will most likely lead to index\n   *  corruption for other readers (like DirectoryReader obtained\n   *  through {@link #open}. Use the parent reader directly. */\n  public IndexReader[] getSequentialSubReaders() {\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","date":1316619234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: You should not try using sub-readers returned by\n   *  this method to make any changes (setNorm, deleteDocument,\n   *  etc.). While this might succeed for one composite reader\n   *  (like MultiReader), it will most likely lead to index\n   *  corruption for other readers (like DirectoryReader obtained\n   *  through {@link #open}. Use the parent reader directly. */\n  public IndexReader[] getSequentialSubReaders() {\n    ensureOpen();\n    return null;\n  }\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: You should not try using sub-readers returned by\n   *  this method to make any changes (setNorm, deleteDocument,\n   *  etc.). While this might succeed for one composite reader\n   *  (like MultiReader), it will most likely lead to index\n   *  corruption for other readers (like DirectoryReader obtained\n   *  through {@link #open}. Use the parent reader directly. */\n  public IndexReader[] getSequentialSubReaders() {\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: You should not try using sub-readers returned by\n   *  this method to make any changes (deleteDocument,\n   *  etc.). While this might succeed for one composite reader\n   *  (like MultiReader), it will most likely lead to index\n   *  corruption for other readers (like DirectoryReader obtained\n   *  through {@link #open}. Use the parent reader directly. */\n  public IndexReader[] getSequentialSubReaders() {\n    ensureOpen();\n    return null;\n  }\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: You should not try using sub-readers returned by\n   *  this method to make any changes (setNorm, deleteDocument,\n   *  etc.). While this might succeed for one composite reader\n   *  (like MultiReader), it will most likely lead to index\n   *  corruption for other readers (like DirectoryReader obtained\n   *  through {@link #open}. Use the parent reader directly. */\n  public IndexReader[] getSequentialSubReaders() {\n    ensureOpen();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: You should not try using sub-readers returned by\n   *  this method to make any changes (deleteDocument,\n   *  etc.). While this might succeed for one composite reader\n   *  (like MultiReader), it will most likely lead to index\n   *  corruption for other readers (like DirectoryReader obtained\n   *  through {@link #open}. Use the parent reader directly. */\n  public IndexReader[] getSequentialSubReaders() {\n    ensureOpen();\n    return null;\n  }\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: You should not try using sub-readers returned by\n   *  this method to make any changes (setNorm, deleteDocument,\n   *  etc.). While this might succeed for one composite reader\n   *  (like MultiReader), it will most likely lead to index\n   *  corruption for other readers (like DirectoryReader obtained\n   *  through {@link #open}. Use the parent reader directly. */\n  public IndexReader[] getSequentialSubReaders() {\n    ensureOpen();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: You should not try using sub-readers returned by\n   *  this method to make any changes (deleteDocument,\n   *  etc.). While this might succeed for one composite reader\n   *  (like MultiReader), it will most likely lead to index\n   *  corruption for other readers (like DirectoryReader obtained\n   *  through {@link #open}. Use the parent reader directly. */\n  public IndexReader[] getSequentialSubReaders() {\n    ensureOpen();\n    return null;\n  }\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: You should not try using sub-readers returned by\n   *  this method to make any changes (setNorm, deleteDocument,\n   *  etc.). While this might succeed for one composite reader\n   *  (like MultiReader), it will most likely lead to index\n   *  corruption for other readers (like DirectoryReader obtained\n   *  through {@link #open}. Use the parent reader directly. */\n  public IndexReader[] getSequentialSubReaders() {\n    ensureOpen();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd7bc2a5c14b661eb84380161a9a2cb7fa06fc2f","date":1327150225,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   */\n  public IndexReader[] getSequentialSubReaders() {\n    ensureOpen();\n    return null;\n  }\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: You should not try using sub-readers returned by\n   *  this method to make any changes (deleteDocument,\n   *  etc.). While this might succeed for one composite reader\n   *  (like MultiReader), it will most likely lead to index\n   *  corruption for other readers (like DirectoryReader obtained\n   *  through {@link #open}. Use the parent reader directly. */\n  public IndexReader[] getSequentialSubReaders() {\n    ensureOpen();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompositeIndexReader#getSequentialSubReaders().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   */\n  public abstract IndexReader[] getSequentialSubReaders();\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   */\n  public IndexReader[] getSequentialSubReaders() {\n    ensureOpen();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   */\n  public IndexReader[] getSequentialSubReaders() {\n    ensureOpen();\n    return null;\n  }\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   *  <p>\n   *  NOTE: You should not try using sub-readers returned by\n   *  this method to make any changes (deleteDocument,\n   *  etc.). While this might succeed for one composite reader\n   *  (like MultiReader), it will most likely lead to index\n   *  corruption for other readers (like DirectoryReader obtained\n   *  through {@link #open}. Use the parent reader directly. */\n  public IndexReader[] getSequentialSubReaders() {\n    ensureOpen();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CompositeReader#getSequentialSubReaders().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getSequentialSubReaders().mjava","sourceNew":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. It contrast to previous\n   *  Lucene versions may not return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   */\n  public abstract IndexReader[] getSequentialSubReaders();\n\n","sourceOld":"  /** Expert: returns the sequential sub readers that this\n   *  reader is logically composed of. If this reader is not composed\n   *  of sequential child readers, it should return null.\n   *  If this method returns an empty array, that means this\n   *  reader is a null reader (for example a MultiReader\n   *  that has no sub readers).\n   */\n  public IndexReader[] getSequentialSubReaders() {\n    ensureOpen();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dd7bc2a5c14b661eb84380161a9a2cb7fa06fc2f":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["3615ce4a1f785ae1b779244de52c6a7d99227e60","dd7bc2a5c14b661eb84380161a9a2cb7fa06fc2f"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["dd7bc2a5c14b661eb84380161a9a2cb7fa06fc2f","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","4122a26e1fd0457a340616673a3d3aada370f713"],"4122a26e1fd0457a340616673a3d3aada370f713":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["dd7bc2a5c14b661eb84380161a9a2cb7fa06fc2f"]},"commit2Childs":{"dd7bc2a5c14b661eb84380161a9a2cb7fa06fc2f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["dd7bc2a5c14b661eb84380161a9a2cb7fa06fc2f","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"4122a26e1fd0457a340616673a3d3aada370f713":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}