{"path":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#getMetricReporterPluginInfos(Config).mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#getMetricReporterPluginInfos(Config).mjava","pathOld":"/dev/null","sourceNew":"  private static PluginInfo[] getMetricReporterPluginInfos(Config config) {\n    NodeList nodes = (NodeList) config.evaluate(\"solr/metrics/reporter\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0)\n      return new PluginInfo[0];\n    PluginInfo[] configs = new PluginInfo[nodes.getLength()];\n    for (int i = 0; i < nodes.getLength(); i++) {\n      configs[i] = new PluginInfo(nodes.item(i), \"SolrMetricReporter\", true, true);\n    }\n    return configs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#getMetricReporterPluginInfos(Config).mjava","pathOld":"/dev/null","sourceNew":"  private static PluginInfo[] getMetricReporterPluginInfos(Config config) {\n    NodeList nodes = (NodeList) config.evaluate(\"solr/metrics/reporter\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0)\n      return new PluginInfo[0];\n    PluginInfo[] configs = new PluginInfo[nodes.getLength()];\n    for (int i = 0; i < nodes.getLength(); i++) {\n      configs[i] = new PluginInfo(nodes.item(i), \"SolrMetricReporter\", true, true);\n    }\n    return configs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#getMetricReporterPluginInfos(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#getMetricReporterPluginInfos(Config).mjava","sourceNew":"  private static PluginInfo[] getMetricReporterPluginInfos(Config config) {\n    NodeList nodes = (NodeList) config.evaluate(\"solr/metrics/reporter\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0)\n      return new PluginInfo[0];\n    PluginInfo[] configs = new PluginInfo[nodes.getLength()];\n    for (int i = 0; i < nodes.getLength(); i++) {\n      // we don't require class in order to support predefined replica and node reporter classes\n      configs[i] = new PluginInfo(nodes.item(i), \"SolrMetricReporter\", true, false);\n    }\n    return configs;\n  }\n\n","sourceOld":"  private static PluginInfo[] getMetricReporterPluginInfos(Config config) {\n    NodeList nodes = (NodeList) config.evaluate(\"solr/metrics/reporter\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0)\n      return new PluginInfo[0];\n    PluginInfo[] configs = new PluginInfo[nodes.getLength()];\n    for (int i = 0; i < nodes.getLength(); i++) {\n      configs[i] = new PluginInfo(nodes.item(i), \"SolrMetricReporter\", true, true);\n    }\n    return configs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#getMetricReporterPluginInfos(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#getMetricReporterPluginInfos(Config).mjava","sourceNew":"  private static PluginInfo[] getMetricReporterPluginInfos(Config config) {\n    NodeList nodes = (NodeList) config.evaluate(\"solr/metrics/reporter\", XPathConstants.NODESET);\n    List<PluginInfo> configs = new ArrayList<>();\n    boolean hasJmxReporter = false;\n    if (nodes != null && nodes.getLength() > 0) {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        // we don't require class in order to support predefined replica and node reporter classes\n        PluginInfo info = new PluginInfo(nodes.item(i), \"SolrMetricReporter\", true, false);\n        String clazz = info.className;\n        if (clazz != null && clazz.equals(SolrJmxReporter.class.getName())) {\n          hasJmxReporter = true;\n        }\n        configs.add(info);\n      }\n    }\n    // if there's an MBean server running but there was no JMX reporter then add a default one\n    MBeanServer mBeanServer = JmxUtil.findFirstMBeanServer();\n    if (mBeanServer != null && !hasJmxReporter) {\n      log.info(\"MBean server found: \" + mBeanServer + \", but no JMX reporters were configured - adding default JMX reporter.\");\n      Map<String,Object> attributes = new HashMap<>();\n      attributes.put(\"name\", \"default\");\n      attributes.put(\"class\", SolrJmxReporter.class.getName());\n      PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n      configs.add(defaultPlugin);\n    }\n    return configs.toArray(new PluginInfo[configs.size()]);\n  }\n\n","sourceOld":"  private static PluginInfo[] getMetricReporterPluginInfos(Config config) {\n    NodeList nodes = (NodeList) config.evaluate(\"solr/metrics/reporter\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0)\n      return new PluginInfo[0];\n    PluginInfo[] configs = new PluginInfo[nodes.getLength()];\n    for (int i = 0; i < nodes.getLength(); i++) {\n      // we don't require class in order to support predefined replica and node reporter classes\n      configs[i] = new PluginInfo(nodes.item(i), \"SolrMetricReporter\", true, false);\n    }\n    return configs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#getMetricReporterPluginInfos(Config).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#getMetricReporterPluginInfos(Config).mjava","sourceNew":"  private static PluginInfo[] getMetricReporterPluginInfos(Config config) {\n    NodeList nodes = (NodeList) config.evaluate(\"solr/metrics/reporter\", XPathConstants.NODESET);\n    List<PluginInfo> configs = new ArrayList<>();\n    boolean hasJmxReporter = false;\n    if (nodes != null && nodes.getLength() > 0) {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        // we don't require class in order to support predefined replica and node reporter classes\n        PluginInfo info = new PluginInfo(nodes.item(i), \"SolrMetricReporter\", true, false);\n        String clazz = info.className;\n        if (clazz != null && clazz.equals(SolrJmxReporter.class.getName())) {\n          hasJmxReporter = true;\n        }\n        configs.add(info);\n      }\n    }\n    // if there's an MBean server running but there was no JMX reporter then add a default one\n    MBeanServer mBeanServer = JmxUtil.findFirstMBeanServer();\n    if (mBeanServer != null && !hasJmxReporter) {\n      log.info(\"MBean server found: \" + mBeanServer + \", but no JMX reporters were configured - adding default JMX reporter.\");\n      Map<String,Object> attributes = new HashMap<>();\n      attributes.put(\"name\", \"default\");\n      attributes.put(\"class\", SolrJmxReporter.class.getName());\n      PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n      configs.add(defaultPlugin);\n    }\n    return configs.toArray(new PluginInfo[configs.size()]);\n  }\n\n","sourceOld":"  private static PluginInfo[] getMetricReporterPluginInfos(Config config) {\n    NodeList nodes = (NodeList) config.evaluate(\"solr/metrics/reporter\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0)\n      return new PluginInfo[0];\n    PluginInfo[] configs = new PluginInfo[nodes.getLength()];\n    for (int i = 0; i < nodes.getLength(); i++) {\n      // we don't require class in order to support predefined replica and node reporter classes\n      configs[i] = new PluginInfo(nodes.item(i), \"SolrMetricReporter\", true, false);\n    }\n    return configs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee622110ba6021d0390037e77574743c1e55348c","date":1546700916,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#getMetricReporterPluginInfos(XmlConfigFile).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#getMetricReporterPluginInfos(Config).mjava","sourceNew":"  private static PluginInfo[] getMetricReporterPluginInfos(XmlConfigFile config) {\n    NodeList nodes = (NodeList) config.evaluate(\"solr/metrics/reporter\", XPathConstants.NODESET);\n    List<PluginInfo> configs = new ArrayList<>();\n    boolean hasJmxReporter = false;\n    if (nodes != null && nodes.getLength() > 0) {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        // we don't require class in order to support predefined replica and node reporter classes\n        PluginInfo info = new PluginInfo(nodes.item(i), \"SolrMetricReporter\", true, false);\n        String clazz = info.className;\n        if (clazz != null && clazz.equals(SolrJmxReporter.class.getName())) {\n          hasJmxReporter = true;\n        }\n        configs.add(info);\n      }\n    }\n    // if there's an MBean server running but there was no JMX reporter then add a default one\n    MBeanServer mBeanServer = JmxUtil.findFirstMBeanServer();\n    if (mBeanServer != null && !hasJmxReporter) {\n      log.info(\"MBean server found: \" + mBeanServer + \", but no JMX reporters were configured - adding default JMX reporter.\");\n      Map<String,Object> attributes = new HashMap<>();\n      attributes.put(\"name\", \"default\");\n      attributes.put(\"class\", SolrJmxReporter.class.getName());\n      PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n      configs.add(defaultPlugin);\n    }\n    return configs.toArray(new PluginInfo[configs.size()]);\n  }\n\n","sourceOld":"  private static PluginInfo[] getMetricReporterPluginInfos(Config config) {\n    NodeList nodes = (NodeList) config.evaluate(\"solr/metrics/reporter\", XPathConstants.NODESET);\n    List<PluginInfo> configs = new ArrayList<>();\n    boolean hasJmxReporter = false;\n    if (nodes != null && nodes.getLength() > 0) {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        // we don't require class in order to support predefined replica and node reporter classes\n        PluginInfo info = new PluginInfo(nodes.item(i), \"SolrMetricReporter\", true, false);\n        String clazz = info.className;\n        if (clazz != null && clazz.equals(SolrJmxReporter.class.getName())) {\n          hasJmxReporter = true;\n        }\n        configs.add(info);\n      }\n    }\n    // if there's an MBean server running but there was no JMX reporter then add a default one\n    MBeanServer mBeanServer = JmxUtil.findFirstMBeanServer();\n    if (mBeanServer != null && !hasJmxReporter) {\n      log.info(\"MBean server found: \" + mBeanServer + \", but no JMX reporters were configured - adding default JMX reporter.\");\n      Map<String,Object> attributes = new HashMap<>();\n      attributes.put(\"name\", \"default\");\n      attributes.put(\"class\", SolrJmxReporter.class.getName());\n      PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n      configs.add(defaultPlugin);\n    }\n    return configs.toArray(new PluginInfo[configs.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"ee622110ba6021d0390037e77574743c1e55348c":["816521ebaad5add9cb96bb88c577394e2938c40b"],"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["0265144286422ad99682a00904cc2536b79c8535"],"816521ebaad5add9cb96bb88c577394e2938c40b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee622110ba6021d0390037e77574743c1e55348c"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"ee622110ba6021d0390037e77574743c1e55348c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["ee622110ba6021d0390037e77574743c1e55348c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}