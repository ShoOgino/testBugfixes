{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  public Bits getDocsWithField(AtomicReader reader, String field)\n      throws IOException {\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new Entry(field, null), false);\n  }\n\n","sourceOld":"  public Bits getDocsWithField(AtomicReader reader, String field)\n      throws IOException {\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new Entry(field, null), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  // nocommit must advertise that this does NOT work if you\n  // index only doc values for the field ... it will say no\n  // doc exists...\n  public Bits getDocsWithField(AtomicReader reader, String field)\n      throws IOException {\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","sourceOld":"  public Bits getDocsWithField(AtomicReader reader, String field)\n      throws IOException {\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new Entry(field, null), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  @Override\n  public Bits getDocsWithField(AtomicReader reader, String field)\n      throws IOException {\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new Entry(field, null), false);\n  }\n\n","sourceOld":"  public Bits getDocsWithField(AtomicReader reader, String field)\n      throws IOException {\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new Entry(field, null), false);\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dfc9a1c0f8c40dae949281597c97e61defe903fc","date":1359040461,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  public Bits getDocsWithField(AtomicReader reader, String field)\n      throws IOException {\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","sourceOld":"  // nocommit must advertise that this does NOT work if you\n  // index only doc values for the field ... it will say no\n  // doc exists...\n  public Bits getDocsWithField(AtomicReader reader, String field)\n      throws IOException {\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  public Bits getDocsWithField(AtomicReader reader, String field)\n      throws IOException {\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","sourceOld":"  @Override\n  public Bits getDocsWithField(AtomicReader reader, String field)\n      throws IOException {\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new Entry(field, null), false);\n  }\n\n","bugFix":["7530de27b87b961b51f01bd1299b7004d46e8823","382fe3a6ca9745891afebda9b9a57cc158305545"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b4e0d3f6116e64a8ab4c338fed19498407856738","date":1360786773,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException {\n    final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n    if (fieldInfo == null) {\n      // field does not exist or has no value\n      return new Bits.MatchNoBits(reader.maxDoc());\n    } else if (fieldInfo.hasDocValues()) {\n      // doc values are dense\n      return new Bits.MatchAllBits(reader.maxDoc());\n    } else if (!fieldInfo.isIndexed()) {\n      return new Bits.MatchNoBits(reader.maxDoc());\n    }\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","sourceOld":"  public Bits getDocsWithField(AtomicReader reader, String field)\n      throws IOException {\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","bugFix":["da6d5ac19a80d65b1e864251f155d30960353b7e","382fe3a6ca9745891afebda9b9a57cc158305545"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f9453e226f2896430e77ec8e7837c1441a9aeb0","date":1360788152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException {\n    final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n    if (fieldInfo == null) {\n      // field does not exist or has no value\n      return new Bits.MatchNoBits(reader.maxDoc());\n    } else if (fieldInfo.hasDocValues()) {\n      // doc values are dense\n      return new Bits.MatchAllBits(reader.maxDoc());\n    } else if (!fieldInfo.isIndexed()) {\n      return new Bits.MatchNoBits(reader.maxDoc());\n    }\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","sourceOld":"  public Bits getDocsWithField(AtomicReader reader, String field)\n      throws IOException {\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException {\n    final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n    if (fieldInfo == null) {\n      // field does not exist or has no value\n      return new Bits.MatchNoBits(reader.maxDoc());\n    } else if (fieldInfo.hasDocValues()) {\n      return reader.getDocsWithField(field);\n    } else if (!fieldInfo.isIndexed()) {\n      return new Bits.MatchNoBits(reader.maxDoc());\n    }\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","sourceOld":"  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException {\n    final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n    if (fieldInfo == null) {\n      // field does not exist or has no value\n      return new Bits.MatchNoBits(reader.maxDoc());\n    } else if (fieldInfo.hasDocValues()) {\n      // doc values are dense\n      return new Bits.MatchAllBits(reader.maxDoc());\n    } else if (!fieldInfo.isIndexed()) {\n      return new Bits.MatchNoBits(reader.maxDoc());\n    }\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException {\n    final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n    if (fieldInfo == null) {\n      // field does not exist or has no value\n      return new Bits.MatchNoBits(reader.maxDoc());\n    } else if (fieldInfo.hasDocValues()) {\n      return reader.getDocsWithField(field);\n    } else if (!fieldInfo.isIndexed()) {\n      return new Bits.MatchNoBits(reader.maxDoc());\n    }\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","sourceOld":"  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException {\n    final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n    if (fieldInfo == null) {\n      // field does not exist or has no value\n      return new Bits.MatchNoBits(reader.maxDoc());\n    } else if (fieldInfo.hasDocValues()) {\n      // doc values are dense\n      return new Bits.MatchAllBits(reader.maxDoc());\n    } else if (!fieldInfo.isIndexed()) {\n      return new Bits.MatchNoBits(reader.maxDoc());\n    }\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException {\n    final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n    if (fieldInfo == null) {\n      // field does not exist or has no value\n      return new Bits.MatchNoBits(reader.maxDoc());\n    } else if (fieldInfo.hasDocValues()) {\n      return reader.getDocsWithField(field);\n    } else if (!fieldInfo.isIndexed()) {\n      return new Bits.MatchNoBits(reader.maxDoc());\n    }\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","sourceOld":"  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException {\n    final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n    if (fieldInfo == null) {\n      // field does not exist or has no value\n      return new Bits.MatchNoBits(reader.maxDoc());\n    } else if (fieldInfo.hasDocValues()) {\n      // doc values are dense\n      return new Bits.MatchAllBits(reader.maxDoc());\n    } else if (!fieldInfo.isIndexed()) {\n      return new Bits.MatchNoBits(reader.maxDoc());\n    }\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException {\n    final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n    if (fieldInfo == null) {\n      // field does not exist or has no value\n      return new Bits.MatchNoBits(reader.maxDoc());\n    } else if (fieldInfo.hasDocValues()) {\n      return reader.getDocsWithField(field);\n    } else if (!fieldInfo.isIndexed()) {\n      return new Bits.MatchNoBits(reader.maxDoc());\n    }\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","sourceOld":"  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException {\n    final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n    if (fieldInfo == null) {\n      // field does not exist or has no value\n      return new Bits.MatchNoBits(reader.maxDoc());\n    } else if (fieldInfo.hasDocValues()) {\n      return reader.getDocsWithField(field);\n    } else if (!fieldInfo.isIndexed()) {\n      return new Bits.MatchNoBits(reader.maxDoc());\n    }\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException {\n    final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n    if (fieldInfo == null) {\n      // field does not exist or has no value\n      return new Bits.MatchNoBits(reader.maxDoc());\n    } else if (fieldInfo.hasDocValues()) {\n      return reader.getDocsWithField(field);\n    } else if (!fieldInfo.isIndexed()) {\n      return new Bits.MatchNoBits(reader.maxDoc());\n    }\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","sourceOld":"  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException {\n    final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n    if (fieldInfo == null) {\n      // field does not exist or has no value\n      return new Bits.MatchNoBits(reader.maxDoc());\n    } else if (fieldInfo.hasDocValues()) {\n      return reader.getDocsWithField(field);\n    } else if (!fieldInfo.isIndexed()) {\n      return new Bits.MatchNoBits(reader.maxDoc());\n    }\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocsWithField(AtomicReader,String).mjava","sourceNew":"  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException {\n    final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n    if (fieldInfo == null) {\n      // field does not exist or has no value\n      return new Bits.MatchNoBits(reader.maxDoc());\n    } else if (fieldInfo.hasDocValues()) {\n      return reader.getDocsWithField(field);\n    } else if (!fieldInfo.isIndexed()) {\n      return new Bits.MatchNoBits(reader.maxDoc());\n    }\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","sourceOld":"  public Bits getDocsWithField(AtomicReader reader, String field) throws IOException {\n    final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n    if (fieldInfo == null) {\n      // field does not exist or has no value\n      return new Bits.MatchNoBits(reader.maxDoc());\n    } else if (fieldInfo.hasDocValues()) {\n      return reader.getDocsWithField(field);\n    } else if (!fieldInfo.isIndexed()) {\n      return new Bits.MatchNoBits(reader.maxDoc());\n    }\n    return (Bits) caches.get(DocsWithFieldCache.class).get(reader, new CacheKey(field, null), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["b4e0d3f6116e64a8ab4c338fed19498407856738"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["b4e0d3f6116e64a8ab4c338fed19498407856738","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["b4e0d3f6116e64a8ab4c338fed19498407856738","9faa42f41b6adb98daf009cf99a4ee239189e469"],"56572ec06f1407c066d6b7399413178b33176cd8":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","93dd449115a9247533e44bab47e8429e5dccbc6d"],"b4e0d3f6116e64a8ab4c338fed19498407856738":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"dfc9a1c0f8c40dae949281597c97e61defe903fc":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["7530de27b87b961b51f01bd1299b7004d46e8823","dfc9a1c0f8c40dae949281597c97e61defe903fc"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f9453e226f2896430e77ec8e7837c1441a9aeb0":["d4d69c535930b5cce125cff868d40f6373dc27d4","b4e0d3f6116e64a8ab4c338fed19498407856738"],"7530de27b87b961b51f01bd1299b7004d46e8823":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a4d374b2bebd0d52acaa61038fbf23068620fba7","7530de27b87b961b51f01bd1299b7004d46e8823"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["dfc9a1c0f8c40dae949281597c97e61defe903fc"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"b4e0d3f6116e64a8ab4c338fed19498407856738":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","0f9453e226f2896430e77ec8e7837c1441a9aeb0"],"dfc9a1c0f8c40dae949281597c97e61defe903fc":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["b4e0d3f6116e64a8ab4c338fed19498407856738","0f9453e226f2896430e77ec8e7837c1441a9aeb0"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0f9453e226f2896430e77ec8e7837c1441a9aeb0":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","56572ec06f1407c066d6b7399413178b33176cd8","0f9453e226f2896430e77ec8e7837c1441a9aeb0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}