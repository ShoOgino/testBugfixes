{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(LeafReaderContext,int).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, context.reader().getLiveDocs()) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD) {\n            shouldMatchCount++;\n          }\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, context.reader().getLiveDocs(), true) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD) {\n            shouldMatchCount++;\n          }\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, context.reader().getLiveDocs()) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD) {\n            shouldMatchCount++;\n          }\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, context.reader().getLiveDocs()) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD) {\n            shouldMatchCount++;\n          }\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, context.reader().getLiveDocs(), true) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD) {\n            shouldMatchCount++;\n          }\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a18a03f140cbd3f78694787c9f98cf452aab7b7f","date":1423241474,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#explain(LeafReaderContext,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc)\n      throws IOException {\n      final int minShouldMatch =\n        BooleanQuery.this.getMinimumNumberShouldMatch();\n      ComplexExplanation sumExpl = new ComplexExplanation();\n      sumExpl.setDescription(\"sum of:\");\n      int coord = 0;\n      float sum = 0.0f;\n      boolean fail = false;\n      int shouldMatchCount = 0;\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n        Weight w = wIter.next();\n        BooleanClause c = cIter.next();\n        if (w.scorer(context, context.reader().getLiveDocs()) == null) {\n          if (c.isRequired()) {\n            fail = true;\n            Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n            sumExpl.addDetail(r);\n          }\n          continue;\n        }\n        Explanation e = w.explain(context, doc);\n        if (e.isMatch()) {\n          if (!c.isProhibited()) {\n            sumExpl.addDetail(e);\n            sum += e.getValue();\n            coord++;\n          } else {\n            Explanation r =\n              new Explanation(0.0f, \"match on prohibited clause (\" + c.getQuery().toString() + \")\");\n            r.addDetail(e);\n            sumExpl.addDetail(r);\n            fail = true;\n          }\n          if (c.getOccur() == Occur.SHOULD) {\n            shouldMatchCount++;\n          }\n        } else if (c.isRequired()) {\n          Explanation r = new Explanation(0.0f, \"no match on required clause (\" + c.getQuery().toString() + \")\");\n          r.addDetail(e);\n          sumExpl.addDetail(r);\n          fail = true;\n        }\n      }\n      if (fail) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription\n          (\"Failure to meet condition(s) of required/prohibited clause(s)\");\n        return sumExpl;\n      } else if (shouldMatchCount < minShouldMatch) {\n        sumExpl.setMatch(Boolean.FALSE);\n        sumExpl.setValue(0.0f);\n        sumExpl.setDescription(\"Failure to match minimum number \"+\n                               \"of optional clauses: \" + minShouldMatch);\n        return sumExpl;\n      }\n      \n      sumExpl.setMatch(0 < coord ? Boolean.TRUE : Boolean.FALSE);\n      sumExpl.setValue(sum);\n      \n      final float coordFactor = disableCoord ? 1.0f : coord(coord, maxCoord);\n      if (coordFactor == 1.0f) {\n        return sumExpl;                             // eliminate wrapper\n      } else {\n        ComplexExplanation result = new ComplexExplanation(sumExpl.isMatch(),\n                                                           sum*coordFactor,\n                                                           \"product of:\");\n        result.addDetail(sumExpl);\n        result.addDetail(new Explanation(coordFactor,\n                                         \"coord(\"+coord+\"/\"+maxCoord+\")\"));\n        return result;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["fb17639909a369c1e64866842e5c213440acc17e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}