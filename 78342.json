{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testMetricTrigger().mjava","commits":[{"id":"35a328e6f64355319d0b316956c260b0be251aca","date":1513957730,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testMetricTrigger().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMetricTrigger() throws Exception {\n    // at least 3 nodes\n    for (int i = cluster.getJettySolrRunners().size(); i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(5);\n\n    String collectionName = \"testMetricTrigger\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 1);\n    create.process(solrClient);\n    solrClient.setDefaultCollection(collectionName);\n\n    waitForState(\"Timed out waiting for collection:\" + collectionName + \" to become active\", collectionName, clusterShape(2, 1));\n\n    DocCollection docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    String shardId = \"shard1\";\n    Replica replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    String coreName = replica.getCoreName();\n    String replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    long waitForSeconds = 2 + random().nextInt(5);\n    String registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    String tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'metric_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    for (int i = 0; i < 500; i++) {\n      solrClient.add(new SolrInputDocument(\"id\", String.valueOf(i), \"x_s\", \"x\" + i));\n    }\n    solrClient.commit();\n\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n\n    String oldReplicaName = replica.getName();\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    assertEquals(2, docCollection.getReplicas().size());\n    assertNull(docCollection.getReplica(oldReplicaName));\n\n    // todo uncomment the following code once SOLR-11714 is fixed\n    // find a new replica and create its metric name\n//    replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n//    coreName = replica.getCoreName();\n//    replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n//    registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n//    tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n//\n//    setTriggerCommand = \"{\" +\n//        \"'set-trigger' : {\" +\n//        \"'name' : 'metric_trigger',\" +\n//        \"'event' : 'metric',\" +\n//        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n//        \"'enabled' : true,\" +\n//        \"'metric': '\" + tag + \"'\" +\n//        \"'above' : 100.0,\" +\n//        \"'collection': '\" + collectionName + \"'\" +\n//        \"'shard':'\"  + shardId + \"'\" +\n//        \"'preferredOperation':'addreplica'\" +\n//        \"'actions' : [\" +\n//        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n//        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n//        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n//        \"]\" +\n//        \"}}\";\n//    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n//    response = solrClient.request(req);\n//    assertEquals(response.get(\"result\").toString(), \"success\");\n//\n//    triggerFiredLatch = new CountDownLatch(1);\n//    listenerEvents.clear();\n//    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n//    assertTrue(\"The trigger did not fire at all\", await);\n//    // wait for listener to capture the SUCCEEDED stage\n//    Thread.sleep(2000);\n//    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n//    ev = listenerEvents.get(\"srt\").get(0);\n//    now = timeSource.getTime();\n//    // verify waitFor\n//    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n//    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n//    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n//    assertEquals(3, docCollection.getReplicas().size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c7677c25cb0bab8b6bb5620b2cadc3680c17fecf","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9ccfe45460d496c5e5e1b70396521dac842d966","date":1516798975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testMetricTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testMetricTrigger().mjava","sourceNew":"  @Test\n  public void testMetricTrigger() throws Exception {\n    // at least 3 nodes\n    for (int i = cluster.getJettySolrRunners().size(); i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(5);\n\n    String collectionName = \"testMetricTrigger\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 1);\n    create.process(solrClient);\n    solrClient.setDefaultCollection(collectionName);\n\n    waitForState(\"Timed out waiting for collection:\" + collectionName + \" to become active\", collectionName, clusterShape(2, 1));\n\n    DocCollection docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    String shardId = \"shard1\";\n    Replica replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    String coreName = replica.getCoreName();\n    String replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    long waitForSeconds = 2 + random().nextInt(5);\n    String registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    String tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'metric_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    for (int i = 0; i < 500; i++) {\n      solrClient.add(new SolrInputDocument(\"id\", String.valueOf(i), \"x_s\", \"x\" + i));\n    }\n    solrClient.commit();\n\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n\n    String oldReplicaName = replica.getName();\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    assertEquals(2, docCollection.getReplicas().size());\n    assertNull(docCollection.getReplica(oldReplicaName));\n\n    // todo uncomment the following code once SOLR-11714 is fixed\n    // find a new replica and create its metric name\n    replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    coreName = replica.getCoreName();\n    replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'preferredOperation':'addreplica'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    ev = listenerEvents.get(\"srt\").get(0);\n    now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    assertEquals(3, docCollection.getReplicas().size());\n  }\n\n","sourceOld":"  @Test\n  public void testMetricTrigger() throws Exception {\n    // at least 3 nodes\n    for (int i = cluster.getJettySolrRunners().size(); i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(5);\n\n    String collectionName = \"testMetricTrigger\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 1);\n    create.process(solrClient);\n    solrClient.setDefaultCollection(collectionName);\n\n    waitForState(\"Timed out waiting for collection:\" + collectionName + \" to become active\", collectionName, clusterShape(2, 1));\n\n    DocCollection docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    String shardId = \"shard1\";\n    Replica replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    String coreName = replica.getCoreName();\n    String replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    long waitForSeconds = 2 + random().nextInt(5);\n    String registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    String tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'metric_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    for (int i = 0; i < 500; i++) {\n      solrClient.add(new SolrInputDocument(\"id\", String.valueOf(i), \"x_s\", \"x\" + i));\n    }\n    solrClient.commit();\n\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n\n    String oldReplicaName = replica.getName();\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    assertEquals(2, docCollection.getReplicas().size());\n    assertNull(docCollection.getReplica(oldReplicaName));\n\n    // todo uncomment the following code once SOLR-11714 is fixed\n    // find a new replica and create its metric name\n//    replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n//    coreName = replica.getCoreName();\n//    replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n//    registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n//    tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n//\n//    setTriggerCommand = \"{\" +\n//        \"'set-trigger' : {\" +\n//        \"'name' : 'metric_trigger',\" +\n//        \"'event' : 'metric',\" +\n//        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n//        \"'enabled' : true,\" +\n//        \"'metric': '\" + tag + \"'\" +\n//        \"'above' : 100.0,\" +\n//        \"'collection': '\" + collectionName + \"'\" +\n//        \"'shard':'\"  + shardId + \"'\" +\n//        \"'preferredOperation':'addreplica'\" +\n//        \"'actions' : [\" +\n//        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n//        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n//        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n//        \"]\" +\n//        \"}}\";\n//    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n//    response = solrClient.request(req);\n//    assertEquals(response.get(\"result\").toString(), \"success\");\n//\n//    triggerFiredLatch = new CountDownLatch(1);\n//    listenerEvents.clear();\n//    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n//    assertTrue(\"The trigger did not fire at all\", await);\n//    // wait for listener to capture the SUCCEEDED stage\n//    Thread.sleep(2000);\n//    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n//    ev = listenerEvents.get(\"srt\").get(0);\n//    now = timeSource.getTime();\n//    // verify waitFor\n//    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n//    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n//    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n//    assertEquals(3, docCollection.getReplicas().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","date":1516881857,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testMetricTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testMetricTrigger().mjava","sourceNew":"  @Test\n  public void testMetricTrigger() throws Exception {\n    // at least 3 nodes\n    for (int i = cluster.getJettySolrRunners().size(); i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(5);\n\n    String collectionName = \"testMetricTrigger\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 1);\n    create.process(solrClient);\n    solrClient.setDefaultCollection(collectionName);\n\n    waitForState(\"Timed out waiting for collection:\" + collectionName + \" to become active\", collectionName, clusterShape(2, 1));\n\n    DocCollection docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    String shardId = \"shard1\";\n    Replica replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    String coreName = replica.getCoreName();\n    String replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    long waitForSeconds = 2 + random().nextInt(5);\n    String registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    String tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'metric_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    for (int i = 0; i < 500; i++) {\n      solrClient.add(new SolrInputDocument(\"id\", String.valueOf(i), \"x_s\", \"x\" + i));\n    }\n    solrClient.commit();\n\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n\n    String oldReplicaName = replica.getName();\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    assertEquals(2, docCollection.getReplicas().size());\n    assertNull(docCollection.getReplica(oldReplicaName));\n\n    // todo uncomment the following code once SOLR-11714 is fixed\n    // find a new replica and create its metric name\n    replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    coreName = replica.getCoreName();\n    replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'preferredOperation':'addreplica'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    ev = listenerEvents.get(\"srt\").get(0);\n    now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    assertEquals(3, docCollection.getReplicas().size());\n  }\n\n","sourceOld":"  @Test\n  public void testMetricTrigger() throws Exception {\n    // at least 3 nodes\n    for (int i = cluster.getJettySolrRunners().size(); i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(5);\n\n    String collectionName = \"testMetricTrigger\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 1);\n    create.process(solrClient);\n    solrClient.setDefaultCollection(collectionName);\n\n    waitForState(\"Timed out waiting for collection:\" + collectionName + \" to become active\", collectionName, clusterShape(2, 1));\n\n    DocCollection docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    String shardId = \"shard1\";\n    Replica replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    String coreName = replica.getCoreName();\n    String replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    long waitForSeconds = 2 + random().nextInt(5);\n    String registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    String tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'metric_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    for (int i = 0; i < 500; i++) {\n      solrClient.add(new SolrInputDocument(\"id\", String.valueOf(i), \"x_s\", \"x\" + i));\n    }\n    solrClient.commit();\n\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n\n    String oldReplicaName = replica.getName();\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    assertEquals(2, docCollection.getReplicas().size());\n    assertNull(docCollection.getReplica(oldReplicaName));\n\n    // todo uncomment the following code once SOLR-11714 is fixed\n    // find a new replica and create its metric name\n//    replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n//    coreName = replica.getCoreName();\n//    replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n//    registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n//    tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n//\n//    setTriggerCommand = \"{\" +\n//        \"'set-trigger' : {\" +\n//        \"'name' : 'metric_trigger',\" +\n//        \"'event' : 'metric',\" +\n//        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n//        \"'enabled' : true,\" +\n//        \"'metric': '\" + tag + \"'\" +\n//        \"'above' : 100.0,\" +\n//        \"'collection': '\" + collectionName + \"'\" +\n//        \"'shard':'\"  + shardId + \"'\" +\n//        \"'preferredOperation':'addreplica'\" +\n//        \"'actions' : [\" +\n//        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n//        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n//        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n//        \"]\" +\n//        \"}}\";\n//    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n//    response = solrClient.request(req);\n//    assertEquals(response.get(\"result\").toString(), \"success\");\n//\n//    triggerFiredLatch = new CountDownLatch(1);\n//    listenerEvents.clear();\n//    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n//    assertTrue(\"The trigger did not fire at all\", await);\n//    // wait for listener to capture the SUCCEEDED stage\n//    Thread.sleep(2000);\n//    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n//    ev = listenerEvents.get(\"srt\").get(0);\n//    now = timeSource.getTime();\n//    // verify waitFor\n//    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n//    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n//    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n//    assertEquals(3, docCollection.getReplicas().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7677c25cb0bab8b6bb5620b2cadc3680c17fecf","date":1516898535,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testMetricTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testMetricTrigger().mjava","sourceNew":"  @Test\n  public void testMetricTrigger() throws Exception {\n    // at least 3 nodes\n    for (int i = cluster.getJettySolrRunners().size(); i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(5);\n\n    String collectionName = \"testMetricTrigger\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 1);\n    create.process(solrClient);\n    solrClient.setDefaultCollection(collectionName);\n\n    waitForState(\"Timed out waiting for collection:\" + collectionName + \" to become active\", collectionName, clusterShape(2, 1));\n\n    DocCollection docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    String shardId = \"shard1\";\n    Replica replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    String coreName = replica.getCoreName();\n    String replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    long waitForSeconds = 2 + random().nextInt(5);\n    String registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    String tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'metric_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    for (int i = 0; i < 500; i++) {\n      solrClient.add(new SolrInputDocument(\"id\", String.valueOf(i), \"x_s\", \"x\" + i));\n    }\n    solrClient.commit();\n\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n\n    String oldReplicaName = replica.getName();\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    assertEquals(2, docCollection.getReplicas().size());\n    assertNull(docCollection.getReplica(oldReplicaName));\n\n    // find a new replica and create its metric name\n    replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    coreName = replica.getCoreName();\n    replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'preferredOperation':'addreplica'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    ev = listenerEvents.get(\"srt\").get(0);\n    now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    assertEquals(3, docCollection.getReplicas().size());\n  }\n\n","sourceOld":"  @Test\n  public void testMetricTrigger() throws Exception {\n    // at least 3 nodes\n    for (int i = cluster.getJettySolrRunners().size(); i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(5);\n\n    String collectionName = \"testMetricTrigger\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 1);\n    create.process(solrClient);\n    solrClient.setDefaultCollection(collectionName);\n\n    waitForState(\"Timed out waiting for collection:\" + collectionName + \" to become active\", collectionName, clusterShape(2, 1));\n\n    DocCollection docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    String shardId = \"shard1\";\n    Replica replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    String coreName = replica.getCoreName();\n    String replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    long waitForSeconds = 2 + random().nextInt(5);\n    String registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    String tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'metric_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    for (int i = 0; i < 500; i++) {\n      solrClient.add(new SolrInputDocument(\"id\", String.valueOf(i), \"x_s\", \"x\" + i));\n    }\n    solrClient.commit();\n\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n\n    String oldReplicaName = replica.getName();\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    assertEquals(2, docCollection.getReplicas().size());\n    assertNull(docCollection.getReplica(oldReplicaName));\n\n    // todo uncomment the following code once SOLR-11714 is fixed\n    // find a new replica and create its metric name\n    replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    coreName = replica.getCoreName();\n    replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'preferredOperation':'addreplica'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    ev = listenerEvents.get(\"srt\").get(0);\n    now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    assertEquals(3, docCollection.getReplicas().size());\n  }\n\n","bugFix":["35a328e6f64355319d0b316956c260b0be251aca"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4efaeae02b3e2e01b01b730016400d1811a31df","date":1519663922,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testMetricTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testMetricTrigger().mjava","sourceNew":"  @Test\n  public void testMetricTrigger() throws Exception {\n    cluster.waitForAllNodes(5);\n\n    String collectionName = \"testMetricTrigger\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 2).setMaxShardsPerNode(2);\n    create.process(solrClient);\n    solrClient.setDefaultCollection(collectionName);\n\n    waitForState(\"Timed out waiting for collection:\" + collectionName + \" to become active\", collectionName, clusterShape(2, 2));\n\n    DocCollection docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    String shardId = \"shard1\";\n    Replica replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    String coreName = replica.getCoreName();\n    String replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    long waitForSeconds = 2 + random().nextInt(5);\n    String registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    String tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'metric_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start more nodes so that we have at least 4\n    for (int i = cluster.getJettySolrRunners().size(); i < 4; i++) {\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(10);\n\n    List<SolrInputDocument> docs = new ArrayList<>(500);\n    for (int i = 0; i < 500; i++) {\n      docs.add(new SolrInputDocument(\"id\", String.valueOf(i), \"x_s\", \"x\" + i));\n    }\n    solrClient.add(docs);\n    solrClient.commit();\n\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n\n    // find a new replica and create its metric name\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    coreName = replica.getCoreName();\n    replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'preferredOperation':'addreplica'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    ev = listenerEvents.get(\"srt\").get(0);\n    now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    assertEquals(5, docCollection.getReplicas().size());\n  }\n\n","sourceOld":"  @Test\n  public void testMetricTrigger() throws Exception {\n    // at least 3 nodes\n    for (int i = cluster.getJettySolrRunners().size(); i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(5);\n\n    String collectionName = \"testMetricTrigger\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 1);\n    create.process(solrClient);\n    solrClient.setDefaultCollection(collectionName);\n\n    waitForState(\"Timed out waiting for collection:\" + collectionName + \" to become active\", collectionName, clusterShape(2, 1));\n\n    DocCollection docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    String shardId = \"shard1\";\n    Replica replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    String coreName = replica.getCoreName();\n    String replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    long waitForSeconds = 2 + random().nextInt(5);\n    String registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    String tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'metric_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    for (int i = 0; i < 500; i++) {\n      solrClient.add(new SolrInputDocument(\"id\", String.valueOf(i), \"x_s\", \"x\" + i));\n    }\n    solrClient.commit();\n\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n\n    String oldReplicaName = replica.getName();\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    assertEquals(2, docCollection.getReplicas().size());\n    assertNull(docCollection.getReplica(oldReplicaName));\n\n    // find a new replica and create its metric name\n    replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    coreName = replica.getCoreName();\n    replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'preferredOperation':'addreplica'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    ev = listenerEvents.get(\"srt\").get(0);\n    now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    assertEquals(3, docCollection.getReplicas().size());\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4412883c12067d8a4e2a354aa8adc58c32be1d6","date":1521129281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testMetricTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testMetricTrigger().mjava","sourceNew":"  @Test\n  public void testMetricTrigger() throws Exception {\n    cluster.waitForAllNodes(5);\n\n    String collectionName = \"testMetricTrigger\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 2).setMaxShardsPerNode(2);\n    create.process(solrClient);\n    solrClient.setDefaultCollection(collectionName);\n\n    waitForState(\"Timed out waiting for collection:\" + collectionName + \" to become active\", collectionName, clusterShape(2, 2));\n\n    DocCollection docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    String shardId = \"shard1\";\n    Replica replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    String coreName = replica.getCoreName();\n    String replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    long waitForSeconds = 2 + random().nextInt(5);\n    String registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    String tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'metric_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start more nodes so that we have at least 4\n    for (int i = cluster.getJettySolrRunners().size(); i < 4; i++) {\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(10);\n\n    List<SolrInputDocument> docs = new ArrayList<>(500);\n    for (int i = 0; i < 500; i++) {\n      docs.add(new SolrInputDocument(\"id\", String.valueOf(i), \"x_s\", \"x\" + i));\n    }\n    solrClient.add(docs);\n    solrClient.commit();\n\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n\n    // find a new replica and create its metric name\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    coreName = replica.getCoreName();\n    replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'preferredOperation':'addreplica'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    ev = listenerEvents.get(\"srt\").get(0);\n    now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    assertEquals(5, docCollection.getReplicas().size());\n  }\n\n","sourceOld":"  @Test\n  public void testMetricTrigger() throws Exception {\n    cluster.waitForAllNodes(5);\n\n    String collectionName = \"testMetricTrigger\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 2).setMaxShardsPerNode(2);\n    create.process(solrClient);\n    solrClient.setDefaultCollection(collectionName);\n\n    waitForState(\"Timed out waiting for collection:\" + collectionName + \" to become active\", collectionName, clusterShape(2, 2));\n\n    DocCollection docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    String shardId = \"shard1\";\n    Replica replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    String coreName = replica.getCoreName();\n    String replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    long waitForSeconds = 2 + random().nextInt(5);\n    String registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    String tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'metric_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start more nodes so that we have at least 4\n    for (int i = cluster.getJettySolrRunners().size(); i < 4; i++) {\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(10);\n\n    List<SolrInputDocument> docs = new ArrayList<>(500);\n    for (int i = 0; i < 500; i++) {\n      docs.add(new SolrInputDocument(\"id\", String.valueOf(i), \"x_s\", \"x\" + i));\n    }\n    solrClient.add(docs);\n    solrClient.commit();\n\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n\n    // find a new replica and create its metric name\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    coreName = replica.getCoreName();\n    replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'preferredOperation':'addreplica'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    ev = listenerEvents.get(\"srt\").get(0);\n    now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    assertEquals(5, docCollection.getReplicas().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","date":1522388336,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/MetricTriggerIntegrationTest#testMetricTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testMetricTrigger().mjava","sourceNew":"  @Test\n  public void testMetricTrigger() throws Exception {\n    cluster.waitForAllNodes(5);\n\n    String collectionName = \"testMetricTrigger\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 2).setMaxShardsPerNode(2);\n    create.process(solrClient);\n    solrClient.setDefaultCollection(collectionName);\n\n    waitForState(\"Timed out waiting for collection:\" + collectionName + \" to become active\", collectionName, clusterShape(2, 2));\n\n    DocCollection docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    String shardId = \"shard1\";\n    Replica replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    String coreName = replica.getCoreName();\n    String replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    long waitForSeconds = 2 + random().nextInt(5);\n    String registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    String tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\" + shardId + \"'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + MetricAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'metric_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start more nodes so that we have at least 4\n    for (int i = cluster.getJettySolrRunners().size(); i < 4; i++) {\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(10);\n\n    List<SolrInputDocument> docs = new ArrayList<>(500);\n    for (int i = 0; i < 500; i++) {\n      docs.add(new SolrInputDocument(\"id\", String.valueOf(i), \"x_s\", \"x\" + i));\n    }\n    solrClient.add(docs);\n    solrClient.commit();\n\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n\n    // find a new replica and create its metric name\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    coreName = replica.getCoreName();\n    replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\" + shardId + \"'\" +\n        \"'preferredOperation':'addreplica'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + MetricAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    ev = listenerEvents.get(\"srt\").get(0);\n    now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    assertEquals(5, docCollection.getReplicas().size());\n  }\n\n","sourceOld":"  @Test\n  public void testMetricTrigger() throws Exception {\n    cluster.waitForAllNodes(5);\n\n    String collectionName = \"testMetricTrigger\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 2).setMaxShardsPerNode(2);\n    create.process(solrClient);\n    solrClient.setDefaultCollection(collectionName);\n\n    waitForState(\"Timed out waiting for collection:\" + collectionName + \" to become active\", collectionName, clusterShape(2, 2));\n\n    DocCollection docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    String shardId = \"shard1\";\n    Replica replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    String coreName = replica.getCoreName();\n    String replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    long waitForSeconds = 2 + random().nextInt(5);\n    String registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    String tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'metric_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start more nodes so that we have at least 4\n    for (int i = cluster.getJettySolrRunners().size(); i < 4; i++) {\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(10);\n\n    List<SolrInputDocument> docs = new ArrayList<>(500);\n    for (int i = 0; i < 500; i++) {\n      docs.add(new SolrInputDocument(\"id\", String.valueOf(i), \"x_s\", \"x\" + i));\n    }\n    solrClient.add(docs);\n    solrClient.commit();\n\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n\n    // find a new replica and create its metric name\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    coreName = replica.getCoreName();\n    replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'preferredOperation':'addreplica'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    ev = listenerEvents.get(\"srt\").get(0);\n    now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    assertEquals(5, docCollection.getReplicas().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/MetricTriggerIntegrationTest#testMetricTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testMetricTrigger().mjava","sourceNew":"  @Test\n  public void testMetricTrigger() throws Exception {\n    cluster.waitForAllNodes(5);\n\n    String collectionName = \"testMetricTrigger\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 2).setMaxShardsPerNode(2);\n    create.process(solrClient);\n    solrClient.setDefaultCollection(collectionName);\n\n    waitForState(\"Timed out waiting for collection:\" + collectionName + \" to become active\", collectionName, clusterShape(2, 2));\n\n    DocCollection docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    String shardId = \"shard1\";\n    Replica replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    String coreName = replica.getCoreName();\n    String replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    long waitForSeconds = 2 + random().nextInt(5);\n    String registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    String tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\" + shardId + \"'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + MetricAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'metric_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start more nodes so that we have at least 4\n    for (int i = cluster.getJettySolrRunners().size(); i < 4; i++) {\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(10);\n\n    List<SolrInputDocument> docs = new ArrayList<>(500);\n    for (int i = 0; i < 500; i++) {\n      docs.add(new SolrInputDocument(\"id\", String.valueOf(i), \"x_s\", \"x\" + i));\n    }\n    solrClient.add(docs);\n    solrClient.commit();\n\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n\n    // find a new replica and create its metric name\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    coreName = replica.getCoreName();\n    replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\" + shardId + \"'\" +\n        \"'preferredOperation':'addreplica'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + MetricAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    ev = listenerEvents.get(\"srt\").get(0);\n    now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    assertEquals(5, docCollection.getReplicas().size());\n  }\n\n","sourceOld":"  @Test\n  public void testMetricTrigger() throws Exception {\n    cluster.waitForAllNodes(5);\n\n    String collectionName = \"testMetricTrigger\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 2, 2).setMaxShardsPerNode(2);\n    create.process(solrClient);\n    solrClient.setDefaultCollection(collectionName);\n\n    waitForState(\"Timed out waiting for collection:\" + collectionName + \" to become active\", collectionName, clusterShape(2, 2));\n\n    DocCollection docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    String shardId = \"shard1\";\n    Replica replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    String coreName = replica.getCoreName();\n    String replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    long waitForSeconds = 2 + random().nextInt(5);\n    String registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    String tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'metric_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start more nodes so that we have at least 4\n    for (int i = cluster.getJettySolrRunners().size(); i < 4; i++) {\n      cluster.startJettySolrRunner();\n    }\n    cluster.waitForAllNodes(10);\n\n    List<SolrInputDocument> docs = new ArrayList<>(500);\n    for (int i = 0; i < 500; i++) {\n      docs.add(new SolrInputDocument(\"id\", String.valueOf(i), \"x_s\", \"x\" + i));\n    }\n    solrClient.add(docs);\n    solrClient.commit();\n\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n\n    // find a new replica and create its metric name\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    replica = docCollection.getSlice(shardId).getReplicas().iterator().next();\n    coreName = replica.getCoreName();\n    replicaName = Utils.parseMetricsReplicaName(collectionName, coreName);\n    registry = SolrCoreMetricManager.createRegistryName(true, collectionName, shardId, replicaName, null);\n    tag = \"metrics:\" + registry + \":INDEX.sizeInBytes\";\n\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'metric_trigger',\" +\n        \"'event' : 'metric',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'metric': '\" + tag + \"'\" +\n        \"'above' : 100.0,\" +\n        \"'collection': '\" + collectionName + \"'\" +\n        \"'shard':'\"  + shardId + \"'\" +\n        \"'preferredOperation':'addreplica'\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 4, listenerEvents.get(\"srt\").size());\n    ev = listenerEvents.get(\"srt\").get(0);\n    now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    assertEquals(collectionName, ev.event.getProperties().get(\"collection\"));\n    docCollection = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    assertEquals(5, docCollection.getReplicas().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d4efaeae02b3e2e01b01b730016400d1811a31df":["c7677c25cb0bab8b6bb5620b2cadc3680c17fecf"],"c7677c25cb0bab8b6bb5620b2cadc3680c17fecf":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["d4efaeae02b3e2e01b01b730016400d1811a31df"],"35a328e6f64355319d0b316956c260b0be251aca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["d4412883c12067d8a4e2a354aa8adc58c32be1d6","deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["35a328e6f64355319d0b316956c260b0be251aca","d9ccfe45460d496c5e5e1b70396521dac842d966"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["35a328e6f64355319d0b316956c260b0be251aca"]},"commit2Childs":{"d4efaeae02b3e2e01b01b730016400d1811a31df":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"c7677c25cb0bab8b6bb5620b2cadc3680c17fecf":["d4efaeae02b3e2e01b01b730016400d1811a31df"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["35a328e6f64355319d0b316956c260b0be251aca"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"35a328e6f64355319d0b316956c260b0be251aca":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","d9ccfe45460d496c5e5e1b70396521dac842d966"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["c7677c25cb0bab8b6bb5620b2cadc3680c17fecf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d9ccfe45460d496c5e5e1b70396521dac842d966":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}