{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#setCacheSize(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#setCacheSize(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#setCacheSize(int).mjava","sourceNew":"  /**\n   * Set the number of TotalFacetCounts arrays that will remain in memory cache.\n   * <p>\n   * If new size is smaller than current size, the cache is appropriately trimmed.\n   * <p>\n   * Minimal size is 1, so passing zero or negative size would result in size of 1.\n   * @param size new size to set\n   */\n  public void setCacheSize(int size) {\n    if (size < 1) size = 1;\n    int origSize = maxCacheSize;\n    maxCacheSize = size;\n    if (maxCacheSize < origSize) { // need to trim only if the cache was reduced\n      trimCache();\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the number of TotalFacetCounts arrays that will remain in memory cache.\n   * <p>\n   * If new size is smaller than current size, the cache is appropriately trimmed.\n   * <p>\n   * Minimal size is 1, so passing zero or negative size would result in size of 1.\n   * @param size new size to set\n   */\n  public void setCacheSize(int size) {\n    if (size < 1) size = 1;\n    int origSize = maxCacheSize;\n    maxCacheSize = size;\n    if (maxCacheSize < origSize) { // need to trim only if the cache was reduced\n      trimCache();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCountsCache#setCacheSize(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#setCacheSize(int).mjava","sourceNew":"  /**\n   * Set the number of TotalFacetCounts arrays that will remain in memory cache.\n   * <p>\n   * If new size is smaller than current size, the cache is appropriately trimmed.\n   * <p>\n   * Minimal size is 1, so passing zero or negative size would result in size of 1.\n   * @param size new size to set\n   */\n  public void setCacheSize(int size) {\n    if (size < 1) size = 1;\n    int origSize = maxCacheSize;\n    maxCacheSize = size;\n    if (maxCacheSize < origSize) { // need to trim only if the cache was reduced\n      trimCache();\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the number of TotalFacetCounts arrays that will remain in memory cache.\n   * <p>\n   * If new size is smaller than current size, the cache is appropriately trimmed.\n   * <p>\n   * Minimal size is 1, so passing zero or negative size would result in size of 1.\n   * @param size new size to set\n   */\n  public void setCacheSize(int size) {\n    if (size < 1) size = 1;\n    int origSize = maxCacheSize;\n    maxCacheSize = size;\n    if (maxCacheSize < origSize) { // need to trim only if the cache was reduced\n      trimCache();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}