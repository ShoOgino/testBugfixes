{"path":"sandbox/contributions/webcrawler-LARM/src/hplb/xml/Tokenizer#tokenize().mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/hplb/xml/Tokenizer#tokenize().mjava","pathOld":"/dev/null","sourceNew":"  public void tokenize() throws Exception {\n    int c;\n\n    while ((c = read()) != -1) {\n      switch (state) {\n        case ST_START:\n          switch (c) {\n            case '<':\n              state = ST_TAG_LT;\n              isStartTag = true;  // until proven wrong\n              tagname.reset();\n              break;\n            case ' ': case '\\t': case '\\r': case '\\n':\n              if (!rcgnzWS) break;\n              // else fall through\n            default:\n              state = ST_PCDATA;\n          }\n          break;\n\n        case ST_PCDATA:\n          if (c == '<') {\n            gotPCDATA(true);\n            state = ST_TAG_LT;\n          }\n          break;\n\n        case ST_TAG_LT:\n          switch (c) {\n            case '/':\n              isStartTag = false;\n              state = ST_TAG_NAME;\n              break;\n            case '!':\n              c = read();\n              if ((c == '-' && !rcgnzComments) || (c == '[' && !rcgnzCDATA)) {\n                state = ST_PCDATA;\n                break;\n              }\n              if (c == '-') state = ST_COMMENT;\n              else if (c == '[') parseCDATA();\n              else {\n                // FIXME: shouldn't be delivered as PCDATA\n                warning(\"Bad markup \" + buf);\n                state = ST_PCDATA;\n              }\n              break;\n            case '?':\n              parsePI();\n              break;\n            case ' ': case '\\t': case '\\r': case '\\n':\n              state = ST_TAG_WS;\n              break;\n            default:\n              tagname.write(c);\n              state = ST_TAG_NAME;\n          }\n          break;\n\n        case ST_TAG_NAME:\n          switch (c) {\n            case ' ': case '\\t': case '\\r': case '\\n':\n              state = ST_TAG_WS;\n              break;\n            case '/': state = ST_EMPTY_TAG_SLASH; break;\n            case '>': gotTag(false); break;\n            default:  tagname.write(c);\n          }\n          break;\n\n        case ST_TAG_WS:\n          switch (c) {\n            case ' ': case '\\t': case '\\r': case '\\n': break;\n            case '/': state = ST_EMPTY_TAG_SLASH; break;\n            case '>': gotTag(false); break;\n            case '?':\n              if (inXMLDecl) {\n                if ((c = read()) != '>') {\n                errHandler.warning(\"XML PI not terminated properly\",\n                                   sysID, _line, _column);\n                  //err_continue(\"XML PI not terminated properly\");\n                }\n                //handler.gotXMLDecl(attrs);  // FIXME(?)\n                toStart();\n                break;\n              }\n              // NOTE: if !inXMLDecl we fall through to default case\n            default:\n              if (!isStartTag) {\n                // bit of a hack this...\n                errHandler.warning(\"Malformed tag: \"+buf, sysID, _line, _column);\n                //err_continue(\"Malformed tag: \"+buf);\n                if (c == '<') {\n                    gotPCDATA(true);\n                    state = ST_TAG_LT;\n                } else {\n                    // we get here e.g. if there's an end tag with attributes\n                    state = ST_PCDATA;\n                }\n              } else {\n                // FIXME: this accepts way too many first chars for attr name\n                attrName.write(c);\n                state = ST_NAME;\n              }\n          }\n          break;\n\n        case ST_EMPTY_TAG_SLASH:\n          if (c == '>') {\n            //tagtype = TAG_EMPTY;\n            gotTag(true);\n            break;\n          } else {\n            // ERROR !? - can't throw Exception here - we go to next tag...\n            state = ST_PCDATA;\n          }\n          break;\n\n        case ST_NAME:\n          switch (c) {\n            case ' ': case '\\t': case '\\r': case '\\n':\n              if (attrName.size() > 0) {\n                state = ST_NAME_WS;\n              }\n              break;\n            case '>':\n              if (attrName.size() > 0) gotAttr(true);\n              gotTag(false);\n              break;\n            case '=':\n              state = ST_EQ;\n              break;\n            default:\n              if (isCtlOrTspecial(c)) {\n                state = ST_PCDATA;\n              } else {\n                attrName.write(c);\n              }\n          }\n          break;\n\n        case ST_NAME_WS:   // white-space between name and '='\n          switch (c) {\n            case ' ': case '\\t': case '\\r': case '\\n': break;\n            case '=': state = ST_EQ; break;\n            case '>': gotAttr(true); gotTag(false); break;\n            default:\n              if (isNameChar(c)) {\n                gotAttr(true);\n                attrName.write(c);\n                state = ST_TAG_WS;\n              } else {\n                state = ST_PCDATA;\n              }\n          }\n          break;\n\n        case ST_EQ:        // white-space between '=' and value\n          switch (c) {\n            case ' ': case '\\t': case '\\r': case '\\n': break;\n            case '\"':  qchar = '\"';  state = ST_VALUE_QUOTED; break;\n            case '\\'': qchar = '\\''; state = ST_VALUE_QUOTED; break;\n            default:\n              if (isCtlOrTspecial(c)) {\n                state = ST_PCDATA;\n              } else {\n                attrValue.write(c);\n                state = ST_VALUE;\n              }\n          }\n          break;\n\n        case ST_VALUE:\n          switch (c) {\n            case ' ': case '\\t': case '\\r': case '\\n':\n              gotAttr(false);\n              state = ST_TAG_WS;\n              break;\n            case '>':\n              gotAttr(false);\n              gotTag(false);\n              break;\n            case '/':\n              gotAttr(false);\n              state = ST_EMPTY_TAG_SLASH;\n              break;\n            default:\n              if (isCtlOrTspecial(c)) {\n                state = ST_PCDATA;\n              } else {\n                attrValue.write(c);\n              }\n          }\n          break;\n\n        case ST_VALUE_QUOTED:\n          if (c == qchar) {\n            gotAttr(false);\n            state = ST_TAG_WS;\n          } else {\n            attrValue.write(c);\n          }\n          break;\n\n        case ST_COMMENT:\n          // we've seen \"...<!-\" by now\n          try {\n            if (c != '-') {\n              warning(\"Bad comment\");\n              state = ST_PCDATA;\n              break;\n            }\n            // we're within comment - read till we see \"--\"\n            while (true) {\n              while (read_ex() != '-') ;\n              if (read_ex() == '-') break;\n            }\n            // seen \"--\" - gotComment() reads past next '>'\n            gotComment();\n            //while (read_ex() != '>') ;\n            //state = ST_PCDATA;\n          } catch (EmptyInputStream ex) {\n            gotPCDATA(false);\n            break;\n          }\n      }\n    }\n    /* TODO: catch EmptyInputStream exception only here!\n    } catch (EmptyInputStream ex) {\n        err_continue(\"EOF while parsing \" + token[state]);\n    }\n    */\n\n    // input stream ended - return rest, if any, as PCDATA\n    if (buf.size() > 0) {\n        gotPCDATA(false);\n        buf.reset();\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e","date":1022957716,"type":4,"author":"cmarschner","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/hplb/xml/Tokenizer#tokenize().mjava","sourceNew":null,"sourceOld":"  public void tokenize() throws Exception {\n    int c;\n\n    while ((c = read()) != -1) {\n      switch (state) {\n        case ST_START:\n          switch (c) {\n            case '<':\n              state = ST_TAG_LT;\n              isStartTag = true;  // until proven wrong\n              tagname.reset();\n              break;\n            case ' ': case '\\t': case '\\r': case '\\n':\n              if (!rcgnzWS) break;\n              // else fall through\n            default:\n              state = ST_PCDATA;\n          }\n          break;\n\n        case ST_PCDATA:\n          if (c == '<') {\n            gotPCDATA(true);\n            state = ST_TAG_LT;\n          }\n          break;\n\n        case ST_TAG_LT:\n          switch (c) {\n            case '/':\n              isStartTag = false;\n              state = ST_TAG_NAME;\n              break;\n            case '!':\n              c = read();\n              if ((c == '-' && !rcgnzComments) || (c == '[' && !rcgnzCDATA)) {\n                state = ST_PCDATA;\n                break;\n              }\n              if (c == '-') state = ST_COMMENT;\n              else if (c == '[') parseCDATA();\n              else {\n                // FIXME: shouldn't be delivered as PCDATA\n                warning(\"Bad markup \" + buf);\n                state = ST_PCDATA;\n              }\n              break;\n            case '?':\n              parsePI();\n              break;\n            case ' ': case '\\t': case '\\r': case '\\n':\n              state = ST_TAG_WS;\n              break;\n            default:\n              tagname.write(c);\n              state = ST_TAG_NAME;\n          }\n          break;\n\n        case ST_TAG_NAME:\n          switch (c) {\n            case ' ': case '\\t': case '\\r': case '\\n':\n              state = ST_TAG_WS;\n              break;\n            case '/': state = ST_EMPTY_TAG_SLASH; break;\n            case '>': gotTag(false); break;\n            default:  tagname.write(c);\n          }\n          break;\n\n        case ST_TAG_WS:\n          switch (c) {\n            case ' ': case '\\t': case '\\r': case '\\n': break;\n            case '/': state = ST_EMPTY_TAG_SLASH; break;\n            case '>': gotTag(false); break;\n            case '?':\n              if (inXMLDecl) {\n                if ((c = read()) != '>') {\n                errHandler.warning(\"XML PI not terminated properly\",\n                                   sysID, _line, _column);\n                  //err_continue(\"XML PI not terminated properly\");\n                }\n                //handler.gotXMLDecl(attrs);  // FIXME(?)\n                toStart();\n                break;\n              }\n              // NOTE: if !inXMLDecl we fall through to default case\n            default:\n              if (!isStartTag) {\n                // bit of a hack this...\n                errHandler.warning(\"Malformed tag: \"+buf, sysID, _line, _column);\n                //err_continue(\"Malformed tag: \"+buf);\n                if (c == '<') {\n                    gotPCDATA(true);\n                    state = ST_TAG_LT;\n                } else {\n                    // we get here e.g. if there's an end tag with attributes\n                    state = ST_PCDATA;\n                }\n              } else {\n                // FIXME: this accepts way too many first chars for attr name\n                attrName.write(c);\n                state = ST_NAME;\n              }\n          }\n          break;\n\n        case ST_EMPTY_TAG_SLASH:\n          if (c == '>') {\n            //tagtype = TAG_EMPTY;\n            gotTag(true);\n            break;\n          } else {\n            // ERROR !? - can't throw Exception here - we go to next tag...\n            state = ST_PCDATA;\n          }\n          break;\n\n        case ST_NAME:\n          switch (c) {\n            case ' ': case '\\t': case '\\r': case '\\n':\n              if (attrName.size() > 0) {\n                state = ST_NAME_WS;\n              }\n              break;\n            case '>':\n              if (attrName.size() > 0) gotAttr(true);\n              gotTag(false);\n              break;\n            case '=':\n              state = ST_EQ;\n              break;\n            default:\n              if (isCtlOrTspecial(c)) {\n                state = ST_PCDATA;\n              } else {\n                attrName.write(c);\n              }\n          }\n          break;\n\n        case ST_NAME_WS:   // white-space between name and '='\n          switch (c) {\n            case ' ': case '\\t': case '\\r': case '\\n': break;\n            case '=': state = ST_EQ; break;\n            case '>': gotAttr(true); gotTag(false); break;\n            default:\n              if (isNameChar(c)) {\n                gotAttr(true);\n                attrName.write(c);\n                state = ST_TAG_WS;\n              } else {\n                state = ST_PCDATA;\n              }\n          }\n          break;\n\n        case ST_EQ:        // white-space between '=' and value\n          switch (c) {\n            case ' ': case '\\t': case '\\r': case '\\n': break;\n            case '\"':  qchar = '\"';  state = ST_VALUE_QUOTED; break;\n            case '\\'': qchar = '\\''; state = ST_VALUE_QUOTED; break;\n            default:\n              if (isCtlOrTspecial(c)) {\n                state = ST_PCDATA;\n              } else {\n                attrValue.write(c);\n                state = ST_VALUE;\n              }\n          }\n          break;\n\n        case ST_VALUE:\n          switch (c) {\n            case ' ': case '\\t': case '\\r': case '\\n':\n              gotAttr(false);\n              state = ST_TAG_WS;\n              break;\n            case '>':\n              gotAttr(false);\n              gotTag(false);\n              break;\n            case '/':\n              gotAttr(false);\n              state = ST_EMPTY_TAG_SLASH;\n              break;\n            default:\n              if (isCtlOrTspecial(c)) {\n                state = ST_PCDATA;\n              } else {\n                attrValue.write(c);\n              }\n          }\n          break;\n\n        case ST_VALUE_QUOTED:\n          if (c == qchar) {\n            gotAttr(false);\n            state = ST_TAG_WS;\n          } else {\n            attrValue.write(c);\n          }\n          break;\n\n        case ST_COMMENT:\n          // we've seen \"...<!-\" by now\n          try {\n            if (c != '-') {\n              warning(\"Bad comment\");\n              state = ST_PCDATA;\n              break;\n            }\n            // we're within comment - read till we see \"--\"\n            while (true) {\n              while (read_ex() != '-') ;\n              if (read_ex() == '-') break;\n            }\n            // seen \"--\" - gotComment() reads past next '>'\n            gotComment();\n            //while (read_ex() != '>') ;\n            //state = ST_PCDATA;\n          } catch (EmptyInputStream ex) {\n            gotPCDATA(false);\n            break;\n          }\n      }\n    }\n    /* TODO: catch EmptyInputStream exception only here!\n    } catch (EmptyInputStream ex) {\n        err_continue(\"EOF while parsing \" + token[state]);\n    }\n    */\n\n    // input stream ended - return rest, if any, as PCDATA\n    if (buf.size() > 0) {\n        gotPCDATA(false);\n        buf.reset();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e":["05d36e0b328ec96237035fbcca240e73631396e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e"]},"commit2Childs":{"12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"05d36e0b328ec96237035fbcca240e73631396e5":["12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}