{"path":"solr/core/src/java/org/apache/solr/core/SolrCores#getCores().mjava","commits":[{"id":"9409650933cc688e77e565092a25e58adfc2e18d","date":1366663164,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCores().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps#getCores().mjava","sourceNew":"  List<SolrCore> getCores() {\n    List<SolrCore> lst = new ArrayList<SolrCore>();\n\n    synchronized (modifyLock) {\n      lst.addAll(cores.values());\n      return lst;\n    }\n  }\n\n","sourceOld":"  List<SolrCore> getCores() {\n    List<SolrCore> lst = new ArrayList<SolrCore>();\n\n    synchronized (locker) {\n      lst.addAll(cores.values());\n      return lst;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCores().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCores().mjava","sourceNew":"  List<SolrCore> getCores() {\n    List<SolrCore> lst = new ArrayList<>();\n\n    synchronized (modifyLock) {\n      lst.addAll(cores.values());\n      return lst;\n    }\n  }\n\n","sourceOld":"  List<SolrCore> getCores() {\n    List<SolrCore> lst = new ArrayList<SolrCore>();\n\n    synchronized (modifyLock) {\n      lst.addAll(cores.values());\n      return lst;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9435d55e3ea95c5d94406d3affc36f9505b6a736","date":1491251232,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCores().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCores().mjava","sourceNew":"  /**\n   *\n   * @return A list of \"permanent\" cores, i.e. cores that  may not be swapped out and are currently loaded.\n   * \n   * A core may be non-transient but still lazily loaded. If it is \"permanent\" and lazy-load _and_\n   * not yet loaded it will _not_ be returned by this call.\n   * \n   * Note: This is one of the places where SolrCloud is incompatible with Transient Cores. This call is used in \n   * cancelRecoveries, transient cores don't participate.\n   */\n\n  List<SolrCore> getCores() {\n    List<SolrCore> lst = new ArrayList<>();\n\n    synchronized (modifyLock) {\n      lst.addAll(cores.values());\n      return lst;\n    }\n  }\n\n","sourceOld":"  List<SolrCore> getCores() {\n    List<SolrCore> lst = new ArrayList<>();\n\n    synchronized (modifyLock) {\n      lst.addAll(cores.values());\n      return lst;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6a4b585aed7660a589375f6a09b90efd29c961","date":1491296430,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCores().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCores().mjava","sourceNew":"  /**\n   *\n   * @return A list of \"permanent\" cores, i.e. cores that  may not be swapped out and are currently loaded.\n   * \n   * A core may be non-transient but still lazily loaded. If it is \"permanent\" and lazy-load _and_\n   * not yet loaded it will _not_ be returned by this call.\n   * \n   * Note: This is one of the places where SolrCloud is incompatible with Transient Cores. This call is used in \n   * cancelRecoveries, transient cores don't participate.\n   */\n\n  List<SolrCore> getCores() {\n    List<SolrCore> lst = new ArrayList<>();\n\n    synchronized (modifyLock) {\n      lst.addAll(cores.values());\n      return lst;\n    }\n  }\n\n","sourceOld":"  List<SolrCore> getCores() {\n    List<SolrCore> lst = new ArrayList<>();\n\n    synchronized (modifyLock) {\n      lst.addAll(cores.values());\n      return lst;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","date":1571071547,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCores().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCores().mjava","sourceNew":"  /**\n   *\n   * @return A list of \"permanent\" cores, i.e. cores that  may not be swapped out and are currently loaded.\n   * \n   * A core may be non-transient but still lazily loaded. If it is \"permanent\" and lazy-load _and_\n   * not yet loaded it will _not_ be returned by this call.\n   * \n   * Note: This is one of the places where SolrCloud is incompatible with Transient Cores. This call is used in \n   * cancelRecoveries, transient cores don't participate.\n   */\n\n  List<SolrCore> getCores() {\n\n    synchronized (modifyLock) {\n      List<SolrCore> lst = new ArrayList<>(cores.values());\n      return lst;\n    }\n  }\n\n","sourceOld":"  /**\n   *\n   * @return A list of \"permanent\" cores, i.e. cores that  may not be swapped out and are currently loaded.\n   * \n   * A core may be non-transient but still lazily loaded. If it is \"permanent\" and lazy-load _and_\n   * not yet loaded it will _not_ be returned by this call.\n   * \n   * Note: This is one of the places where SolrCloud is incompatible with Transient Cores. This call is used in \n   * cancelRecoveries, transient cores don't participate.\n   */\n\n  List<SolrCore> getCores() {\n    List<SolrCore> lst = new ArrayList<>();\n\n    synchronized (modifyLock) {\n      lst.addAll(cores.values());\n      return lst;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getCores().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getCores().mjava","sourceNew":"  /**\n   *\n   * @return A list of \"permanent\" cores, i.e. cores that  may not be swapped out and are currently loaded.\n   * \n   * A core may be non-transient but still lazily loaded. If it is \"permanent\" and lazy-load _and_\n   * not yet loaded it will _not_ be returned by this call.\n   * \n   * Note: This is one of the places where SolrCloud is incompatible with Transient Cores. This call is used in \n   * cancelRecoveries, transient cores don't participate.\n   */\n\n  List<SolrCore> getCores() {\n\n    synchronized (modifyLock) {\n      List<SolrCore> lst = new ArrayList<>(cores.values());\n      return lst;\n    }\n  }\n\n","sourceOld":"  /**\n   *\n   * @return A list of \"permanent\" cores, i.e. cores that  may not be swapped out and are currently loaded.\n   * \n   * A core may be non-transient but still lazily loaded. If it is \"permanent\" and lazy-load _and_\n   * not yet loaded it will _not_ be returned by this call.\n   * \n   * Note: This is one of the places where SolrCloud is incompatible with Transient Cores. This call is used in \n   * cancelRecoveries, transient cores don't participate.\n   */\n\n  List<SolrCore> getCores() {\n    List<SolrCore> lst = new ArrayList<>();\n\n    synchronized (modifyLock) {\n      lst.addAll(cores.values());\n      return lst;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["9435d55e3ea95c5d94406d3affc36f9505b6a736"],"9435d55e3ea95c5d94406d3affc36f9505b6a736":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9409650933cc688e77e565092a25e58adfc2e18d"],"9409650933cc688e77e565092a25e58adfc2e18d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b6a4b585aed7660a589375f6a09b90efd29c961":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"],"b0b597c65628ca9e73913a07e81691f8229bae35":["9435d55e3ea95c5d94406d3affc36f9505b6a736","23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"]},"commit2Childs":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"9435d55e3ea95c5d94406d3affc36f9505b6a736":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","b0b597c65628ca9e73913a07e81691f8229bae35"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9435d55e3ea95c5d94406d3affc36f9505b6a736","8b6a4b585aed7660a589375f6a09b90efd29c961"],"9409650933cc688e77e565092a25e58adfc2e18d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9409650933cc688e77e565092a25e58adfc2e18d"],"8b6a4b585aed7660a589375f6a09b90efd29c961":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["8b6a4b585aed7660a589375f6a09b90efd29c961","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}