{"path":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(SolrResourceLoader,NodeList).mjava","commits":[{"id":"c028362918f0b06bbdb243dfd35486218b89dbde","date":1343391303,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(SolrResourceLoader,NodeList).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(ResourceLoader,NodeList).mjava","sourceNew":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name              = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","sourceOld":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name              = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(SolrResourceLoader,NodeList).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name              = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(SolrResourceLoader,NodeList).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name              = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"124e3f7e11a7f7f24a209763dbff8f43b69ae82e","date":1347302888,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(SolrResourceLoader,NodeList).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(SolrResourceLoader,NodeList).mjava","sourceNew":"  /**\n   * Initializes and registers each plugin in the list.\n   * Given a NodeList from XML in the form:\n   * <pre class=\"prettyprint\">\n   * {@code\n   * <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   * </plugins>}\n   * </pre>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   * <pre class=\"prettyprint\">\n   * {@code\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">}\n   * </pre>\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name              = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","sourceOld":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name              = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(SolrResourceLoader,NodeList).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(SolrResourceLoader,NodeList).mjava","sourceNew":"  /**\n   * Initializes and registers each plugin in the list.\n   * Given a NodeList from XML in the form:\n   * <pre class=\"prettyprint\">\n   * {@code\n   * <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   * </plugins>}\n   * </pre>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   * <pre class=\"prettyprint\">\n   * {@code\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">}\n   * </pre>\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name              = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","sourceOld":"  /**\n   * Initializes and registers each plugin in the list.\n   * Given a NodeList from XML in the form:\n   * <pre class=\"prettyprint\">\n   * {@code\n   * <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   * </plugins>}\n   * </pre>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   * <pre class=\"prettyprint\">\n   * {@code\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">}\n   * </pre>\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name              = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(SolrResourceLoader,NodeList).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(SolrResourceLoader,NodeList).mjava","sourceNew":"  /**\n   * Initializes and registers each plugin in the list.\n   * Given a NodeList from XML in the form:\n   * <pre class=\"prettyprint\">\n   * {@code\n   * <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   * </plugins>}\n   * </pre>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   * <pre class=\"prettyprint\">\n   * {@code\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">}\n   * </pre>\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","sourceOld":"  /**\n   * Initializes and registers each plugin in the list.\n   * Given a NodeList from XML in the form:\n   * <pre class=\"prettyprint\">\n   * {@code\n   * <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   * </plugins>}\n   * </pre>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   * <pre class=\"prettyprint\">\n   * {@code\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">}\n   * </pre>\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name              = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(SolrResourceLoader,NodeList).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(SolrResourceLoader,NodeList).mjava","sourceNew":"  /**\n   * Initializes and registers each plugin in the list.\n   * Given a NodeList from XML in the form:\n   * <pre class=\"prettyprint\">\n   * {@code\n   * <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   * </plugins>}\n   * </pre>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   * <pre class=\"prettyprint\">\n   * {@code\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">}\n   * </pre>\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","sourceOld":"  /**\n   * Initializes and registers each plugin in the list.\n   * Given a NodeList from XML in the form:\n   * <pre class=\"prettyprint\">\n   * {@code\n   * <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   * </plugins>}\n   * </pre>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   * <pre class=\"prettyprint\">\n   * {@code\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">}\n   * </pre>\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name              = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c24804758d67429e3055070a9fe970d4f159954","date":1565508925,"type":3,"author":"Tomoko Uchida","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(SolrResourceLoader,NodeList).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(SolrResourceLoader,NodeList).mjava","sourceNew":"  /**\n   * Initializes and registers each plugin in the list.\n   * Given a NodeList from XML in the form:\n   * <pre class=\"prettyprint\">\n   * {@code\n   * <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   * </plugins>}\n   * </pre>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   * <pre class=\"prettyprint\">\n   * {@code\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">}\n   * </pre>\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n          String className  = DOMUtil.getAttr(node,\"class\", null);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n\n          if (Objects.isNull(className) && Objects.isNull(name)) {\n            throw new RuntimeException(type + \": missing mandatory attribute 'class' or 'name'\");\n          }\n\n          T plugin = create(loader, name, className, node);\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","sourceOld":"  /**\n   * Initializes and registers each plugin in the list.\n   * Given a NodeList from XML in the form:\n   * <pre class=\"prettyprint\">\n   * {@code\n   * <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   * </plugins>}\n   * </pre>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   * <pre class=\"prettyprint\">\n   * {@code\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">}\n   * </pre>\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(SolrResourceLoader,NodeList).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(SolrResourceLoader,NodeList).mjava","sourceNew":"  /**\n   * Initializes and registers each plugin in the list.\n   * Given a NodeList from XML in the form:\n   * <pre class=\"prettyprint\">\n   * {@code\n   * <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   * </plugins>}\n   * </pre>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   * <pre class=\"prettyprint\">\n   * {@code\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">}\n   * </pre>\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n          String className  = DOMUtil.getAttr(node,\"class\", null);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n\n          if (Objects.isNull(className) && Objects.isNull(name)) {\n            throw new RuntimeException(type + \": missing mandatory attribute 'class' or 'name'\");\n          }\n\n          T plugin = create(loader, name, className, node);\n          if (log.isDebugEnabled()) {\n            log.debug(\"created {}: {}\", ((name != null) ? name : \"\"), plugin.getClass().getName());\n          }\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","sourceOld":"  /**\n   * Initializes and registers each plugin in the list.\n   * Given a NodeList from XML in the form:\n   * <pre class=\"prettyprint\">\n   * {@code\n   * <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   * </plugins>}\n   * </pre>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   * <pre class=\"prettyprint\">\n   * {@code\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">}\n   * </pre>\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n          String className  = DOMUtil.getAttr(node,\"class\", null);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n\n          if (Objects.isNull(className) && Objects.isNull(name)) {\n            throw new RuntimeException(type + \": missing mandatory attribute 'class' or 'name'\");\n          }\n\n          T plugin = create(loader, name, className, node);\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2ed9b72e5fa27a7bd4857f222ca815341979d4a","date":1594879524,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(SolrClassLoader,NodeList).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(SolrResourceLoader,NodeList).mjava","sourceNew":"  /**\n   * Initializes and registers each plugin in the list.\n   * Given a NodeList from XML in the form:\n   * <pre class=\"prettyprint\">\n   * {@code\n   * <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   * </plugins>}\n   * </pre>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   * <pre class=\"prettyprint\">\n   * {@code\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">}\n   * </pre>\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load(SolrClassLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n          String className  = DOMUtil.getAttr(node,\"class\", null);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n\n          if (Objects.isNull(className) && Objects.isNull(name)) {\n            throw new RuntimeException(type + \": missing mandatory attribute 'class' or 'name'\");\n          }\n\n          T plugin = create(loader, name, className, node);\n          if (log.isDebugEnabled()) {\n            log.debug(\"created {}: {}\", ((name != null) ? name : \"\"), plugin.getClass().getName());\n          }\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","sourceOld":"  /**\n   * Initializes and registers each plugin in the list.\n   * Given a NodeList from XML in the form:\n   * <pre class=\"prettyprint\">\n   * {@code\n   * <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   * </plugins>}\n   * </pre>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   * <pre class=\"prettyprint\">\n   * {@code\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">}\n   * </pre>\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n          String className  = DOMUtil.getAttr(node,\"class\", null);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n\n          if (Objects.isNull(className) && Objects.isNull(name)) {\n            throw new RuntimeException(type + \": missing mandatory attribute 'class' or 'name'\");\n          }\n\n          T plugin = create(loader, name, className, node);\n          if (log.isDebugEnabled()) {\n            log.debug(\"created {}: {}\", ((name != null) ? name : \"\"), plugin.getClass().getName());\n          }\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["124e3f7e11a7f7f24a209763dbff8f43b69ae82e"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["2c24804758d67429e3055070a9fe970d4f159954"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"2c24804758d67429e3055070a9fe970d4f159954":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c028362918f0b06bbdb243dfd35486218b89dbde"],"c028362918f0b06bbdb243dfd35486218b89dbde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","1390137e395d2f07f9ba5b8c43d293befe84d563"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c028362918f0b06bbdb243dfd35486218b89dbde"],"124e3f7e11a7f7f24a209763dbff8f43b69ae82e":["c028362918f0b06bbdb243dfd35486218b89dbde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"2c24804758d67429e3055070a9fe970d4f159954":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c028362918f0b06bbdb243dfd35486218b89dbde":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","124e3f7e11a7f7f24a209763dbff8f43b69ae82e"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["2c24804758d67429e3055070a9fe970d4f159954","d2638f781be724518ff6c2263d14a48cf6e68017"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","c028362918f0b06bbdb243dfd35486218b89dbde","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"124e3f7e11a7f7f24a209763dbff8f43b69ae82e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","d2638f781be724518ff6c2263d14a48cf6e68017","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}