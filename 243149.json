{"path":"lucene/core/src/java/org/apache/lucene/analysis/CharArrayMap#[V]_copy(Map[#,#-extends-V]).mjava","commits":[{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/CharArrayMap#[V]_copy(Map[#,#-extends-V]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayMap#[V]_copy(Map[#,#-extends-V]).mjava","sourceNew":"  /**\n   * Returns a copy of the given map as a {@link CharArrayMap}. If the given map\n   * is a {@link CharArrayMap} the ignoreCase property will be preserved.\n   * \n   * @param map\n   *          a map to copy\n   * @return a copy of the given map as a {@link CharArrayMap}. If the given map\n   *         is a {@link CharArrayMap} the ignoreCase property as well as the\n   *         matchVersion will be of the given map will be preserved.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <V> CharArrayMap<V> copy(final Map<?,? extends V> map) {\n    if(map == EMPTY_MAP)\n      return emptyMap();\n    if(map instanceof CharArrayMap) {\n      CharArrayMap<V> m = (CharArrayMap<V>) map;\n      // use fast path instead of iterating all values\n      // this is even on very small sets ~10 times faster than iterating\n      final char[][] keys = new char[m.keys.length][];\n      System.arraycopy(m.keys, 0, keys, 0, keys.length);\n      final V[] values = (V[]) new Object[m.values.length];\n      System.arraycopy(m.values, 0, values, 0, values.length);\n      m = new CharArrayMap<>(m);\n      m.keys = keys;\n      m.values = values;\n      return m;\n    }\n    return new CharArrayMap<>(map, false);\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of the given map as a {@link CharArrayMap}. If the given map\n   * is a {@link CharArrayMap} the ignoreCase property will be preserved.\n   * \n   * @param map\n   *          a map to copy\n   * @return a copy of the given map as a {@link CharArrayMap}. If the given map\n   *         is a {@link CharArrayMap} the ignoreCase property as well as the\n   *         matchVersion will be of the given map will be preserved.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <V> CharArrayMap<V> copy(final Map<?,? extends V> map) {\n    if(map == EMPTY_MAP)\n      return emptyMap();\n    if(map instanceof CharArrayMap) {\n      CharArrayMap<V> m = (CharArrayMap<V>) map;\n      // use fast path instead of iterating all values\n      // this is even on very small sets ~10 times faster than iterating\n      final char[][] keys = new char[m.keys.length][];\n      System.arraycopy(m.keys, 0, keys, 0, keys.length);\n      final V[] values = (V[]) new Object[m.values.length];\n      System.arraycopy(m.values, 0, values, 0, values.length);\n      m = new CharArrayMap<>(m);\n      m.keys = keys;\n      m.values = values;\n      return m;\n    }\n    return new CharArrayMap<>(map, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/CharArrayMap#[V]_copy(Map[#,#-extends-V]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayMap#[V]_copy(Map[#,#-extends-V]).mjava","sourceNew":"  /**\n   * Returns a copy of the given map as a {@link CharArrayMap}. If the given map\n   * is a {@link CharArrayMap} the ignoreCase property will be preserved.\n   * \n   * @param map\n   *          a map to copy\n   * @return a copy of the given map as a {@link CharArrayMap}. If the given map\n   *         is a {@link CharArrayMap} the ignoreCase property as well as the\n   *         matchVersion will be of the given map will be preserved.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <V> CharArrayMap<V> copy(final Map<?,? extends V> map) {\n    if(map == EMPTY_MAP)\n      return emptyMap();\n    if(map instanceof CharArrayMap) {\n      CharArrayMap<V> m = (CharArrayMap<V>) map;\n      // use fast path instead of iterating all values\n      // this is even on very small sets ~10 times faster than iterating\n      final char[][] keys = new char[m.keys.length][];\n      System.arraycopy(m.keys, 0, keys, 0, keys.length);\n      final V[] values = (V[]) new Object[m.values.length];\n      System.arraycopy(m.values, 0, values, 0, values.length);\n      m = new CharArrayMap<>(m);\n      m.keys = keys;\n      m.values = values;\n      return m;\n    }\n    return new CharArrayMap<>(map, false);\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of the given map as a {@link CharArrayMap}. If the given map\n   * is a {@link CharArrayMap} the ignoreCase property will be preserved.\n   * \n   * @param map\n   *          a map to copy\n   * @return a copy of the given map as a {@link CharArrayMap}. If the given map\n   *         is a {@link CharArrayMap} the ignoreCase property as well as the\n   *         matchVersion will be of the given map will be preserved.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <V> CharArrayMap<V> copy(final Map<?,? extends V> map) {\n    if(map == EMPTY_MAP)\n      return emptyMap();\n    if(map instanceof CharArrayMap) {\n      CharArrayMap<V> m = (CharArrayMap<V>) map;\n      // use fast path instead of iterating all values\n      // this is even on very small sets ~10 times faster than iterating\n      final char[][] keys = new char[m.keys.length][];\n      System.arraycopy(m.keys, 0, keys, 0, keys.length);\n      final V[] values = (V[]) new Object[m.values.length];\n      System.arraycopy(m.values, 0, values, 0, values.length);\n      m = new CharArrayMap<>(m);\n      m.keys = keys;\n      m.values = values;\n      return m;\n    }\n    return new CharArrayMap<>(map, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}