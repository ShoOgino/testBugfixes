{"path":"solr/core/src/test/org/apache/solr/servlet/ResponseHeaderTest#testSetHttpHeader().mjava","commits":[{"id":"992ee8958a5e702ec8978e61bea29908023389ad","date":1399584397,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/ResponseHeaderTest#testSetHttpHeader().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSetHttpHeader() {\n    SolrQueryResponse response = new SolrQueryResponse();\n    Iterator<Entry<String, String>> it = response.httpHeaders();\n    assertFalse(it.hasNext());\n    \n    response.setHttpHeader(\"key1\", \"value1\");\n    it = response.httpHeaders();\n    assertTrue(it.hasNext());\n    Entry<String, String> entry = it.next();\n    assertEquals(\"key1\", entry.getKey());\n    assertEquals(\"value1\", entry.getValue());\n    assertFalse(it.hasNext());\n    \n    response.setHttpHeader(\"key1\", \"value2\");\n    it = response.httpHeaders();\n    assertTrue(it.hasNext());\n    entry = it.next();\n    assertEquals(\"key1\", entry.getKey());\n    assertEquals(\"value2\", entry.getValue());\n    assertFalse(it.hasNext());\n    \n    response.addHttpHeader(\"key1\", \"value3\");\n    response.setHttpHeader(\"key1\", \"value4\");\n    it = response.httpHeaders();\n    assertTrue(it.hasNext());\n    entry = it.next();\n    assertEquals(\"key1\", entry.getKey());\n    assertEquals(\"value4\", entry.getValue());\n    assertFalse(it.hasNext());\n    \n    response.setHttpHeader(\"key2\", \"value5\");\n    it = response.httpHeaders();\n    assertTrue(it.hasNext());\n    entry = it.next();\n    assertEquals(\"key1\", entry.getKey());\n    assertEquals(\"value4\", entry.getValue());\n    assertTrue(it.hasNext());\n    entry = it.next();\n    assertEquals(\"key2\", entry.getKey());\n    assertEquals(\"value5\", entry.getValue());\n    assertFalse(it.hasNext());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a61db381110025f8c1e2dd7d9f0861599c97a4bc","date":1449768113,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestSolrQueryResponse#testSetHttpHeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/ResponseHeaderTest#testSetHttpHeader().mjava","sourceNew":"  @Test\n  public void testSetHttpHeader() {\n    SolrQueryResponse response = new SolrQueryResponse();\n    Iterator<Entry<String, String>> it = response.httpHeaders();\n    assertFalse(it.hasNext());\n    \n    response.setHttpHeader(\"key1\", \"value1\");\n    it = response.httpHeaders();\n    assertTrue(it.hasNext());\n    Entry<String, String> entry = it.next();\n    assertEquals(\"key1\", entry.getKey());\n    assertEquals(\"value1\", entry.getValue());\n    assertFalse(it.hasNext());\n    \n    response.setHttpHeader(\"key1\", \"value2\");\n    it = response.httpHeaders();\n    assertTrue(it.hasNext());\n    entry = it.next();\n    assertEquals(\"key1\", entry.getKey());\n    assertEquals(\"value2\", entry.getValue());\n    assertFalse(it.hasNext());\n    \n    response.addHttpHeader(\"key1\", \"value3\");\n    response.setHttpHeader(\"key1\", \"value4\");\n    it = response.httpHeaders();\n    assertTrue(it.hasNext());\n    entry = it.next();\n    assertEquals(\"key1\", entry.getKey());\n    assertEquals(\"value4\", entry.getValue());\n    assertFalse(it.hasNext());\n    \n    response.setHttpHeader(\"key2\", \"value5\");\n    it = response.httpHeaders();\n    assertTrue(it.hasNext());\n    entry = it.next();\n    assertEquals(\"key1\", entry.getKey());\n    assertEquals(\"value4\", entry.getValue());\n    assertTrue(it.hasNext());\n    entry = it.next();\n    assertEquals(\"key2\", entry.getKey());\n    assertEquals(\"value5\", entry.getValue());\n    assertFalse(it.hasNext());\n  }\n\n","sourceOld":"  @Test\n  public void testSetHttpHeader() {\n    SolrQueryResponse response = new SolrQueryResponse();\n    Iterator<Entry<String, String>> it = response.httpHeaders();\n    assertFalse(it.hasNext());\n    \n    response.setHttpHeader(\"key1\", \"value1\");\n    it = response.httpHeaders();\n    assertTrue(it.hasNext());\n    Entry<String, String> entry = it.next();\n    assertEquals(\"key1\", entry.getKey());\n    assertEquals(\"value1\", entry.getValue());\n    assertFalse(it.hasNext());\n    \n    response.setHttpHeader(\"key1\", \"value2\");\n    it = response.httpHeaders();\n    assertTrue(it.hasNext());\n    entry = it.next();\n    assertEquals(\"key1\", entry.getKey());\n    assertEquals(\"value2\", entry.getValue());\n    assertFalse(it.hasNext());\n    \n    response.addHttpHeader(\"key1\", \"value3\");\n    response.setHttpHeader(\"key1\", \"value4\");\n    it = response.httpHeaders();\n    assertTrue(it.hasNext());\n    entry = it.next();\n    assertEquals(\"key1\", entry.getKey());\n    assertEquals(\"value4\", entry.getValue());\n    assertFalse(it.hasNext());\n    \n    response.setHttpHeader(\"key2\", \"value5\");\n    it = response.httpHeaders();\n    assertTrue(it.hasNext());\n    entry = it.next();\n    assertEquals(\"key1\", entry.getKey());\n    assertEquals(\"value4\", entry.getValue());\n    assertTrue(it.hasNext());\n    entry = it.next();\n    assertEquals(\"key2\", entry.getKey());\n    assertEquals(\"value5\", entry.getValue());\n    assertFalse(it.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"992ee8958a5e702ec8978e61bea29908023389ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a61db381110025f8c1e2dd7d9f0861599c97a4bc":["992ee8958a5e702ec8978e61bea29908023389ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a61db381110025f8c1e2dd7d9f0861599c97a4bc"]},"commit2Childs":{"992ee8958a5e702ec8978e61bea29908023389ad":["a61db381110025f8c1e2dd7d9f0861599c97a4bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["992ee8958a5e702ec8978e61bea29908023389ad"],"a61db381110025f8c1e2dd7d9f0861599c97a4bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}