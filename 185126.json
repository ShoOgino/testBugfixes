{"path":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        TermDocs td = pr.termDocs();\n\n        TermEnum te = pr.terms();\n        assertTrue(te.next());\n        assertEquals(\"field1:brown\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:fox\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:jumps\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:quick\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:the\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:brown\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:fox\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:jumps\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:quick\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:the\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:dog\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:fox\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:jumps\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:lazy\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:over\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:the\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertFalse(te.next());\n    }\n\n","sourceOld":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        TermDocs td = pr.termDocs();\n\n        TermEnum te = pr.terms();\n        assertTrue(te.next());\n        assertEquals(\"field1:brown\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:fox\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:jumps\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:quick\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:the\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:brown\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:fox\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:jumps\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:quick\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:the\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:dog\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:fox\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:jumps\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:lazy\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:over\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:the\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertFalse(te.next());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits delDocs = pr.getDeletedDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        TermsEnum te = fe.terms();\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = te.docs(delDocs, null);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        te = fe.terms();\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        te = fe.terms();\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","sourceOld":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        TermDocs td = pr.termDocs();\n\n        TermEnum te = pr.terms();\n        assertTrue(te.next());\n        assertEquals(\"field1:brown\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:fox\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:jumps\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:quick\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:the\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:brown\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:fox\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:jumps\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:quick\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:the\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:dog\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:fox\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:jumps\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:lazy\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:over\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:the\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertFalse(te.next());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits delDocs = pr.getDeletedDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        TermsEnum te = fe.terms();\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = te.docs(delDocs, null);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        te = fe.terms();\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        te = fe.terms();\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","sourceOld":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        TermDocs td = pr.termDocs();\n\n        TermEnum te = pr.terms();\n        assertTrue(te.next());\n        assertEquals(\"field1:brown\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:fox\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:jumps\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:quick\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:the\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:brown\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:fox\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:jumps\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:quick\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:the\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:dog\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:fox\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:jumps\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:lazy\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:over\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:the\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertFalse(te.next());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        TermsEnum te = fe.terms();\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = te.docs(liveDocs, null);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        te = fe.terms();\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        te = fe.terms();\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","sourceOld":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits delDocs = pr.getDeletedDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        TermsEnum te = fe.terms();\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = te.docs(delDocs, null);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        te = fe.terms();\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        te = fe.terms();\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        TermsEnum te = fe.terms();\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = te.docs(liveDocs, null);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        te = fe.terms();\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        te = fe.terms();\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","sourceOld":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits delDocs = pr.getDeletedDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        TermsEnum te = fe.terms();\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = te.docs(delDocs, null);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        te = fe.terms();\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        te = fe.terms();\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        TermsEnum te = fe.terms();\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = te.docs(liveDocs, null);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        te = fe.terms();\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        te = fe.terms();\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","sourceOld":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits delDocs = pr.getDeletedDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        TermsEnum te = fe.terms();\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = te.docs(delDocs, null);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        te = fe.terms();\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        te = fe.terms();\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(delDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        Terms terms = fe.terms();\n        TermsEnum te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = te.docs(liveDocs, null);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","sourceOld":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        TermsEnum te = fe.terms();\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = te.docs(liveDocs, null);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        te = fe.terms();\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        te = fe.terms();\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        Terms terms = fe.terms();\n        TermsEnum te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","sourceOld":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        Terms terms = fe.terms();\n        TermsEnum te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = te.docs(liveDocs, null);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        Terms terms = fe.terms();\n        TermsEnum te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","sourceOld":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        Terms terms = fe.terms();\n        TermsEnum te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = te.docs(liveDocs, null);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = te.docs(liveDocs, td);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f27538ed523372d9a94ae0bea6bbeabe226ca45c","date":1327858307,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(new SlowCompositeReaderWrapper(ir1));\n        pr.add(new SlowCompositeReaderWrapper(ir2));\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        Terms terms = fe.terms();\n        TermsEnum te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","sourceOld":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        Terms terms = fe.terms();\n        TermsEnum te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e32cce0ae9c0f432ccb5f8649a16a5a74e6ef92","date":1327858596,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        Terms terms = fe.terms();\n        TermsEnum te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","sourceOld":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(new SlowCompositeReaderWrapper(ir1));\n        pr.add(new SlowCompositeReaderWrapper(ir2));\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        Terms terms = fe.terms();\n        TermsEnum te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b","date":1328624680,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"    public void test1() throws IOException {\n        ParallelAtomicReader pr = new ParallelAtomicReader.Builder().add(ir1).add(ir2).build();\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        Terms terms = fe.terms();\n        TermsEnum te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","sourceOld":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        Terms terms = fe.terms();\n        TermsEnum te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08b385e33541f6749e71618c9ab36fad908a7ed0","date":1328629771,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        Terms terms = fe.terms();\n        TermsEnum te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","sourceOld":"    public void test1() throws IOException {\n        ParallelAtomicReader pr = new ParallelAtomicReader.Builder().add(ir1).add(ir2).build();\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        Terms terms = fe.terms();\n        TermsEnum te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        Terms terms = fe.terms();\n        TermsEnum te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","sourceOld":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        Terms terms = fe.terms();\n        TermsEnum te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08b385e33541f6749e71618c9ab36fad908a7ed0":["9ecf541c11d0df215aa1ea806f826d88fb9b5b9b"],"2e32cce0ae9c0f432ccb5f8649a16a5a74e6ef92":["f27538ed523372d9a94ae0bea6bbeabe226ca45c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["08b385e33541f6749e71618c9ab36fad908a7ed0"],"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"3cc749c053615f5871f3b95715fe292f34e70a53":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["3cc749c053615f5871f3b95715fe292f34e70a53"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","28427ef110c4c5bf5b4057731b83110bd1e13724"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["28427ef110c4c5bf5b4057731b83110bd1e13724","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["28427ef110c4c5bf5b4057731b83110bd1e13724","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["3cc749c053615f5871f3b95715fe292f34e70a53","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f27538ed523372d9a94ae0bea6bbeabe226ca45c":["872cff1d3a554e0cd64014cd97f88d3002b0f491"]},"commit2Childs":{"08b385e33541f6749e71618c9ab36fad908a7ed0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e32cce0ae9c0f432ccb5f8649a16a5a74e6ef92":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b":["08b385e33541f6749e71618c9ab36fad908a7ed0"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["3cc749c053615f5871f3b95715fe292f34e70a53","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"3cc749c053615f5871f3b95715fe292f34e70a53":["872cff1d3a554e0cd64014cd97f88d3002b0f491","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["9ecf541c11d0df215aa1ea806f826d88fb9b5b9b","b65b350ca9588f9fc76ce7d6804160d06c45ff42","f27538ed523372d9a94ae0bea6bbeabe226ca45c"],"5f4e87790277826a2aea119328600dfb07761f32":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","5f4e87790277826a2aea119328600dfb07761f32","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"f27538ed523372d9a94ae0bea6bbeabe226ca45c":["2e32cce0ae9c0f432ccb5f8649a16a5a74e6ef92"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5f4e87790277826a2aea119328600dfb07761f32","28427ef110c4c5bf5b4057731b83110bd1e13724"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2e32cce0ae9c0f432ccb5f8649a16a5a74e6ef92","5f4e87790277826a2aea119328600dfb07761f32","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}