{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","sourceNew":"    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.MAX_VALUE;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.computeDistance(start, x,y,z);\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.computeDistance(thePoint, x, y, z) + distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z);\n    }\n\n","sourceOld":"    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.MAX_VALUE;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.computeDistance(start, x,y,z);\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.computeDistance(thePoint, x, y, z) + distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71849bd31d150133a9a1027bf1607967b406c57","date":1436811056,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","sourceNew":"    /** Compute interior path distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric.\n     */\n    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.MAX_VALUE;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.computeDistance(start, x,y,z);\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.computeDistance(thePoint, x, y, z) + distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z);\n    }\n\n","sourceOld":"    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.MAX_VALUE;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.computeDistance(start, x,y,z);\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.computeDistance(thePoint, x, y, z) + distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.PathSegment#pathDistance(PlanetModel,DistanceStyle,double,double,double).mjava","sourceNew":"    /** Compute interior path distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric.\n     */\n    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.MAX_VALUE;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.computeDistance(start, x,y,z);\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.computeDistance(thePoint, x, y, z) + distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z);\n    }\n\n","sourceOld":"    /** Compute interior path distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric.\n     */\n    public double pathDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.MAX_VALUE;\n\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION)\n        return distanceStyle.computeDistance(start, x,y,z);\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      return distanceStyle.computeDistance(thePoint, x, y, z) + distanceStyle.computeDistance(start, thePoint.x, thePoint.y, thePoint.z);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a71849bd31d150133a9a1027bf1607967b406c57":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e444678504caf66a8060b1d514383aa4feac0c":["a71849bd31d150133a9a1027bf1607967b406c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a71849bd31d150133a9a1027bf1607967b406c57":["b4e444678504caf66a8060b1d514383aa4feac0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a71849bd31d150133a9a1027bf1607967b406c57"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}