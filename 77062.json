{"path":"lucene/backwards/src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","sourceNew":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < TermInfosWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Unknown format version:\" + format + \" expected \" + TermInfosWriter.FORMAT_CURRENT + \" or higher\");\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      } else {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n        if (format <= TermInfosWriter.FORMAT) {\n          // this new format introduces multi-level skipping\n          maxSkipLevels = input.readInt();\n        }\n      }\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n    if (format > TermInfosWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n      termBuffer.setPreUTF8Strings();\n      scanBuffer.setPreUTF8Strings();\n      prevBuffer.setPreUTF8Strings();\n    }\n  }\n\n","sourceOld":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < TermInfosWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Unknown format version:\" + format + \" expected \" + TermInfosWriter.FORMAT_CURRENT + \" or higher\");\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      } else {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n        if (format <= TermInfosWriter.FORMAT) {\n          // this new format introduces multi-level skipping\n          maxSkipLevels = input.readInt();\n        }\n      }\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n    if (format > TermInfosWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n      termBuffer.setPreUTF8Strings();\n      scanBuffer.setPreUTF8Strings();\n      prevBuffer.setPreUTF8Strings();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","sourceNew":null,"sourceOld":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < TermInfosWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Unknown format version:\" + format + \" expected \" + TermInfosWriter.FORMAT_CURRENT + \" or higher\");\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      } else {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n        if (format <= TermInfosWriter.FORMAT) {\n          // this new format introduces multi-level skipping\n          maxSkipLevels = input.readInt();\n        }\n      }\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n    if (format > TermInfosWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n      termBuffer.setPreUTF8Strings();\n      scanBuffer.setPreUTF8Strings();\n      prevBuffer.setPreUTF8Strings();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}