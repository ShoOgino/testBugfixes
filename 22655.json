{"path":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","commits":[{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.StringOrdValComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = termsIndex.getOrd(doc);\n      final int cmp = bottomOrd - order;\n      if (cmp != 0) {\n        return cmp;\n      }\n\n      if (bottomValue == null) {\n        if (order == 0) {\n          // unset\n          return 0;\n        }\n        // bottom wins\n        return -1;\n      } else if (order == 0) {\n        // doc wins\n        return 1;\n      }\n      termsIndex.lookup(order, tempBR);\n      return bottomValue.compareTo(tempBR);\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = this.order[doc];\n      final int cmp = bottomOrd - order;\n      if (cmp != 0) {\n        return cmp;\n      }\n\n      final String val2 = lookup[order];\n      if (bottomValue == null) {\n        if (val2 == null) {\n          return 0;\n        }\n        // bottom wins\n        return -1;\n      } else if (val2 == null) {\n        // doc wins\n        return 1;\n      }\n      return bottomValue.compareTo(val2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eb0f2a9f9f67f7b41226f91f0099edecadd99a6","date":1279015205,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - (int) currentDocToOrd.get(doc);\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n        final int order = (int) currentDocToOrd.get(doc);\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        if (bottomValue == null) {\n          if (order == 0) {\n            // unset\n            return 0;\n          }\n          // bottom wins\n          return -1;\n        } else if (order == 0) {\n          // doc wins\n          return 1;\n        }\n        termsIndex.lookup(order, tempBR);\n        return bottomValue.compareTo(tempBR);\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = termsIndex.getOrd(doc);\n      final int cmp = bottomOrd - order;\n      if (cmp != 0) {\n        return cmp;\n      }\n\n      if (bottomValue == null) {\n        if (order == 0) {\n          // unset\n          return 0;\n        }\n        // bottom wins\n        return -1;\n      } else if (order == 0) {\n        // doc wins\n        return 1;\n      }\n      termsIndex.lookup(order, tempBR);\n      return bottomValue.compareTo(tempBR);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - (int) currentDocToOrd.get(doc);\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n        final int order = (int) currentDocToOrd.get(doc);\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        if (bottomValue == null) {\n          if (order == 0) {\n            // unset\n            return 0;\n          }\n          // bottom wins\n          return -1;\n        } else if (order == 0) {\n          // doc wins\n          return 1;\n        }\n        termsIndex.lookup(order, tempBR);\n        return bottomValue.compareTo(tempBR);\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = termsIndex.getOrd(doc);\n      final int cmp = bottomOrd - order;\n      if (cmp != 0) {\n        return cmp;\n      }\n\n      if (bottomValue == null) {\n        if (order == 0) {\n          // unset\n          return 0;\n        }\n        // bottom wins\n        return -1;\n      } else if (order == 0) {\n        // doc wins\n        return 1;\n      }\n      termsIndex.lookup(order, tempBR);\n      return bottomValue.compareTo(tempBR);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eed5547b2f58afdc475cc06312622f5bcf220c2","date":1284156494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      throw new UnsupportedOperationException();\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - (int) currentDocToOrd.get(doc);\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n        final int order = (int) currentDocToOrd.get(doc);\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        if (bottomValue == null) {\n          if (order == 0) {\n            // unset\n            return 0;\n          }\n          // bottom wins\n          return -1;\n        } else if (order == 0) {\n          // doc wins\n          return 1;\n        }\n        termsIndex.lookup(order, tempBR);\n        return bottomValue.compareTo(tempBR);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      throw new UnsupportedOperationException();\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - (int) currentDocToOrd.get(doc);\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n        final int order = (int) currentDocToOrd.get(doc);\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        if (bottomValue == null) {\n          if (order == 0) {\n            // unset\n            return 0;\n          }\n          // bottom wins\n          return -1;\n        } else if (order == 0) {\n          // doc wins\n          return 1;\n        }\n        termsIndex.lookup(order, tempBR);\n        return bottomValue.compareTo(tempBR);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      throw new UnsupportedOperationException();\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      throw new UnsupportedOperationException();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9eed5547b2f58afdc475cc06312622f5bcf220c2"],"9eb0f2a9f9f67f7b41226f91f0099edecadd99a6":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","9eb0f2a9f9f67f7b41226f91f0099edecadd99a6"],"9eed5547b2f58afdc475cc06312622f5bcf220c2":["9eb0f2a9f9f67f7b41226f91f0099edecadd99a6"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","9eed5547b2f58afdc475cc06312622f5bcf220c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["9eb0f2a9f9f67f7b41226f91f0099edecadd99a6","5f4e87790277826a2aea119328600dfb07761f32"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9eb0f2a9f9f67f7b41226f91f0099edecadd99a6":["5f4e87790277826a2aea119328600dfb07761f32","9eed5547b2f58afdc475cc06312622f5bcf220c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9eed5547b2f58afdc475cc06312622f5bcf220c2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}