{"path":"src/java/org/apache/solr/analysis/SynonymMap#add(List,List,boolean,boolean).mjava","commits":[{"id":"bd72c170d0045d244f19bc40f18b517f56fbf9c9","date":1138916232,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/SynonymMap#add(List,List,boolean,boolean).mjava","pathOld":"src/lucene_extras/org/apache/lucene/analysis/SynonymMap#add(List,List,boolean,boolean).mjava","sourceNew":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List singleMatch, List replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (Iterator iter = singleMatch.iterator(); iter.hasNext();) {\n      String str = (String)iter.next();\n      if (currMap.submap==null) {\n        currMap.submap = new HashMap(1);\n      }\n\n      SynonymMap map = (SynonymMap)currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = (Token[])superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","sourceOld":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List singleMatch, List replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (Iterator iter = singleMatch.iterator(); iter.hasNext();) {\n      String str = (String)iter.next();\n      if (currMap.submap==null) {\n        currMap.submap = new HashMap(1);\n      }\n\n      SynonymMap map = (SynonymMap)currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = (Token[])superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac","date":1201149698,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/SynonymMap#add(List[String],List[Token],boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/analysis/SynonymMap#add(List,List,boolean,boolean).mjava","sourceNew":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List<String> singleMatch, List<Token> replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (String str : singleMatch) {\n      if (currMap.submap==null) {\n        currMap.submap = new CharArrayMap<SynonymMap>(1, ignoreCase());\n      }\n\n      SynonymMap map = currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        map.flags |= flags & IGNORE_CASE;\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = (Token[])superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","sourceOld":"  /**\n   * @param singleMatch  List<String>, the sequence of strings to match\n   * @param replacement  List<Token> the list of tokens to use on a match\n   * @param includeOrig  sets a flag on this mapping signaling the generation of matched tokens in addition to the replacement tokens\n   * @param mergeExisting merge the replacement tokens with any other mappings that exist\n   */\n  public void add(List singleMatch, List replacement, boolean includeOrig, boolean mergeExisting) {\n    SynonymMap currMap = this;\n    for (Iterator iter = singleMatch.iterator(); iter.hasNext();) {\n      String str = (String)iter.next();\n      if (currMap.submap==null) {\n        currMap.submap = new HashMap(1);\n      }\n\n      SynonymMap map = (SynonymMap)currMap.submap.get(str);\n      if (map==null) {\n        map = new SynonymMap();\n        currMap.submap.put(str, map);\n      }\n\n      currMap = map;\n    }\n\n    if (currMap.synonyms != null && !mergeExisting) {\n      throw new RuntimeException(\"SynonymFilter: there is already a mapping for \" + singleMatch);\n    }\n    List superset = currMap.synonyms==null ? replacement :\n          mergeTokens(Arrays.asList(currMap.synonyms), replacement);\n    currMap.synonyms = (Token[])superset.toArray(new Token[superset.size()]);\n    if (includeOrig) currMap.flags |= INCLUDE_ORIG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd72c170d0045d244f19bc40f18b517f56fbf9c9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac":["bd72c170d0045d244f19bc40f18b517f56fbf9c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"bd72c170d0045d244f19bc40f18b517f56fbf9c9":["92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac"],"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["bd72c170d0045d244f19bc40f18b517f56fbf9c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}