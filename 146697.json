{"path":"src/java/org/apache/lucene/search/MultiSearcher#search(QueryWeight,Filter,int).mjava","commits":[{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(QueryWeight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","sourceNew":"  public TopDocs search(QueryWeight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(weight, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        ScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if(!hq.insert(scoreDoc))\n          break;                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","sourceOld":"  public TopDocs search(Weight weight, Filter filter, int nDocs)\n  throws IOException {\n\n    HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(weight, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n\tScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if(!hq.insert(scoreDoc))\n            break;                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(QueryWeight,Filter,int).mjava","sourceNew":"  public TopDocs search(Weight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(weight, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        ScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if(!hq.insert(scoreDoc))\n          break;                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","sourceOld":"  public TopDocs search(QueryWeight weight, Filter filter, int nDocs)\n      throws IOException {\n\n    HitQueue hq = new HitQueue(nDocs, false);\n    int totalHits = 0;\n\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      TopDocs docs = searchables[i].search(weight, filter, nDocs);\n      totalHits += docs.totalHits;\t\t  // update totalHits\n      ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        ScoreDoc scoreDoc = scoreDocs[j];\n        scoreDoc.doc += starts[i];                // convert doc\n        if(!hq.insert(scoreDoc))\n          break;                                // no more scores > minScore\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = (ScoreDoc)hq.pop();\n    \n    float maxScore = (totalHits==0) ? Float.NEGATIVE_INFINITY : scoreDocs[0].score;\n    \n    return new TopDocs(totalHits, scoreDocs, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe941135bdfc28c81e20b4d21422f8726af34925"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["052fac7830290bd38a04cddee1a121ee07656b56"],"fe941135bdfc28c81e20b4d21422f8726af34925":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}