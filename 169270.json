{"path":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SloppyDocScorer).mjava","commits":[{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SloppyDocScorer).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","sourceNew":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity.SloppyDocScorer docScorer) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(weight);\n    this.similarity = similarity;\n    this.norms = norms;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SloppyDocScorer).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","sourceNew":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity.SloppyDocScorer docScorer) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(weight);\n    this.similarity = similarity;\n    this.norms = norms;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SloppyDocScorer).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","sourceNew":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity.SloppyDocScorer docScorer) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(weight);\n    this.similarity = similarity;\n    this.norms = norms;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9ff635e6838a2facda02727dec5b77d9e64dc4c","date":1316672863,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SloppyDocScorer).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SloppyDocScorer).mjava","sourceNew":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity.SloppyDocScorer docScorer) {\n    super(weight);\n    this.docScorer = docScorer;\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    if (postings.length > 0) {\n      min = new PhrasePositions(postings[0].postings, postings[0].position, 0);\n      max = min;\n      max.doc = -1;\n      for (int i = 1; i < postings.length; i++) {\n        PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n        max.next = pp;\n        max = pp;\n        max.doc = -1;\n      }\n      max.next = min; // make it cyclic for easier manipulation\n    }\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity.SloppyDocScorer docScorer) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","bugFix":["f0852ebe96f807ea1c84a88f9aaa4985a2088594","0f3cee3d20b0c786e6fca20539454262e29edcab","955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"660345363f16c7d4c38aa11a35bf59aa99466cf1","date":1328227279,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SloppySimScorer).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SloppyDocScorer).mjava","sourceNew":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity.SloppySimScorer docScorer) {\n    super(weight);\n    this.docScorer = docScorer;\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    if (postings.length > 0) {\n      min = new PhrasePositions(postings[0].postings, postings[0].position, 0);\n      max = min;\n      max.doc = -1;\n      for (int i = 1; i < postings.length; i++) {\n        PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n        max.next = pp;\n        max = pp;\n        max.doc = -1;\n      }\n      max.next = min; // make it cyclic for easier manipulation\n    }\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity.SloppyDocScorer docScorer) {\n    super(weight);\n    this.docScorer = docScorer;\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    if (postings.length > 0) {\n      min = new PhrasePositions(postings[0].postings, postings[0].position, 0);\n      max = min;\n      max.doc = -1;\n      for (int i = 1; i < postings.length; i++) {\n        PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n        max.next = pp;\n        max = pp;\n        max.doc = -1;\n      }\n      max.next = min; // make it cyclic for easier manipulation\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f3cee3d20b0c786e6fca20539454262e29edcab"],"660345363f16c7d4c38aa11a35bf59aa99466cf1":["c9ff635e6838a2facda02727dec5b77d9e64dc4c"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f3cee3d20b0c786e6fca20539454262e29edcab"],"c9ff635e6838a2facda02727dec5b77d9e64dc4c":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["660345363f16c7d4c38aa11a35bf59aa99466cf1"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","c9ff635e6838a2facda02727dec5b77d9e64dc4c"],"660345363f16c7d4c38aa11a35bf59aa99466cf1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"c9ff635e6838a2facda02727dec5b77d9e64dc4c":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1291e4568eb7d9463d751627596ef14baf4c1603","0f3cee3d20b0c786e6fca20539454262e29edcab","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}