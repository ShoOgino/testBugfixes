{"path":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/util/HashedCircularLinkedList#removeByKey(Object).mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/util/HashedCircularLinkedList#removeByKey(Object).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Removes the first occurrence of the specified element in this list.  If\n     * the list does not contain the element, it is unchanged.  More formally,\n     * removes the element with the lowest index <tt>i</tt> such that\n     * <tt>(o==null ? get(i)==null : o.equals(get(i)))</tt> (if such an\n     * element exists).\n     *\n     * @param o element to be removed from this list, if present.\n     * @return <tt>true</tt> if the list contained the specified element.\n     */\n    public boolean removeByKey(Object o)\n    {\n        // assert(o != null)\n        Entry e = (Entry)keys.get(o);\n        if(e != null)\n        {\n            if(e == current)\n            {\n                if(size > 1)\n                {\n                    current = previousEntry(current);\n                }\n                else\n                {\n                    current = null;\n                }\n            }\n            this.removeEntryFromList(e);\n            keys.remove(o);\n            size--;\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/util/HashedCircularLinkedList#removeByKey(Object).mjava","sourceNew":null,"sourceOld":"    /**\n     * Removes the first occurrence of the specified element in this list.  If\n     * the list does not contain the element, it is unchanged.  More formally,\n     * removes the element with the lowest index <tt>i</tt> such that\n     * <tt>(o==null ? get(i)==null : o.equals(get(i)))</tt> (if such an\n     * element exists).\n     *\n     * @param o element to be removed from this list, if present.\n     * @return <tt>true</tt> if the list contained the specified element.\n     */\n    public boolean removeByKey(Object o)\n    {\n        // assert(o != null)\n        Entry e = (Entry)keys.get(o);\n        if(e != null)\n        {\n            if(e == current)\n            {\n                if(size > 1)\n                {\n                    current = previousEntry(current);\n                }\n                else\n                {\n                    current = null;\n                }\n            }\n            this.removeEntryFromList(e);\n            keys.remove(o);\n            size--;\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["05d36e0b328ec96237035fbcca240e73631396e5"],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05d36e0b328ec96237035fbcca240e73631396e5":["afc16d717d9ed1a8e45371668ca6de674164d624"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}