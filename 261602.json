{"path":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#testRanges().mjava","commits":[{"id":"498626195354975ac543d575087c90185d80c813","date":1359301262,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#testRanges().mjava","pathOld":"/dev/null","sourceNew":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    ICUCollationDocValuesField collationField = new ICUCollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = _TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = _TestUtil.randomSimpleString(random());\n      String end = _TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(FieldCacheRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9274621789ce990dbfef455dabdf026bb3184821"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#testRanges().mjava","pathOld":"/dev/null","sourceNew":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    ICUCollationDocValuesField collationField = new ICUCollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = _TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = _TestUtil.randomSimpleString(random());\n      String end = _TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(FieldCacheRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#testRanges().mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#testRanges().mjava","sourceNew":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    ICUCollationDocValuesField collationField = new ICUCollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(FieldCacheRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    ICUCollationDocValuesField collationField = new ICUCollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = _TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = _TestUtil.randomSimpleString(random());\n      String end = _TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(FieldCacheRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#testRanges().mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#testRanges().mjava","sourceNew":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    ICUCollationDocValuesField collationField = new ICUCollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(FieldCacheRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    ICUCollationDocValuesField collationField = new ICUCollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(FieldCacheRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#testRanges().mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#testRanges().mjava","sourceNew":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    ICUCollationDocValuesField collationField = new ICUCollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(DocValuesRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    ICUCollationDocValuesField collationField = new ICUCollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(FieldCacheRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["498626195354975ac543d575087c90185d80c813"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#testRanges().mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#testRanges().mjava","sourceNew":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    ICUCollationDocValuesField collationField = new ICUCollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(DocValuesRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    ICUCollationDocValuesField collationField = new ICUCollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(FieldCacheRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#testRanges().mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#testRanges().mjava","sourceNew":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    ICUCollationDocValuesField collationField = new ICUCollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(DocValuesRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    ICUCollationDocValuesField collationField = new ICUCollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(FieldCacheRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#testRanges().mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#testRanges().mjava","sourceNew":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    ICUCollationDocValuesField collationField = new ICUCollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(DocValuesRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    ICUCollationDocValuesField collationField = new ICUCollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(DocValuesRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"484e80062d7ab2729bc82f0311d6a97dd913961a","date":1424450206,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#testRanges().mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#testRanges().mjava","sourceNew":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    ICUCollationDocValuesField collationField = new ICUCollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = DocValuesRangeQuery.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true);\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    ICUCollationDocValuesField collationField = new ICUCollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = new ConstantScoreQuery(DocValuesRangeFilter.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true));\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fb0efe75e5c6021561f115dfe334b74786364ba","date":1434366074,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#testRanges().mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#testRanges().mjava","sourceNew":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    ICUCollationDocValuesField collationField = new ICUCollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      doTestRanges(is, start, end, lowerVal, upperVal, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    ICUCollationDocValuesField collationField = new ICUCollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      Query query = DocValuesRangeQuery.newBytesRefRange(\"collated\", lowerVal, upperVal, true, true);\n      doTestRanges(is, start, end, query, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7222ccbf51c085332eb28ee772f8dfb65e4d2b01","date":1601887943,"type":5,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUCollationDocValuesField#testRanges().mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#testRanges().mjava","sourceNew":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    ICUCollationDocValuesField collationField = new ICUCollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      doTestRanges(is, start, end, lowerVal, upperVal, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRanges() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", StringField.TYPE_STORED);\n    Collator collator = Collator.getInstance(); // uses -Dtests.locale\n    if (random().nextBoolean()) {\n      collator.setStrength(Collator.PRIMARY);\n    }\n    ICUCollationDocValuesField collationField = new ICUCollationDocValuesField(\"collated\", collator);\n    doc.add(field);\n    doc.add(collationField);\n    \n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      String value = TestUtil.randomSimpleString(random());\n      field.setStringValue(value);\n      collationField.setStringValue(value);\n      iw.addDocument(doc);\n    }\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    int numChecks = atLeast(100);\n    for (int i = 0; i < numChecks; i++) {\n      String start = TestUtil.randomSimpleString(random());\n      String end = TestUtil.randomSimpleString(random());\n      BytesRef lowerVal = new BytesRef(collator.getCollationKey(start).toByteArray());\n      BytesRef upperVal = new BytesRef(collator.getCollationKey(end).toByteArray());\n      doTestRanges(is, start, end, lowerVal, upperVal, collator);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9274621789ce990dbfef455dabdf026bb3184821":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"7222ccbf51c085332eb28ee772f8dfb65e4d2b01":["9fb0efe75e5c6021561f115dfe334b74786364ba"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","498626195354975ac543d575087c90185d80c813"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","9274621789ce990dbfef455dabdf026bb3184821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"498626195354975ac543d575087c90185d80c813":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7222ccbf51c085332eb28ee772f8dfb65e4d2b01"]},"commit2Childs":{"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["9fb0efe75e5c6021561f115dfe334b74786364ba"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"7222ccbf51c085332eb28ee772f8dfb65e4d2b01":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","498626195354975ac543d575087c90185d80c813"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["9274621789ce990dbfef455dabdf026bb3184821","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["7222ccbf51c085332eb28ee772f8dfb65e4d2b01"],"498626195354975ac543d575087c90185d80c813":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}