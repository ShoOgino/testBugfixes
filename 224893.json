{"path":"solr/core/src/test/org/apache/solr/cloud/TestShortCircuitedRequests#doTest().mjava","commits":[{"id":"c0d0eda576bd1392f929c375143ff45503e89192","date":1394979067,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestShortCircuitedRequests#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    waitForRecoveriesToFinish(false);\n    assertEquals(4, cloudClient.getZkStateReader().getClusterState().getCollection(DEFAULT_COLLECTION).getSlices().size());\n    index(\"id\", \"a!doc1\");  // shard3\n    index(\"id\", \"b!doc1\");  // shard1\n    index(\"id\", \"c!doc1\");  // shard2\n    index(\"id\", \"e!doc1\");  // shard4\n    commit();\n\n    doQuery(\"a!doc1\", \"q\", \"*:*\", ShardParams._ROUTE_, \"a!\"); // can go to any random node\n\n    // query shard3 directly with _route_=a! so that we trigger the short circuited request path\n    Replica shard3 = cloudClient.getZkStateReader().getClusterState().getLeader(DEFAULT_COLLECTION, \"shard3\");\n    String nodeName = shard3.getNodeName();\n    SolrServer shard3Client = getClient(nodeName);\n    QueryResponse response = shard3Client.query(new SolrQuery(\"*:*\").add(ShardParams._ROUTE_, \"a!\").add(ShardParams.SHARDS_INFO, \"true\"));\n\n    assertEquals(\"Could not find doc\", 1, response.getResults().getNumFound());\n    NamedList<?> sinfo = (NamedList<?>) response.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"missing shard info for short circuited request\", sinfo);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestShortCircuitedRequests#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestShortCircuitedRequests#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    waitForRecoveriesToFinish(false);\n    assertEquals(4, cloudClient.getZkStateReader().getClusterState().getCollection(DEFAULT_COLLECTION).getSlices().size());\n    index(\"id\", \"a!doc1\");  // shard3\n    index(\"id\", \"b!doc1\");  // shard1\n    index(\"id\", \"c!doc1\");  // shard2\n    index(\"id\", \"e!doc1\");  // shard4\n    commit();\n\n    doQuery(\"a!doc1\", \"q\", \"*:*\", ShardParams._ROUTE_, \"a!\"); // can go to any random node\n\n    // query shard3 directly with _route_=a! so that we trigger the short circuited request path\n    Replica shard3 = cloudClient.getZkStateReader().getClusterState().getLeader(DEFAULT_COLLECTION, \"shard3\");\n    String nodeName = shard3.getNodeName();\n    SolrClient shard3Client = getClient(nodeName);\n    QueryResponse response = shard3Client.query(new SolrQuery(\"*:*\").add(ShardParams._ROUTE_, \"a!\").add(ShardParams.SHARDS_INFO, \"true\"));\n\n    assertEquals(\"Could not find doc\", 1, response.getResults().getNumFound());\n    NamedList<?> sinfo = (NamedList<?>) response.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"missing shard info for short circuited request\", sinfo);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    waitForRecoveriesToFinish(false);\n    assertEquals(4, cloudClient.getZkStateReader().getClusterState().getCollection(DEFAULT_COLLECTION).getSlices().size());\n    index(\"id\", \"a!doc1\");  // shard3\n    index(\"id\", \"b!doc1\");  // shard1\n    index(\"id\", \"c!doc1\");  // shard2\n    index(\"id\", \"e!doc1\");  // shard4\n    commit();\n\n    doQuery(\"a!doc1\", \"q\", \"*:*\", ShardParams._ROUTE_, \"a!\"); // can go to any random node\n\n    // query shard3 directly with _route_=a! so that we trigger the short circuited request path\n    Replica shard3 = cloudClient.getZkStateReader().getClusterState().getLeader(DEFAULT_COLLECTION, \"shard3\");\n    String nodeName = shard3.getNodeName();\n    SolrServer shard3Client = getClient(nodeName);\n    QueryResponse response = shard3Client.query(new SolrQuery(\"*:*\").add(ShardParams._ROUTE_, \"a!\").add(ShardParams.SHARDS_INFO, \"true\"));\n\n    assertEquals(\"Could not find doc\", 1, response.getResults().getNumFound());\n    NamedList<?> sinfo = (NamedList<?>) response.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"missing shard info for short circuited request\", sinfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestShortCircuitedRequests#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestShortCircuitedRequests#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    waitForRecoveriesToFinish(false);\n    assertEquals(4, cloudClient.getZkStateReader().getClusterState().getCollection(DEFAULT_COLLECTION).getSlices().size());\n    index(\"id\", \"a!doc1\");  // shard3\n    index(\"id\", \"b!doc1\");  // shard1\n    index(\"id\", \"c!doc1\");  // shard2\n    index(\"id\", \"e!doc1\");  // shard4\n    commit();\n\n    doQuery(\"a!doc1\", \"q\", \"*:*\", ShardParams._ROUTE_, \"a!\"); // can go to any random node\n\n    // query shard3 directly with _route_=a! so that we trigger the short circuited request path\n    Replica shard3 = cloudClient.getZkStateReader().getClusterState().getLeader(DEFAULT_COLLECTION, \"shard3\");\n    String nodeName = shard3.getNodeName();\n    SolrClient shard3Client = getClient(nodeName);\n    QueryResponse response = shard3Client.query(new SolrQuery(\"*:*\").add(ShardParams._ROUTE_, \"a!\").add(ShardParams.SHARDS_INFO, \"true\"));\n\n    assertEquals(\"Could not find doc\", 1, response.getResults().getNumFound());\n    NamedList<?> sinfo = (NamedList<?>) response.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"missing shard info for short circuited request\", sinfo);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    waitForRecoveriesToFinish(false);\n    assertEquals(4, cloudClient.getZkStateReader().getClusterState().getCollection(DEFAULT_COLLECTION).getSlices().size());\n    index(\"id\", \"a!doc1\");  // shard3\n    index(\"id\", \"b!doc1\");  // shard1\n    index(\"id\", \"c!doc1\");  // shard2\n    index(\"id\", \"e!doc1\");  // shard4\n    commit();\n\n    doQuery(\"a!doc1\", \"q\", \"*:*\", ShardParams._ROUTE_, \"a!\"); // can go to any random node\n\n    // query shard3 directly with _route_=a! so that we trigger the short circuited request path\n    Replica shard3 = cloudClient.getZkStateReader().getClusterState().getLeader(DEFAULT_COLLECTION, \"shard3\");\n    String nodeName = shard3.getNodeName();\n    SolrClient shard3Client = getClient(nodeName);\n    QueryResponse response = shard3Client.query(new SolrQuery(\"*:*\").add(ShardParams._ROUTE_, \"a!\").add(ShardParams.SHARDS_INFO, \"true\"));\n\n    assertEquals(\"Could not find doc\", 1, response.getResults().getNumFound());\n    NamedList<?> sinfo = (NamedList<?>) response.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"missing shard info for short circuited request\", sinfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"abb23fcc2461782ab204e61213240feb77d355aa":["bafca15d8e408346a67f4282ad1143b88023893b"],"c0d0eda576bd1392f929c375143ff45503e89192":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["c0d0eda576bd1392f929c375143ff45503e89192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"]},"commit2Childs":{"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0d0eda576bd1392f929c375143ff45503e89192":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0d0eda576bd1392f929c375143ff45503e89192"],"bafca15d8e408346a67f4282ad1143b88023893b":["abb23fcc2461782ab204e61213240feb77d355aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}