{"path":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","commits":[{"id":"536f6911665ce844b868182b8d0ca107ea0eceab","date":1304957860,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldOptimizedNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldOptimizedNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(name);\n      _TestUtil.unzip(getDataFile(\"index.\" + name + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), VERBOSE ? System.out : null, false)\n        .upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldOptimizedNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldOptimizedNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(name);\n      _TestUtil.unzip(getDataFile(\"index.\" + name + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), VERBOSE ? System.out : null, false)\n        .upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldOptimizedNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldOptimizedNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(name);\n      _TestUtil.unzip(getDataFile(\"index.\" + name + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), VERBOSE ? System.out : null, false)\n        .upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","sourceNew":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldOptimizedNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldOptimizedNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(name);\n      _TestUtil.unzip(getDataFile(\"index.\" + name + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), VERBOSE ? System.out : null, false)\n        .upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldOptimizedNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldOptimizedNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(name);\n      _TestUtil.unzip(getDataFile(\"index.\" + name + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), VERBOSE ? System.out : null, false)\n        .upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","sourceNew":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldOptimizedNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldOptimizedNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(name);\n      _TestUtil.unzip(getDataFile(\"index.\" + name + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), VERBOSE ? System.out : null, false)\n        .upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldOptimizedNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldOptimizedNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(name);\n      _TestUtil.unzip(getDataFile(\"index.\" + name + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), VERBOSE ? System.out : null, false)\n        .upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","sourceNew":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldOptimizedNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldOptimizedNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(name);\n      _TestUtil.unzip(getDataFile(\"index.\" + name + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), VERBOSE ? System.out : null, false)\n        .upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldOptimizedNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldOptimizedNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(name);\n      _TestUtil.unzip(getDataFile(\"index.\" + name + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), VERBOSE ? System.out : null, false)\n        .upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n\n      _TestUtil.checkIndex(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","sourceNew":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldOptimizedNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldOptimizedNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(name);\n      _TestUtil.unzip(getDataFile(\"index.\" + name + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), false)\n        .upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldOptimizedNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldOptimizedNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(name);\n      _TestUtil.unzip(getDataFile(\"index.\" + name + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), VERBOSE ? System.out : null, false)\n        .upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","sourceNew":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(name);\n      _TestUtil.unzip(getDataFile(\"index.\" + name + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), false)\n        .upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldOptimizedNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldOptimizedNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(name);\n      _TestUtil.unzip(getDataFile(\"index.\" + name + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), false)\n        .upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","sourceNew":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n\n      new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), false)\n        .upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      File oldIndxeDir = _TestUtil.getTempDir(name);\n      _TestUtil.unzip(getDataFile(\"index.\" + name + \".zip\"), oldIndxeDir);\n      Directory dir = newFSDirectory(oldIndxeDir);\n\n      new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), false)\n        .upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","sourceNew":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n\n      new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), false)\n        .upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n\n      new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), false)\n        .upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["536f6911665ce844b868182b8d0ca107ea0eceab"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"06584e6e98d592b34e1329b384182f368d2025e8":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","536f6911665ce844b868182b8d0ca107ea0eceab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","536f6911665ce844b868182b8d0ca107ea0eceab"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"536f6911665ce844b868182b8d0ca107ea0eceab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","06584e6e98d592b34e1329b384182f368d2025e8","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","536f6911665ce844b868182b8d0ca107ea0eceab"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"536f6911665ce844b868182b8d0ca107ea0eceab":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}