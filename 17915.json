{"path":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","commits":[{"id":"e0b950aef8cdf4606d480e28ea17bd870b93c81e","date":1060680143,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"/dev/null","sourceNew":"  final synchronized void doClose() throws IOException {\n    if (deletedDocsDirty) {\n      synchronized (directory) {\t\t  // in- & inter-process sync\n\tnew Lock.With(directory.makeLock(\"commit.lock\")) {\n\t    public Object doBody() throws IOException {\n\t      deletedDocs.write(directory, segment + \".tmp\");\n\t      directory.renameFile(segment + \".tmp\", segment + \".del\");\n              directory.touchFile(\"segments\");\n\t      return null;\n\t    }\n\t  }.run();\n      }\n      deletedDocsDirty = false;\n    }\n\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n\n    if (closeDirectory)\n      directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"693a4c06f749274d170a2e87d4afb2709a810f46","date":1060700703,"type":3,"author":"Scott Ganyo","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  final synchronized void doClose() throws IOException {\n    if (deletedDocsDirty) {\n      synchronized (directory) {\t\t  // in- & inter-process sync\n\tnew Lock.With(directory.makeLock(\"commit.lock\"), IndexWriter.COMMIT_LOCK_TIMEOUT) {\n\t    public Object doBody() throws IOException {\n\t      deletedDocs.write(directory, segment + \".tmp\");\n\t      directory.renameFile(segment + \".tmp\", segment + \".del\");\n              directory.touchFile(\"segments\");\n\t      return null;\n\t    }\n\t  }.run();\n      }\n      deletedDocsDirty = false;\n    }\n\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n\n    if (closeDirectory)\n      directory.close();\n  }\n\n","sourceOld":"  final synchronized void doClose() throws IOException {\n    if (deletedDocsDirty) {\n      synchronized (directory) {\t\t  // in- & inter-process sync\n\tnew Lock.With(directory.makeLock(\"commit.lock\")) {\n\t    public Object doBody() throws IOException {\n\t      deletedDocs.write(directory, segment + \".tmp\");\n\t      directory.renameFile(segment + \".tmp\", segment + \".del\");\n              directory.touchFile(\"segments\");\n\t      return null;\n\t    }\n\t  }.run();\n      }\n      deletedDocsDirty = false;\n    }\n\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n\n    if (closeDirectory)\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":3,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  final synchronized void doClose() throws IOException {\n    if (deletedDocsDirty) {\n      synchronized (directory) {\t\t  // in- & inter-process sync\n        new Lock.With(directory.makeLock(\"commit.lock\"), IndexWriter.COMMIT_LOCK_TIMEOUT) {\n            public Object doBody() throws IOException {\n              deletedDocs.write(directory, segment + \".tmp\");\n              directory.renameFile(segment + \".tmp\", segment + \".del\");\n              directory.touchFile(\"segments\");\n              return null;\n            }\n          }.run();\n      }\n      deletedDocsDirty = false;\n    }\n\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n    \n    if (cfsReader != null)\n      cfsReader.close();\n\n    if (closeDirectory)\n      directory.close();\n  }\n\n","sourceOld":"  final synchronized void doClose() throws IOException {\n    if (deletedDocsDirty) {\n      synchronized (directory) {\t\t  // in- & inter-process sync\n\tnew Lock.With(directory.makeLock(\"commit.lock\"), IndexWriter.COMMIT_LOCK_TIMEOUT) {\n\t    public Object doBody() throws IOException {\n\t      deletedDocs.write(directory, segment + \".tmp\");\n\t      directory.renameFile(segment + \".tmp\", segment + \".del\");\n              directory.touchFile(\"segments\");\n\t      return null;\n\t    }\n\t  }.run();\n      }\n      deletedDocsDirty = false;\n    }\n\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n\n    if (closeDirectory)\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"434ea59dc096623cd1affa6bcf7471b98611cfbd","date":1066055154,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  final synchronized void doClose() throws IOException {\n    if (deletedDocsDirty) {\n      synchronized (directory) {\t\t  // in- & inter-process sync\n        new Lock.With(directory.makeLock(\"IndexWriter.COMMIT_LOCK_NAME\"),\n          IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            deletedDocs.write(directory, segment + \".tmp\");\n            directory.renameFile(segment + \".tmp\", segment + \".del\");\n            directory.touchFile(\"segments\");\n            return null;\n          }\n        }.run();\n      }\n      deletedDocsDirty = false;\n    }\n\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n\n    if (cfsReader != null)\n      cfsReader.close();\n\n    if (closeDirectory)\n      directory.close();\n  }\n\n","sourceOld":"  final synchronized void doClose() throws IOException {\n    if (deletedDocsDirty) {\n      synchronized (directory) {\t\t  // in- & inter-process sync\n        new Lock.With(directory.makeLock(\"commit.lock\"), IndexWriter.COMMIT_LOCK_TIMEOUT) {\n            public Object doBody() throws IOException {\n              deletedDocs.write(directory, segment + \".tmp\");\n              directory.renameFile(segment + \".tmp\", segment + \".del\");\n              directory.touchFile(\"segments\");\n              return null;\n            }\n          }.run();\n      }\n      deletedDocsDirty = false;\n    }\n\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n    \n    if (cfsReader != null)\n      cfsReader.close();\n\n    if (closeDirectory)\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc97c3750bb1acfa4dc8d7289e664ac0210c4f93","date":1066387782,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  final synchronized void doClose() throws IOException {\n    if (deletedDocsDirty) {\n      synchronized (directory) {\t\t  // in- & inter-process sync\n        new Lock.With(directory.makeLock(IndexWriter.COMMIT_LOCK_NAME),\n          IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            deletedDocs.write(directory, segment + \".tmp\");\n            directory.renameFile(segment + \".tmp\", segment + \".del\");\n            directory.touchFile(\"segments\");\n            return null;\n          }\n        }.run();\n      }\n      deletedDocsDirty = false;\n    }\n\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n\n    if (cfsReader != null)\n      cfsReader.close();\n\n    if (closeDirectory)\n      directory.close();\n  }\n\n","sourceOld":"  final synchronized void doClose() throws IOException {\n    if (deletedDocsDirty) {\n      synchronized (directory) {\t\t  // in- & inter-process sync\n        new Lock.With(directory.makeLock(\"IndexWriter.COMMIT_LOCK_NAME\"),\n          IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            deletedDocs.write(directory, segment + \".tmp\");\n            directory.renameFile(segment + \".tmp\", segment + \".del\");\n            directory.touchFile(\"segments\");\n            return null;\n          }\n        }.run();\n      }\n      deletedDocsDirty = false;\n    }\n\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n\n    if (cfsReader != null)\n      cfsReader.close();\n\n    if (closeDirectory)\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7fb6d70db034a5456ae560175dd1b821eea9ff4","date":1066759157,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  protected final synchronized void doClose() throws IOException {\n    if (deletedDocsDirty) {\n      synchronized (directory()) {\t\t  // in- & inter-process sync\n        new Lock.With(directory().makeLock(IndexWriter.COMMIT_LOCK_NAME),\n          IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            deletedDocs.write(directory(), segment + \".tmp\");\n            directory().renameFile(segment + \".tmp\", segment + \".del\");\n            directory().touchFile(\"segments\");\n            return null;\n          }\n        }.run();\n      }\n      deletedDocsDirty = false;\n    }\n\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n\n    if (cfsReader != null)\n      cfsReader.close();\n\n    if (closeDirectory)\n      directory().close();\n  }\n\n","sourceOld":"  final synchronized void doClose() throws IOException {\n    if (deletedDocsDirty) {\n      synchronized (directory) {\t\t  // in- & inter-process sync\n        new Lock.With(directory.makeLock(IndexWriter.COMMIT_LOCK_NAME),\n          IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            deletedDocs.write(directory, segment + \".tmp\");\n            directory.renameFile(segment + \".tmp\", segment + \".del\");\n            directory.touchFile(\"segments\");\n            return null;\n          }\n        }.run();\n      }\n      deletedDocsDirty = false;\n    }\n\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n\n    if (cfsReader != null)\n      cfsReader.close();\n\n    if (closeDirectory)\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6","date":1069355441,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  protected final synchronized void doClose() throws IOException {\n    if (deletedDocsDirty) {\n      synchronized (directory()) {\t\t  // in- & inter-process sync\n        new Lock.With(directory().makeLock(IndexWriter.COMMIT_LOCK_NAME),\n          IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            deletedDocs.write(directory(), segment + \".tmp\");\n            directory().renameFile(segment + \".tmp\", segment + \".del\");\n            if(segmentInfos != null)\n              segmentInfos.write(directory());\n            else\n              directory().touchFile(\"segments\");\n            return null;\n          }\n        }.run();\n      }\n      deletedDocsDirty = false;\n    }\n\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n\n    if (cfsReader != null)\n      cfsReader.close();\n\n    if (closeDirectory)\n      directory().close();\n  }\n\n","sourceOld":"  protected final synchronized void doClose() throws IOException {\n    if (deletedDocsDirty) {\n      synchronized (directory()) {\t\t  // in- & inter-process sync\n        new Lock.With(directory().makeLock(IndexWriter.COMMIT_LOCK_NAME),\n          IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            deletedDocs.write(directory(), segment + \".tmp\");\n            directory().renameFile(segment + \".tmp\", segment + \".del\");\n            directory().touchFile(\"segments\");\n            return null;\n          }\n        }.run();\n      }\n      deletedDocsDirty = false;\n    }\n\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n\n    if (cfsReader != null)\n      cfsReader.close();\n\n    if (closeDirectory)\n      directory().close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53df68381fe22c8eaf758533d0d5e1db43b925ac","date":1071529482,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  protected final synchronized void doClose() throws IOException {\n    if (deletedDocsDirty || normsDirty) {\n      synchronized (directory()) {\t\t  // in- & inter-process sync\n        new Lock.With(directory().makeLock(IndexWriter.COMMIT_LOCK_NAME),\n          IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n\n            if (deletedDocsDirty) {               // re-write deleted \n              deletedDocs.write(directory(), segment + \".tmp\");\n              directory().renameFile(segment + \".tmp\", segment + \".del\");\n            }\n\n            if (normsDirty) {               // re-write norms \n              Enumeration keys  = norms.keys();\n              Enumeration values  = norms.elements();\n              while (values.hasMoreElements()) {\n                String field = (String)keys.nextElement();\n                Norm norm = (Norm)values.nextElement();\n                if (norm.dirty) {\n                  norm.reWrite(field);\n                }\n              }\n            }\n\n            if(segmentInfos != null)\n              segmentInfos.write(directory());\n            else\n              directory().touchFile(\"segments\");\n            return null;\n          }\n        }.run();\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n    }\n\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n\n    if (cfsReader != null)\n      cfsReader.close();\n\n    if (closeDirectory)\n      directory().close();\n  }\n\n","sourceOld":"  protected final synchronized void doClose() throws IOException {\n    if (deletedDocsDirty) {\n      synchronized (directory()) {\t\t  // in- & inter-process sync\n        new Lock.With(directory().makeLock(IndexWriter.COMMIT_LOCK_NAME),\n          IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n            deletedDocs.write(directory(), segment + \".tmp\");\n            directory().renameFile(segment + \".tmp\", segment + \".del\");\n            if(segmentInfos != null)\n              segmentInfos.write(directory());\n            else\n              directory().touchFile(\"segments\");\n            return null;\n          }\n        }.run();\n      }\n      deletedDocsDirty = false;\n    }\n\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n\n    if (cfsReader != null)\n      cfsReader.close();\n\n    if (closeDirectory)\n      directory().close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  protected final synchronized void doClose() throws IOException {\n    if (deletedDocsDirty || normsDirty) {\n      synchronized (directory()) {\t\t  // in- & inter-process sync\n        new Lock.With(directory().makeLock(IndexWriter.COMMIT_LOCK_NAME),\n                IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n\n            if (deletedDocsDirty) {               // re-write deleted \n              deletedDocs.write(directory(), segment + \".tmp\");\n              directory().renameFile(segment + \".tmp\", segment + \".del\");\n            }\n\n            if (normsDirty) {               // re-write norms \n              Enumeration keys = norms.keys();\n              Enumeration values = norms.elements();\n              while (values.hasMoreElements()) {\n                String field = (String) keys.nextElement();\n                Norm norm = (Norm) values.nextElement();\n                if (norm.dirty) {\n                  norm.reWrite(field);\n                }\n              }\n            }\n\n            if (segmentInfos != null)\n              segmentInfos.write(directory());\n            else\n              directory().touchFile(\"segments\");\n            return null;\n          }\n        }.run();\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n    }\n\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n    if (termVectorsReader != null) termVectorsReader.close();\n\n    if (cfsReader != null)\n      cfsReader.close();\n\n    if (closeDirectory)\n      directory().close();\n  }\n\n","sourceOld":"  protected final synchronized void doClose() throws IOException {\n    if (deletedDocsDirty || normsDirty) {\n      synchronized (directory()) {\t\t  // in- & inter-process sync\n        new Lock.With(directory().makeLock(IndexWriter.COMMIT_LOCK_NAME),\n          IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n\n            if (deletedDocsDirty) {               // re-write deleted \n              deletedDocs.write(directory(), segment + \".tmp\");\n              directory().renameFile(segment + \".tmp\", segment + \".del\");\n            }\n\n            if (normsDirty) {               // re-write norms \n              Enumeration keys  = norms.keys();\n              Enumeration values  = norms.elements();\n              while (values.hasMoreElements()) {\n                String field = (String)keys.nextElement();\n                Norm norm = (Norm)values.nextElement();\n                if (norm.dirty) {\n                  norm.reWrite(field);\n                }\n              }\n            }\n\n            if(segmentInfos != null)\n              segmentInfos.write(directory());\n            else\n              directory().touchFile(\"segments\");\n            return null;\n          }\n        }.run();\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n    }\n\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n\n    if (cfsReader != null)\n      cfsReader.close();\n\n    if (closeDirectory)\n      directory().close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f653aecb322b74d99e6ecdb93765e453a3d7aa71","date":1082107025,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  protected final void doClose() throws IOException {\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n    if (termVectorsReader != null) termVectorsReader.close();\n\n    if (cfsReader != null)\n      cfsReader.close();\n  }\n\n","sourceOld":"  protected final synchronized void doClose() throws IOException {\n    if (deletedDocsDirty || normsDirty) {\n      synchronized (directory()) {\t\t  // in- & inter-process sync\n        new Lock.With(directory().makeLock(IndexWriter.COMMIT_LOCK_NAME),\n                IndexWriter.COMMIT_LOCK_TIMEOUT) {\n          public Object doBody() throws IOException {\n\n            if (deletedDocsDirty) {               // re-write deleted \n              deletedDocs.write(directory(), segment + \".tmp\");\n              directory().renameFile(segment + \".tmp\", segment + \".del\");\n            }\n\n            if (normsDirty) {               // re-write norms \n              Enumeration keys = norms.keys();\n              Enumeration values = norms.elements();\n              while (values.hasMoreElements()) {\n                String field = (String) keys.nextElement();\n                Norm norm = (Norm) values.nextElement();\n                if (norm.dirty) {\n                  norm.reWrite(field);\n                }\n              }\n            }\n\n            if (segmentInfos != null)\n              segmentInfos.write(directory());\n            else\n              directory().touchFile(\"segments\");\n            return null;\n          }\n        }.run();\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n    }\n\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n    if (termVectorsReader != null) termVectorsReader.close();\n\n    if (cfsReader != null)\n      cfsReader.close();\n\n    if (closeDirectory)\n      directory().close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e5d88b55f1b57feab6da94a5c635a224539bd2a","date":1095877947,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  protected void doClose() throws IOException {\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n    if (termVectorsReader != null) termVectorsReader.close();\n\n    if (cfsReader != null)\n      cfsReader.close();\n  }\n\n","sourceOld":"  protected final void doClose() throws IOException {\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n    if (termVectorsReader != null) termVectorsReader.close();\n\n    if (cfsReader != null)\n      cfsReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0","date":1096997448,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  protected void doClose() throws IOException {\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n    \n    if (termVectorsReader != null) \n      termVectorsReader.close();\n\n    if (cfsReader != null)\n      cfsReader.close();\n  }\n\n","sourceOld":"  protected void doClose() throws IOException {\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n    if (termVectorsReader != null) termVectorsReader.close();\n\n    if (cfsReader != null)\n      cfsReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e98927024757b7944e3ab5bf88134d5f7f30600","date":1097059223,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  protected void doClose() throws IOException {\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n    \n    if (termVectorsReaderOrig != null) \n      termVectorsReaderOrig.close();\n\n    if (cfsReader != null)\n      cfsReader.close();\n  }\n\n","sourceOld":"  protected void doClose() throws IOException {\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n    \n    if (termVectorsReader != null) \n      termVectorsReader.close();\n\n    if (cfsReader != null)\n      cfsReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"950f3c7592cb559e2534e5089c78833250e156a3","date":1130557968,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  protected void doClose() throws IOException {\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n\n    if (termVectorsReaderOrig != null)\n      termVectorsReaderOrig.close();\n\n    if (cfsReader != null)\n      cfsReader.close();\n  }\n\n","sourceOld":"  protected void doClose() throws IOException {\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n    \n    if (termVectorsReaderOrig != null) \n      termVectorsReaderOrig.close();\n\n    if (cfsReader != null)\n      cfsReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  protected void doClose() throws IOException {\n    if (fieldsReader != null) {\n      fieldsReader.close();\n    }\n    if (tis != null) {\n      tis.close();\n    }\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n\n    if (termVectorsReaderOrig != null)\n      termVectorsReaderOrig.close();\n\n    if (cfsReader != null)\n      cfsReader.close();\n  }\n\n","sourceOld":"  protected void doClose() throws IOException {\n    fieldsReader.close();\n    tis.close();\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n\n    if (termVectorsReaderOrig != null)\n      termVectorsReaderOrig.close();\n\n    if (cfsReader != null)\n      cfsReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  protected void doClose() throws IOException {\n    if (fieldsReader != null) {\n      fieldsReader.close();\n    }\n    if (tis != null) {\n      tis.close();\n    }\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n\n    if (termVectorsReaderOrig != null)\n      termVectorsReaderOrig.close();\n\n    if (cfsReader != null)\n      cfsReader.close();\n\n    if (storeCFSReader != null)\n      storeCFSReader.close();\n  }\n\n","sourceOld":"  protected void doClose() throws IOException {\n    if (fieldsReader != null) {\n      fieldsReader.close();\n    }\n    if (tis != null) {\n      tis.close();\n    }\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n\n    if (termVectorsReaderOrig != null)\n      termVectorsReaderOrig.close();\n\n    if (cfsReader != null)\n      cfsReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"125b5699f11b58d9be0820c6ce8b1648812902e8","date":1190273227,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  protected void doClose() throws IOException {\n    if (fieldsReader != null) {\n      fieldsReader.close();\n    }\n    if (tis != null) {\n      tis.close();\n    }\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n\n    if (termVectorsReaderOrig != null)\n      termVectorsReaderOrig.close();\n\n    if (cfsReader != null)\n      cfsReader.close();\n\n    if (storeCFSReader != null)\n      storeCFSReader.close();\n    \n    // maybe close directory\n    super.doClose();\n  }\n\n","sourceOld":"  protected void doClose() throws IOException {\n    if (fieldsReader != null) {\n      fieldsReader.close();\n    }\n    if (tis != null) {\n      tis.close();\n    }\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n\n    if (termVectorsReaderOrig != null)\n      termVectorsReaderOrig.close();\n\n    if (cfsReader != null)\n      cfsReader.close();\n\n    if (storeCFSReader != null)\n      storeCFSReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8","date":1195335263,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  protected void doClose() throws IOException {\n    boolean hasReferencedReader = (referencedSegmentReader != null);\n    \n    if (hasReferencedReader) {\n      referencedSegmentReader.decRefReaderNotNorms();\n      referencedSegmentReader = null;\n    }\n\n    deletedDocs = null;\n\n    // close the single norms stream\n    if (singleNormStream != null) {\n      // we can close this stream, even if the norms\n      // are shared, because every reader has it's own \n      // singleNormStream\n      singleNormStream.close();\n      singleNormStream = null;\n    }\n    \n    // re-opened SegmentReaders have their own instance of FieldsReader\n    if (fieldsReader != null) {\n      fieldsReader.close();\n    }\n\n    if (!hasReferencedReader) { \n      // close everything, nothing is shared anymore with other readers\n      if (tis != null) {\n        tis.close();\n      }\n  \n      if (freqStream != null)\n        freqStream.close();\n      if (proxStream != null)\n        proxStream.close();\n  \n      if (termVectorsReaderOrig != null)\n        termVectorsReaderOrig.close();\n  \n      if (cfsReader != null)\n        cfsReader.close();\n  \n      if (storeCFSReader != null)\n        storeCFSReader.close();\n      \n      // maybe close directory\n      super.doClose();\n    }\n  }\n\n","sourceOld":"  protected void doClose() throws IOException {\n    if (fieldsReader != null) {\n      fieldsReader.close();\n    }\n    if (tis != null) {\n      tis.close();\n    }\n\n    if (freqStream != null)\n      freqStream.close();\n    if (proxStream != null)\n      proxStream.close();\n\n    closeNorms();\n\n    if (termVectorsReaderOrig != null)\n      termVectorsReaderOrig.close();\n\n    if (cfsReader != null)\n      cfsReader.close();\n\n    if (storeCFSReader != null)\n      storeCFSReader.close();\n    \n    // maybe close directory\n    super.doClose();\n  }\n\n","bugFix":null,"bugIntro":["82da72b9c5d52216a2200ed11031128bac1dbf36"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"82da72b9c5d52216a2200ed11031128bac1dbf36","date":1221388379,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  protected void doClose() throws IOException {\n    boolean hasReferencedReader = (referencedSegmentReader != null);\n\n    termVectorsLocal.close();\n\n    if (hasReferencedReader) {\n      referencedSegmentReader.decRefReaderNotNorms();\n      referencedSegmentReader = null;\n    }\n\n    deletedDocs = null;\n\n    // close the single norms stream\n    if (singleNormStream != null) {\n      // we can close this stream, even if the norms\n      // are shared, because every reader has it's own \n      // singleNormStream\n      singleNormStream.close();\n      singleNormStream = null;\n    }\n    \n    // re-opened SegmentReaders have their own instance of FieldsReader\n    if (fieldsReader != null) {\n      fieldsReader.close();\n    }\n\n    if (!hasReferencedReader) { \n      // close everything, nothing is shared anymore with other readers\n      if (tis != null) {\n        tis.close();\n      }\n  \n      if (freqStream != null)\n        freqStream.close();\n      if (proxStream != null)\n        proxStream.close();\n  \n      if (termVectorsReaderOrig != null)\n        termVectorsReaderOrig.close();\n  \n      if (cfsReader != null)\n        cfsReader.close();\n  \n      if (storeCFSReader != null)\n        storeCFSReader.close();\n      \n      // maybe close directory\n      super.doClose();\n    }\n  }\n\n","sourceOld":"  protected void doClose() throws IOException {\n    boolean hasReferencedReader = (referencedSegmentReader != null);\n    \n    if (hasReferencedReader) {\n      referencedSegmentReader.decRefReaderNotNorms();\n      referencedSegmentReader = null;\n    }\n\n    deletedDocs = null;\n\n    // close the single norms stream\n    if (singleNormStream != null) {\n      // we can close this stream, even if the norms\n      // are shared, because every reader has it's own \n      // singleNormStream\n      singleNormStream.close();\n      singleNormStream = null;\n    }\n    \n    // re-opened SegmentReaders have their own instance of FieldsReader\n    if (fieldsReader != null) {\n      fieldsReader.close();\n    }\n\n    if (!hasReferencedReader) { \n      // close everything, nothing is shared anymore with other readers\n      if (tis != null) {\n        tis.close();\n      }\n  \n      if (freqStream != null)\n        freqStream.close();\n      if (proxStream != null)\n        proxStream.close();\n  \n      if (termVectorsReaderOrig != null)\n        termVectorsReaderOrig.close();\n  \n      if (cfsReader != null)\n        cfsReader.close();\n  \n      if (storeCFSReader != null)\n        storeCFSReader.close();\n      \n      // maybe close directory\n      super.doClose();\n    }\n  }\n\n","bugFix":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6817596a5666fa3e3979682dea4a2bc8d70fc570","date":1227002271,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  protected void doClose() throws IOException {\n    boolean hasReferencedReader = (referencedSegmentReader != null);\n\n    termVectorsLocal.close();\n\n    if (hasReferencedReader) {\n      referencedSegmentReader.decRefReaderNotNorms();\n      referencedSegmentReader = null;\n    }\n\n    deletedDocs = null;\n\n    // close the single norms stream\n    if (singleNormStream != null) {\n      // we can close this stream, even if the norms\n      // are shared, because every reader has it's own \n      // singleNormStream\n      singleNormStream.close();\n      singleNormStream = null;\n    }\n    \n    // re-opened SegmentReaders have their own instance of FieldsReader\n    if (fieldsReader != null) {\n      fieldsReader.close();\n    }\n\n    if (!hasReferencedReader) { \n      // close everything, nothing is shared anymore with other readers\n      if (tis != null) {\n        tis.close();\n      }\n  \n      if (freqStream != null)\n        freqStream.close();\n      if (proxStream != null)\n        proxStream.close();\n  \n      if (termVectorsReaderOrig != null)\n        termVectorsReaderOrig.close();\n  \n      if (cfsReader != null)\n        cfsReader.close();\n  \n      if (storeCFSReader != null)\n        storeCFSReader.close();\n    }\n\n    // In DirectoryIndexReader.reopen, our directory\n    // instance was made private to us (cloned), so we\n    // always call super.doClose to possibly close the\n    // directory:\n    super.doClose();\n  }\n\n","sourceOld":"  protected void doClose() throws IOException {\n    boolean hasReferencedReader = (referencedSegmentReader != null);\n\n    termVectorsLocal.close();\n\n    if (hasReferencedReader) {\n      referencedSegmentReader.decRefReaderNotNorms();\n      referencedSegmentReader = null;\n    }\n\n    deletedDocs = null;\n\n    // close the single norms stream\n    if (singleNormStream != null) {\n      // we can close this stream, even if the norms\n      // are shared, because every reader has it's own \n      // singleNormStream\n      singleNormStream.close();\n      singleNormStream = null;\n    }\n    \n    // re-opened SegmentReaders have their own instance of FieldsReader\n    if (fieldsReader != null) {\n      fieldsReader.close();\n    }\n\n    if (!hasReferencedReader) { \n      // close everything, nothing is shared anymore with other readers\n      if (tis != null) {\n        tis.close();\n      }\n  \n      if (freqStream != null)\n        freqStream.close();\n      if (proxStream != null)\n        proxStream.close();\n  \n      if (termVectorsReaderOrig != null)\n        termVectorsReaderOrig.close();\n  \n      if (cfsReader != null)\n        cfsReader.close();\n  \n      if (storeCFSReader != null)\n        storeCFSReader.close();\n      \n      // maybe close directory\n      super.doClose();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de9999a287e59e079489cd445c376fa0dab501ba","date":1229510190,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  protected void doClose() throws IOException {\n    boolean hasReferencedReader = (referencedSegmentReader != null);\n\n    termVectorsLocal.close();\n    fieldsReaderLocal.close();\n\n    if (hasReferencedReader) {\n      referencedSegmentReader.decRefReaderNotNorms();\n      referencedSegmentReader = null;\n    }\n\n    deletedDocs = null;\n\n    // close the single norms stream\n    if (singleNormStream != null) {\n      // we can close this stream, even if the norms\n      // are shared, because every reader has it's own \n      // singleNormStream\n      singleNormStream.close();\n      singleNormStream = null;\n    }\n    \n    if (!hasReferencedReader) { \n      // close everything, nothing is shared anymore with other readers\n      if (tis != null) {\n        tis.close();\n      }\n  \n      if (freqStream != null)\n        freqStream.close();\n      if (proxStream != null)\n        proxStream.close();\n  \n      if (termVectorsReaderOrig != null)\n        termVectorsReaderOrig.close();\n  \n      if (fieldsReaderOrig != null)\n        fieldsReaderOrig.close();\n  \n      if (cfsReader != null)\n        cfsReader.close();\n  \n      if (storeCFSReader != null)\n        storeCFSReader.close();\n    }\n\n    // In DirectoryIndexReader.reopen, our directory\n    // instance was made private to us (cloned), so we\n    // always call super.doClose to possibly close the\n    // directory:\n    super.doClose();\n  }\n\n","sourceOld":"  protected void doClose() throws IOException {\n    boolean hasReferencedReader = (referencedSegmentReader != null);\n\n    termVectorsLocal.close();\n\n    if (hasReferencedReader) {\n      referencedSegmentReader.decRefReaderNotNorms();\n      referencedSegmentReader = null;\n    }\n\n    deletedDocs = null;\n\n    // close the single norms stream\n    if (singleNormStream != null) {\n      // we can close this stream, even if the norms\n      // are shared, because every reader has it's own \n      // singleNormStream\n      singleNormStream.close();\n      singleNormStream = null;\n    }\n    \n    // re-opened SegmentReaders have their own instance of FieldsReader\n    if (fieldsReader != null) {\n      fieldsReader.close();\n    }\n\n    if (!hasReferencedReader) { \n      // close everything, nothing is shared anymore with other readers\n      if (tis != null) {\n        tis.close();\n      }\n  \n      if (freqStream != null)\n        freqStream.close();\n      if (proxStream != null)\n        proxStream.close();\n  \n      if (termVectorsReaderOrig != null)\n        termVectorsReaderOrig.close();\n  \n      if (cfsReader != null)\n        cfsReader.close();\n  \n      if (storeCFSReader != null)\n        storeCFSReader.close();\n    }\n\n    // In DirectoryIndexReader.reopen, our directory\n    // instance was made private to us (cloned), so we\n    // always call super.doClose to possibly close the\n    // directory:\n    super.doClose();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  protected void doClose() throws IOException {\n    boolean hasReferencedReader = (referencedSegmentReader != null);\n\n    termVectorsLocal.close();\n    fieldsReaderLocal.close();\n    \n    if (hasReferencedReader) {\n      referencedSegmentReader.decRefReaderNotNorms();\n      referencedSegmentReader = null;\n    }\n\n    if (!hasReferencedReader) { \n      // close everything, nothing is shared anymore with other readers\n      if (tis != null) {\n        tis.close();\n      }\n      \n      if (freqStream != null)\n        freqStream.close();\n      if (proxStream != null)\n        proxStream.close();\n  \n      if (termVectorsReaderOrig != null)\n        termVectorsReaderOrig.close();\n  \n      if (fieldsReaderOrig != null)\n        fieldsReaderOrig.close();\n  \n      if (cfsReader != null)\n        cfsReader.close();\n  \n      if (storeCFSReader != null)\n        storeCFSReader.close();\n    }\n\n    // In DirectoryIndexReader.reopen, our directory\n    // instance was made private to us (cloned), so we\n    // always call super.doClose to possibly close the\n    // directory:\n    super.doClose();\n  }\n\n","sourceOld":"  protected void doClose() throws IOException {\n    boolean hasReferencedReader = (referencedSegmentReader != null);\n\n    termVectorsLocal.close();\n    fieldsReaderLocal.close();\n\n    if (hasReferencedReader) {\n      referencedSegmentReader.decRefReaderNotNorms();\n      referencedSegmentReader = null;\n    }\n\n    deletedDocs = null;\n\n    // close the single norms stream\n    if (singleNormStream != null) {\n      // we can close this stream, even if the norms\n      // are shared, because every reader has it's own \n      // singleNormStream\n      singleNormStream.close();\n      singleNormStream = null;\n    }\n    \n    if (!hasReferencedReader) { \n      // close everything, nothing is shared anymore with other readers\n      if (tis != null) {\n        tis.close();\n      }\n  \n      if (freqStream != null)\n        freqStream.close();\n      if (proxStream != null)\n        proxStream.close();\n  \n      if (termVectorsReaderOrig != null)\n        termVectorsReaderOrig.close();\n  \n      if (fieldsReaderOrig != null)\n        fieldsReaderOrig.close();\n  \n      if (cfsReader != null)\n        cfsReader.close();\n  \n      if (storeCFSReader != null)\n        storeCFSReader.close();\n    }\n\n    // In DirectoryIndexReader.reopen, our directory\n    // instance was made private to us (cloned), so we\n    // always call super.doClose to possibly close the\n    // directory:\n    super.doClose();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf5d15fa6a63d9c38ac496f7c37fe5e5723162ab","date":1235909556,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  protected void doClose() throws IOException {\n\n    termVectorsLocal.close();\n    fieldsReaderLocal.close();\n    \n    if (deletedDocs != null) {\n      deletedDocsRef.decRef();\n    }\n\n    Iterator it = norms.values().iterator();\n    while (it.hasNext()) {\n      ((Norm) it.next()).decRef();\n    }\n\n    if (coreRef.decRef() == 0) {\n\n      // close everything, nothing is shared anymore with other readers\n      if (tis != null) {\n        tis.close();\n      }\n      \n      if (freqStream != null)\n        freqStream.close();\n      if (proxStream != null)\n        proxStream.close();\n  \n      if (termVectorsReaderOrig != null)\n        termVectorsReaderOrig.close();\n  \n      if (fieldsReaderOrig != null)\n        fieldsReaderOrig.close();\n  \n      if (cfsReader != null)\n        cfsReader.close();\n  \n      if (storeCFSReader != null)\n        storeCFSReader.close();\n    }\n\n    // In DirectoryIndexReader.reopen, our directory\n    // instance was made private to us (cloned), so we\n    // always call super.doClose to possibly close the\n    // directory:\n    super.doClose();\n  }\n\n","sourceOld":"  protected void doClose() throws IOException {\n    boolean hasReferencedReader = (referencedSegmentReader != null);\n\n    termVectorsLocal.close();\n    fieldsReaderLocal.close();\n    \n    if (hasReferencedReader) {\n      referencedSegmentReader.decRefReaderNotNorms();\n      referencedSegmentReader = null;\n    }\n\n    if (!hasReferencedReader) { \n      // close everything, nothing is shared anymore with other readers\n      if (tis != null) {\n        tis.close();\n      }\n      \n      if (freqStream != null)\n        freqStream.close();\n      if (proxStream != null)\n        proxStream.close();\n  \n      if (termVectorsReaderOrig != null)\n        termVectorsReaderOrig.close();\n  \n      if (fieldsReaderOrig != null)\n        fieldsReaderOrig.close();\n  \n      if (cfsReader != null)\n        cfsReader.close();\n  \n      if (storeCFSReader != null)\n        storeCFSReader.close();\n    }\n\n    // In DirectoryIndexReader.reopen, our directory\n    // instance was made private to us (cloned), so we\n    // always call super.doClose to possibly close the\n    // directory:\n    super.doClose();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  protected void doClose() throws IOException {\n    termVectorsLocal.close();\n    fieldsReaderLocal.close();\n    \n    if (deletedDocs != null) {\n      deletedDocsRef.decRef();\n    }\n\n    Iterator it = norms.values().iterator();\n    while (it.hasNext()) {\n      ((Norm) it.next()).decRef();\n    }\n\n    if (coreRef.decRef() == 0) {\n\n      // close everything, nothing is shared anymore with other readers\n      if (tis != null) {\n        tis.close();\n      }\n      \n      if (freqStream != null)\n        freqStream.close();\n      if (proxStream != null)\n        proxStream.close();\n  \n      if (termVectorsReaderOrig != null)\n        termVectorsReaderOrig.close();\n  \n      if (fieldsReaderOrig != null)\n        fieldsReaderOrig.close();\n  \n      if (cfsReader != null)\n        cfsReader.close();\n  \n      if (storeCFSReader != null)\n        storeCFSReader.close();\n    }\n  }\n\n","sourceOld":"  protected void doClose() throws IOException {\n\n    termVectorsLocal.close();\n    fieldsReaderLocal.close();\n    \n    if (deletedDocs != null) {\n      deletedDocsRef.decRef();\n    }\n\n    Iterator it = norms.values().iterator();\n    while (it.hasNext()) {\n      ((Norm) it.next()).decRef();\n    }\n\n    if (coreRef.decRef() == 0) {\n\n      // close everything, nothing is shared anymore with other readers\n      if (tis != null) {\n        tis.close();\n      }\n      \n      if (freqStream != null)\n        freqStream.close();\n      if (proxStream != null)\n        proxStream.close();\n  \n      if (termVectorsReaderOrig != null)\n        termVectorsReaderOrig.close();\n  \n      if (fieldsReaderOrig != null)\n        fieldsReaderOrig.close();\n  \n      if (cfsReader != null)\n        cfsReader.close();\n  \n      if (storeCFSReader != null)\n        storeCFSReader.close();\n    }\n\n    // In DirectoryIndexReader.reopen, our directory\n    // instance was made private to us (cloned), so we\n    // always call super.doClose to possibly close the\n    // directory:\n    super.doClose();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95ea004a2bef3f964ba2e0d26e94325213909526","date":1245927336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  protected void doClose() throws IOException {\n    termVectorsLocal.close();\n    fieldsReaderLocal.close();\n    \n    if (deletedDocs != null) {\n      deletedDocsRef.decRef();\n      // null so if an app hangs on to us we still free most ram\n      deletedDocs = null;\n    }\n\n    Iterator it = norms.values().iterator();\n    while (it.hasNext()) {\n      ((Norm) it.next()).decRef();\n    }\n\n    if (coreRef.decRef() == 0) {\n\n      // close everything, nothing is shared anymore with other readers\n      if (tis != null) {\n        tis.close();\n        // null so if an app hangs on to us we still free most ram\n        tis = null;\n      }\n      \n      if (freqStream != null)\n        freqStream.close();\n      if (proxStream != null)\n        proxStream.close();\n  \n      if (termVectorsReaderOrig != null)\n        termVectorsReaderOrig.close();\n  \n      if (fieldsReaderOrig != null)\n        fieldsReaderOrig.close();\n  \n      if (cfsReader != null)\n        cfsReader.close();\n  \n      if (storeCFSReader != null)\n        storeCFSReader.close();\n    }\n  }\n\n","sourceOld":"  protected void doClose() throws IOException {\n    termVectorsLocal.close();\n    fieldsReaderLocal.close();\n    \n    if (deletedDocs != null) {\n      deletedDocsRef.decRef();\n    }\n\n    Iterator it = norms.values().iterator();\n    while (it.hasNext()) {\n      ((Norm) it.next()).decRef();\n    }\n\n    if (coreRef.decRef() == 0) {\n\n      // close everything, nothing is shared anymore with other readers\n      if (tis != null) {\n        tis.close();\n      }\n      \n      if (freqStream != null)\n        freqStream.close();\n      if (proxStream != null)\n        proxStream.close();\n  \n      if (termVectorsReaderOrig != null)\n        termVectorsReaderOrig.close();\n  \n      if (fieldsReaderOrig != null)\n        fieldsReaderOrig.close();\n  \n      if (cfsReader != null)\n        cfsReader.close();\n  \n      if (storeCFSReader != null)\n        storeCFSReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66f3dadb253a44f4cccc81c8a21b685b18b201fb","date":1247245699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  protected void doClose() throws IOException {\n    termVectorsLocal.close();\n    fieldsReaderLocal.close();\n    \n    if (deletedDocs != null) {\n      deletedDocsRef.decRef();\n      // null so if an app hangs on to us we still free most ram\n      deletedDocs = null;\n    }\n\n    Iterator it = norms.values().iterator();\n    while (it.hasNext()) {\n      ((Norm) it.next()).decRef();\n    }\n    if (core != null) {\n      core.decRef();\n    }\n  }\n\n","sourceOld":"  protected void doClose() throws IOException {\n    termVectorsLocal.close();\n    fieldsReaderLocal.close();\n    \n    if (deletedDocs != null) {\n      deletedDocsRef.decRef();\n      // null so if an app hangs on to us we still free most ram\n      deletedDocs = null;\n    }\n\n    Iterator it = norms.values().iterator();\n    while (it.hasNext()) {\n      ((Norm) it.next()).decRef();\n    }\n\n    if (coreRef.decRef() == 0) {\n\n      // close everything, nothing is shared anymore with other readers\n      if (tis != null) {\n        tis.close();\n        // null so if an app hangs on to us we still free most ram\n        tis = null;\n      }\n      \n      if (freqStream != null)\n        freqStream.close();\n      if (proxStream != null)\n        proxStream.close();\n  \n      if (termVectorsReaderOrig != null)\n        termVectorsReaderOrig.close();\n  \n      if (fieldsReaderOrig != null)\n        fieldsReaderOrig.close();\n  \n      if (cfsReader != null)\n        cfsReader.close();\n  \n      if (storeCFSReader != null)\n        storeCFSReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d","date":1255859449,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  protected void doClose() throws IOException {\n    termVectorsLocal.close();\n    fieldsReaderLocal.close();\n    \n    if (deletedDocs != null) {\n      deletedDocsRef.decRef();\n      // null so if an app hangs on to us we still free most ram\n      deletedDocs = null;\n    }\n\n    for (final Norm norm : norms.values()) {\n      norm.decRef();\n    }\n    if (core != null) {\n      core.decRef();\n    }\n  }\n\n","sourceOld":"  protected void doClose() throws IOException {\n    termVectorsLocal.close();\n    fieldsReaderLocal.close();\n    \n    if (deletedDocs != null) {\n      deletedDocsRef.decRef();\n      // null so if an app hangs on to us we still free most ram\n      deletedDocs = null;\n    }\n\n    Iterator it = norms.values().iterator();\n    while (it.hasNext()) {\n      ((Norm) it.next()).decRef();\n    }\n    if (core != null) {\n      core.decRef();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  @Override\n  protected void doClose() throws IOException {\n    termVectorsLocal.close();\n    fieldsReaderLocal.close();\n    \n    if (deletedDocs != null) {\n      deletedDocsRef.decRef();\n      // null so if an app hangs on to us we still free most ram\n      deletedDocs = null;\n    }\n\n    for (final Norm norm : norms.values()) {\n      norm.decRef();\n    }\n    if (core != null) {\n      core.decRef();\n    }\n  }\n\n","sourceOld":"  protected void doClose() throws IOException {\n    termVectorsLocal.close();\n    fieldsReaderLocal.close();\n    \n    if (deletedDocs != null) {\n      deletedDocsRef.decRef();\n      // null so if an app hangs on to us we still free most ram\n      deletedDocs = null;\n    }\n\n    for (final Norm norm : norms.values()) {\n      norm.decRef();\n    }\n    if (core != null) {\n      core.decRef();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8514024f885b40613b5ec91876ce5e9d2167d89","date":1260313529,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  @Override\n  protected void doClose() throws IOException {\n    termVectorsLocal.close();\n    fieldsReaderLocal.close();\n    \n    if (deletedDocs != null) {\n      deletedDocsRef.decrementAndGet();\n      // null so if an app hangs on to us we still free most ram\n      deletedDocs = null;\n    }\n\n    for (final Norm norm : norms.values()) {\n      norm.decRef();\n    }\n    if (core != null) {\n      core.decRef();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doClose() throws IOException {\n    termVectorsLocal.close();\n    fieldsReaderLocal.close();\n    \n    if (deletedDocs != null) {\n      deletedDocsRef.decRef();\n      // null so if an app hangs on to us we still free most ram\n      deletedDocs = null;\n    }\n\n    for (final Norm norm : norms.values()) {\n      norm.decRef();\n    }\n    if (core != null) {\n      core.decRef();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doClose().mjava","sourceNew":"  @Override\n  protected void doClose() throws IOException {\n    termVectorsLocal.close();\n    fieldsReaderLocal.close();\n    \n    if (deletedDocs != null) {\n      deletedDocsRef.decrementAndGet();\n      // null so if an app hangs on to us we still free most ram\n      deletedDocs = null;\n    }\n\n    for (final Norm norm : norms.values()) {\n      norm.decRef();\n    }\n    if (core != null) {\n      core.decRef();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doClose() throws IOException {\n    termVectorsLocal.close();\n    fieldsReaderLocal.close();\n    \n    if (deletedDocs != null) {\n      deletedDocsRef.decrementAndGet();\n      // null so if an app hangs on to us we still free most ram\n      deletedDocs = null;\n    }\n\n    for (final Norm norm : norms.values()) {\n      norm.decRef();\n    }\n    if (core != null) {\n      core.decRef();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"125b5699f11b58d9be0820c6ce8b1648812902e8":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"950f3c7592cb559e2534e5089c78833250e156a3":["9e98927024757b7944e3ab5bf88134d5f7f30600"],"e7fb6d70db034a5456ae560175dd1b821eea9ff4":["fc97c3750bb1acfa4dc8d7289e664ac0210c4f93"],"8a9e385641d717e641408d8fbbc62be8fc766357":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"53df68381fe22c8eaf758533d0d5e1db43b925ac":["6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6"],"fc97c3750bb1acfa4dc8d7289e664ac0210c4f93":["434ea59dc096623cd1affa6bcf7471b98611cfbd"],"6817596a5666fa3e3979682dea4a2bc8d70fc570":["82da72b9c5d52216a2200ed11031128bac1dbf36"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["66f3dadb253a44f4cccc81c8a21b685b18b201fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de9999a287e59e079489cd445c376fa0dab501ba":["6817596a5666fa3e3979682dea4a2bc8d70fc570"],"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6":["e7fb6d70db034a5456ae560175dd1b821eea9ff4"],"d8514024f885b40613b5ec91876ce5e9d2167d89":["8a9e385641d717e641408d8fbbc62be8fc766357"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d8514024f885b40613b5ec91876ce5e9d2167d89"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["cf5d15fa6a63d9c38ac496f7c37fe5e5723162ab"],"95ea004a2bef3f964ba2e0d26e94325213909526":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"693a4c06f749274d170a2e87d4afb2709a810f46":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"9e98927024757b7944e3ab5bf88134d5f7f30600":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"434ea59dc096623cd1affa6bcf7471b98611cfbd":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"cf5d15fa6a63d9c38ac496f7c37fe5e5723162ab":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"82da72b9c5d52216a2200ed11031128bac1dbf36":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["693a4c06f749274d170a2e87d4afb2709a810f46"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["6e5d88b55f1b57feab6da94a5c635a224539bd2a"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"66f3dadb253a44f4cccc81c8a21b685b18b201fb":["95ea004a2bef3f964ba2e0d26e94325213909526"],"6db660b56f04fdb2853d25cdee8ee0d36559a521":["de9999a287e59e079489cd445c376fa0dab501ba"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["53df68381fe22c8eaf758533d0d5e1db43b925ac"],"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["950f3c7592cb559e2534e5089c78833250e156a3"],"6e5d88b55f1b57feab6da94a5c635a224539bd2a":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"commit2Childs":{"125b5699f11b58d9be0820c6ce8b1648812902e8":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"950f3c7592cb559e2534e5089c78833250e156a3":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"e7fb6d70db034a5456ae560175dd1b821eea9ff4":["6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6"],"8a9e385641d717e641408d8fbbc62be8fc766357":["d8514024f885b40613b5ec91876ce5e9d2167d89"],"53df68381fe22c8eaf758533d0d5e1db43b925ac":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"fc97c3750bb1acfa4dc8d7289e664ac0210c4f93":["e7fb6d70db034a5456ae560175dd1b821eea9ff4"],"6817596a5666fa3e3979682dea4a2bc8d70fc570":["de9999a287e59e079489cd445c376fa0dab501ba"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6":["53df68381fe22c8eaf758533d0d5e1db43b925ac"],"de9999a287e59e079489cd445c376fa0dab501ba":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"d8514024f885b40613b5ec91876ce5e9d2167d89":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["95ea004a2bef3f964ba2e0d26e94325213909526"],"95ea004a2bef3f964ba2e0d26e94325213909526":["66f3dadb253a44f4cccc81c8a21b685b18b201fb"],"693a4c06f749274d170a2e87d4afb2709a810f46":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"9e98927024757b7944e3ab5bf88134d5f7f30600":["950f3c7592cb559e2534e5089c78833250e156a3"],"434ea59dc096623cd1affa6bcf7471b98611cfbd":["fc97c3750bb1acfa4dc8d7289e664ac0210c4f93"],"cf5d15fa6a63d9c38ac496f7c37fe5e5723162ab":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"82da72b9c5d52216a2200ed11031128bac1dbf36":["6817596a5666fa3e3979682dea4a2bc8d70fc570"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["434ea59dc096623cd1affa6bcf7471b98611cfbd"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["9e98927024757b7944e3ab5bf88134d5f7f30600"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["6e5d88b55f1b57feab6da94a5c635a224539bd2a"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["82da72b9c5d52216a2200ed11031128bac1dbf36"],"66f3dadb253a44f4cccc81c8a21b685b18b201fb":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["693a4c06f749274d170a2e87d4afb2709a810f46"],"6db660b56f04fdb2853d25cdee8ee0d36559a521":["cf5d15fa6a63d9c38ac496f7c37fe5e5723162ab"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"6e5d88b55f1b57feab6da94a5c635a224539bd2a":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}