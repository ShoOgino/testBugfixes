{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random));\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random.nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random));\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random.nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random().nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random().nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random().nextInt(valueCount - i)\n              : random().nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random().nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random.nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random));\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random.nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random.nextInt(valueCount - i)\n              : random.nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random.nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random.nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random().nextInt(500);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                                out, valueCount, nbits, random().nextFloat()*PackedInts.FASTEST);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random().nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random().nextInt(valueCount - i)\n              : random().nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random().nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random().nextInt(500);\n        final Directory d = newDirectory();\n\n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                out, valueCount, nbits);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random().nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random().nextInt(valueCount - i)\n              : random().nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random().nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dfbac05ca8694aac59eef8e62e429bf52bce36e","date":1340114344,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<63;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = 100+random().nextInt(500);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                                out, valueCount, nbits, random().nextFloat()*PackedInts.FASTEST);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          values[i] = _TestUtil.nextLong(random(), 0, maxValue);\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random().nextInt(valueCount - i)\n              : random().nextInt(20))) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random().nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      long ceil = 2;\n      for(int nbits=1;nbits<63;nbits++) {\n        final int valueCount = 100+random().nextInt(500);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                                out, valueCount, nbits, random().nextFloat()*PackedInts.FASTEST);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          long v = random().nextLong() % ceil;\n          if (v < 0) {\n            v = -v;\n          }\n          values[i] = v;\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random().nextInt(valueCount - i)\n              : random().nextInt(20))) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random().nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" ceil=\" + ceil + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          in.close();\n        }\n        ceil *= 2;\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"586497b3936df0d6ae184e33e7bb4fc1f70409b2","date":1341237345,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = 100+random().nextInt(500);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                                out, valueCount, nbits, random().nextFloat());\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : _TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          values[i] = _TestUtil.nextLong(random(), 0, maxValue);\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // packed writers should only write longs\n        assertEquals(0, (fp - startFp) % 8);\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes;\n        switch (w.getFormat()) {\n          case PackedInts.PACKED:\n            bytes = (long) Math.ceil((double) valueCount * w.bitsPerValue / 64) << 3;\n            break;\n          case PackedInts.PACKED_SINGLE_BLOCK:\n            final int valuesPerBlock = 64 / w.bitsPerValue;\n            bytes = (long) Math.ceil((double) valueCount / valuesPerBlock) << 3;\n            break;\n          default:\n            bytes = -1;\n        }\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random().nextInt(valueCount - i)\n              : random().nextInt(20))) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random().nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<63;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = 100+random().nextInt(500);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                                out, valueCount, nbits, random().nextFloat()*PackedInts.FASTEST);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          values[i] = _TestUtil.nextLong(random(), 0, maxValue);\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random().nextInt(valueCount - i)\n              : random().nextInt(20))) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random().nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55110eb60c5105294fc2ae7912d82b750865aa58","date":1341389822,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = 100+random().nextInt(500);\n        final int bufferSize = random().nextBoolean()\n            ? _TestUtil.nextInt(random(), 0, 48)\n            : _TestUtil.nextInt(random(), 0, 4096);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                                out, valueCount, nbits, random().nextFloat());\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : _TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          values[i] = _TestUtil.nextLong(random(), 0, maxValue);\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // packed writers should only write longs\n        assertEquals(0, (fp - startFp) % 8);\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes;\n        switch (w.getFormat()) {\n          case PACKED:\n            bytes = (long) Math.ceil((double) valueCount * w.bitsPerValue / 64) << 3;\n            break;\n          case PACKED_SINGLE_BLOCK:\n            final int valuesPerBlock = 64 / w.bitsPerValue;\n            bytes = (long) Math.ceil((double) valueCount / valuesPerBlock) << 3;\n            break;\n          default:\n            bytes = -1;\n        }\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat().getId(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n            assertEquals(i, r.ord());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n\n        { // test reader iterator bulk next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          int i = 0;\n          while (i < valueCount) {\n            final int count = _TestUtil.nextInt(random(), 1, 95);\n            final LongsRef next = r.next(count);\n            for (int k = 0; k < next.length; ++k) {\n              assertEquals(\"index=\" + i + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i + k], next.longs[next.offset + k]);\n            }\n            i += next.length;\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = 100+random().nextInt(500);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                                out, valueCount, nbits, random().nextFloat());\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : _TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          values[i] = _TestUtil.nextLong(random(), 0, maxValue);\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // packed writers should only write longs\n        assertEquals(0, (fp - startFp) % 8);\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes;\n        switch (w.getFormat()) {\n          case PackedInts.PACKED:\n            bytes = (long) Math.ceil((double) valueCount * w.bitsPerValue / 64) << 3;\n            break;\n          case PackedInts.PACKED_SINGLE_BLOCK:\n            final int valuesPerBlock = 64 / w.bitsPerValue;\n            bytes = (long) Math.ceil((double) valueCount / valuesPerBlock) << 3;\n            break;\n          default:\n            bytes = -1;\n        }\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random().nextInt(valueCount - i)\n              : random().nextInt(20))) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random().nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"829d9441b99897377d279219000bb71b50c026be","date":1342046363,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(3);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = _TestUtil.nextInt(random(), 1, 600);\n        final int bufferSize = random().nextBoolean()\n            ? _TestUtil.nextInt(random(), 0, 48)\n            : _TestUtil.nextInt(random(), 0, 4096);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                                out, valueCount, nbits, random().nextFloat());\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : _TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          values[i] = _TestUtil.nextLong(random(), 0, maxValue);\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // packed writers should only write longs\n        assertEquals(0, (fp - startFp) % 8);\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes;\n        switch (w.getFormat()) {\n          case PACKED:\n            bytes = (long) Math.ceil((double) valueCount * w.bitsPerValue / 64) << 3;\n            break;\n          case PACKED_SINGLE_BLOCK:\n            final int valuesPerBlock = 64 / w.bitsPerValue;\n            bytes = (long) Math.ceil((double) valueCount / valuesPerBlock) << 3;\n            break;\n          default:\n            bytes = -1;\n        }\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat().getId(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n            assertEquals(i, r.ord());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n\n        { // test reader iterator bulk next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          int i = 0;\n          while (i < valueCount) {\n            final int count = _TestUtil.nextInt(random(), 1, 95);\n            final LongsRef next = r.next(count);\n            for (int k = 0; k < next.length; ++k) {\n              assertEquals(\"index=\" + i + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i + k], next.longs[next.offset + k]);\n            }\n            i += next.length;\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = 100+random().nextInt(500);\n        final int bufferSize = random().nextBoolean()\n            ? _TestUtil.nextInt(random(), 0, 48)\n            : _TestUtil.nextInt(random(), 0, 4096);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                                out, valueCount, nbits, random().nextFloat());\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : _TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          values[i] = _TestUtil.nextLong(random(), 0, maxValue);\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // packed writers should only write longs\n        assertEquals(0, (fp - startFp) % 8);\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes;\n        switch (w.getFormat()) {\n          case PACKED:\n            bytes = (long) Math.ceil((double) valueCount * w.bitsPerValue / 64) << 3;\n            break;\n          case PACKED_SINGLE_BLOCK:\n            final int valuesPerBlock = 64 / w.bitsPerValue;\n            bytes = (long) Math.ceil((double) valueCount / valuesPerBlock) << 3;\n            break;\n          default:\n            bytes = -1;\n        }\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat().getId(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n            assertEquals(i, r.ord());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n\n        { // test reader iterator bulk next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          int i = 0;\n          while (i < valueCount) {\n            final int count = _TestUtil.nextInt(random(), 1, 95);\n            final LongsRef next = r.next(count);\n            for (int k = 0; k < next.length; ++k) {\n              assertEquals(\"index=\" + i + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i + k], next.longs[next.offset + k]);\n            }\n            i += next.length;\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(3);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = _TestUtil.nextInt(random(), 1, 600);\n        final int bufferSize = random().nextBoolean()\n            ? _TestUtil.nextInt(random(), 0, 48)\n            : _TestUtil.nextInt(random(), 0, 4096);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                                out, valueCount, nbits, random().nextFloat());\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : _TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          values[i] = _TestUtil.nextLong(random(), 0, maxValue);\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // packed writers should only write longs\n        assertEquals(0, (fp - startFp) % 8);\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes;\n        switch (w.getFormat()) {\n          case PACKED:\n            bytes = (long) Math.ceil((double) valueCount * w.bitsPerValue / 64) << 3;\n            break;\n          case PACKED_SINGLE_BLOCK:\n            final int valuesPerBlock = 64 / w.bitsPerValue;\n            bytes = (long) Math.ceil((double) valueCount / valuesPerBlock) << 3;\n            break;\n          default:\n            bytes = -1;\n        }\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat().getId(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n            assertEquals(i, r.ord());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n\n        { // test reader iterator bulk next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          int i = 0;\n          while (i < valueCount) {\n            final int count = _TestUtil.nextInt(random(), 1, 95);\n            final LongsRef next = r.next(count);\n            for (int k = 0; k < next.length; ++k) {\n              assertEquals(\"index=\" + i + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i + k], next.longs[next.offset + k]);\n            }\n            i += next.length;\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<63;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = 100+random().nextInt(500);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                                out, valueCount, nbits, random().nextFloat()*PackedInts.FASTEST);\n\n        final long[] values = new long[valueCount];\n        for(int i=0;i<valueCount;i++) {\n          values[i] = _TestUtil.nextLong(random(), 0, maxValue);\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        { // test reader iterator next vs. advance\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);\n          for (int i = 0; i < valueCount; i += \n            1 + ((valueCount - i) <= 20 ? random().nextInt(valueCount - i)\n              : random().nextInt(20))) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            if (i - intsEnum.ord() == 1 && random().nextBoolean()) {\n              assertEquals(msg, values[i], intsEnum.next());\n            } else {\n              assertEquals(msg, values[i], intsEnum.advance(i));\n            }\n            assertEquals(msg, i, intsEnum.ord());\n          }\n          if (intsEnum.ord() < valueCount - 1)\n            assertEquals(values[valueCount - 1], intsEnum\n                .advance(valueCount - 1));\n          assertEquals(valueCount - 1, intsEnum.ord());\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(3);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = _TestUtil.nextInt(random(), 1, 600);\n        final int bufferSize = random().nextBoolean()\n            ? _TestUtil.nextInt(random(), 0, 48)\n            : _TestUtil.nextInt(random(), 0, 4096);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                                out, valueCount, nbits, random().nextFloat());\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : _TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          values[i] = _TestUtil.nextLong(random(), 0, maxValue);\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // packed writers should only write longs\n        assertEquals(0, (fp - startFp) % 8);\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes;\n        switch (w.getFormat()) {\n          case PACKED:\n            bytes = (long) Math.ceil((double) valueCount * w.bitsPerValue / 64) << 3;\n            break;\n          case PACKED_SINGLE_BLOCK:\n            final int valuesPerBlock = 64 / w.bitsPerValue;\n            bytes = (long) Math.ceil((double) valueCount / valuesPerBlock) << 3;\n            break;\n          default:\n            bytes = -1;\n        }\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat().getId(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n            assertEquals(i, r.ord());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n\n        { // test reader iterator bulk next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          int i = 0;\n          while (i < valueCount) {\n            final int count = _TestUtil.nextInt(random(), 1, 95);\n            final LongsRef next = r.next(count);\n            for (int k = 0; k < next.length; ++k) {\n              assertEquals(\"index=\" + i + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i + k], next.longs[next.offset + k]);\n            }\n            i += next.length;\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(5);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = 100+random().nextInt(500);\n        final int bufferSize = random().nextBoolean()\n            ? _TestUtil.nextInt(random(), 0, 48)\n            : _TestUtil.nextInt(random(), 0, 4096);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                                out, valueCount, nbits, random().nextFloat());\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : _TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          values[i] = _TestUtil.nextLong(random(), 0, maxValue);\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // packed writers should only write longs\n        assertEquals(0, (fp - startFp) % 8);\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes;\n        switch (w.getFormat()) {\n          case PACKED:\n            bytes = (long) Math.ceil((double) valueCount * w.bitsPerValue / 64) << 3;\n            break;\n          case PACKED_SINGLE_BLOCK:\n            final int valuesPerBlock = 64 / w.bitsPerValue;\n            bytes = (long) Math.ceil((double) valueCount / valuesPerBlock) << 3;\n            break;\n          default:\n            bytes = -1;\n        }\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat().getId(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n            assertEquals(i, r.ord());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n\n        { // test reader iterator bulk next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          int i = 0;\n          while (i < valueCount) {\n            final int count = _TestUtil.nextInt(random(), 1, 95);\n            final LongsRef next = r.next(count);\n            for (int k = 0; k < next.length; ++k) {\n              assertEquals(\"index=\" + i + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i + k], next.longs[next.offset + k]);\n            }\n            i += next.length;\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c661dcad9680b8a6ce5bf2cc583a69ec965328bc","date":1352297862,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(3);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = _TestUtil.nextInt(random(), 1, 600);\n        final int bufferSize = random().nextBoolean()\n            ? _TestUtil.nextInt(random(), 0, 48)\n            : _TestUtil.nextInt(random(), 0, 4096);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                                out, valueCount, nbits, random().nextFloat());\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : _TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          values[i] = _TestUtil.nextLong(random(), 0, maxValue);\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes = w.getFormat().byteCount(PackedInts.VERSION_CURRENT, valueCount, w.bitsPerValue);\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat().getId(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n            assertEquals(i, r.ord());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n\n        { // test reader iterator bulk next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          int i = 0;\n          while (i < valueCount) {\n            final int count = _TestUtil.nextInt(random(), 1, 95);\n            final LongsRef next = r.next(count);\n            for (int k = 0; k < next.length; ++k) {\n              assertEquals(\"index=\" + i + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i + k], next.longs[next.offset + k]);\n            }\n            i += next.length;\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          intsEnum.get(intsEnum.size() - 1);\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(3);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = _TestUtil.nextInt(random(), 1, 600);\n        final int bufferSize = random().nextBoolean()\n            ? _TestUtil.nextInt(random(), 0, 48)\n            : _TestUtil.nextInt(random(), 0, 4096);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                                out, valueCount, nbits, random().nextFloat());\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : _TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          values[i] = _TestUtil.nextLong(random(), 0, maxValue);\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // packed writers should only write longs\n        assertEquals(0, (fp - startFp) % 8);\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes;\n        switch (w.getFormat()) {\n          case PACKED:\n            bytes = (long) Math.ceil((double) valueCount * w.bitsPerValue / 64) << 3;\n            break;\n          case PACKED_SINGLE_BLOCK:\n            final int valuesPerBlock = 64 / w.bitsPerValue;\n            bytes = (long) Math.ceil((double) valueCount / valuesPerBlock) << 3;\n            break;\n          default:\n            bytes = -1;\n        }\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat().getId(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n            assertEquals(i, r.ord());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n\n        { // test reader iterator bulk next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          int i = 0;\n          while (i < valueCount) {\n            final int count = _TestUtil.nextInt(random(), 1, 95);\n            final LongsRef next = r.next(count);\n            for (int k = 0; k < next.length; ++k) {\n              assertEquals(\"index=\" + i + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i + k], next.longs[next.offset + k]);\n            }\n            i += next.length;\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7ad1376d356a33e10b3b9b95708ddc83252499a6","date":1353008654,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(3);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = _TestUtil.nextInt(random(), 1, 600);\n        final int bufferSize = random().nextBoolean()\n            ? _TestUtil.nextInt(random(), 0, 48)\n            : _TestUtil.nextInt(random(), 0, 4096);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                                out, valueCount, nbits, random().nextFloat());\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : _TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          values[i] = _TestUtil.nextLong(random(), 0, maxValue);\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes = w.getFormat().byteCount(PackedInts.VERSION_CURRENT, valueCount, w.bitsPerValue);\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat().getId(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n\n          final long expectedBytesUsed = RamUsageEstimator.sizeOf(r);\n          final long computedBytesUsed = r.ramBytesUsed();\n          assertEquals(r.getClass() + \"expected \" + expectedBytesUsed + \", got: \" + computedBytesUsed,\n              expectedBytesUsed, computedBytesUsed);\n        }\n\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n            assertEquals(i, r.ord());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n\n        { // test reader iterator bulk next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          int i = 0;\n          while (i < valueCount) {\n            final int count = _TestUtil.nextInt(random(), 1, 95);\n            final LongsRef next = r.next(count);\n            for (int k = 0; k < next.length; ++k) {\n              assertEquals(\"index=\" + i + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i + k], next.longs[next.offset + k]);\n            }\n            i += next.length;\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          intsEnum.get(intsEnum.size() - 1);\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(3);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = _TestUtil.nextInt(random(), 1, 600);\n        final int bufferSize = random().nextBoolean()\n            ? _TestUtil.nextInt(random(), 0, 48)\n            : _TestUtil.nextInt(random(), 0, 4096);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                                out, valueCount, nbits, random().nextFloat());\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : _TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          values[i] = _TestUtil.nextLong(random(), 0, maxValue);\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes = w.getFormat().byteCount(PackedInts.VERSION_CURRENT, valueCount, w.bitsPerValue);\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat().getId(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n            assertEquals(i, r.ord());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n\n        { // test reader iterator bulk next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          int i = 0;\n          while (i < valueCount) {\n            final int count = _TestUtil.nextInt(random(), 1, 95);\n            final LongsRef next = r.next(count);\n            for (int k = 0; k < next.length; ++k) {\n              assertEquals(\"index=\" + i + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i + k], next.longs[next.offset + k]);\n            }\n            i += next.length;\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          intsEnum.get(intsEnum.size() - 1);\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba27b134db38b60f575128ec10533fc1e9705055","date":1353077039,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(3);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = _TestUtil.nextInt(random(), 1, 600);\n        final int bufferSize = random().nextBoolean()\n            ? _TestUtil.nextInt(random(), 0, 48)\n            : _TestUtil.nextInt(random(), 0, 4096);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                                out, valueCount, nbits, random().nextFloat());\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : _TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          if (nbits == 64) {\n            values[i] = random().nextLong();\n          } else {\n            values[i] = _TestUtil.nextLong(random(), 0, maxValue);\n          }\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes = w.getFormat().byteCount(PackedInts.VERSION_CURRENT, valueCount, w.bitsPerValue);\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat().getId(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n\n          final long expectedBytesUsed = RamUsageEstimator.sizeOf(r);\n          final long computedBytesUsed = r.ramBytesUsed();\n          assertEquals(r.getClass() + \"expected \" + expectedBytesUsed + \", got: \" + computedBytesUsed,\n              expectedBytesUsed, computedBytesUsed);\n        }\n\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n            assertEquals(i, r.ord());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n\n        { // test reader iterator bulk next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          int i = 0;\n          while (i < valueCount) {\n            final int count = _TestUtil.nextInt(random(), 1, 95);\n            final LongsRef next = r.next(count);\n            for (int k = 0; k < next.length; ++k) {\n              assertEquals(\"index=\" + i + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i + k], next.longs[next.offset + k]);\n            }\n            i += next.length;\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          intsEnum.get(intsEnum.size() - 1);\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(3);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = _TestUtil.nextInt(random(), 1, 600);\n        final int bufferSize = random().nextBoolean()\n            ? _TestUtil.nextInt(random(), 0, 48)\n            : _TestUtil.nextInt(random(), 0, 4096);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                                out, valueCount, nbits, random().nextFloat());\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : _TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          values[i] = _TestUtil.nextLong(random(), 0, maxValue);\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes = w.getFormat().byteCount(PackedInts.VERSION_CURRENT, valueCount, w.bitsPerValue);\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat().getId(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n\n          final long expectedBytesUsed = RamUsageEstimator.sizeOf(r);\n          final long computedBytesUsed = r.ramBytesUsed();\n          assertEquals(r.getClass() + \"expected \" + expectedBytesUsed + \", got: \" + computedBytesUsed,\n              expectedBytesUsed, computedBytesUsed);\n        }\n\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n            assertEquals(i, r.ord());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n\n        { // test reader iterator bulk next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          int i = 0;\n          while (i < valueCount) {\n            final int count = _TestUtil.nextInt(random(), 1, 95);\n            final LongsRef next = r.next(count);\n            for (int k = 0; k < next.length; ++k) {\n              assertEquals(\"index=\" + i + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i + k], next.longs[next.offset + k]);\n            }\n            i += next.length;\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          intsEnum.get(intsEnum.size() - 1);\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(3);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = _TestUtil.nextInt(random(), 1, 600);\n        final int bufferSize = random().nextBoolean()\n            ? _TestUtil.nextInt(random(), 0, 48)\n            : _TestUtil.nextInt(random(), 0, 4096);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                                out, valueCount, nbits, random().nextFloat());\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : _TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          if (nbits == 64) {\n            values[i] = random().nextLong();\n          } else {\n            values[i] = _TestUtil.nextLong(random(), 0, maxValue);\n          }\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes = w.getFormat().byteCount(PackedInts.VERSION_CURRENT, valueCount, w.bitsPerValue);\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat().getId(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n\n          final long expectedBytesUsed = RamUsageEstimator.sizeOf(r);\n          final long computedBytesUsed = r.ramBytesUsed();\n          assertEquals(r.getClass() + \"expected \" + expectedBytesUsed + \", got: \" + computedBytesUsed,\n              expectedBytesUsed, computedBytesUsed);\n        }\n\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n            assertEquals(i, r.ord());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n\n        { // test reader iterator bulk next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          int i = 0;\n          while (i < valueCount) {\n            final int count = _TestUtil.nextInt(random(), 1, 95);\n            final LongsRef next = r.next(count);\n            for (int k = 0; k < next.length; ++k) {\n              assertEquals(\"index=\" + i + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i + k], next.longs[next.offset + k]);\n            }\n            i += next.length;\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          intsEnum.get(intsEnum.size() - 1);\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(3);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = _TestUtil.nextInt(random(), 1, 600);\n        final int bufferSize = random().nextBoolean()\n            ? _TestUtil.nextInt(random(), 0, 48)\n            : _TestUtil.nextInt(random(), 0, 4096);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                                out, valueCount, nbits, random().nextFloat());\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : _TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          values[i] = _TestUtil.nextLong(random(), 0, maxValue);\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes = w.getFormat().byteCount(PackedInts.VERSION_CURRENT, valueCount, w.bitsPerValue);\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat().getId(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n        }\n\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n            assertEquals(i, r.ord());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n\n        { // test reader iterator bulk next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          int i = 0;\n          while (i < valueCount) {\n            final int count = _TestUtil.nextInt(random(), 1, 95);\n            final LongsRef next = r.next(count);\n            for (int k = 0; k < next.length; ++k) {\n              assertEquals(\"index=\" + i + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i + k], next.longs[next.offset + k]);\n            }\n            i += next.length;\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          intsEnum.get(intsEnum.size() - 1);\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","bugFix":["7dfbac05ca8694aac59eef8e62e429bf52bce36e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"361454ae0525ac200b9da89ece3dcc618badcc06","date":1381914215,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(3);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = _TestUtil.nextInt(random(), 1, 600);\n        final int bufferSize = random().nextBoolean()\n            ? _TestUtil.nextInt(random(), 0, 48)\n            : _TestUtil.nextInt(random(), 0, 4096);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        final float acceptableOverhead;\n        if (iter == 0) {\n          // have the first iteration go through exact nbits\n          acceptableOverhead = 0.0f;\n        } else {\n          acceptableOverhead = random().nextFloat();\n        }\n        PackedInts.Writer w = PackedInts.getWriter(out, valueCount, nbits, acceptableOverhead);\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : _TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          if (nbits == 64) {\n            values[i] = random().nextLong();\n          } else {\n            values[i] = _TestUtil.nextLong(random(), 0, maxValue);\n          }\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes = w.getFormat().byteCount(PackedInts.VERSION_CURRENT, valueCount, w.bitsPerValue);\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat().getId(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n\n          final long expectedBytesUsed = RamUsageEstimator.sizeOf(r);\n          final long computedBytesUsed = r.ramBytesUsed();\n          assertEquals(r.getClass() + \"expected \" + expectedBytesUsed + \", got: \" + computedBytesUsed,\n              expectedBytesUsed, computedBytesUsed);\n        }\n\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n            assertEquals(i, r.ord());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n\n        { // test reader iterator bulk next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          int i = 0;\n          while (i < valueCount) {\n            final int count = _TestUtil.nextInt(random(), 1, 95);\n            final LongsRef next = r.next(count);\n            for (int k = 0; k < next.length; ++k) {\n              assertEquals(\"index=\" + i + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i + k], next.longs[next.offset + k]);\n            }\n            i += next.length;\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            assertEquals(msg, values[index], intsEnum.get(index));\n          }\n          intsEnum.get(intsEnum.size() - 1);\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(3);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = _TestUtil.nextInt(random(), 1, 600);\n        final int bufferSize = random().nextBoolean()\n            ? _TestUtil.nextInt(random(), 0, 48)\n            : _TestUtil.nextInt(random(), 0, 4096);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        PackedInts.Writer w = PackedInts.getWriter(\n                                out, valueCount, nbits, random().nextFloat());\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : _TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          if (nbits == 64) {\n            values[i] = random().nextLong();\n          } else {\n            values[i] = _TestUtil.nextLong(random(), 0, maxValue);\n          }\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes = w.getFormat().byteCount(PackedInts.VERSION_CURRENT, valueCount, w.bitsPerValue);\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat().getId(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n\n          final long expectedBytesUsed = RamUsageEstimator.sizeOf(r);\n          final long computedBytesUsed = r.ramBytesUsed();\n          assertEquals(r.getClass() + \"expected \" + expectedBytesUsed + \", got: \" + computedBytesUsed,\n              expectedBytesUsed, computedBytesUsed);\n        }\n\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n            assertEquals(i, r.ord());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n\n        { // test reader iterator bulk next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          int i = 0;\n          while (i < valueCount) {\n            final int count = _TestUtil.nextInt(random(), 1, 95);\n            final LongsRef next = r.next(count);\n            for (int k = 0; k < next.length; ++k) {\n              assertEquals(\"index=\" + i + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i + k], next.longs[next.offset + k]);\n            }\n            i += next.length;\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            long value = intsEnum.get(index);\n            assertEquals(msg, value, values[index]);\n          }\n          intsEnum.get(intsEnum.size() - 1);\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(3);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = TestUtil.nextInt(random(), 1, 600);\n        final int bufferSize = random().nextBoolean()\n            ? TestUtil.nextInt(random(), 0, 48)\n            : TestUtil.nextInt(random(), 0, 4096);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        final float acceptableOverhead;\n        if (iter == 0) {\n          // have the first iteration go through exact nbits\n          acceptableOverhead = 0.0f;\n        } else {\n          acceptableOverhead = random().nextFloat();\n        }\n        PackedInts.Writer w = PackedInts.getWriter(out, valueCount, nbits, acceptableOverhead);\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          if (nbits == 64) {\n            values[i] = random().nextLong();\n          } else {\n            values[i] = TestUtil.nextLong(random(), 0, maxValue);\n          }\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes = w.getFormat().byteCount(PackedInts.VERSION_CURRENT, valueCount, w.bitsPerValue);\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat().getId(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n\n          final long expectedBytesUsed = RamUsageEstimator.sizeOf(r);\n          final long computedBytesUsed = r.ramBytesUsed();\n          assertEquals(r.getClass() + \"expected \" + expectedBytesUsed + \", got: \" + computedBytesUsed,\n              expectedBytesUsed, computedBytesUsed);\n        }\n\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n            assertEquals(i, r.ord());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n\n        { // test reader iterator bulk next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          int i = 0;\n          while (i < valueCount) {\n            final int count = TestUtil.nextInt(random(), 1, 95);\n            final LongsRef next = r.next(count);\n            for (int k = 0; k < next.length; ++k) {\n              assertEquals(\"index=\" + i + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i + k], next.longs[next.offset + k]);\n            }\n            i += next.length;\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            assertEquals(msg, values[index], intsEnum.get(index));\n          }\n          intsEnum.get(intsEnum.size() - 1);\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(3);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = _TestUtil.nextInt(random(), 1, 600);\n        final int bufferSize = random().nextBoolean()\n            ? _TestUtil.nextInt(random(), 0, 48)\n            : _TestUtil.nextInt(random(), 0, 4096);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        final float acceptableOverhead;\n        if (iter == 0) {\n          // have the first iteration go through exact nbits\n          acceptableOverhead = 0.0f;\n        } else {\n          acceptableOverhead = random().nextFloat();\n        }\n        PackedInts.Writer w = PackedInts.getWriter(out, valueCount, nbits, acceptableOverhead);\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : _TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          if (nbits == 64) {\n            values[i] = random().nextLong();\n          } else {\n            values[i] = _TestUtil.nextLong(random(), 0, maxValue);\n          }\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes = w.getFormat().byteCount(PackedInts.VERSION_CURRENT, valueCount, w.bitsPerValue);\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat().getId(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n\n          final long expectedBytesUsed = RamUsageEstimator.sizeOf(r);\n          final long computedBytesUsed = r.ramBytesUsed();\n          assertEquals(r.getClass() + \"expected \" + expectedBytesUsed + \", got: \" + computedBytesUsed,\n              expectedBytesUsed, computedBytesUsed);\n        }\n\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n            assertEquals(i, r.ord());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n\n        { // test reader iterator bulk next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          int i = 0;\n          while (i < valueCount) {\n            final int count = _TestUtil.nextInt(random(), 1, 95);\n            final LongsRef next = r.next(count);\n            for (int k = 0; k < next.length; ++k) {\n              assertEquals(\"index=\" + i + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i + k], next.longs[next.offset + k]);\n            }\n            i += next.length;\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            assertEquals(msg, values[index], intsEnum.get(index));\n          }\n          intsEnum.get(intsEnum.size() - 1);\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1eb6b3ce884c0b9e064e112da158013ec33cd91","date":1402692077,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(3);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = TestUtil.nextInt(random(), 1, 600);\n        final int bufferSize = random().nextBoolean()\n            ? TestUtil.nextInt(random(), 0, 48)\n            : TestUtil.nextInt(random(), 0, 4096);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        final float acceptableOverhead;\n        if (iter == 0) {\n          // have the first iteration go through exact nbits\n          acceptableOverhead = 0.0f;\n        } else {\n          acceptableOverhead = random().nextFloat();\n        }\n        PackedInts.Writer w = PackedInts.getWriter(out, valueCount, nbits, acceptableOverhead);\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          if (nbits == 64) {\n            values[i] = random().nextLong();\n          } else {\n            values[i] = TestUtil.nextLong(random(), 0, maxValue);\n          }\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes = w.getFormat().byteCount(PackedInts.VERSION_CURRENT, valueCount, w.bitsPerValue);\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat().getId(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n\n          final long expectedBytesUsed = RamUsageTester.sizeOf(r);\n          final long computedBytesUsed = r.ramBytesUsed();\n          assertEquals(r.getClass() + \"expected \" + expectedBytesUsed + \", got: \" + computedBytesUsed,\n              expectedBytesUsed, computedBytesUsed);\n        }\n\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n            assertEquals(i, r.ord());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n\n        { // test reader iterator bulk next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          int i = 0;\n          while (i < valueCount) {\n            final int count = TestUtil.nextInt(random(), 1, 95);\n            final LongsRef next = r.next(count);\n            for (int k = 0; k < next.length; ++k) {\n              assertEquals(\"index=\" + i + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i + k], next.longs[next.offset + k]);\n            }\n            i += next.length;\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            assertEquals(msg, values[index], intsEnum.get(index));\n          }\n          intsEnum.get(intsEnum.size() - 1);\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(3);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = TestUtil.nextInt(random(), 1, 600);\n        final int bufferSize = random().nextBoolean()\n            ? TestUtil.nextInt(random(), 0, 48)\n            : TestUtil.nextInt(random(), 0, 4096);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        final float acceptableOverhead;\n        if (iter == 0) {\n          // have the first iteration go through exact nbits\n          acceptableOverhead = 0.0f;\n        } else {\n          acceptableOverhead = random().nextFloat();\n        }\n        PackedInts.Writer w = PackedInts.getWriter(out, valueCount, nbits, acceptableOverhead);\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          if (nbits == 64) {\n            values[i] = random().nextLong();\n          } else {\n            values[i] = TestUtil.nextLong(random(), 0, maxValue);\n          }\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes = w.getFormat().byteCount(PackedInts.VERSION_CURRENT, valueCount, w.bitsPerValue);\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat().getId(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n\n          final long expectedBytesUsed = RamUsageEstimator.sizeOf(r);\n          final long computedBytesUsed = r.ramBytesUsed();\n          assertEquals(r.getClass() + \"expected \" + expectedBytesUsed + \", got: \" + computedBytesUsed,\n              expectedBytesUsed, computedBytesUsed);\n        }\n\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n            assertEquals(i, r.ord());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n\n        { // test reader iterator bulk next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          int i = 0;\n          while (i < valueCount) {\n            final int count = TestUtil.nextInt(random(), 1, 95);\n            final LongsRef next = r.next(count);\n            for (int k = 0; k < next.length; ++k) {\n              assertEquals(\"index=\" + i + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i + k], next.longs[next.offset + k]);\n            }\n            i += next.length;\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            assertEquals(msg, values[index], intsEnum.get(index));\n          }\n          intsEnum.get(intsEnum.size() - 1);\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedInts().mjava","sourceNew":"  public void testPackedInts() throws IOException {\n    int num = atLeast(3);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = TestUtil.nextInt(random(), 1, 600);\n        final int bufferSize = random().nextBoolean()\n            ? TestUtil.nextInt(random(), 0, 48)\n            : TestUtil.nextInt(random(), 0, 4096);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        final float acceptableOverhead;\n        if (iter == 0) {\n          // have the first iteration go through exact nbits\n          acceptableOverhead = 0.0f;\n        } else {\n          acceptableOverhead = random().nextFloat();\n        }\n        PackedInts.Writer w = PackedInts.getWriter(out, valueCount, nbits, acceptableOverhead);\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          if (nbits == 64) {\n            values[i] = random().nextLong();\n          } else {\n            values[i] = TestUtil.nextLong(random(), 0, maxValue);\n          }\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes = w.getFormat().byteCount(PackedInts.VERSION_CURRENT, valueCount, w.bitsPerValue);\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat().getId(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n\n          final long expectedBytesUsed = RamUsageTester.sizeOf(r);\n          final long computedBytesUsed = r.ramBytesUsed();\n          assertEquals(r.getClass() + \"expected \" + expectedBytesUsed + \", got: \" + computedBytesUsed,\n              expectedBytesUsed, computedBytesUsed);\n        }\n\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n            assertEquals(i, r.ord());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n\n        { // test reader iterator bulk next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          int i = 0;\n          while (i < valueCount) {\n            final int count = TestUtil.nextInt(random(), 1, 95);\n            final LongsRef next = r.next(count);\n            for (int k = 0; k < next.length; ++k) {\n              assertEquals(\"index=\" + i + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i + k], next.longs[next.offset + k]);\n            }\n            i += next.length;\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            assertEquals(msg, values[index], intsEnum.get(index));\n          }\n          intsEnum.get(intsEnum.size() - 1);\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedInts() throws IOException {\n    int num = atLeast(3);\n    for (int iter = 0; iter < num; iter++) {\n      for(int nbits=1;nbits<=64;nbits++) {\n        final long maxValue = PackedInts.maxValue(nbits);\n        final int valueCount = TestUtil.nextInt(random(), 1, 600);\n        final int bufferSize = random().nextBoolean()\n            ? TestUtil.nextInt(random(), 0, 48)\n            : TestUtil.nextInt(random(), 0, 4096);\n        final Directory d = newDirectory();\n        \n        IndexOutput out = d.createOutput(\"out.bin\", newIOContext(random()));\n        final float acceptableOverhead;\n        if (iter == 0) {\n          // have the first iteration go through exact nbits\n          acceptableOverhead = 0.0f;\n        } else {\n          acceptableOverhead = random().nextFloat();\n        }\n        PackedInts.Writer w = PackedInts.getWriter(out, valueCount, nbits, acceptableOverhead);\n        final long startFp = out.getFilePointer();\n\n        final int actualValueCount = random().nextBoolean() ? valueCount : TestUtil.nextInt(random(), 0, valueCount);\n        final long[] values = new long[valueCount];\n        for(int i=0;i<actualValueCount;i++) {\n          if (nbits == 64) {\n            values[i] = random().nextLong();\n          } else {\n            values[i] = TestUtil.nextLong(random(), 0, maxValue);\n          }\n          w.add(values[i]);\n        }\n        w.finish();\n        final long fp = out.getFilePointer();\n        out.close();\n\n        // ensure that finish() added the (valueCount-actualValueCount) missing values\n        final long bytes = w.getFormat().byteCount(PackedInts.VERSION_CURRENT, valueCount, w.bitsPerValue);\n        assertEquals(bytes, fp - startFp);\n\n        {// test header\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          // header = codec header | bitsPerValue | valueCount | format\n          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header\n          assertEquals(w.bitsPerValue, in.readVInt());\n          assertEquals(valueCount, in.readVInt());\n          assertEquals(w.getFormat().getId(), in.readVInt());\n          assertEquals(startFp, in.getFilePointer());\n          in.close();\n        }\n\n        {// test reader\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader r = PackedInts.getReader(in);\n          assertEquals(fp, in.getFilePointer());\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.get(i));\n          }\n          in.close();\n\n          final long expectedBytesUsed = RamUsageEstimator.sizeOf(r);\n          final long computedBytesUsed = r.ramBytesUsed();\n          assertEquals(r.getClass() + \"expected \" + expectedBytesUsed + \", got: \" + computedBytesUsed,\n              expectedBytesUsed, computedBytesUsed);\n        }\n\n        { // test reader iterator next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          for(int i=0;i<valueCount;i++) {\n            assertEquals(\"index=\" + i + \" valueCount=\"\n                    + valueCount + \" nbits=\" + nbits + \" for \"\n                    + r.getClass().getSimpleName(), values[i], r.next());\n            assertEquals(i, r.ord());\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n\n        { // test reader iterator bulk next\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in, bufferSize);\n          int i = 0;\n          while (i < valueCount) {\n            final int count = TestUtil.nextInt(random(), 1, 95);\n            final LongsRef next = r.next(count);\n            for (int k = 0; k < next.length; ++k) {\n              assertEquals(\"index=\" + i + \" valueCount=\"\n                  + valueCount + \" nbits=\" + nbits + \" for \"\n                  + r.getClass().getSimpleName(), values[i + k], next.longs[next.offset + k]);\n            }\n            i += next.length;\n          }\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        \n        { // test direct reader get\n          IndexInput in = d.openInput(\"out.bin\", newIOContext(random()));\n          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);\n          for (int i = 0; i < valueCount; i++) {\n            final String msg = \"index=\" + i + \" valueCount=\"\n                + valueCount + \" nbits=\" + nbits + \" for \"\n                + intsEnum.getClass().getSimpleName();\n            final int index = random().nextInt(valueCount);\n            assertEquals(msg, values[index], intsEnum.get(index));\n          }\n          intsEnum.get(intsEnum.size() - 1);\n          assertEquals(fp, in.getFilePointer());\n          in.close();\n        }\n        d.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7ad1376d356a33e10b3b9b95708ddc83252499a6":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc"],"ba27b134db38b60f575128ec10533fc1e9705055":["7ad1376d356a33e10b3b9b95708ddc83252499a6"],"361454ae0525ac200b9da89ece3dcc618badcc06":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["361454ae0525ac200b9da89ece3dcc618badcc06"],"55110eb60c5105294fc2ae7912d82b750865aa58":["586497b3936df0d6ae184e33e7bb4fc1f70409b2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c661dcad9680b8a6ce5bf2cc583a69ec965328bc":["829d9441b99897377d279219000bb71b50c026be"],"586497b3936df0d6ae184e33e7bb4fc1f70409b2":["7dfbac05ca8694aac59eef8e62e429bf52bce36e"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["6613659748fe4411a7dcf85266e55db1f95f7315","e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"aba371508186796cc6151d8223a5b4e16d02e26e":["55110eb60c5105294fc2ae7912d82b750865aa58","829d9441b99897377d279219000bb71b50c026be"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc","ba27b134db38b60f575128ec10533fc1e9705055"],"829d9441b99897377d279219000bb71b50c026be":["55110eb60c5105294fc2ae7912d82b750865aa58"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["7dfbac05ca8694aac59eef8e62e429bf52bce36e","829d9441b99897377d279219000bb71b50c026be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e1eb6b3ce884c0b9e064e112da158013ec33cd91":["6613659748fe4411a7dcf85266e55db1f95f7315"],"7dfbac05ca8694aac59eef8e62e429bf52bce36e":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1eb6b3ce884c0b9e064e112da158013ec33cd91"]},"commit2Childs":{"7ad1376d356a33e10b3b9b95708ddc83252499a6":["ba27b134db38b60f575128ec10533fc1e9705055"],"ba27b134db38b60f575128ec10533fc1e9705055":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"361454ae0525ac200b9da89ece3dcc618badcc06":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"55110eb60c5105294fc2ae7912d82b750865aa58":["aba371508186796cc6151d8223a5b4e16d02e26e","829d9441b99897377d279219000bb71b50c026be"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"c661dcad9680b8a6ce5bf2cc583a69ec965328bc":["7ad1376d356a33e10b3b9b95708ddc83252499a6","d4d69c535930b5cce125cff868d40f6373dc27d4"],"586497b3936df0d6ae184e33e7bb4fc1f70409b2":["55110eb60c5105294fc2ae7912d82b750865aa58"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["7dfbac05ca8694aac59eef8e62e429bf52bce36e"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["361454ae0525ac200b9da89ece3dcc618badcc06"],"829d9441b99897377d279219000bb71b50c026be":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"e1eb6b3ce884c0b9e064e112da158013ec33cd91":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dfbac05ca8694aac59eef8e62e429bf52bce36e":["586497b3936df0d6ae184e33e7bb4fc1f70409b2","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}