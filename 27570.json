{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBinaryFieldOffsetLength().mjava","commits":[{"id":"70b55953b6a72596cb534ead735a8b849a473cac","date":1363634568,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBinaryFieldOffsetLength().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n\n    Document doc = new Document();\n    Field f = new StoredField(\"binary\", b, 10, 17);\n    byte[] bx = f.binaryValue().bytes;\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.binaryValue().offset);\n    assertEquals(17, f.binaryValue().length);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    StoredDocument doc2 = ir.document(0);\n    StorableField f2 = doc2.getField(\"binary\");\n    b = f2.binaryValue().bytes;\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n\n    Document doc = new Document();\n    Field f = new StoredField(\"binary\", b, 10, 17);\n    byte[] bx = f.binaryValue().bytes;\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.binaryValue().offset);\n    assertEquals(17, f.binaryValue().length);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    StoredDocument doc2 = ir.document(0);\n    StorableField f2 = doc2.getField(\"binary\");\n    b = f2.binaryValue().bytes;\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBinaryFieldOffsetLength().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n\n    Document doc = new Document();\n    Field f = new StoredField(\"binary\", b, 10, 17);\n    byte[] bx = f.binaryValue().bytes;\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.binaryValue().offset);\n    assertEquals(17, f.binaryValue().length);\n    doc.add(f);\n    w.addDocument(doc);\n    w.shutdown();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    StoredDocument doc2 = ir.document(0);\n    StorableField f2 = doc2.getField(\"binary\");\n    b = f2.binaryValue().bytes;\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n\n    Document doc = new Document();\n    Field f = new StoredField(\"binary\", b, 10, 17);\n    byte[] bx = f.binaryValue().bytes;\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.binaryValue().offset);\n    assertEquals(17, f.binaryValue().length);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    StoredDocument doc2 = ir.document(0);\n    StorableField f2 = doc2.getField(\"binary\");\n    b = f2.binaryValue().bytes;\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBinaryFieldOffsetLength().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n\n    Document doc = new Document();\n    Field f = new StoredField(\"binary\", b, 10, 17);\n    byte[] bx = f.binaryValue().bytes;\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.binaryValue().offset);\n    assertEquals(17, f.binaryValue().length);\n    doc.add(f);\n    w.addDocument(doc);\n    w.shutdown();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    StoredDocument doc2 = ir.document(0);\n    StorableField f2 = doc2.getField(\"binary\");\n    b = f2.binaryValue().bytes;\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n\n    Document doc = new Document();\n    Field f = new StoredField(\"binary\", b, 10, 17);\n    byte[] bx = f.binaryValue().bytes;\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.binaryValue().offset);\n    assertEquals(17, f.binaryValue().length);\n    doc.add(f);\n    w.addDocument(doc);\n    w.shutdown();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    StoredDocument doc2 = ir.document(0);\n    StorableField f2 = doc2.getField(\"binary\");\n    b = f2.binaryValue().bytes;\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBinaryFieldOffsetLength().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n\n    Document doc = new Document();\n    Field f = new StoredField(\"binary\", b, 10, 17);\n    byte[] bx = f.binaryValue().bytes;\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.binaryValue().offset);\n    assertEquals(17, f.binaryValue().length);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    StoredDocument doc2 = ir.document(0);\n    StorableField f2 = doc2.getField(\"binary\");\n    b = f2.binaryValue().bytes;\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n\n    Document doc = new Document();\n    Field f = new StoredField(\"binary\", b, 10, 17);\n    byte[] bx = f.binaryValue().bytes;\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.binaryValue().offset);\n    assertEquals(17, f.binaryValue().length);\n    doc.add(f);\n    w.addDocument(doc);\n    w.shutdown();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    StoredDocument doc2 = ir.document(0);\n    StorableField f2 = doc2.getField(\"binary\");\n    b = f2.binaryValue().bytes;\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBinaryFieldOffsetLength().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n\n    Document doc = new Document();\n    Field f = new StoredField(\"binary\", b, 10, 17);\n    byte[] bx = f.binaryValue().bytes;\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.binaryValue().offset);\n    assertEquals(17, f.binaryValue().length);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    Document doc2 = ir.document(0);\n    IndexableField f2 = doc2.getField(\"binary\");\n    b = f2.binaryValue().bytes;\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n\n    Document doc = new Document();\n    Field f = new StoredField(\"binary\", b, 10, 17);\n    byte[] bx = f.binaryValue().bytes;\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.binaryValue().offset);\n    assertEquals(17, f.binaryValue().length);\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    StoredDocument doc2 = ir.document(0);\n    StorableField f2 = doc2.getField(\"binary\");\n    b = f2.binaryValue().bytes;\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"70b55953b6a72596cb534ead735a8b849a473cac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["70b55953b6a72596cb534ead735a8b849a473cac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70b55953b6a72596cb534ead735a8b849a473cac"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"70b55953b6a72596cb534ead735a8b849a473cac":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}