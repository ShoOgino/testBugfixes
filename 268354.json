{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", TextField.TYPE_UNSTORED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", TextField.TYPE_UNSTORED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", TextField.TYPE_UNSTORED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", TextField.TYPE_UNSTORED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random(), dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", TextField.TYPE_UNSTORED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", TextField.TYPE_UNSTORED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random, dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", TextField.TYPE_UNSTORED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random, dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", TextField.TYPE_UNSTORED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random(), dir1);\n    Document doc1 = new Document();\n    doc1.add(newTextField(\"field\", \"foo bar\", Field.Store.NO));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2);\n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo baz\", Field.Store.NO));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random(), dir1);\n    Document doc1 = new Document();\n    doc1.add(newField(\"field\", \"foo bar\", TextField.TYPE_UNSTORED));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"foo baz\", TextField.TYPE_UNSTORED));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random(), dir1);\n    Document doc1 = new Document();\n    doc1.add(newTextField(\"field\", \"foo bar\", Field.Store.NO));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2);\n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo baz\", Field.Store.NO));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = newSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random(), dir1);\n    Document doc1 = new Document();\n    doc1.add(newTextField(\"field\", \"foo bar\", Field.Store.NO));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2);\n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo baz\", Field.Store.NO));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = new IndexSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random(), dir1);\n    Document doc1 = new Document();\n    doc1.add(newTextField(\"field\", \"foo bar\", Field.Store.NO));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.shutdown();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2);\n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo baz\", Field.Store.NO));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.shutdown();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = newSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random(), dir1);\n    Document doc1 = new Document();\n    doc1.add(newTextField(\"field\", \"foo bar\", Field.Store.NO));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2);\n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo baz\", Field.Store.NO));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = newSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random(), dir1);\n    Document doc1 = new Document();\n    doc1.add(newTextField(\"field\", \"foo bar\", Field.Store.NO));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2);\n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo baz\", Field.Store.NO));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = newSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random(), dir1);\n    Document doc1 = new Document();\n    doc1.add(newTextField(\"field\", \"foo bar\", Field.Store.NO));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.shutdown();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2);\n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo baz\", Field.Store.NO));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.shutdown();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = newSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25f698887111a682424e759ba36083180899a1fd","date":1423588899,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random(), dir1);\n    Document doc1 = new Document();\n    doc1.add(newTextField(\"field\", \"foo bar\", Field.Store.NO));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n\n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2);\n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo baz\", Field.Store.NO));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n\n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = newSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n\n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random(), dir1);\n    Document doc1 = new Document();\n    doc1.add(newTextField(\"field\", \"foo bar\", Field.Store.NO));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n    \n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2);\n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo baz\", Field.Store.NO));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n    \n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = newSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    \n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random(), dir1);\n    Document doc1 = new Document();\n    doc1.add(newTextField(\"field\", \"foo bar\", Field.Store.NO));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n\n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2);\n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo baz\", Field.Store.NO));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n\n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = newSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n\n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random(), dir1);\n    Document doc1 = new Document();\n    doc1.add(newTextField(\"field\", \"foo bar\", Field.Store.NO));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n\n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2);\n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo baz\", Field.Store.NO));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n\n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = newSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n\n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random(), dir1);\n    Document doc1 = new Document();\n    doc1.add(newTextField(\"field\", \"foo bar\", Field.Store.NO));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n\n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2);\n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo baz\", Field.Store.NO));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n\n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = newSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n\n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random(), dir1);\n    Document doc1 = new Document();\n    doc1.add(newTextField(\"field\", \"foo bar\", Field.Store.NO));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n\n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2);\n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo baz\", Field.Store.NO));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n\n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = newSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n\n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random(), dir1);\n    Document doc1 = new Document();\n    doc1.add(newTextField(\"field\", \"foo bar\", Field.Store.NO));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n\n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2);\n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo baz\", Field.Store.NO));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n\n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = newSearcher(multireader);\n    assertEquals(0, searcher.search(query.build(), 10).totalHits);\n\n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query.build()));\n    assertEquals(0, searcher.search(query.build(), 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random(), dir1);\n    Document doc1 = new Document();\n    doc1.add(newTextField(\"field\", \"foo bar\", Field.Store.NO));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n\n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2);\n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo baz\", Field.Store.NO));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery query = new BooleanQuery(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n\n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = newSearcher(multireader);\n    assertEquals(0, searcher.search(query, 10).totalHits);\n\n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query));\n    assertEquals(0, searcher.search(query, 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testDeMorgan().mjava","sourceNew":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random(), dir1);\n    Document doc1 = new Document();\n    doc1.add(newTextField(\"field\", \"foo bar\", Field.Store.NO));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n\n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2);\n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo baz\", Field.Store.NO));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n\n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = newSearcher(multireader);\n    assertEquals(0, searcher.search(query.build(), 10).totalHits.value);\n\n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query.build()));\n    assertEquals(0, searcher.search(query.build(), 10).totalHits.value);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testDeMorgan() throws Exception {\n    Directory dir1 = newDirectory();\n    RandomIndexWriter iw1 = new RandomIndexWriter(random(), dir1);\n    Document doc1 = new Document();\n    doc1.add(newTextField(\"field\", \"foo bar\", Field.Store.NO));\n    iw1.addDocument(doc1);\n    IndexReader reader1 = iw1.getReader();\n    iw1.close();\n\n    Directory dir2 = newDirectory();\n    RandomIndexWriter iw2 = new RandomIndexWriter(random(), dir2);\n    Document doc2 = new Document();\n    doc2.add(newTextField(\"field\", \"foo baz\", Field.Store.NO));\n    iw2.addDocument(doc2);\n    IndexReader reader2 = iw2.getReader();\n    iw2.close();\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder(); // Query: +foo -ba*\n    query.add(new TermQuery(new Term(\"field\", \"foo\")), BooleanClause.Occur.MUST);\n    WildcardQuery wildcardQuery = new WildcardQuery(new Term(\"field\", \"ba*\"));\n    wildcardQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    query.add(wildcardQuery, BooleanClause.Occur.MUST_NOT);\n\n    MultiReader multireader = new MultiReader(reader1, reader2);\n    IndexSearcher searcher = newSearcher(multireader);\n    assertEquals(0, searcher.search(query.build(), 10).totalHits);\n\n    final ExecutorService es = Executors.newCachedThreadPool(new NamedThreadFactory(\"NRT search threads\"));\n    searcher = new IndexSearcher(multireader, es);\n    if (VERBOSE)\n      System.out.println(\"rewritten form: \" + searcher.rewrite(query.build()));\n    assertEquals(0, searcher.search(query.build(), 10).totalHits);\n    es.shutdown();\n    es.awaitTermination(1, TimeUnit.SECONDS);\n\n    multireader.close();\n    reader1.close();\n    reader2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2713584a660051cd646423be682771e3bbd99985":["25f698887111a682424e759ba36083180899a1fd"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2713584a660051cd646423be682771e3bbd99985"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["25f698887111a682424e759ba36083180899a1fd","2713584a660051cd646423be682771e3bbd99985"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"25f698887111a682424e759ba36083180899a1fd":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"2713584a660051cd646423be682771e3bbd99985":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["25f698887111a682424e759ba36083180899a1fd"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25f698887111a682424e759ba36083180899a1fd":["2713584a660051cd646423be682771e3bbd99985","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}