{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","commits":[{"id":"0415a016b37e58a017fed0a91234f733ab359971","date":1341458183,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs,SimpleSpatialFieldInfo).mjava","sourceNew":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n    if (! SpatialOperation.is(op, SpatialOperation.IsWithin, SpatialOperation.Intersects, SpatialOperation.BBoxWithin, SpatialOperation.BBoxIntersects))\n      throw new UnsupportedSpatialOperation(op);\n\n    Shape shape = args.getShape();\n\n    int detailLevel = grid.getMaxLevelForPrecision(shape,args.getDistPrecision());\n\n    return new RecursivePrefixTreeFilter(\n        getFieldName(), grid,shape, prefixGridScanLevel, detailLevel);\n  }\n\n","sourceOld":"  @Override\n  public Filter makeFilter(SpatialArgs args, SimpleSpatialFieldInfo fieldInfo) {\n    final SpatialOperation op = args.getOperation();\n    if (! SpatialOperation.is(op, SpatialOperation.IsWithin, SpatialOperation.Intersects, SpatialOperation.BBoxWithin, SpatialOperation.BBoxIntersects))\n      throw new UnsupportedSpatialOperation(op);\n\n    Shape shape = args.getShape();\n\n    int detailLevel = grid.getMaxLevelForPrecision(shape,args.getDistPrecision());\n\n    return new RecursivePrefixTreeFilter(\n        fieldInfo.getFieldName(), grid,shape, prefixGridScanLevel, detailLevel);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n    if (! SpatialOperation.is(op, SpatialOperation.IsWithin, SpatialOperation.Intersects, SpatialOperation.BBoxWithin, SpatialOperation.BBoxIntersects))\n      throw new UnsupportedSpatialOperation(op);\n\n    Shape shape = args.getShape();\n\n    int detailLevel = grid.getMaxLevelForPrecision(shape,args.getDistPrecision());\n\n    return new RecursivePrefixTreeFilter(\n        getFieldName(), grid,shape, prefixGridScanLevel, detailLevel);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2410e27320f6aaba450cbf500d7822baf642f8","date":1347075066,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","sourceNew":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n    if (! SpatialOperation.is(op, SpatialOperation.IsWithin, SpatialOperation.Intersects, SpatialOperation.BBoxWithin, SpatialOperation.BBoxIntersects))\n      throw new UnsupportedSpatialOperation(op);\n\n    Shape shape = args.getShape();\n\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    return new RecursivePrefixTreeFilter(\n        getFieldName(), grid,shape, prefixGridScanLevel, detailLevel);\n  }\n\n","sourceOld":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n    if (! SpatialOperation.is(op, SpatialOperation.IsWithin, SpatialOperation.Intersects, SpatialOperation.BBoxWithin, SpatialOperation.BBoxIntersects))\n      throw new UnsupportedSpatialOperation(op);\n\n    Shape shape = args.getShape();\n\n    int detailLevel = grid.getMaxLevelForPrecision(shape,args.getDistPrecision());\n\n    return new RecursivePrefixTreeFilter(\n        getFieldName(), grid,shape, prefixGridScanLevel, detailLevel);\n  }\n\n","bugFix":["561469a62683fb18474394874c6010a19fb0deb7"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46e67dde361bddc1a35dc332c2a1e553d7a8ebd7","date":1347426169,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","sourceNew":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n    if (op != SpatialOperation.Intersects)\n      throw new UnsupportedSpatialOperation(op);\n\n    Shape shape = args.getShape();\n\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    return new RecursivePrefixTreeFilter(\n        getFieldName(), grid, shape, prefixGridScanLevel, detailLevel);\n  }\n\n","sourceOld":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n    if (! SpatialOperation.is(op, SpatialOperation.IsWithin, SpatialOperation.Intersects, SpatialOperation.BBoxWithin, SpatialOperation.BBoxIntersects))\n      throw new UnsupportedSpatialOperation(op);\n\n    Shape shape = args.getShape();\n\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    return new RecursivePrefixTreeFilter(\n        getFieldName(), grid,shape, prefixGridScanLevel, detailLevel);\n  }\n\n","bugFix":["561469a62683fb18474394874c6010a19fb0deb7","0415a016b37e58a017fed0a91234f733ab359971"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c659c37800c0dfd82fa025b5834f4ab065903d11","date":1361851047,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","sourceNew":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n    if (op != SpatialOperation.Intersects)\n      throw new UnsupportedSpatialOperation(op);\n\n    Shape shape = args.getShape();\n\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    return new IntersectsPrefixTreeFilter(\n        shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n        true);//hasIndexedLeaves\n  }\n\n","sourceOld":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n    if (op != SpatialOperation.Intersects)\n      throw new UnsupportedSpatialOperation(op);\n\n    Shape shape = args.getShape();\n\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    return new RecursivePrefixTreeFilter(\n        getFieldName(), grid, shape, prefixGridScanLevel, detailLevel);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5aeecf64d57563b4636e7f4222e7ddcde7f8df7b","date":1364392557,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","sourceNew":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n    final boolean hasIndexedLeaves = true;\n\n    final SpatialOperation op = args.getOperation();\n    if (op == SpatialOperation.Intersects) {\n      return new IntersectsPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          hasIndexedLeaves);\n    } else if (op == SpatialOperation.IsWithin) {\n      return new WithinPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          -1);//-1 flag is slower but ensures correct results\n    }\n    throw new UnsupportedSpatialOperation(op);\n  }\n\n","sourceOld":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n    if (op != SpatialOperation.Intersects)\n      throw new UnsupportedSpatialOperation(op);\n\n    Shape shape = args.getShape();\n\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    return new IntersectsPrefixTreeFilter(\n        shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n        true);//hasIndexedLeaves\n  }\n\n","bugFix":null,"bugIntro":["0378a5fb14e1ef14d663bd48cdb3ba29a9053be9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69da1c397a55d488a19e555c8da635417e2dfd47","date":1365020983,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","sourceNew":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n    final boolean hasIndexedLeaves = true;\n\n    final SpatialOperation op = args.getOperation();\n    if (op == SpatialOperation.Intersects) {\n      return new IntersectsPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          hasIndexedLeaves);\n    } else if (op == SpatialOperation.IsWithin) {\n      return new WithinPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          -1);//-1 flag is slower but ensures correct results\n    } else if (op == SpatialOperation.Contains) {\n      return new ContainsPrefixTreeFilter(shape, getFieldName(), grid, detailLevel);\n    }\n    throw new UnsupportedSpatialOperation(op);\n  }\n\n","sourceOld":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n    final boolean hasIndexedLeaves = true;\n\n    final SpatialOperation op = args.getOperation();\n    if (op == SpatialOperation.Intersects) {\n      return new IntersectsPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          hasIndexedLeaves);\n    } else if (op == SpatialOperation.IsWithin) {\n      return new WithinPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          -1);//-1 flag is slower but ensures correct results\n    }\n    throw new UnsupportedSpatialOperation(op);\n  }\n\n","bugFix":null,"bugIntro":["0378a5fb14e1ef14d663bd48cdb3ba29a9053be9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"50b84d7eef0fc32233dd6251567fdbdb10c4cda7","date":1365707213,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","sourceNew":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n    if (op == SpatialOperation.IsDisjointTo)\n      return new DisjointSpatialFilter(this, args, getFieldName());\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n    final boolean hasIndexedLeaves = true;\n\n    if (op == SpatialOperation.Intersects) {\n      return new IntersectsPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          hasIndexedLeaves);\n    } else if (op == SpatialOperation.IsWithin) {\n      return new WithinPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          -1);//-1 flag is slower but ensures correct results\n    } else if (op == SpatialOperation.Contains) {\n      return new ContainsPrefixTreeFilter(shape, getFieldName(), grid, detailLevel);\n    }\n    throw new UnsupportedSpatialOperation(op);\n  }\n\n","sourceOld":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n    final boolean hasIndexedLeaves = true;\n\n    final SpatialOperation op = args.getOperation();\n    if (op == SpatialOperation.Intersects) {\n      return new IntersectsPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          hasIndexedLeaves);\n    } else if (op == SpatialOperation.IsWithin) {\n      return new WithinPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          -1);//-1 flag is slower but ensures correct results\n    } else if (op == SpatialOperation.Contains) {\n      return new ContainsPrefixTreeFilter(shape, getFieldName(), grid, detailLevel);\n    }\n    throw new UnsupportedSpatialOperation(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0378a5fb14e1ef14d663bd48cdb3ba29a9053be9","date":1371743283,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","sourceNew":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n    if (op == SpatialOperation.IsDisjointTo)\n      return new DisjointSpatialFilter(this, args, getFieldName());\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    if (pointsOnly || op == SpatialOperation.Intersects) {\n      return new IntersectsPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel, !pointsOnly);\n    } else if (op == SpatialOperation.IsWithin) {\n      return new WithinPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          -1);//-1 flag is slower but ensures correct results\n    } else if (op == SpatialOperation.Contains) {\n      return new ContainsPrefixTreeFilter(shape, getFieldName(), grid, detailLevel,\n          multiOverlappingIndexedShapes);\n    }\n    throw new UnsupportedSpatialOperation(op);\n  }\n\n","sourceOld":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n    if (op == SpatialOperation.IsDisjointTo)\n      return new DisjointSpatialFilter(this, args, getFieldName());\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n    final boolean hasIndexedLeaves = true;\n\n    if (op == SpatialOperation.Intersects) {\n      return new IntersectsPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          hasIndexedLeaves);\n    } else if (op == SpatialOperation.IsWithin) {\n      return new WithinPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          -1);//-1 flag is slower but ensures correct results\n    } else if (op == SpatialOperation.Contains) {\n      return new ContainsPrefixTreeFilter(shape, getFieldName(), grid, detailLevel);\n    }\n    throw new UnsupportedSpatialOperation(op);\n  }\n\n","bugFix":["5aeecf64d57563b4636e7f4222e7ddcde7f8df7b","69da1c397a55d488a19e555c8da635417e2dfd47"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","sourceNew":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n    if (op == SpatialOperation.IsDisjointTo)\n      return new DisjointSpatialFilter(this, args, getFieldName());\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    if (pointsOnly || op == SpatialOperation.Intersects) {\n      return new IntersectsPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel, !pointsOnly);\n    } else if (op == SpatialOperation.IsWithin) {\n      return new WithinPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          -1);//-1 flag is slower but ensures correct results\n    } else if (op == SpatialOperation.Contains) {\n      return new ContainsPrefixTreeFilter(shape, getFieldName(), grid, detailLevel,\n          multiOverlappingIndexedShapes);\n    }\n    throw new UnsupportedSpatialOperation(op);\n  }\n\n","sourceOld":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n    if (op == SpatialOperation.IsDisjointTo)\n      return new DisjointSpatialFilter(this, args, getFieldName());\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n    final boolean hasIndexedLeaves = true;\n\n    if (op == SpatialOperation.Intersects) {\n      return new IntersectsPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          hasIndexedLeaves);\n    } else if (op == SpatialOperation.IsWithin) {\n      return new WithinPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          -1);//-1 flag is slower but ensures correct results\n    } else if (op == SpatialOperation.Contains) {\n      return new ContainsPrefixTreeFilter(shape, getFieldName(), grid, detailLevel);\n    }\n    throw new UnsupportedSpatialOperation(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d66c1637fa083f800241e2eadc2f35f629b72c16","date":1404747063,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","sourceNew":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    if (pointsOnly || op == SpatialOperation.Intersects) {\n      return new IntersectsPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel, !pointsOnly);\n    } else if (op == SpatialOperation.IsWithin) {\n      return new WithinPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          -1);//-1 flag is slower but ensures correct results\n    } else if (op == SpatialOperation.Contains) {\n      return new ContainsPrefixTreeFilter(shape, getFieldName(), grid, detailLevel,\n          multiOverlappingIndexedShapes);\n    }\n    throw new UnsupportedSpatialOperation(op);\n  }\n\n","sourceOld":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n    if (op == SpatialOperation.IsDisjointTo)\n      return new DisjointSpatialFilter(this, args, getFieldName());\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    if (pointsOnly || op == SpatialOperation.Intersects) {\n      return new IntersectsPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel, !pointsOnly);\n    } else if (op == SpatialOperation.IsWithin) {\n      return new WithinPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          -1);//-1 flag is slower but ensures correct results\n    } else if (op == SpatialOperation.Contains) {\n      return new ContainsPrefixTreeFilter(shape, getFieldName(), grid, detailLevel,\n          multiOverlappingIndexedShapes);\n    }\n    throw new UnsupportedSpatialOperation(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4","date":1422887461,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","sourceNew":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    if (op == SpatialOperation.Intersects) {\n      return new IntersectsPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel, !pointsOnly);\n    } else if (op == SpatialOperation.IsWithin) {\n      return new WithinPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel, !pointsOnly,\n          -1);//-1 flag is slower but ensures correct results\n    } else if (op == SpatialOperation.Contains) {\n      return new ContainsPrefixTreeFilter(shape, getFieldName(), grid, detailLevel,\n          multiOverlappingIndexedShapes);\n    }\n    throw new UnsupportedSpatialOperation(op);\n  }\n\n","sourceOld":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    if (pointsOnly || op == SpatialOperation.Intersects) {\n      return new IntersectsPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel, !pointsOnly);\n    } else if (op == SpatialOperation.IsWithin) {\n      return new WithinPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          -1);//-1 flag is slower but ensures correct results\n    } else if (op == SpatialOperation.Contains) {\n      return new ContainsPrefixTreeFilter(shape, getFieldName(), grid, detailLevel,\n          multiOverlappingIndexedShapes);\n    }\n    throw new UnsupportedSpatialOperation(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0","date":1426015524,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","sourceNew":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    if (op == SpatialOperation.Intersects) {\n      return new IntersectsPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel);\n    } else if (op == SpatialOperation.IsWithin) {\n      return new WithinPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          -1);//-1 flag is slower but ensures correct results\n    } else if (op == SpatialOperation.Contains) {\n      return new ContainsPrefixTreeFilter(shape, getFieldName(), grid, detailLevel,\n          multiOverlappingIndexedShapes);\n    }\n    throw new UnsupportedSpatialOperation(op);\n  }\n\n","sourceOld":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    if (op == SpatialOperation.Intersects) {\n      return new IntersectsPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel, !pointsOnly);\n    } else if (op == SpatialOperation.IsWithin) {\n      return new WithinPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel, !pointsOnly,\n          -1);//-1 flag is slower but ensures correct results\n    } else if (op == SpatialOperation.Contains) {\n      return new ContainsPrefixTreeFilter(shape, getFieldName(), grid, detailLevel,\n          multiOverlappingIndexedShapes);\n    }\n    throw new UnsupportedSpatialOperation(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","sourceNew":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    if (op == SpatialOperation.Intersects) {\n      return new IntersectsPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel);\n    } else if (op == SpatialOperation.IsWithin) {\n      return new WithinPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          -1);//-1 flag is slower but ensures correct results\n    } else if (op == SpatialOperation.Contains) {\n      return new ContainsPrefixTreeFilter(shape, getFieldName(), grid, detailLevel,\n          multiOverlappingIndexedShapes);\n    }\n    throw new UnsupportedSpatialOperation(op);\n  }\n\n","sourceOld":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    if (op == SpatialOperation.Intersects) {\n      return new IntersectsPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel, !pointsOnly);\n    } else if (op == SpatialOperation.IsWithin) {\n      return new WithinPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel, !pointsOnly,\n          -1);//-1 flag is slower but ensures correct results\n    } else if (op == SpatialOperation.Contains) {\n      return new ContainsPrefixTreeFilter(shape, getFieldName(), grid, detailLevel,\n          multiOverlappingIndexedShapes);\n    }\n    throw new UnsupportedSpatialOperation(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeQuery(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeFilter(SpatialArgs).mjava","sourceNew":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    if (op == SpatialOperation.Intersects) {\n      return new IntersectsPrefixTreeQuery(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel);\n    } else if (op == SpatialOperation.IsWithin) {\n      return new WithinPrefixTreeQuery(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          -1);//-1 flag is slower but ensures correct results\n    } else if (op == SpatialOperation.Contains) {\n      return new ContainsPrefixTreeQuery(shape, getFieldName(), grid, detailLevel,\n          multiOverlappingIndexedShapes);\n    }\n    throw new UnsupportedSpatialOperation(op);\n  }\n\n","sourceOld":"  @Override\n  public Filter makeFilter(SpatialArgs args) {\n    final SpatialOperation op = args.getOperation();\n\n    Shape shape = args.getShape();\n    int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, distErrPct));\n\n    if (op == SpatialOperation.Intersects) {\n      return new IntersectsPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel);\n    } else if (op == SpatialOperation.IsWithin) {\n      return new WithinPrefixTreeFilter(\n          shape, getFieldName(), grid, detailLevel, prefixGridScanLevel,\n          -1);//-1 flag is slower but ensures correct results\n    } else if (op == SpatialOperation.Contains) {\n      return new ContainsPrefixTreeFilter(shape, getFieldName(), grid, detailLevel,\n          multiOverlappingIndexedShapes);\n    }\n    throw new UnsupportedSpatialOperation(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0415a016b37e58a017fed0a91234f733ab359971":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["50b84d7eef0fc32233dd6251567fdbdb10c4cda7","0378a5fb14e1ef14d663bd48cdb3ba29a9053be9"],"c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4":["d66c1637fa083f800241e2eadc2f35f629b72c16"],"0378a5fb14e1ef14d663bd48cdb3ba29a9053be9":["50b84d7eef0fc32233dd6251567fdbdb10c4cda7"],"d66c1637fa083f800241e2eadc2f35f629b72c16":["0378a5fb14e1ef14d663bd48cdb3ba29a9053be9"],"6e2410e27320f6aaba450cbf500d7822baf642f8":["0415a016b37e58a017fed0a91234f733ab359971"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"672b198fc3dce868916c727917cae58c2906763d":["11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"69da1c397a55d488a19e555c8da635417e2dfd47":["5aeecf64d57563b4636e7f4222e7ddcde7f8df7b"],"46e67dde361bddc1a35dc332c2a1e553d7a8ebd7":["6e2410e27320f6aaba450cbf500d7822baf642f8"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0415a016b37e58a017fed0a91234f733ab359971"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["672b198fc3dce868916c727917cae58c2906763d"],"50b84d7eef0fc32233dd6251567fdbdb10c4cda7":["69da1c397a55d488a19e555c8da635417e2dfd47"],"5aeecf64d57563b4636e7f4222e7ddcde7f8df7b":["c659c37800c0dfd82fa025b5834f4ab065903d11"],"c659c37800c0dfd82fa025b5834f4ab065903d11":["46e67dde361bddc1a35dc332c2a1e553d7a8ebd7"]},"commit2Childs":{"0415a016b37e58a017fed0a91234f733ab359971":["6e2410e27320f6aaba450cbf500d7822baf642f8","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"0378a5fb14e1ef14d663bd48cdb3ba29a9053be9":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d66c1637fa083f800241e2eadc2f35f629b72c16"],"c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"d66c1637fa083f800241e2eadc2f35f629b72c16":["c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4"],"6e2410e27320f6aaba450cbf500d7822baf642f8":["46e67dde361bddc1a35dc332c2a1e553d7a8ebd7"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"672b198fc3dce868916c727917cae58c2906763d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"69da1c397a55d488a19e555c8da635417e2dfd47":["50b84d7eef0fc32233dd6251567fdbdb10c4cda7"],"46e67dde361bddc1a35dc332c2a1e553d7a8ebd7":["c659c37800c0dfd82fa025b5834f4ab065903d11"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0415a016b37e58a017fed0a91234f733ab359971","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","672b198fc3dce868916c727917cae58c2906763d"],"50b84d7eef0fc32233dd6251567fdbdb10c4cda7":["37a0f60745e53927c4c876cfe5b5a58170f0646c","0378a5fb14e1ef14d663bd48cdb3ba29a9053be9"],"5aeecf64d57563b4636e7f4222e7ddcde7f8df7b":["69da1c397a55d488a19e555c8da635417e2dfd47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c659c37800c0dfd82fa025b5834f4ab065903d11":["5aeecf64d57563b4636e7f4222e7ddcde7f8df7b"]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}