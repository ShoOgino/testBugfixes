{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#tokenStream(String,String).mjava","commits":[{"id":"0d8c222875ac4ef7e08f3e25d40508b821d711ff","date":1257374221,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#tokenStream(String,String).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer#tokenStream(String,String).mjava","sourceNew":"  /**\n   * Creates a token stream that tokenizes the given string into token terms\n   * (aka words).\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param text\n   *            the string to tokenize\n   * @return a new token stream\n   */\n  public TokenStream tokenStream(String fieldName, String text) {\n    // Ideally the Analyzer superclass should have a method with the same signature, \n    // with a default impl that simply delegates to the StringReader flavour. \n    if (text == null) \n      throw new IllegalArgumentException(\"text must not be null\");\n    \n    TokenStream stream;\n    if (pattern == NON_WORD_PATTERN) { // fast path\n      stream = new FastStringTokenizer(text, true, toLowerCase, stopWords);\n    }\n    else if (pattern == WHITESPACE_PATTERN) { // fast path\n      stream = new FastStringTokenizer(text, false, toLowerCase, stopWords);\n    }\n    else {\n      stream = new PatternTokenizer(text, pattern, toLowerCase);\n      if (stopWords != null) stream = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion), stream, stopWords);\n    }\n    \n    return stream;\n  }\n\n","sourceOld":"  /**\n   * Creates a token stream that tokenizes the given string into token terms\n   * (aka words).\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param text\n   *            the string to tokenize\n   * @return a new token stream\n   */\n  public TokenStream tokenStream(String fieldName, String text) {\n    // Ideally the Analyzer superclass should have a method with the same signature, \n    // with a default impl that simply delegates to the StringReader flavour. \n    if (text == null) \n      throw new IllegalArgumentException(\"text must not be null\");\n    \n    TokenStream stream;\n    if (pattern == NON_WORD_PATTERN) { // fast path\n      stream = new FastStringTokenizer(text, true, toLowerCase, stopWords);\n    }\n    else if (pattern == WHITESPACE_PATTERN) { // fast path\n      stream = new FastStringTokenizer(text, false, toLowerCase, stopWords);\n    }\n    else {\n      stream = new PatternTokenizer(text, pattern, toLowerCase);\n      if (stopWords != null) stream = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion), stream, stopWords);\n    }\n    \n    return stream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f6c85ffa816c86be877aa7a5029a5daa1336e7f","date":1259617761,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#tokenStream(String,String).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#tokenStream(String,String).mjava","sourceNew":"  /**\n   * Creates a token stream that tokenizes the given string into token terms\n   * (aka words).\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param text\n   *            the string to tokenize\n   * @return a new token stream\n   */\n  public TokenStream tokenStream(String fieldName, String text) {\n    // Ideally the Analyzer superclass should have a method with the same signature, \n    // with a default impl that simply delegates to the StringReader flavour. \n    if (text == null) \n      throw new IllegalArgumentException(\"text must not be null\");\n    \n    TokenStream stream;\n    if (pattern == NON_WORD_PATTERN) { // fast path\n      stream = new FastStringTokenizer(text, true, toLowerCase, stopWords);\n    }\n    else if (pattern == WHITESPACE_PATTERN) { // fast path\n      stream = new FastStringTokenizer(text, false, toLowerCase, stopWords);\n    }\n    else {\n      stream = new PatternTokenizer(text, pattern, toLowerCase);\n      if (stopWords != null) stream = new StopFilter(matchVersion, stream, stopWords);\n    }\n    \n    return stream;\n  }\n\n","sourceOld":"  /**\n   * Creates a token stream that tokenizes the given string into token terms\n   * (aka words).\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param text\n   *            the string to tokenize\n   * @return a new token stream\n   */\n  public TokenStream tokenStream(String fieldName, String text) {\n    // Ideally the Analyzer superclass should have a method with the same signature, \n    // with a default impl that simply delegates to the StringReader flavour. \n    if (text == null) \n      throw new IllegalArgumentException(\"text must not be null\");\n    \n    TokenStream stream;\n    if (pattern == NON_WORD_PATTERN) { // fast path\n      stream = new FastStringTokenizer(text, true, toLowerCase, stopWords);\n    }\n    else if (pattern == WHITESPACE_PATTERN) { // fast path\n      stream = new FastStringTokenizer(text, false, toLowerCase, stopWords);\n    }\n    else {\n      stream = new PatternTokenizer(text, pattern, toLowerCase);\n      if (stopWords != null) stream = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion), stream, stopWords);\n    }\n    \n    return stream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#tokenStream(String,String).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#tokenStream(String,String).mjava","sourceNew":"  /**\n   * Creates a token stream that tokenizes the given string into token terms\n   * (aka words).\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param text\n   *            the string to tokenize\n   * @return a new token stream\n   */\n  public TokenStream tokenStream(String fieldName, String text) {\n    // Ideally the Analyzer superclass should have a method with the same signature, \n    // with a default impl that simply delegates to the StringReader flavour. \n    if (text == null) \n      throw new IllegalArgumentException(\"text must not be null\");\n    \n    TokenStream stream;\n    if (pattern == NON_WORD_PATTERN) { // fast path\n      stream = new FastStringTokenizer(text, true, toLowerCase, stopWords);\n    }\n    else if (pattern == WHITESPACE_PATTERN) { // fast path\n      stream = new FastStringTokenizer(text, false, toLowerCase, stopWords);\n    }\n    else {\n      stream = new PatternTokenizer(text, pattern, toLowerCase);\n      if (stopWords != null) stream = new StopFilter(matchVersion, stream, stopWords);\n    }\n    \n    return stream;\n  }\n\n","sourceOld":"  /**\n   * Creates a token stream that tokenizes the given string into token terms\n   * (aka words).\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param text\n   *            the string to tokenize\n   * @return a new token stream\n   */\n  public TokenStream tokenStream(String fieldName, String text) {\n    // Ideally the Analyzer superclass should have a method with the same signature, \n    // with a default impl that simply delegates to the StringReader flavour. \n    if (text == null) \n      throw new IllegalArgumentException(\"text must not be null\");\n    \n    TokenStream stream;\n    if (pattern == NON_WORD_PATTERN) { // fast path\n      stream = new FastStringTokenizer(text, true, toLowerCase, stopWords);\n    }\n    else if (pattern == WHITESPACE_PATTERN) { // fast path\n      stream = new FastStringTokenizer(text, false, toLowerCase, stopWords);\n    }\n    else {\n      stream = new PatternTokenizer(text, pattern, toLowerCase);\n      if (stopWords != null) stream = new StopFilter(matchVersion, stream, stopWords);\n    }\n    \n    return stream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d8c222875ac4ef7e08f3e25d40508b821d711ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["0d8c222875ac4ef7e08f3e25d40508b821d711ff"]},"commit2Childs":{"0d8c222875ac4ef7e08f3e25d40508b821d711ff":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d8c222875ac4ef7e08f3e25d40508b821d711ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}