{"path":"src/test/org/apache/lucene/analysis/TestTeeTokenFilter#test().mjava","commits":[{"id":"1f7d76c5e8bcee481159c0dbc4aa05f88642c0cc","date":1243692318,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestTeeTokenFilter#test().mjava","pathOld":"src/test/org/apache/lucene/analysis/TeeSinkTokenTest#test().mjava","sourceNew":"  public void test() throws IOException {\n\n    SinkTokenizer sink1 = new SinkTokenizer(null) {\n      public void add(AttributeSource a) throws IOException {\n        TermAttribute termAtt = null;\n        if (a.hasAttribute(TermAttribute.class)) {\n          termAtt = (TermAttribute) a.getAttribute(TermAttribute.class);\n        }\n        if (termAtt != null && termAtt.term().equalsIgnoreCase(\"The\")) {\n          super.add(a);\n        }\n      }\n    };\n    TokenStream source = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())), sink1);\n    int i = 0;\n    TermAttribute termAtt = (TermAttribute) source.getAttribute(TermAttribute.class);\n    while (source.incrementToken()) {\n      assertTrue(termAtt.term() + \" is not equal to \" + tokens1[i], termAtt.term().equals(tokens1[i]) == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + tokens1.length, i == tokens1.length);\n    assertTrue(\"sink1 Size: \" + sink1.getTokens().size() + \" is not: \" + 2, sink1.getTokens().size() == 2);\n    i = 0;\n    termAtt = (TermAttribute) sink1.getAttribute(TermAttribute.class);\n    while (sink1.incrementToken()) {\n      assertTrue(termAtt.term() + \" is not equal to \" + \"The\", termAtt.term().equalsIgnoreCase(\"The\") == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + sink1.getTokens().size(), i == sink1.getTokens().size());\n  }\n\n","sourceOld":"  public void test() throws IOException {\n\n    SinkTokenizer sink1 = new SinkTokenizer(null) {\n      public void add(AttributeSource a) throws IOException {\n        TermAttribute termAtt = null;\n        if (a.hasAttribute(TermAttribute.class)) {\n          termAtt = (TermAttribute) a.getAttribute(TermAttribute.class);\n        }\n        if (termAtt != null && termAtt.term().equalsIgnoreCase(\"The\")) {\n          super.add(a);\n        }\n      }\n    };\n    TokenStream source = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())), sink1);\n    int i = 0;\n    TermAttribute termAtt = (TermAttribute) source.getAttribute(TermAttribute.class);\n    while (source.incrementToken()) {\n      assertTrue(termAtt.term() + \" is not equal to \" + tokens1[i], termAtt.term().equals(tokens1[i]) == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + tokens1.length, i == tokens1.length);\n    assertTrue(\"sink1 Size: \" + sink1.getTokens().size() + \" is not: \" + 2, sink1.getTokens().size() == 2);\n    i = 0;\n    termAtt = (TermAttribute) sink1.getAttribute(TermAttribute.class);\n    while (sink1.incrementToken()) {\n      assertTrue(termAtt.term() + \" is not equal to \" + \"The\", termAtt.term().equalsIgnoreCase(\"The\") == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + sink1.getTokens().size(), i == sink1.getTokens().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestTeeTokenFilter#test().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestTeeTokenFilter#test().mjava","sourceNew":"  public void test() throws IOException {\n\n    SinkTokenizer sink1 = new SinkTokenizer(null) {\n      public void add(Token t) {\n        if (t != null && t.term().equalsIgnoreCase(\"The\")) {\n          super.add(t);\n        }\n      }\n    };\n    TokenStream source = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())), sink1);\n    int i = 0;\n    final Token reusableToken = new Token();\n    for (Token nextToken = source.next(reusableToken); nextToken != null; nextToken = source.next(reusableToken)) {\n      assertTrue(nextToken.term() + \" is not equal to \" + tokens1[i], nextToken.term().equals(tokens1[i]) == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + tokens1.length, i == tokens1.length);\n    assertTrue(\"sink1 Size: \" + sink1.getTokens().size() + \" is not: \" + 2, sink1.getTokens().size() == 2);\n    i = 0;\n    for (Token token = sink1.next(reusableToken); token != null; token = sink1.next(reusableToken)) {\n      assertTrue(token.term() + \" is not equal to \" + \"The\", token.term().equalsIgnoreCase(\"The\") == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + sink1.getTokens().size(), i == sink1.getTokens().size());\n  }\n\n","sourceOld":"  public void test() throws IOException {\n\n    SinkTokenizer sink1 = new SinkTokenizer(null) {\n      public void add(AttributeSource a) throws IOException {\n        TermAttribute termAtt = null;\n        if (a.hasAttribute(TermAttribute.class)) {\n          termAtt = (TermAttribute) a.getAttribute(TermAttribute.class);\n        }\n        if (termAtt != null && termAtt.term().equalsIgnoreCase(\"The\")) {\n          super.add(a);\n        }\n      }\n    };\n    TokenStream source = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())), sink1);\n    int i = 0;\n    TermAttribute termAtt = (TermAttribute) source.getAttribute(TermAttribute.class);\n    while (source.incrementToken()) {\n      assertTrue(termAtt.term() + \" is not equal to \" + tokens1[i], termAtt.term().equals(tokens1[i]) == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + tokens1.length, i == tokens1.length);\n    assertTrue(\"sink1 Size: \" + sink1.getTokens().size() + \" is not: \" + 2, sink1.getTokens().size() == 2);\n    i = 0;\n    termAtt = (TermAttribute) sink1.getAttribute(TermAttribute.class);\n    while (sink1.incrementToken()) {\n      assertTrue(termAtt.term() + \" is not equal to \" + \"The\", termAtt.term().equalsIgnoreCase(\"The\") == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + sink1.getTokens().size(), i == sink1.getTokens().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/analysis/TestTeeTokenFilter#test().mjava","sourceNew":null,"sourceOld":"  public void test() throws IOException {\n\n    SinkTokenizer sink1 = new SinkTokenizer(null) {\n      public void add(Token t) {\n        if (t != null && t.term().equalsIgnoreCase(\"The\")) {\n          super.add(t);\n        }\n      }\n    };\n    TokenStream source = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())), sink1);\n    int i = 0;\n    final Token reusableToken = new Token();\n    for (Token nextToken = source.next(reusableToken); nextToken != null; nextToken = source.next(reusableToken)) {\n      assertTrue(nextToken.term() + \" is not equal to \" + tokens1[i], nextToken.term().equals(tokens1[i]) == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + tokens1.length, i == tokens1.length);\n    assertTrue(\"sink1 Size: \" + sink1.getTokens().size() + \" is not: \" + 2, sink1.getTokens().size() == 2);\n    i = 0;\n    for (Token token = sink1.next(reusableToken); token != null; token = sink1.next(reusableToken)) {\n      assertTrue(token.term() + \" is not equal to \" + \"The\", token.term().equalsIgnoreCase(\"The\") == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + sink1.getTokens().size(), i == sink1.getTokens().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/analysis/TestTeeTokenFilter#test().mjava","sourceNew":null,"sourceOld":"  public void test() throws IOException {\n\n    SinkTokenizer sink1 = new SinkTokenizer(null) {\n      public void add(Token t) {\n        if (t != null && t.term().equalsIgnoreCase(\"The\")) {\n          super.add(t);\n        }\n      }\n    };\n    TokenStream source = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())), sink1);\n    int i = 0;\n    final Token reusableToken = new Token();\n    for (Token nextToken = source.next(reusableToken); nextToken != null; nextToken = source.next(reusableToken)) {\n      assertTrue(nextToken.term() + \" is not equal to \" + tokens1[i], nextToken.term().equals(tokens1[i]) == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + tokens1.length, i == tokens1.length);\n    assertTrue(\"sink1 Size: \" + sink1.getTokens().size() + \" is not: \" + 2, sink1.getTokens().size() == 2);\n    i = 0;\n    for (Token token = sink1.next(reusableToken); token != null; token = sink1.next(reusableToken)) {\n      assertTrue(token.term() + \" is not equal to \" + \"The\", token.term().equalsIgnoreCase(\"The\") == true);\n      i++;\n    }\n    assertTrue(i + \" does not equal: \" + sink1.getTokens().size(), i == sink1.getTokens().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1f7d76c5e8bcee481159c0dbc4aa05f88642c0cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a046c0c310bc77931fc8441bd920053b607dd14"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["1f7d76c5e8bcee481159c0dbc4aa05f88642c0cc"]},"commit2Childs":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f7d76c5e8bcee481159c0dbc4aa05f88642c0cc"],"0a046c0c310bc77931fc8441bd920053b607dd14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f7d76c5e8bcee481159c0dbc4aa05f88642c0cc":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}