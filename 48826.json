{"path":"lucene/core/src/test/org/apache/lucene/analysis/TestCharacterUtils#testConversions().mjava","commits":[{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharacterUtils#testConversions().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testConversions().mjava","sourceNew":"  public void testConversions() {\n    final char[] orig = TestUtil.randomUnicodeString(random(), 100).toCharArray();\n    final int[] buf = new int[orig.length];\n    final char[] restored = new char[buf.length];\n    final int o1 = TestUtil.nextInt(random(), 0, Math.min(5, orig.length));\n    final int o2 = TestUtil.nextInt(random(), 0, o1);\n    final int o3 = TestUtil.nextInt(random(), 0, o1);\n    final int codePointCount = CharacterUtils.toCodePoints(orig, o1, orig.length - o1, buf, o2);\n    final int charCount = CharacterUtils.toChars(buf, o2, codePointCount, restored, o3);\n    assertEquals(orig.length - o1, charCount);\n    assertArrayEquals(Arrays.copyOfRange(orig, o1, o1 + charCount), Arrays.copyOfRange(restored, o3, o3 + charCount));\n  }\n\n","sourceOld":"  public void testConversions() {\n    final char[] orig = TestUtil.randomUnicodeString(random(), 100).toCharArray();\n    final int[] buf = new int[orig.length];\n    final char[] restored = new char[buf.length];\n    final int o1 = TestUtil.nextInt(random(), 0, Math.min(5, orig.length));\n    final int o2 = TestUtil.nextInt(random(), 0, o1);\n    final int o3 = TestUtil.nextInt(random(), 0, o1);\n    final int codePointCount = CharacterUtils.toCodePoints(orig, o1, orig.length - o1, buf, o2);\n    final int charCount = CharacterUtils.toChars(buf, o2, codePointCount, restored, o3);\n    assertEquals(orig.length - o1, charCount);\n    assertArrayEquals(Arrays.copyOfRange(orig, o1, o1 + charCount), Arrays.copyOfRange(restored, o3, o3 + charCount));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharacterUtils#testConversions().mjava","pathOld":"/dev/null","sourceNew":"  public void testConversions() {\n    final char[] orig = TestUtil.randomUnicodeString(random(), 100).toCharArray();\n    final int[] buf = new int[orig.length];\n    final char[] restored = new char[buf.length];\n    final int o1 = TestUtil.nextInt(random(), 0, Math.min(5, orig.length));\n    final int o2 = TestUtil.nextInt(random(), 0, o1);\n    final int o3 = TestUtil.nextInt(random(), 0, o1);\n    final int codePointCount = CharacterUtils.toCodePoints(orig, o1, orig.length - o1, buf, o2);\n    final int charCount = CharacterUtils.toChars(buf, o2, codePointCount, restored, o3);\n    assertEquals(orig.length - o1, charCount);\n    assertArrayEquals(Arrays.copyOfRange(orig, o1, o1 + charCount), Arrays.copyOfRange(restored, o3, o3 + charCount));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharacterUtils#testConversions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestCharacterUtils#testConversions().mjava","sourceNew":"  public void testConversions() {\n    final char[] orig = TestUtil.randomUnicodeString(random(), 100).toCharArray();\n    final int[] buf = new int[orig.length];\n    final char[] restored = new char[buf.length];\n    final int o1 = TestUtil.nextInt(random(), 0, Math.min(5, orig.length));\n    final int o2 = TestUtil.nextInt(random(), 0, o1);\n    final int o3 = TestUtil.nextInt(random(), 0, o1);\n    final int codePointCount = CharacterUtils.toCodePoints(orig, o1, orig.length - o1, buf, o2);\n    final int charCount = CharacterUtils.toChars(buf, o2, codePointCount, restored, o3);\n    assertEquals(orig.length - o1, charCount);\n    assertArrayEquals(ArrayUtil.copyOfSubArray(orig, o1, o1 + charCount), ArrayUtil.copyOfSubArray(restored, o3, o3 + charCount));\n  }\n\n","sourceOld":"  public void testConversions() {\n    final char[] orig = TestUtil.randomUnicodeString(random(), 100).toCharArray();\n    final int[] buf = new int[orig.length];\n    final char[] restored = new char[buf.length];\n    final int o1 = TestUtil.nextInt(random(), 0, Math.min(5, orig.length));\n    final int o2 = TestUtil.nextInt(random(), 0, o1);\n    final int o3 = TestUtil.nextInt(random(), 0, o1);\n    final int codePointCount = CharacterUtils.toCodePoints(orig, o1, orig.length - o1, buf, o2);\n    final int charCount = CharacterUtils.toChars(buf, o2, codePointCount, restored, o3);\n    assertEquals(orig.length - o1, charCount);\n    assertArrayEquals(Arrays.copyOfRange(orig, o1, o1 + charCount), Arrays.copyOfRange(restored, o3, o3 + charCount));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharacterUtils#testConversions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestCharacterUtils#testConversions().mjava","sourceNew":"  public void testConversions() {\n    final char[] orig = TestUtil.randomUnicodeString(random(), 100).toCharArray();\n    final int[] buf = new int[orig.length];\n    final char[] restored = new char[buf.length];\n    final int o1 = TestUtil.nextInt(random(), 0, Math.min(5, orig.length));\n    final int o2 = TestUtil.nextInt(random(), 0, o1);\n    final int o3 = TestUtil.nextInt(random(), 0, o1);\n    final int codePointCount = CharacterUtils.toCodePoints(orig, o1, orig.length - o1, buf, o2);\n    final int charCount = CharacterUtils.toChars(buf, o2, codePointCount, restored, o3);\n    assertEquals(orig.length - o1, charCount);\n    assertArrayEquals(ArrayUtil.copyOfSubArray(orig, o1, o1 + charCount), ArrayUtil.copyOfSubArray(restored, o3, o3 + charCount));\n  }\n\n","sourceOld":"  public void testConversions() {\n    final char[] orig = TestUtil.randomUnicodeString(random(), 100).toCharArray();\n    final int[] buf = new int[orig.length];\n    final char[] restored = new char[buf.length];\n    final int o1 = TestUtil.nextInt(random(), 0, Math.min(5, orig.length));\n    final int o2 = TestUtil.nextInt(random(), 0, o1);\n    final int o3 = TestUtil.nextInt(random(), 0, o1);\n    final int codePointCount = CharacterUtils.toCodePoints(orig, o1, orig.length - o1, buf, o2);\n    final int charCount = CharacterUtils.toChars(buf, o2, codePointCount, restored, o3);\n    assertEquals(orig.length - o1, charCount);\n    assertArrayEquals(Arrays.copyOfRange(orig, o1, o1 + charCount), Arrays.copyOfRange(restored, o3, o3 + charCount));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharacterUtils#testConversions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestCharacterUtils#testConversions().mjava","sourceNew":"  public void testConversions() {\n    final char[] orig = TestUtil.randomUnicodeString(random(), 100).toCharArray();\n    final int[] buf = new int[orig.length];\n    final char[] restored = new char[buf.length];\n    final int o1 = TestUtil.nextInt(random(), 0, Math.min(5, orig.length));\n    final int o2 = TestUtil.nextInt(random(), 0, o1);\n    final int o3 = TestUtil.nextInt(random(), 0, o1);\n    final int codePointCount = CharacterUtils.toCodePoints(orig, o1, orig.length - o1, buf, o2);\n    final int charCount = CharacterUtils.toChars(buf, o2, codePointCount, restored, o3);\n    assertEquals(orig.length - o1, charCount);\n    assertArrayEquals(ArrayUtil.copyOfSubArray(orig, o1, o1 + charCount), ArrayUtil.copyOfSubArray(restored, o3, o3 + charCount));\n  }\n\n","sourceOld":"  public void testConversions() {\n    final char[] orig = TestUtil.randomUnicodeString(random(), 100).toCharArray();\n    final int[] buf = new int[orig.length];\n    final char[] restored = new char[buf.length];\n    final int o1 = TestUtil.nextInt(random(), 0, Math.min(5, orig.length));\n    final int o2 = TestUtil.nextInt(random(), 0, o1);\n    final int o3 = TestUtil.nextInt(random(), 0, o1);\n    final int codePointCount = CharacterUtils.toCodePoints(orig, o1, orig.length - o1, buf, o2);\n    final int charCount = CharacterUtils.toChars(buf, o2, codePointCount, restored, o3);\n    assertEquals(orig.length - o1, charCount);\n    assertArrayEquals(Arrays.copyOfRange(orig, o1, o1 + charCount), Arrays.copyOfRange(restored, o3, o3 + charCount));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","9798d0818e7a880546802b509792d3f3d57babd2"],"9798d0818e7a880546802b509792d3f3d57babd2":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}