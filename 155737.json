{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNearVersusPhrase().mjava","commits":[{"id":"c32d7e56f0a6befb6ce6c68dfc4030873585d4cf","date":1331559369,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNearVersusPhrase().mjava","pathOld":"/dev/null","sourceNew":"  /** SpanNearQuery([A, B], 0, true) = \"A B\" */\n  public void testSpanNearVersusPhrase() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { new SpanTermQuery(t1), new SpanTermQuery(t2) };\n    SpanNearQuery q1 = new SpanNearQuery(subquery, 0, true);\n    PhraseQuery q2 = new PhraseQuery();\n    q2.add(t1);\n    q2.add(t2);\n    assertSameSet(q1, q2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["28b61f1c9cf357a13efbb645d116d056feb80cf6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNearVersusPhrase().mjava","pathOld":"/dev/null","sourceNew":"  /** SpanNearQuery([A, B], 0, true) = \"A B\" */\n  public void testSpanNearVersusPhrase() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { new SpanTermQuery(t1), new SpanTermQuery(t2) };\n    SpanNearQuery q1 = new SpanNearQuery(subquery, 0, true);\n    PhraseQuery q2 = new PhraseQuery();\n    q2.add(t1);\n    q2.add(t2);\n    assertSameSet(q1, q2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28b61f1c9cf357a13efbb645d116d056feb80cf6","date":1428863054,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNearVersusPhrase().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNearVersusPhrase().mjava","sourceNew":"  /** SpanNearQuery([A, B], 0, true) = \"A B\" */\n  public void testSpanNearVersusPhrase() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { \n                             span(new SpanTermQuery(t1)), \n                             span(new SpanTermQuery(t2)) \n                           };\n    SpanQuery q1 = span(new SpanNearQuery(subquery, 0, true));\n    PhraseQuery q2 = new PhraseQuery();\n    q2.add(t1);\n    q2.add(t2);\n    assertSameSet(q1, q2);\n  }\n\n","sourceOld":"  /** SpanNearQuery([A, B], 0, true) = \"A B\" */\n  public void testSpanNearVersusPhrase() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { new SpanTermQuery(t1), new SpanTermQuery(t2) };\n    SpanNearQuery q1 = new SpanNearQuery(subquery, 0, true);\n    PhraseQuery q2 = new PhraseQuery();\n    q2.add(t1);\n    q2.add(t2);\n    assertSameSet(q1, q2);\n  }\n\n","bugFix":["c32d7e56f0a6befb6ce6c68dfc4030873585d4cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNearVersusPhrase().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNearVersusPhrase().mjava","sourceNew":"  /** SpanNearQuery([A, B], 0, true) = \"A B\" */\n  public void testSpanNearVersusPhrase() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { \n                             spanQuery(new SpanTermQuery(t1)), \n                             spanQuery(new SpanTermQuery(t2)) \n                           };\n    SpanQuery q1 = spanQuery(new SpanNearQuery(subquery, 0, true));\n    PhraseQuery q2 = new PhraseQuery();\n    q2.add(t1);\n    q2.add(t2);\n    assertSameSet(q1, q2);\n  }\n\n","sourceOld":"  /** SpanNearQuery([A, B], 0, true) = \"A B\" */\n  public void testSpanNearVersusPhrase() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { \n                             span(new SpanTermQuery(t1)), \n                             span(new SpanTermQuery(t2)) \n                           };\n    SpanQuery q1 = span(new SpanNearQuery(subquery, 0, true));\n    PhraseQuery q2 = new PhraseQuery();\n    q2.add(t1);\n    q2.add(t2);\n    assertSameSet(q1, q2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNearVersusPhrase().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNearVersusPhrase().mjava","sourceNew":"  /** SpanNearQuery([A, B], 0, true) = \"A B\" */\n  public void testSpanNearVersusPhrase() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { \n                             spanQuery(new SpanTermQuery(t1)), \n                             spanQuery(new SpanTermQuery(t2)) \n                           };\n    SpanQuery q1 = spanQuery(new SpanNearQuery(subquery, 0, true));\n    PhraseQuery q2 = new PhraseQuery(t1.field(), t1.bytes(), t2.bytes());\n    assertSameSet(q1, q2);\n  }\n\n","sourceOld":"  /** SpanNearQuery([A, B], 0, true) = \"A B\" */\n  public void testSpanNearVersusPhrase() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { \n                             spanQuery(new SpanTermQuery(t1)), \n                             spanQuery(new SpanTermQuery(t2)) \n                           };\n    SpanQuery q1 = spanQuery(new SpanNearQuery(subquery, 0, true));\n    PhraseQuery q2 = new PhraseQuery();\n    q2.add(t1);\n    q2.add(t2);\n    assertSameSet(q1, q2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e10aa10647f2ded96fbb246cbbd6e13eb8b032dc","date":1434656225,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNearVersusPhrase().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNearVersusPhrase().mjava","sourceNew":"  /** SpanNearQuery([A, B], 0, true) = \"A B\" */\n  public void testSpanNearVersusPhrase() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { \n                             spanQuery(new SpanTermQuery(t1)), \n                             spanQuery(new SpanTermQuery(t2)) \n                           };\n    SpanQuery q1 = spanQuery(new SpanNearQuery(subquery, 0, true));\n    PhraseQuery q2 = new PhraseQuery(t1.field(), t1.bytes(), t2.bytes());\n    assertSameScores(q1, q2);\n  }\n\n","sourceOld":"  /** SpanNearQuery([A, B], 0, true) = \"A B\" */\n  public void testSpanNearVersusPhrase() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { \n                             spanQuery(new SpanTermQuery(t1)), \n                             spanQuery(new SpanTermQuery(t2)) \n                           };\n    SpanQuery q1 = spanQuery(new SpanNearQuery(subquery, 0, true));\n    PhraseQuery q2 = new PhraseQuery(t1.field(), t1.bytes(), t2.bytes());\n    assertSameSet(q1, q2);\n  }\n\n","bugFix":null,"bugIntro":["d823ea406ee58bc030067457edd1daa86cb19014"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d823ea406ee58bc030067457edd1daa86cb19014","date":1434667259,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNearVersusPhrase().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNearVersusPhrase().mjava","sourceNew":"  /** SpanNearQuery([A, B], 0, true) = \"A B\" */\n  public void testSpanNearVersusPhrase() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { \n                             spanQuery(new SpanTermQuery(t1)), \n                             spanQuery(new SpanTermQuery(t2)) \n                           };\n    SpanQuery q1 = spanQuery(new SpanNearQuery(subquery, 0, true));\n    PhraseQuery q2 = new PhraseQuery(t1.field(), t1.bytes(), t2.bytes());\n    if (t1.equals(t2)) {\n      assertSameSet(q1, q2);\n    } else {\n      assertSameScores(q1, q2);\n    }\n  }\n\n","sourceOld":"  /** SpanNearQuery([A, B], 0, true) = \"A B\" */\n  public void testSpanNearVersusPhrase() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { \n                             spanQuery(new SpanTermQuery(t1)), \n                             spanQuery(new SpanTermQuery(t2)) \n                           };\n    SpanQuery q1 = spanQuery(new SpanNearQuery(subquery, 0, true));\n    PhraseQuery q2 = new PhraseQuery(t1.field(), t1.bytes(), t2.bytes());\n    assertSameScores(q1, q2);\n  }\n\n","bugFix":["e10aa10647f2ded96fbb246cbbd6e13eb8b032dc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c32d7e56f0a6befb6ce6c68dfc4030873585d4cf"],"c32d7e56f0a6befb6ce6c68dfc4030873585d4cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9e1499c5d26c936238506df90a3c02c76707722":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["28b61f1c9cf357a13efbb645d116d056feb80cf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e10aa10647f2ded96fbb246cbbd6e13eb8b032dc":["e9e1499c5d26c936238506df90a3c02c76707722"],"28b61f1c9cf357a13efbb645d116d056feb80cf6":["c32d7e56f0a6befb6ce6c68dfc4030873585d4cf"],"d823ea406ee58bc030067457edd1daa86cb19014":["e10aa10647f2ded96fbb246cbbd6e13eb8b032dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d823ea406ee58bc030067457edd1daa86cb19014"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"c32d7e56f0a6befb6ce6c68dfc4030873585d4cf":["38e3b736c7ca086d61b7dbb841c905ee115490da","28b61f1c9cf357a13efbb645d116d056feb80cf6"],"e9e1499c5d26c936238506df90a3c02c76707722":["e10aa10647f2ded96fbb246cbbd6e13eb8b032dc"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["e9e1499c5d26c936238506df90a3c02c76707722"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","c32d7e56f0a6befb6ce6c68dfc4030873585d4cf"],"e10aa10647f2ded96fbb246cbbd6e13eb8b032dc":["d823ea406ee58bc030067457edd1daa86cb19014"],"28b61f1c9cf357a13efbb645d116d056feb80cf6":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"d823ea406ee58bc030067457edd1daa86cb19014":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}