{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","sourceNew":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuilder b = new StringBuilder();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuilder b = new StringBuilder();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testDiverseDocs().mjava","sourceNew":null,"sourceOld":"    public void testDiverseDocs() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setRAMBufferSizeMB(0.5);\n      Random rand = newRandom();\n      for(int i=0;i<3;i++) {\n        // First, docs where every term is unique (heavy on\n        // Posting instances)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          for(int k=0;k<100;k++) {\n            doc.add(new Field(\"field\", Integer.toString(rand.nextInt()), Field.Store.YES, Field.Index.ANALYZED));\n          }\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs (heavy on byte blocks)\n        for(int j=0;j<100;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n\n        // Next, many single term docs where only one term\n        // occurs but the terms are very long (heavy on\n        // char[] arrays)\n        for(int j=0;j<100;j++) {\n          StringBuilder b = new StringBuilder();\n          String x = Integer.toString(j) + \".\";\n          for(int k=0;k<1000;k++)\n            b.append(x);\n          String longTerm = b.toString();\n\n          Document doc = new Document();\n          doc.add(new Field(\"field\", longTerm, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1000).scoreDocs;\n      assertEquals(300, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}