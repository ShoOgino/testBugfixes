{"path":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","sourceNew":"  void doPerfTest(int iter, int cacheSize, int maxKey) {\n    long start = System.currentTimeMillis();\n\n    int lowerWaterMark = cacheSize;\n    int upperWaterMark = (int)(lowerWaterMark * 1.1);\n\n    Random r = random;\n    ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, null);\n    boolean getSize=false;\n    int minSize=0,maxSize=0;\n    for (int i=0; i<iter; i++) {\n      cache.put(r.nextInt(maxKey),\"TheValue\");\n      int sz = cache.size();\n      if (!getSize && sz >= cacheSize) {\n        getSize = true;\n        minSize = sz;\n      } else {\n        if (sz < minSize) minSize=sz;\n        else if (sz > maxSize) maxSize=sz;\n      }\n    }\n    cache.destroy();\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \", minSize=\"+minSize+\",maxSize=\"+maxSize);\n  }\n\n","sourceOld":"  void doPerfTest(int iter, int cacheSize, int maxKey) {\n    long start = System.currentTimeMillis();\n\n    int lowerWaterMark = cacheSize;\n    int upperWaterMark = (int)(lowerWaterMark * 1.1);\n\n    Random r = random;\n    ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, null);\n    boolean getSize=false;\n    int minSize=0,maxSize=0;\n    for (int i=0; i<iter; i++) {\n      cache.put(r.nextInt(maxKey),\"TheValue\");\n      int sz = cache.size();\n      if (!getSize && sz >= cacheSize) {\n        getSize = true;\n        minSize = sz;\n      } else {\n        if (sz < minSize) minSize=sz;\n        else if (sz > maxSize) maxSize=sz;\n      }\n    }\n    cache.destroy();\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \", minSize=\"+minSize+\",maxSize=\"+maxSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","sourceNew":"  void doPerfTest(int iter, int cacheSize, int maxKey) {\n    long start = System.currentTimeMillis();\n\n    int lowerWaterMark = cacheSize;\n    int upperWaterMark = (int)(lowerWaterMark * 1.1);\n\n    Random r = random;\n    ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, null);\n    boolean getSize=false;\n    int minSize=0,maxSize=0;\n    for (int i=0; i<iter; i++) {\n      cache.put(r.nextInt(maxKey),\"TheValue\");\n      int sz = cache.size();\n      if (!getSize && sz >= cacheSize) {\n        getSize = true;\n        minSize = sz;\n      } else {\n        if (sz < minSize) minSize=sz;\n        else if (sz > maxSize) maxSize=sz;\n      }\n    }\n    cache.destroy();\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \", minSize=\"+minSize+\",maxSize=\"+maxSize);\n  }\n\n","sourceOld":"  void doPerfTest(int iter, int cacheSize, int maxKey) {\n    long start = System.currentTimeMillis();\n\n    int lowerWaterMark = cacheSize;\n    int upperWaterMark = (int)(lowerWaterMark * 1.1);\n\n    Random r = random;\n    ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, null);\n    boolean getSize=false;\n    int minSize=0,maxSize=0;\n    for (int i=0; i<iter; i++) {\n      cache.put(r.nextInt(maxKey),\"TheValue\");\n      int sz = cache.size();\n      if (!getSize && sz >= cacheSize) {\n        getSize = true;\n        minSize = sz;\n      } else {\n        if (sz < minSize) minSize=sz;\n        else if (sz > maxSize) maxSize=sz;\n      }\n    }\n    cache.destroy();\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \", minSize=\"+minSize+\",maxSize=\"+maxSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","sourceNew":"  void doPerfTest(int iter, int cacheSize, int maxKey) {\n    long start = System.currentTimeMillis();\n\n    int lowerWaterMark = cacheSize;\n    int upperWaterMark = (int)(lowerWaterMark * 1.1);\n\n    Random r = random;\n    ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, null);\n    boolean getSize=false;\n    int minSize=0,maxSize=0;\n    for (int i=0; i<iter; i++) {\n      cache.put(r.nextInt(maxKey),\"TheValue\");\n      int sz = cache.size();\n      if (!getSize && sz >= cacheSize) {\n        getSize = true;\n        minSize = sz;\n      } else {\n        if (sz < minSize) minSize=sz;\n        else if (sz > maxSize) maxSize=sz;\n      }\n    }\n    cache.destroy();\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \", minSize=\"+minSize+\",maxSize=\"+maxSize);\n  }\n\n","sourceOld":"  void doPerfTest(int iter, int cacheSize, int maxKey) {\n    long start = System.currentTimeMillis();\n\n    int lowerWaterMark = cacheSize;\n    int upperWaterMark = (int)(lowerWaterMark * 1.1);\n\n    Random r = random;\n    ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, null);\n    boolean getSize=false;\n    int minSize=0,maxSize=0;\n    for (int i=0; i<iter; i++) {\n      cache.put(r.nextInt(maxKey),\"TheValue\");\n      int sz = cache.size();\n      if (!getSize && sz >= cacheSize) {\n        getSize = true;\n        minSize = sz;\n      } else {\n        if (sz < minSize) minSize=sz;\n        else if (sz > maxSize) maxSize=sz;\n      }\n    }\n    cache.destroy();\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \", minSize=\"+minSize+\",maxSize=\"+maxSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","sourceNew":"  void doPerfTest(int iter, int cacheSize, int maxKey) {\n    long start = System.currentTimeMillis();\n\n    int lowerWaterMark = cacheSize;\n    int upperWaterMark = (int)(lowerWaterMark * 1.1);\n\n    Random r = random();\n    ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, null);\n    boolean getSize=false;\n    int minSize=0,maxSize=0;\n    for (int i=0; i<iter; i++) {\n      cache.put(r.nextInt(maxKey),\"TheValue\");\n      int sz = cache.size();\n      if (!getSize && sz >= cacheSize) {\n        getSize = true;\n        minSize = sz;\n      } else {\n        if (sz < minSize) minSize=sz;\n        else if (sz > maxSize) maxSize=sz;\n      }\n    }\n    cache.destroy();\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \", minSize=\"+minSize+\",maxSize=\"+maxSize);\n  }\n\n","sourceOld":"  void doPerfTest(int iter, int cacheSize, int maxKey) {\n    long start = System.currentTimeMillis();\n\n    int lowerWaterMark = cacheSize;\n    int upperWaterMark = (int)(lowerWaterMark * 1.1);\n\n    Random r = random;\n    ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, null);\n    boolean getSize=false;\n    int minSize=0,maxSize=0;\n    for (int i=0; i<iter; i++) {\n      cache.put(r.nextInt(maxKey),\"TheValue\");\n      int sz = cache.size();\n      if (!getSize && sz >= cacheSize) {\n        getSize = true;\n        minSize = sz;\n      } else {\n        if (sz < minSize) minSize=sz;\n        else if (sz > maxSize) maxSize=sz;\n      }\n    }\n    cache.destroy();\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \", minSize=\"+minSize+\",maxSize=\"+maxSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","sourceNew":"  void doPerfTest(int iter, int cacheSize, int maxKey) {\n    final RTimer timer = new RTimer();\n\n    int lowerWaterMark = cacheSize;\n    int upperWaterMark = (int)(lowerWaterMark * 1.1);\n\n    Random r = random();\n    ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, null);\n    boolean getSize=false;\n    int minSize=0,maxSize=0;\n    for (int i=0; i<iter; i++) {\n      cache.put(r.nextInt(maxKey),\"TheValue\");\n      int sz = cache.size();\n      if (!getSize && sz >= cacheSize) {\n        getSize = true;\n        minSize = sz;\n      } else {\n        if (sz < minSize) minSize=sz;\n        else if (sz > maxSize) maxSize=sz;\n      }\n    }\n    cache.destroy();\n\n    System.out.println(\"time=\" + timer.getTime() + \", minSize=\"+minSize+\",maxSize=\"+maxSize);\n  }\n\n","sourceOld":"  void doPerfTest(int iter, int cacheSize, int maxKey) {\n    long start = System.currentTimeMillis();\n\n    int lowerWaterMark = cacheSize;\n    int upperWaterMark = (int)(lowerWaterMark * 1.1);\n\n    Random r = random();\n    ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, null);\n    boolean getSize=false;\n    int minSize=0,maxSize=0;\n    for (int i=0; i<iter; i++) {\n      cache.put(r.nextInt(maxKey),\"TheValue\");\n      int sz = cache.size();\n      if (!getSize && sz >= cacheSize) {\n        getSize = true;\n        minSize = sz;\n      } else {\n        if (sz < minSize) minSize=sz;\n        else if (sz > maxSize) maxSize=sz;\n      }\n    }\n    cache.destroy();\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \", minSize=\"+minSize+\",maxSize=\"+maxSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83","date":1568645407,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","sourceNew":"  void doPerfTest(int iter, int cacheSize, int maxKey) {\n    final RTimer timer = new RTimer();\n\n    int lowerWaterMark = cacheSize;\n    int upperWaterMark = (int)(lowerWaterMark * 1.1);\n\n    Random r = random();\n    ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, null, -1);\n    boolean getSize=false;\n    int minSize=0,maxSize=0;\n    for (int i=0; i<iter; i++) {\n      cache.put(r.nextInt(maxKey),\"TheValue\");\n      int sz = cache.size();\n      if (!getSize && sz >= cacheSize) {\n        getSize = true;\n        minSize = sz;\n      } else {\n        if (sz < minSize) minSize=sz;\n        else if (sz > maxSize) maxSize=sz;\n      }\n    }\n    cache.destroy();\n\n    System.out.println(\"time=\" + timer.getTime() + \", minSize=\"+minSize+\",maxSize=\"+maxSize);\n  }\n\n","sourceOld":"  void doPerfTest(int iter, int cacheSize, int maxKey) {\n    final RTimer timer = new RTimer();\n\n    int lowerWaterMark = cacheSize;\n    int upperWaterMark = (int)(lowerWaterMark * 1.1);\n\n    Random r = random();\n    ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, null);\n    boolean getSize=false;\n    int minSize=0,maxSize=0;\n    for (int i=0; i<iter; i++) {\n      cache.put(r.nextInt(maxKey),\"TheValue\");\n      int sz = cache.size();\n      if (!getSize && sz >= cacheSize) {\n        getSize = true;\n        minSize = sz;\n      } else {\n        if (sz < minSize) minSize=sz;\n        else if (sz > maxSize) maxSize=sz;\n      }\n    }\n    cache.destroy();\n\n    System.out.println(\"time=\" + timer.getTime() + \", minSize=\"+minSize+\",maxSize=\"+maxSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","sourceNew":null,"sourceOld":"  void doPerfTest(int iter, int cacheSize, int maxKey) {\n    final RTimer timer = new RTimer();\n\n    int lowerWaterMark = cacheSize;\n    int upperWaterMark = (int)(lowerWaterMark * 1.1);\n\n    Random r = random();\n    ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, null, -1);\n    boolean getSize=false;\n    int minSize=0,maxSize=0;\n    for (int i=0; i<iter; i++) {\n      cache.put(r.nextInt(maxKey),\"TheValue\");\n      int sz = cache.size();\n      if (!getSize && sz >= cacheSize) {\n        getSize = true;\n        minSize = sz;\n      } else {\n        if (sz < minSize) minSize=sz;\n        else if (sz > maxSize) maxSize=sz;\n      }\n    }\n    cache.destroy();\n\n    System.out.println(\"time=\" + timer.getTime() + \", minSize=\"+minSize+\",maxSize=\"+maxSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"4d7d3943904804560937e6239effeebda0f920e4":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["4d7d3943904804560937e6239effeebda0f920e4"],"c26f00b574427b55127e869b935845554afde1fa":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}