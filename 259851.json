{"path":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","commits":[{"id":"5b15576cafd8b5d06857055c28f26912321937e3","date":1396452121,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if(canceled) {\n        log.info(\"This watcher is not active anymore {}\", leaderSeqPath);\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(seq, context, true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (IOException e) {\n        log.warn(\"\", e);\n      } catch (Exception e) {\n        log.warn(\"\", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if(canceled) {\n        log.info(\"This watcher is not active anymore {}\", leaderSeqPath);\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(seq, context, true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (IOException e) {\n        log.warn(\"\", e);\n      } catch (Exception e) {\n        log.warn(\"\", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d996c36bf85996da326201b915c87d41449d7f5","date":1403084374,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if(canceled) {\n        log.info(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode,-1,true);\n        }catch (KeeperException.NoNodeException nne) {\n          //expected . don't do anything\n        }  catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \"+myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(seq, context, true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (IOException e) {\n        log.warn(\"\", e);\n      } catch (Exception e) {\n        log.warn(\"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if(canceled) {\n        log.info(\"This watcher is not active anymore {}\", leaderSeqPath);\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(seq, context, true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (IOException e) {\n        log.warn(\"\", e);\n      } catch (Exception e) {\n        log.warn(\"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if(canceled) {\n        log.info(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode,-1,true);\n        }catch (KeeperException.NoNodeException nne) {\n          //expected . don't do anything\n        }  catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \"+myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(seq, context, true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (IOException e) {\n        log.warn(\"\", e);\n      } catch (Exception e) {\n        log.warn(\"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if(canceled) {\n        log.info(\"This watcher is not active anymore {}\", leaderSeqPath);\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(seq, context, true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (IOException e) {\n        log.warn(\"\", e);\n      } catch (Exception e) {\n        log.warn(\"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36c12edbcdbb0d38321151fe5bd8d2baa937487a","date":1405979696,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if (canceled) {\n        log.info(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode, -1, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // expected . don't do anything\n        } catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \" + myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(seq, context, true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (IOException e) {\n        log.warn(\"\", e);\n      } catch (Exception e) {\n        log.warn(\"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if(canceled) {\n        log.info(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode,-1,true);\n        }catch (KeeperException.NoNodeException nne) {\n          //expected . don't do anything\n        }  catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \"+myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(seq, context, true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (IOException e) {\n        log.warn(\"\", e);\n      } catch (Exception e) {\n        log.warn(\"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8650ae4e5d74a324411f8b7dd6201774f2b6fb2e","date":1406603075,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if (canceled) {\n        log.info(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode, -1, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // expected . don't do anything\n        } catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \" + myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(seq, context, true);\n      } catch (Exception e) {\n        log.warn(\"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if (canceled) {\n        log.info(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode, -1, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // expected . don't do anything\n        } catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \" + myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(seq, context, true);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (IOException e) {\n        log.warn(\"\", e);\n      } catch (Exception e) {\n        log.warn(\"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6b620c271c84c0f14919eec7b90083b292ee51","date":1419461736,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if (canceled) {\n        log.info(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode, -1, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // expected . don't do anything\n        } catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \" + myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(context, true);\n      } catch (Exception e) {\n        log.warn(\"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if (canceled) {\n        log.info(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode, -1, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // expected . don't do anything\n        } catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \" + myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(seq, context, true);\n      } catch (Exception e) {\n        log.warn(\"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f616abd7d3345b373ca3f5a49a3351a7a18eb741","date":1455910613,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if (canceled) {\n        log.info(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode, -1, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // expected . don't do anything\n        } catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \" + myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(context, true);\n      } catch (Exception e) {\n        log.warn(\"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if (canceled) {\n        log.info(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode, -1, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // expected . don't do anything\n        } catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \" + myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(context, true);\n      } catch (Exception e) {\n        log.warn(\"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4169a39455be564348e51f60d4dc9f77a80c2f9","date":1473707172,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if (canceled) {\n        log.info(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode, -1, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // expected . don't do anything\n        } catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \" + myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(context, true);\n      } catch (Exception e) {\n        if (!zkClient.isClosed()) {\n          log.warn(\"\", e);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if (canceled) {\n        log.info(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode, -1, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // expected . don't do anything\n        } catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \" + myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(context, true);\n      } catch (Exception e) {\n        log.warn(\"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if (canceled) {\n        log.info(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode, -1, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // expected . don't do anything\n        } catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \" + myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(context, true);\n      } catch (Exception e) {\n        if (!zkClient.isClosed()) {\n          log.warn(\"\", e);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if (canceled) {\n        log.info(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode, -1, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // expected . don't do anything\n        } catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \" + myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(context, true);\n      } catch (Exception e) {\n        log.warn(\"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if (canceled) {\n        log.debug(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode, -1, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // expected . don't do anything\n        } catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \" + myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(context, true);\n      } catch (Exception e) {\n        if (!zkClient.isClosed()) {\n          log.warn(\"\", e);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if (canceled) {\n        log.info(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode, -1, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // expected . don't do anything\n        } catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \" + myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(context, true);\n      } catch (Exception e) {\n        if (!zkClient.isClosed()) {\n          log.warn(\"\", e);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if (canceled) {\n        log.debug(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode, -1, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // expected . don't do anything\n        } catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \" + myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(context, true);\n      } catch (Exception e) {\n        if (!zkClient.isClosed()) {\n          log.warn(\"\", e);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if (canceled) {\n        log.info(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode, -1, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // expected . don't do anything\n        } catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \" + myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(context, true);\n      } catch (Exception e) {\n        log.warn(\"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if (canceled) {\n        log.debug(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode, -1, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // expected . don't do anything\n        } catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \" + myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(context, true);\n      } catch (Exception e) {\n        if (!zkClient.isClosed()) {\n          log.warn(\"\", e);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if (canceled) {\n        log.info(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode, -1, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // expected . don't do anything\n        } catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \" + myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(context, true);\n      } catch (Exception e) {\n        log.warn(\"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if (canceled) {\n        log.debug(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode, -1, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // expected . don't do anything\n        } catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \" + myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(context, true);\n      } catch (AlreadyClosedException e) {\n\n      } catch (Exception e) {\n        if (!zkClient.isClosed()) {\n          log.warn(\"\", e);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if (canceled) {\n        log.debug(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode, -1, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // expected . don't do anything\n        } catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \" + myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(context, true);\n      } catch (Exception e) {\n        if (!zkClient.isClosed()) {\n          log.warn(\"\", e);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector.ElectionWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if (canceled) {\n        log.debug(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode, -1, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // expected . don't do anything\n        } catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove {}\", myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(context, true);\n      } catch (AlreadyClosedException e) {\n\n      } catch (Exception e) {\n        if (!zkClient.isClosed()) {\n          log.warn(\"\", e);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      if (canceled) {\n        log.debug(\"This watcher is not active anymore {}\", myNode);\n        try {\n          zkClient.delete(myNode, -1, true);\n        } catch (KeeperException.NoNodeException nne) {\n          // expected . don't do anything\n        } catch (Exception e) {\n          log.warn(\"My watched node still exists and can't remove \" + myNode, e);\n        }\n        return;\n      }\n      try {\n        // am I the next leader?\n        checkIfIamLeader(context, true);\n      } catch (AlreadyClosedException e) {\n\n      } catch (Exception e) {\n        if (!zkClient.isClosed()) {\n          log.warn(\"\", e);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b15576cafd8b5d06857055c28f26912321937e3"],"7d996c36bf85996da326201b915c87d41449d7f5":["5b15576cafd8b5d06857055c28f26912321937e3"],"962cd4f5e313777f35da8f521265323e84184929":["89424def13674ea17829b41c5883c54ecc31a132"],"f616abd7d3345b373ca3f5a49a3351a7a18eb741":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"36c12edbcdbb0d38321151fe5bd8d2baa937487a":["7d996c36bf85996da326201b915c87d41449d7f5"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["5b15576cafd8b5d06857055c28f26912321937e3","7d996c36bf85996da326201b915c87d41449d7f5"],"ad4957cde742defe6db19689abdc267c5d948066":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f616abd7d3345b373ca3f5a49a3351a7a18eb741","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["f616abd7d3345b373ca3f5a49a3351a7a18eb741","d4169a39455be564348e51f60d4dc9f77a80c2f9"],"8650ae4e5d74a324411f8b7dd6201774f2b6fb2e":["36c12edbcdbb0d38321151fe5bd8d2baa937487a"],"5b15576cafd8b5d06857055c28f26912321937e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f616abd7d3345b373ca3f5a49a3351a7a18eb741","962cd4f5e313777f35da8f521265323e84184929"],"d4169a39455be564348e51f60d4dc9f77a80c2f9":["f616abd7d3345b373ca3f5a49a3351a7a18eb741"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["8650ae4e5d74a324411f8b7dd6201774f2b6fb2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad4957cde742defe6db19689abdc267c5d948066"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"7d996c36bf85996da326201b915c87d41449d7f5":["36c12edbcdbb0d38321151fe5bd8d2baa937487a","e57c73924f3b8c19defa62e96bfa34a4922d49c2"],"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f616abd7d3345b373ca3f5a49a3351a7a18eb741":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","d4169a39455be564348e51f60d4dc9f77a80c2f9"],"36c12edbcdbb0d38321151fe5bd8d2baa937487a":["8650ae4e5d74a324411f8b7dd6201774f2b6fb2e"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["ad4957cde742defe6db19689abdc267c5d948066"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"ad4957cde742defe6db19689abdc267c5d948066":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["962cd4f5e313777f35da8f521265323e84184929"],"5b15576cafd8b5d06857055c28f26912321937e3":["5eb2511ababf862ea11e10761c70ee560cd84510","7d996c36bf85996da326201b915c87d41449d7f5","e57c73924f3b8c19defa62e96bfa34a4922d49c2"],"8650ae4e5d74a324411f8b7dd6201774f2b6fb2e":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb2511ababf862ea11e10761c70ee560cd84510","5b15576cafd8b5d06857055c28f26912321937e3"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d4169a39455be564348e51f60d4dc9f77a80c2f9":["89424def13674ea17829b41c5883c54ecc31a132"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["f616abd7d3345b373ca3f5a49a3351a7a18eb741"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","e57c73924f3b8c19defa62e96bfa34a4922d49c2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}