{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter#difFiles(String[],String[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter#difFiles(String[],String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexFileDeleter#difFiles(String[],String[]).mjava","sourceNew":"  private static Set<String> difFiles(String[] files1, String[] files2) {\n    Set<String> set1 = new HashSet<String>();\n    Set<String> set2 = new HashSet<String>();\n    Set<String> extra = new HashSet<String>();\n    \n    for (int x=0; x < files1.length; x++) {\n      set1.add(files1[x]);\n    }\n    for (int x=0; x < files2.length; x++) {\n      set2.add(files2[x]);\n    }\n    Iterator<String> i1 = set1.iterator();\n    while (i1.hasNext()) {\n      String o = i1.next();\n      if (!set2.contains(o)) {\n        extra.add(o);\n      }\n    }\n    Iterator<String> i2 = set2.iterator();\n    while (i2.hasNext()) {\n      String o = i2.next();\n      if (!set1.contains(o)) {\n        extra.add(o);\n      }\n    }\n    return extra;\n  }\n\n","sourceOld":"  private static Set<String> difFiles(String[] files1, String[] files2) {\n    Set<String> set1 = new HashSet<String>();\n    Set<String> set2 = new HashSet<String>();\n    Set<String> extra = new HashSet<String>();\n    \n    for (int x=0; x < files1.length; x++) {\n      set1.add(files1[x]);\n    }\n    for (int x=0; x < files2.length; x++) {\n      set2.add(files2[x]);\n    }\n    Iterator<String> i1 = set1.iterator();\n    while (i1.hasNext()) {\n      String o = i1.next();\n      if (!set2.contains(o)) {\n        extra.add(o);\n      }\n    }\n    Iterator<String> i2 = set2.iterator();\n    while (i2.hasNext()) {\n      String o = i2.next();\n      if (!set1.contains(o)) {\n        extra.add(o);\n      }\n    }\n    return extra;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter#difFiles(String[],String[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter#difFiles(String[],String[]).mjava","sourceNew":"  private static Set<String> difFiles(String[] files1, String[] files2) {\n    Set<String> set1 = new HashSet<>();\n    Set<String> set2 = new HashSet<>();\n    Set<String> extra = new HashSet<>();\n    \n    for (int x=0; x < files1.length; x++) {\n      set1.add(files1[x]);\n    }\n    for (int x=0; x < files2.length; x++) {\n      set2.add(files2[x]);\n    }\n    Iterator<String> i1 = set1.iterator();\n    while (i1.hasNext()) {\n      String o = i1.next();\n      if (!set2.contains(o)) {\n        extra.add(o);\n      }\n    }\n    Iterator<String> i2 = set2.iterator();\n    while (i2.hasNext()) {\n      String o = i2.next();\n      if (!set1.contains(o)) {\n        extra.add(o);\n      }\n    }\n    return extra;\n  }\n\n","sourceOld":"  private static Set<String> difFiles(String[] files1, String[] files2) {\n    Set<String> set1 = new HashSet<String>();\n    Set<String> set2 = new HashSet<String>();\n    Set<String> extra = new HashSet<String>();\n    \n    for (int x=0; x < files1.length; x++) {\n      set1.add(files1[x]);\n    }\n    for (int x=0; x < files2.length; x++) {\n      set2.add(files2[x]);\n    }\n    Iterator<String> i1 = set1.iterator();\n    while (i1.hasNext()) {\n      String o = i1.next();\n      if (!set2.contains(o)) {\n        extra.add(o);\n      }\n    }\n    Iterator<String> i2 = set2.iterator();\n    while (i2.hasNext()) {\n      String o = i2.next();\n      if (!set1.contains(o)) {\n        extra.add(o);\n      }\n    }\n    return extra;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}