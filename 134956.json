{"path":"src/java/org/apache/solr/analysis/CommonGramsFilter#CommonGramsFilter(TokenStream,Set,boolean).mjava","commits":[{"id":"8f8f5dd9e0322b913c47628300753239d0d5ef7e","date":1253656557,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/CommonGramsFilter#CommonGramsFilter(TokenStream,Set,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct a token stream filtering the given input using a Set of common\n   * words to create bigrams, case-sensitive if ignoreCase is false (unless Set\n   * is CharArraySet). If <code>commonWords</code> is an instance of\n   * {@link CharArraySet} (true if <code>makeCommonSet()</code> was used to\n   * construct the set) it will be directly used and <code>ignoreCase</code>\n   * will be ignored since <code>CharArraySet</code> directly controls case\n   * sensitivity.\n   * <p/>\n   * If <code>commonWords</code> is not an instance of {@link CharArraySet}, a\n   * new CharArraySet will be constructed and <code>ignoreCase</code> will be\n   * used to specify the case sensitivity of that set.\n   * \n   * @param input TokenStream input in filter chain.\n   * @param commonWords The set of common words.\n   * @param ignoreCase -Ignore case when constructing bigrams for common words.\n   */\n  public CommonGramsFilter(TokenStream input, Set commonWords,\n      boolean ignoreCase) {\n    super(input);\n    if (commonWords instanceof CharArraySet) {\n      this.commonWords = (CharArraySet) commonWords;\n    } else {\n      this.commonWords = new CharArraySet(commonWords.size(), ignoreCase);\n      this.commonWords.addAll(commonWords);\n    }\n    init();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/CommonGramsFilter#CommonGramsFilter(TokenStream,Set,boolean).mjava","pathOld":"src/java/org/apache/solr/analysis/CommonGramsFilter#CommonGramsFilter(TokenStream,Set,boolean).mjava","sourceNew":"  /**\n   * Construct a token stream filtering the given input using a Set of common\n   * words to create bigrams, case-sensitive if ignoreCase is false (unless Set\n   * is CharArraySet). If <code>commonWords</code> is an instance of\n   * {@link CharArraySet} (true if <code>makeCommonSet()</code> was used to\n   * construct the set) it will be directly used and <code>ignoreCase</code>\n   * will be ignored since <code>CharArraySet</code> directly controls case\n   * sensitivity.\n   * <p/>\n   * If <code>commonWords</code> is not an instance of {@link CharArraySet}, a\n   * new CharArraySet will be constructed and <code>ignoreCase</code> will be\n   * used to specify the case sensitivity of that set.\n   * \n   * @param input TokenStream input in filter chain.\n   * @param commonWords The set of common words.\n   * @param ignoreCase -Ignore case when constructing bigrams for common words.\n   */\n  public CommonGramsFilter(TokenStream input, Set commonWords, boolean ignoreCase) {\n    super(input);\n    if (commonWords instanceof CharArraySet) {\n      this.commonWords = (CharArraySet) commonWords;\n    } else {\n      this.commonWords = new CharArraySet(commonWords.size(), ignoreCase);\n      this.commonWords.addAll(commonWords);\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a token stream filtering the given input using a Set of common\n   * words to create bigrams, case-sensitive if ignoreCase is false (unless Set\n   * is CharArraySet). If <code>commonWords</code> is an instance of\n   * {@link CharArraySet} (true if <code>makeCommonSet()</code> was used to\n   * construct the set) it will be directly used and <code>ignoreCase</code>\n   * will be ignored since <code>CharArraySet</code> directly controls case\n   * sensitivity.\n   * <p/>\n   * If <code>commonWords</code> is not an instance of {@link CharArraySet}, a\n   * new CharArraySet will be constructed and <code>ignoreCase</code> will be\n   * used to specify the case sensitivity of that set.\n   * \n   * @param input TokenStream input in filter chain.\n   * @param commonWords The set of common words.\n   * @param ignoreCase -Ignore case when constructing bigrams for common words.\n   */\n  public CommonGramsFilter(TokenStream input, Set commonWords,\n      boolean ignoreCase) {\n    super(input);\n    if (commonWords instanceof CharArraySet) {\n      this.commonWords = (CharArraySet) commonWords;\n    } else {\n      this.commonWords = new CharArraySet(commonWords.size(), ignoreCase);\n      this.commonWords.addAll(commonWords);\n    }\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/CommonGramsFilter#CommonGramsFilter(TokenStream,Set,boolean).mjava","pathOld":"src/java/org/apache/solr/analysis/CommonGramsFilter#CommonGramsFilter(TokenStream,Set,boolean).mjava","sourceNew":"  /**\n   * Construct a token stream filtering the given input using a Set of common\n   * words to create bigrams, case-sensitive if ignoreCase is false (unless Set\n   * is CharArraySet). If <code>commonWords</code> is an instance of\n   * {@link CharArraySet} (true if <code>makeCommonSet()</code> was used to\n   * construct the set) it will be directly used and <code>ignoreCase</code>\n   * will be ignored since <code>CharArraySet</code> directly controls case\n   * sensitivity.\n   * <p/>\n   * If <code>commonWords</code> is not an instance of {@link CharArraySet}, a\n   * new CharArraySet will be constructed and <code>ignoreCase</code> will be\n   * used to specify the case sensitivity of that set.\n   * \n   * @param input TokenStream input in filter chain.\n   * @param commonWords The set of common words.\n   * @param ignoreCase -Ignore case when constructing bigrams for common words.\n   */\n  public CommonGramsFilter(TokenStream input, Set commonWords, boolean ignoreCase) {\n    super(input);\n    if (commonWords instanceof CharArraySet) {\n      this.commonWords = (CharArraySet) commonWords;\n    } else {\n      this.commonWords = new CharArraySet(commonWords.size(), ignoreCase);\n      this.commonWords.addAll(commonWords);\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a token stream filtering the given input using a Set of common\n   * words to create bigrams, case-sensitive if ignoreCase is false (unless Set\n   * is CharArraySet). If <code>commonWords</code> is an instance of\n   * {@link CharArraySet} (true if <code>makeCommonSet()</code> was used to\n   * construct the set) it will be directly used and <code>ignoreCase</code>\n   * will be ignored since <code>CharArraySet</code> directly controls case\n   * sensitivity.\n   * <p/>\n   * If <code>commonWords</code> is not an instance of {@link CharArraySet}, a\n   * new CharArraySet will be constructed and <code>ignoreCase</code> will be\n   * used to specify the case sensitivity of that set.\n   * \n   * @param input TokenStream input in filter chain.\n   * @param commonWords The set of common words.\n   * @param ignoreCase -Ignore case when constructing bigrams for common words.\n   */\n  public CommonGramsFilter(TokenStream input, Set commonWords, boolean ignoreCase) {\n    super(input);\n    if (commonWords instanceof CharArraySet) {\n      this.commonWords = (CharArraySet) commonWords;\n    } else {\n      this.commonWords = new CharArraySet(commonWords.size(), ignoreCase);\n      this.commonWords.addAll(commonWords);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["8f8f5dd9e0322b913c47628300753239d0d5ef7e"],"ad94625fb8d088209f46650c8097196fec67f00c":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"8f8f5dd9e0322b913c47628300753239d0d5ef7e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8f8f5dd9e0322b913c47628300753239d0d5ef7e"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["ad94625fb8d088209f46650c8097196fec67f00c"],"8f8f5dd9e0322b913c47628300753239d0d5ef7e":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}