{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#send(OutStream,SolrRequest,String).mjava","commits":[{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#send(OutStream,SolrRequest,String).mjava","pathOld":"/dev/null","sourceNew":"  public void send(OutStream outStream, SolrRequest req, String collection) throws IOException {\n    assert outStream.belongToThisStream(req, collection);\n    this.requestWriter.write(req, outStream.outProvider.getOutputStream());\n    if (outStream.isXml) {\n      // check for commit or optimize\n      SolrParams params = req.getParams();\n      if (params != null) {\n        String fmt = null;\n        if (params.getBool(UpdateParams.OPTIMIZE, false)) {\n          fmt = \"<optimize waitSearcher=\\\"%s\\\" />\";\n        } else if (params.getBool(UpdateParams.COMMIT, false)) {\n          fmt = \"<commit waitSearcher=\\\"%s\\\" />\";\n        }\n        if (fmt != null) {\n          byte[] content = String.format(Locale.ROOT,\n              fmt, params.getBool(UpdateParams.WAIT_SEARCHER, false)\n                  + \"\")\n              .getBytes(StandardCharsets.UTF_8);\n          outStream.write(content);\n        }\n      }\n    }\n    outStream.flush();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f","date":1589320207,"type":3,"author":"Samuel García Martínez","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#send(OutStream,SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#send(OutStream,SolrRequest,String).mjava","sourceNew":"  public void send(OutStream outStream, SolrRequest req, String collection) throws IOException {\n    assert outStream.belongToThisStream(req, collection);\n    this.requestWriter.write(req, outStream.outProvider.getOutputStream());\n    if (outStream.isXml) {\n      // check for commit or optimize\n      SolrParams params = req.getParams();\n      if (params != null) {\n        String fmt = null;\n        if (params.getBool(UpdateParams.OPTIMIZE, false)) {\n          fmt = \"<optimize waitSearcher=\\\"%s\\\" />\";\n        } else if (params.getBool(UpdateParams.COMMIT, false)) {\n          fmt = \"<commit waitSearcher=\\\"%s\\\" />\";\n        }\n        if (fmt != null) {\n          byte[] content = String.format(Locale.ROOT,\n              fmt, params.getBool(UpdateParams.WAIT_SEARCHER, false)\n                  + \"\")\n              .getBytes(FALLBACK_CHARSET);\n          outStream.write(content);\n        }\n      }\n    }\n    outStream.flush();\n  }\n\n","sourceOld":"  public void send(OutStream outStream, SolrRequest req, String collection) throws IOException {\n    assert outStream.belongToThisStream(req, collection);\n    this.requestWriter.write(req, outStream.outProvider.getOutputStream());\n    if (outStream.isXml) {\n      // check for commit or optimize\n      SolrParams params = req.getParams();\n      if (params != null) {\n        String fmt = null;\n        if (params.getBool(UpdateParams.OPTIMIZE, false)) {\n          fmt = \"<optimize waitSearcher=\\\"%s\\\" />\";\n        } else if (params.getBool(UpdateParams.COMMIT, false)) {\n          fmt = \"<commit waitSearcher=\\\"%s\\\" />\";\n        }\n        if (fmt != null) {\n          byte[] content = String.format(Locale.ROOT,\n              fmt, params.getBool(UpdateParams.WAIT_SEARCHER, false)\n                  + \"\")\n              .getBytes(StandardCharsets.UTF_8);\n          outStream.write(content);\n        }\n      }\n    }\n    outStream.flush();\n  }\n\n","bugFix":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","date":1592006776,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#send(OutStream,SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#send(OutStream,SolrRequest,String).mjava","sourceNew":"  public void send(OutStream outStream, @SuppressWarnings({\"rawtypes\"})SolrRequest req, String collection) throws IOException {\n    assert outStream.belongToThisStream(req, collection);\n    this.requestWriter.write(req, outStream.outProvider.getOutputStream());\n    if (outStream.isXml) {\n      // check for commit or optimize\n      SolrParams params = req.getParams();\n      if (params != null) {\n        String fmt = null;\n        if (params.getBool(UpdateParams.OPTIMIZE, false)) {\n          fmt = \"<optimize waitSearcher=\\\"%s\\\" />\";\n        } else if (params.getBool(UpdateParams.COMMIT, false)) {\n          fmt = \"<commit waitSearcher=\\\"%s\\\" />\";\n        }\n        if (fmt != null) {\n          byte[] content = String.format(Locale.ROOT,\n              fmt, params.getBool(UpdateParams.WAIT_SEARCHER, false)\n                  + \"\")\n              .getBytes(FALLBACK_CHARSET);\n          outStream.write(content);\n        }\n      }\n    }\n    outStream.flush();\n  }\n\n","sourceOld":"  public void send(OutStream outStream, SolrRequest req, String collection) throws IOException {\n    assert outStream.belongToThisStream(req, collection);\n    this.requestWriter.write(req, outStream.outProvider.getOutputStream());\n    if (outStream.isXml) {\n      // check for commit or optimize\n      SolrParams params = req.getParams();\n      if (params != null) {\n        String fmt = null;\n        if (params.getBool(UpdateParams.OPTIMIZE, false)) {\n          fmt = \"<optimize waitSearcher=\\\"%s\\\" />\";\n        } else if (params.getBool(UpdateParams.COMMIT, false)) {\n          fmt = \"<commit waitSearcher=\\\"%s\\\" />\";\n        }\n        if (fmt != null) {\n          byte[] content = String.format(Locale.ROOT,\n              fmt, params.getBool(UpdateParams.WAIT_SEARCHER, false)\n                  + \"\")\n              .getBytes(FALLBACK_CHARSET);\n          outStream.write(content);\n        }\n      }\n    }\n    outStream.flush();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}