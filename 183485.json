{"path":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getMetrics(List[String],Set[String]).mjava","commits":[{"id":"7b2c4e17100e207bc842e56d016b9f91f411304e","date":1434336696,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getMetrics(List[String],Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  private static Metric[] getMetrics(List<String> fields, Set<String> fieldSet) {\n    List<Metric> metrics = new ArrayList();\n    for(String field : fields) {\n\n      if(field.contains(\"(\")) {\n\n        field = field.substring(0, field.length()-1);\n        String[] parts = field.split(\"\\\\(\");\n        String function = parts[0];\n        String column = parts[1];\n        if(function.equals(\"min\")) {\n          metrics.add(new MinMetric(column));\n          fieldSet.add(column);\n        } else if(function.equals(\"max\")) {\n          metrics.add(new MaxMetric(column));\n          fieldSet.add(column);\n        } else if(function.equals(\"sum\")) {\n          metrics.add(new SumMetric(column));\n          fieldSet.add(column);\n        } else if(function.equals(\"avg\")) {\n          metrics.add(new MeanMetric(column));\n          fieldSet.add(column);\n        } else if(function.equals(\"count\")) {\n          metrics.add(new CountMetric());\n        }\n      }\n    }\n    return metrics.toArray(new Metric[metrics.size()]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da9a71da64ce12a97dcfcdd912893aeb1fa2981","date":1437510515,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getMetrics(List[String],Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getMetrics(List[String],Set[String]).mjava","sourceNew":"  private static Metric[] getMetrics(List<String> fields, Set<String> fieldSet) throws IOException {\n    List<Metric> metrics = new ArrayList();\n    for(String field : fields) {\n      if(field.contains(\"(\")) {\n\n        field = field.substring(0, field.length()-1);\n        String[] parts = field.split(\"\\\\(\");\n        String function = parts[0];\n        validateFunction(function);\n        String column = parts[1];\n        if(function.equals(\"min\")) {\n          metrics.add(new MinMetric(column));\n          fieldSet.add(column);\n        } else if(function.equals(\"max\")) {\n          metrics.add(new MaxMetric(column));\n          fieldSet.add(column);\n        } else if(function.equals(\"sum\")) {\n          metrics.add(new SumMetric(column));\n          fieldSet.add(column);\n        } else if(function.equals(\"avg\")) {\n          metrics.add(new MeanMetric(column));\n          fieldSet.add(column);\n        } else if(function.equals(\"count\")) {\n          metrics.add(new CountMetric());\n        }\n      }\n    }\n    return metrics.toArray(new Metric[metrics.size()]);\n  }\n\n","sourceOld":"  private static Metric[] getMetrics(List<String> fields, Set<String> fieldSet) {\n    List<Metric> metrics = new ArrayList();\n    for(String field : fields) {\n\n      if(field.contains(\"(\")) {\n\n        field = field.substring(0, field.length()-1);\n        String[] parts = field.split(\"\\\\(\");\n        String function = parts[0];\n        String column = parts[1];\n        if(function.equals(\"min\")) {\n          metrics.add(new MinMetric(column));\n          fieldSet.add(column);\n        } else if(function.equals(\"max\")) {\n          metrics.add(new MaxMetric(column));\n          fieldSet.add(column);\n        } else if(function.equals(\"sum\")) {\n          metrics.add(new SumMetric(column));\n          fieldSet.add(column);\n        } else if(function.equals(\"avg\")) {\n          metrics.add(new MeanMetric(column));\n          fieldSet.add(column);\n        } else if(function.equals(\"count\")) {\n          metrics.add(new CountMetric());\n        }\n      }\n    }\n    return metrics.toArray(new Metric[metrics.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d984627825732e682759c22df7a3b171a80f3812","date":1461857653,"type":4,"author":"Kevin Risden","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getMetrics(List[String],Set[String]).mjava","sourceNew":null,"sourceOld":"  private static Metric[] getMetrics(List<String> fields, Set<String> fieldSet) throws IOException {\n    List<Metric> metrics = new ArrayList();\n    for(String field : fields) {\n      if(field.contains(\"(\")) {\n\n        field = field.substring(0, field.length()-1);\n        String[] parts = field.split(\"\\\\(\");\n        String function = parts[0];\n        validateFunction(function);\n        String column = parts[1];\n        if(function.equals(\"min\")) {\n          metrics.add(new MinMetric(column));\n          fieldSet.add(column);\n        } else if(function.equals(\"max\")) {\n          metrics.add(new MaxMetric(column));\n          fieldSet.add(column);\n        } else if(function.equals(\"sum\")) {\n          metrics.add(new SumMetric(column));\n          fieldSet.add(column);\n        } else if(function.equals(\"avg\")) {\n          metrics.add(new MeanMetric(column));\n          fieldSet.add(column);\n        } else if(function.equals(\"count\")) {\n          metrics.add(new CountMetric());\n        }\n      }\n    }\n    return metrics.toArray(new Metric[metrics.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":4,"author":"Joel Bernstein","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getMetrics(List[String],Set[String]).mjava","sourceNew":null,"sourceOld":"  private static Metric[] getMetrics(List<String> fields, Set<String> fieldSet) throws IOException {\n    List<Metric> metrics = new ArrayList();\n    for(String field : fields) {\n      if(field.contains(\"(\")) {\n\n        field = field.substring(0, field.length()-1);\n        String[] parts = field.split(\"\\\\(\");\n        String function = parts[0];\n        validateFunction(function);\n        String column = parts[1];\n        if(function.equals(\"min\")) {\n          metrics.add(new MinMetric(column));\n          fieldSet.add(column);\n        } else if(function.equals(\"max\")) {\n          metrics.add(new MaxMetric(column));\n          fieldSet.add(column);\n        } else if(function.equals(\"sum\")) {\n          metrics.add(new SumMetric(column));\n          fieldSet.add(column);\n        } else if(function.equals(\"avg\")) {\n          metrics.add(new MeanMetric(column));\n          fieldSet.add(column);\n        } else if(function.equals(\"count\")) {\n          metrics.add(new CountMetric());\n        }\n      }\n    }\n    return metrics.toArray(new Metric[metrics.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981","d984627825732e682759c22df7a3b171a80f3812"],"d984627825732e682759c22df7a3b171a80f3812":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b2c4e17100e207bc842e56d016b9f91f411304e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"]},"commit2Childs":{"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d984627825732e682759c22df7a3b171a80f3812":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"7b2c4e17100e207bc842e56d016b9f91f411304e":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","d984627825732e682759c22df7a3b171a80f3812"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}