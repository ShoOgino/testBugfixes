{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testGroupNames().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testGroupNames().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#testGroupNames().mjava","sourceNew":"  @Test\n  public void testGroupNames() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"Noble\", result.get(\"firstName\"));\n    assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<String, Object>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    assertEquals(\"Noble\", l1.get(0));\n    assertEquals(\"Shalin\", l1.get(1));\n    assertEquals(\"Paul\", l2.get(0));\n    assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","sourceOld":"  @Test\n  public void testGroupNames() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"Noble\", result.get(\"firstName\"));\n    assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<String, Object>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    assertEquals(\"Noble\", l1.get(0));\n    assertEquals(\"Shalin\", l1.get(1));\n    assertEquals(\"Paul\", l2.get(0));\n    assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testGroupNames().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#testGroupNames().mjava","sourceNew":"  @Test\n  public void testGroupNames() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"Noble\", result.get(\"firstName\"));\n    assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<String, Object>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    assertEquals(\"Noble\", l1.get(0));\n    assertEquals(\"Shalin\", l1.get(1));\n    assertEquals(\"Paul\", l2.get(0));\n    assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","sourceOld":"  @Test\n  public void testGroupNames() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"Noble\", result.get(\"firstName\"));\n    assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<String, Object>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    assertEquals(\"Noble\", l1.get(0));\n    assertEquals(\"Shalin\", l1.get(1));\n    assertEquals(\"Paul\", l2.get(0));\n    assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testGroupNames().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testGroupNames().mjava","sourceNew":"  @Test\n  public void testGroupNames() {\n    List<Map<String, String>> fields = new ArrayList<>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"Noble\", result.get(\"firstName\"));\n    assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    assertEquals(\"Noble\", l1.get(0));\n    assertEquals(\"Shalin\", l1.get(1));\n    assertEquals(\"Paul\", l2.get(0));\n    assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","sourceOld":"  @Test\n  public void testGroupNames() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"Noble\", result.get(\"firstName\"));\n    assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<String, Object>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    assertEquals(\"Noble\", l1.get(0));\n    assertEquals(\"Shalin\", l1.get(1));\n    assertEquals(\"Paul\", l2.get(0));\n    assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testGroupNames().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testGroupNames().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  @Test\n  public void testGroupNames() {\n    List<Map<String, String>> fields = new ArrayList<>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"Noble\", result.get(\"firstName\"));\n    assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    assertEquals(\"Noble\", l1.get(0));\n    assertEquals(\"Shalin\", l1.get(1));\n    assertEquals(\"Paul\", l2.get(0));\n    assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","sourceOld":"  @Test\n  public void testGroupNames() {\n    List<Map<String, String>> fields = new ArrayList<>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"Noble\", result.get(\"firstName\"));\n    assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    assertEquals(\"Noble\", l1.get(0));\n    assertEquals(\"Shalin\", l1.get(1));\n    assertEquals(\"Paul\", l2.get(0));\n    assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testGroupNames().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testGroupNames().mjava","sourceNew":"  @Test\n  public void testGroupNames() {\n    List<Map<String, String>> fields = new ArrayList<>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"Noble\", result.get(\"firstName\"));\n    assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    assertEquals(\"Noble\", l1.get(0));\n    assertEquals(\"Shalin\", l1.get(1));\n    assertEquals(\"Paul\", l2.get(0));\n    assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  @Test\n  public void testGroupNames() {\n    List<Map<String, String>> fields = new ArrayList<>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"Noble\", result.get(\"firstName\"));\n    assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    assertEquals(\"Noble\", l1.get(0));\n    assertEquals(\"Shalin\", l1.get(1));\n    assertEquals(\"Paul\", l2.get(0));\n    assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testGroupNames().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testGroupNames().mjava","sourceNew":"  @Test\n  public void testGroupNames() {\n    List<Map<String, String>> fields = new ArrayList<>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"Noble\", result.get(\"firstName\"));\n    assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<>();\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    @SuppressWarnings({\"rawtypes\"})\n    List l1 = (List) result.get(\"firstName\");\n    @SuppressWarnings({\"rawtypes\"})\n    List l2 = (List) result.get(\"lastName\");\n    assertEquals(\"Noble\", l1.get(0));\n    assertEquals(\"Shalin\", l1.get(1));\n    assertEquals(\"Paul\", l2.get(0));\n    assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","sourceOld":"  @Test\n  public void testGroupNames() {\n    List<Map<String, String>> fields = new ArrayList<>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"Noble\", result.get(\"firstName\"));\n    assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    assertEquals(\"Noble\", l1.get(0));\n    assertEquals(\"Shalin\", l1.get(1));\n    assertEquals(\"Paul\", l2.get(0));\n    assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testGroupNames().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testGroupNames() {\n    List<Map<String, String>> fields = new ArrayList<>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"Noble\", result.get(\"firstName\"));\n    assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<>();\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    @SuppressWarnings({\"rawtypes\"})\n    List l1 = (List) result.get(\"firstName\");\n    @SuppressWarnings({\"rawtypes\"})\n    List l2 = (List) result.get(\"lastName\");\n    assertEquals(\"Noble\", l1.get(0));\n    assertEquals(\"Shalin\", l1.get(1));\n    assertEquals(\"Paul\", l2.get(0));\n    assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"024e13388acbf5562fcbb77a129620982a5e2d79":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["024e13388acbf5562fcbb77a129620982a5e2d79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}