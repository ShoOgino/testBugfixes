{"path":"lucene/facet/src/java/org/apache/lucene/facet/encoding/ChunksIntEncoder#encodeChunk(BytesRef).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/encoding/ChunksIntEncoder#encodeChunk(BytesRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/encoding/ChunksIntEncoder#encodeChunk(BytesRef).mjava","sourceNew":"  /**\n   * Encodes the values of the current chunk. First it writes the indicator, and\n   * then it encodes the values outside the indicator.\n   */\n  protected void encodeChunk(BytesRef buf) {\n    // ensure there's enough room in the buffer\n    int maxBytesRequired = buf.length + 1 + encodeQueue.length * 4; /* indicator + at most 4 bytes per positive VInt */\n    if (buf.bytes.length < maxBytesRequired) {\n      buf.grow(maxBytesRequired);\n    }\n    \n    buf.bytes[buf.length++] = ((byte) indicator);\n    for (int i = 0; i < encodeQueue.length; i++) {\n      // it is better if the encoding is inlined like so, and not e.g.\n      // in a utility method\n      int value = encodeQueue.ints[i];\n      if ((value & ~0x7F) == 0) {\n        buf.bytes[buf.length] = (byte) value;\n        buf.length++;\n      } else if ((value & ~0x3FFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 1] = (byte) (value & 0x7F);\n        buf.length += 2;\n      } else if ((value & ~0x1FFFFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 2] = (byte) (value & 0x7F);\n        buf.length += 3;\n      } else if ((value & ~0xFFFFFFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0xFE00000) >> 21));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 2] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 3] = (byte) (value & 0x7F);\n        buf.length += 4;\n      } else {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0xF0000000) >> 28));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0xFE00000) >> 21));\n        buf.bytes[buf.length + 2] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 3] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 4] = (byte) (value & 0x7F);\n        buf.length += 5;\n      }\n    }\n    \n    ordinal = 0;\n    indicator = 0;\n    encodeQueue.length = 0;\n  }\n\n","sourceOld":"  /**\n   * Encodes the values of the current chunk. First it writes the indicator, and\n   * then it encodes the values outside the indicator.\n   */\n  protected void encodeChunk(BytesRef buf) {\n    // ensure there's enough room in the buffer\n    int maxBytesRequired = buf.length + 1 + encodeQueue.length * 4; /* indicator + at most 4 bytes per positive VInt */\n    if (buf.bytes.length < maxBytesRequired) {\n      buf.grow(maxBytesRequired);\n    }\n    \n    buf.bytes[buf.length++] = ((byte) indicator);\n    for (int i = 0; i < encodeQueue.length; i++) {\n      // it is better if the encoding is inlined like so, and not e.g.\n      // in a utility method\n      int value = encodeQueue.ints[i];\n      if ((value & ~0x7F) == 0) {\n        buf.bytes[buf.length] = (byte) value;\n        buf.length++;\n      } else if ((value & ~0x3FFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 1] = (byte) (value & 0x7F);\n        buf.length += 2;\n      } else if ((value & ~0x1FFFFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 2] = (byte) (value & 0x7F);\n        buf.length += 3;\n      } else if ((value & ~0xFFFFFFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0xFE00000) >> 21));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 2] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 3] = (byte) (value & 0x7F);\n        buf.length += 4;\n      } else {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0xF0000000) >> 28));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0xFE00000) >> 21));\n        buf.bytes[buf.length + 2] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 3] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 4] = (byte) (value & 0x7F);\n        buf.length += 5;\n      }\n    }\n    \n    ordinal = 0;\n    indicator = 0;\n    encodeQueue.length = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/encoding/ChunksIntEncoder#encodeChunk(BytesRef).mjava","sourceNew":null,"sourceOld":"  /**\n   * Encodes the values of the current chunk. First it writes the indicator, and\n   * then it encodes the values outside the indicator.\n   */\n  protected void encodeChunk(BytesRef buf) {\n    // ensure there's enough room in the buffer\n    int maxBytesRequired = buf.length + 1 + encodeQueue.length * 4; /* indicator + at most 4 bytes per positive VInt */\n    if (buf.bytes.length < maxBytesRequired) {\n      buf.grow(maxBytesRequired);\n    }\n    \n    buf.bytes[buf.length++] = ((byte) indicator);\n    for (int i = 0; i < encodeQueue.length; i++) {\n      // it is better if the encoding is inlined like so, and not e.g.\n      // in a utility method\n      int value = encodeQueue.ints[i];\n      if ((value & ~0x7F) == 0) {\n        buf.bytes[buf.length] = (byte) value;\n        buf.length++;\n      } else if ((value & ~0x3FFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 1] = (byte) (value & 0x7F);\n        buf.length += 2;\n      } else if ((value & ~0x1FFFFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 2] = (byte) (value & 0x7F);\n        buf.length += 3;\n      } else if ((value & ~0xFFFFFFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0xFE00000) >> 21));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 2] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 3] = (byte) (value & 0x7F);\n        buf.length += 4;\n      } else {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0xF0000000) >> 28));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0xFE00000) >> 21));\n        buf.bytes[buf.length + 2] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 3] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 4] = (byte) (value & 0x7F);\n        buf.length += 5;\n      }\n    }\n    \n    ordinal = 0;\n    indicator = 0;\n    encodeQueue.length = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/encoding/ChunksIntEncoder#encodeChunk(BytesRef).mjava","sourceNew":null,"sourceOld":"  /**\n   * Encodes the values of the current chunk. First it writes the indicator, and\n   * then it encodes the values outside the indicator.\n   */\n  protected void encodeChunk(BytesRef buf) {\n    // ensure there's enough room in the buffer\n    int maxBytesRequired = buf.length + 1 + encodeQueue.length * 4; /* indicator + at most 4 bytes per positive VInt */\n    if (buf.bytes.length < maxBytesRequired) {\n      buf.grow(maxBytesRequired);\n    }\n    \n    buf.bytes[buf.length++] = ((byte) indicator);\n    for (int i = 0; i < encodeQueue.length; i++) {\n      // it is better if the encoding is inlined like so, and not e.g.\n      // in a utility method\n      int value = encodeQueue.ints[i];\n      if ((value & ~0x7F) == 0) {\n        buf.bytes[buf.length] = (byte) value;\n        buf.length++;\n      } else if ((value & ~0x3FFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 1] = (byte) (value & 0x7F);\n        buf.length += 2;\n      } else if ((value & ~0x1FFFFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 2] = (byte) (value & 0x7F);\n        buf.length += 3;\n      } else if ((value & ~0xFFFFFFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0xFE00000) >> 21));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 2] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 3] = (byte) (value & 0x7F);\n        buf.length += 4;\n      } else {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0xF0000000) >> 28));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0xFE00000) >> 21));\n        buf.bytes[buf.length + 2] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 3] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 4] = (byte) (value & 0x7F);\n        buf.length += 5;\n      }\n    }\n    \n    ordinal = 0;\n    indicator = 0;\n    encodeQueue.length = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}