{"path":"lucene/src/test/org/apache/lucene/util/TestAttributeSource#testToStringAndMultiAttributeImplementations().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestAttributeSource#testToStringAndMultiAttributeImplementations().mjava","pathOld":"src/test/org/apache/lucene/util/TestAttributeSource#testToStringAndMultiAttributeImplementations().mjava","sourceNew":"  public void testToStringAndMultiAttributeImplementations() {\n    AttributeSource src = new AttributeSource();\n    TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");    \n    assertEquals(\"Attributes should appear in original order\", \"(\"+termAtt.toString()+\",\"+typeAtt.toString()+\")\", src.toString());\n    Iterator<AttributeImpl> it = src.getAttributeImplsIterator();\n    assertTrue(\"Iterator should have 2 attributes left\", it.hasNext());\n    assertSame(\"First AttributeImpl from iterator should be termAtt\", termAtt, it.next());\n    assertTrue(\"Iterator should have 1 attributes left\", it.hasNext());\n    assertSame(\"Second AttributeImpl from iterator should be typeAtt\", typeAtt, it.next());\n    assertFalse(\"Iterator should have 0 attributes left\", it.hasNext());\n\n    src = new AttributeSource();\n    src.addAttributeImpl(new Token());\n    // this should not add a new attribute as Token implements TermAttribute, too\n    termAtt = src.addAttribute(TermAttribute.class);\n    assertTrue(\"TermAttribute should be implemented by Token\", termAtt instanceof Token);\n    // get the Token attribute and check, that it is the only one\n    it = src.getAttributeImplsIterator();\n    Token tok = (Token) it.next();\n    assertFalse(\"There should be only one attribute implementation instance\", it.hasNext());\n    \n    termAtt.setTermBuffer(\"TestTerm\");\n    assertEquals(\"Token should only printed once\", \"(\"+tok.toString()+\")\", src.toString());\n  }\n\n","sourceOld":"  public void testToStringAndMultiAttributeImplementations() {\n    AttributeSource src = new AttributeSource();\n    TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");    \n    assertEquals(\"Attributes should appear in original order\", \"(\"+termAtt.toString()+\",\"+typeAtt.toString()+\")\", src.toString());\n    Iterator<AttributeImpl> it = src.getAttributeImplsIterator();\n    assertTrue(\"Iterator should have 2 attributes left\", it.hasNext());\n    assertSame(\"First AttributeImpl from iterator should be termAtt\", termAtt, it.next());\n    assertTrue(\"Iterator should have 1 attributes left\", it.hasNext());\n    assertSame(\"Second AttributeImpl from iterator should be typeAtt\", typeAtt, it.next());\n    assertFalse(\"Iterator should have 0 attributes left\", it.hasNext());\n\n    src = new AttributeSource();\n    src.addAttributeImpl(new Token());\n    // this should not add a new attribute as Token implements TermAttribute, too\n    termAtt = src.addAttribute(TermAttribute.class);\n    assertTrue(\"TermAttribute should be implemented by Token\", termAtt instanceof Token);\n    // get the Token attribute and check, that it is the only one\n    it = src.getAttributeImplsIterator();\n    Token tok = (Token) it.next();\n    assertFalse(\"There should be only one attribute implementation instance\", it.hasNext());\n    \n    termAtt.setTermBuffer(\"TestTerm\");\n    assertEquals(\"Token should only printed once\", \"(\"+tok.toString()+\")\", src.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestAttributeSource#testToStringAndMultiAttributeImplementations().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestAttributeSource#testToStringAndMultiAttributeImplementations().mjava","sourceNew":"  public void testToStringAndMultiAttributeImplementations() {\n    AttributeSource src = new AttributeSource();\n    CharTermAttribute termAtt = src.addAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.append(\"TestTerm\");\n    typeAtt.setType(\"TestType\");    \n    assertEquals(\"Attributes should appear in original order\", \"(\"+termAtt.toString()+\",\"+typeAtt.toString()+\")\", src.toString());\n    Iterator<AttributeImpl> it = src.getAttributeImplsIterator();\n    assertTrue(\"Iterator should have 2 attributes left\", it.hasNext());\n    assertSame(\"First AttributeImpl from iterator should be termAtt\", termAtt, it.next());\n    assertTrue(\"Iterator should have 1 attributes left\", it.hasNext());\n    assertSame(\"Second AttributeImpl from iterator should be typeAtt\", typeAtt, it.next());\n    assertFalse(\"Iterator should have 0 attributes left\", it.hasNext());\n\n    src = new AttributeSource();\n    src.addAttributeImpl(new Token());\n    // this should not add a new attribute as Token implements CharTermAttribute, too\n    termAtt = src.addAttribute(CharTermAttribute.class);\n    assertTrue(\"CharTermAttribute should be implemented by Token\", termAtt instanceof Token);\n    // get the Token attribute and check, that it is the only one\n    it = src.getAttributeImplsIterator();\n    Token tok = (Token) it.next();\n    assertFalse(\"There should be only one attribute implementation instance\", it.hasNext());\n    \n    termAtt.setEmpty().append(\"TestTerm\");\n    assertEquals(\"Token should only printed once\", \"(\"+tok.toString()+\")\", src.toString());\n  }\n\n","sourceOld":"  public void testToStringAndMultiAttributeImplementations() {\n    AttributeSource src = new AttributeSource();\n    TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");    \n    assertEquals(\"Attributes should appear in original order\", \"(\"+termAtt.toString()+\",\"+typeAtt.toString()+\")\", src.toString());\n    Iterator<AttributeImpl> it = src.getAttributeImplsIterator();\n    assertTrue(\"Iterator should have 2 attributes left\", it.hasNext());\n    assertSame(\"First AttributeImpl from iterator should be termAtt\", termAtt, it.next());\n    assertTrue(\"Iterator should have 1 attributes left\", it.hasNext());\n    assertSame(\"Second AttributeImpl from iterator should be typeAtt\", typeAtt, it.next());\n    assertFalse(\"Iterator should have 0 attributes left\", it.hasNext());\n\n    src = new AttributeSource();\n    src.addAttributeImpl(new Token());\n    // this should not add a new attribute as Token implements TermAttribute, too\n    termAtt = src.addAttribute(TermAttribute.class);\n    assertTrue(\"TermAttribute should be implemented by Token\", termAtt instanceof Token);\n    // get the Token attribute and check, that it is the only one\n    it = src.getAttributeImplsIterator();\n    Token tok = (Token) it.next();\n    assertFalse(\"There should be only one attribute implementation instance\", it.hasNext());\n    \n    termAtt.setTermBuffer(\"TestTerm\");\n    assertEquals(\"Token should only printed once\", \"(\"+tok.toString()+\")\", src.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec58fb7921964848d01bea54f8ec4a2ac813eaeb","date":1295476876,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/TestAttributeSource#testToStringAndMultiAttributeImplementations().mjava","sourceNew":null,"sourceOld":"  public void testToStringAndMultiAttributeImplementations() {\n    AttributeSource src = new AttributeSource();\n    CharTermAttribute termAtt = src.addAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.append(\"TestTerm\");\n    typeAtt.setType(\"TestType\");    \n    assertEquals(\"Attributes should appear in original order\", \"(\"+termAtt.toString()+\",\"+typeAtt.toString()+\")\", src.toString());\n    Iterator<AttributeImpl> it = src.getAttributeImplsIterator();\n    assertTrue(\"Iterator should have 2 attributes left\", it.hasNext());\n    assertSame(\"First AttributeImpl from iterator should be termAtt\", termAtt, it.next());\n    assertTrue(\"Iterator should have 1 attributes left\", it.hasNext());\n    assertSame(\"Second AttributeImpl from iterator should be typeAtt\", typeAtt, it.next());\n    assertFalse(\"Iterator should have 0 attributes left\", it.hasNext());\n\n    src = new AttributeSource();\n    src.addAttributeImpl(new Token());\n    // this should not add a new attribute as Token implements CharTermAttribute, too\n    termAtt = src.addAttribute(CharTermAttribute.class);\n    assertTrue(\"CharTermAttribute should be implemented by Token\", termAtt instanceof Token);\n    // get the Token attribute and check, that it is the only one\n    it = src.getAttributeImplsIterator();\n    Token tok = (Token) it.next();\n    assertFalse(\"There should be only one attribute implementation instance\", it.hasNext());\n    \n    termAtt.setEmpty().append(\"TestTerm\");\n    assertEquals(\"Token should only printed once\", \"(\"+tok.toString()+\")\", src.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/TestAttributeSource#testToStringAndMultiAttributeImplementations().mjava","sourceNew":null,"sourceOld":"  public void testToStringAndMultiAttributeImplementations() {\n    AttributeSource src = new AttributeSource();\n    CharTermAttribute termAtt = src.addAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.append(\"TestTerm\");\n    typeAtt.setType(\"TestType\");    \n    assertEquals(\"Attributes should appear in original order\", \"(\"+termAtt.toString()+\",\"+typeAtt.toString()+\")\", src.toString());\n    Iterator<AttributeImpl> it = src.getAttributeImplsIterator();\n    assertTrue(\"Iterator should have 2 attributes left\", it.hasNext());\n    assertSame(\"First AttributeImpl from iterator should be termAtt\", termAtt, it.next());\n    assertTrue(\"Iterator should have 1 attributes left\", it.hasNext());\n    assertSame(\"Second AttributeImpl from iterator should be typeAtt\", typeAtt, it.next());\n    assertFalse(\"Iterator should have 0 attributes left\", it.hasNext());\n\n    src = new AttributeSource();\n    src.addAttributeImpl(new Token());\n    // this should not add a new attribute as Token implements CharTermAttribute, too\n    termAtt = src.addAttribute(CharTermAttribute.class);\n    assertTrue(\"CharTermAttribute should be implemented by Token\", termAtt instanceof Token);\n    // get the Token attribute and check, that it is the only one\n    it = src.getAttributeImplsIterator();\n    Token tok = (Token) it.next();\n    assertFalse(\"There should be only one attribute implementation instance\", it.hasNext());\n    \n    termAtt.setEmpty().append(\"TestTerm\");\n    assertEquals(\"Token should only printed once\", \"(\"+tok.toString()+\")\", src.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/TestAttributeSource#testToStringAndMultiAttributeImplementations().mjava","sourceNew":null,"sourceOld":"  public void testToStringAndMultiAttributeImplementations() {\n    AttributeSource src = new AttributeSource();\n    CharTermAttribute termAtt = src.addAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.append(\"TestTerm\");\n    typeAtt.setType(\"TestType\");    \n    assertEquals(\"Attributes should appear in original order\", \"(\"+termAtt.toString()+\",\"+typeAtt.toString()+\")\", src.toString());\n    Iterator<AttributeImpl> it = src.getAttributeImplsIterator();\n    assertTrue(\"Iterator should have 2 attributes left\", it.hasNext());\n    assertSame(\"First AttributeImpl from iterator should be termAtt\", termAtt, it.next());\n    assertTrue(\"Iterator should have 1 attributes left\", it.hasNext());\n    assertSame(\"Second AttributeImpl from iterator should be typeAtt\", typeAtt, it.next());\n    assertFalse(\"Iterator should have 0 attributes left\", it.hasNext());\n\n    src = new AttributeSource();\n    src.addAttributeImpl(new Token());\n    // this should not add a new attribute as Token implements CharTermAttribute, too\n    termAtt = src.addAttribute(CharTermAttribute.class);\n    assertTrue(\"CharTermAttribute should be implemented by Token\", termAtt instanceof Token);\n    // get the Token attribute and check, that it is the only one\n    it = src.getAttributeImplsIterator();\n    Token tok = (Token) it.next();\n    assertFalse(\"There should be only one attribute implementation instance\", it.hasNext());\n    \n    termAtt.setEmpty().append(\"TestTerm\");\n    assertEquals(\"Token should only printed once\", \"(\"+tok.toString()+\")\", src.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["29ef99d61cda9641b6250bf9567329a6e65f901d","ec58fb7921964848d01bea54f8ec4a2ac813eaeb","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}