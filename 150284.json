{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testCustomCollectionsAPI().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testCustomCollectionsAPI().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCustomCollectionsAPI().mjava","sourceNew":"  @Test\n  public void testCustomCollectionsAPI() throws Exception {\n\n    final String collection = \"implicitcoll\";\n    int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 2;\n    int numShards = 3;\n    int maxShardsPerNode = (((numShards + 1) * replicationFactor) / NODE_COUNT) + 1;\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(collection);\n    assertEquals(\"implicit\", ((Map) coll.get(DOC_ROUTER)).get(\"name\"));\n    assertNotNull(coll.getStr(REPLICATION_FACTOR));\n    assertNotNull(coll.getStr(MAX_SHARDS_PER_NODE));\n    assertNull(\"A shard of a Collection configured with implicit router must have null range\",\n        coll.getSlice(\"a\").getRange());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\")\n        .add(\"id\", \"7\")\n        .add(\"id\", \"8\")\n        .withRoute(\"a\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n    cluster.getSolrClient().deleteByQuery(collection, \"*:*\");\n    cluster.getSolrClient().commit(collection, true, true);\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(\"id\", \"9\")\n        .add(\"id\", \"10\")\n        .add(\"id\", \"11\")\n        .withRoute(\"c\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n    //Testing CREATESHARD\n    CollectionAdminRequest.createShard(collection, \"x\")\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected shard 'x' to be active\", collection, (n, c) -> {\n      if (c.getSlice(\"x\") == null)\n        return false;\n      for (Replica r : c.getSlice(\"x\")) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n\n    new UpdateRequest()\n        .add(\"id\", \"66\", _ROUTE_, \"x\")\n        .commit(cluster.getSolrClient(), collection);\n    // TODO - the local state is cached and causes the request to fail with 'unknown shard'\n    // assertEquals(1, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"x\")).getResults().getNumFound());\n\n  }\n\n","sourceOld":"  @Test\n  public void testCustomCollectionsAPI() throws Exception {\n\n    final String collection = \"implicitcoll\";\n    int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 2;\n    int numShards = 3;\n    int maxShardsPerNode = (((numShards + 1) * replicationFactor) / NODE_COUNT) + 1;\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(collection);\n    assertEquals(\"implicit\", ((Map) coll.get(DOC_ROUTER)).get(\"name\"));\n    assertNotNull(coll.getStr(REPLICATION_FACTOR));\n    assertNotNull(coll.getStr(MAX_SHARDS_PER_NODE));\n    assertNull(\"A shard of a Collection configured with implicit router must have null range\",\n        coll.getSlice(\"a\").getRange());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\")\n        .add(\"id\", \"7\")\n        .add(\"id\", \"8\")\n        .withRoute(\"a\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n    cluster.getSolrClient().deleteByQuery(collection, \"*:*\");\n    cluster.getSolrClient().commit(collection, true, true);\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(\"id\", \"9\")\n        .add(\"id\", \"10\")\n        .add(\"id\", \"11\")\n        .withRoute(\"c\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n    //Testing CREATESHARD\n    CollectionAdminRequest.createShard(collection, \"x\")\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected shard 'x' to be active\", collection, (n, c) -> {\n      if (c.getSlice(\"x\") == null)\n        return false;\n      for (Replica r : c.getSlice(\"x\")) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n\n    new UpdateRequest()\n        .add(\"id\", \"66\", _ROUTE_, \"x\")\n        .commit(cluster.getSolrClient(), collection);\n    // TODO - the local state is cached and causes the request to fail with 'unknown shard'\n    // assertEquals(1, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"x\")).getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testCustomCollectionsAPI().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCustomCollectionsAPI().mjava","sourceNew":"  @Test\n  public void testCustomCollectionsAPI() throws Exception {\n\n    final String collection = \"implicitcoll\";\n    int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 2;\n    int numShards = 3;\n    int maxShardsPerNode = (((numShards + 1) * replicationFactor) / NODE_COUNT) + 1;\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(collection);\n    assertEquals(\"implicit\", ((Map) coll.get(DOC_ROUTER)).get(\"name\"));\n    assertNotNull(coll.getStr(REPLICATION_FACTOR));\n    assertNotNull(coll.getStr(MAX_SHARDS_PER_NODE));\n    assertNull(\"A shard of a Collection configured with implicit router must have null range\",\n        coll.getSlice(\"a\").getRange());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\")\n        .add(\"id\", \"7\")\n        .add(\"id\", \"8\")\n        .withRoute(\"a\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n    cluster.getSolrClient().deleteByQuery(collection, \"*:*\");\n    cluster.getSolrClient().commit(collection, true, true);\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(\"id\", \"9\")\n        .add(\"id\", \"10\")\n        .add(\"id\", \"11\")\n        .withRoute(\"c\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n    //Testing CREATESHARD\n    CollectionAdminRequest.createShard(collection, \"x\")\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected shard 'x' to be active\", collection, (n, c) -> {\n      if (c.getSlice(\"x\") == null)\n        return false;\n      for (Replica r : c.getSlice(\"x\")) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n\n    new UpdateRequest()\n        .add(\"id\", \"66\", _ROUTE_, \"x\")\n        .commit(cluster.getSolrClient(), collection);\n    // TODO - the local state is cached and causes the request to fail with 'unknown shard'\n    // assertEquals(1, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"x\")).getResults().getNumFound());\n\n  }\n\n","sourceOld":"  @Test\n  public void testCustomCollectionsAPI() throws Exception {\n\n    final String collection = \"implicitcoll\";\n    int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 2;\n    int numShards = 3;\n    int maxShardsPerNode = (((numShards + 1) * replicationFactor) / NODE_COUNT) + 1;\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(collection);\n    assertEquals(\"implicit\", ((Map) coll.get(DOC_ROUTER)).get(\"name\"));\n    assertNotNull(coll.getStr(REPLICATION_FACTOR));\n    assertNotNull(coll.getStr(MAX_SHARDS_PER_NODE));\n    assertNull(\"A shard of a Collection configured with implicit router must have null range\",\n        coll.getSlice(\"a\").getRange());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\")\n        .add(\"id\", \"7\")\n        .add(\"id\", \"8\")\n        .withRoute(\"a\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n    cluster.getSolrClient().deleteByQuery(collection, \"*:*\");\n    cluster.getSolrClient().commit(collection, true, true);\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(\"id\", \"9\")\n        .add(\"id\", \"10\")\n        .add(\"id\", \"11\")\n        .withRoute(\"c\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n    //Testing CREATESHARD\n    CollectionAdminRequest.createShard(collection, \"x\")\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected shard 'x' to be active\", collection, (n, c) -> {\n      if (c.getSlice(\"x\") == null)\n        return false;\n      for (Replica r : c.getSlice(\"x\")) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n\n    new UpdateRequest()\n        .add(\"id\", \"66\", _ROUTE_, \"x\")\n        .commit(cluster.getSolrClient(), collection);\n    // TODO - the local state is cached and causes the request to fail with 'unknown shard'\n    // assertEquals(1, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"x\")).getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43ad790248d7f7daee5d9cced548c546f37c7218","date":1527269998,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testCustomCollectionsAPI().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testCustomCollectionsAPI().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testCustomCollectionsAPI() throws Exception {\n\n    final String collection = \"implicitcoll\";\n    int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 2;\n    int numShards = 3;\n    int maxShardsPerNode = (((numShards + 1) * replicationFactor) / NODE_COUNT) + 1;\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(collection);\n    assertEquals(\"implicit\", ((Map) coll.get(DOC_ROUTER)).get(\"name\"));\n    assertNotNull(coll.getStr(REPLICATION_FACTOR));\n    assertNotNull(coll.getStr(MAX_SHARDS_PER_NODE));\n    assertNull(\"A shard of a Collection configured with implicit router must have null range\",\n        coll.getSlice(\"a\").getRange());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\")\n        .add(\"id\", \"7\")\n        .add(\"id\", \"8\")\n        .withRoute(\"a\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n    cluster.getSolrClient().deleteByQuery(collection, \"*:*\");\n    cluster.getSolrClient().commit(collection, true, true);\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(\"id\", \"9\")\n        .add(\"id\", \"10\")\n        .add(\"id\", \"11\")\n        .withRoute(\"c\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n    //Testing CREATESHARD\n    CollectionAdminRequest.createShard(collection, \"x\")\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected shard 'x' to be active\", collection, (n, c) -> {\n      if (c.getSlice(\"x\") == null)\n        return false;\n      for (Replica r : c.getSlice(\"x\")) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n\n    new UpdateRequest()\n        .add(\"id\", \"66\", _ROUTE_, \"x\")\n        .commit(cluster.getSolrClient(), collection);\n    // TODO - the local state is cached and causes the request to fail with 'unknown shard'\n    // assertEquals(1, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"x\")).getResults().getNumFound());\n\n  }\n\n","sourceOld":"  @Test\n  public void testCustomCollectionsAPI() throws Exception {\n\n    final String collection = \"implicitcoll\";\n    int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 2;\n    int numShards = 3;\n    int maxShardsPerNode = (((numShards + 1) * replicationFactor) / NODE_COUNT) + 1;\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(collection);\n    assertEquals(\"implicit\", ((Map) coll.get(DOC_ROUTER)).get(\"name\"));\n    assertNotNull(coll.getStr(REPLICATION_FACTOR));\n    assertNotNull(coll.getStr(MAX_SHARDS_PER_NODE));\n    assertNull(\"A shard of a Collection configured with implicit router must have null range\",\n        coll.getSlice(\"a\").getRange());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\")\n        .add(\"id\", \"7\")\n        .add(\"id\", \"8\")\n        .withRoute(\"a\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n    cluster.getSolrClient().deleteByQuery(collection, \"*:*\");\n    cluster.getSolrClient().commit(collection, true, true);\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(\"id\", \"9\")\n        .add(\"id\", \"10\")\n        .add(\"id\", \"11\")\n        .withRoute(\"c\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n    //Testing CREATESHARD\n    CollectionAdminRequest.createShard(collection, \"x\")\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected shard 'x' to be active\", collection, (n, c) -> {\n      if (c.getSlice(\"x\") == null)\n        return false;\n      for (Replica r : c.getSlice(\"x\")) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n\n    new UpdateRequest()\n        .add(\"id\", \"66\", _ROUTE_, \"x\")\n        .commit(cluster.getSolrClient(), collection);\n    // TODO - the local state is cached and causes the request to fail with 'unknown shard'\n    // assertEquals(1, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"x\")).getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c374690db69470f6aa4bffc43dcacf1f4e3e49","date":1529007399,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testCustomCollectionsAPI().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testCustomCollectionsAPI().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testCustomCollectionsAPI() throws Exception {\n\n    final String collection = \"implicitcoll\";\n    int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 2;\n    int numShards = 3;\n    int maxShardsPerNode = (((numShards + 1) * replicationFactor) / NODE_COUNT) + 1;\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(collection);\n    assertEquals(\"implicit\", ((Map) coll.get(DOC_ROUTER)).get(\"name\"));\n    assertNotNull(coll.getStr(REPLICATION_FACTOR));\n    assertNotNull(coll.getStr(MAX_SHARDS_PER_NODE));\n    assertNull(\"A shard of a Collection configured with implicit router must have null range\",\n        coll.getSlice(\"a\").getRange());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\")\n        .add(\"id\", \"7\")\n        .add(\"id\", \"8\")\n        .withRoute(\"a\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n    cluster.getSolrClient().deleteByQuery(collection, \"*:*\");\n    cluster.getSolrClient().commit(collection, true, true);\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(\"id\", \"9\")\n        .add(\"id\", \"10\")\n        .add(\"id\", \"11\")\n        .withRoute(\"c\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n    //Testing CREATESHARD\n    CollectionAdminRequest.createShard(collection, \"x\")\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected shard 'x' to be active\", collection, (n, c) -> {\n      if (c.getSlice(\"x\") == null)\n        return false;\n      for (Replica r : c.getSlice(\"x\")) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n\n    new UpdateRequest()\n        .add(\"id\", \"66\", _ROUTE_, \"x\")\n        .commit(cluster.getSolrClient(), collection);\n    // TODO - the local state is cached and causes the request to fail with 'unknown shard'\n    // assertEquals(1, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"x\")).getResults().getNumFound());\n\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testCustomCollectionsAPI() throws Exception {\n\n    final String collection = \"implicitcoll\";\n    int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 2;\n    int numShards = 3;\n    int maxShardsPerNode = (((numShards + 1) * replicationFactor) / NODE_COUNT) + 1;\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(collection);\n    assertEquals(\"implicit\", ((Map) coll.get(DOC_ROUTER)).get(\"name\"));\n    assertNotNull(coll.getStr(REPLICATION_FACTOR));\n    assertNotNull(coll.getStr(MAX_SHARDS_PER_NODE));\n    assertNull(\"A shard of a Collection configured with implicit router must have null range\",\n        coll.getSlice(\"a\").getRange());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\")\n        .add(\"id\", \"7\")\n        .add(\"id\", \"8\")\n        .withRoute(\"a\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n    cluster.getSolrClient().deleteByQuery(collection, \"*:*\");\n    cluster.getSolrClient().commit(collection, true, true);\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(\"id\", \"9\")\n        .add(\"id\", \"10\")\n        .add(\"id\", \"11\")\n        .withRoute(\"c\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n    //Testing CREATESHARD\n    CollectionAdminRequest.createShard(collection, \"x\")\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected shard 'x' to be active\", collection, (n, c) -> {\n      if (c.getSlice(\"x\") == null)\n        return false;\n      for (Replica r : c.getSlice(\"x\")) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n\n    new UpdateRequest()\n        .add(\"id\", \"66\", _ROUTE_, \"x\")\n        .commit(cluster.getSolrClient(), collection);\n    // TODO - the local state is cached and causes the request to fail with 'unknown shard'\n    // assertEquals(1, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"x\")).getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testCustomCollectionsAPI().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testCustomCollectionsAPI().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testCustomCollectionsAPI() throws Exception {\n\n    final String collection = \"implicitcoll\";\n    int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 2;\n    int numShards = 3;\n    int maxShardsPerNode = (((numShards + 1) * replicationFactor) / NODE_COUNT) + 1;\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(collection);\n    assertEquals(\"implicit\", ((Map) coll.get(DOC_ROUTER)).get(\"name\"));\n    assertNotNull(coll.getStr(REPLICATION_FACTOR));\n    assertNotNull(coll.getStr(MAX_SHARDS_PER_NODE));\n    assertNull(\"A shard of a Collection configured with implicit router must have null range\",\n        coll.getSlice(\"a\").getRange());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\")\n        .add(\"id\", \"7\")\n        .add(\"id\", \"8\")\n        .withRoute(\"a\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n    cluster.getSolrClient().deleteByQuery(collection, \"*:*\");\n    cluster.getSolrClient().commit(collection, true, true);\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(\"id\", \"9\")\n        .add(\"id\", \"10\")\n        .add(\"id\", \"11\")\n        .withRoute(\"c\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n    //Testing CREATESHARD\n    CollectionAdminRequest.createShard(collection, \"x\")\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected shard 'x' to be active\", collection, (n, c) -> {\n      if (c.getSlice(\"x\") == null)\n        return false;\n      for (Replica r : c.getSlice(\"x\")) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n\n    new UpdateRequest()\n        .add(\"id\", \"66\", _ROUTE_, \"x\")\n        .commit(cluster.getSolrClient(), collection);\n    // TODO - the local state is cached and causes the request to fail with 'unknown shard'\n    // assertEquals(1, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"x\")).getResults().getNumFound());\n\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testCustomCollectionsAPI() throws Exception {\n\n    final String collection = \"implicitcoll\";\n    int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 2;\n    int numShards = 3;\n    int maxShardsPerNode = (((numShards + 1) * replicationFactor) / NODE_COUNT) + 1;\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(collection);\n    assertEquals(\"implicit\", ((Map) coll.get(DOC_ROUTER)).get(\"name\"));\n    assertNotNull(coll.getStr(REPLICATION_FACTOR));\n    assertNotNull(coll.getStr(MAX_SHARDS_PER_NODE));\n    assertNull(\"A shard of a Collection configured with implicit router must have null range\",\n        coll.getSlice(\"a\").getRange());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\")\n        .add(\"id\", \"7\")\n        .add(\"id\", \"8\")\n        .withRoute(\"a\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n    cluster.getSolrClient().deleteByQuery(collection, \"*:*\");\n    cluster.getSolrClient().commit(collection, true, true);\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(\"id\", \"9\")\n        .add(\"id\", \"10\")\n        .add(\"id\", \"11\")\n        .withRoute(\"c\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n    //Testing CREATESHARD\n    CollectionAdminRequest.createShard(collection, \"x\")\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected shard 'x' to be active\", collection, (n, c) -> {\n      if (c.getSlice(\"x\") == null)\n        return false;\n      for (Replica r : c.getSlice(\"x\")) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n\n    new UpdateRequest()\n        .add(\"id\", \"66\", _ROUTE_, \"x\")\n        .commit(cluster.getSolrClient(), collection);\n    // TODO - the local state is cached and causes the request to fail with 'unknown shard'\n    // assertEquals(1, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"x\")).getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testCustomCollectionsAPI().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testCustomCollectionsAPI().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testCustomCollectionsAPI() throws Exception {\n\n    final String collection = \"implicitcoll\";\n    int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 2;\n    int numShards = 3;\n    int maxShardsPerNode = (((numShards + 1) * replicationFactor) / NODE_COUNT) + 1;\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(collection);\n    assertEquals(\"implicit\", ((Map) coll.get(DOC_ROUTER)).get(\"name\"));\n    assertNotNull(coll.getStr(REPLICATION_FACTOR));\n    assertNotNull(coll.getStr(MAX_SHARDS_PER_NODE));\n    assertNull(\"A shard of a Collection configured with implicit router must have null range\",\n        coll.getSlice(\"a\").getRange());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\")\n        .add(\"id\", \"7\")\n        .add(\"id\", \"8\")\n        .withRoute(\"a\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n    cluster.getSolrClient().deleteByQuery(collection, \"*:*\");\n    cluster.getSolrClient().commit(collection, true, true);\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(\"id\", \"9\")\n        .add(\"id\", \"10\")\n        .add(\"id\", \"11\")\n        .withRoute(\"c\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n    //Testing CREATESHARD\n    CollectionAdminRequest.createShard(collection, \"x\")\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected shard 'x' to be active\", collection, (n, c) -> {\n      if (c.getSlice(\"x\") == null)\n        return false;\n      for (Replica r : c.getSlice(\"x\")) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n\n    new UpdateRequest()\n        .add(\"id\", \"66\", _ROUTE_, \"x\")\n        .commit(cluster.getSolrClient(), collection);\n    // TODO - the local state is cached and causes the request to fail with 'unknown shard'\n    // assertEquals(1, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"x\")).getResults().getNumFound());\n\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testCustomCollectionsAPI() throws Exception {\n\n    final String collection = \"implicitcoll\";\n    int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 2;\n    int numShards = 3;\n    int maxShardsPerNode = (((numShards + 1) * replicationFactor) / NODE_COUNT) + 1;\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(collection);\n    assertEquals(\"implicit\", ((Map) coll.get(DOC_ROUTER)).get(\"name\"));\n    assertNotNull(coll.getStr(REPLICATION_FACTOR));\n    assertNotNull(coll.getStr(MAX_SHARDS_PER_NODE));\n    assertNull(\"A shard of a Collection configured with implicit router must have null range\",\n        coll.getSlice(\"a\").getRange());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\")\n        .add(\"id\", \"7\")\n        .add(\"id\", \"8\")\n        .withRoute(\"a\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n    cluster.getSolrClient().deleteByQuery(collection, \"*:*\");\n    cluster.getSolrClient().commit(collection, true, true);\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(\"id\", \"9\")\n        .add(\"id\", \"10\")\n        .add(\"id\", \"11\")\n        .withRoute(\"c\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n    //Testing CREATESHARD\n    CollectionAdminRequest.createShard(collection, \"x\")\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected shard 'x' to be active\", collection, (n, c) -> {\n      if (c.getSlice(\"x\") == null)\n        return false;\n      for (Replica r : c.getSlice(\"x\")) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n\n    new UpdateRequest()\n        .add(\"id\", \"66\", _ROUTE_, \"x\")\n        .commit(cluster.getSolrClient(), collection);\n    // TODO - the local state is cached and causes the request to fail with 'unknown shard'\n    // assertEquals(1, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"x\")).getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testCustomCollectionsAPI().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testCustomCollectionsAPI().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testCustomCollectionsAPI() throws Exception {\n\n    final String collection = \"implicitcoll\";\n    int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 2;\n    int numShards = 3;\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", replicationFactor)\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(collection);\n    assertEquals(\"implicit\", ((Map) coll.get(DOC_ROUTER)).get(\"name\"));\n    assertNotNull(coll.getStr(REPLICATION_FACTOR));\n    assertNull(\"A shard of a Collection configured with implicit router must have null range\",\n        coll.getSlice(\"a\").getRange());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\")\n        .add(\"id\", \"7\")\n        .add(\"id\", \"8\")\n        .withRoute(\"a\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n    cluster.getSolrClient().deleteByQuery(collection, \"*:*\");\n    cluster.getSolrClient().commit(collection, true, true);\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(\"id\", \"9\")\n        .add(\"id\", \"10\")\n        .add(\"id\", \"11\")\n        .withRoute(\"c\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n    //Testing CREATESHARD\n    CollectionAdminRequest.createShard(collection, \"x\")\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected shard 'x' to be active\", collection, (n, c) -> {\n      if (c.getSlice(\"x\") == null)\n        return false;\n      for (Replica r : c.getSlice(\"x\")) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n\n    new UpdateRequest()\n        .add(\"id\", \"66\", _ROUTE_, \"x\")\n        .commit(cluster.getSolrClient(), collection);\n    // TODO - the local state is cached and causes the request to fail with 'unknown shard'\n    // assertEquals(1, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"x\")).getResults().getNumFound());\n\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testCustomCollectionsAPI() throws Exception {\n\n    final String collection = \"implicitcoll\";\n    int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 2;\n    int numShards = 3;\n    int maxShardsPerNode = (((numShards + 1) * replicationFactor) / NODE_COUNT) + 1;\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collection, \"conf\", \"a,b,c\", replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(collection);\n    assertEquals(\"implicit\", ((Map) coll.get(DOC_ROUTER)).get(\"name\"));\n    assertNotNull(coll.getStr(REPLICATION_FACTOR));\n    assertNotNull(coll.getStr(MAX_SHARDS_PER_NODE));\n    assertNull(\"A shard of a Collection configured with implicit router must have null range\",\n        coll.getSlice(\"a\").getRange());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\")\n        .add(\"id\", \"7\")\n        .add(\"id\", \"8\")\n        .withRoute(\"a\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n\n    cluster.getSolrClient().deleteByQuery(collection, \"*:*\");\n    cluster.getSolrClient().commit(collection, true, true);\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n    new UpdateRequest()\n        .add(\"id\", \"9\")\n        .add(\"id\", \"10\")\n        .add(\"id\", \"11\")\n        .withRoute(\"c\")\n        .commit(cluster.getSolrClient(), collection);\n\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(3, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n    //Testing CREATESHARD\n    CollectionAdminRequest.createShard(collection, \"x\")\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected shard 'x' to be active\", collection, (n, c) -> {\n      if (c.getSlice(\"x\") == null)\n        return false;\n      for (Replica r : c.getSlice(\"x\")) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n\n    new UpdateRequest()\n        .add(\"id\", \"66\", _ROUTE_, \"x\")\n        .commit(cluster.getSolrClient(), collection);\n    // TODO - the local state is cached and causes the request to fail with 'unknown shard'\n    // assertEquals(1, cluster.getSolrClient().query(collection, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"x\")).getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["43ad790248d7f7daee5d9cced548c546f37c7218","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43ad790248d7f7daee5d9cced548c546f37c7218":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["43ad790248d7f7daee5d9cced548c546f37c7218"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["43ad790248d7f7daee5d9cced548c546f37c7218","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["43ad790248d7f7daee5d9cced548c546f37c7218"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"43ad790248d7f7daee5d9cced548c546f37c7218":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a1c374690db69470f6aa4bffc43dcacf1f4e3e49","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}