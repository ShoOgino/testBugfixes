{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateAliasCmd#callCreatePlainAlias(ZkNodeProps,String,ZkStateReader).mjava","commits":[{"id":"46589ed5cc841861bf6b5e2afc55f718ebcd02a0","date":1516984620,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateAliasCmd#callCreatePlainAlias(ZkNodeProps,String,ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  private void callCreatePlainAlias(ZkNodeProps message, String aliasName, ZkStateReader zkStateReader) {\n    final List<String> canonicalCollectionList = parseCollectionsParameter(message.get(\"collections\"));\n    final String canonicalCollectionsString = StrUtils.join(canonicalCollectionList, ',');\n    validateAllCollectionsExistAndNoDups(canonicalCollectionList, zkStateReader);\n    zkStateReader.aliasesHolder\n        .applyModificationAndExportToZk(aliases -> aliases.cloneWithCollectionAlias(aliasName, canonicalCollectionsString));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cbd743a4843f513f793670e3ab0e272bf824faf","date":1518149529,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateAliasCmd#callCreatePlainAlias(ZkNodeProps,String,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateAliasCmd#callCreatePlainAlias(ZkNodeProps,String,ZkStateReader).mjava","sourceNew":"  private void callCreatePlainAlias(ZkNodeProps message, String aliasName, ZkStateReader zkStateReader) {\n    final List<String> canonicalCollectionList = parseCollectionsParameter(message.get(\"collections\"));\n    final String canonicalCollectionsString = StrUtils.join(canonicalCollectionList, ',');\n    validateAllCollectionsExistAndNoDups(canonicalCollectionList, zkStateReader);\n    zkStateReader.aliasesManager\n        .applyModificationAndExportToZk(aliases -> aliases.cloneWithCollectionAlias(aliasName, canonicalCollectionsString));\n  }\n\n","sourceOld":"  private void callCreatePlainAlias(ZkNodeProps message, String aliasName, ZkStateReader zkStateReader) {\n    final List<String> canonicalCollectionList = parseCollectionsParameter(message.get(\"collections\"));\n    final String canonicalCollectionsString = StrUtils.join(canonicalCollectionList, ',');\n    validateAllCollectionsExistAndNoDups(canonicalCollectionList, zkStateReader);\n    zkStateReader.aliasesHolder\n        .applyModificationAndExportToZk(aliases -> aliases.cloneWithCollectionAlias(aliasName, canonicalCollectionsString));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateAliasCmd#callCreatePlainAlias(ZkNodeProps,String,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateAliasCmd#callCreatePlainAlias(ZkNodeProps,String,ZkStateReader).mjava","sourceNew":"  private void callCreatePlainAlias(ZkNodeProps message, String aliasName, ZkStateReader zkStateReader) {\n    final List<String> canonicalCollectionList = parseCollectionsParameter(message.get(\"collections\"));\n    final String canonicalCollectionsString = StrUtils.join(canonicalCollectionList, ',');\n    validateAllCollectionsExistAndNoDuplicates(canonicalCollectionList, zkStateReader);\n    zkStateReader.aliasesManager\n        .applyModificationAndExportToZk(aliases -> aliases.cloneWithCollectionAlias(aliasName, canonicalCollectionsString));\n  }\n\n","sourceOld":"  private void callCreatePlainAlias(ZkNodeProps message, String aliasName, ZkStateReader zkStateReader) {\n    final List<String> canonicalCollectionList = parseCollectionsParameter(message.get(\"collections\"));\n    final String canonicalCollectionsString = StrUtils.join(canonicalCollectionList, ',');\n    validateAllCollectionsExistAndNoDups(canonicalCollectionList, zkStateReader);\n    zkStateReader.aliasesManager\n        .applyModificationAndExportToZk(aliases -> aliases.cloneWithCollectionAlias(aliasName, canonicalCollectionsString));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6e5eb1137994855cee975febe08850fcb7726d3","date":1558358375,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateAliasCmd#callCreatePlainAlias(ZkNodeProps,String,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateAliasCmd#callCreatePlainAlias(ZkNodeProps,String,ZkStateReader).mjava","sourceNew":"  private void callCreatePlainAlias(ZkNodeProps message, String aliasName, ZkStateReader zkStateReader) {\n    final List<String> canonicalCollectionList = parseCollectionsParameter(message.get(\"collections\"));\n    if (canonicalCollectionList.isEmpty()) {\n      throw new SolrException(BAD_REQUEST, \"'collections' parameter doesn't contain any collection names.\");\n    }\n    final String canonicalCollectionsString = StrUtils.join(canonicalCollectionList, ',');\n    validateAllCollectionsExistAndNoDuplicates(canonicalCollectionList, zkStateReader);\n    zkStateReader.aliasesManager\n        .applyModificationAndExportToZk(aliases -> aliases.cloneWithCollectionAlias(aliasName, canonicalCollectionsString));\n  }\n\n","sourceOld":"  private void callCreatePlainAlias(ZkNodeProps message, String aliasName, ZkStateReader zkStateReader) {\n    final List<String> canonicalCollectionList = parseCollectionsParameter(message.get(\"collections\"));\n    final String canonicalCollectionsString = StrUtils.join(canonicalCollectionList, ',');\n    validateAllCollectionsExistAndNoDuplicates(canonicalCollectionList, zkStateReader);\n    zkStateReader.aliasesManager\n        .applyModificationAndExportToZk(aliases -> aliases.cloneWithCollectionAlias(aliasName, canonicalCollectionsString));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"46589ed5cc841861bf6b5e2afc55f718ebcd02a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cbd743a4843f513f793670e3ab0e272bf824faf":["46589ed5cc841861bf6b5e2afc55f718ebcd02a0"],"b6e5eb1137994855cee975febe08850fcb7726d3":["b627755385655c7cd3fb296f17593658805cf4d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["3cbd743a4843f513f793670e3ab0e272bf824faf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6e5eb1137994855cee975febe08850fcb7726d3"]},"commit2Childs":{"46589ed5cc841861bf6b5e2afc55f718ebcd02a0":["3cbd743a4843f513f793670e3ab0e272bf824faf"],"3cbd743a4843f513f793670e3ab0e272bf824faf":["b627755385655c7cd3fb296f17593658805cf4d5"],"b6e5eb1137994855cee975febe08850fcb7726d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46589ed5cc841861bf6b5e2afc55f718ebcd02a0"],"b627755385655c7cd3fb296f17593658805cf4d5":["b6e5eb1137994855cee975febe08850fcb7726d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}