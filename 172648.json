{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNumericRangeQuery().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNumericRangeQuery().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNumericRangeQuery().mjava","sourceNew":"  public void testNumericRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = NumericRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, 6, true, true);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","sourceOld":"  public void testNumericRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = NumericRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, 6, true, true);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","date":1366056945,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNumericRangeQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNumericRangeQuery().mjava","sourceNew":"  public void testNumericRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = NumericRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, 6, true, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","sourceOld":"  public void testNumericRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = NumericRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, 6, true, true);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNumericRangeQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNumericRangeQuery().mjava","sourceNew":"  public void testNumericRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = NumericRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, 6, true, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","sourceOld":"  public void testNumericRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = NumericRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, 6, true, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","bugFix":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNumericRangeQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNumericRangeQuery().mjava","sourceNew":"  public void testNumericRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = NumericRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, 6, true, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","sourceOld":"  public void testNumericRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = NumericRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, 6, true, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testDimensionalRangeQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testNumericRangeQuery().mjava","sourceNew":"  public void testDimensionalRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = DimensionalRangeQuery.new1DIntRange(NUMERIC_FIELD_NAME, 2, true, 6, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","sourceOld":"  public void testNumericRangeQuery() throws Exception {\n    // doesn't currently highlight, but make sure it doesn't cause exception either\n    query = NumericRangeQuery.newIntRange(NUMERIC_FIELD_NAME, 2, 6, true, true);\n    searcher = newSearcher(reader);\n    hits = searcher.search(query, 100);\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this, scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).getField(NUMERIC_FIELD_NAME).numericValue().toString();\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n//      String result = \n        highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\"...\");\n      //if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"770342641f7b505eaa8dccdc666158bff2419109":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"770342641f7b505eaa8dccdc666158bff2419109":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}