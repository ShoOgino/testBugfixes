{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","commits":[{"id":"df5e4eb47076636341c2cfdc58472477477d7e96","date":1329187541,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","pathOld":"/dev/null","sourceNew":"  // used for deleteByQyery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n\n      ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(zkController.getZkStateReader().getLeaderProps(\n          collection, shardId));\n\n      String leaderNodeName = leaderProps.getCoreNodeName();\n      String coreName = req.getCore().getName();\n      String coreNodeName = zkController.getNodeName() + \"_\" + coreName;\n      isLeader = coreNodeName.equals(leaderNodeName);\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, zkController.getNodeName(),\n              coreName);\n      if (replicaProps != null) {\n        nodes = new ArrayList<Node>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a1979ad1f0ffdc73bb9a602373e2cef75b141dbe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"613328143fc4e9ad6e49e951301c7733adb38083","date":1330620114,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","sourceNew":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n\n      ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(zkController.getZkStateReader().getLeaderProps(\n          collection, shardId));\n\n      String leaderNodeName = leaderProps.getCoreNodeName();\n      String coreName = req.getCore().getName();\n      String coreNodeName = zkController.getNodeName() + \"_\" + coreName;\n      isLeader = coreNodeName.equals(leaderNodeName);\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, zkController.getNodeName(),\n              coreName);\n      if (replicaProps != null) {\n        nodes = new ArrayList<Node>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  // used for deleteByQyery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n\n      ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(zkController.getZkStateReader().getLeaderProps(\n          collection, shardId));\n\n      String leaderNodeName = leaderProps.getCoreNodeName();\n      String coreName = req.getCore().getName();\n      String coreNodeName = zkController.getNodeName() + \"_\" + coreName;\n      isLeader = coreNodeName.equals(leaderNodeName);\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, zkController.getNodeName(),\n              coreName);\n      if (replicaProps != null) {\n        nodes = new ArrayList<Node>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","sourceNew":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n\n      ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(zkController.getZkStateReader().getLeaderProps(\n          collection, shardId));\n\n      String leaderNodeName = leaderProps.getCoreNodeName();\n      String coreName = req.getCore().getName();\n      String coreNodeName = zkController.getNodeName() + \"_\" + coreName;\n      isLeader = coreNodeName.equals(leaderNodeName);\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, zkController.getNodeName(),\n              coreName);\n      if (replicaProps != null) {\n        nodes = new ArrayList<Node>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  // used for deleteByQyery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n\n      ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(zkController.getZkStateReader().getLeaderProps(\n          collection, shardId));\n\n      String leaderNodeName = leaderProps.getCoreNodeName();\n      String coreName = req.getCore().getName();\n      String coreNodeName = zkController.getNodeName() + \"_\" + coreName;\n      isLeader = coreNodeName.equals(leaderNodeName);\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, zkController.getNodeName(),\n              coreName);\n      if (replicaProps != null) {\n        nodes = new ArrayList<Node>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56a558aa5aadd60ae850d1ab090098bc63bdfaf9","date":1355245333,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","sourceNew":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n\n      ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(zkController.getZkStateReader().getLeaderRetry(\n          collection, shardId));\n\n      String leaderNodeName = leaderProps.getCoreNodeName();\n      String coreName = req.getCore().getName();\n      String coreNodeName = zkController.getNodeName() + \"_\" + coreName;\n      isLeader = coreNodeName.equals(leaderNodeName);\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, zkController.getNodeName(),\n              coreName);\n      if (replicaProps != null) {\n        nodes = new ArrayList<Node>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n\n      ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(zkController.getZkStateReader().getLeaderProps(\n          collection, shardId));\n\n      String leaderNodeName = leaderProps.getCoreNodeName();\n      String coreName = req.getCore().getName();\n      String coreNodeName = zkController.getNodeName() + \"_\" + coreName;\n      isLeader = coreNodeName.equals(leaderNodeName);\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, zkController.getNodeName(),\n              coreName);\n      if (replicaProps != null) {\n        nodes = new ArrayList<Node>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","sourceNew":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n\n      ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(zkController.getZkStateReader().getLeaderRetry(\n          collection, shardId));\n\n      String leaderNodeName = leaderProps.getCoreNodeName();\n      String coreName = req.getCore().getName();\n      String coreNodeName = zkController.getNodeName() + \"_\" + coreName;\n      isLeader = coreNodeName.equals(leaderNodeName);\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, zkController.getNodeName(),\n              coreName);\n      if (replicaProps != null) {\n        nodes = new ArrayList<Node>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n\n      ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(zkController.getZkStateReader().getLeaderProps(\n          collection, shardId));\n\n      String leaderNodeName = leaderProps.getCoreNodeName();\n      String coreName = req.getCore().getName();\n      String coreNodeName = zkController.getNodeName() + \"_\" + coreName;\n      isLeader = coreNodeName.equals(leaderNodeName);\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, zkController.getNodeName(),\n              coreName);\n      if (replicaProps != null) {\n        nodes = new ArrayList<Node>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","sourceNew":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n          collection, shardId);\n      String leaderCoreNodeName = leaderReplica.getName();\n\n      String coreNodeName = zkController.getCoreNodeName(req.getCore().getCoreDescriptor());\n      isLeader = coreNodeName.equals(leaderCoreNodeName);\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, coreNodeName,\n              req.getCore().getName());\n      if (replicaProps != null) {\n        nodes = new ArrayList<Node>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n\n      ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(zkController.getZkStateReader().getLeaderRetry(\n          collection, shardId));\n\n      String leaderNodeName = leaderProps.getCoreNodeName();\n      String coreName = req.getCore().getName();\n      String coreNodeName = zkController.getNodeName() + \"_\" + coreName;\n      isLeader = coreNodeName.equals(leaderNodeName);\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, zkController.getNodeName(),\n              coreName);\n      if (replicaProps != null) {\n        nodes = new ArrayList<Node>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":["a1979ad1f0ffdc73bb9a602373e2cef75b141dbe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0beaed456aa3358e5e4a99ea2aea994ef6c81de3","date":1365434191,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","sourceNew":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n          collection, shardId);\n      String leaderCoreNodeName = leaderReplica.getName();\n\n      String coreNodeName = zkController.getCoreNodeName(req.getCore().getCoreDescriptor());\n      isLeader = coreNodeName.equals(leaderCoreNodeName);\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, coreNodeName,\n              req.getCore().getName());\n      if (replicaProps != null) {\n        nodes = new ArrayList<Node>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props));\n        }\n      }\n\n      nodes = addSubShardLeaders(zkController.getClusterState().getCollection(collection), shardId, null, null, nodes);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n          collection, shardId);\n      String leaderCoreNodeName = leaderReplica.getName();\n\n      String coreNodeName = zkController.getCoreNodeName(req.getCore().getCoreDescriptor());\n      isLeader = coreNodeName.equals(leaderCoreNodeName);\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, coreNodeName,\n              req.getCore().getName());\n      if (replicaProps != null) {\n        nodes = new ArrayList<Node>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f1ea787bab5bdb5e72685e55424898da05509b6","date":1370289750,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","sourceNew":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n          collection, shardId);\n      String leaderCoreNodeName = leaderReplica.getName();\n\n      String coreNodeName = zkController.getCoreNodeName(req.getCore().getCoreDescriptor());\n      isLeader = coreNodeName.equals(leaderCoreNodeName);\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, coreNodeName,\n              req.getCore().getName());\n      if (replicaProps != null) {\n        nodes = new ArrayList<Node>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n          collection, shardId);\n      String leaderCoreNodeName = leaderReplica.getName();\n\n      String coreNodeName = zkController.getCoreNodeName(req.getCore().getCoreDescriptor());\n      isLeader = coreNodeName.equals(leaderCoreNodeName);\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, coreNodeName,\n              req.getCore().getName());\n      if (replicaProps != null) {\n        nodes = new ArrayList<Node>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props));\n        }\n      }\n\n      nodes = addSubShardLeaders(zkController.getClusterState().getCollection(collection), shardId, null, null, nodes);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","sourceNew":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n          collection, shardId);\n      isLeader = leaderReplica.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName(),\n              req.getCore().getName());\n      if (replicaProps != null) {\n        nodes = new ArrayList<Node>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n          collection, shardId);\n      String leaderCoreNodeName = leaderReplica.getName();\n\n      String coreNodeName = zkController.getCoreNodeName(req.getCore().getCoreDescriptor());\n      isLeader = coreNodeName.equals(leaderCoreNodeName);\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, coreNodeName,\n              req.getCore().getName());\n      if (replicaProps != null) {\n        nodes = new ArrayList<Node>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","sourceNew":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n          collection, shardId);\n      isLeader = leaderReplica.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName(),\n              req.getCore().getName());\n      if (replicaProps != null) {\n        nodes = new ArrayList<Node>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n          collection, shardId);\n      String leaderCoreNodeName = leaderReplica.getName();\n\n      String coreNodeName = zkController.getCoreNodeName(req.getCore().getCoreDescriptor());\n      isLeader = coreNodeName.equals(leaderCoreNodeName);\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, coreNodeName,\n              req.getCore().getName());\n      if (replicaProps != null) {\n        nodes = new ArrayList<Node>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","sourceNew":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n          collection, shardId);\n      isLeader = leaderReplica.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName(),\n              req.getCore().getName());\n      if (replicaProps != null) {\n        nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n          collection, shardId);\n      isLeader = leaderReplica.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName(),\n              req.getCore().getName());\n      if (replicaProps != null) {\n        nodes = new ArrayList<Node>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"14d5815ecbef89580f5c48990bcd433f04f8563a","date":1399564106,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","sourceNew":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n          collection, shardId);\n      isLeader = leaderReplica.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName(),\n              req.getCore().getName());\n      if (replicaProps != null) {\n        nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props, collection, shardId));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n          collection, shardId);\n      isLeader = leaderReplica.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName(),\n              req.getCore().getName());\n      if (replicaProps != null) {\n        nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a81e7d9c7ad18b6ec658ebdb132dd51a2164f039","date":1405209123,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","sourceNew":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n          collection, shardId);\n      isLeader = leaderReplica.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName());\n      if (replicaProps != null) {\n        nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props, collection, shardId));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n          collection, shardId);\n      isLeader = leaderReplica.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName(),\n              req.getCore().getName());\n      if (replicaProps != null) {\n        nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props, collection, shardId));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":["a1979ad1f0ffdc73bb9a602373e2cef75b141dbe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1979ad1f0ffdc73bb9a602373e2cef75b141dbe","date":1481585302,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","sourceNew":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n      if (replicaProps != null) {\n        nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props, collection, shardId));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n          collection, shardId);\n      isLeader = leaderReplica.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName());\n      if (replicaProps != null) {\n        nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props, collection, shardId));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","bugFix":["df5e4eb47076636341c2cfdc58472477477d7e96","cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","a81e7d9c7ad18b6ec658ebdb132dd51a2164f039"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","sourceNew":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n      if (replicaProps != null) {\n        nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props, collection, shardId));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n          collection, shardId);\n      isLeader = leaderReplica.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName());\n      if (replicaProps != null) {\n        nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props, collection, shardId));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n          e);\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":5,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequestForDBQ().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","sourceNew":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequestForDBQ() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN, EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n      if (replicaProps != null) {\n        nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props, collection, shardId));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n      if (replicaProps != null) {\n        nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props, collection, shardId));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#setupRequest().mjava","sourceNew":null,"sourceOld":"  // used for deleteByQuery to get the list of nodes this leader should forward to\n  private List<Node> setupRequest() {\n    List<Node> nodes = null;\n    String shardId = cloudDesc.getShardId();\n\n    try {\n      Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, shardId);\n      isLeader = leaderReplica.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n\n      // TODO: what if we are no longer the leader?\n\n      forwardToLeader = false;\n      List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n          .getReplicaProps(collection, shardId, leaderReplica.getName(), null, Replica.State.DOWN);\n      if (replicaProps != null) {\n        nodes = new ArrayList<>(replicaProps.size());\n        for (ZkCoreNodeProps props : replicaProps) {\n          nodes.add(new StdNode(props, collection, shardId));\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["613328143fc4e9ad6e49e951301c7733adb38083","56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a1979ad1f0ffdc73bb9a602373e2cef75b141dbe"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["8f1ea787bab5bdb5e72685e55424898da05509b6","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["df5e4eb47076636341c2cfdc58472477477d7e96","613328143fc4e9ad6e49e951301c7733adb38083"],"a1979ad1f0ffdc73bb9a602373e2cef75b141dbe":["a81e7d9c7ad18b6ec658ebdb132dd51a2164f039"],"8f1ea787bab5bdb5e72685e55424898da05509b6":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["8f1ea787bab5bdb5e72685e55424898da05509b6"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a1979ad1f0ffdc73bb9a602373e2cef75b141dbe","61c45e99cf6676da48f19d7511c73712ad39402b"],"613328143fc4e9ad6e49e951301c7733adb38083":["df5e4eb47076636341c2cfdc58472477477d7e96"],"a81e7d9c7ad18b6ec658ebdb132dd51a2164f039":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"14d5815ecbef89580f5c48990bcd433f04f8563a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"9856095f7afb5a607bf5e65077615ed91273508c":["a81e7d9c7ad18b6ec658ebdb132dd51a2164f039","a1979ad1f0ffdc73bb9a602373e2cef75b141dbe"],"56a558aa5aadd60ae850d1ab090098bc63bdfaf9":["613328143fc4e9ad6e49e951301c7733adb38083"],"df5e4eb47076636341c2cfdc58472477477d7e96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61c45e99cf6676da48f19d7511c73712ad39402b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a1979ad1f0ffdc73bb9a602373e2cef75b141dbe":["61c45e99cf6676da48f19d7511c73712ad39402b","e9017cf144952056066919f1ebc7897ff9bd71b1","9856095f7afb5a607bf5e65077615ed91273508c"],"8f1ea787bab5bdb5e72685e55424898da05509b6":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["8f1ea787bab5bdb5e72685e55424898da05509b6"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"613328143fc4e9ad6e49e951301c7733adb38083":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"a81e7d9c7ad18b6ec658ebdb132dd51a2164f039":["a1979ad1f0ffdc73bb9a602373e2cef75b141dbe","9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df5e4eb47076636341c2cfdc58472477477d7e96"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["a81e7d9c7ad18b6ec658ebdb132dd51a2164f039"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"56a558aa5aadd60ae850d1ab090098bc63bdfaf9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"df5e4eb47076636341c2cfdc58472477477d7e96":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","613328143fc4e9ad6e49e951301c7733adb38083"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","e9017cf144952056066919f1ebc7897ff9bd71b1","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}