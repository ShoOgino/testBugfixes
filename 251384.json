{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","sourceNew":"  // inherit javadocs\n  public byte[] getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)\n      throws IOException {\n    return (byte[]) caches.get(Byte.TYPE).get(reader, new Entry(field, parser), setDocsWithField);\n  }\n\n","sourceOld":"  // inherit javadocs\n  public byte[] getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)\n      throws IOException {\n    return (byte[]) caches.get(Byte.TYPE).get(reader, new Entry(field, parser), setDocsWithField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f45457a742a53533c348c4b990b1c579ff364467","date":1353197071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","sourceNew":"  // inherit javadocs\n  public Bytes getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)\n      throws IOException {\n    return (Bytes) caches.get(Byte.TYPE).get(reader, new Entry(field, parser), setDocsWithField);\n  }\n\n","sourceOld":"  // inherit javadocs\n  public byte[] getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)\n      throws IOException {\n    return (byte[]) caches.get(Byte.TYPE).get(reader, new Entry(field, parser), setDocsWithField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","sourceNew":"  // inherit javadocs\n  public Bytes getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)\n      throws IOException {\n    return (Bytes) caches.get(Byte.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n  }\n\n","sourceOld":"  // inherit javadocs\n  public Bytes getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)\n      throws IOException {\n    return (Bytes) caches.get(Byte.TYPE).get(reader, new Entry(field, parser), setDocsWithField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","sourceNew":"  // inherit javadocs\n  @Override\n  public byte[] getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)\n      throws IOException {\n    return (byte[]) caches.get(Byte.TYPE).get(reader, new Entry(field, parser), setDocsWithField);\n  }\n\n","sourceOld":"  // inherit javadocs\n  public byte[] getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)\n      throws IOException {\n    return (byte[]) caches.get(Byte.TYPE).get(reader, new Entry(field, parser), setDocsWithField);\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6312aec6ba581f919d406ceff362bef430382c31","date":1358775555,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","sourceNew":"  // inherit javadocs\n  public Bytes getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)\n      throws IOException {\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return new Bytes() {\n        @Override\n        public byte get(int docID) {\n          return (byte) valuesIn.get(docID);\n        }\n      };\n    } else {\n      return (Bytes) caches.get(Byte.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n    }\n  }\n\n","sourceOld":"  // inherit javadocs\n  public Bytes getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)\n      throws IOException {\n    return (Bytes) caches.get(Byte.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","sourceNew":"  // inherit javadocs\n  public Bytes getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)\n      throws IOException {\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return new Bytes() {\n        @Override\n        public byte get(int docID) {\n          return (byte) valuesIn.get(docID);\n        }\n      };\n    } else {\n      return (Bytes) caches.get(Byte.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n    }\n  }\n\n","sourceOld":"  // inherit javadocs\n  @Override\n  public byte[] getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)\n      throws IOException {\n    return (byte[]) caches.get(Byte.TYPE).get(reader, new Entry(field, parser), setDocsWithField);\n  }\n\n","bugFix":["7530de27b87b961b51f01bd1299b7004d46e8823","da6d5ac19a80d65b1e864251f155d30960353b7e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd4c0978a282e44867032b4d99f280a07fa16321","date":1360738062,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","sourceNew":"  // inherit javadocs\n  public Bytes getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)\n      throws IOException {\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return new Bytes() {\n        @Override\n        public byte get(int docID) {\n          return (byte) valuesIn.get(docID);\n        }\n      };\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info != null && info.hasDocValues()) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      return (Bytes) caches.get(Byte.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n    }\n  }\n\n","sourceOld":"  // inherit javadocs\n  public Bytes getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)\n      throws IOException {\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return new Bytes() {\n        @Override\n        public byte get(int docID) {\n          return (byte) valuesIn.get(docID);\n        }\n      };\n    } else {\n      return (Bytes) caches.get(Byte.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08df901046e2bf7914ed4e142aa64ca7b2f40114","date":1360778343,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","sourceNew":"  // inherit javadocs\n  public Bytes getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)\n      throws IOException {\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return new Bytes() {\n        @Override\n        public byte get(int docID) {\n          return (byte) valuesIn.get(docID);\n        }\n      };\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info != null && info.hasDocValues()) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      return (Bytes) caches.get(Byte.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n    }\n  }\n\n","sourceOld":"  // inherit javadocs\n  public Bytes getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)\n      throws IOException {\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return new Bytes() {\n        @Override\n        public byte get(int docID) {\n          return (byte) valuesIn.get(docID);\n        }\n      };\n    } else {\n      return (Bytes) caches.get(Byte.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n    }\n  }\n\n","bugFix":null,"bugIntro":["b4e0d3f6116e64a8ab4c338fed19498407856738"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b4e0d3f6116e64a8ab4c338fed19498407856738","date":1360786773,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","sourceNew":"  // inherit javadocs\n  public Bytes getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)\n      throws IOException {\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return new Bytes() {\n        @Override\n        public byte get(int docID) {\n          return (byte) valuesIn.get(docID);\n        }\n      };\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return Bytes.EMPTY;\n      } else if (info.hasDocValues()) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      } else if (!info.isIndexed()) {\n        return Bytes.EMPTY;\n      }\n      return (Bytes) caches.get(Byte.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n    }\n  }\n\n","sourceOld":"  // inherit javadocs\n  public Bytes getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)\n      throws IOException {\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return new Bytes() {\n        @Override\n        public byte get(int docID) {\n          return (byte) valuesIn.get(docID);\n        }\n      };\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info != null && info.hasDocValues()) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      return (Bytes) caches.get(Byte.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n    }\n  }\n\n","bugFix":["08df901046e2bf7914ed4e142aa64ca7b2f40114"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f9453e226f2896430e77ec8e7837c1441a9aeb0","date":1360788152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","sourceNew":"  // inherit javadocs\n  public Bytes getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)\n      throws IOException {\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return new Bytes() {\n        @Override\n        public byte get(int docID) {\n          return (byte) valuesIn.get(docID);\n        }\n      };\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return Bytes.EMPTY;\n      } else if (info.hasDocValues()) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      } else if (!info.isIndexed()) {\n        return Bytes.EMPTY;\n      }\n      return (Bytes) caches.get(Byte.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n    }\n  }\n\n","sourceOld":"  // inherit javadocs\n  public Bytes getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)\n      throws IOException {\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return new Bytes() {\n        @Override\n        public byte get(int docID) {\n          return (byte) valuesIn.get(docID);\n        }\n      };\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info != null && info.hasDocValues()) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      return (Bytes) caches.get(Byte.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","sourceNew":null,"sourceOld":"  // inherit javadocs\n  public Bytes getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)\n      throws IOException {\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return new Bytes() {\n        @Override\n        public byte get(int docID) {\n          return (byte) valuesIn.get(docID);\n        }\n      };\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return Bytes.EMPTY;\n      } else if (info.hasDocValues()) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      } else if (!info.isIndexed()) {\n        return Bytes.EMPTY;\n      }\n      return (Bytes) caches.get(Byte.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getBytes(AtomicReader,String,ByteParser,boolean).mjava","sourceNew":null,"sourceOld":"  // inherit javadocs\n  public Bytes getBytes(AtomicReader reader, String field, ByteParser parser, boolean setDocsWithField)\n      throws IOException {\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return new Bytes() {\n        @Override\n        public byte get(int docID) {\n          return (byte) valuesIn.get(docID);\n        }\n      };\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return Bytes.EMPTY;\n      } else if (info.hasDocValues()) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      } else if (!info.isIndexed()) {\n        return Bytes.EMPTY;\n      }\n      return (Bytes) caches.get(Byte.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b4e0d3f6116e64a8ab4c338fed19498407856738","59a0020b413d44dd79d85d7a66ed5004265fb453"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["f45457a742a53533c348c4b990b1c579ff364467"],"f45457a742a53533c348c4b990b1c579ff364467":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b4e0d3f6116e64a8ab4c338fed19498407856738":["08df901046e2bf7914ed4e142aa64ca7b2f40114"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["7530de27b87b961b51f01bd1299b7004d46e8823","6312aec6ba581f919d406ceff362bef430382c31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f9453e226f2896430e77ec8e7837c1441a9aeb0":["fd4c0978a282e44867032b4d99f280a07fa16321","b4e0d3f6116e64a8ab4c338fed19498407856738"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["b4e0d3f6116e64a8ab4c338fed19498407856738"],"6312aec6ba581f919d406ceff362bef430382c31":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"fd4c0978a282e44867032b4d99f280a07fa16321":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"08df901046e2bf7914ed4e142aa64ca7b2f40114":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"7530de27b87b961b51f01bd1299b7004d46e8823":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59a0020b413d44dd79d85d7a66ed5004265fb453"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f45457a742a53533c348c4b990b1c579ff364467","7530de27b87b961b51f01bd1299b7004d46e8823"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["6312aec6ba581f919d406ceff362bef430382c31"],"f45457a742a53533c348c4b990b1c579ff364467":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"b4e0d3f6116e64a8ab4c338fed19498407856738":["37a0f60745e53927c4c876cfe5b5a58170f0646c","0f9453e226f2896430e77ec8e7837c1441a9aeb0","59a0020b413d44dd79d85d7a66ed5004265fb453"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["fd4c0978a282e44867032b4d99f280a07fa16321","08df901046e2bf7914ed4e142aa64ca7b2f40114"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0f9453e226f2896430e77ec8e7837c1441a9aeb0":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6312aec6ba581f919d406ceff362bef430382c31":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"fd4c0978a282e44867032b4d99f280a07fa16321":["0f9453e226f2896430e77ec8e7837c1441a9aeb0"],"08df901046e2bf7914ed4e142aa64ca7b2f40114":["b4e0d3f6116e64a8ab4c338fed19498407856738"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","0f9453e226f2896430e77ec8e7837c1441a9aeb0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}