{"path":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#transform(SolrDocument,int).mjava","commits":[{"id":"320eec6599df6f97f2461a5d1ad49cd93b324a14","date":1503502574,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n\n    final SolrParams docWithDeprefixed = SolrParams.wrapDefaults(\n        new DocRowParams(doc, prefix, separator), baseSubParams);\n    try {\n      Callable<QueryResponse> subQuery = new Callable<QueryResponse>() {\n        @Override\n        public QueryResponse call() throws Exception {\n          try {\n            return new QueryResponse(\n                server.request(\n                    new QueryRequest(docWithDeprefixed), coreName)\n                , server);\n          } finally {\n          }\n        }\n      };\n      QueryResponse response = \n          SolrRequestInfoSuspender.doInSuspension(subQuery);\n\n      final SolrDocumentList docList = (SolrDocumentList) response.getResults();\n\n      doc.setField(getName(), new Result(docList));\n\n    } catch (Exception e) {\n      String docString = doc.toString();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"while invoking \" +\n          name + \":[subquery\"+ (coreName!=null ? \"fromIndex=\"+coreName : \"\") +\"] on doc=\" +\n            docString.substring(0, Math.min(100, docString.length())), e.getCause());\n    } finally {}\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    final SolrParams docWithDeprefixed = SolrParams.wrapDefaults(\n        new DocRowParams(doc, prefix, separator), baseSubParams);\n    try {\n      Callable<QueryResponse> subQuery = new Callable<QueryResponse>() {\n        @Override\n        public QueryResponse call() throws Exception {\n          try {\n            return new QueryResponse(\n                server.request(\n                    new QueryRequest(docWithDeprefixed), coreName)\n                , server);\n          } finally {\n          }\n        }\n      };\n      QueryResponse response = \n          SolrRequestInfoSuspender.doInSuspension(subQuery);\n\n      final SolrDocumentList docList = (SolrDocumentList) response.getResults();\n\n      doc.setField(getName(), new Result(docList));\n\n    } catch (Exception e) {\n      String docString = doc.toString();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"while invoking \" +\n          name + \":[subquery\"+ (coreName!=null ? \"fromIndex=\"+coreName : \"\") +\"] on doc=\" +\n            docString.substring(0, Math.min(100, docString.length())), e.getCause());\n    } finally {}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182384b20c064aa16998ddebe9f36e649279c5a6","date":1503596494,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n\n    final SolrParams docWithDeprefixed = SolrParams.wrapDefaults(\n        new DocRowParams(doc, prefix, separator), baseSubParams);\n    try {\n      Callable<QueryResponse> subQuery = new Callable<QueryResponse>() {\n        @Override\n        public QueryResponse call() throws Exception {\n          try {\n            return new QueryResponse(\n                server.request(\n                    new QueryRequest(docWithDeprefixed), coreName)\n                , server);\n          } finally {\n          }\n        }\n      };\n      QueryResponse response = \n          SolrRequestInfoSuspender.doInSuspension(subQuery);\n\n      final SolrDocumentList docList = (SolrDocumentList) response.getResults();\n\n      doc.setField(getName(), new Result(docList));\n\n    } catch (Exception e) {\n      String docString = doc.toString();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"while invoking \" +\n          name + \":[subquery\"+ (coreName!=null ? \"fromIndex=\"+coreName : \"\") +\"] on doc=\" +\n            docString.substring(0, Math.min(100, docString.length())), e.getCause());\n    } finally {}\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    final SolrParams docWithDeprefixed = SolrParams.wrapDefaults(\n        new DocRowParams(doc, prefix, separator), baseSubParams);\n    try {\n      Callable<QueryResponse> subQuery = new Callable<QueryResponse>() {\n        @Override\n        public QueryResponse call() throws Exception {\n          try {\n            return new QueryResponse(\n                server.request(\n                    new QueryRequest(docWithDeprefixed), coreName)\n                , server);\n          } finally {\n          }\n        }\n      };\n      QueryResponse response = \n          SolrRequestInfoSuspender.doInSuspension(subQuery);\n\n      final SolrDocumentList docList = (SolrDocumentList) response.getResults();\n\n      doc.setField(getName(), new Result(docList));\n\n    } catch (Exception e) {\n      String docString = doc.toString();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"while invoking \" +\n          name + \":[subquery\"+ (coreName!=null ? \"fromIndex=\"+coreName : \"\") +\"] on doc=\" +\n            docString.substring(0, Math.min(100, docString.length())), e.getCause());\n    } finally {}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n\n    final SolrParams docWithDeprefixed = SolrParams.wrapDefaults(\n        new DocRowParams(doc, prefix, separator), baseSubParams);\n    try {\n      Callable<QueryResponse> subQuery = new Callable<QueryResponse>() {\n        @Override\n        public QueryResponse call() throws Exception {\n          try {\n            return new QueryResponse(\n                server.request(\n                    new QueryRequest(docWithDeprefixed), coreName)\n                , server);\n          } finally {\n          }\n        }\n      };\n      QueryResponse response = \n          SolrRequestInfoSuspender.doInSuspension(subQuery);\n\n      final SolrDocumentList docList = (SolrDocumentList) response.getResults();\n\n      doc.setField(getName(), new Result(docList));\n\n    } catch (Exception e) {\n      String docString = doc.toString();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"while invoking \" +\n          name + \":[subquery\"+ (coreName!=null ? \"fromIndex=\"+coreName : \"\") +\"] on doc=\" +\n            docString.substring(0, Math.min(100, docString.length())), e.getCause());\n    } finally {}\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    final SolrParams docWithDeprefixed = SolrParams.wrapDefaults(\n        new DocRowParams(doc, prefix, separator), baseSubParams);\n    try {\n      Callable<QueryResponse> subQuery = new Callable<QueryResponse>() {\n        @Override\n        public QueryResponse call() throws Exception {\n          try {\n            return new QueryResponse(\n                server.request(\n                    new QueryRequest(docWithDeprefixed), coreName)\n                , server);\n          } finally {\n          }\n        }\n      };\n      QueryResponse response = \n          SolrRequestInfoSuspender.doInSuspension(subQuery);\n\n      final SolrDocumentList docList = (SolrDocumentList) response.getResults();\n\n      doc.setField(getName(), new Result(docList));\n\n    } catch (Exception e) {\n      String docString = doc.toString();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"while invoking \" +\n          name + \":[subquery\"+ (coreName!=null ? \"fromIndex=\"+coreName : \"\") +\"] on doc=\" +\n            docString.substring(0, Math.min(100, docString.length())), e.getCause());\n    } finally {}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n\n    final SolrParams docWithDeprefixed = SolrParams.wrapDefaults(\n        new DocRowParams(doc, prefix, separator), baseSubParams);\n    try {\n      Callable<QueryResponse> subQuery = new Callable<QueryResponse>() {\n        @Override\n        public QueryResponse call() throws Exception {\n          try {\n            return new QueryResponse(\n                server.request(\n                    new QueryRequest(docWithDeprefixed), coreName)\n                , server);\n          } finally {\n          }\n        }\n      };\n      QueryResponse response = \n          SolrRequestInfoSuspender.doInSuspension(subQuery);\n\n      final SolrDocumentList docList = response.getResults();\n\n      doc.setField(getName(), new Result(docList));\n\n    } catch (Exception e) {\n      String docString = doc.toString();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"while invoking \" +\n          name + \":[subquery\"+ (coreName!=null ? \"fromIndex=\"+coreName : \"\") +\"] on doc=\" +\n            docString.substring(0, Math.min(100, docString.length())), e.getCause());\n    } finally {}\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n\n    final SolrParams docWithDeprefixed = SolrParams.wrapDefaults(\n        new DocRowParams(doc, prefix, separator), baseSubParams);\n    try {\n      Callable<QueryResponse> subQuery = new Callable<QueryResponse>() {\n        @Override\n        public QueryResponse call() throws Exception {\n          try {\n            return new QueryResponse(\n                server.request(\n                    new QueryRequest(docWithDeprefixed), coreName)\n                , server);\n          } finally {\n          }\n        }\n      };\n      QueryResponse response = \n          SolrRequestInfoSuspender.doInSuspension(subQuery);\n\n      final SolrDocumentList docList = (SolrDocumentList) response.getResults();\n\n      doc.setField(getName(), new Result(docList));\n\n    } catch (Exception e) {\n      String docString = doc.toString();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"while invoking \" +\n          name + \":[subquery\"+ (coreName!=null ? \"fromIndex=\"+coreName : \"\") +\"] on doc=\" +\n            docString.substring(0, Math.min(100, docString.length())), e.getCause());\n    } finally {}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4","date":1592286410,"type":3,"author":"Nazerke Seidan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n\n    final SolrParams docWithDeprefixed = SolrParams.wrapDefaults(\n        new DocRowParams(doc, prefix, separator), baseSubParams);\n    try {\n      QueryResponse rsp = server.query(coreName, docWithDeprefixed);\n      SolrDocumentList docList = rsp.getResults();\n      doc.setField(getName(), new Result(docList));\n    } catch (Exception e) {\n      String docString = doc.toString();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"while invoking \" +\n          name + \":[subquery\"+ (coreName!=null ? \"fromIndex=\"+coreName : \"\") +\"] on doc=\" +\n            docString.substring(0, Math.min(100, docString.length())), e.getCause());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n\n    final SolrParams docWithDeprefixed = SolrParams.wrapDefaults(\n        new DocRowParams(doc, prefix, separator), baseSubParams);\n    try {\n      Callable<QueryResponse> subQuery = new Callable<QueryResponse>() {\n        @Override\n        public QueryResponse call() throws Exception {\n          try {\n            return new QueryResponse(\n                server.request(\n                    new QueryRequest(docWithDeprefixed), coreName)\n                , server);\n          } finally {\n          }\n        }\n      };\n      QueryResponse response = \n          SolrRequestInfoSuspender.doInSuspension(subQuery);\n\n      final SolrDocumentList docList = response.getResults();\n\n      doc.setField(getName(), new Result(docList));\n\n    } catch (Exception e) {\n      String docString = doc.toString();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"while invoking \" +\n          name + \":[subquery\"+ (coreName!=null ? \"fromIndex=\"+coreName : \"\") +\"] on doc=\" +\n            docString.substring(0, Math.min(100, docString.length())), e.getCause());\n    } finally {}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","182384b20c064aa16998ddebe9f36e649279c5a6"],"320eec6599df6f97f2461a5d1ad49cd93b324a14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"182384b20c064aa16998ddebe9f36e649279c5a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","320eec6599df6f97f2461a5d1ad49cd93b324a14"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["182384b20c064aa16998ddebe9f36e649279c5a6"],"a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4"]},"commit2Childs":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"320eec6599df6f97f2461a5d1ad49cd93b324a14":["182384b20c064aa16998ddebe9f36e649279c5a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","320eec6599df6f97f2461a5d1ad49cd93b324a14","182384b20c064aa16998ddebe9f36e649279c5a6"],"182384b20c064aa16998ddebe9f36e649279c5a6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","06a8891f085f71282bb3ece1b1732b68f07813a3"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4"],"a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}