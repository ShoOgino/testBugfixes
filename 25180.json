{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(Collection[String],String).mjava","commits":[{"id":"471d806b28fa8f148222eb0c300dcab1047a391d","date":1413210204,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(Collection[String],String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new client object using multiple string values in a Collection\n   * instead of a standard zkHost connection string. Note that this method will\n   * not be used if there is only one String argument - that will use\n   * {@link #CloudSolrServer(String)} instead.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @throws IllegalArgumentException\n   *           if the chroot value does not start with a forward slash.\n   * @see #CloudSolrServer(String)\n   */\n  public CloudSolrServer(Collection<String> zkHosts, String chroot) {\n    \n    StringBuilder zkBuilder = new StringBuilder();\n    int lastIndexValue = zkHosts.size() - 1;\n    int i = 0;\n    for (String zkHost : zkHosts) {\n      zkBuilder.append(zkHost);\n      if (i < lastIndexValue) {\n        zkBuilder.append(\",\");\n      }\n      i++;\n    }\n    if (chroot != null) {\n      if (chroot.startsWith(\"/\")) {\n        zkBuilder.append(chroot);\n      } else {\n        throw new IllegalArgumentException(\n            \"The chroot must start with a forward slash.\");\n      }\n    }\n    \n    /* Log the constructed connection string and then initialize. */\n    log.info(\"Final constructed zkHost string: \" + zkBuilder.toString());\n    \n    this.zkHost = zkBuilder.toString();\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = true;\n    shutdownLBHttpSolrServer = true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(Collection[String],String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new client object using multiple string values in a Collection\n   * instead of a standard zkHost connection string. Note that this method will\n   * not be used if there is only one String argument - that will use\n   * {@link #CloudSolrServer(String)} instead.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @throws IllegalArgumentException\n   *           if the chroot value does not start with a forward slash.\n   * @see #CloudSolrServer(String)\n   */\n  public CloudSolrServer(Collection<String> zkHosts, String chroot) {\n    \n    StringBuilder zkBuilder = new StringBuilder();\n    int lastIndexValue = zkHosts.size() - 1;\n    int i = 0;\n    for (String zkHost : zkHosts) {\n      zkBuilder.append(zkHost);\n      if (i < lastIndexValue) {\n        zkBuilder.append(\",\");\n      }\n      i++;\n    }\n    if (chroot != null) {\n      if (chroot.startsWith(\"/\")) {\n        zkBuilder.append(chroot);\n      } else {\n        throw new IllegalArgumentException(\n            \"The chroot must start with a forward slash.\");\n      }\n    }\n    \n    /* Log the constructed connection string and then initialize. */\n    log.info(\"Final constructed zkHost string: \" + zkBuilder.toString());\n    \n    this.zkHost = zkBuilder.toString();\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = true;\n    shutdownLBHttpSolrServer = true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"791652abeeebb8642f54a7b42ca914c55805479a","date":1413382171,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(Collection[String],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(Collection[String],String).mjava","sourceNew":"  /**\n   * Create a new client object using multiple string values in a Collection\n   * instead of a standard zkHost connection string. Note that this method will\n   * not be used if there is only one String argument - that will use\n   * {@link #CloudSolrServer(String)} instead.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @throws IllegalArgumentException\n   *           if the chroot value does not start with a forward slash.\n   * @see #CloudSolrServer(String)\n   */\n  public CloudSolrServer(Collection<String> zkHosts, String chroot) {\n    this(zkHosts, chroot, null);\n  }\n\n","sourceOld":"  /**\n   * Create a new client object using multiple string values in a Collection\n   * instead of a standard zkHost connection string. Note that this method will\n   * not be used if there is only one String argument - that will use\n   * {@link #CloudSolrServer(String)} instead.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @throws IllegalArgumentException\n   *           if the chroot value does not start with a forward slash.\n   * @see #CloudSolrServer(String)\n   */\n  public CloudSolrServer(Collection<String> zkHosts, String chroot) {\n    \n    StringBuilder zkBuilder = new StringBuilder();\n    int lastIndexValue = zkHosts.size() - 1;\n    int i = 0;\n    for (String zkHost : zkHosts) {\n      zkBuilder.append(zkHost);\n      if (i < lastIndexValue) {\n        zkBuilder.append(\",\");\n      }\n      i++;\n    }\n    if (chroot != null) {\n      if (chroot.startsWith(\"/\")) {\n        zkBuilder.append(chroot);\n      } else {\n        throw new IllegalArgumentException(\n            \"The chroot must start with a forward slash.\");\n      }\n    }\n    \n    /* Log the constructed connection string and then initialize. */\n    log.info(\"Final constructed zkHost string: \" + zkBuilder.toString());\n    \n    this.zkHost = zkBuilder.toString();\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = true;\n    shutdownLBHttpSolrServer = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","date":1413458798,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(Collection[String],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(Collection[String],String).mjava","sourceNew":"  /**\n   * Create a new client object using multiple string values in a Collection\n   * instead of a standard zkHost connection string. Note that this method will\n   * not be used if there is only one String argument - that will use\n   * {@link #CloudSolrServer(String)} instead.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @throws IllegalArgumentException\n   *           if the chroot value does not start with a forward slash.\n   * @see #CloudSolrServer(String)\n   */\n  public CloudSolrServer(Collection<String> zkHosts, String chroot) {\n    this(zkHosts, chroot, null);\n  }\n\n","sourceOld":"  /**\n   * Create a new client object using multiple string values in a Collection\n   * instead of a standard zkHost connection string. Note that this method will\n   * not be used if there is only one String argument - that will use\n   * {@link #CloudSolrServer(String)} instead.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @throws IllegalArgumentException\n   *           if the chroot value does not start with a forward slash.\n   * @see #CloudSolrServer(String)\n   */\n  public CloudSolrServer(Collection<String> zkHosts, String chroot) {\n    \n    StringBuilder zkBuilder = new StringBuilder();\n    int lastIndexValue = zkHosts.size() - 1;\n    int i = 0;\n    for (String zkHost : zkHosts) {\n      zkBuilder.append(zkHost);\n      if (i < lastIndexValue) {\n        zkBuilder.append(\",\");\n      }\n      i++;\n    }\n    if (chroot != null) {\n      if (chroot.startsWith(\"/\")) {\n        zkBuilder.append(chroot);\n      } else {\n        throw new IllegalArgumentException(\n            \"The chroot must start with a forward slash.\");\n      }\n    }\n    \n    /* Log the constructed connection string and then initialize. */\n    log.info(\"Final constructed zkHost string: \" + zkBuilder.toString());\n    \n    this.zkHost = zkBuilder.toString();\n    this.myClient = HttpClientUtil.createClient(null);\n    this.lbServer = new LBHttpSolrServer(myClient);\n    this.lbServer.setRequestWriter(new BinaryRequestWriter());\n    this.lbServer.setParser(new BinaryResponseParser());\n    this.updatesToLeaders = true;\n    shutdownLBHttpSolrServer = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(Collection[String],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(Collection[String],String).mjava","sourceNew":"  public CloudSolrServer(Collection<String> zkHosts, String chroot) {\n    super(zkHosts, chroot);\n  }\n\n","sourceOld":"  /**\n   * Create a new client object using multiple string values in a Collection\n   * instead of a standard zkHost connection string. Note that this method will\n   * not be used if there is only one String argument - that will use\n   * {@link #CloudSolrServer(String)} instead.\n   * \n   * @param zkHosts\n   *          A Java Collection (List, Set, etc) of HOST:PORT strings, one for\n   *          each host in the zookeeper ensemble. Note that with certain\n   *          Collection types like HashSet, the order of hosts in the final\n   *          connect string may not be in the same order you added them.\n   * @param chroot\n   *          A chroot value for zookeeper, starting with a forward slash. If no\n   *          chroot is required, use null.\n   * @throws IllegalArgumentException\n   *           if the chroot value does not start with a forward slash.\n   * @see #CloudSolrServer(String)\n   */\n  public CloudSolrServer(Collection<String> zkHosts, String chroot) {\n    this(zkHosts, chroot, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0080a8fdc299a09124dea014ed206981c1b8c54","date":1420037360,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#CloudSolrServer(Collection[String],String).mjava","sourceNew":null,"sourceOld":"  public CloudSolrServer(Collection<String> zkHosts, String chroot) {\n    super(zkHosts, chroot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["55980207f1977bd1463465de1659b821347e2fa8","791652abeeebb8642f54a7b42ca914c55805479a"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","471d806b28fa8f148222eb0c300dcab1047a391d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["791652abeeebb8642f54a7b42ca914c55805479a"],"791652abeeebb8642f54a7b42ca914c55805479a":["471d806b28fa8f148222eb0c300dcab1047a391d"],"471d806b28fa8f148222eb0c300dcab1047a391d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0080a8fdc299a09124dea014ed206981c1b8c54"],"c0080a8fdc299a09124dea014ed206981c1b8c54":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":[],"55980207f1977bd1463465de1659b821347e2fa8":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55980207f1977bd1463465de1659b821347e2fa8","471d806b28fa8f148222eb0c300dcab1047a391d"],"bafca15d8e408346a67f4282ad1143b88023893b":["c0080a8fdc299a09124dea014ed206981c1b8c54"],"791652abeeebb8642f54a7b42ca914c55805479a":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","bafca15d8e408346a67f4282ad1143b88023893b"],"471d806b28fa8f148222eb0c300dcab1047a391d":["55980207f1977bd1463465de1659b821347e2fa8","791652abeeebb8642f54a7b42ca914c55805479a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c0080a8fdc299a09124dea014ed206981c1b8c54":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}