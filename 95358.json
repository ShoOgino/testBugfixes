{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","commits":[{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(List[Row]).mjava","sourceNew":"  public List<Violation> test(Policy.Session session) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCount = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCount.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            if (!sealedClause.replica.isPass(counts.getValue())) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(counts.getValue()),\n                  counts.getKey());\n              Suggestion.getTagType(tag.name).addViolatingReplicas(ctx.reset(counts.getKey(), counts.getValue(), violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          Suggestion.ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name), sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(List<Row> allRows) {\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, allRows);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              Violation violation = new Violation(this,\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey());\n              Suggestion.getTagType(tag.name).addViolatingReplicas(ctx.reset(counts.getKey(), counts.getValue(), violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!globalTag.isPass(r)) {\n          Suggestion.ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(this, null, null, r.node, r.getVal(globalTag.name), globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6bec22994bec86702ad05304ae983f7be5b5a7","date":1530715192,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","sourceNew":"  public List<Violation> test(Policy.Session session) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCounts = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCounts.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            ReplicaCount replicas = counts.getValue();\n            if (!sealedClause.replica.isPass(replicas)) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(replicas),\n                  counts.getKey());\n              tag.varType.addViolatingReplicas(ctx.reset(counts.getKey(), replicas, violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          Suggestion.ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name), sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(Policy.Session session) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCount = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCount.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            if (!sealedClause.replica.isPass(counts.getValue())) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(counts.getValue()),\n                  counts.getKey());\n              Suggestion.getTagType(tag.name).addViolatingReplicas(ctx.reset(counts.getKey(), counts.getValue(), violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          Suggestion.ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name), sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","pathOld":"/dev/null","sourceNew":"  public List<Violation> test(Policy.Session session) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCounts = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCounts.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            ReplicaCount replicas = counts.getValue();\n            if (!sealedClause.replica.isPass(replicas)) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(replicas),\n                  counts.getKey());\n              tag.varType.addViolatingReplicas(ctx.reset(counts.getKey(), replicas, violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          Suggestion.ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name), sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78231225260fb5b3bf9920f203d71477d5501c65","date":1531726165,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","sourceNew":"  public List<Violation> test(Policy.Session session) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCounts = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCounts.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if(tag.varType.isPerNodeValue) computedValueEvaluator.node = counts.getKey();\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            ReplicaCount replicas = counts.getValue();\n            if (!sealedClause.replica.isPass(replicas)) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.varType.isPerNodeValue ? computedValueEvaluator.node : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(replicas),\n                  tag.varType.isPerNodeValue? null:  counts.getKey());\n              tag.varType.addViolatingReplicas(ctx.reset(counts.getKey(), replicas, violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name), sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(Policy.Session session) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCounts = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCounts.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            ReplicaCount replicas = counts.getValue();\n            if (!sealedClause.replica.isPass(replicas)) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(replicas),\n                  counts.getKey());\n              tag.varType.addViolatingReplicas(ctx.reset(counts.getKey(), replicas, violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          Suggestion.ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name), sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10a24d2afdf00bbe1013706b80c989315772dc9","date":1531726431,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","sourceNew":"  public List<Violation> test(Policy.Session session) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCounts = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCounts.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            ReplicaCount replicas = counts.getValue();\n            if (!sealedClause.replica.isPass(replicas)) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(replicas),\n                  counts.getKey());\n              tag.varType.addViolatingReplicas(ctx.reset(counts.getKey(), replicas, violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          Suggestion.ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name), sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(Policy.Session session) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCounts = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCounts.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if(tag.varType.isPerNodeValue) computedValueEvaluator.node = counts.getKey();\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            ReplicaCount replicas = counts.getValue();\n            if (!sealedClause.replica.isPass(replicas)) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.varType.isPerNodeValue ? computedValueEvaluator.node : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(replicas),\n                  tag.varType.isPerNodeValue? null:  counts.getKey());\n              tag.varType.addViolatingReplicas(ctx.reset(counts.getKey(), replicas, violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name), sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f91616b62c917fffa5286c4ef2d21b10cc56f8e","date":1531726562,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","sourceNew":"  public List<Violation> test(Policy.Session session) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCounts = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCounts.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if(tag.varType.isPerNodeValue) computedValueEvaluator.node = counts.getKey();\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            ReplicaCount replicas = counts.getValue();\n            if (!sealedClause.replica.isPass(replicas)) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.varType.isPerNodeValue ? computedValueEvaluator.node : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(replicas),\n                  tag.varType.isPerNodeValue? null:  counts.getKey());\n              tag.varType.addViolatingReplicas(ctx.reset(counts.getKey(), replicas, violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name), sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(Policy.Session session) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCounts = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCounts.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            ReplicaCount replicas = counts.getValue();\n            if (!sealedClause.replica.isPass(replicas)) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(replicas),\n                  counts.getKey());\n              tag.varType.addViolatingReplicas(ctx.reset(counts.getKey(), replicas, violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          Suggestion.ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name), sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","pathOld":"/dev/null","sourceNew":"  public List<Violation> test(Policy.Session session) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCounts = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCounts.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if(tag.varType.isPerNodeValue) computedValueEvaluator.node = counts.getKey();\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            ReplicaCount replicas = counts.getValue();\n            if (!sealedClause.replica.isPass(replicas)) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.varType.isPerNodeValue ? computedValueEvaluator.node : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(replicas),\n                  tag.varType.isPerNodeValue? null:  counts.getKey());\n              tag.varType.addViolatingReplicas(ctx.reset(counts.getKey(), replicas, violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name), sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","date":1532604765,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","sourceNew":"  public List<Violation> test(Policy.Session session) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCounts = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCounts.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (tag.varType.meta.isNodeSpecificVal()) computedValueEvaluator.node = counts.getKey();\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            ReplicaCount replicas = counts.getValue();\n            if (!sealedClause.replica.isPass(replicas)) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.varType.meta.isNodeSpecificVal() ? computedValueEvaluator.node : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(replicas),\n                  tag.varType.meta.isNodeSpecificVal() ? null : counts.getKey());\n              tag.varType.addViolatingReplicas(ctx.reset(counts.getKey(), replicas, violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name), sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(Policy.Session session) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCounts = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCounts.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if(tag.varType.isPerNodeValue) computedValueEvaluator.node = counts.getKey();\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            ReplicaCount replicas = counts.getValue();\n            if (!sealedClause.replica.isPass(replicas)) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.varType.isPerNodeValue ? computedValueEvaluator.node : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(replicas),\n                  tag.varType.isPerNodeValue? null:  counts.getKey());\n              tag.varType.addViolatingReplicas(ctx.reset(counts.getKey(), replicas, violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name), sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","sourceNew":"  public List<Violation> test(Policy.Session session) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCounts = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCounts.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (tag.varType.meta.isNodeSpecificVal()) computedValueEvaluator.node = counts.getKey();\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            ReplicaCount replicas = counts.getValue();\n            if (!sealedClause.replica.isPass(replicas)) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.varType.meta.isNodeSpecificVal() ? computedValueEvaluator.node : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(replicas),\n                  tag.varType.meta.isNodeSpecificVal() ? null : counts.getKey());\n              tag.varType.addViolatingReplicas(ctx.reset(counts.getKey(), replicas, violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          sealedClause.getGlobalTag().varType.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name), sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(Policy.Session session) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCounts = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCounts.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (tag.varType.meta.isNodeSpecificVal()) computedValueEvaluator.node = counts.getKey();\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            ReplicaCount replicas = counts.getValue();\n            if (!sealedClause.replica.isPass(replicas)) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.varType.meta.isNodeSpecificVal() ? computedValueEvaluator.node : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(replicas),\n                  tag.varType.meta.isNodeSpecificVal() ? null : counts.getKey());\n              tag.varType.addViolatingReplicas(ctx.reset(counts.getKey(), replicas, violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name), sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","sourceNew":"  public List<Violation> test(Policy.Session session) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCounts = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCounts.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (tag.varType.meta.isNodeSpecificVal()) computedValueEvaluator.node = counts.getKey();\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            ReplicaCount replicas = counts.getValue();\n            if (!sealedClause.replica.isPass(replicas)) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.varType.meta.isNodeSpecificVal() ? computedValueEvaluator.node : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(replicas),\n                  tag.varType.meta.isNodeSpecificVal() ? null : counts.getKey());\n              tag.varType.addViolatingReplicas(ctx.reset(counts.getKey(), replicas, violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          sealedClause.getGlobalTag().varType.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name), sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(Policy.Session session) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCounts = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCounts.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (tag.varType.meta.isNodeSpecificVal()) computedValueEvaluator.node = counts.getKey();\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            ReplicaCount replicas = counts.getValue();\n            if (!sealedClause.replica.isPass(replicas)) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.varType.meta.isNodeSpecificVal() ? computedValueEvaluator.node : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(replicas),\n                  tag.varType.meta.isNodeSpecificVal() ? null : counts.getKey());\n              tag.varType.addViolatingReplicas(ctx.reset(counts.getKey(), replicas, violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          sealedClause.getGlobalTag().varType.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name), sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52316373036b9f161a08896e7c9ebf4389790a47","date":1533187246,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","sourceNew":"  public List<Violation> test(Policy.Session session) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCounts = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCounts.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (tag.varType.meta.isNodeSpecificVal()) computedValueEvaluator.node = counts.getKey();\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            ReplicaCount replicas = counts.getValue();\n            if (!sealedClause.replica.isPass(replicas)) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.varType.meta.isNodeSpecificVal() ? computedValueEvaluator.node : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(replicas),\n                  tag.varType.meta.isNodeSpecificVal() ? null : counts.getKey());\n              tag.varType.addViolatingReplicas(ctx.reset(counts.getKey(), replicas, violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        computedValueEvaluator.node = r.node;\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          sealedClause.getGlobalTag().varType.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name),\n                  sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(Policy.Session session) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCounts = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCounts.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (tag.varType.meta.isNodeSpecificVal()) computedValueEvaluator.node = counts.getKey();\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            ReplicaCount replicas = counts.getValue();\n            if (!sealedClause.replica.isPass(replicas)) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.varType.meta.isNodeSpecificVal() ? computedValueEvaluator.node : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(replicas),\n                  tag.varType.meta.isNodeSpecificVal() ? null : counts.getKey());\n              tag.varType.addViolatingReplicas(ctx.reset(counts.getKey(), replicas, violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          sealedClause.getGlobalTag().varType.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name), sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16a22f8085bb46850c91784e94f7714345011404","date":1533741843,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session,double[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","sourceNew":"  public List<Violation> test(Policy.Session session, double[] deviations) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCounts = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCounts.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (tag.varType.meta.isNodeSpecificVal()) computedValueEvaluator.node = counts.getKey();\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            ReplicaCount replicas = counts.getValue();\n            if (!sealedClause.replica.isPass(replicas)) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.varType.meta.isNodeSpecificVal() ? computedValueEvaluator.node : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(replicas),\n                  tag.varType.meta.isNodeSpecificVal() ? null : counts.getKey());\n              tag.varType.addViolatingReplicas(ctx.reset(counts.getKey(), replicas, violation));\n            } else {\n              if (deviations != null && sealedClause.replica.op == RANGE_EQUAL) {\n                Number actualCount = replicas.getVal(type);\n                Double realDelta = ((RangeVal) sealedClause.replica.val).realDelta(actualCount.doubleValue());\n                realDelta = this.isReplicaZero() ? -1 * realDelta : realDelta;\n                deviations[0] += Math.abs(realDelta);\n              }\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        computedValueEvaluator.node = r.node;\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          sealedClause.getGlobalTag().varType.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name),\n                  sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(Policy.Session session) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCounts = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCounts.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (tag.varType.meta.isNodeSpecificVal()) computedValueEvaluator.node = counts.getKey();\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            ReplicaCount replicas = counts.getValue();\n            if (!sealedClause.replica.isPass(replicas)) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.varType.meta.isNodeSpecificVal() ? computedValueEvaluator.node : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(replicas),\n                  tag.varType.meta.isNodeSpecificVal() ? null : counts.getKey());\n              tag.varType.addViolatingReplicas(ctx.reset(counts.getKey(), replicas, violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        computedValueEvaluator.node = r.node;\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          sealedClause.getGlobalTag().varType.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name),\n                  sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"78231225260fb5b3bf9920f203d71477d5501c65":["7d6bec22994bec86702ad05304ae983f7be5b5a7"],"52316373036b9f161a08896e7c9ebf4389790a47":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["9837f40c922407d857991971de6def18eda0857b"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"16a22f8085bb46850c91784e94f7714345011404":["52316373036b9f161a08896e7c9ebf4389790a47"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["78231225260fb5b3bf9920f203d71477d5501c65"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["27639bb5e041490ce599065875dd2f6d8beef62a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9837f40c922407d857991971de6def18eda0857b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"27639bb5e041490ce599065875dd2f6d8beef62a":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["16a22f8085bb46850c91784e94f7714345011404"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d6bec22994bec86702ad05304ae983f7be5b5a7"]},"commit2Childs":{"78231225260fb5b3bf9920f203d71477d5501c65":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"52316373036b9f161a08896e7c9ebf4389790a47":["16a22f8085bb46850c91784e94f7714345011404"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["78231225260fb5b3bf9920f203d71477d5501c65","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["27639bb5e041490ce599065875dd2f6d8beef62a"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"16a22f8085bb46850c91784e94f7714345011404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["52316373036b9f161a08896e7c9ebf4389790a47"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"9837f40c922407d857991971de6def18eda0857b":["7d6bec22994bec86702ad05304ae983f7be5b5a7"],"27639bb5e041490ce599065875dd2f6d8beef62a":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}