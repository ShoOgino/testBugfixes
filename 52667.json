{"path":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testReadSkip().mjava","commits":[{"id":"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa","date":1349450075,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testReadSkip().mjava","pathOld":"/dev/null","sourceNew":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    iwConf.setCodec(CompressingCodec.randomInstance(random()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n    \n    final String string = _TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(\"UTF-8\");\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LongField(\"long\", l, Store.YES),\n        new IntField(\"int\", i, Store.YES),\n        new FloatField(\"float\", f, Store.YES),\n        new DoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.close();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb04ae9ea4b411d2adefa88bcd40141cfe9a711d","date":1351706460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testReadSkip().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testReadSkip().mjava","sourceNew":"  public void testReadSkip() throws IOException {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = _TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(\"UTF-8\");\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LongField(\"long\", l, Store.YES),\n        new IntField(\"int\", i, Store.YES),\n        new FloatField(\"float\", f, Store.YES),\n        new DoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testReadSkip() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    iwConf.setCodec(CompressingCodec.randomInstance(random()));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n    \n    final String string = _TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(\"UTF-8\");\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LongField(\"long\", l, Store.YES),\n        new IntField(\"int\", i, Store.YES),\n        new FloatField(\"float\", f, Store.YES),\n        new DoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.close();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab","date":1354403647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testReadSkip().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testReadSkip().mjava","sourceNew":"  public void testReadSkip() throws IOException {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = _TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(\"UTF-8\");\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LongField(\"long\", l, Store.YES),\n        new IntField(\"int\", i, Store.YES),\n        new FloatField(\"float\", f, Store.YES),\n        new DoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testReadSkip() throws IOException {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = _TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(\"UTF-8\");\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LongField(\"long\", l, Store.YES),\n        new IntField(\"int\", i, Store.YES),\n        new FloatField(\"float\", f, Store.YES),\n        new DoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testReadSkip().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testReadSkip().mjava","sourceNew":"  public void testReadSkip() throws IOException {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = _TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(\"UTF-8\");\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LongField(\"long\", l, Store.YES),\n        new IntField(\"int\", i, Store.YES),\n        new FloatField(\"float\", f, Store.YES),\n        new DoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testReadSkip() throws IOException {\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.freeze();\n\n    final String string = _TestUtil.randomSimpleString(random(), 50);\n    final byte[] bytes = string.getBytes(\"UTF-8\");\n    final long l = random().nextBoolean() ? random().nextInt(42) : random().nextLong();\n    final int i = random().nextBoolean() ? random().nextInt(42) : random().nextInt();\n    final float f = random().nextFloat();\n    final double d = random().nextDouble();\n\n    List<Field> fields = Arrays.asList(\n        new Field(\"bytes\", bytes, ft),\n        new Field(\"string\", string, ft),\n        new LongField(\"long\", l, Store.YES),\n        new IntField(\"int\", i, Store.YES),\n        new FloatField(\"float\", f, Store.YES),\n        new DoubleField(\"double\", d, Store.YES)\n    );\n\n    for (int k = 0; k < 100; ++k) {\n      Document doc = new Document();\n      for (Field fld : fields) {\n        doc.add(fld);\n      }\n      iw.w.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final int docID = random().nextInt(100);\n    for (Field fld : fields) {\n      String fldName = fld.name();\n      final StoredDocument sDoc = reader.document(docID, Collections.singleton(fldName));\n      final StorableField sField = sDoc.getField(fldName);\n      if (Field.class.equals(fld.getClass())) {\n        assertEquals(fld.binaryValue(), sField.binaryValue());\n        assertEquals(fld.stringValue(), sField.stringValue());\n      } else {\n        assertEquals(fld.numericValue(), sField.numericValue());\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["fb04ae9ea4b411d2adefa88bcd40141cfe9a711d","1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"fb04ae9ea4b411d2adefa88bcd40141cfe9a711d":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["fb04ae9ea4b411d2adefa88bcd40141cfe9a711d"]},"commit2Childs":{"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["fb04ae9ea4b411d2adefa88bcd40141cfe9a711d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"fb04ae9ea4b411d2adefa88bcd40141cfe9a711d":["407687e67faf6e1f02a211ca078d8e3eed631027","1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}