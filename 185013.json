{"path":"src/java/org/apache/solr/handler/component/DebugComponent#process(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"71bbe672a26ef56876a0ce949b0a4de41f602057","date":1194896341,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/DebugComponent#process(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void process(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    ResponseBuilder builder = SearchHandler.getResponseBuilder( req );\n    if( builder.isDebug() ) {\n      builder.setDebugInfo( SolrPluginUtils.doStandardDebug( req, \n          builder.getQueryString(), builder.getQuery(), builder.getResults().docList) );\n\n      if (builder.getQparser() != null) {\n        builder.getQparser().addDebugInfo(builder.getDebugInfo());\n      }\n\n      if (null != builder.getDebugInfo() ) {\n        if (null != builder.getFilters() ) {\n          builder.getDebugInfo().add(\"filter_queries\",req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<String>(builder.getFilters().size());\n          for (Query fq : builder.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          builder.getDebugInfo().add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rsp.add(\"debug\", builder.getDebugInfo() );\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68f896937cecbd003415d5fd0616436eaa1fb336","date":1197098869,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/DebugComponent#process(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/component/DebugComponent#process(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    ResponseBuilder builder = SearchHandler.getResponseBuilder( req );\n    if( builder.isDebug() ) {\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( req, \n          builder.getQueryString(), builder.getQuery(), builder.getResults().docList);\n      \n      NamedList info = builder.getDebugInfo();\n      if( info == null ) {\n        builder.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n      \n      if (builder.getQparser() != null) {\n        builder.getQparser().addDebugInfo(builder.getDebugInfo());\n      }\n\n      if (null != builder.getDebugInfo() ) {\n        if (null != builder.getFilters() ) {\n          info.add(\"filter_queries\",req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<String>(builder.getFilters().size());\n          for (Query fq : builder.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rsp.add(\"debug\", builder.getDebugInfo() );\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    ResponseBuilder builder = SearchHandler.getResponseBuilder( req );\n    if( builder.isDebug() ) {\n      builder.setDebugInfo( SolrPluginUtils.doStandardDebug( req, \n          builder.getQueryString(), builder.getQuery(), builder.getResults().docList) );\n\n      if (builder.getQparser() != null) {\n        builder.getQparser().addDebugInfo(builder.getDebugInfo());\n      }\n\n      if (null != builder.getDebugInfo() ) {\n        if (null != builder.getFilters() ) {\n          builder.getDebugInfo().add(\"filter_queries\",req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<String>(builder.getFilters().size());\n          for (Query fq : builder.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          builder.getDebugInfo().add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rsp.add(\"debug\", builder.getDebugInfo() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/handler/component/DebugComponent#process(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    ResponseBuilder builder = SearchHandler.getResponseBuilder( req );\n    if( builder.isDebug() ) {\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( req, \n          builder.getQueryString(), builder.getQuery(), builder.getResults().docList);\n      \n      NamedList info = builder.getDebugInfo();\n      if( info == null ) {\n        builder.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n      \n      if (builder.getQparser() != null) {\n        builder.getQparser().addDebugInfo(builder.getDebugInfo());\n      }\n\n      if (null != builder.getDebugInfo() ) {\n        if (null != builder.getFilters() ) {\n          info.add(\"filter_queries\",req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<String>(builder.getFilters().size());\n          for (Query fq : builder.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rsp.add(\"debug\", builder.getDebugInfo() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"71bbe672a26ef56876a0ce949b0a4de41f602057":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"68f896937cecbd003415d5fd0616436eaa1fb336":["71bbe672a26ef56876a0ce949b0a4de41f602057"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["68f896937cecbd003415d5fd0616436eaa1fb336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"71bbe672a26ef56876a0ce949b0a4de41f602057":["68f896937cecbd003415d5fd0616436eaa1fb336"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["71bbe672a26ef56876a0ce949b0a4de41f602057"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68f896937cecbd003415d5fd0616436eaa1fb336":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}