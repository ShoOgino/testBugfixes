{"path":"src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","commits":[{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","pathOld":"/dev/null","sourceNew":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files). */\n  private void flushDocStores() throws IOException {\n\n    List files = docWriter.files();\n\n    if (files.size() > 0) {\n      String docStoreSegment;\n\n      boolean success = false;\n      try {\n        docStoreSegment = docWriter.closeDocStore();\n        success = true;\n      } finally {\n        if (!success)\n          docWriter.abort();\n      }\n\n      if (useCompoundFile && docStoreSegment != null) {\n        // Now build compound doc store file\n        checkpoint();\n\n        success = false;\n\n        final int numSegments = segmentInfos.size();\n\n        try {\n          CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n          final int size = files.size();\n          for(int i=0;i<size;i++)\n            cfsWriter.addFile((String) files.get(i));\n      \n          // Perform the merge\n          cfsWriter.close();\n\n          for(int i=0;i<numSegments;i++) {\n            SegmentInfo si = segmentInfos.info(i);\n            if (si.getDocStoreOffset() != -1 &&\n                si.getDocStoreSegment().equals(docStoreSegment))\n              si.setDocStoreIsCompoundFile(true);\n          }\n          checkpoint();\n          success = true;\n        } finally {\n          if (!success) {\n            // Rollback to no compound file\n            for(int i=0;i<numSegments;i++) {\n              SegmentInfo si = segmentInfos.info(i);\n              if (si.getDocStoreOffset() != -1 &&\n                  si.getDocStoreSegment().equals(docStoreSegment))\n                si.setDocStoreIsCompoundFile(false);\n            }\n            deleter.refresh();\n          }\n        }\n\n        deleter.checkpoint(segmentInfos, false);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","sourceNew":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files).\n   *  Return value specifices whether new doc store files are compound or not.\n   */\n  private synchronized boolean flushDocStores() throws IOException {\n\n    List files = docWriter.files();\n\n    boolean useCompoundDocStore = false;\n\n    if (files.size() > 0) {\n      String docStoreSegment;\n\n      boolean success = false;\n      try {\n        docStoreSegment = docWriter.closeDocStore();\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream != null)\n            message(\"hit exception closing doc store segment\");\n          docWriter.abort();\n        }\n      }\n\n      useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);\n      \n      if (useCompoundDocStore && docStoreSegment != null) {\n        // Now build compound doc store file\n\n        success = false;\n\n        final int numSegments = segmentInfos.size();\n        final String compoundFileName = docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n\n        try {\n          CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n          final int size = files.size();\n          for(int i=0;i<size;i++)\n            cfsWriter.addFile((String) files.get(i));\n      \n          // Perform the merge\n          cfsWriter.close();\n\n          for(int i=0;i<numSegments;i++) {\n            SegmentInfo si = segmentInfos.info(i);\n            if (si.getDocStoreOffset() != -1 &&\n                si.getDocStoreSegment().equals(docStoreSegment))\n              si.setDocStoreIsCompoundFile(true);\n          }\n          checkpoint();\n          success = true;\n        } finally {\n          if (!success) {\n\n            if (infoStream != null)\n              message(\"hit exception building compound file doc store for segment \" + docStoreSegment);\n            \n            // Rollback to no compound file\n            for(int i=0;i<numSegments;i++) {\n              SegmentInfo si = segmentInfos.info(i);\n              if (si.getDocStoreOffset() != -1 &&\n                  si.getDocStoreSegment().equals(docStoreSegment))\n                si.setDocStoreIsCompoundFile(false);\n            }\n            deleter.deleteFile(compoundFileName);\n            deletePartialSegmentsFile();\n          }\n        }\n\n        deleter.checkpoint(segmentInfos, false);\n      }\n    }\n\n    return useCompoundDocStore;\n  }\n\n","sourceOld":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files). */\n  private void flushDocStores() throws IOException {\n\n    List files = docWriter.files();\n\n    if (files.size() > 0) {\n      String docStoreSegment;\n\n      boolean success = false;\n      try {\n        docStoreSegment = docWriter.closeDocStore();\n        success = true;\n      } finally {\n        if (!success)\n          docWriter.abort();\n      }\n\n      if (useCompoundFile && docStoreSegment != null) {\n        // Now build compound doc store file\n        checkpoint();\n\n        success = false;\n\n        final int numSegments = segmentInfos.size();\n\n        try {\n          CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n          final int size = files.size();\n          for(int i=0;i<size;i++)\n            cfsWriter.addFile((String) files.get(i));\n      \n          // Perform the merge\n          cfsWriter.close();\n\n          for(int i=0;i<numSegments;i++) {\n            SegmentInfo si = segmentInfos.info(i);\n            if (si.getDocStoreOffset() != -1 &&\n                si.getDocStoreSegment().equals(docStoreSegment))\n              si.setDocStoreIsCompoundFile(true);\n          }\n          checkpoint();\n          success = true;\n        } finally {\n          if (!success) {\n            // Rollback to no compound file\n            for(int i=0;i<numSegments;i++) {\n              SegmentInfo si = segmentInfos.info(i);\n              if (si.getDocStoreOffset() != -1 &&\n                  si.getDocStoreSegment().equals(docStoreSegment))\n                si.setDocStoreIsCompoundFile(false);\n            }\n            deleter.refresh();\n          }\n        }\n\n        deleter.checkpoint(segmentInfos, false);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"83bbb041887bbef07b8a98d08a0e1713ce137039","date":1200330381,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","sourceNew":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files).\n   *  Return value specifices whether new doc store files are compound or not.\n   */\n  private synchronized boolean flushDocStores() throws IOException {\n\n    List files = docWriter.files();\n\n    boolean useCompoundDocStore = false;\n\n    if (files.size() > 0) {\n      String docStoreSegment;\n\n      boolean success = false;\n      try {\n        docStoreSegment = docWriter.closeDocStore();\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream != null)\n            message(\"hit exception closing doc store segment\");\n          docWriter.abort(null);\n        }\n      }\n\n      useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);\n      \n      if (useCompoundDocStore && docStoreSegment != null) {\n        // Now build compound doc store file\n\n        success = false;\n\n        final int numSegments = segmentInfos.size();\n        final String compoundFileName = docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n\n        try {\n          CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n          final int size = files.size();\n          for(int i=0;i<size;i++)\n            cfsWriter.addFile((String) files.get(i));\n      \n          // Perform the merge\n          cfsWriter.close();\n\n          for(int i=0;i<numSegments;i++) {\n            SegmentInfo si = segmentInfos.info(i);\n            if (si.getDocStoreOffset() != -1 &&\n                si.getDocStoreSegment().equals(docStoreSegment))\n              si.setDocStoreIsCompoundFile(true);\n          }\n          checkpoint();\n          success = true;\n        } finally {\n          if (!success) {\n\n            if (infoStream != null)\n              message(\"hit exception building compound file doc store for segment \" + docStoreSegment);\n            \n            // Rollback to no compound file\n            for(int i=0;i<numSegments;i++) {\n              SegmentInfo si = segmentInfos.info(i);\n              if (si.getDocStoreOffset() != -1 &&\n                  si.getDocStoreSegment().equals(docStoreSegment))\n                si.setDocStoreIsCompoundFile(false);\n            }\n            deleter.deleteFile(compoundFileName);\n            deletePartialSegmentsFile();\n          }\n        }\n\n        deleter.checkpoint(segmentInfos, false);\n      }\n    }\n\n    return useCompoundDocStore;\n  }\n\n","sourceOld":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files).\n   *  Return value specifices whether new doc store files are compound or not.\n   */\n  private synchronized boolean flushDocStores() throws IOException {\n\n    List files = docWriter.files();\n\n    boolean useCompoundDocStore = false;\n\n    if (files.size() > 0) {\n      String docStoreSegment;\n\n      boolean success = false;\n      try {\n        docStoreSegment = docWriter.closeDocStore();\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream != null)\n            message(\"hit exception closing doc store segment\");\n          docWriter.abort();\n        }\n      }\n\n      useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);\n      \n      if (useCompoundDocStore && docStoreSegment != null) {\n        // Now build compound doc store file\n\n        success = false;\n\n        final int numSegments = segmentInfos.size();\n        final String compoundFileName = docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n\n        try {\n          CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n          final int size = files.size();\n          for(int i=0;i<size;i++)\n            cfsWriter.addFile((String) files.get(i));\n      \n          // Perform the merge\n          cfsWriter.close();\n\n          for(int i=0;i<numSegments;i++) {\n            SegmentInfo si = segmentInfos.info(i);\n            if (si.getDocStoreOffset() != -1 &&\n                si.getDocStoreSegment().equals(docStoreSegment))\n              si.setDocStoreIsCompoundFile(true);\n          }\n          checkpoint();\n          success = true;\n        } finally {\n          if (!success) {\n\n            if (infoStream != null)\n              message(\"hit exception building compound file doc store for segment \" + docStoreSegment);\n            \n            // Rollback to no compound file\n            for(int i=0;i<numSegments;i++) {\n              SegmentInfo si = segmentInfos.info(i);\n              if (si.getDocStoreOffset() != -1 &&\n                  si.getDocStoreSegment().equals(docStoreSegment))\n                si.setDocStoreIsCompoundFile(false);\n            }\n            deleter.deleteFile(compoundFileName);\n            deletePartialSegmentsFile();\n          }\n        }\n\n        deleter.checkpoint(segmentInfos, false);\n      }\n    }\n\n    return useCompoundDocStore;\n  }\n\n","bugFix":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","sourceNew":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files).\n   *  Return value specifices whether new doc store files are compound or not.\n   */\n  private synchronized boolean flushDocStores() throws IOException {\n\n    List files = docWriter.files();\n\n    boolean useCompoundDocStore = false;\n\n    if (files.size() > 0) {\n      String docStoreSegment;\n\n      boolean success = false;\n      try {\n        docStoreSegment = docWriter.closeDocStore();\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream != null)\n            message(\"hit exception closing doc store segment\");\n          docWriter.abort(null);\n        }\n      }\n\n      useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);\n      \n      if (useCompoundDocStore && docStoreSegment != null) {\n        // Now build compound doc store file\n\n        success = false;\n\n        final int numSegments = segmentInfos.size();\n        final String compoundFileName = docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n\n        try {\n          CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n          final int size = files.size();\n          for(int i=0;i<size;i++)\n            cfsWriter.addFile((String) files.get(i));\n      \n          // Perform the merge\n          cfsWriter.close();\n          success = true;\n\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception building compound file doc store for segment \" + docStoreSegment);\n            deleter.deleteFile(compoundFileName);\n          }\n        }\n\n        for(int i=0;i<numSegments;i++) {\n          SegmentInfo si = segmentInfos.info(i);\n          if (si.getDocStoreOffset() != -1 &&\n              si.getDocStoreSegment().equals(docStoreSegment))\n            si.setDocStoreIsCompoundFile(true);\n        }\n\n        checkpoint();\n      }\n    }\n\n    return useCompoundDocStore;\n  }\n\n","sourceOld":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files).\n   *  Return value specifices whether new doc store files are compound or not.\n   */\n  private synchronized boolean flushDocStores() throws IOException {\n\n    List files = docWriter.files();\n\n    boolean useCompoundDocStore = false;\n\n    if (files.size() > 0) {\n      String docStoreSegment;\n\n      boolean success = false;\n      try {\n        docStoreSegment = docWriter.closeDocStore();\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream != null)\n            message(\"hit exception closing doc store segment\");\n          docWriter.abort(null);\n        }\n      }\n\n      useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);\n      \n      if (useCompoundDocStore && docStoreSegment != null) {\n        // Now build compound doc store file\n\n        success = false;\n\n        final int numSegments = segmentInfos.size();\n        final String compoundFileName = docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n\n        try {\n          CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n          final int size = files.size();\n          for(int i=0;i<size;i++)\n            cfsWriter.addFile((String) files.get(i));\n      \n          // Perform the merge\n          cfsWriter.close();\n\n          for(int i=0;i<numSegments;i++) {\n            SegmentInfo si = segmentInfos.info(i);\n            if (si.getDocStoreOffset() != -1 &&\n                si.getDocStoreSegment().equals(docStoreSegment))\n              si.setDocStoreIsCompoundFile(true);\n          }\n          checkpoint();\n          success = true;\n        } finally {\n          if (!success) {\n\n            if (infoStream != null)\n              message(\"hit exception building compound file doc store for segment \" + docStoreSegment);\n            \n            // Rollback to no compound file\n            for(int i=0;i<numSegments;i++) {\n              SegmentInfo si = segmentInfos.info(i);\n              if (si.getDocStoreOffset() != -1 &&\n                  si.getDocStoreSegment().equals(docStoreSegment))\n                si.setDocStoreIsCompoundFile(false);\n            }\n            deleter.deleteFile(compoundFileName);\n            deletePartialSegmentsFile();\n          }\n        }\n\n        deleter.checkpoint(segmentInfos, false);\n      }\n    }\n\n    return useCompoundDocStore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","sourceNew":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files).\n   *  Return value specifices whether new doc store files are compound or not.\n   */\n  private synchronized boolean flushDocStores() throws IOException {\n\n    boolean useCompoundDocStore = false;\n\n    String docStoreSegment;\n\n    boolean success = false;\n    try {\n      docStoreSegment = docWriter.closeDocStore();\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null)\n          message(\"hit exception closing doc store segment\");\n      }\n    }\n\n    useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);\n      \n    if (useCompoundDocStore && docStoreSegment != null && docWriter.closedFiles().size() != 0) {\n      // Now build compound doc store file\n\n      success = false;\n\n      final int numSegments = segmentInfos.size();\n      final String compoundFileName = docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n\n      try {\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        final Iterator it = docWriter.closedFiles().iterator();\n        while(it.hasNext())\n          cfsWriter.addFile((String) it.next());\n      \n        // Perform the merge\n        cfsWriter.close();\n        success = true;\n\n      } finally {\n        if (!success) {\n          if (infoStream != null)\n            message(\"hit exception building compound file doc store for segment \" + docStoreSegment);\n          deleter.deleteFile(compoundFileName);\n        }\n      }\n\n      for(int i=0;i<numSegments;i++) {\n        SegmentInfo si = segmentInfos.info(i);\n        if (si.getDocStoreOffset() != -1 &&\n            si.getDocStoreSegment().equals(docStoreSegment))\n          si.setDocStoreIsCompoundFile(true);\n      }\n\n      checkpoint();\n\n      // In case the files we just merged into a CFS were\n      // not previously checkpointed:\n      deleter.deleteNewFiles(docWriter.closedFiles());\n    }\n\n    return useCompoundDocStore;\n  }\n\n","sourceOld":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files).\n   *  Return value specifices whether new doc store files are compound or not.\n   */\n  private synchronized boolean flushDocStores() throws IOException {\n\n    List files = docWriter.files();\n\n    boolean useCompoundDocStore = false;\n\n    if (files.size() > 0) {\n      String docStoreSegment;\n\n      boolean success = false;\n      try {\n        docStoreSegment = docWriter.closeDocStore();\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream != null)\n            message(\"hit exception closing doc store segment\");\n          docWriter.abort(null);\n        }\n      }\n\n      useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);\n      \n      if (useCompoundDocStore && docStoreSegment != null) {\n        // Now build compound doc store file\n\n        success = false;\n\n        final int numSegments = segmentInfos.size();\n        final String compoundFileName = docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n\n        try {\n          CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n          final int size = files.size();\n          for(int i=0;i<size;i++)\n            cfsWriter.addFile((String) files.get(i));\n      \n          // Perform the merge\n          cfsWriter.close();\n          success = true;\n\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception building compound file doc store for segment \" + docStoreSegment);\n            deleter.deleteFile(compoundFileName);\n          }\n        }\n\n        for(int i=0;i<numSegments;i++) {\n          SegmentInfo si = segmentInfos.info(i);\n          if (si.getDocStoreOffset() != -1 &&\n              si.getDocStoreSegment().equals(docStoreSegment))\n            si.setDocStoreIsCompoundFile(true);\n        }\n\n        checkpoint();\n      }\n    }\n\n    return useCompoundDocStore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2993c85d947e3191bba14229ea72fd5675d048e2","date":1228593940,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","sourceNew":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files).\n   *  Return value specifices whether new doc store files are compound or not.\n   */\n  private synchronized boolean flushDocStores() throws IOException {\n\n    boolean useCompoundDocStore = false;\n\n    String docStoreSegment;\n\n    boolean success = false;\n    try {\n      docStoreSegment = docWriter.closeDocStore();\n      success = true;\n    } finally {\n      if (!success && infoStream != null) {\n        message(\"hit exception closing doc store segment\");\n      }\n    }\n\n    useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);\n      \n    if (useCompoundDocStore && docStoreSegment != null && docWriter.closedFiles().size() != 0) {\n      // Now build compound doc store file\n\n      success = false;\n\n      final int numSegments = segmentInfos.size();\n      final String compoundFileName = docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n\n      try {\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        final Iterator it = docWriter.closedFiles().iterator();\n        while(it.hasNext())\n          cfsWriter.addFile((String) it.next());\n      \n        // Perform the merge\n        cfsWriter.close();\n        success = true;\n\n      } finally {\n        if (!success) {\n          if (infoStream != null)\n            message(\"hit exception building compound file doc store for segment \" + docStoreSegment);\n          deleter.deleteFile(compoundFileName);\n        }\n      }\n\n      for(int i=0;i<numSegments;i++) {\n        SegmentInfo si = segmentInfos.info(i);\n        if (si.getDocStoreOffset() != -1 &&\n            si.getDocStoreSegment().equals(docStoreSegment))\n          si.setDocStoreIsCompoundFile(true);\n      }\n\n      checkpoint();\n\n      // In case the files we just merged into a CFS were\n      // not previously checkpointed:\n      deleter.deleteNewFiles(docWriter.closedFiles());\n    }\n\n    return useCompoundDocStore;\n  }\n\n","sourceOld":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files).\n   *  Return value specifices whether new doc store files are compound or not.\n   */\n  private synchronized boolean flushDocStores() throws IOException {\n\n    boolean useCompoundDocStore = false;\n\n    String docStoreSegment;\n\n    boolean success = false;\n    try {\n      docStoreSegment = docWriter.closeDocStore();\n      success = true;\n    } finally {\n      if (!success) {\n        if (infoStream != null)\n          message(\"hit exception closing doc store segment\");\n      }\n    }\n\n    useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);\n      \n    if (useCompoundDocStore && docStoreSegment != null && docWriter.closedFiles().size() != 0) {\n      // Now build compound doc store file\n\n      success = false;\n\n      final int numSegments = segmentInfos.size();\n      final String compoundFileName = docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n\n      try {\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        final Iterator it = docWriter.closedFiles().iterator();\n        while(it.hasNext())\n          cfsWriter.addFile((String) it.next());\n      \n        // Perform the merge\n        cfsWriter.close();\n        success = true;\n\n      } finally {\n        if (!success) {\n          if (infoStream != null)\n            message(\"hit exception building compound file doc store for segment \" + docStoreSegment);\n          deleter.deleteFile(compoundFileName);\n        }\n      }\n\n      for(int i=0;i<numSegments;i++) {\n        SegmentInfo si = segmentInfos.info(i);\n        if (si.getDocStoreOffset() != -1 &&\n            si.getDocStoreSegment().equals(docStoreSegment))\n          si.setDocStoreIsCompoundFile(true);\n      }\n\n      checkpoint();\n\n      // In case the files we just merged into a CFS were\n      // not previously checkpointed:\n      deleter.deleteNewFiles(docWriter.closedFiles());\n    }\n\n    return useCompoundDocStore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","sourceNew":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files).\n   *  Return value specifices whether new doc store files are compound or not.\n   */\n  private synchronized boolean flushDocStores() throws IOException {\n\n    boolean useCompoundDocStore = false;\n\n    String docStoreSegment;\n\n    boolean success = false;\n    try {\n      docStoreSegment = docWriter.closeDocStore();\n      success = true;\n    } finally {\n      if (!success && infoStream != null) {\n        message(\"hit exception closing doc store segment\");\n      }\n    }\n\n    useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);\n      \n    if (useCompoundDocStore && docStoreSegment != null && docWriter.closedFiles().size() != 0) {\n      // Now build compound doc store file\n\n      if (infoStream != null) {\n        message(\"create compound file \" + docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n      }\n\n      success = false;\n\n      final int numSegments = segmentInfos.size();\n      final String compoundFileName = docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n\n      try {\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        final Iterator it = docWriter.closedFiles().iterator();\n        while(it.hasNext())\n          cfsWriter.addFile((String) it.next());\n      \n        // Perform the merge\n        cfsWriter.close();\n        success = true;\n\n      } finally {\n        if (!success) {\n          if (infoStream != null)\n            message(\"hit exception building compound file doc store for segment \" + docStoreSegment);\n          deleter.deleteFile(compoundFileName);\n        }\n      }\n\n      for(int i=0;i<numSegments;i++) {\n        SegmentInfo si = segmentInfos.info(i);\n        if (si.getDocStoreOffset() != -1 &&\n            si.getDocStoreSegment().equals(docStoreSegment))\n          si.setDocStoreIsCompoundFile(true);\n      }\n\n      checkpoint();\n\n      // In case the files we just merged into a CFS were\n      // not previously checkpointed:\n      deleter.deleteNewFiles(docWriter.closedFiles());\n    }\n\n    return useCompoundDocStore;\n  }\n\n","sourceOld":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files).\n   *  Return value specifices whether new doc store files are compound or not.\n   */\n  private synchronized boolean flushDocStores() throws IOException {\n\n    boolean useCompoundDocStore = false;\n\n    String docStoreSegment;\n\n    boolean success = false;\n    try {\n      docStoreSegment = docWriter.closeDocStore();\n      success = true;\n    } finally {\n      if (!success && infoStream != null) {\n        message(\"hit exception closing doc store segment\");\n      }\n    }\n\n    useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);\n      \n    if (useCompoundDocStore && docStoreSegment != null && docWriter.closedFiles().size() != 0) {\n      // Now build compound doc store file\n\n      success = false;\n\n      final int numSegments = segmentInfos.size();\n      final String compoundFileName = docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n\n      try {\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        final Iterator it = docWriter.closedFiles().iterator();\n        while(it.hasNext())\n          cfsWriter.addFile((String) it.next());\n      \n        // Perform the merge\n        cfsWriter.close();\n        success = true;\n\n      } finally {\n        if (!success) {\n          if (infoStream != null)\n            message(\"hit exception building compound file doc store for segment \" + docStoreSegment);\n          deleter.deleteFile(compoundFileName);\n        }\n      }\n\n      for(int i=0;i<numSegments;i++) {\n        SegmentInfo si = segmentInfos.info(i);\n        if (si.getDocStoreOffset() != -1 &&\n            si.getDocStoreSegment().equals(docStoreSegment))\n          si.setDocStoreIsCompoundFile(true);\n      }\n\n      checkpoint();\n\n      // In case the files we just merged into a CFS were\n      // not previously checkpointed:\n      deleter.deleteNewFiles(docWriter.closedFiles());\n    }\n\n    return useCompoundDocStore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","sourceNew":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files).\n   *  Return value specifices whether new doc store files are compound or not.\n   */\n  private synchronized boolean flushDocStores() throws IOException {\n\n    boolean useCompoundDocStore = false;\n\n    String docStoreSegment;\n\n    boolean success = false;\n    try {\n      docStoreSegment = docWriter.closeDocStore();\n      success = true;\n    } finally {\n      if (!success && infoStream != null) {\n        message(\"hit exception closing doc store segment\");\n      }\n    }\n\n    useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);\n      \n    if (useCompoundDocStore && docStoreSegment != null && docWriter.closedFiles().size() != 0) {\n      // Now build compound doc store file\n\n      if (infoStream != null) {\n        message(\"create compound file \" + docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n      }\n\n      success = false;\n\n      final int numSegments = segmentInfos.size();\n      final String compoundFileName = docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n\n      try {\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        final Iterator it = docWriter.closedFiles().iterator();\n        while(it.hasNext())\n          cfsWriter.addFile((String) it.next());\n      \n        // Perform the merge\n        cfsWriter.close();\n        success = true;\n\n      } finally {\n        if (!success) {\n          if (infoStream != null)\n            message(\"hit exception building compound file doc store for segment \" + docStoreSegment);\n          deleter.deleteFile(compoundFileName);\n          docWriter.abort();\n        }\n      }\n\n      for(int i=0;i<numSegments;i++) {\n        SegmentInfo si = segmentInfos.info(i);\n        if (si.getDocStoreOffset() != -1 &&\n            si.getDocStoreSegment().equals(docStoreSegment))\n          si.setDocStoreIsCompoundFile(true);\n      }\n\n      checkpoint();\n\n      // In case the files we just merged into a CFS were\n      // not previously checkpointed:\n      deleter.deleteNewFiles(docWriter.closedFiles());\n    }\n\n    return useCompoundDocStore;\n  }\n\n","sourceOld":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files).\n   *  Return value specifices whether new doc store files are compound or not.\n   */\n  private synchronized boolean flushDocStores() throws IOException {\n\n    boolean useCompoundDocStore = false;\n\n    String docStoreSegment;\n\n    boolean success = false;\n    try {\n      docStoreSegment = docWriter.closeDocStore();\n      success = true;\n    } finally {\n      if (!success && infoStream != null) {\n        message(\"hit exception closing doc store segment\");\n      }\n    }\n\n    useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);\n      \n    if (useCompoundDocStore && docStoreSegment != null && docWriter.closedFiles().size() != 0) {\n      // Now build compound doc store file\n\n      if (infoStream != null) {\n        message(\"create compound file \" + docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n      }\n\n      success = false;\n\n      final int numSegments = segmentInfos.size();\n      final String compoundFileName = docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n\n      try {\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        final Iterator it = docWriter.closedFiles().iterator();\n        while(it.hasNext())\n          cfsWriter.addFile((String) it.next());\n      \n        // Perform the merge\n        cfsWriter.close();\n        success = true;\n\n      } finally {\n        if (!success) {\n          if (infoStream != null)\n            message(\"hit exception building compound file doc store for segment \" + docStoreSegment);\n          deleter.deleteFile(compoundFileName);\n        }\n      }\n\n      for(int i=0;i<numSegments;i++) {\n        SegmentInfo si = segmentInfos.info(i);\n        if (si.getDocStoreOffset() != -1 &&\n            si.getDocStoreSegment().equals(docStoreSegment))\n          si.setDocStoreIsCompoundFile(true);\n      }\n\n      checkpoint();\n\n      // In case the files we just merged into a CFS were\n      // not previously checkpointed:\n      deleter.deleteNewFiles(docWriter.closedFiles());\n    }\n\n    return useCompoundDocStore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","sourceNew":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files).\n   *  Return value specifices whether new doc store files are compound or not.\n   */\n  private synchronized boolean flushDocStores() throws IOException {\n\n    boolean useCompoundDocStore = false;\n\n    String docStoreSegment;\n\n    boolean success = false;\n    try {\n      docStoreSegment = docWriter.closeDocStore();\n      success = true;\n    } finally {\n      if (!success && infoStream != null) {\n        message(\"hit exception closing doc store segment\");\n      }\n    }\n\n    useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);\n      \n    if (useCompoundDocStore && docStoreSegment != null && docWriter.closedFiles().size() != 0) {\n      // Now build compound doc store file\n\n      if (infoStream != null) {\n        message(\"create compound file \" + docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n      }\n\n      success = false;\n\n      final int numSegments = segmentInfos.size();\n      final String compoundFileName = docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n\n      try {\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        for (final String file :  docWriter.closedFiles() ) {\n          cfsWriter.addFile(file);\n        }\n      \n        // Perform the merge\n        cfsWriter.close();\n        success = true;\n\n      } finally {\n        if (!success) {\n          if (infoStream != null)\n            message(\"hit exception building compound file doc store for segment \" + docStoreSegment);\n          deleter.deleteFile(compoundFileName);\n          docWriter.abort();\n        }\n      }\n\n      for(int i=0;i<numSegments;i++) {\n        SegmentInfo si = segmentInfos.info(i);\n        if (si.getDocStoreOffset() != -1 &&\n            si.getDocStoreSegment().equals(docStoreSegment))\n          si.setDocStoreIsCompoundFile(true);\n      }\n\n      checkpoint();\n\n      // In case the files we just merged into a CFS were\n      // not previously checkpointed:\n      deleter.deleteNewFiles(docWriter.closedFiles());\n    }\n\n    return useCompoundDocStore;\n  }\n\n","sourceOld":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files).\n   *  Return value specifices whether new doc store files are compound or not.\n   */\n  private synchronized boolean flushDocStores() throws IOException {\n\n    boolean useCompoundDocStore = false;\n\n    String docStoreSegment;\n\n    boolean success = false;\n    try {\n      docStoreSegment = docWriter.closeDocStore();\n      success = true;\n    } finally {\n      if (!success && infoStream != null) {\n        message(\"hit exception closing doc store segment\");\n      }\n    }\n\n    useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);\n      \n    if (useCompoundDocStore && docStoreSegment != null && docWriter.closedFiles().size() != 0) {\n      // Now build compound doc store file\n\n      if (infoStream != null) {\n        message(\"create compound file \" + docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n      }\n\n      success = false;\n\n      final int numSegments = segmentInfos.size();\n      final String compoundFileName = docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n\n      try {\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        final Iterator it = docWriter.closedFiles().iterator();\n        while(it.hasNext())\n          cfsWriter.addFile((String) it.next());\n      \n        // Perform the merge\n        cfsWriter.close();\n        success = true;\n\n      } finally {\n        if (!success) {\n          if (infoStream != null)\n            message(\"hit exception building compound file doc store for segment \" + docStoreSegment);\n          deleter.deleteFile(compoundFileName);\n          docWriter.abort();\n        }\n      }\n\n      for(int i=0;i<numSegments;i++) {\n        SegmentInfo si = segmentInfos.info(i);\n        if (si.getDocStoreOffset() != -1 &&\n            si.getDocStoreSegment().equals(docStoreSegment))\n          si.setDocStoreIsCompoundFile(true);\n      }\n\n      checkpoint();\n\n      // In case the files we just merged into a CFS were\n      // not previously checkpointed:\n      deleter.deleteNewFiles(docWriter.closedFiles());\n    }\n\n    return useCompoundDocStore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"775efee7f959e0dd3df7960b93767d9e00b78751","date":1267203159,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","sourceNew":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files).\n   *  Return value specifices whether new doc store files are compound or not.\n   */\n  private synchronized boolean flushDocStores() throws IOException {\n\n    boolean useCompoundDocStore = false;\n\n    String docStoreSegment;\n\n    boolean success = false;\n    try {\n      docStoreSegment = docWriter.closeDocStore();\n      success = true;\n    } finally {\n      if (!success && infoStream != null) {\n        message(\"hit exception closing doc store segment\");\n      }\n    }\n\n    useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);\n      \n    if (useCompoundDocStore && docStoreSegment != null && docWriter.closedFiles().size() != 0) {\n      // Now build compound doc store file\n\n      if (infoStream != null) {\n        message(\"create compound file \" + IndexFileNames.segmentFileName(docStoreSegment, IndexFileNames.COMPOUND_FILE_STORE_EXTENSION));\n      }\n\n      success = false;\n\n      final int numSegments = segmentInfos.size();\n      final String compoundFileName = IndexFileNames.segmentFileName(docStoreSegment, IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n\n      try {\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        for (final String file :  docWriter.closedFiles() ) {\n          cfsWriter.addFile(file);\n        }\n      \n        // Perform the merge\n        cfsWriter.close();\n        success = true;\n\n      } finally {\n        if (!success) {\n          if (infoStream != null)\n            message(\"hit exception building compound file doc store for segment \" + docStoreSegment);\n          deleter.deleteFile(compoundFileName);\n          docWriter.abort();\n        }\n      }\n\n      for(int i=0;i<numSegments;i++) {\n        SegmentInfo si = segmentInfos.info(i);\n        if (si.getDocStoreOffset() != -1 &&\n            si.getDocStoreSegment().equals(docStoreSegment))\n          si.setDocStoreIsCompoundFile(true);\n      }\n\n      checkpoint();\n\n      // In case the files we just merged into a CFS were\n      // not previously checkpointed:\n      deleter.deleteNewFiles(docWriter.closedFiles());\n    }\n\n    return useCompoundDocStore;\n  }\n\n","sourceOld":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files).\n   *  Return value specifices whether new doc store files are compound or not.\n   */\n  private synchronized boolean flushDocStores() throws IOException {\n\n    boolean useCompoundDocStore = false;\n\n    String docStoreSegment;\n\n    boolean success = false;\n    try {\n      docStoreSegment = docWriter.closeDocStore();\n      success = true;\n    } finally {\n      if (!success && infoStream != null) {\n        message(\"hit exception closing doc store segment\");\n      }\n    }\n\n    useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);\n      \n    if (useCompoundDocStore && docStoreSegment != null && docWriter.closedFiles().size() != 0) {\n      // Now build compound doc store file\n\n      if (infoStream != null) {\n        message(\"create compound file \" + docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n      }\n\n      success = false;\n\n      final int numSegments = segmentInfos.size();\n      final String compoundFileName = docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;\n\n      try {\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        for (final String file :  docWriter.closedFiles() ) {\n          cfsWriter.addFile(file);\n        }\n      \n        // Perform the merge\n        cfsWriter.close();\n        success = true;\n\n      } finally {\n        if (!success) {\n          if (infoStream != null)\n            message(\"hit exception building compound file doc store for segment \" + docStoreSegment);\n          deleter.deleteFile(compoundFileName);\n          docWriter.abort();\n        }\n      }\n\n      for(int i=0;i<numSegments;i++) {\n        SegmentInfo si = segmentInfos.info(i);\n        if (si.getDocStoreOffset() != -1 &&\n            si.getDocStoreSegment().equals(docStoreSegment))\n          si.setDocStoreIsCompoundFile(true);\n      }\n\n      checkpoint();\n\n      // In case the files we just merged into a CFS were\n      // not previously checkpointed:\n      deleter.deleteNewFiles(docWriter.closedFiles());\n    }\n\n    return useCompoundDocStore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flushDocStores().mjava","sourceNew":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files).\n   *  Return value specifices whether new doc store files are compound or not.\n   */\n  private synchronized boolean flushDocStores() throws IOException {\n\n    boolean useCompoundDocStore = false;\n\n    String docStoreSegment;\n\n    boolean success = false;\n    try {\n      docStoreSegment = docWriter.closeDocStore();\n      success = true;\n    } finally {\n      if (!success && infoStream != null) {\n        message(\"hit exception closing doc store segment\");\n      }\n    }\n\n    useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);\n      \n    if (useCompoundDocStore && docStoreSegment != null && docWriter.closedFiles().size() != 0) {\n      // Now build compound doc store file\n\n      if (infoStream != null) {\n        message(\"create compound file \" + IndexFileNames.segmentFileName(docStoreSegment, IndexFileNames.COMPOUND_FILE_STORE_EXTENSION));\n      }\n\n      success = false;\n\n      final int numSegments = segmentInfos.size();\n      final String compoundFileName = IndexFileNames.segmentFileName(docStoreSegment, IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n\n      try {\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        for (final String file :  docWriter.closedFiles() ) {\n          cfsWriter.addFile(file);\n        }\n      \n        // Perform the merge\n        cfsWriter.close();\n        success = true;\n\n      } finally {\n        if (!success) {\n          if (infoStream != null)\n            message(\"hit exception building compound file doc store for segment \" + docStoreSegment);\n          deleter.deleteFile(compoundFileName);\n          docWriter.abort();\n        }\n      }\n\n      for(int i=0;i<numSegments;i++) {\n        SegmentInfo si = segmentInfos.info(i);\n        if (si.getDocStoreOffset() != -1 &&\n            si.getDocStoreSegment().equals(docStoreSegment))\n          si.setDocStoreIsCompoundFile(true);\n      }\n\n      checkpoint();\n\n      // In case the files we just merged into a CFS were\n      // not previously checkpointed:\n      deleter.deleteNewFiles(docWriter.closedFiles());\n    }\n\n    return useCompoundDocStore;\n  }\n\n","sourceOld":"  /** Tells the docWriter to close its currently open shared\n   *  doc stores (stored fields & vectors files).\n   *  Return value specifices whether new doc store files are compound or not.\n   */\n  private synchronized boolean flushDocStores() throws IOException {\n\n    boolean useCompoundDocStore = false;\n\n    String docStoreSegment;\n\n    boolean success = false;\n    try {\n      docStoreSegment = docWriter.closeDocStore();\n      success = true;\n    } finally {\n      if (!success && infoStream != null) {\n        message(\"hit exception closing doc store segment\");\n      }\n    }\n\n    useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);\n      \n    if (useCompoundDocStore && docStoreSegment != null && docWriter.closedFiles().size() != 0) {\n      // Now build compound doc store file\n\n      if (infoStream != null) {\n        message(\"create compound file \" + IndexFileNames.segmentFileName(docStoreSegment, IndexFileNames.COMPOUND_FILE_STORE_EXTENSION));\n      }\n\n      success = false;\n\n      final int numSegments = segmentInfos.size();\n      final String compoundFileName = IndexFileNames.segmentFileName(docStoreSegment, IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n\n      try {\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        for (final String file :  docWriter.closedFiles() ) {\n          cfsWriter.addFile(file);\n        }\n      \n        // Perform the merge\n        cfsWriter.close();\n        success = true;\n\n      } finally {\n        if (!success) {\n          if (infoStream != null)\n            message(\"hit exception building compound file doc store for segment \" + docStoreSegment);\n          deleter.deleteFile(compoundFileName);\n          docWriter.abort();\n        }\n      }\n\n      for(int i=0;i<numSegments;i++) {\n        SegmentInfo si = segmentInfos.info(i);\n        if (si.getDocStoreOffset() != -1 &&\n            si.getDocStoreSegment().equals(docStoreSegment))\n          si.setDocStoreIsCompoundFile(true);\n      }\n\n      checkpoint();\n\n      // In case the files we just merged into a CFS were\n      // not previously checkpointed:\n      deleter.deleteNewFiles(docWriter.closedFiles());\n    }\n\n    return useCompoundDocStore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"775efee7f959e0dd3df7960b93767d9e00b78751":["ef82ff03e4016c705811b2658e81471a645c0e49"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["2993c85d947e3191bba14229ea72fd5675d048e2"],"2993c85d947e3191bba14229ea72fd5675d048e2":["5350389bf83287111f7760b9e3db3af8e3648474"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef82ff03e4016c705811b2658e81471a645c0e49":["87c966e9308847938a7c905c2e46a56d8df788b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82780afe6097066eb5befb86e9432f077667e3d":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"87c966e9308847938a7c905c2e46a56d8df788b8":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"5350389bf83287111f7760b9e3db3af8e3648474":["e82780afe6097066eb5befb86e9432f077667e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["775efee7f959e0dd3df7960b93767d9e00b78751"]},"commit2Childs":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["e82780afe6097066eb5befb86e9432f077667e3d"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"775efee7f959e0dd3df7960b93767d9e00b78751":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["87c966e9308847938a7c905c2e46a56d8df788b8"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"2993c85d947e3191bba14229ea72fd5675d048e2":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"ef82ff03e4016c705811b2658e81471a645c0e49":["775efee7f959e0dd3df7960b93767d9e00b78751"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"e82780afe6097066eb5befb86e9432f077667e3d":["5350389bf83287111f7760b9e3db3af8e3648474"],"87c966e9308847938a7c905c2e46a56d8df788b8":["ef82ff03e4016c705811b2658e81471a645c0e49"],"5350389bf83287111f7760b9e3db3af8e3648474":["2993c85d947e3191bba14229ea72fd5675d048e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}