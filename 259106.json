{"path":"solr/src/java/org/apache/solr/spelling/suggest/tst/TSTLookup#lookup(String,boolean,int).mjava","commits":[{"id":"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","date":1282571040,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/tst/TSTLookup#lookup(String,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public List<LookupResult> lookup(String key, boolean onlyMorePopular, int num) {\n    List<TernaryTreeNode> list = autocomplete.prefixCompletion(root, key, 0);\n    List<LookupResult> res = new ArrayList<LookupResult>();\n    if (list == null || list.size() == 0) {\n      return res;\n    }\n    int maxCnt = Math.min(num, list.size());\n    if (onlyMorePopular) {\n      LookupPriorityQueue queue = new LookupPriorityQueue(num);\n      for (TernaryTreeNode ttn : list) {\n        queue.insertWithOverflow(new LookupResult(ttn.token, (Float)ttn.val));\n      }\n      for (LookupResult lr : queue.getResults()) {\n        res.add(lr);\n      }\n    } else {\n      for (int i = 0; i < maxCnt; i++) {\n        TernaryTreeNode ttn = list.get(i);\n        res.add(new LookupResult(ttn.token, (Float)ttn.val));\n      }\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/tst/TSTLookup#lookup(String,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public List<LookupResult> lookup(String key, boolean onlyMorePopular, int num) {\n    List<TernaryTreeNode> list = autocomplete.prefixCompletion(root, key, 0);\n    List<LookupResult> res = new ArrayList<LookupResult>();\n    if (list == null || list.size() == 0) {\n      return res;\n    }\n    int maxCnt = Math.min(num, list.size());\n    if (onlyMorePopular) {\n      LookupPriorityQueue queue = new LookupPriorityQueue(num);\n      for (TernaryTreeNode ttn : list) {\n        queue.insertWithOverflow(new LookupResult(ttn.token, (Float)ttn.val));\n      }\n      for (LookupResult lr : queue.getResults()) {\n        res.add(lr);\n      }\n    } else {\n      for (int i = 0; i < maxCnt; i++) {\n        TernaryTreeNode ttn = list.get(i);\n        res.add(new LookupResult(ttn.token, (Float)ttn.val));\n      }\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#lookup(String,boolean,int).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/tst/TSTLookup#lookup(String,boolean,int).mjava","sourceNew":"  @Override\n  public List<LookupResult> lookup(String key, boolean onlyMorePopular, int num) {\n    List<TernaryTreeNode> list = autocomplete.prefixCompletion(root, key, 0);\n    List<LookupResult> res = new ArrayList<LookupResult>();\n    if (list == null || list.size() == 0) {\n      return res;\n    }\n    int maxCnt = Math.min(num, list.size());\n    if (onlyMorePopular) {\n      LookupPriorityQueue queue = new LookupPriorityQueue(num);\n      for (TernaryTreeNode ttn : list) {\n        queue.insertWithOverflow(new LookupResult(ttn.token, (Float)ttn.val));\n      }\n      for (LookupResult lr : queue.getResults()) {\n        res.add(lr);\n      }\n    } else {\n      for (int i = 0; i < maxCnt; i++) {\n        TernaryTreeNode ttn = list.get(i);\n        res.add(new LookupResult(ttn.token, (Float)ttn.val));\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public List<LookupResult> lookup(String key, boolean onlyMorePopular, int num) {\n    List<TernaryTreeNode> list = autocomplete.prefixCompletion(root, key, 0);\n    List<LookupResult> res = new ArrayList<LookupResult>();\n    if (list == null || list.size() == 0) {\n      return res;\n    }\n    int maxCnt = Math.min(num, list.size());\n    if (onlyMorePopular) {\n      LookupPriorityQueue queue = new LookupPriorityQueue(num);\n      for (TernaryTreeNode ttn : list) {\n        queue.insertWithOverflow(new LookupResult(ttn.token, (Float)ttn.val));\n      }\n      for (LookupResult lr : queue.getResults()) {\n        res.add(lr);\n      }\n    } else {\n      for (int i = 0; i < maxCnt; i++) {\n        TernaryTreeNode ttn = list.get(i);\n        res.add(new LookupResult(ttn.token, (Float)ttn.val));\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#lookup(String,boolean,int).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/tst/TSTLookup#lookup(String,boolean,int).mjava","sourceNew":"  @Override\n  public List<LookupResult> lookup(String key, boolean onlyMorePopular, int num) {\n    List<TernaryTreeNode> list = autocomplete.prefixCompletion(root, key, 0);\n    List<LookupResult> res = new ArrayList<LookupResult>();\n    if (list == null || list.size() == 0) {\n      return res;\n    }\n    int maxCnt = Math.min(num, list.size());\n    if (onlyMorePopular) {\n      LookupPriorityQueue queue = new LookupPriorityQueue(num);\n      for (TernaryTreeNode ttn : list) {\n        queue.insertWithOverflow(new LookupResult(ttn.token, (Float)ttn.val));\n      }\n      for (LookupResult lr : queue.getResults()) {\n        res.add(lr);\n      }\n    } else {\n      for (int i = 0; i < maxCnt; i++) {\n        TernaryTreeNode ttn = list.get(i);\n        res.add(new LookupResult(ttn.token, (Float)ttn.val));\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public List<LookupResult> lookup(String key, boolean onlyMorePopular, int num) {\n    List<TernaryTreeNode> list = autocomplete.prefixCompletion(root, key, 0);\n    List<LookupResult> res = new ArrayList<LookupResult>();\n    if (list == null || list.size() == 0) {\n      return res;\n    }\n    int maxCnt = Math.min(num, list.size());\n    if (onlyMorePopular) {\n      LookupPriorityQueue queue = new LookupPriorityQueue(num);\n      for (TernaryTreeNode ttn : list) {\n        queue.insertWithOverflow(new LookupResult(ttn.token, (Float)ttn.val));\n      }\n      for (LookupResult lr : queue.getResults()) {\n        res.add(lr);\n      }\n    } else {\n      for (int i = 0; i < maxCnt; i++) {\n        TernaryTreeNode ttn = list.get(i);\n        res.add(new LookupResult(ttn.token, (Float)ttn.val));\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#lookup(String,boolean,int).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/tst/TSTLookup#lookup(String,boolean,int).mjava","sourceNew":"  @Override\n  public List<LookupResult> lookup(String key, boolean onlyMorePopular, int num) {\n    List<TernaryTreeNode> list = autocomplete.prefixCompletion(root, key, 0);\n    List<LookupResult> res = new ArrayList<LookupResult>();\n    if (list == null || list.size() == 0) {\n      return res;\n    }\n    int maxCnt = Math.min(num, list.size());\n    if (onlyMorePopular) {\n      LookupPriorityQueue queue = new LookupPriorityQueue(num);\n      for (TernaryTreeNode ttn : list) {\n        queue.insertWithOverflow(new LookupResult(ttn.token, (Float)ttn.val));\n      }\n      for (LookupResult lr : queue.getResults()) {\n        res.add(lr);\n      }\n    } else {\n      for (int i = 0; i < maxCnt; i++) {\n        TernaryTreeNode ttn = list.get(i);\n        res.add(new LookupResult(ttn.token, (Float)ttn.val));\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public List<LookupResult> lookup(String key, boolean onlyMorePopular, int num) {\n    List<TernaryTreeNode> list = autocomplete.prefixCompletion(root, key, 0);\n    List<LookupResult> res = new ArrayList<LookupResult>();\n    if (list == null || list.size() == 0) {\n      return res;\n    }\n    int maxCnt = Math.min(num, list.size());\n    if (onlyMorePopular) {\n      LookupPriorityQueue queue = new LookupPriorityQueue(num);\n      for (TernaryTreeNode ttn : list) {\n        queue.insertWithOverflow(new LookupResult(ttn.token, (Float)ttn.val));\n      }\n      for (LookupResult lr : queue.getResults()) {\n        res.add(lr);\n      }\n    } else {\n      for (int i = 0; i < maxCnt; i++) {\n        TernaryTreeNode ttn = list.get(i);\n        res.add(new LookupResult(ttn.token, (Float)ttn.val));\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e230a61047bc041516c811baa08a7174d6f8322a":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ff4f089150b5073dcd4fa1e2018954e3a1eb1af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e230a61047bc041516c811baa08a7174d6f8322a"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"e230a61047bc041516c811baa08a7174d6f8322a":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}