{"path":"solr/core/src/test/org/apache/solr/update/processor/CategoryRoutedAliasUpdateProcessorTest#test().mjava","commits":[{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/CategoryRoutedAliasUpdateProcessorTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Slow\n  @Test\n  public void test() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    // Start with one collection manually created (and use higher numShards & replicas than we'll use for others)\n    //  This tests we may pre-create the collection and it's acceptable.\n    final String colVogon = getAlias() + \"__CRA__\" + SHIPS[0];\n\n    // we expect changes ensuring a legal collection name.\n    final String colHoG = getAlias() + \"__CRA__\" + noSpaces(SHIPS[1]);\n    final String colStunt = getAlias() + \"__CRA__\" + noSpaces(SHIPS[2]);\n    final String colArk = getAlias() + \"__CRA__\" + noDashes(SHIPS[3]);\n    final String colBistro = getAlias() + \"__CRA__\" + noDollar(SHIPS[4]);\n\n    List<String> retrievedConfigSetNames = new ConfigSetAdminRequest.List().process(solrClient).getConfigSets();\n    List<String> expectedConfigSetNames = Arrays.asList(\"_default\", configName);\n\n    // config sets leak between tests so we can't be any more specific than this on the next 2 asserts\n    assertTrue(\"We expect at least 2 configSets\",\n        retrievedConfigSetNames.size() >= expectedConfigSetNames.size());\n    assertTrue(\"ConfigNames should include :\" + expectedConfigSetNames, retrievedConfigSetNames.containsAll(expectedConfigSetNames));\n\n    CollectionAdminRequest.createCategoryRoutedAlias(getAlias(), categoryField, 20,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 1, 1)\n            .setMaxShardsPerNode(2))\n        .process(solrClient);\n\n    // now we index a document\n    addDocsAndCommit(true, newDoc(SHIPS[0]));\n    //assertDocRoutedToCol(lastDocId, col23rd);\n\n    String uninitialized = getAlias() + \"__CRA__\" + CategoryRoutedAlias.UNINITIALIZED;\n    assertInvariants(colVogon, uninitialized);\n\n    addDocsAndCommit(true,\n        newDoc(SHIPS[1]),\n        newDoc(SHIPS[2]),\n        newDoc(SHIPS[3]),\n        newDoc(SHIPS[4]));\n\n    assertInvariants(colVogon, colHoG, colStunt, colArk, colBistro);\n\n    // make sure we fail if we have no value to route on.\n    testFailedDocument(newDoc(null), \"Route value is null\");\n    testFailedDocument(newDoc(\"foo__CRA__bar\"), \"7 character sequence __CRA__\");\n    testFailedDocument(newDoc(\"fóóCRAóóbar\"), \"7 character sequence __CRA__\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bf78a55e1864fa3f0c50ca04de0a010a800e533","date":1554818536,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/CategoryRoutedAliasUpdateProcessorTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/CategoryRoutedAliasUpdateProcessorTest#test().mjava","sourceNew":"  @Slow\n  @Test\n  public void test() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    // Start with one collection manually created (and use higher numShards & replicas than we'll use for others)\n    //  This tests we may pre-create the collection and it's acceptable.\n    final String colVogon = getAlias() + \"__CRA__\" + SHIPS[0];\n\n    // we expect changes ensuring a legal collection name.\n    final String colHoG = getAlias() + \"__CRA__\" + noSpaces(SHIPS[1]);\n    final String colStunt = getAlias() + \"__CRA__\" + noSpaces(SHIPS[2]);\n    final String colArk = getAlias() + \"__CRA__\" + noDashes(SHIPS[3]);\n    final String colBistro = getAlias() + \"__CRA__\" + noDollar(SHIPS[4]);\n\n    List<String> retrievedConfigSetNames = new ConfigSetAdminRequest.List().process(solrClient).getConfigSets();\n    List<String> expectedConfigSetNames = Arrays.asList(\"_default\", configName);\n\n    // config sets leak between tests so we can't be any more specific than this on the next 2 asserts\n    assertTrue(\"We expect at least 2 configSets\",\n        retrievedConfigSetNames.size() >= expectedConfigSetNames.size());\n    assertTrue(\"ConfigNames should include :\" + expectedConfigSetNames, retrievedConfigSetNames.containsAll(expectedConfigSetNames));\n\n    CollectionAdminRequest.createCategoryRoutedAlias(getAlias(), categoryField, 20,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 1, 1)\n            .setMaxShardsPerNode(2))\n        .process(solrClient);\n\n    // now we index a document\n    addDocsAndCommit(true, newDoc(SHIPS[0]));\n\n    String uninitialized = getAlias() + \"__CRA__\" + CategoryRoutedAlias.UNINITIALIZED;\n    assertInvariants(colVogon, uninitialized);\n\n    addDocsAndCommit(true,\n        newDoc(SHIPS[1]),\n        newDoc(SHIPS[2]),\n        newDoc(SHIPS[3]),\n        newDoc(SHIPS[4]));\n\n    assertInvariants(colVogon, colHoG, colStunt, colArk, colBistro);\n\n    // make sure we fail if we have no value to route on.\n    testFailedDocument(newDoc(null), \"Route value is null\");\n    testFailedDocument(newDoc(\"foo__CRA__bar\"), \"7 character sequence __CRA__\");\n    testFailedDocument(newDoc(\"fóóCRAóóbar\"), \"7 character sequence __CRA__\");\n\n  }\n\n","sourceOld":"  @Slow\n  @Test\n  public void test() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    // Start with one collection manually created (and use higher numShards & replicas than we'll use for others)\n    //  This tests we may pre-create the collection and it's acceptable.\n    final String colVogon = getAlias() + \"__CRA__\" + SHIPS[0];\n\n    // we expect changes ensuring a legal collection name.\n    final String colHoG = getAlias() + \"__CRA__\" + noSpaces(SHIPS[1]);\n    final String colStunt = getAlias() + \"__CRA__\" + noSpaces(SHIPS[2]);\n    final String colArk = getAlias() + \"__CRA__\" + noDashes(SHIPS[3]);\n    final String colBistro = getAlias() + \"__CRA__\" + noDollar(SHIPS[4]);\n\n    List<String> retrievedConfigSetNames = new ConfigSetAdminRequest.List().process(solrClient).getConfigSets();\n    List<String> expectedConfigSetNames = Arrays.asList(\"_default\", configName);\n\n    // config sets leak between tests so we can't be any more specific than this on the next 2 asserts\n    assertTrue(\"We expect at least 2 configSets\",\n        retrievedConfigSetNames.size() >= expectedConfigSetNames.size());\n    assertTrue(\"ConfigNames should include :\" + expectedConfigSetNames, retrievedConfigSetNames.containsAll(expectedConfigSetNames));\n\n    CollectionAdminRequest.createCategoryRoutedAlias(getAlias(), categoryField, 20,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 1, 1)\n            .setMaxShardsPerNode(2))\n        .process(solrClient);\n\n    // now we index a document\n    addDocsAndCommit(true, newDoc(SHIPS[0]));\n    //assertDocRoutedToCol(lastDocId, col23rd);\n\n    String uninitialized = getAlias() + \"__CRA__\" + CategoryRoutedAlias.UNINITIALIZED;\n    assertInvariants(colVogon, uninitialized);\n\n    addDocsAndCommit(true,\n        newDoc(SHIPS[1]),\n        newDoc(SHIPS[2]),\n        newDoc(SHIPS[3]),\n        newDoc(SHIPS[4]));\n\n    assertInvariants(colVogon, colHoG, colStunt, colArk, colBistro);\n\n    // make sure we fail if we have no value to route on.\n    testFailedDocument(newDoc(null), \"Route value is null\");\n    testFailedDocument(newDoc(\"foo__CRA__bar\"), \"7 character sequence __CRA__\");\n    testFailedDocument(newDoc(\"fóóCRAóóbar\"), \"7 character sequence __CRA__\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/CategoryRoutedAliasUpdateProcessorTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/CategoryRoutedAliasUpdateProcessorTest#test().mjava","sourceNew":"  @Slow\n  @Test\n  public void test() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    // Start with one collection manually created (and use higher numShards & replicas than we'll use for others)\n    //  This tests we may pre-create the collection and it's acceptable.\n    final String colVogon = getAlias() + \"__CRA__\" + SHIPS[0];\n\n    // we expect changes ensuring a legal collection name.\n    final String colHoG = getAlias() + \"__CRA__\" + noSpaces(SHIPS[1]);\n    final String colStunt = getAlias() + \"__CRA__\" + noSpaces(SHIPS[2]);\n    final String colArk = getAlias() + \"__CRA__\" + noDashes(SHIPS[3]);\n    final String colBistro = getAlias() + \"__CRA__\" + noDollar(SHIPS[4]);\n\n    List<String> retrievedConfigSetNames = new ConfigSetAdminRequest.List().process(solrClient).getConfigSets();\n    List<String> expectedConfigSetNames = Arrays.asList(\"_default\", configName);\n\n    // config sets leak between tests so we can't be any more specific than this on the next 2 asserts\n    assertTrue(\"We expect at least 2 configSets\",\n        retrievedConfigSetNames.size() >= expectedConfigSetNames.size());\n    assertTrue(\"ConfigNames should include :\" + expectedConfigSetNames, retrievedConfigSetNames.containsAll(expectedConfigSetNames));\n\n    CollectionAdminRequest.createCategoryRoutedAlias(getAlias(), categoryField, 20,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 1, 1)\n            .setMaxShardsPerNode(2))\n        .process(solrClient);\n\n    // now we index a document\n    addDocsAndCommit(true, newDoc(SHIPS[0]));\n\n    String uninitialized = getAlias() + \"__CRA__\" + CategoryRoutedAlias.UNINITIALIZED;\n\n    // important to test that we don't try to delete the temp collection on the first document. If we did so\n    // we would be at risk of out of order execution of the deletion/creation which would leave a window\n    // of time where there were no collections in the alias. That would likely break all manner of other\n    // parts of solr.\n    assertInvariants(colVogon, uninitialized);\n\n    addDocsAndCommit(true,\n        newDoc(SHIPS[1]),\n        newDoc(SHIPS[2]),\n        newDoc(SHIPS[3]),\n        newDoc(SHIPS[4]));\n\n    // NOW the temp collection should be gone!\n    assertInvariants(colVogon, colHoG, colStunt, colArk, colBistro);\n\n    // make sure we fail if we have no value to route on.\n    testFailedDocument(newDoc(null), \"Route value is null\");\n    testFailedDocument(newDoc(\"foo__CRA__bar\"), \"7 character sequence __CRA__\");\n    testFailedDocument(newDoc(\"fóóCRAóóbar\"), \"7 character sequence __CRA__\");\n\n  }\n\n","sourceOld":"  @Slow\n  @Test\n  public void test() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    // Start with one collection manually created (and use higher numShards & replicas than we'll use for others)\n    //  This tests we may pre-create the collection and it's acceptable.\n    final String colVogon = getAlias() + \"__CRA__\" + SHIPS[0];\n\n    // we expect changes ensuring a legal collection name.\n    final String colHoG = getAlias() + \"__CRA__\" + noSpaces(SHIPS[1]);\n    final String colStunt = getAlias() + \"__CRA__\" + noSpaces(SHIPS[2]);\n    final String colArk = getAlias() + \"__CRA__\" + noDashes(SHIPS[3]);\n    final String colBistro = getAlias() + \"__CRA__\" + noDollar(SHIPS[4]);\n\n    List<String> retrievedConfigSetNames = new ConfigSetAdminRequest.List().process(solrClient).getConfigSets();\n    List<String> expectedConfigSetNames = Arrays.asList(\"_default\", configName);\n\n    // config sets leak between tests so we can't be any more specific than this on the next 2 asserts\n    assertTrue(\"We expect at least 2 configSets\",\n        retrievedConfigSetNames.size() >= expectedConfigSetNames.size());\n    assertTrue(\"ConfigNames should include :\" + expectedConfigSetNames, retrievedConfigSetNames.containsAll(expectedConfigSetNames));\n\n    CollectionAdminRequest.createCategoryRoutedAlias(getAlias(), categoryField, 20,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 1, 1)\n            .setMaxShardsPerNode(2))\n        .process(solrClient);\n\n    // now we index a document\n    addDocsAndCommit(true, newDoc(SHIPS[0]));\n\n    String uninitialized = getAlias() + \"__CRA__\" + CategoryRoutedAlias.UNINITIALIZED;\n    assertInvariants(colVogon, uninitialized);\n\n    addDocsAndCommit(true,\n        newDoc(SHIPS[1]),\n        newDoc(SHIPS[2]),\n        newDoc(SHIPS[3]),\n        newDoc(SHIPS[4]));\n\n    assertInvariants(colVogon, colHoG, colStunt, colArk, colBistro);\n\n    // make sure we fail if we have no value to route on.\n    testFailedDocument(newDoc(null), \"Route value is null\");\n    testFailedDocument(newDoc(\"foo__CRA__bar\"), \"7 character sequence __CRA__\");\n    testFailedDocument(newDoc(\"fóóCRAóóbar\"), \"7 character sequence __CRA__\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/CategoryRoutedAliasUpdateProcessorTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/CategoryRoutedAliasUpdateProcessorTest#test().mjava","sourceNew":"  @Slow\n  @Test\n  public void test() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    // Start with one collection manually created (and use higher numShards & replicas than we'll use for others)\n    //  This tests we may pre-create the collection and it's acceptable.\n    final String colVogon = getAlias() + \"__CRA__\" + SHIPS[0];\n\n    // we expect changes ensuring a legal collection name.\n    final String colHoG = getAlias() + \"__CRA__\" + noSpaces(SHIPS[1]);\n    final String colStunt = getAlias() + \"__CRA__\" + noSpaces(SHIPS[2]);\n    final String colArk = getAlias() + \"__CRA__\" + noDashes(SHIPS[3]);\n    final String colBistro = getAlias() + \"__CRA__\" + noDollar(SHIPS[4]);\n\n    List<String> retrievedConfigSetNames = new ConfigSetAdminRequest.List().process(solrClient).getConfigSets();\n    List<String> expectedConfigSetNames = Arrays.asList(\"_default\", configName);\n\n    // config sets leak between tests so we can't be any more specific than this on the next 2 asserts\n    assertTrue(\"We expect at least 2 configSets\",\n        retrievedConfigSetNames.size() >= expectedConfigSetNames.size());\n    assertTrue(\"ConfigNames should include :\" + expectedConfigSetNames, retrievedConfigSetNames.containsAll(expectedConfigSetNames));\n\n    CollectionAdminRequest.createCategoryRoutedAlias(getAlias(), categoryField, 20,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 1, 1))\n        .process(solrClient);\n\n    // now we index a document\n    addDocsAndCommit(true, newDoc(SHIPS[0]));\n\n    String uninitialized = getAlias() + \"__CRA__\" + CategoryRoutedAlias.UNINITIALIZED;\n\n    // important to test that we don't try to delete the temp collection on the first document. If we did so\n    // we would be at risk of out of order execution of the deletion/creation which would leave a window\n    // of time where there were no collections in the alias. That would likely break all manner of other\n    // parts of solr.\n    assertInvariants(colVogon, uninitialized);\n\n    addDocsAndCommit(true,\n        newDoc(SHIPS[1]),\n        newDoc(SHIPS[2]),\n        newDoc(SHIPS[3]),\n        newDoc(SHIPS[4]));\n\n    // NOW the temp collection should be gone!\n    assertInvariants(colVogon, colHoG, colStunt, colArk, colBistro);\n\n    // make sure we fail if we have no value to route on.\n    testFailedDocument(newDoc(null), \"Route value is null\");\n    testFailedDocument(newDoc(\"foo__CRA__bar\"), \"7 character sequence __CRA__\");\n    testFailedDocument(newDoc(\"fóóCRAóóbar\"), \"7 character sequence __CRA__\");\n\n  }\n\n","sourceOld":"  @Slow\n  @Test\n  public void test() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    // Start with one collection manually created (and use higher numShards & replicas than we'll use for others)\n    //  This tests we may pre-create the collection and it's acceptable.\n    final String colVogon = getAlias() + \"__CRA__\" + SHIPS[0];\n\n    // we expect changes ensuring a legal collection name.\n    final String colHoG = getAlias() + \"__CRA__\" + noSpaces(SHIPS[1]);\n    final String colStunt = getAlias() + \"__CRA__\" + noSpaces(SHIPS[2]);\n    final String colArk = getAlias() + \"__CRA__\" + noDashes(SHIPS[3]);\n    final String colBistro = getAlias() + \"__CRA__\" + noDollar(SHIPS[4]);\n\n    List<String> retrievedConfigSetNames = new ConfigSetAdminRequest.List().process(solrClient).getConfigSets();\n    List<String> expectedConfigSetNames = Arrays.asList(\"_default\", configName);\n\n    // config sets leak between tests so we can't be any more specific than this on the next 2 asserts\n    assertTrue(\"We expect at least 2 configSets\",\n        retrievedConfigSetNames.size() >= expectedConfigSetNames.size());\n    assertTrue(\"ConfigNames should include :\" + expectedConfigSetNames, retrievedConfigSetNames.containsAll(expectedConfigSetNames));\n\n    CollectionAdminRequest.createCategoryRoutedAlias(getAlias(), categoryField, 20,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 1, 1)\n            .setMaxShardsPerNode(2))\n        .process(solrClient);\n\n    // now we index a document\n    addDocsAndCommit(true, newDoc(SHIPS[0]));\n\n    String uninitialized = getAlias() + \"__CRA__\" + CategoryRoutedAlias.UNINITIALIZED;\n\n    // important to test that we don't try to delete the temp collection on the first document. If we did so\n    // we would be at risk of out of order execution of the deletion/creation which would leave a window\n    // of time where there were no collections in the alias. That would likely break all manner of other\n    // parts of solr.\n    assertInvariants(colVogon, uninitialized);\n\n    addDocsAndCommit(true,\n        newDoc(SHIPS[1]),\n        newDoc(SHIPS[2]),\n        newDoc(SHIPS[3]),\n        newDoc(SHIPS[4]));\n\n    // NOW the temp collection should be gone!\n    assertInvariants(colVogon, colHoG, colStunt, colArk, colBistro);\n\n    // make sure we fail if we have no value to route on.\n    testFailedDocument(newDoc(null), \"Route value is null\");\n    testFailedDocument(newDoc(\"foo__CRA__bar\"), \"7 character sequence __CRA__\");\n    testFailedDocument(newDoc(\"fóóCRAóóbar\"), \"7 character sequence __CRA__\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["7bf78a55e1864fa3f0c50ca04de0a010a800e533"],"7bf78a55e1864fa3f0c50ca04de0a010a800e533":["b627755385655c7cd3fb296f17593658805cf4d5"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b627755385655c7cd3fb296f17593658805cf4d5"],"b627755385655c7cd3fb296f17593658805cf4d5":["7bf78a55e1864fa3f0c50ca04de0a010a800e533"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"7bf78a55e1864fa3f0c50ca04de0a010a800e533":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}