{"path":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","commits":[{"id":"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1","date":1342716838,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"/dev/null","sourceNew":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      if (DEBUG) {\n        System.out.println(\"  FPR.reset: seg=\" + segment + \" termState=\" + termState);\n      }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      docBufferUpto = blockSize;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4ec9bf47a9d01bbe2f1effe4d84c3d9bbd39c80","date":1343936895,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      if (DEBUG) {\n        System.out.println(\"  FPR.reset: seg=\" + segment + \" termState=\" + termState);\n      }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      docBufferUpto = blockSize;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      if (DEBUG) {\n        System.out.println(\"  FPR.reset: seg=\" + segment + \" termState=\" + termState);\n      }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      docBufferUpto = blockSize;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51","date":1344355078,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      if (DEBUG) {\n        System.out.println(\"  FPR.reset: seg=\" + segment + \" termState=\" + termState);\n      }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      if (DEBUG) {\n        System.out.println(\"  FPR.reset: seg=\" + segment + \" termState=\" + termState);\n      }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      docBufferUpto = blockSize;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"660e1649fe0b5350127e9a2f7c4c3a5861883bee","date":1344374774,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      if (DEBUG) {\n        System.out.println(\"  FPR.reset: seg=\" + segment + \" termState=\" + termState);\n      }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      if (DEBUG) {\n        System.out.println(\"  FPR.reset: seg=\" + segment + \" termState=\" + termState);\n      }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"007463e97416788017c563017736002c3f72ea73","date":1344616184,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      if (DEBUG) {\n        System.out.println(\"  FPR.reset: termState=\" + termState);\n      }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      if (DEBUG) {\n        System.out.println(\"  FPR.reset: seg=\" + segment + \" termState=\" + termState);\n      }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcc6cbc7e8693270112e8d40ca98226199c0288e","date":1345039720,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      if (DEBUG) {\n        System.out.println(\"  FPR.reset: termState=\" + termState);\n      }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"/dev/null","sourceNew":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"/dev/null","sourceNew":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"007463e97416788017c563017736002c3f72ea73":["660e1649fe0b5350127e9a2f7c4c3a5861883bee"],"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"660e1649fe0b5350127e9a2f7c4c3a5861883bee":["d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcc6cbc7e8693270112e8d40ca98226199c0288e"],"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51":["e4ec9bf47a9d01bbe2f1effe4d84c3d9bbd39c80"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e4ec9bf47a9d01bbe2f1effe4d84c3d9bbd39c80":["e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"fcc6cbc7e8693270112e8d40ca98226199c0288e":["007463e97416788017c563017736002c3f72ea73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"007463e97416788017c563017736002c3f72ea73":["fcc6cbc7e8693270112e8d40ca98226199c0288e"],"001b25b42373b22a52f399dbf072f1224632e8e6":[],"660e1649fe0b5350127e9a2f7c4c3a5861883bee":["007463e97416788017c563017736002c3f72ea73"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","f8615860cb50aefb8eebca1d1b3893dbe21cf126","e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51":["660e1649fe0b5350127e9a2f7c4c3a5861883bee"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["e4ec9bf47a9d01bbe2f1effe4d84c3d9bbd39c80"],"e4ec9bf47a9d01bbe2f1effe4d84c3d9bbd39c80":["d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51"],"fcc6cbc7e8693270112e8d40ca98226199c0288e":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}