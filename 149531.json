{"path":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#acquire().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#acquire().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#acquire().mjava","sourceNew":"  /**\n   * Obtain the current IndexSearcher. You must match every call to acquire with\n   * one call to {@link #release}; it's best to do so in a finally clause.\n   */\n  public IndexSearcher acquire() {\n    IndexSearcher searcher;\n    do {\n      if ((searcher = currentSearcher) == null) {\n        throw new AlreadyClosedException(\"this SearcherManager is closed\");\n      }\n    } while (!searcher.getIndexReader().tryIncRef());\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Obtain the current IndexSearcher. You must match every call to acquire with\n   * one call to {@link #release}; it's best to do so in a finally clause.\n   */\n  public IndexSearcher acquire() {\n    IndexSearcher searcher;\n    do {\n      if ((searcher = currentSearcher) == null) {\n        throw new AlreadyClosedException(\"this SearcherManager is closed\");\n      }\n    } while (!searcher.getIndexReader().tryIncRef());\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e81b0b3c14cf61c8ec366450276ab80654f7d0d","date":1329233774,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#acquire().mjava","sourceNew":null,"sourceOld":"  /**\n   * Obtain the current IndexSearcher. You must match every call to acquire with\n   * one call to {@link #release}; it's best to do so in a finally clause.\n   */\n  public IndexSearcher acquire() {\n    IndexSearcher searcher;\n    do {\n      if ((searcher = currentSearcher) == null) {\n        throw new AlreadyClosedException(\"this SearcherManager is closed\");\n      }\n    } while (!searcher.getIndexReader().tryIncRef());\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e81b0b3c14cf61c8ec366450276ab80654f7d0d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e81b0b3c14cf61c8ec366450276ab80654f7d0d"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6e81b0b3c14cf61c8ec366450276ab80654f7d0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6e81b0b3c14cf61c8ec366450276ab80654f7d0d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}