{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs)\n        throws IOException {\n      if (termConjunction) {\n        // specialized scorer for term conjunctions\n        return createConjunctionTermScorer(context, acceptDocs);\n      }\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      if (!scoreDocsInOrder && topScorer && required.size() == 0) {\n        return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(this, disableCoord, minNrShouldMatch, required, prohibited, optional, maxCoord);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs)\n        throws IOException {\n      if (termConjunction) {\n        // specialized scorer for term conjunctions\n        return createConjunctionTermScorer(context, acceptDocs);\n      }\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      if (!scoreDocsInOrder && topScorer && required.size() == 0) {\n        return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(this, disableCoord, minNrShouldMatch, required, prohibited, optional, maxCoord);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9077d5b75341449d301fabe30aef8754e77bc19","date":1347642993,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs)\n        throws IOException {\n      if (termConjunction) {\n        // specialized scorer for term conjunctions\n        return createConjunctionTermScorer(context, acceptDocs);\n      }\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      // NOTE: we could also use BooleanScorer, if we knew\n      // this BooleanQuery was embedded in another\n      // BooleanQuery that was also using BooleanScorer (ie,\n      // BooleanScorer can nest).  But this is hard to\n      // detect and we never do so today... (ie, we only\n      // return BooleanScorer for topScorer):\n\n      // Check if we can return a BooleanScorer\n      if (!scoreDocsInOrder && topScorer && required.size() == 0) {\n        return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(this, disableCoord, minNrShouldMatch, required, prohibited, optional, maxCoord);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs)\n        throws IOException {\n      if (termConjunction) {\n        // specialized scorer for term conjunctions\n        return createConjunctionTermScorer(context, acceptDocs);\n      }\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      if (!scoreDocsInOrder && topScorer && required.size() == 0) {\n        return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(this, disableCoord, minNrShouldMatch, required, prohibited, optional, maxCoord);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","date":1363294103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs)\n        throws IOException {\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      // NOTE: we could also use BooleanScorer, if we knew\n      // this BooleanQuery was embedded in another\n      // BooleanQuery that was also using BooleanScorer (ie,\n      // BooleanScorer can nest).  But this is hard to\n      // detect and we never do so today... (ie, we only\n      // return BooleanScorer for topScorer):\n\n      // Check if we can return a BooleanScorer\n      if (!scoreDocsInOrder && topScorer && required.size() == 0) {\n        return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      if (optional.size() == 0 && prohibited.size() == 0) {\n        float coord = disableCoord ? 1.0f : coord(required.size(), maxCoord);\n        return new ConjunctionScorer(this, required.toArray(new Scorer[required.size()]), coord);\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(this, disableCoord, minNrShouldMatch, required, prohibited, optional, maxCoord);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs)\n        throws IOException {\n      if (termConjunction) {\n        // specialized scorer for term conjunctions\n        return createConjunctionTermScorer(context, acceptDocs);\n      }\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      // NOTE: we could also use BooleanScorer, if we knew\n      // this BooleanQuery was embedded in another\n      // BooleanQuery that was also using BooleanScorer (ie,\n      // BooleanScorer can nest).  But this is hard to\n      // detect and we never do so today... (ie, we only\n      // return BooleanScorer for topScorer):\n\n      // Check if we can return a BooleanScorer\n      if (!scoreDocsInOrder && topScorer && required.size() == 0) {\n        return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(this, disableCoord, minNrShouldMatch, required, prohibited, optional, maxCoord);\n    }\n\n","bugFix":["ee1513e4ee2237693ff50a460d78dff5246c3d34","3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34960be55e437a6c96fe66046bf22d33346059f6","date":1363980156,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs)\n        throws IOException {\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      // NOTE: we could also use BooleanScorer, if we knew\n      // this BooleanQuery was embedded in another\n      // BooleanQuery that was also using BooleanScorer (ie,\n      // BooleanScorer can nest).  But this is hard to\n      // detect and we never do so today... (ie, we only\n      // return BooleanScorer for topScorer):\n\n      // Check if we can and should return a BooleanScorer\n      // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n      // but the same is even true of pure conjunctions...\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && minNrShouldMatch <= 1) {\n        return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      if (optional.size() == 0 && prohibited.size() == 0) {\n        float coord = disableCoord ? 1.0f : coord(required.size(), maxCoord);\n        return new ConjunctionScorer(this, required.toArray(new Scorer[required.size()]), coord);\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(this, disableCoord, minNrShouldMatch, required, prohibited, optional, maxCoord);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs)\n        throws IOException {\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      // NOTE: we could also use BooleanScorer, if we knew\n      // this BooleanQuery was embedded in another\n      // BooleanQuery that was also using BooleanScorer (ie,\n      // BooleanScorer can nest).  But this is hard to\n      // detect and we never do so today... (ie, we only\n      // return BooleanScorer for topScorer):\n\n      // Check if we can return a BooleanScorer\n      if (!scoreDocsInOrder && topScorer && required.size() == 0) {\n        return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      if (optional.size() == 0 && prohibited.size() == 0) {\n        float coord = disableCoord ? 1.0f : coord(required.size(), maxCoord);\n        return new ConjunctionScorer(this, required.toArray(new Scorer[required.size()]), coord);\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(this, disableCoord, minNrShouldMatch, required, prohibited, optional, maxCoord);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7","date":1365610867,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs)\n        throws IOException {\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      // NOTE: we could also use BooleanScorer, if we knew\n      // this BooleanQuery was embedded in another\n      // BooleanQuery that was also using BooleanScorer (ie,\n      // BooleanScorer can nest).  But this is hard to\n      // detect and we never do so today... (ie, we only\n      // return BooleanScorer for topScorer):\n\n      // Check if we can and should return a BooleanScorer\n      // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n      // but the same is even true of pure conjunctions...\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && minNrShouldMatch <= 1) {\n        return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // simple conjunction\n      if (optional.size() == 0 && prohibited.size() == 0) {\n        float coord = disableCoord ? 1.0f : coord(required.size(), maxCoord);\n        return new ConjunctionScorer(this, required.toArray(new Scorer[required.size()]), coord);\n      }\n      \n      // simple disjunction\n      if (required.size() == 0 && prohibited.size() == 0 && minNrShouldMatch <= 1 && optional.size() > 1) {\n        float coord[] = new float[optional.size()+1];\n        for (int i = 0; i < coord.length; i++) {\n          coord[i] = disableCoord ? 1.0f : coord(i, maxCoord);\n        }\n        return new DisjunctionSumScorer(this, optional.toArray(new Scorer[optional.size()]), coord);\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(this, disableCoord, minNrShouldMatch, required, prohibited, optional, maxCoord);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs)\n        throws IOException {\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      // NOTE: we could also use BooleanScorer, if we knew\n      // this BooleanQuery was embedded in another\n      // BooleanQuery that was also using BooleanScorer (ie,\n      // BooleanScorer can nest).  But this is hard to\n      // detect and we never do so today... (ie, we only\n      // return BooleanScorer for topScorer):\n\n      // Check if we can and should return a BooleanScorer\n      // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n      // but the same is even true of pure conjunctions...\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && minNrShouldMatch <= 1) {\n        return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      if (optional.size() == 0 && prohibited.size() == 0) {\n        float coord = disableCoord ? 1.0f : coord(required.size(), maxCoord);\n        return new ConjunctionScorer(this, required.toArray(new Scorer[required.size()]), coord);\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(this, disableCoord, minNrShouldMatch, required, prohibited, optional, maxCoord);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // simple conjunction\n      if (optional.size() == 0 && prohibited.size() == 0) {\n        float coord = disableCoord ? 1.0f : coord(required.size(), maxCoord);\n        return new ConjunctionScorer(this, required.toArray(new Scorer[required.size()]), coord);\n      }\n      \n      // simple disjunction\n      if (required.size() == 0 && prohibited.size() == 0 && minNrShouldMatch <= 1 && optional.size() > 1) {\n        float coord[] = new float[optional.size()+1];\n        for (int i = 0; i < coord.length; i++) {\n          coord[i] = disableCoord ? 1.0f : coord(i, maxCoord);\n        }\n        return new DisjunctionSumScorer(this, optional.toArray(new Scorer[optional.size()]), coord);\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(this, disableCoord, minNrShouldMatch, required, prohibited, optional, maxCoord);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs)\n        throws IOException {\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      // NOTE: we could also use BooleanScorer, if we knew\n      // this BooleanQuery was embedded in another\n      // BooleanQuery that was also using BooleanScorer (ie,\n      // BooleanScorer can nest).  But this is hard to\n      // detect and we never do so today... (ie, we only\n      // return BooleanScorer for topScorer):\n\n      // Check if we can and should return a BooleanScorer\n      // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n      // but the same is even true of pure conjunctions...\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && minNrShouldMatch <= 1) {\n        return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // simple conjunction\n      if (optional.size() == 0 && prohibited.size() == 0) {\n        float coord = disableCoord ? 1.0f : coord(required.size(), maxCoord);\n        return new ConjunctionScorer(this, required.toArray(new Scorer[required.size()]), coord);\n      }\n      \n      // simple disjunction\n      if (required.size() == 0 && prohibited.size() == 0 && minNrShouldMatch <= 1 && optional.size() > 1) {\n        float coord[] = new float[optional.size()+1];\n        for (int i = 0; i < coord.length; i++) {\n          coord[i] = disableCoord ? 1.0f : coord(i, maxCoord);\n        }\n        return new DisjunctionSumScorer(this, optional.toArray(new Scorer[optional.size()]), coord);\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(this, disableCoord, minNrShouldMatch, required, prohibited, optional, maxCoord);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // simple conjunction\n      if (optional.size() == 0 && prohibited.size() == 0) {\n        float coord = disableCoord ? 1.0f : coord(required.size(), maxCoord);\n        return new ConjunctionScorer(this, required.toArray(new Scorer[required.size()]), coord);\n      }\n      \n      // simple disjunction\n      if (required.size() == 0 && prohibited.size() == 0 && minNrShouldMatch <= 1 && optional.size() > 1) {\n        float coord[] = new float[optional.size()+1];\n        for (int i = 0; i < coord.length; i++) {\n          coord[i] = disableCoord ? 1.0f : coord(i, maxCoord);\n        }\n        return new DisjunctionSumScorer(this, optional.toArray(new Scorer[optional.size()]), coord);\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(this, disableCoord, minNrShouldMatch, required, prohibited, optional, maxCoord);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs)\n        throws IOException {\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, true, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      // NOTE: we could also use BooleanScorer, if we knew\n      // this BooleanQuery was embedded in another\n      // BooleanQuery that was also using BooleanScorer (ie,\n      // BooleanScorer can nest).  But this is hard to\n      // detect and we never do so today... (ie, we only\n      // return BooleanScorer for topScorer):\n\n      // Check if we can and should return a BooleanScorer\n      // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n      // but the same is even true of pure conjunctions...\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && minNrShouldMatch <= 1) {\n        return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // simple conjunction\n      if (optional.size() == 0 && prohibited.size() == 0) {\n        float coord = disableCoord ? 1.0f : coord(required.size(), maxCoord);\n        return new ConjunctionScorer(this, required.toArray(new Scorer[required.size()]), coord);\n      }\n      \n      // simple disjunction\n      if (required.size() == 0 && prohibited.size() == 0 && minNrShouldMatch <= 1 && optional.size() > 1) {\n        float coord[] = new float[optional.size()+1];\n        for (int i = 0; i < coord.length; i++) {\n          coord[i] = disableCoord ? 1.0f : coord(i, maxCoord);\n        }\n        return new DisjunctionSumScorer(this, optional.toArray(new Scorer[optional.size()]), coord);\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(this, disableCoord, minNrShouldMatch, required, prohibited, optional, maxCoord);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7"],"34960be55e437a6c96fe66046bf22d33346059f6":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["b9077d5b75341449d301fabe30aef8754e77bc19"],"2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7":["34960be55e437a6c96fe66046bf22d33346059f6"],"b9077d5b75341449d301fabe30aef8754e77bc19":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acf00221f44c5f08ccea014f2492b53af15ecd66"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"34960be55e437a6c96fe66046bf22d33346059f6":["2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b9077d5b75341449d301fabe30aef8754e77bc19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["34960be55e437a6c96fe66046bf22d33346059f6"],"2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"b9077d5b75341449d301fabe30aef8754e77bc19":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}